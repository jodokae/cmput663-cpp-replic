<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_ra_neon/fetch.c"><comment type="block">/*
 * fetch.c :  routines for fetching updates and checkouts
 *
 * ====================================================================
 * Copyright (c) 2000-2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>


<escape char="0xc"/>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include> <comment type="block">/* for free() */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_want.h&gt;</cpp:file></cpp:include> <comment type="block">/* for strcmp() */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_tables.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_md5.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_xml.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ne_basic.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_delta.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_md5.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_base64.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_ra.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libsvn_ra/ra_loader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_xml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_dav.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_props.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_dav_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ra_neon.h"</cpp:file></cpp:include>


<typedef>typedef <type><struct>struct <block>{
  <comment type="block">/* the information for this subdir. if rsrc==NULL, then this is a sentinel
     record in fetch_ctx_t.subdirs to close the directory implied by the
     parent_baton member. */</comment>
  <decl_stmt><decl><type><name>svn_ra_neon__resource_t</name> *</type><name>rsrc</name></decl>;</decl_stmt>

  <comment type="block">/* the directory containing this subdirectory. */</comment>
  <decl_stmt><decl><type><name>void</name> *</type><name>parent_baton</name></decl>;</decl_stmt>

}</block></struct></type> <name>subdir_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>

  <comment type="block">/* these two are the handler that the editor gave us */</comment>
  <decl_stmt><decl><type><name>svn_txdelta_window_handler_t</name></type> <name>handler</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>handler_baton</name></decl>;</decl_stmt>

  <comment type="block">/* if we're receiving an svndiff, this is a parser which places the
     resulting windows into the above handler/baton. */</comment>
  <decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>stream</name></decl>;</decl_stmt>

}</block></struct></type> <name>file_read_ctx_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>do_checksum</name></decl>;</decl_stmt>  <comment type="block">/* only accumulate checksum if set */</comment>
  <decl_stmt><decl><type><name>apr_md5_ctx_t</name></type> <name>md5_context</name></decl>;</decl_stmt>  <comment type="block">/* accumulating checksum of file contents */</comment>
  <decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>stream</name></decl>;</decl_stmt>       <comment type="block">/* stream to write file contents to */</comment>
}</block></struct></type> <name>file_write_ctx_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>svn_ra_neon__request_t</name> *</type><name>req</name></decl>;</decl_stmt>  <comment type="block">/* Used to propagate errors out of the reader */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>checked_type</name></decl>;</decl_stmt>             <comment type="block">/* have we processed ctype yet? */</comment>

  <decl_stmt><decl><type><name>void</name> *</type><name>subctx</name></decl>;</decl_stmt>
}</block></struct></type> <name>custom_get_ctx_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POP_SUBDIR</name><parameter_list>(<param><type><name>sds</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(APR_ARRAY_IDX((sds), --(sds)-&gt;nelts, subdir_t *))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUSH_SUBDIR</name><parameter_list>(<param><type><name>sds</name></type></param>,<param><type><name>s</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(APR_ARRAY_PUSH((sds), subdir_t *) = (s))</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>svn_error_t</name> *</type> (*<name>prop_setter_t</name>)<parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                                       <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
                                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <block>{
  <comment type="block">/* The baton returned by the editor's open_root/open_dir */</comment>
  <decl_stmt><decl><type><name>void</name> *</type><name>baton</name></decl>;</decl_stmt>

  <comment type="block">/* Should we fetch properties for this directory when the close tag
     is found? */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>fetch_props</name></decl>;</decl_stmt>

  <comment type="block">/* The version resource URL for this directory. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>vsn_url</name></decl>;</decl_stmt>

  <comment type="block">/* A buffer which stores the relative directory name. We also use this
     for temporary construction of relative file names. */</comment>
  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>pathbuf</name></decl>;</decl_stmt>

  <comment type="block">/* If a directory, this may contain a hash of prophashes returned
     from doing a depth 1 PROPFIND. */</comment>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>children</name></decl>;</decl_stmt>

  <comment type="block">/* A subpool.  It's about memory.  Ya dig? */</comment>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>

}</block></struct></type> <name>dir_item_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>svn_ra_neon__session_t</name> *</type><name>ras</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>apr_file_t</name> *</type><name>tmpfile</name></decl>;</decl_stmt>

  <comment type="block">/* The pool of the report baton; used for things that must live during the
     whole editing operation. */</comment>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
  <comment type="block">/* Pool initialized when the report_baton is created, and meant for
     quick scratchwork.  This is like a loop pool, but since the loop
     that drives ra_neon callbacks is in the wrong scope for us to use
     the normal loop pool idiom, we must resort to this.  Always clear
     this pool right after using it; only YOU can prevent forest fires. */</comment>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>scratch_pool</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>fetch_content</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>fetch_props</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>editor</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>edit_baton</name></decl>;</decl_stmt>

  <comment type="block">/* Stack of directory batons/vsn_urls. */</comment>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>dirs</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOP_DIR</name><parameter_list>(<param><type><name>rb</name></type></param>)</parameter_list></cpp:macro>      <cpp:value>(APR_ARRAY_IDX((rb)-&gt;dirs, (rb)-&gt;dirs-&gt;nelts - 1, \
                          dir_item_t))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIR_DEPTH</name><parameter_list>(<param><type><name>rb</name></type></param>)</parameter_list></cpp:macro>    <cpp:value>((rb)-&gt;dirs-&gt;nelts)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUSH_BATON</name><parameter_list>(<param><type><name>rb</name></type></param>,<param><type><name>b</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(APR_ARRAY_PUSH((rb)-&gt;dirs, void *) = (b))</cpp:value></cpp:define>

  <comment type="block">/* These items are only valid inside add- and open-file tags! */</comment>
  <decl_stmt><decl><type><name>void</name> *</type><name>file_baton</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>file_pool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>result_checksum</name></decl>;</decl_stmt> <comment type="block">/* hex md5 digest of result; may be null */</comment>

  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>namestr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>cpathstr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>href</name></decl>;</decl_stmt>

  <comment type="block">/* Empty string means no encoding, "base64" means base64. */</comment>
  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>encoding</name></decl>;</decl_stmt>

  <comment type="block">/* These are used when receiving an inline txdelta, and null at all
     other times. */</comment>
  <decl_stmt><decl><type><name>svn_txdelta_window_handler_t</name></type> <name>whandler</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>whandler_baton</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>svndiff_decoder</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>base64_decoder</name></decl>;</decl_stmt>

  <comment type="block">/* A generic accumulator for elements that have small bits of cdata,
     like md5_checksum, href, etc.  Uh, or where our own API gives us
     no choice about holding them in memory, as with prop values, ahem.
     This is always the empty stringbuf when not in use. */</comment>
  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>cdata_accum</name></decl>;</decl_stmt>

  <comment type="block">/* Are we inside a resource element? */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>in_resource</name></decl>;</decl_stmt>
  <comment type="block">/* Valid if in_resource is true. */</comment>
  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>current_wcprop_path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>is_switch</name></decl>;</decl_stmt>

  <comment type="block">/* Named target, or NULL if none.  For example, in 'svn up wc/foo',
     this is "wc/foo", but in 'svn up' it is "".

     The target helps us determine whether a response received from
     the server should be acted on.  Take 'svn up wc/foo': the server
     may send back a new vsn-rsrc-url wcprop for 'wc' (because the
     report had to be anchored there just in case the update deletes
     wc/foo).  While this is correct behavior for the server, the
     client should ignore the new wcprop, because the client knows
     it's not really updating the top level directory. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl>;</decl_stmt>

  <comment type="block">/* Whether the server should try to send copyfrom arguments. */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>send_copyfrom_args</name></decl>;</decl_stmt>

  <comment type="block">/* Use an intermediate tmpfile for the REPORT response. */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>spool_response</name></decl>;</decl_stmt>

  <comment type="block">/* A modern server will understand our "send-all" attribute on the
     update report request, and will put a "send-all" attribute on
     its response.  If we see that attribute, we set this to true,
     otherwise, it stays false (i.e., it's not a modern server). */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>receiving_all</name></decl>;</decl_stmt>

  <comment type="block">/* Hash mapping 'const char *' paths -&gt; 'const char *' lock tokens. */</comment>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>lock_tokens</name></decl>;</decl_stmt>

}</block></struct></type> <name>report_baton_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_ra_neon__xml_elm_t</name></type> <name><name>report_elements</name><index>[]</index></name> <init>=
<expr><block>{
  <expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"update-report"</expr>, <expr><name>ELEM_update_report</name></expr>, <expr>0</expr> }</block></expr>,
  <expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"resource-walk"</expr>, <expr><name>ELEM_resource_walk</name></expr>, <expr>0</expr> }</block></expr>,
  <expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"resource"</expr>, <expr><name>ELEM_resource</name></expr>, <expr>0</expr> }</block></expr>,
  <expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"target-revision"</expr>, <expr><name>ELEM_target_revision</name></expr>, <expr>0</expr> }</block></expr>,
  <expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"open-directory"</expr>, <expr><name>ELEM_open_directory</name></expr>, <expr>0</expr> }</block></expr>,
  <expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"add-directory"</expr>, <expr><name>ELEM_add_directory</name></expr>, <expr>0</expr> }</block></expr>,
  <expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"absent-directory"</expr>, <expr><name>ELEM_absent_directory</name></expr>, <expr>0</expr> }</block></expr>,
  <expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"open-file"</expr>, <expr><name>ELEM_open_file</name></expr>, <expr>0</expr> }</block></expr>,
  <expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"add-file"</expr>, <expr><name>ELEM_add_file</name></expr>, <expr>0</expr> }</block></expr>,
  <expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"txdelta"</expr>, <expr><name>ELEM_txdelta</name></expr>, <expr>0</expr> }</block></expr>,
  <expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"absent-file"</expr>, <expr><name>ELEM_absent_file</name></expr>, <expr>0</expr> }</block></expr>,
  <expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"delete-entry"</expr>, <expr><name>ELEM_delete_entry</name></expr>, <expr>0</expr> }</block></expr>,
  <expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"fetch-props"</expr>, <expr><name>ELEM_fetch_props</name></expr>, <expr>0</expr> }</block></expr>,
  <expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"set-prop"</expr>, <expr><name>ELEM_set_prop</name></expr>, <expr>0</expr> }</block></expr>,
  <expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"remove-prop"</expr>, <expr><name>ELEM_remove_prop</name></expr>, <expr>0</expr> }</block></expr>,
  <expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"fetch-file"</expr>, <expr><name>ELEM_fetch_file</name></expr>, <expr>0</expr> }</block></expr>,
  <expr><block>{ <expr><name>SVN_XML_NAMESPACE</name></expr>, <expr>"prop"</expr>, <expr><name>ELEM_SVN_prop</name></expr>, <expr>0</expr> }</block></expr>,
  <expr><block>{ <expr><name>SVN_DAV_PROP_NS_DAV</name></expr>, <expr>"repository-uuid"</expr>,
    <expr><name>ELEM_repository_uuid</name></expr>, <expr><name>SVN_RA_NEON__XML_CDATA</name></expr> }</block></expr>,

  <expr><block>{ <expr><name>SVN_DAV_PROP_NS_DAV</name></expr>, <expr>"md5-checksum"</expr>, <expr><name>ELEM_md5_checksum</name></expr>,
    <expr><name>SVN_RA_NEON__XML_CDATA</name></expr> }</block></expr>,

  <expr><block>{ <expr>"DAV:"</expr>, <expr>"version-name"</expr>, <expr><name>ELEM_version_name</name></expr>, <expr><name>SVN_RA_NEON__XML_CDATA</name></expr> }</block></expr>,
  <expr><block>{ <expr>"DAV:"</expr>, <expr><name>SVN_DAV__CREATIONDATE</name></expr>, <expr><name>ELEM_creationdate</name></expr>, <expr><name>SVN_RA_NEON__XML_CDATA</name></expr> }</block></expr>,
  <expr><block>{ <expr>"DAV:"</expr>, <expr>"creator-displayname"</expr>, <expr><name>ELEM_creator_displayname</name></expr>,
     <expr><name>SVN_RA_NEON__XML_CDATA</name></expr> }</block></expr>,

  <expr><block>{ <expr>"DAV:"</expr>, <expr>"checked-in"</expr>, <expr><name>ELEM_checked_in</name></expr>, <expr>0</expr> }</block></expr>,
  <expr><block>{ <expr>"DAV:"</expr>, <expr>"href"</expr>, <expr><name>ELEM_href</name></expr>, <expr><name>SVN_RA_NEON__XML_CDATA</name></expr> }</block></expr>,

  <expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>simple_store_vsn_url</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>vsn_url</name></decl></param>,
                                         <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                                         <param><decl><type><name>prop_setter_t</name></type> <name>setter</name></decl></param>,
                                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <comment type="block">/* store the version URL as a property */</comment>
  <expr_stmt><expr><call><name>SVN_ERR_W</name><argument_list>(<argument><expr><call>(*<name>setter</name>)<argument_list>(<argument><expr><name>baton</name></expr></argument>, <argument><expr><name>SVN_RA_NEON__LP_VSN_URL</name></expr></argument>,
                      <argument><expr><call><name>svn_string_create</name><argument_list>(<argument><expr><name>vsn_url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Could not save the URL of the version resource"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>get_delta_base</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>delta_base</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>relpath</name></decl></param>,
                                   <param><decl><type><name>svn_ra_get_wc_prop_func_t</name></type> <name>get_wc_prop</name></decl></param>,
                                   <param><decl><type><name>void</name> *</type><name>cb_baton</name></decl></param>,
                                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>relpath</name> == <name>NULL</name> || <name>get_wc_prop</name> == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr>*<name>delta_base</name> = <name>NULL</name></expr>;</expr_stmt>
      <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
    }</block></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call>(*<name>get_wc_prop</name>)<argument_list>(<argument><expr><name>cb_baton</name></expr></argument>, <argument><expr><name>relpath</name></expr></argument>, <argument><expr><name>SVN_RA_NEON__LP_VSN_URL</name></expr></argument>,
                         <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>delta_base</name> = <name>value</name> ? <name><name>value</name>-&gt;<name>data</name></name> : <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* helper func which maps certain DAV: properties to svn:wc:
   properties.  Used during checkouts and updates.  */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>set_special_wc_prop</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>,
                                        <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>val</name></decl></param>,
                                        <param><decl><type><name>prop_setter_t</name></type> <name>setter</name></decl></param>,
                                        <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>SVN_RA_NEON__PROP_VERSION_NAME</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <expr_stmt><expr><name>name</name> = <name>SVN_PROP_ENTRY_COMMITTED_REV</name></expr>;</expr_stmt></then>
  <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>SVN_RA_NEON__PROP_CREATIONDATE</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <expr_stmt><expr><name>name</name> = <name>SVN_PROP_ENTRY_COMMITTED_DATE</name></expr>;</expr_stmt></then>
  <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>SVN_RA_NEON__PROP_CREATOR_DISPLAYNAME</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <expr_stmt><expr><name>name</name> = <name>SVN_PROP_ENTRY_LAST_AUTHOR</name></expr>;</expr_stmt></then>
  <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>SVN_RA_NEON__PROP_REPOSITORY_UUID</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <expr_stmt><expr><name>name</name> = <name>SVN_PROP_ENTRY_UUID</name></expr>;</expr_stmt></then></if></else></if></else></if></else></if>

  <comment type="block">/* If we got a name we care about it, call the setter function. */</comment>
  <if>if <condition>(<expr><name>name</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call>(*<name>setter</name>)<argument_list>(<argument><expr><name>baton</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>add_props</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl></param>,
                              <param><decl><type><name>prop_setter_t</name></type> <name>setter</name></decl></param>,
                              <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>

  <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>props</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>vkey</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name> *</type><name>vval</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>val</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>vkey</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>vval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>key</name> = <name>vkey</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>val</name> = <name>vval</name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSLEN</name></cpp:macro> <cpp:value>(sizeof(SVN_DAV_PROP_NS_CUSTOM) - 1)</cpp:value></cpp:define>
      <if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>SVN_DAV_PROP_NS_CUSTOM</name></expr></argument>, <argument><expr><name>NSLEN</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <block>{
          <comment type="block">/* for props in the 'custom' namespace, we strip the
             namespace and just use whatever name the user gave the
             property. */</comment>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call>(*<name>setter</name>)<argument_list>(<argument><expr><name>baton</name></expr></argument>, <argument><expr><name>key</name> + <name>NSLEN</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <continue>continue;</continue>
        }</block></then></if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NSLEN</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSLEN</name></cpp:macro> <cpp:value>(sizeof(SVN_DAV_PROP_NS_SVN) - 1)</cpp:value></cpp:define>
      <if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>SVN_DAV_PROP_NS_SVN</name></expr></argument>, <argument><expr><name>NSLEN</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <block>{
          <comment type="block">/* This property is an 'svn:' prop, recognized by client, or
             server, or both.  Convert the URI namespace into normal
             'svn:' prefix again before pushing it at the wc. */</comment>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call>(*<name>setter</name>)<argument_list>(<argument><expr><name>baton</name></expr></argument>, <argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>SVN_PROP_PREFIX</name></expr></argument>,
                                               <argument><expr><name>key</name> + <name>NSLEN</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><name>val</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NSLEN</name></cpp:undef>

      <else>else
        <block>{
          <comment type="block">/* If we get here, then we have a property that is neither
             in the 'custom' space, nor in the 'svn' space.  So it
             must be either in the 'network' space or 'DAV:' space.
             The following routine converts a handful of DAV: props
             into 'svn:wc:' or 'svn:entry:' props that libsvn_wc
             wants. */</comment>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>set_special_wc_prop</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>setter</name></expr></argument>, <argument><expr><name>baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></for>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>custom_get_request</name><parameter_list>(<param><decl><type><name>svn_ra_neon__session_t</name> *</type><name>ras</name></decl></param>,
                                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
                                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>relpath</name></decl></param>,
                                       <param><decl><type><name>svn_ra_neon__block_reader</name></type> <name>reader</name></decl></param>,
                                       <param><decl><type><name>void</name> *</type><name>subctx</name></decl></param>,
                                       <param><decl><type><name>svn_ra_get_wc_prop_func_t</name></type> <name>get_wc_prop</name></decl></param>,
                                       <param><decl><type><name>void</name> *</type><name>cb_baton</name></decl></param>,
                                       <param><decl><type><name>svn_boolean_t</name></type> <name>use_base</name></decl></param>,
                                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>custom_get_ctx_t</name></type> <name>cgc</name> <init>= <expr><block>{ <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>delta_base</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra_neon__request_t</name> *</type><name>request</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>use_base</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* See if we can get a version URL for this resource. This will
         refer to what we already have in the working copy, thus we
         can get a diff against this particular resource. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_delta_base</name><argument_list>(<argument><expr>&amp;<name>delta_base</name></expr></argument>, <argument><expr><name>relpath</name></expr></argument>,
                             <argument><expr><name>get_wc_prop</name></expr></argument>, <argument><expr><name>cb_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <expr_stmt><expr><name>delta_base</name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></else></if>

  <expr_stmt><expr><name>request</name> = <call><name>svn_ra_neon__request_create</name><argument_list>(<argument><expr><name>ras</name></expr></argument>, <argument><expr>"GET"</expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>delta_base</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* The HTTP delta draft uses an If-None-Match header holding an
         entity tag corresponding to the copy we have. It is much more
         natural for us to use a version URL to specify what we have.
         Thus, we want to use the If: header to specify the URL. But
         mod_dav sees all "State-token" items as lock tokens. When we
         get mod_dav updated and the backend APIs expanded, then we
         can switch to using the If: header. For now, use a custom
         header to specify the version resource to use as the base. */</comment>
      <expr_stmt><expr><call><name>ne_add_request_header</name><argument_list>(<argument><expr><name><name>request</name>-&gt;<name>ne_req</name></name></expr></argument>,
                            <argument><expr><name>SVN_DAV_DELTA_BASE_HEADER</name></expr></argument>, <argument><expr><name>delta_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <expr_stmt><expr><call><name>svn_ra_neon__add_response_body_reader</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>ne_accept_2xx</name></expr></argument>, <argument><expr><name>reader</name></expr></argument>, <argument><expr>&amp;<name>cgc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* complete initialization of the body reading context */</comment>
  <expr_stmt><expr><name><name>cgc</name>.<name>req</name></name> = <name>request</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cgc</name>.<name>subctx</name></name> = <name>subctx</name></expr>;</expr_stmt>

  <comment type="block">/* run the request */</comment>
  <expr_stmt><expr><name>err</name> = <call><name>svn_ra_neon__request_dispatch</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>request</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                      <argument><expr>200</expr></argument> <comment type="block">/* OK */</comment>,
                                      <argument><expr>226</expr></argument> <comment type="block">/* IM Used */</comment>,
                                      <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_ra_neon__request_destroy</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* The request runner raises internal errors before Neon errors,
     pass a returned error to our callers */</comment>

  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<comment type="block">/* This implements the svn_ra_neon__block_reader() callback interface. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>fetch_file_reader</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>userdata</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>len</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>custom_get_ctx_t</name> *</type><name>cgc</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>file_read_ctx_t</name> *</type><name>frc</name> <init>= <expr><name><name>cgc</name>-&gt;<name>subctx</name></name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>len</name> == 0</expr>)</condition><then>
    <block>{
      <comment type="block">/* file is complete. */</comment>
      <return>return <expr>0</expr>;</return>
    }</block></then></if>

  <if>if <condition>(<expr>!<name><name>cgc</name>-&gt;<name>checked_type</name></name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>ne_content_type</name></type> <name>ctype</name> <init>= <expr><block>{ <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><call><name>ne_get_content_type</name><argument_list>(<argument><expr><name><name>cgc</name>-&gt;<name>req</name>-&gt;<name>ne_req</name></name></expr></argument>, <argument><expr>&amp;<name>ctype</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>rv</name> != 0</expr>)</condition><then>
        <return>return
          <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_RESPONSE_HEADER_BADNESS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                           <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Could not get content-type from response"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>

      <comment type="block">/* Neon guarantees non-NULL values when rv==0 */</comment>
      <if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name><name>ctype</name>.<name>type</name></name></expr></argument>, <argument><expr>"application"</expr></argument>)</argument_list></call>
          &amp;&amp; !<call><name>strcmp</name><argument_list>(<argument><expr><name><name>ctype</name>.<name>subtype</name></name></expr></argument>, <argument><expr>"vnd.svn-svndiff"</expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
          <comment type="block">/* we are receiving an svndiff. set things up. */</comment>
          <expr_stmt><expr><name><name>frc</name>-&gt;<name>stream</name></name> = <call><name>svn_txdelta_parse_svndiff</name><argument_list>(<argument><expr><name><name>frc</name>-&gt;<name>handler</name></name></expr></argument>,
                                                  <argument><expr><name><name>frc</name>-&gt;<name>handler_baton</name></name></expr></argument>,
                                                  <argument><expr><name>TRUE</name></expr></argument>,
                                                  <argument><expr><name><name>frc</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

      <if>if <condition>(<expr><name><name>ctype</name>.<name>value</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ctype</name>.<name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <expr_stmt><expr><name><name>cgc</name>-&gt;<name>checked_type</name></name> = 1</expr>;</expr_stmt>
    }</block></then></if>

  <if>if <condition>(<expr><name><name>frc</name>-&gt;<name>stream</name></name> == <name>NULL</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* receiving plain text. construct a window for it. */</comment>

      <decl_stmt><decl><type><name>svn_txdelta_window_t</name></type> <name>window</name> <init>= <expr><block>{ <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_txdelta_op_t</name></type> <name>op</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_string_t</name></type> <name>data</name></decl>;</decl_stmt>

      <expr_stmt><expr><name><name>data</name>.<name>data</name></name> = <name>buf</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>data</name>.<name>len</name></name> = <name>len</name></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>op</name>.<name>action_code</name></name> = <name>svn_txdelta_new</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>op</name>.<name>offset</name></name> = 0</expr>;</expr_stmt>
      <expr_stmt><expr><name><name>op</name>.<name>length</name></name> = <name>len</name></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>window</name>.<name>tview_len</name></name> = <name>len</name></expr>;</expr_stmt>       <comment type="block">/* result will be this long */</comment>
      <expr_stmt><expr><name><name>window</name>.<name>num_ops</name></name> = 1</expr>;</expr_stmt>
      <expr_stmt><expr><name><name>window</name>.<name>ops</name></name> = &amp;<name>op</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>window</name>.<name>new_data</name></name> = &amp;<name>data</name></expr>;</expr_stmt>

      <comment type="block">/* We can't really do anything useful if we get an error here.  Pass
         it off to someone who can. */</comment>
      <expr_stmt><expr><call><name>SVN_RA_NEON__REQ_ERR</name>
        <argument_list>(<argument><expr><name><name>cgc</name>-&gt;<name>req</name></name></expr></argument>,
         <argument><expr><call>(*<name><name>frc</name>-&gt;<name>handler</name></name>)<argument_list>(<argument><expr>&amp;<name>window</name></expr></argument>, <argument><expr><name><name>frc</name>-&gt;<name>handler_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <comment type="block">/* receiving svndiff. feed it to the svndiff parser. */</comment>

      <decl_stmt><decl><type><name>apr_size_t</name></type> <name>written</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_write</name><argument_list>(<argument><expr><name><name>frc</name>-&gt;<name>stream</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>&amp;<name>written</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* ### the svndiff stream parser does not obey svn_stream semantics
         ### in its write handler. it does not output the number of bytes
         ### consumed by the handler. specifically, it may decrement the
         ### number by 4 for the header, then never touch it again. that
         ### makes it appear like an incomplete write.
         ### disable this check for now. the svndiff parser actually does
         ### consume all bytes, all the time.
      */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
      if (written != len &amp;&amp; cgc-&gt;err == NULL)
        cgc-&gt;err = svn_error_createf(SVN_ERR_INCOMPLETE_DATA, NULL,
                                     "Unable to completely write the svndiff "
                                     "data to the parser stream "
                                     "(wrote " APR_SIZE_T_FMT " "
                                     "of " APR_SIZE_T_FMT " bytes)",
                                     written, len);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    }</block></else></if>

  <return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>simple_fetch_file</name><parameter_list>(<param><decl><type><name>svn_ra_neon__session_t</name> *</type><name>ras</name></decl></param>,
                                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
                                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>relpath</name></decl></param>,
                                      <param><decl><type><name>svn_boolean_t</name></type> <name>text_deltas</name></decl></param>,
                                      <param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
                                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_checksum</name></decl></param>,
                                      <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>editor</name></decl></param>,
                                      <param><decl><type><name>svn_ra_get_wc_prop_func_t</name></type> <name>get_wc_prop</name></decl></param>,
                                      <param><decl><type><name>void</name> *</type><name>cb_baton</name></decl></param>,
                                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>file_read_ctx_t</name></type> <name>frc</name> <init>= <expr><block>{ <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR_W</name><argument_list>(<argument><expr><call>(*<name><name>editor</name>-&gt;<name>apply_textdelta</name></name>)<argument_list>(<argument><expr><name>file_baton</name></expr></argument>,
                                       <argument><expr><name>base_checksum</name></expr></argument>,
                                       <argument><expr><name>pool</name></expr></argument>,
                                       <argument><expr>&amp;<name><name>frc</name>.<name>handler</name></name></expr></argument>,
                                       <argument><expr>&amp;<name><name>frc</name>.<name>handler_baton</name></name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Could not save file"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Only bother with text-deltas if our caller cares. */</comment>
  <if>if <condition>(<expr>! <name>text_deltas</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call>(*<name><name>frc</name>.<name>handler</name></name>)<argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>frc</name>.<name>handler_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
    }</block></then></if>

  <expr_stmt><expr><name><name>frc</name>.<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>custom_get_request</name><argument_list>(<argument><expr><name>ras</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>relpath</name></expr></argument>,
                             <argument><expr><name>fetch_file_reader</name></expr></argument>, <argument><expr>&amp;<name>frc</name></expr></argument>,
                             <argument><expr><name>get_wc_prop</name></expr></argument>, <argument><expr><name>cb_baton</name></expr></argument>,
                             <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* close the handler, since the file reading completed successfully. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call>(*<name><name>frc</name>.<name>handler</name></name>)<argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>frc</name>.<name>handler_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Helper for svn_ra_neon__get_file.  This implements
   the svn_ra_neon__block_reader() callback interface. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>get_file_reader</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>userdata</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>len</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>custom_get_ctx_t</name> *</type><name>cgc</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* The stream we want to push data at. */</comment>
  <decl_stmt><decl><type><name>file_write_ctx_t</name> *</type><name>fwc</name> <init>= <expr><name><name>cgc</name>-&gt;<name>subctx</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>stream</name> <init>= <expr><name><name>fwc</name>-&gt;<name>stream</name></name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>fwc</name>-&gt;<name>do_checksum</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name>apr_md5_update</name><argument_list>(<argument><expr>&amp;(<name><name>fwc</name>-&gt;<name>md5_context</name></name>)</expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <comment type="block">/* Write however many bytes were passed in by neon. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_write</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* minor helper for svn_ra_neon__get_file, of type prop_setter_t */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>add_prop_to_hash</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>ht</name> <init>= <expr>(<name>apr_hash_t</name> *) <name>baton</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Helper for svn_ra_neon__get_file(), svn_ra_neon__get_dir(), and
   svn_ra_neon__rev_proplist().

   Loop over the properties in RSRC-&gt;propset, examining namespaces and
   such to filter Subversion, custom, etc. properties.

   User-visible props get added to the PROPS hash (alloced in POOL).

   If ADD_ENTRY_PROPS is true, then "special" working copy entry-props
   are added to the hash by set_special_wc_prop().
*/</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>filter_props</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl></param>,
             <param><decl><type><name>svn_ra_neon__resource_t</name> *</type><name>rsrc</name></decl></param>,
             <param><decl><type><name>svn_boolean_t</name></type> <name>add_entry_props</name></decl></param>,
             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>

  <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>rsrc</name>-&gt;<name>propset</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>name</name> = <name>key</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>value</name> = <call><name>svn_string_dup</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* If the property is in the 'custom' namespace, then it's a
         normal user-controlled property coming from the fs.  Just
         strip off this prefix and add to the hash. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSLEN</name></cpp:macro> <cpp:value>(sizeof(SVN_DAV_PROP_NS_CUSTOM) - 1)</cpp:value></cpp:define>
      <if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_DAV_PROP_NS_CUSTOM</name></expr></argument>, <argument><expr><name>NSLEN</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>name</name> + <name>NSLEN</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <continue>continue;</continue>
        }</block></then></if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NSLEN</name></cpp:undef>

      <comment type="block">/* If the property is in the 'svn' namespace, then it's a
         normal user-controlled property coming from the fs.  Just
         strip off the URI prefix, add an 'svn:', and add to the hash. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSLEN</name></cpp:macro> <cpp:value>(sizeof(SVN_DAV_PROP_NS_SVN) - 1)</cpp:value></cpp:define>
      <if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_DAV_PROP_NS_SVN</name></expr></argument>, <argument><expr><name>NSLEN</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>props</name></expr></argument>,
                       <argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>SVN_PROP_PREFIX</name></expr></argument>, <argument><expr><name>name</name> + <name>NSLEN</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
                       <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                       <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <continue>continue;</continue>
        }</block></then>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NSLEN</name></cpp:undef>
      <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_RA_NEON__PROP_CHECKED_IN</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <block>{
          <comment type="block">/* For files, we currently only have one 'wc' prop. */</comment>
          <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>SVN_RA_NEON__LP_VSN_URL</name></expr></argument>,
                       <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else
        <block>{
          <comment type="block">/* If it's one of the 'entry' props, this func will
             recognize the DAV: name &amp; add it to the hash mapped to a
             new name recognized by libsvn_wc. */</comment>
          <if>if <condition>(<expr><name>add_entry_props</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>set_special_wc_prop</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>add_prop_to_hash</name></expr></argument>,
                                        <argument><expr><name>props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></else></if></else></if>
    }</block></for>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_neon__get_file</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                   <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                                   <param><decl><type><name>svn_stream_t</name> *</type><name>stream</name></decl></param>,
                                   <param><decl><type><name>svn_revnum_t</name> *</type><name>fetched_rev</name></decl></param>,
                                   <param><decl><type><name>apr_hash_t</name> **</type><name>props</name></decl></param>,
                                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_ra_neon__resource_t</name> *</type><name>rsrc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>final_url</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra_neon__session_t</name> *</type><name>ras</name> <init>= <expr><name><name>session</name>-&gt;<name>priv</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name> <init>= <expr><call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>ras</name>-&gt;<name>url</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* If the revision is invalid (head), then we're done.  Just fetch
     the public URL, because that will always get HEAD. */</comment>
  <if>if <condition>(<expr>(! <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>revision</name></expr></argument>)</argument_list></call>) &amp;&amp; (<name>fetched_rev</name> == <name>NULL</name>)</expr>)</condition><then>
    <expr_stmt><expr><name>final_url</name> = <name>url</name></expr>;</expr_stmt></then>

  <comment type="block">/* If the revision is something specific, we need to create a bc_url. */</comment>
  <else>else
    <block>{
      <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>got_rev</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_string_t</name></type> <name>bc_url</name></decl>, <decl><type ref="prev"/><name>bc_relative</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__get_baseline_info</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,
                                             <argument><expr>&amp;<name>bc_url</name></expr></argument>, <argument><expr>&amp;<name>bc_relative</name></expr></argument>,
                                             <argument><expr>&amp;<name>got_rev</name></expr></argument>,
                                             <argument><expr><name>ras</name></expr></argument>,
                                             <argument><expr><name>url</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>,
                                             <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>final_url</name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>bc_url</name>.<name>data</name></name></expr></argument>,
                                             <argument><expr><name><name>bc_relative</name>.<name>data</name></name></expr></argument>,
                                             <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>fetched_rev</name> != <name>NULL</name></expr>)</condition><then>
        <expr_stmt><expr>*<name>fetched_rev</name> = <name>got_rev</name></expr>;</expr_stmt></then></if>
    }</block></else></if>

  <if>if <condition>(<expr><name>stream</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>expected_checksum</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>file_write_ctx_t</name></type> <name>fwc</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>ne_propname</name></type> <name>md5_propname</name> <init>= <expr><block>{ <expr><name>SVN_DAV_PROP_NS_DAV</name></expr>, <expr>"md5-checksum"</expr> }</block></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><name>APR_MD5_DIGESTSIZE</name></expr>]</index></name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>hex_digest</name></decl>;</decl_stmt>

      <comment type="block">/* Only request a checksum if we're getting the file contents. */</comment>
      <comment type="block">/* ### We should arrange for the checksum to be returned in the
         svn_ra_neon__get_baseline_info() call above; that will prevent
         the extra round trip, at least some of the time. */</comment>
      <expr_stmt><expr><name>err</name> = <call><name>svn_ra_neon__get_one_prop</name><argument_list>(<argument><expr>&amp;<name>expected_checksum</name></expr></argument>,
                                      <argument><expr><name>ras</name></expr></argument>,
                                      <argument><expr><name>final_url</name></expr></argument>,
                                      <argument><expr><name>NULL</name></expr></argument>,
                                      <argument><expr>&amp;<name>md5_propname</name></expr></argument>,
                                      <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Older servers don't serve this prop, but that's okay. */</comment>
      <comment type="block">/* ### temporary hack for 0.17. if the server doesn't have the prop,
         ### then __get_one_prop returns an empty string. deal with it.  */</comment>
      <if>if <condition>(<expr>(<name>err</name> &amp;&amp; (<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_RA_DAV_PROPS_NOT_FOUND</name>))
          || (<name>expected_checksum</name> &amp;&amp; (*<name><name>expected_checksum</name>-&gt;<name>data</name></name> == '\0'))</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name><name>fwc</name>.<name>do_checksum</name></name> = <name>FALSE</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
        <return>return <expr><name>err</name></expr>;</return></then>
      <else>else
        <expr_stmt><expr><name><name>fwc</name>.<name>do_checksum</name></name> = <name>TRUE</name></expr>;</expr_stmt></else></if></else></if>

      <expr_stmt><expr><name><name>fwc</name>.<name>stream</name></name> = <name>stream</name></expr>;</expr_stmt>

      <if>if <condition>(<expr><name><name>fwc</name>.<name>do_checksum</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>apr_md5_init</name><argument_list>(<argument><expr>&amp;(<name><name>fwc</name>.<name>md5_context</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <comment type="block">/* Fetch the file, shoving it at the provided stream. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>custom_get_request</name><argument_list>(<argument><expr><name>ras</name></expr></argument>, <argument><expr><name>final_url</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
                                 <argument><expr><name>get_file_reader</name></expr></argument>, <argument><expr>&amp;<name>fwc</name></expr></argument>,
                                 <argument><expr><name><name>ras</name>-&gt;<name>callbacks</name>-&gt;<name>get_wc_prop</name></name></expr></argument>,
                                 <argument><expr><name><name>ras</name>-&gt;<name>callback_baton</name></name></expr></argument>,
                                 <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name><name>fwc</name>.<name>do_checksum</name></name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>apr_md5_final</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr>&amp;(<name><name>fwc</name>.<name>md5_context</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>hex_digest</name> = <call><name>svn_md5_digest_to_cstring_display</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>hex_digest</name></expr></argument>, <argument><expr><name><name>expected_checksum</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
            <return>return <expr><call><name>svn_error_createf</name>
              <argument_list>(<argument><expr><name>SVN_ERR_CHECKSUM_MISMATCH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
               <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Checksum mismatch for '%s':\n"
                 "   expected checksum:  %s\n"
                 "   actual checksum:    %s\n"</expr></argument>)</argument_list></call></expr></argument>,
               <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>expected_checksum</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>hex_digest</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
        }</block></then></if>
    }</block></then></if>

  <if>if <condition>(<expr><name>props</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__get_props_resource</name><argument_list>(<argument><expr>&amp;<name>rsrc</name></expr></argument>, <argument><expr><name>ras</name></expr></argument>, <argument><expr><name>final_url</name></expr></argument>,
                                              <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> <comment type="block">/* all props */</comment>,
                                              <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr>*<name>props</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>filter_props</name><argument_list>(<argument><expr>*<name>props</name></expr></argument>, <argument><expr><name>rsrc</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* The property we need to fetch to see whether the server we are
   connected to supports the deadprop-count property. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ne_propname</name></type> <name><name>deadprop_count_support_props</name><index>[]</index></name> <init>=
<expr><block>{
  <expr><block>{ <expr><name>SVN_DAV_PROP_NS_DAV</name></expr>, <expr>"deadprop-count"</expr> }</block></expr>,
  <expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_neon__get_dir</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                                  <param><decl><type><name>apr_hash_t</name> **</type><name>dirents</name></decl></param>,
                                  <param><decl><type><name>svn_revnum_t</name> *</type><name>fetched_rev</name></decl></param>,
                                  <param><decl><type><name>apr_hash_t</name> **</type><name>props</name></decl></param>,
                                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                  <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                                  <param><decl><type><name>apr_uint32_t</name></type> <name>dirent_fields</name></decl></param>,
                                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_ra_neon__resource_t</name> *</type><name>rsrc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>resources</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>final_url</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_size_t</name></type> <name>final_url_n_components</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>supports_deadprop_count</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra_neon__session_t</name> *</type><name>ras</name> <init>= <expr><name><name>session</name>-&gt;<name>priv</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name> <init>= <expr><call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>ras</name>-&gt;<name>url</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* If the revision is invalid (head), then we're done.  Just fetch
     the public URL, because that will always get HEAD. */</comment>
  <if>if <condition>(<expr>(! <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>revision</name></expr></argument>)</argument_list></call>) &amp;&amp; (<name>fetched_rev</name> == <name>NULL</name>)</expr>)</condition><then>
    <expr_stmt><expr><name>final_url</name> = <name>url</name></expr>;</expr_stmt></then>

  <comment type="block">/* If the revision is something specific, we need to create a bc_url. */</comment>
  <else>else
    <block>{
      <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>got_rev</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_string_t</name></type> <name>bc_url</name></decl>, <decl><type ref="prev"/><name>bc_relative</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__get_baseline_info</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,
                                             <argument><expr>&amp;<name>bc_url</name></expr></argument>, <argument><expr>&amp;<name>bc_relative</name></expr></argument>,
                                             <argument><expr>&amp;<name>got_rev</name></expr></argument>,
                                             <argument><expr><name>ras</name></expr></argument>,
                                             <argument><expr><name>url</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>,
                                             <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>final_url</name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>bc_url</name>.<name>data</name></name></expr></argument>,
                                             <argument><expr><name><name>bc_relative</name>.<name>data</name></name></expr></argument>,
                                             <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>fetched_rev</name> != <name>NULL</name></expr>)</condition><then>
        <expr_stmt><expr>*<name>fetched_rev</name> = <name>got_rev</name></expr>;</expr_stmt></then></if>
    }</block></else></if>

  <comment type="block">/* For issue 2151: See if we are dealing with a server that
     understands the deadprop-count property.  If it doesn't, we'll
     need to do an allprop PROPFIND.  If it does, we'll execute a more
     targeted PROPFIND. */</comment>
  <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>deadprop_count</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__get_props_resource</name><argument_list>(<argument><expr>&amp;<name>rsrc</name></expr></argument>, <argument><expr><name>ras</name></expr></argument>,
                                            <argument><expr><name>final_url</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                            <argument><expr><name>deadprop_count_support_props</name></expr></argument>,
                                            <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>deadprop_count</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>rsrc</name>-&gt;<name>propset</name></name></expr></argument>,
                                  <argument><expr><name>SVN_RA_NEON__PROP_DEADPROP_COUNT</name></expr></argument>,
                                  <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>supports_deadprop_count</name> = (<name>deadprop_count</name> != <name>NULL</name>)</expr>;</expr_stmt>
  }</block>

  <if>if <condition>(<expr><name>dirents</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>ne_propname</name> *</type><name>which_props</name></decl>;</decl_stmt>

      <comment type="block">/* if we didn't ask for the has_props field, we can get individual
         properties. */</comment>
      <if>if <condition>(<expr>(<name>SVN_DIRENT_HAS_PROPS</name> &amp; <name>dirent_fields</name>) == 0
          || <name>supports_deadprop_count</name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>int</name></type> <name>num_props</name> <init>= <expr>1</expr></init></decl>;</decl_stmt> <comment type="block">/* start with one for the final NULL */</comment>

          <if>if <condition>(<expr><name>dirent_fields</name> &amp; <name>SVN_DIRENT_KIND</name></expr>)</condition><then>
            <expr_stmt><expr>++<name>num_props</name></expr>;</expr_stmt></then></if>

          <if>if <condition>(<expr><name>dirent_fields</name> &amp; <name>SVN_DIRENT_SIZE</name></expr>)</condition><then>
            <expr_stmt><expr>++<name>num_props</name></expr>;</expr_stmt></then></if>

          <if>if <condition>(<expr><name>dirent_fields</name> &amp; <name>SVN_DIRENT_HAS_PROPS</name></expr>)</condition><then>
            <expr_stmt><expr>++<name>num_props</name></expr>;</expr_stmt></then></if>

          <if>if <condition>(<expr><name>dirent_fields</name> &amp; <name>SVN_DIRENT_CREATED_REV</name></expr>)</condition><then>
            <expr_stmt><expr>++<name>num_props</name></expr>;</expr_stmt></then></if>

          <if>if <condition>(<expr><name>dirent_fields</name> &amp; <name>SVN_DIRENT_TIME</name></expr>)</condition><then>
            <expr_stmt><expr>++<name>num_props</name></expr>;</expr_stmt></then></if>

          <if>if <condition>(<expr><name>dirent_fields</name> &amp; <name>SVN_DIRENT_LAST_AUTHOR</name></expr>)</condition><then>
            <expr_stmt><expr>++<name>num_props</name></expr>;</expr_stmt></then></if>

          <expr_stmt><expr><name>which_props</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>num_props</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>ne_propname</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr>--<name>num_props</name></expr>;</expr_stmt> <comment type="block">/* damn zero based arrays... */</comment>

          <comment type="block">/* first, null out the end... */</comment>
          <expr_stmt><expr><name><name>which_props</name><index>[<expr><name>num_props</name></expr>]</index></name>.<name>nspace</name> = <name>NULL</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>which_props</name><index>[<expr><name>num_props</name>--</expr>]</index></name>.<name>name</name> = <name>NULL</name></expr>;</expr_stmt>

          <comment type="block">/* Now, go through and fill in the ones we care about, moving along
             the array as we go. */</comment>

          <if>if <condition>(<expr><name>dirent_fields</name> &amp; <name>SVN_DIRENT_KIND</name></expr>)</condition><then>
            <block>{
              <expr_stmt><expr><name><name>which_props</name><index>[<expr><name>num_props</name></expr>]</index></name>.<name>nspace</name> = "DAV:"</expr>;</expr_stmt>
              <expr_stmt><expr><name><name>which_props</name><index>[<expr><name>num_props</name>--</expr>]</index></name>.<name>name</name> = "resourcetype"</expr>;</expr_stmt>
            }</block></then></if>

          <if>if <condition>(<expr><name>dirent_fields</name> &amp; <name>SVN_DIRENT_SIZE</name></expr>)</condition><then>
            <block>{
              <expr_stmt><expr><name><name>which_props</name><index>[<expr><name>num_props</name></expr>]</index></name>.<name>nspace</name> = "DAV:"</expr>;</expr_stmt>
              <expr_stmt><expr><name><name>which_props</name><index>[<expr><name>num_props</name>--</expr>]</index></name>.<name>name</name> = "getcontentlength"</expr>;</expr_stmt>
            }</block></then></if>

          <if>if <condition>(<expr><name>dirent_fields</name> &amp; <name>SVN_DIRENT_HAS_PROPS</name></expr>)</condition><then>
            <block>{
              <expr_stmt><expr><name><name>which_props</name><index>[<expr><name>num_props</name></expr>]</index></name>.<name>nspace</name> = <name>SVN_DAV_PROP_NS_DAV</name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>which_props</name><index>[<expr><name>num_props</name>--</expr>]</index></name>.<name>name</name> = "deadprop-count"</expr>;</expr_stmt>
            }</block></then></if>

          <if>if <condition>(<expr><name>dirent_fields</name> &amp; <name>SVN_DIRENT_CREATED_REV</name></expr>)</condition><then>
            <block>{
              <expr_stmt><expr><name><name>which_props</name><index>[<expr><name>num_props</name></expr>]</index></name>.<name>nspace</name> = "DAV:"</expr>;</expr_stmt>
              <expr_stmt><expr><name><name>which_props</name><index>[<expr><name>num_props</name>--</expr>]</index></name>.<name>name</name> = "version-name"</expr>;</expr_stmt>
            }</block></then></if>

          <if>if <condition>(<expr><name>dirent_fields</name> &amp; <name>SVN_DIRENT_TIME</name></expr>)</condition><then>
            <block>{
              <expr_stmt><expr><name><name>which_props</name><index>[<expr><name>num_props</name></expr>]</index></name>.<name>nspace</name> = "DAV:"</expr>;</expr_stmt>
              <expr_stmt><expr><name><name>which_props</name><index>[<expr><name>num_props</name>--</expr>]</index></name>.<name>name</name> = <name>SVN_DAV__CREATIONDATE</name></expr>;</expr_stmt>
            }</block></then></if>

          <if>if <condition>(<expr><name>dirent_fields</name> &amp; <name>SVN_DIRENT_LAST_AUTHOR</name></expr>)</condition><then>
            <block>{
              <expr_stmt><expr><name><name>which_props</name><index>[<expr><name>num_props</name></expr>]</index></name>.<name>nspace</name> = "DAV:"</expr>;</expr_stmt>
              <expr_stmt><expr><name><name>which_props</name><index>[<expr><name>num_props</name>--</expr>]</index></name>.<name>name</name> = "creator-displayname"</expr>;</expr_stmt>
            }</block></then></if>

          <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>num_props</name> == -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else
        <block>{
          <comment type="block">/* get all props, since we need them all to do has_props */</comment>
          <expr_stmt><expr><name>which_props</name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></else></if>

      <comment type="block">/* Just like Nautilus, Cadaver, or any other browser, we do a
         PROPFIND on the directory of depth 1. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__get_props</name><argument_list>(<argument><expr>&amp;<name>resources</name></expr></argument>, <argument><expr><name>ras</name></expr></argument>,
                                     <argument><expr><name>final_url</name></expr></argument>, <argument><expr><name>SVN_RA_NEON__DEPTH_ONE</name></expr></argument>,
                                     <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>which_props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Count the number of path components in final_url. */</comment>
      <expr_stmt><expr><name>final_url_n_components</name> = <call><name>svn_path_component_count</name><argument_list>(<argument><expr><name>final_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Now we have a hash that maps a bunch of url children to resource
         objects.  Each resource object contains the properties of the
         child.   Parse these resources into svn_dirent_t structs. */</comment>
      <expr_stmt><expr>*<name>dirents</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>resources</name></expr></argument>)</argument_list></call></expr>;</init>
           <condition><expr><name>hi</name></expr>;</condition>
           <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
        <block>{
          <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>childname</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>svn_ra_neon__resource_t</name> *</type><name>resource</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>propval</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>h</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>svn_dirent_t</name> *</type><name>entry</name></decl>;</decl_stmt>

          <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>childname</name> =  <name>key</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>resource</name> = <name>val</name></expr>;</expr_stmt>

          <comment type="block">/* Skip the effective '.' entry that comes back from
             SVN_RA_NEON__DEPTH_ONE. The children must have one more
             component then final_url.
             Note that we can't just strcmp the URLs because of URL encoding
             differences (i.e. %3c vs. %3C etc.) */</comment>
          <if>if <condition>(<expr><call><name>svn_path_component_count</name><argument_list>(<argument><expr><name>childname</name></expr></argument>)</argument_list></call> == <name>final_url_n_components</name></expr>)</condition><then>
            <continue>continue;</continue></then></if>

          <expr_stmt><expr><name>entry</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <if>if <condition>(<expr><name>dirent_fields</name> &amp; <name>SVN_DIRENT_KIND</name></expr>)</condition><then>
            <block>{
              <comment type="block">/* node kind */</comment>
              <expr_stmt><expr><name><name>entry</name>-&gt;<name>kind</name></name> = <name><name>resource</name>-&gt;<name>is_collection</name></name> ? <name>svn_node_dir</name>
                                                    : <name>svn_node_file</name></expr>;</expr_stmt>
            }</block></then></if>

          <if>if <condition>(<expr><name>dirent_fields</name> &amp; <name>SVN_DIRENT_SIZE</name></expr>)</condition><then>
            <block>{
              <comment type="block">/* size */</comment>
              <expr_stmt><expr><name>propval</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>propset</name></name></expr></argument>,
                                     <argument><expr><name>SVN_RA_NEON__PROP_GETCONTENTLENGTH</name></expr></argument>,
                                     <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <if>if <condition>(<expr><name>propval</name> == <name>NULL</name></expr>)</condition><then>
                <expr_stmt><expr><name><name>entry</name>-&gt;<name>size</name></name> = 0</expr>;</expr_stmt></then>
              <else>else
                <expr_stmt><expr><name><name>entry</name>-&gt;<name>size</name></name> = <call><name>svn__atoui64</name><argument_list>(<argument><expr><name><name>propval</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
            }</block></then></if>

          <if>if <condition>(<expr><name>dirent_fields</name> &amp; <name>SVN_DIRENT_HAS_PROPS</name></expr>)</condition><then>
            <block>{
              <comment type="block">/* Does this resource contain any 'svn' or 'custom'
                 properties (e.g. ones actually created and set by the
                 user)? */</comment>
              <if>if <condition>(<expr><name>supports_deadprop_count</name></expr>)</condition><then>
                <block>{
                  <expr_stmt><expr><name>propval</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>propset</name></name></expr></argument>,
                                         <argument><expr><name>SVN_RA_NEON__PROP_DEADPROP_COUNT</name></expr></argument>,
                                         <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                  <if>if <condition>(<expr><name>propval</name> == <name>NULL</name></expr>)</condition><then>
                    <block>{
                      <comment type="block">/* we thought that the server supported the
                         deadprop-count property.  apparently not. */</comment>
                      <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_INCOMPLETE_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                              <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Server response missing the "
                                                "expected deadprop-count "
                                                "property"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
                    }</block></then>
                  <else>else
                    <block>{
                      <decl_stmt><decl><type><name>apr_int64_t</name></type> <name>prop_count</name> <init>= <expr><call><name>svn__atoui64</name><argument_list>(<argument><expr><name><name>propval</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                      <expr_stmt><expr><name><name>entry</name>-&gt;<name>has_props</name></name> = (<name>prop_count</name> &gt; 0)</expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then>
              <else>else
                <block>{
                   <comment type="block">/* The server doesn't support the deadprop_count prop,
                      fallback */</comment>
                  <for>for (<init><expr><name>h</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>propset</name></name></expr></argument>)</argument_list></call></expr>;</init>
                       <condition><expr><name>h</name></expr>;</condition> <incr><expr><name>h</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></incr>)
                    <block>{
                      <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>kkey</name></decl>;</decl_stmt>
                      <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr>&amp;<name>kkey</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                      <if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr>(const <name>char</name> *) <name>kkey</name></expr></argument>, <argument><expr><name>SVN_DAV_PROP_NS_CUSTOM</name></expr></argument>,
                                  <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVN_DAV_PROP_NS_CUSTOM</name></expr></argument>)</argument_list></sizeof> - 1</expr></argument>)</argument_list></call> == 0
                          || <call><name>strncmp</name><argument_list>(<argument><expr>(const <name>char</name> *) <name>kkey</name></expr></argument>, <argument><expr><name>SVN_DAV_PROP_NS_SVN</name></expr></argument>,
                                     <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVN_DAV_PROP_NS_SVN</name></expr></argument>)</argument_list></sizeof> - 1</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
                        <expr_stmt><expr><name><name>entry</name>-&gt;<name>has_props</name></name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
                    }</block></for>
                }</block></else></if>
            }</block></then></if>

          <if>if <condition>(<expr><name>dirent_fields</name> &amp; <name>SVN_DIRENT_CREATED_REV</name></expr>)</condition><then>
            <block>{
              <comment type="block">/* created_rev &amp; friends */</comment>
              <expr_stmt><expr><name>propval</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>propset</name></name></expr></argument>,
                                     <argument><expr><name>SVN_RA_NEON__PROP_VERSION_NAME</name></expr></argument>,
                                     <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <if>if <condition>(<expr><name>propval</name> != <name>NULL</name></expr>)</condition><then>
                <expr_stmt><expr><name><name>entry</name>-&gt;<name>created_rev</name></name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name><name>propval</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></then></if>

          <if>if <condition>(<expr><name>dirent_fields</name> &amp; <name>SVN_DIRENT_TIME</name></expr>)</condition><then>
            <block>{
              <expr_stmt><expr><name>propval</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>propset</name></name></expr></argument>,
                                     <argument><expr><name>SVN_RA_NEON__PROP_CREATIONDATE</name></expr></argument>,
                                     <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <if>if <condition>(<expr><name>propval</name> != <name>NULL</name></expr>)</condition><then>
                <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_time_from_cstring</name><argument_list>(<argument><expr>&amp;(<name><name>entry</name>-&gt;<name>time</name></name>)</expr></argument>,
                                              <argument><expr><name><name>propval</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></then></if>

          <if>if <condition>(<expr><name>dirent_fields</name> &amp; <name>SVN_DIRENT_LAST_AUTHOR</name></expr>)</condition><then>
            <block>{
              <expr_stmt><expr><name>propval</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>propset</name></name></expr></argument>,
                                     <argument><expr><name>SVN_RA_NEON__PROP_CREATOR_DISPLAYNAME</name></expr></argument>,
                                     <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <if>if <condition>(<expr><name>propval</name> != <name>NULL</name></expr>)</condition><then>
                <expr_stmt><expr><name><name>entry</name>-&gt;<name>last_author</name></name> = <name><name>propval</name>-&gt;<name>data</name></name></expr>;</expr_stmt></then></if>
            }</block></then></if>

          <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr>*<name>dirents</name></expr></argument>,
                       <argument><expr><call><name>svn_path_uri_decode</name><argument_list>(<argument><expr><call><name>svn_path_basename</name><argument_list>(<argument><expr><name>childname</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
                                           <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
                       <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></then></if>

  <if>if <condition>(<expr><name>props</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__get_props_resource</name><argument_list>(<argument><expr>&amp;<name>rsrc</name></expr></argument>, <argument><expr><name>ras</name></expr></argument>, <argument><expr><name>final_url</name></expr></argument>,
                                              <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> <comment type="block">/* all props */</comment>,
                                              <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr>*<name>props</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>filter_props</name><argument_list>(<argument><expr>*<name>props</name></expr></argument>, <argument><expr><name>rsrc</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* ------------------------------------------------------------------------- */</comment>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_neon__get_latest_revnum</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                                            <param><decl><type><name>svn_revnum_t</name> *</type><name>latest_revnum</name></decl></param>,
                                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_ra_neon__session_t</name> *</type><name>ras</name> <init>= <expr><name><name>session</name>-&gt;<name>priv</name></name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* ### should we perform an OPTIONS to validate the server we're about
     ### to talk to? */</comment>

  <comment type="block">/* we don't need any of the baseline URLs and stuff, but this does
     give us the latest revision number */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__get_baseline_info</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>latest_revnum</name></expr></argument>,
                                         <argument><expr><name>ras</name></expr></argument>, <argument><expr><name><name>ras</name>-&gt;<name>root</name>.<name>path</name></name></expr></argument>,
                                         <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__maybe_store_auth_info</name><argument_list>(<argument><expr><name>ras</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<comment type="block">/* ------------------------------------------------------------------------- */</comment>


<function><type><name>svn_error_t</name> *</type><name>svn_ra_neon__change_rev_prop</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                                          <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                                          <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
                                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_ra_neon__session_t</name> *</type><name>ras</name> <init>= <expr><name><name>session</name>-&gt;<name>priv</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra_neon__resource_t</name> *</type><name>baseline</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>prop_changes</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>prop_deletes</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ne_propname</name></type> <name><name>wanted_props</name><index>[]</index></name> <init>=
    <expr><block>{
      <expr><block>{ <expr>"DAV:"</expr>, <expr>"auto-version"</expr> }</block></expr>,
      <expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
    }</block></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Main objective: do a PROPPATCH (allprops) on a baseline object */</comment>

  <comment type="block">/* ### A Word From Our Sponsor:  see issue #916.

     Be it heretofore known that this Subversion behavior is
     officially in violation of WebDAV/DeltaV.  DeltaV has *no*
     concept of unversioned properties, anywhere.  If you proppatch
     something, some new version of *something* is created.

     In particular, we've decided that a 'baseline' maps to an svn
     revision; if we attempted to proppatch a baseline, a *normal*
     DeltaV server would do an auto-checkout, patch the working
     baseline, auto-checkin, and create a new baseline.  But
     mod_dav_svn just changes the baseline destructively.
  */</comment>

  <comment type="block">/* Get the baseline resource. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__get_baseline_props</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>baseline</name></expr></argument>,
                                          <argument><expr><name>ras</name></expr></argument>,
                                          <argument><expr><name><name>ras</name>-&gt;<name>url</name>-&gt;<name>data</name></name></expr></argument>,
                                          <argument><expr><name>rev</name></expr></argument>,
                                          <argument><expr><name>wanted_props</name></expr></argument>, <comment type="block">/* DAV:auto-version */</comment>
                                          <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* ### TODO: if we got back some value for the baseline's
         'DAV:auto-version' property, interpret it.  We *don't* want
         to attempt the PROPPATCH if the deltaV server is going to do
         auto-versioning and create a new baseline! */</comment>

  <if>if <condition>(<expr><name>value</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>prop_changes</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>prop_changes</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <expr_stmt><expr><name>prop_deletes</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>prop_deletes</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>name</name></expr>;</expr_stmt>
    }</block></else></if>

  <expr_stmt><expr><name>err</name> = <call><name>svn_ra_neon__do_proppatch</name><argument_list>(<argument><expr><name>ras</name></expr></argument>, <argument><expr><name><name>baseline</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name>prop_changes</name></expr></argument>,
                                  <argument><expr><name>prop_deletes</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
    <return>return
      <expr><call><name>svn_error_create</name>
      <argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_REQUEST_FAILED</name></expr></argument>, <argument><expr><name>err</name></expr></argument>,
       <argument><expr><call><name>_</name><argument_list>(<argument><expr>"DAV request failed; it's possible that the repository's "
         "pre-revprop-change hook either failed or is non-existent"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type><name>svn_ra_neon__rev_proplist</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                                       <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                                       <param><decl><type><name>apr_hash_t</name> **</type><name>props</name></decl></param>,
                                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_ra_neon__session_t</name> *</type><name>ras</name> <init>= <expr><name><name>session</name>-&gt;<name>priv</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra_neon__resource_t</name> *</type><name>baseline</name></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>props</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Main objective: do a PROPFIND (allprops) on a baseline object */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__get_baseline_props</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>baseline</name></expr></argument>,
                                          <argument><expr><name>ras</name></expr></argument>,
                                          <argument><expr><name><name>ras</name>-&gt;<name>url</name>-&gt;<name>data</name></name></expr></argument>,
                                          <argument><expr><name>rev</name></expr></argument>,
                                          <argument><expr><name>NULL</name></expr></argument>, <comment type="block">/* get ALL properties */</comment>
                                          <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Build a new property hash, based on the one in the baseline
     resource.  In particular, convert the xml-property-namespaces
     into ones that the client understands.  Strip away the DAV:
     liveprops as well. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>filter_props</name><argument_list>(<argument><expr>*<name>props</name></expr></argument>, <argument><expr><name>baseline</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type><name>svn_ra_neon__rev_prop</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                                   <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                                   <param><decl><type><name>svn_string_t</name> **</type><name>value</name></decl></param>,
                                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl>;</decl_stmt>

  <comment type="block">/* We just call svn_ra_neon__rev_proplist() and filter its results here
   * because sending the property name to the server may create an error
   * if it has a colon in its name.  While more costly this allows DAV
   * clients to still gain access to all the allowed property names.
   * See Issue #1807 for more details. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__rev_proplist</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr>&amp;<name>props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>value</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>




<comment type="block">/* -------------------------------------------------------------------------
**
** UPDATE HANDLING
**
** ### docco...
**
** DTD of the update report:
** ### open/add file/dir. first child is always checked-in/href (vsn_url).
** ### next are subdir elems, possibly fetch-file, then fetch-prop.
*/</comment>

<comment type="block">/* Determine whether we're receiving the expected XML response.
   Return CHILD when interested in receiving the child's contents
   or one of SVN_RA_NEON__XML_INVALID and SVN_RA_NEON__XML_DECLINE
   when respectively this is the incorrect response or
   the element (and its children) are uninteresting */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>validate_element</name><parameter_list>(<param><decl><type><name>svn_ra_neon__xml_elmid</name></type> <name>parent</name></decl></param>,
                            <param><decl><type><name>svn_ra_neon__xml_elmid</name></type> <name>child</name></decl></param>)</parameter_list>
<block>{
  <comment type="block">/* We're being very strict with the validity of XML elements here. If
     something exists that we don't know about, then we might not update
     the client properly. We also make various assumptions in the element
     processing functions, and the strong validation enables those
     assumptions. */</comment>

  <switch>switch <condition>(<expr><name>parent</name></expr>)</condition>
    <block>{
    <case>case <expr><name>ELEM_root</name></expr>:
      <if>if <condition>(<expr><name>child</name> == <name>ELEM_update_report</name></expr>)</condition><then>
        <return>return <expr><name>child</name></expr>;</return></then>
      <else>else
        <return>return <expr><name>SVN_RA_NEON__XML_INVALID</name></expr>;</return></else></if>

    </case><case>case <expr><name>ELEM_update_report</name></expr>:
      <if>if <condition>(<expr><name>child</name> == <name>ELEM_target_revision</name>
          || <name>child</name> == <name>ELEM_open_directory</name>
          || <name>child</name> == <name>ELEM_resource_walk</name></expr>)</condition><then>
        <return>return <expr><name>child</name></expr>;</return></then>
      <else>else
        <return>return <expr><name>SVN_RA_NEON__XML_INVALID</name></expr>;</return></else></if>

    </case><case>case <expr><name>ELEM_resource_walk</name></expr>:
      <if>if <condition>(<expr><name>child</name> == <name>ELEM_resource</name></expr>)</condition><then>
        <return>return <expr><name>child</name></expr>;</return></then>
      <else>else
        <return>return <expr><name>SVN_RA_NEON__XML_INVALID</name></expr>;</return></else></if>

    </case><case>case <expr><name>ELEM_resource</name></expr>:
      <if>if <condition>(<expr><name>child</name> == <name>ELEM_checked_in</name></expr>)</condition><then>
        <return>return <expr><name>child</name></expr>;</return></then>
      <else>else
        <return>return <expr><name>SVN_RA_NEON__XML_INVALID</name></expr>;</return></else></if>

    </case><case>case <expr><name>ELEM_open_directory</name></expr>:
      <if>if <condition>(<expr><name>child</name> == <name>ELEM_absent_directory</name>
          || <name>child</name> == <name>ELEM_open_directory</name>
          || <name>child</name> == <name>ELEM_add_directory</name>
          || <name>child</name> == <name>ELEM_absent_file</name>
          || <name>child</name> == <name>ELEM_open_file</name>
          || <name>child</name> == <name>ELEM_add_file</name>
          || <name>child</name> == <name>ELEM_fetch_props</name>
          || <name>child</name> == <name>ELEM_set_prop</name>
          || <name>child</name> == <name>ELEM_remove_prop</name>
          || <name>child</name> == <name>ELEM_delete_entry</name>
          || <name>child</name> == <name>ELEM_SVN_prop</name>
          || <name>child</name> == <name>ELEM_checked_in</name></expr>)</condition><then>
        <return>return <expr><name>child</name></expr>;</return></then>
      <else>else
        <return>return <expr><name>SVN_RA_NEON__XML_INVALID</name></expr>;</return></else></if>

    </case><case>case <expr><name>ELEM_add_directory</name></expr>:
      <if>if <condition>(<expr><name>child</name> == <name>ELEM_absent_directory</name>
          || <name>child</name> == <name>ELEM_add_directory</name>
          || <name>child</name> == <name>ELEM_absent_file</name>
          || <name>child</name> == <name>ELEM_add_file</name>
          || <name>child</name> == <name>ELEM_remove_prop</name>
          || <name>child</name> == <name>ELEM_set_prop</name>
          || <name>child</name> == <name>ELEM_SVN_prop</name>
          || <name>child</name> == <name>ELEM_checked_in</name></expr>)</condition><then>
        <return>return <expr><name>child</name></expr>;</return></then>
      <else>else
        <return>return <expr><name>SVN_RA_NEON__XML_INVALID</name></expr>;</return></else></if>

    </case><case>case <expr><name>ELEM_open_file</name></expr>:
      <if>if <condition>(<expr><name>child</name> == <name>ELEM_checked_in</name>
          || <name>child</name> == <name>ELEM_fetch_file</name>
          || <name>child</name> == <name>ELEM_SVN_prop</name>
          || <name>child</name> == <name>ELEM_txdelta</name>
          || <name>child</name> == <name>ELEM_fetch_props</name>
          || <name>child</name> == <name>ELEM_set_prop</name>
          || <name>child</name> == <name>ELEM_remove_prop</name></expr>)</condition><then>
        <return>return <expr><name>child</name></expr>;</return></then>
      <else>else
        <return>return <expr><name>SVN_RA_NEON__XML_INVALID</name></expr>;</return></else></if>

    </case><case>case <expr><name>ELEM_add_file</name></expr>:
      <if>if <condition>(<expr><name>child</name> == <name>ELEM_checked_in</name>
          || <name>child</name> == <name>ELEM_txdelta</name>
          || <name>child</name> == <name>ELEM_set_prop</name>
          || <name>child</name> == <name>ELEM_remove_prop</name>
          || <name>child</name> == <name>ELEM_SVN_prop</name></expr>)</condition><then>
        <return>return <expr><name>child</name></expr>;</return></then>
      <else>else
        <return>return <expr><name>SVN_RA_NEON__XML_INVALID</name></expr>;</return></else></if>

    </case><case>case <expr><name>ELEM_checked_in</name></expr>:
      <if>if <condition>(<expr><name>child</name> == <name>ELEM_href</name></expr>)</condition><then>
        <return>return <expr><name>child</name></expr>;</return></then>
      <else>else
        <return>return <expr><name>SVN_RA_NEON__XML_INVALID</name></expr>;</return></else></if>

    </case><case>case <expr><name>ELEM_set_prop</name></expr>:
      <comment type="block">/* Prop name is an attribute, prop value is CDATA, so no child elts. */</comment>
      <return>return <expr><name>child</name></expr>;</return>

    </case><case>case <expr><name>ELEM_SVN_prop</name></expr>:
      <comment type="block">/*      if (child == ELEM_version_name
              || child == ELEM_creationdate
              || child == ELEM_creator_displayname
              || child == ELEM_md5_checksum
              || child == ELEM_repository_uuid
              || child == ELEM_remove_prop)
              return child;
              else
              return SVN_RA_NEON__XML_DECLINE;
      */</comment>
      <comment type="block">/* ### TODO:  someday uncomment the block above, and make the
         else clause return NE_XML_IGNORE.  But first, neon needs to
         define that value.  :-) */</comment>
      <return>return <expr><name>child</name></expr>;</return>

    </case><default>default:
      <return>return <expr><name>SVN_RA_NEON__XML_DECLINE</name></expr>;</return>
    </default>}</block></switch>

  <comment type="block">/* NOTREACHED */</comment>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>push_dir</name><parameter_list>(<param><decl><type><name>report_baton_t</name> *</type><name>rb</name></decl></param>,
                     <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                     <param><decl><type><name>svn_stringbuf_t</name> *</type><name>pathbuf</name></decl></param>,
                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>dir_item_t</name> *</type><name>di</name> <init>= <expr><call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>dirs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>di</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>di</name>-&gt;<name>baton</name></name> = <name>baton</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>di</name>-&gt;<name>pathbuf</name></name> = <name>pathbuf</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>di</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
}</block></function>

<comment type="block">/* This implements the `ne_xml_startelm_cb' prototype. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>start_element</name><parameter_list>(<param><decl><type><name>int</name> *</type><name>elem</name></decl></param>, <param><decl><type><name>void</name> *</type><name>userdata</name></decl></param>, <param><decl><type><name>int</name></type> <name>parent</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>nspace</name></decl></param>,
              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>elt_name</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>atts</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>report_baton_t</name> *</type><name>rb</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>att</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>base</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>bc_url</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>cpath</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>crev</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>dir_item_t</name> *</type><name>parent_dir</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>new_dir_baton</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>pathbuf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_checksum</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_ra_neon__xml_elm_t</name> *</type><name>elm</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>elm</name> = <call><name>svn_ra_neon__lookup_xml_elem</name><argument_list>(<argument><expr><name>report_elements</name></expr></argument>, <argument><expr><name>nspace</name></expr></argument>, <argument><expr><name>elt_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>elem</name> = <name>elm</name> ? <call><name>validate_element</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name><name>elm</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call> : <name>SVN_RA_NEON__XML_DECLINE</name></expr>;</expr_stmt>
  <if>if <condition>(<expr>*<name>elem</name> &lt; 1</expr>)</condition><then> <comment type="block">/* not a valid element */</comment>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <switch>switch <condition>(<expr><name><name>elm</name>-&gt;<name>id</name></name></expr>)</condition>
    <block>{
    <case>case <expr><name>ELEM_update_report</name></expr>:
      <expr_stmt><expr><name>att</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"send-all"</expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>att</name> &amp;&amp; (<call><name>strcmp</name><argument_list>(<argument><expr><name>att</name></expr></argument>, <argument><expr>"true"</expr></argument>)</argument_list></call> == 0)</expr>)</condition><then>
        <expr_stmt><expr><name><name>rb</name>-&gt;<name>receiving_all</name></name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
      <break>break;</break>

    </case><case>case <expr><name>ELEM_target_revision</name></expr>:
      <expr_stmt><expr><name>att</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"rev"</expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>att</name> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                 <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Missing rev attr in target-revision"
                                   " element"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call>(*<name><name>rb</name>-&gt;<name>editor</name>-&gt;<name>set_target_revision</name></name>)<argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>edit_baton</name></name></expr></argument>,
                                                 <argument><expr><call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name>att</name></expr></argument>)</argument_list></call></expr></argument>,
                                                 <argument><expr><name><name>rb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    </case><case>case <expr><name>ELEM_absent_directory</name></expr>:
      <expr_stmt><expr><name>name</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"name"</expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>name</name> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                 <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Missing name attr in absent-directory"
                                   " element"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>

      <expr_stmt><expr><name>parent_dir</name> = &amp;<call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pathbuf</name> = <call><name>svn_stringbuf_dup</name><argument_list>(<argument><expr><name><name>parent_dir</name>-&gt;<name>pathbuf</name></name></expr></argument>, <argument><expr><name><name>parent_dir</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>svn_path_add_component</name><argument_list>(<argument><expr><name>pathbuf</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call>(*<name><name>rb</name>-&gt;<name>editor</name>-&gt;<name>absent_directory</name></name>)<argument_list>(<argument><expr><name><name>pathbuf</name>-&gt;<name>data</name></name></expr></argument>,
                                              <argument><expr><name><name>parent_dir</name>-&gt;<name>baton</name></name></expr></argument>,
                                              <argument><expr><name><name>parent_dir</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    </case><case>case <expr><name>ELEM_absent_file</name></expr>:
      <expr_stmt><expr><name>name</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"name"</expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>name</name> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                 <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Missing name attr in absent-file"
                                   " element"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
      <expr_stmt><expr><name>parent_dir</name> = &amp;<call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pathbuf</name> = <call><name>svn_stringbuf_dup</name><argument_list>(<argument><expr><name><name>parent_dir</name>-&gt;<name>pathbuf</name></name></expr></argument>, <argument><expr><name><name>parent_dir</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>svn_path_add_component</name><argument_list>(<argument><expr><name>pathbuf</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call>(*<name><name>rb</name>-&gt;<name>editor</name>-&gt;<name>absent_file</name></name>)<argument_list>(<argument><expr><name><name>pathbuf</name>-&gt;<name>data</name></name></expr></argument>,
                                         <argument><expr><name><name>parent_dir</name>-&gt;<name>baton</name></name></expr></argument>,
                                         <argument><expr><name><name>parent_dir</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    </case><case>case <expr><name>ELEM_resource</name></expr>:
      <expr_stmt><expr><name>att</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"path"</expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>att</name> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                 <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Missing path attr in resource element"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
      <expr_stmt><expr><call><name>svn_stringbuf_set</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>current_wcprop_path</name></name></expr></argument>, <argument><expr><name>att</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>rb</name>-&gt;<name>in_resource</name></name> = <name>TRUE</name></expr>;</expr_stmt>
      <break>break;</break>

    </case><case>case <expr><name>ELEM_open_directory</name></expr>:
      <expr_stmt><expr><name>att</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"rev"</expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>att</name> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                 <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Missing rev attr in open-directory"
                                   " element"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
      <expr_stmt><expr><name>base</name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name>att</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><call><name>DIR_DEPTH</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <block>{
          <comment type="block">/* pathbuf has to live for the whole edit! */</comment>
          <expr_stmt><expr><name>pathbuf</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name><name>rb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="block">/* During switch operations, we need to invalidate the
             tree's version resource URLs in case something goes
             wrong. */</comment>
          <if>if <condition>(<expr><name><name>rb</name>-&gt;<name>is_switch</name></name> &amp;&amp; <name><name>rb</name>-&gt;<name>ras</name>-&gt;<name>callbacks</name>-&gt;<name>invalidate_wc_props</name></name></expr>)</condition><then>
            <block>{
              <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>rb</name>-&gt;<name>ras</name>-&gt;<name>callbacks</name>-&gt;<name>invalidate_wc_props</name></name>
                      <argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>ras</name>-&gt;<name>callback_baton</name></name></expr></argument>, <argument><expr><name><name>rb</name>-&gt;<name>target</name></name></expr></argument>,
                       <argument><expr><name>SVN_RA_NEON__LP_VSN_URL</name></expr></argument>, <argument><expr><name><name>rb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

          <expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call>(*<name><name>rb</name>-&gt;<name>editor</name>-&gt;<name>open_root</name></name>)<argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>edit_baton</name></name></expr></argument>, <argument><expr><name>base</name></expr></argument>,
                                           <argument><expr><name>subpool</name></expr></argument>, <argument><expr>&amp;<name>new_dir_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="block">/* push the new baton onto the directory baton stack */</comment>
          <expr_stmt><expr><call><name>push_dir</name><argument_list>(<argument><expr><name>rb</name></expr></argument>, <argument><expr><name>new_dir_baton</name></expr></argument>, <argument><expr><name>pathbuf</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else
        <block>{
          <expr_stmt><expr><name>name</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"name"</expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>name</name> == <name>NULL</name></expr>)</condition><then>
            <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                     <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Missing name attr in open-directory"
                                       " element"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
          <expr_stmt><expr><call><name>svn_stringbuf_set</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>namestr</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><name>parent_dir</name> = &amp;<call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name><name>parent_dir</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><name>pathbuf</name> = <call><name>svn_stringbuf_dup</name><argument_list>(<argument><expr><name><name>parent_dir</name>-&gt;<name>pathbuf</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>svn_path_add_component</name><argument_list>(<argument><expr><name>pathbuf</name></expr></argument>, <argument><expr><name><name>rb</name>-&gt;<name>namestr</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call>(*<name><name>rb</name>-&gt;<name>editor</name>-&gt;<name>open_directory</name></name>)<argument_list>(<argument><expr><name><name>pathbuf</name>-&gt;<name>data</name></name></expr></argument>,
                                                <argument><expr><name><name>parent_dir</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name>base</name></expr></argument>,
                                                <argument><expr><name>subpool</name></expr></argument>,
                                                <argument><expr>&amp;<name>new_dir_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="block">/* push the new baton onto the directory baton stack */</comment>
          <expr_stmt><expr><call><name>push_dir</name><argument_list>(<argument><expr><name>rb</name></expr></argument>, <argument><expr><name>new_dir_baton</name></expr></argument>, <argument><expr><name>pathbuf</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

      <comment type="block">/* Property fetching is NOT implied in replacement. */</comment>
      <expr_stmt><expr><call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call>.<name>fetch_props</name> = <name>FALSE</name></expr>;</expr_stmt>
      <break>break;</break>

    </case><case>case <expr><name>ELEM_add_directory</name></expr>:
      <expr_stmt><expr><name>name</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"name"</expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>name</name> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                 <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Missing name attr in add-directory"
                                   " element"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
      <expr_stmt><expr><call><name>svn_stringbuf_set</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>namestr</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>att</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"copyfrom-path"</expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>att</name> != <name>NULL</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>cpath</name> = <name><name>rb</name>-&gt;<name>cpathstr</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>svn_stringbuf_set</name><argument_list>(<argument><expr><name>cpath</name></expr></argument>, <argument><expr><name>att</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><name>att</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"copyfrom-rev"</expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>att</name> == <name>NULL</name></expr>)</condition><then>
            <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                     <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Missing copyfrom-rev attr in"
                                       " add-directory element"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
          <expr_stmt><expr><name>crev</name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name>att</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

      <expr_stmt><expr><name>parent_dir</name> = &amp;<call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name><name>parent_dir</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>pathbuf</name> = <call><name>svn_stringbuf_dup</name><argument_list>(<argument><expr><name><name>parent_dir</name>-&gt;<name>pathbuf</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>svn_path_add_component</name><argument_list>(<argument><expr><name>pathbuf</name></expr></argument>, <argument><expr><name><name>rb</name>-&gt;<name>namestr</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call>(*<name><name>rb</name>-&gt;<name>editor</name>-&gt;<name>add_directory</name></name>)<argument_list>(<argument><expr><name><name>pathbuf</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>parent_dir</name>-&gt;<name>baton</name></name></expr></argument>,
                                           <argument><expr><name>cpath</name> ? <name><name>cpath</name>-&gt;<name>data</name></name> : <name>NULL</name></expr></argument>,
                                           <argument><expr><name>crev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>,
                                           <argument><expr>&amp;<name>new_dir_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* push the new baton onto the directory baton stack */</comment>
      <expr_stmt><expr><call><name>push_dir</name><argument_list>(<argument><expr><name>rb</name></expr></argument>, <argument><expr><name>new_dir_baton</name></expr></argument>, <argument><expr><name>pathbuf</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Property fetching is implied in addition.  This flag is only
         for parsing old-style reports; it is ignored when talking to
         a modern server. */</comment>
      <expr_stmt><expr><call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call>.<name>fetch_props</name> = <name>TRUE</name></expr>;</expr_stmt>

      <expr_stmt><expr><name>bc_url</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"bc-url"</expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* In non-modern report responses, we're just told to fetch the
         props later.  In that case, we can at least do a pre-emptive
         depth-1 propfind on the directory right now; this prevents
         individual propfinds on added-files later on, thus reducing
         the number of network turnarounds (though not by as much as
         simply getting a modern report response!).  */</comment>
      <if>if <condition>(<expr>(! <name><name>rb</name>-&gt;<name>receiving_all</name></name>) &amp;&amp; <name>bc_url</name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>bc_children</name></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__get_props</name><argument_list>(<argument><expr>&amp;<name>bc_children</name></expr></argument>,
                                         <argument><expr><name><name>rb</name>-&gt;<name>ras</name></name></expr></argument>,
                                         <argument><expr><name>bc_url</name></expr></argument>,
                                         <argument><expr><name>SVN_RA_NEON__DEPTH_ONE</name></expr></argument>,
                                         <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> <comment type="block">/* allprops */</comment>,
                                         <argument><expr><call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call>.<name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="block">/* re-index the results into a more usable hash.
             bc_children maps bc-url-&gt;resource_t, but we want the
             dir_item_t's hash to map vc-url-&gt;resource_t. */</comment>
          <if>if <condition>(<expr><name>bc_children</name></expr>)</condition><then>
            <block>{
              <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
              <expr_stmt><expr><call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call>.<name>children</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call>.<name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

              <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call>.<name>pool</name></expr></argument>, <argument><expr><name>bc_children</name></expr></argument>)</argument_list></call></expr>;</init>
                   <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
                <block>{
                  <decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
                  <decl_stmt><decl><type><name>svn_ra_neon__resource_t</name> *</type><name>rsrc</name></decl>;</decl_stmt>
                  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>vc_url</name></decl>;</decl_stmt>

                  <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><name>rsrc</name> = <name>val</name></expr>;</expr_stmt>

                  <expr_stmt><expr><name>vc_url</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>rsrc</name>-&gt;<name>propset</name></name></expr></argument>,
                                        <argument><expr><name>SVN_RA_NEON__PROP_CHECKED_IN</name></expr></argument>,
                                        <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <if>if <condition>(<expr><name>vc_url</name></expr>)</condition><then>
                    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call>.<name>children</name></expr></argument>,
                                 <argument><expr><name><name>vc_url</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>vc_url</name>-&gt;<name>len</name></name></expr></argument>,
                                 <argument><expr><name><name>rsrc</name>-&gt;<name>propset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                }</block></for>
            }</block></then></if>
        }</block></then></if>

      <break>break;</break>

    </case><case>case <expr><name>ELEM_open_file</name></expr>:
      <expr_stmt><expr><name>att</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"rev"</expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>att</name> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                 <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Missing rev attr in open-file"
                                   " element"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
      <expr_stmt><expr><name>base</name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name>att</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>name</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"name"</expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>name</name> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                 <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Missing name attr in open-file"
                                   " element"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
      <expr_stmt><expr><call><name>svn_stringbuf_set</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>namestr</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>parent_dir</name> = &amp;<call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>rb</name>-&gt;<name>file_pool</name></name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name><name>parent_dir</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>rb</name>-&gt;<name>result_checksum</name></name> = <name>NULL</name></expr>;</expr_stmt>

      <comment type="block">/* Add this file's name into the directory's path buffer. It will be
         removed in end_element() */</comment>
      <expr_stmt><expr><call><name>svn_path_add_component</name><argument_list>(<argument><expr><name><name>parent_dir</name>-&gt;<name>pathbuf</name></name></expr></argument>, <argument><expr><name><name>rb</name>-&gt;<name>namestr</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call>(*<name><name>rb</name>-&gt;<name>editor</name>-&gt;<name>open_file</name></name>)<argument_list>(<argument><expr><name><name>parent_dir</name>-&gt;<name>pathbuf</name>-&gt;<name>data</name></name></expr></argument>,
                                       <argument><expr><name><name>parent_dir</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name>base</name></expr></argument>,
                                       <argument><expr><name><name>rb</name>-&gt;<name>file_pool</name></name></expr></argument>,
                                       <argument><expr>&amp;<name><name>rb</name>-&gt;<name>file_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Property fetching is NOT implied in replacement. */</comment>
      <expr_stmt><expr><name><name>rb</name>-&gt;<name>fetch_props</name></name> = <name>FALSE</name></expr>;</expr_stmt>

      <break>break;</break>

    </case><case>case <expr><name>ELEM_add_file</name></expr>:
      <expr_stmt><expr><name>name</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"name"</expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>name</name> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                 <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Missing name attr in add-file"
                                   " element"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
      <expr_stmt><expr><call><name>svn_stringbuf_set</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>namestr</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>att</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"copyfrom-path"</expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>att</name> != <name>NULL</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>cpath</name> = <name><name>rb</name>-&gt;<name>cpathstr</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>svn_stringbuf_set</name><argument_list>(<argument><expr><name>cpath</name></expr></argument>, <argument><expr><name>att</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><name>att</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"copyfrom-rev"</expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>att</name> == <name>NULL</name></expr>)</condition><then>
            <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                     <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Missing copyfrom-rev attr in add-file"
                                       " element"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
          <expr_stmt><expr><name>crev</name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name>att</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

      <expr_stmt><expr><name>parent_dir</name> = &amp;<call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>rb</name>-&gt;<name>file_pool</name></name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name><name>parent_dir</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>rb</name>-&gt;<name>result_checksum</name></name> = <name>NULL</name></expr>;</expr_stmt>

      <comment type="block">/* Add this file's name into the directory's path buffer. It will be
         removed in end_element() */</comment>
      <expr_stmt><expr><call><name>svn_path_add_component</name><argument_list>(<argument><expr><name><name>parent_dir</name>-&gt;<name>pathbuf</name></name></expr></argument>, <argument><expr><name><name>rb</name>-&gt;<name>namestr</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call>(*<name><name>rb</name>-&gt;<name>editor</name>-&gt;<name>add_file</name></name>)<argument_list>(<argument><expr><name><name>parent_dir</name>-&gt;<name>pathbuf</name>-&gt;<name>data</name></name></expr></argument>,
                                      <argument><expr><name><name>parent_dir</name>-&gt;<name>baton</name></name></expr></argument>,
                                      <argument><expr><name>cpath</name> ? <name><name>cpath</name>-&gt;<name>data</name></name> : <name>NULL</name></expr></argument>,
                                      <argument><expr><name>crev</name></expr></argument>, <argument><expr><name><name>rb</name>-&gt;<name>file_pool</name></name></expr></argument>,
                                      <argument><expr>&amp;<name><name>rb</name>-&gt;<name>file_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Property fetching is implied in addition.  This flag is only
         for parsing old-style reports; it is ignored when talking to
         a modern server. */</comment>
      <expr_stmt><expr><name><name>rb</name>-&gt;<name>fetch_props</name></name> = <name>TRUE</name></expr>;</expr_stmt>

      <break>break;</break>

    </case><case>case <expr><name>ELEM_txdelta</name></expr>:
      <comment type="block">/* Pre 1.2, mod_dav_svn was using &lt;txdelta&gt; tags (in addition to
         &lt;fetch-file&gt;s and such) when *not* in "send-all" mode.  As a
         client, we're smart enough to know that's wrong, so when not
         in "receiving-all" mode, we'll ignore &lt;txdelta&gt; tags
         altogether. */</comment>
      <if>if <condition>(<expr>! <name><name>rb</name>-&gt;<name>receiving_all</name></name></expr>)</condition><then>
        <break>break;</break></then></if>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call>(*<name><name>rb</name>-&gt;<name>editor</name>-&gt;<name>apply_textdelta</name></name>)<argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>file_baton</name></name></expr></argument>,
                                             <argument><expr><name>NULL</name></expr></argument>, <comment type="block">/* ### base_checksum */</comment>
                                             <argument><expr><name><name>rb</name>-&gt;<name>file_pool</name></name></expr></argument>,
                                             <argument><expr>&amp;(<name><name>rb</name>-&gt;<name>whandler</name></name>)</expr></argument>,
                                             <argument><expr>&amp;(<name><name>rb</name>-&gt;<name>whandler_baton</name></name>)</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>rb</name>-&gt;<name>svndiff_decoder</name></name> = <call><name>svn_txdelta_parse_svndiff</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>whandler</name></name></expr></argument>,
                                                      <argument><expr><name><name>rb</name>-&gt;<name>whandler_baton</name></name></expr></argument>,
                                                      <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name><name>rb</name>-&gt;<name>file_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>rb</name>-&gt;<name>base64_decoder</name></name> = <call><name>svn_base64_decode</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>svndiff_decoder</name></name></expr></argument>,
                                             <argument><expr><name><name>rb</name>-&gt;<name>file_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    </case><case>case <expr><name>ELEM_set_prop</name></expr>:
      <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>encoding</name> <init>= <expr><call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"encoding"</expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>name</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"name"</expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>name</name> == <name>NULL</name></expr>)</condition><then>
          <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                   <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Missing name attr in set-prop element"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
        <expr_stmt><expr><call><name>svn_stringbuf_set</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>namestr</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>encoding</name></expr>)</condition><then>
          <expr_stmt><expr><call><name>svn_stringbuf_set</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>encoding</name></name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else>else
          <expr_stmt><expr><call><name>svn_stringbuf_setempty</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>encoding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
      }</block>

      <break>break;</break>

    </case><case>case <expr><name>ELEM_remove_prop</name></expr>:
      <expr_stmt><expr><name>name</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"name"</expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>name</name> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                 <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Missing name attr in remove-prop element"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
      <expr_stmt><expr><call><name>svn_stringbuf_set</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>namestr</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Removing a prop.  */</comment>
      <if>if <condition>(<expr><name><name>rb</name>-&gt;<name>file_baton</name></name> == <name>NULL</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>rb</name>-&gt;<name>editor</name>-&gt;<name>change_dir_prop</name></name><argument_list>(<argument><expr><call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call>.<name>baton</name></expr></argument>,
                                            <argument><expr><name><name>rb</name>-&gt;<name>namestr</name>-&gt;<name>data</name></name></expr></argument>,
                                            <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call>.<name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
      <else>else
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>rb</name>-&gt;<name>editor</name>-&gt;<name>change_file_prop</name></name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>file_baton</name></name></expr></argument>, <argument><expr><name><name>rb</name>-&gt;<name>namestr</name>-&gt;<name>data</name></name></expr></argument>,
                                             <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>rb</name>-&gt;<name>file_pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
      <break>break;</break>

    </case><case>case <expr><name>ELEM_fetch_props</name></expr>:
      <if>if <condition>(<expr>!<name><name>rb</name>-&gt;<name>fetch_content</name></name></expr>)</condition><then>
        <block>{
          <comment type="block">/* If this is just a status check, the specifics of the
             property change are uninteresting.  Simply call our
             editor function with bogus data so it registers a
             property mod. */</comment>
          <expr_stmt><expr><call><name>svn_stringbuf_set</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>namestr</name></name></expr></argument>, <argument><expr><name>SVN_PROP_PREFIX</name> "BOGOSITY"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <if>if <condition>(<expr><name><name>rb</name>-&gt;<name>file_baton</name></name> == <name>NULL</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>rb</name>-&gt;<name>editor</name>-&gt;<name>change_dir_prop</name></name><argument_list>(<argument><expr><call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call>.<name>baton</name></expr></argument>,
                                                <argument><expr><name><name>rb</name>-&gt;<name>namestr</name>-&gt;<name>data</name></name></expr></argument>,
                                                <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call>.<name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
          <else>else
            <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>rb</name>-&gt;<name>editor</name>-&gt;<name>change_file_prop</name></name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>file_baton</name></name></expr></argument>,
                                                 <argument><expr><name><name>rb</name>-&gt;<name>namestr</name>-&gt;<name>data</name></name></expr></argument>,
                                                 <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>rb</name>-&gt;<name>file_pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
        }</block></then>
      <else>else
        <block>{
          <comment type="block">/* Note that we need to fetch props for this... */</comment>
          <if>if <condition>(<expr><name><name>rb</name>-&gt;<name>file_baton</name></name> == <name>NULL</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call>.<name>fetch_props</name> = <name>TRUE</name></expr>;</expr_stmt></then> <comment type="block">/* ...directory. */</comment>
          <else>else
            <expr_stmt><expr><name><name>rb</name>-&gt;<name>fetch_props</name></name> = <name>TRUE</name></expr>;</expr_stmt></else></if> <comment type="block">/* ...file. */</comment>
        }</block></else></if>
      <break>break;</break>

    </case><case>case <expr><name>ELEM_fetch_file</name></expr>:
      <expr_stmt><expr><name>base_checksum</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"base-checksum"</expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>rb</name>-&gt;<name>result_checksum</name></name> = <name>NULL</name></expr>;</expr_stmt>

      <comment type="block">/* If we aren't expecting to see the file contents inline, we
         should ignore server requests to fetch them.

         ### This conditional was added to counteract a little bug in
         Subversion 0.33.0's mod_dav_svn whereby both the &lt;txdelta&gt;
         and &lt;fetch-file&gt; tags were being transmitted.  Someday, we
         should remove the conditional again to give the server the
         option of sending inline text-deltas for some files while
         telling the client to fetch others. */</comment>
      <if>if <condition>(<expr>! <name><name>rb</name>-&gt;<name>receiving_all</name></name></expr>)</condition><then>
        <block>{
          <comment type="block">/* assert: rb-&gt;href-&gt;len &gt; 0 */</comment>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>simple_fetch_file</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>ras</name></name></expr></argument>,
                                    <argument><expr><name><name>rb</name>-&gt;<name>href</name>-&gt;<name>data</name></name></expr></argument>,
                                    <argument><expr><call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call>.<name><name>pathbuf</name>-&gt;<name>data</name></name></expr></argument>,
                                    <argument><expr><name><name>rb</name>-&gt;<name>fetch_content</name></name></expr></argument>,
                                    <argument><expr><name><name>rb</name>-&gt;<name>file_baton</name></name></expr></argument>,
                                    <argument><expr><name>base_checksum</name></expr></argument>,
                                    <argument><expr><name><name>rb</name>-&gt;<name>editor</name></name></expr></argument>,
                                    <argument><expr><name><name>rb</name>-&gt;<name>ras</name>-&gt;<name>callbacks</name>-&gt;<name>get_wc_prop</name></name></expr></argument>,
                                    <argument><expr><name><name>rb</name>-&gt;<name>ras</name>-&gt;<name>callback_baton</name></name></expr></argument>,
                                    <argument><expr><name><name>rb</name>-&gt;<name>file_pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      <break>break;</break>

    </case><case>case <expr><name>ELEM_delete_entry</name></expr>:
      <expr_stmt><expr><name>name</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"name"</expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>name</name> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                 <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Missing name attr in delete-entry"
                                   " element"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
      <expr_stmt><expr><call><name>svn_stringbuf_set</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>namestr</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>parent_dir</name> = &amp;<call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Pool use is a little non-standard here.  When lots of items in the
         same directory get deleted each one will trigger a call to
         editor-&gt;delete_entry, but we don't have a pool that readily fits
         the usual iteration pattern and so memory use could grow without
         bound (see issue 1635).  To avoid such growth we use a temporary,
         short-lived, pool. */</comment>
      <expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name><name>parent_dir</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>pathbuf</name> = <call><name>svn_stringbuf_dup</name><argument_list>(<argument><expr><name><name>parent_dir</name>-&gt;<name>pathbuf</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>svn_path_add_component</name><argument_list>(<argument><expr><name>pathbuf</name></expr></argument>, <argument><expr><name><name>rb</name>-&gt;<name>namestr</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call>(*<name><name>rb</name>-&gt;<name>editor</name>-&gt;<name>delete_entry</name></name>)<argument_list>(<argument><expr><name><name>pathbuf</name>-&gt;<name>data</name></name></expr></argument>,
                                          <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
                                          <argument><expr><call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call>.<name>baton</name></expr></argument>,
                                          <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    </case><default>default:
      <break>break;</break>
    </default>}</block></switch>

  <expr_stmt><expr>*<name>elem</name> = <name><name>elm</name>-&gt;<name>id</name></name></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>add_node_props</name><parameter_list>(<param><decl><type><name>report_baton_t</name> *</type><name>rb</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_ra_neon__resource_t</name> *</type><name>rsrc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>props</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Do nothing if parsing a send-all-style report, because the properties
     already come inline. */</comment>
  <if>if <condition>(<expr><name><name>rb</name>-&gt;<name>receiving_all</name></name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* Do nothing (else) if we aren't fetching content.  */</comment>
  <if>if <condition>(<expr>!<name><name>rb</name>-&gt;<name>fetch_content</name></name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <if>if <condition>(<expr><name><name>rb</name>-&gt;<name>file_baton</name></name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lock_token</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>lock_tokens</name></name></expr></argument>,
                                            <argument><expr><call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call>.<name><name>pathbuf</name>-&gt;<name>data</name></name></expr></argument>,
                                            <argument><expr><call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call>.<name><name>pathbuf</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <comment type="block">/* Workaround a buglet in older versions of mod_dav_svn in that it
         will not send remove-prop in the update report when a lock
         property disappears when send-all is false.  */</comment>
      <if>if <condition>(<expr><name>lock_token</name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>svn_lock_t</name> *</type><name>lock</name></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__get_lock_internal</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>ras</name></name></expr></argument>, <argument><expr>&amp;<name>lock</name></expr></argument>, 
                                                 <argument><expr><call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call>.<name><name>pathbuf</name>-&gt;<name>data</name></name></expr></argument>, 
                                                 <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr>! (<name>lock</name>
                 &amp;&amp; <name><name>lock</name>-&gt;<name>token</name></name> 
                 &amp;&amp; (<call><name>strcmp</name><argument_list>(<argument><expr><name><name>lock</name>-&gt;<name>token</name></name></expr></argument>, <argument><expr><name>lock_token</name></expr></argument>)</argument_list></call> == 0))</expr>)</condition><then>
            <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>rb</name>-&gt;<name>editor</name>-&gt;<name>change_file_prop</name></name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>file_baton</name></name></expr></argument>,
                                                 <argument><expr><name>SVN_PROP_ENTRY_LOCK_TOKEN</name></expr></argument>,
                                                 <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></then></if>

      <comment type="block">/* If we aren't supposed to be fetching props, don't. */</comment>
      <if>if <condition>(<expr>! <name><name>rb</name>-&gt;<name>fetch_props</name></name></expr>)</condition><then>
        <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

      <comment type="block">/* Check to see if your parent directory already has your props
         stored, possibly from a depth-1 propfind.   Otherwise just do
         a propfind directly on the file url. */</comment>
      <if>if <condition>( <expr>! ((<call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call>.<name>children</name>)
              &amp;&amp; (<name>props</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call>.<name>children</name></expr></argument>, <argument><expr><name><name>rb</name>-&gt;<name>href</name>-&gt;<name>data</name></name></expr></argument>,
                                       <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call>))</expr> )</condition><then>
        <block>{
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__get_props_resource</name><argument_list>(<argument><expr>&amp;<name>rsrc</name></expr></argument>,
                                                  <argument><expr><name><name>rb</name>-&gt;<name>ras</name></name></expr></argument>,
                                                  <argument><expr><name><name>rb</name>-&gt;<name>href</name>-&gt;<name>data</name></name></expr></argument>,
                                                  <argument><expr><name>NULL</name></expr></argument>,
                                                  <argument><expr><name>NULL</name></expr></argument>,
                                                  <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>props</name> = <name><name>rsrc</name>-&gt;<name>propset</name></name></expr>;</expr_stmt>
        }</block></then></if>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>add_props</name><argument_list>(<argument><expr><name>props</name></expr></argument>,
                        <argument><expr><name><name>rb</name>-&gt;<name>editor</name>-&gt;<name>change_file_prop</name></name></expr></argument>,
                        <argument><expr><name><name>rb</name>-&gt;<name>file_baton</name></name></expr></argument>,
                        <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <if>if <condition>(<expr>! <call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call>.<name>fetch_props</name></expr>)</condition><then>
        <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

      <comment type="block">/* Check to see if your props are already stored, possibly from
         a depth-1 propfind.  Otherwise just do a propfind directly on
         the directory url. */</comment>
      <if>if <condition>( <expr>! ((<call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call>.<name>children</name>)
              &amp;&amp; (<name>props</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call>.<name>children</name></expr></argument>,
                                       <argument><expr><call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call>.<name>vsn_url</name></expr></argument>,
                                       <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call>))</expr> )</condition><then>
        <block>{
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__get_props_resource</name><argument_list>(<argument><expr>&amp;<name>rsrc</name></expr></argument>,
                                                  <argument><expr><name><name>rb</name>-&gt;<name>ras</name></name></expr></argument>,
                                                  <argument><expr><call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call>.<name>vsn_url</name></expr></argument>,
                                                  <argument><expr><name>NULL</name></expr></argument>,
                                                  <argument><expr><name>NULL</name></expr></argument>,
                                                  <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>props</name> = <name><name>rsrc</name>-&gt;<name>propset</name></name></expr>;</expr_stmt>
        }</block></then></if>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>add_props</name><argument_list>(<argument><expr><name>props</name></expr></argument>,
                        <argument><expr><name><name>rb</name>-&gt;<name>editor</name>-&gt;<name>change_dir_prop</name></name></expr></argument>,
                        <argument><expr><call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call>.<name>baton</name></expr></argument>,
                        <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* This implements the `svn_ra_neon__cdata_cb_t' prototype. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>cdata_handler</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>userdata</name></decl></param>, <param><decl><type><name>int</name></type> <name>state</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cdata</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>len</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>report_baton_t</name> *</type><name>rb</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>

  <switch>switch<condition>(<expr><name>state</name></expr>)</condition>
    <block>{
    <case>case <expr><name>ELEM_href</name></expr>:
    </case><case>case <expr><name>ELEM_set_prop</name></expr>:
    </case><case>case <expr><name>ELEM_md5_checksum</name></expr>:
    </case><case>case <expr><name>ELEM_version_name</name></expr>:
    </case><case>case <expr><name>ELEM_creationdate</name></expr>:
    </case><case>case <expr><name>ELEM_creator_displayname</name></expr>:
      <expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>cdata_accum</name></name></expr></argument>, <argument><expr><name>cdata</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    </case><case>case <expr><name>ELEM_txdelta</name></expr>:
      <block>{
        <decl_stmt><decl><type><name>apr_size_t</name></type> <name>nlen</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>

        <comment type="block">/* Pre 1.2, mod_dav_svn was using &lt;txdelta&gt; tags (in addition to
           &lt;fetch-file&gt;s and such) when *not* in "send-all" mode.  As a
           client, we're smart enough to know that's wrong, so when not
           in "receiving-all" mode, we'll ignore &lt;txdelta&gt; tags
           altogether. */</comment>
        <if>if <condition>(<expr>! <name><name>rb</name>-&gt;<name>receiving_all</name></name></expr>)</condition><then>
          <break>break;</break></then></if>

        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_write</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>base64_decoder</name></name></expr></argument>, <argument><expr><name>cdata</name></expr></argument>, <argument><expr>&amp;<name>nlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>nlen</name> != <name>len</name></expr>)</condition><then>
          <block>{
            <comment type="block">/* Short write without associated error?  "Can't happen." */</comment>
            <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_STREAM_UNEXPECTED_EOF</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                     <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Error writing to '%s': unexpected EOF"</expr></argument>)</argument_list></call></expr></argument>,
                                     <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>namestr</name>-&gt;<name>data</name></name></expr></argument>,
                                                          <argument><expr><name><name>rb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
          }</block></then></if>
      }</block>
      <break>break;</break>
    </case>}</block></switch>

  <return>return <expr>0</expr>;</return> <comment type="block">/* no error */</comment>
}</block></function>

<comment type="block">/* This implements the `svn_ra_neon_endelm_cb_t' prototype. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>end_element</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>userdata</name></decl></param>, <param><decl><type><name>int</name></type> <name>state</name></decl></param>,
            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>nspace</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>elt_name</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>report_baton_t</name> *</type><name>rb</name> <init>= <expr><name>userdata</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>editor</name> <init>= <expr><name><name>rb</name>-&gt;<name>editor</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_ra_neon__xml_elm_t</name> *</type><name>elm</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>elm</name> = <call><name>svn_ra_neon__lookup_xml_elem</name><argument_list>(<argument><expr><name>report_elements</name></expr></argument>, <argument><expr><name>nspace</name></expr></argument>, <argument><expr><name>elt_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>elm</name> == <name>NULL</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <switch>switch <condition>(<expr><name><name>elm</name>-&gt;<name>id</name></name></expr>)</condition>
    <block>{
    <case>case <expr><name>ELEM_resource</name></expr>:
      <expr_stmt><expr><name><name>rb</name>-&gt;<name>in_resource</name></name> = <name>FALSE</name></expr>;</expr_stmt>
      <break>break;</break>

    </case><case>case <expr><name>ELEM_update_report</name></expr>:
      <comment type="block">/* End of report; close up the editor. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call>(*<name><name>rb</name>-&gt;<name>editor</name>-&gt;<name>close_edit</name></name>)<argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>edit_baton</name></name></expr></argument>, <argument><expr><name><name>rb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>rb</name>-&gt;<name>edit_baton</name></name> = <name>NULL</name></expr>;</expr_stmt>
      <break>break;</break>

    </case><case>case <expr><name>ELEM_add_directory</name></expr>:
    </case><case>case <expr><name>ELEM_open_directory</name></expr>:

      <comment type="block">/* fetch node props, unless this is the top dir and the real
         target of the operation is not the top dir. */</comment>
      <if>if <condition>(<expr>! ((<call><name>DIR_DEPTH</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call> == 1) &amp;&amp; *<name><name>rb</name>-&gt;<name>target</name></name>)</expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>add_node_props</name><argument_list>(<argument><expr><name>rb</name></expr></argument>, <argument><expr><call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call>.<name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <comment type="block">/* Close the directory on top of the stack, and pop it.  Also,
         destroy the subpool used exclusive by this directory and its
         children.  */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call>(*<name><name>rb</name>-&gt;<name>editor</name>-&gt;<name>close_directory</name></name>)<argument_list>(<argument><expr><call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call>.<name>baton</name></expr></argument>,
                                             <argument><expr><call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call>.<name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call>.<name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>apr_array_pop</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>dirs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    </case><case>case <expr><name>ELEM_add_file</name></expr>:
      <comment type="block">/* we wait until the close element to do the work. this allows us to
         retrieve the href before fetching. */</comment>

      <comment type="block">/* fetch file */</comment>
      <if>if <condition>(<expr>! <name><name>rb</name>-&gt;<name>receiving_all</name></name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>simple_fetch_file</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>ras</name></name></expr></argument>,
                                    <argument><expr><name><name>rb</name>-&gt;<name>href</name>-&gt;<name>data</name></name></expr></argument>,
                                    <argument><expr><call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call>.<name><name>pathbuf</name>-&gt;<name>data</name></name></expr></argument>,
                                    <argument><expr><name><name>rb</name>-&gt;<name>fetch_content</name></name></expr></argument>,
                                    <argument><expr><name><name>rb</name>-&gt;<name>file_baton</name></name></expr></argument>,
                                    <argument><expr><name>NULL</name></expr></argument>,  <comment type="block">/* no base checksum in an add */</comment>
                                    <argument><expr><name><name>rb</name>-&gt;<name>editor</name></name></expr></argument>,
                                    <argument><expr><name><name>rb</name>-&gt;<name>ras</name>-&gt;<name>callbacks</name>-&gt;<name>get_wc_prop</name></name></expr></argument>,
                                    <argument><expr><name><name>rb</name>-&gt;<name>ras</name>-&gt;<name>callback_baton</name></name></expr></argument>,
                                    <argument><expr><name><name>rb</name>-&gt;<name>file_pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="block">/* fetch node props as necessary. */</comment>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>add_node_props</name><argument_list>(<argument><expr><name>rb</name></expr></argument>, <argument><expr><name><name>rb</name>-&gt;<name>file_pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

      <comment type="block">/* close the file and mark that we are no longer operating on a file */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call>(*<name><name>rb</name>-&gt;<name>editor</name>-&gt;<name>close_file</name></name>)<argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>file_baton</name></name></expr></argument>,
                                        <argument><expr><name><name>rb</name>-&gt;<name>result_checksum</name></name></expr></argument>,
                                        <argument><expr><name><name>rb</name>-&gt;<name>file_pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>rb</name>-&gt;<name>file_baton</name></name> = <name>NULL</name></expr>;</expr_stmt>

      <comment type="block">/* Yank this file out of the directory's path buffer. */</comment>
      <expr_stmt><expr><call><name>svn_path_remove_component</name><argument_list>(<argument><expr><call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call>.<name>pathbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>file_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>rb</name>-&gt;<name>file_pool</name></name> = <name>NULL</name></expr>;</expr_stmt>
      <break>break;</break>

    </case><case>case <expr><name>ELEM_txdelta</name></expr>:
      <comment type="block">/* Pre 1.2, mod_dav_svn was using &lt;txdelta&gt; tags (in addition to
         &lt;fetch-file&gt;s and such) when *not* in "send-all" mode.  As a
         client, we're smart enough to know that's wrong, so when not
         in "receiving-all" mode, we'll ignore &lt;txdelta&gt; tags
         altogether. */</comment>
      <if>if <condition>(<expr>! <name><name>rb</name>-&gt;<name>receiving_all</name></name></expr>)</condition><then>
        <break>break;</break></then></if>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_close</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>base64_decoder</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>rb</name>-&gt;<name>whandler</name></name> = <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>rb</name>-&gt;<name>whandler_baton</name></name> = <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>rb</name>-&gt;<name>svndiff_decoder</name></name> = <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>rb</name>-&gt;<name>base64_decoder</name></name> = <name>NULL</name></expr>;</expr_stmt>
      <break>break;</break>

    </case><case>case <expr><name>ELEM_open_file</name></expr>:
      <comment type="block">/* fetch node props as necessary. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>add_node_props</name><argument_list>(<argument><expr><name>rb</name></expr></argument>, <argument><expr><name><name>rb</name>-&gt;<name>file_pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* close the file and mark that we are no longer operating on a file */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call>(*<name><name>rb</name>-&gt;<name>editor</name>-&gt;<name>close_file</name></name>)<argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>file_baton</name></name></expr></argument>,
                                        <argument><expr><name><name>rb</name>-&gt;<name>result_checksum</name></name></expr></argument>,
                                        <argument><expr><name><name>rb</name>-&gt;<name>file_pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>rb</name>-&gt;<name>file_baton</name></name> = <name>NULL</name></expr>;</expr_stmt>

      <comment type="block">/* Yank this file out of the directory's path buffer. */</comment>
      <expr_stmt><expr><call><name>svn_path_remove_component</name><argument_list>(<argument><expr><call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call>.<name>pathbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>file_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>rb</name>-&gt;<name>file_pool</name></name> = <name>NULL</name></expr>;</expr_stmt>
      <break>break;</break>

    </case><case>case <expr><name>ELEM_set_prop</name></expr>:
      <block>{
        <decl_stmt><decl><type><name>svn_string_t</name></type> <name>decoded_value</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>decoded_value_p</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>

        <if>if <condition>(<expr><name><name>rb</name>-&gt;<name>file_baton</name></name></expr>)</condition><then>
          <expr_stmt><expr><name>pool</name> = <name><name>rb</name>-&gt;<name>file_pool</name></name></expr>;</expr_stmt></then>
        <else>else
          <expr_stmt><expr><name>pool</name> = <call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call>.<name>pool</name></expr>;</expr_stmt></else></if>

        <expr_stmt><expr><name><name>decoded_value</name>.<name>data</name></name> = <name><name>rb</name>-&gt;<name>cdata_accum</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>decoded_value</name>.<name>len</name></name> = <name><name>rb</name>-&gt;<name>cdata_accum</name>-&gt;<name>len</name></name></expr>;</expr_stmt>

        <comment type="block">/* Determine the cdata encoding, if any. */</comment>
        <if>if <condition>(<expr><call><name>svn_stringbuf_isempty</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>encoding</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
          <block>{
            <expr_stmt><expr><name>decoded_value_p</name> = &amp;<name>decoded_value</name></expr>;</expr_stmt>
          }</block></then>
        <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>encoding</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr>"base64"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
          <block>{
            <expr_stmt><expr><name>decoded_value_p</name> = <call><name>svn_base64_decode_string</name><argument_list>(<argument><expr>&amp;<name>decoded_value</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>svn_stringbuf_setempty</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>encoding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then>
        <else>else
          <block>{
            <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_XML_UNKNOWN_ENCODING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                      <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Unknown XML encoding: '%s'"</expr></argument>)</argument_list></call></expr></argument>,
                                      <argument><expr><name><name>rb</name>-&gt;<name>encoding</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Not reached. */</comment>
          }</block></else></if></else></if>

        <comment type="block">/* Set the prop. */</comment>
        <if>if <condition>(<expr><name><name>rb</name>-&gt;<name>file_baton</name></name></expr>)</condition><then>
          <block>{
            <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>rb</name>-&gt;<name>editor</name>-&gt;<name>change_file_prop</name></name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>file_baton</name></name></expr></argument>,
                                                 <argument><expr><name><name>rb</name>-&gt;<name>namestr</name>-&gt;<name>data</name></name></expr></argument>,
                                                 <argument><expr><name>decoded_value_p</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then>
        <else>else
          <block>{
            <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>rb</name>-&gt;<name>editor</name>-&gt;<name>change_dir_prop</name></name><argument_list>(<argument><expr><call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call>.<name>baton</name></expr></argument>,
                                                <argument><expr><name><name>rb</name>-&gt;<name>namestr</name>-&gt;<name>data</name></name></expr></argument>,
                                                <argument><expr><name>decoded_value_p</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></else></if>
      }</block>

      <expr_stmt><expr><call><name>svn_stringbuf_setempty</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>cdata_accum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    </case><case>case <expr><name>ELEM_href</name></expr>:
      <if>if <condition>(<expr><name><name>rb</name>-&gt;<name>fetch_content</name></name></expr>)</condition><then>
        <comment type="block">/* record the href that we just found */</comment>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__copy_href</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>href</name></name></expr></argument>, <argument><expr><name><name>rb</name>-&gt;<name>cdata_accum</name>-&gt;<name>data</name></name></expr></argument>,
                                       <argument><expr><name><name>rb</name>-&gt;<name>scratch_pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <expr_stmt><expr><call><name>svn_stringbuf_setempty</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>cdata_accum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* do nothing if we aren't fetching content. */</comment>
      <if>if <condition>(<expr>!<name><name>rb</name>-&gt;<name>fetch_content</name></name></expr>)</condition><then>
        <break>break;</break></then></if>

      <comment type="block">/* if we're within a &lt;resource&gt; tag, then just call the generic
         RA set_wcprop_callback directly;  no need to use the
         update-editor.  */</comment>
      <if>if <condition>(<expr><name><name>rb</name>-&gt;<name>in_resource</name></name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>svn_string_t</name></type> <name>href_val</name></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>href_val</name>.<name>data</name></name> = <name><name>rb</name>-&gt;<name>href</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>href_val</name>.<name>len</name></name> = <name><name>rb</name>-&gt;<name>href</name>-&gt;<name>len</name></name></expr>;</expr_stmt>

          <if>if <condition>(<expr><name><name>rb</name>-&gt;<name>ras</name>-&gt;<name>callbacks</name>-&gt;<name>set_wc_prop</name></name> != <name>NULL</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>rb</name>-&gt;<name>ras</name>-&gt;<name>callbacks</name>-&gt;<name>set_wc_prop</name></name>
                    <argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>ras</name>-&gt;<name>callback_baton</name></name></expr></argument>,
                     <argument><expr><name><name>rb</name>-&gt;<name>current_wcprop_path</name>-&gt;<name>data</name></name></expr></argument>,
                     <argument><expr><name>SVN_RA_NEON__LP_VSN_URL</name></expr></argument>,
                     <argument><expr>&amp;<name>href_val</name></expr></argument>,
                     <argument><expr><name><name>rb</name>-&gt;<name>scratch_pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
          <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>scratch_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <comment type="block">/* else we're setting a wcprop in the context of an editor drive. */</comment>
      <else>else <if>if <condition>(<expr><name><name>rb</name>-&gt;<name>file_baton</name></name> == <name>NULL</name></expr>)</condition><then>
        <block>{
          <comment type="block">/* Update the wcprop here, unless this is the top directory
             and the real target of this operation is something other
             than the top directory. */</comment>
          <if>if <condition>(<expr>! ((<call><name>DIR_DEPTH</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call> == 1) &amp;&amp; *<name><name>rb</name>-&gt;<name>target</name></name>)</expr>)</condition><then>
            <block>{
              <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>simple_store_vsn_url</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>href</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call>.<name>baton</name></expr></argument>,
                                           <argument><expr><name><name>rb</name>-&gt;<name>editor</name>-&gt;<name>change_dir_prop</name></name></expr></argument>,
                                           <argument><expr><call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call>.<name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

              <comment type="block">/* save away the URL in case a fetch-props arrives after all of
                 the subdir processing. we will need this copy of the URL to
                 fetch the properties (i.e. rb-&gt;href will be toast by then). */</comment>
              <expr_stmt><expr><call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call>.<name>vsn_url</name> = <call><name>apr_pmemdup</name><argument_list>(<argument><expr><call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call>.<name>pool</name></expr></argument>,
                                                <argument><expr><name><name>rb</name>-&gt;<name>href</name>-&gt;<name>data</name></name></expr></argument>,
                                                <argument><expr><name><name>rb</name>-&gt;<name>href</name>-&gt;<name>len</name></name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then>
      <else>else
        <block>{
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>simple_store_vsn_url</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>href</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>rb</name>-&gt;<name>file_baton</name></name></expr></argument>,
                                       <argument><expr><name><name>rb</name>-&gt;<name>editor</name>-&gt;<name>change_file_prop</name></name></expr></argument>,
                                       <argument><expr><name><name>rb</name>-&gt;<name>file_pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if></else></if>
      <break>break;</break>

    </case><case>case <expr><name>ELEM_md5_checksum</name></expr>:
      <comment type="block">/* We only care about file checksums. */</comment>
      <if>if <condition>(<expr><name><name>rb</name>-&gt;<name>file_baton</name></name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name><name>rb</name>-&gt;<name>result_checksum</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>file_pool</name></name></expr></argument>,
                                            <argument><expr><name><name>rb</name>-&gt;<name>cdata_accum</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      <expr_stmt><expr><call><name>svn_stringbuf_setempty</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>cdata_accum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    </case><case>case <expr><name>ELEM_version_name</name></expr>:
    </case><case>case <expr><name>ELEM_creationdate</name></expr>:
    </case><case>case <expr><name>ELEM_creator_displayname</name></expr>:
      <block>{
        <comment type="block">/* The name of the xml tag is the property that we want to set. */</comment>
        <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name> <init>=
          <expr><name><name>rb</name>-&gt;<name>file_baton</name></name> ? <name><name>rb</name>-&gt;<name>file_pool</name></name> : <call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call>.<name>pool</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>prop_setter_t</name></type> <name>setter</name> <init>=
          <expr><name><name>rb</name>-&gt;<name>file_baton</name></name> ? <name><name>editor</name>-&gt;<name>change_file_prop</name></name> : <name><name>editor</name>-&gt;<name>change_dir_prop</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name> <init>= <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>elm</name>-&gt;<name>nspace</name></name></expr></argument>, <argument><expr><name><name>elm</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>void</name> *</type><name>baton</name> <init>= <expr><name><name>rb</name>-&gt;<name>file_baton</name></name> ? <name><name>rb</name>-&gt;<name>file_baton</name></name> : <call><name>TOP_DIR</name><argument_list>(<argument><expr><name>rb</name></expr></argument>)</argument_list></call>.<name>baton</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>svn_string_t</name></type> <name>valstr</name></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>valstr</name>.<name>data</name></name> = <name><name>rb</name>-&gt;<name>cdata_accum</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>valstr</name>.<name>len</name></name> = <name><name>rb</name>-&gt;<name>cdata_accum</name>-&gt;<name>len</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>set_special_wc_prop</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>&amp;<name>valstr</name></expr></argument>, <argument><expr><name>setter</name></expr></argument>, <argument><expr><name>baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>svn_stringbuf_setempty</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>cdata_accum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block>
      <break>break;</break>

    </case><default>default:
      <break>break;</break>
    </default>}</block></switch>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>reporter_set_path</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>report_baton</name></decl></param>,
                                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                       <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                                       <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                                       <param><decl><type><name>svn_boolean_t</name></type> <name>start_empty</name></decl></param>,
                                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lock_token</name></decl></param>,
                                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>report_baton_t</name> *</type><name>rb</name> <init>= <expr><name>report_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>entry</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>qpath</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tokenstring</name> <init>= <expr>""</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>depthstring</name> <init>= <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"depth=\"%s\""</expr></argument>,
                                         <argument><expr><call><name>svn_depth_to_word</name><argument_list>(<argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>lock_token</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>tokenstring</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"lock-token=\"%s\""</expr></argument>, <argument><expr><name>lock_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>lock_tokens</name></name></expr></argument>, 
                   <argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><call><name>apr_hash_pool_get</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>lock_tokens</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, 
                   <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                   <argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><call><name>apr_hash_pool_get</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>lock_tokens</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lock_token</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <expr_stmt><expr><call><name>svn_xml_escape_cdata_cstring</name><argument_list>(<argument><expr>&amp;<name>qpath</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>start_empty</name></expr>)</condition><then>
    <expr_stmt><expr><name>entry</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
                         <argument><expr>"&lt;S:entry rev=\"%ld\" %s %s"
                         " start-empty=\"true\"&gt;%s&lt;/S:entry&gt;" <name>DEBUG_CR</name></expr></argument>,
                         <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>depthstring</name></expr></argument>, <argument><expr><name>tokenstring</name></expr></argument>, <argument><expr><name><name>qpath</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><name>entry</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
                         <argument><expr>"&lt;S:entry rev=\"%ld\" %s %s&gt;"
                         "%s&lt;/S:entry&gt;" <name>DEBUG_CR</name></expr></argument>,
                         <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>depthstring</name></expr></argument>, <argument><expr><name>tokenstring</name></expr></argument>, <argument><expr><name><name>qpath</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

  <return>return <expr><call><name>svn_io_file_write_full</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>tmpfile</name></name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>reporter_link_path</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>report_baton</name></decl></param>,
                                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
                                        <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                                        <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                                        <param><decl><type><name>svn_boolean_t</name></type> <name>start_empty</name></decl></param>,
                                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lock_token</name></decl></param>,
                                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>report_baton_t</name> *</type><name>rb</name> <init>= <expr><name>report_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>entry</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>qpath</name> <init>= <expr><name>NULL</name></expr></init>, *<name>qlinkpath</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_string_t</name></type> <name>bc_relative</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tokenstring</name> <init>= <expr>""</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>depthstring</name> <init>= <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"depth=\"%s\""</expr></argument>,
                                         <argument><expr><call><name>svn_depth_to_word</name><argument_list>(<argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>lock_token</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>tokenstring</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"lock-token=\"%s\""</expr></argument>, <argument><expr><name>lock_token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>lock_tokens</name></name></expr></argument>, 
                   <argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><call><name>apr_hash_pool_get</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>lock_tokens</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, 
                   <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                   <argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><call><name>apr_hash_pool_get</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>lock_tokens</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lock_token</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <comment type="block">/* Convert the copyfrom_* url/rev "public" pair into a Baseline
     Collection (BC) URL that represents the revision -- and a
     relative path under that BC.  */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__get_baseline_info</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>bc_relative</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                         <argument><expr><name><name>rb</name>-&gt;<name>ras</name></name></expr></argument>,
                                         <argument><expr><name>url</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>,
                                         <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><call><name>svn_xml_escape_cdata_cstring</name><argument_list>(<argument><expr>&amp;<name>qpath</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_xml_escape_attr_cstring</name><argument_list>(<argument><expr>&amp;<name>qlinkpath</name></expr></argument>, <argument><expr><name><name>bc_relative</name>.<name>data</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>start_empty</name></expr>)</condition><then>
    <expr_stmt><expr><name>entry</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
                         <argument><expr>"&lt;S:entry rev=\"%ld\" %s %s"
                         " linkpath=\"/%s\" start-empty=\"true\""
                         "&gt;%s&lt;/S:entry&gt;" <name>DEBUG_CR</name></expr></argument>,
                         <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>depthstring</name></expr></argument>, <argument><expr><name>tokenstring</name></expr></argument>,
                         <argument><expr><name><name>qlinkpath</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>qpath</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><name>entry</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
                         <argument><expr>"&lt;S:entry rev=\"%ld\" %s %s"
                         " linkpath=\"/%s\"&gt;%s&lt;/S:entry&gt;" <name>DEBUG_CR</name></expr></argument>,
                         <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>depthstring</name></expr></argument>, <argument><expr><name>tokenstring</name></expr></argument>,
                         <argument><expr><name><name>qlinkpath</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>qpath</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

  <return>return <expr><call><name>svn_io_file_write_full</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>tmpfile</name></name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>reporter_delete_path</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>report_baton</name></decl></param>,
                                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>report_baton_t</name> *</type><name>rb</name> <init>= <expr><name>report_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>qpath</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>svn_xml_escape_cdata_cstring</name><argument_list>(<argument><expr>&amp;<name>qpath</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>s</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
                   <argument><expr>"&lt;S:missing&gt;%s&lt;/S:missing&gt;" <name>DEBUG_CR</name></expr></argument>,
                   <argument><expr><name><name>qpath</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>svn_io_file_write_full</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>tmpfile</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>reporter_abort_report</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>report_baton</name></decl></param>,
                                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>report_baton_t</name> *</type><name>rb</name> <init>= <expr><name>report_baton</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr>(<name>void</name>) <call><name>apr_file_close</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>tmpfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>reporter_finish_report</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>report_baton</name></decl></param>,
                                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>report_baton_t</name> *</type><name>rb</name> <init>= <expr><name>report_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>vcc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>request_headers</name> <init>= <expr><call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>request_headers</name></expr></argument>, <argument><expr>"Accept-Encoding"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
               <argument><expr>"svndiff1;q=0.9,svndiff;q=0.8"</expr></argument>)</argument_list></call></expr>;</expr_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_RA_NEON__REPORT_TAIL</name></cpp:macro>  <cpp:value>"&lt;/S:update-report&gt;" DEBUG_CR</cpp:value></cpp:define>
  <comment type="block">/* write the final closing gunk to our request body. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_write_full</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>tmpfile</name></name></expr></argument>,
                                 <argument><expr><name>SVN_RA_NEON__REPORT_TAIL</name></expr></argument>,
                                 <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVN_RA_NEON__REPORT_TAIL</name></expr></argument>)</argument_list></sizeof> - 1</expr></argument>,
                                 <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SVN_RA_NEON__REPORT_TAIL</name></cpp:undef>

  <comment type="block">/* get the editor process prepped */</comment>
  <expr_stmt><expr><name><name>rb</name>-&gt;<name>dirs</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dir_item_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rb</name>-&gt;<name>namestr</name></name> = <call><name>MAKE_BUFFER</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rb</name>-&gt;<name>cpathstr</name></name> = <call><name>MAKE_BUFFER</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rb</name>-&gt;<name>encoding</name></name> = <call><name>MAKE_BUFFER</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rb</name>-&gt;<name>href</name></name> = <call><name>MAKE_BUFFER</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* get the VCC.  if this doesn't work out for us, don't forget to
     remove the tmpfile before returning the error. */</comment>
  <if>if <condition>(<expr>(<name>err</name> = <call><name>svn_ra_neon__get_vcc</name><argument_list>(<argument><expr>&amp;<name>vcc</name></expr></argument>, <argument><expr><name><name>rb</name>-&gt;<name>ras</name></name></expr></argument>,
                                  <argument><expr><name><name>rb</name>-&gt;<name>ras</name>-&gt;<name>url</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
    <block>{
      <expr_stmt><expr>(<name>void</name>) <call><name>apr_file_close</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>tmpfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>err</name></expr>;</return>
    }</block></then></if>

  <comment type="block">/* dispatch the REPORT. */</comment>
  <expr_stmt><expr><name>err</name> = <call><name>svn_ra_neon__parsed_request</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>ras</name></name></expr></argument>, <argument><expr>"REPORT"</expr></argument>, <argument><expr><name>vcc</name></expr></argument>,
                                    <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>rb</name>-&gt;<name>tmpfile</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                    <argument><expr><name>start_element</name></expr></argument>,
                                    <argument><expr><name>cdata_handler</name></expr></argument>,
                                    <argument><expr><name>end_element</name></expr></argument>,
                                    <argument><expr><name>rb</name></expr></argument>,
                                    <argument><expr><name>request_headers</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                    <argument><expr><name><name>rb</name>-&gt;<name>spool_response</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* we're done with the file */</comment>
  <expr_stmt><expr>(<name>void</name>) <call><name>apr_file_close</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>tmpfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* We got the whole HTTP response thing done.  *Whew*.  Our edit
     baton should have been closed by now, so return a failure if it
     hasn't been. */</comment>
  <if>if <condition>(<expr><name><name>rb</name>-&gt;<name>edit_baton</name></name></expr>)</condition><then>
    <block>{
      <return>return <expr><call><name>svn_error_createf</name>
        <argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_REQUEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
         <argument><expr><call><name>_</name><argument_list>(<argument><expr>"REPORT response handling failed to complete the editor drive"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

  <comment type="block">/* store auth info if we can. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__maybe_store_auth_info</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>ras</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_ra_reporter3_t</name></type> <name>ra_neon_reporter</name> <init>= <expr><block>{
  <expr><name>reporter_set_path</name></expr>,
  <expr><name>reporter_delete_path</name></expr>,
  <expr><name>reporter_link_path</name></expr>,
  <expr><name>reporter_finish_report</name></expr>,
  <expr><name>reporter_abort_report</name></expr>
}</block></expr></init></decl>;</decl_stmt>


<comment type="block">/* Make a generic REPORTER / REPORT_BATON for reporting the state of
   the working copy against REVISION during updates or status checks.
   The server will drive EDITOR / EDIT_BATON to indicate how to
   transform the working copy into the requested target.

   SESSION is the RA session in use.  TARGET is an optional single
   path component will restrict the scope of the operation to an entry
   in the directory represented by the SESSION's URL, or empty if the
   entire directory is meant to be the target.

   DEPTH is the requested depth of the operation.  It will be
   transmitted to the server, which (if it understands depths) can use
   the information to limit the information it sends back.  Also store
   DEPTH in the REPORT_BATON: that way, if the server is old and does
   not understand depth requests, the client can notice this when the
   response starts streaming in, and adjust accordingly (as of this
   writnig, by wrapping REPORTER-&gt;editor and REPORTER-&gt;edit_baton in a
   filtering editor that simply tosses out the data the client doesn't
   want).

   If SEND_COPYFROM_ARGS is set, then ask the server to transmit
   copyfrom args in add_file() in add_directory() calls.

   If IGNORE_ANCESTRY is set, the server will transmit real diffs
   between the working copy and the target even if those objects are
   not historically related.  Otherwise, the response will generally
   look like a giant delete followed by a giant add.

   RESOURCE_WALK controls whether to ask the DAV server to supply an
   entire tree's worth of version-resource-URL working copy cache
   updates.

   FETCH_CONTENT is used by the REPORT response parser to determine
   whether it should bother getting the contents of files represented
   in the delta response (of if a directory delta is all that is of
   interest).

   If SEND_ALL is set, the server will be asked to embed contents into
   the main response.

   If SPOOL_RESPONSE is set, the REPORT response will be cached to
   disk in a tmpfile (in full), then read back and parsed.

   Oh, and do all this junk in POOL.  */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>make_reporter</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
              <param><decl><type><specifier>const</specifier> <name>svn_ra_reporter3_t</name> **</type><name>reporter</name></decl></param>,
              <param><decl><type><name>void</name> **</type><name>report_baton</name></decl></param>,
              <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_path</name></decl></param>,
              <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
              <param><decl><type><name>svn_boolean_t</name></type> <name>send_copyfrom_args</name></decl></param>,
              <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl></param>,
              <param><decl><type><name>svn_boolean_t</name></type> <name>resource_walk</name></decl></param>,
              <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>editor</name></decl></param>,
              <param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
              <param><decl><type><name>svn_boolean_t</name></type> <name>fetch_content</name></decl></param>,
              <param><decl><type><name>svn_boolean_t</name></type> <name>send_all</name></decl></param>,
              <param><decl><type><name>svn_boolean_t</name></type> <name>spool_response</name></decl></param>,
              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_ra_neon__session_t</name> *</type><name>ras</name> <init>= <expr><name><name>session</name>-&gt;<name>priv</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>report_baton_t</name> *</type><name>rb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>xml_s</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>filter_editor</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>filter_baton</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>has_target</name> <init>= <expr>*<name>target</name> ? <name>TRUE</name> : <name>FALSE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>server_supports_depth</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_neon__has_capability</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>&amp;<name>server_supports_depth</name></expr></argument>,
                                      <argument><expr><name>SVN_RA_CAPABILITY_DEPTH</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* We can skip the depth filtering when the user requested
     depth_files or depth_infinity because the server will
     transmit the right stuff anyway. */</comment>
  <if>if <condition>(<expr>(<name>depth</name> != <name>svn_depth_files</name>)
      &amp;&amp; (<name>depth</name> != <name>svn_depth_infinity</name>)
      &amp;&amp; ! <name>server_supports_depth</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_delta_depth_filter_editor</name><argument_list>(<argument><expr>&amp;<name>filter_editor</name></expr></argument>,
                                            <argument><expr>&amp;<name>filter_baton</name></expr></argument>,
                                            <argument><expr><name>editor</name></expr></argument>,
                                            <argument><expr><name>edit_baton</name></expr></argument>,
                                            <argument><expr><name>depth</name></expr></argument>,
                                            <argument><expr><name>has_target</name></expr></argument>,
                                            <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>editor</name> = <name>filter_editor</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>edit_baton</name> = <name>filter_baton</name></expr>;</expr_stmt>
    }</block></then></if>

  <expr_stmt><expr><name>rb</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>rb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rb</name>-&gt;<name>ras</name></name> = <name>ras</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rb</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rb</name>-&gt;<name>scratch_pool</name></name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rb</name>-&gt;<name>editor</name></name> = <name>editor</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rb</name>-&gt;<name>edit_baton</name></name> = <name>edit_baton</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rb</name>-&gt;<name>fetch_content</name></name> = <name>fetch_content</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rb</name>-&gt;<name>in_resource</name></name> = <name>FALSE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rb</name>-&gt;<name>current_wcprop_path</name></name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rb</name>-&gt;<name>is_switch</name></name> = <name>dst_path</name> ? <name>TRUE</name> : <name>FALSE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rb</name>-&gt;<name>target</name></name> = <name>target</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rb</name>-&gt;<name>receiving_all</name></name> = <name>FALSE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rb</name>-&gt;<name>spool_response</name></name> = <name>spool_response</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rb</name>-&gt;<name>whandler</name></name> = <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rb</name>-&gt;<name>whandler_baton</name></name> = <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rb</name>-&gt;<name>svndiff_decoder</name></name> = <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rb</name>-&gt;<name>base64_decoder</name></name> = <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rb</name>-&gt;<name>cdata_accum</name></name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rb</name>-&gt;<name>send_copyfrom_args</name></name> = <name>send_copyfrom_args</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rb</name>-&gt;<name>lock_tokens</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Neon "pulls" request body content from the caller. The reporter is
     organized where data is "pushed" into self. To match these up, we use
     an intermediate file -- push data into the file, then let Neon pull
     from the file.

     Note: one day we could spin up a thread and use a pipe between this
     code and Neon. We write to a pipe, Neon reads from the pipe. Each
     thread can block on the pipe, waiting for the other to complete its
     work.
  */</comment>

  <comment type="block">/* Use the client callback to create a tmpfile. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>ras</name>-&gt;<name>callbacks</name>-&gt;<name>open_tmp_file</name></name><argument_list>(<argument><expr>&amp;<name><name>rb</name>-&gt;<name>tmpfile</name></name></expr></argument>, <argument><expr><name><name>ras</name>-&gt;<name>callback_baton</name></name></expr></argument>,
                                        <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* prep the file */</comment>
  <expr_stmt><expr><name>s</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"&lt;S:update-report send-all=\"%s\" xmlns:S=\""
                   <name>SVN_XML_NAMESPACE</name> "\"&gt;" <name>DEBUG_CR</name></expr></argument>,
                   <argument><expr><name>send_all</name> ? "true" : "false"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_write_full</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>tmpfile</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* always write the original source path.  this is part of the "new
     style" update-report syntax.  if the tmpfile is used in an "old
     style' update-report request, older servers will just ignore this
     unknown xml element. */</comment>
  <expr_stmt><expr><name>xml_s</name> = <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_xml_escape_cdata_cstring</name><argument_list>(<argument><expr>&amp;<name>xml_s</name></expr></argument>, <argument><expr><name><name>ras</name>-&gt;<name>url</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>s</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"&lt;S:src-path&gt;%s&lt;/S:src-path&gt;" <name>DEBUG_CR</name></expr></argument>, <argument><expr><name><name>xml_s</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_write_full</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>tmpfile</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* an invalid revnum means "latest". we can just omit the target-revision
     element in that case. */</comment>
  <if>if <condition>(<expr><call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>revision</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>s</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
                       <argument><expr>"&lt;S:target-revision&gt;%ld&lt;/S:target-revision&gt;" <name>DEBUG_CR</name></expr></argument>,
                       <argument><expr><name>revision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_write_full</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>tmpfile</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <comment type="block">/* Pre-0.36 servers don't like to see an empty target string.  */</comment>
  <if>if <condition>(<expr>*<name>target</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>xml_s</name> = <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>svn_xml_escape_cdata_cstring</name><argument_list>(<argument><expr>&amp;<name>xml_s</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>s</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"&lt;S:update-target&gt;%s&lt;/S:update-target&gt;" <name>DEBUG_CR</name></expr></argument>,
                       <argument><expr><name><name>xml_s</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_write_full</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>tmpfile</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>


  <comment type="block">/* A NULL dst_path is also no problem;  this is only passed during a
     'switch' operation.  If NULL, we don't mention it in the custom
     report, and mod_dav_svn automatically runs dir_delta() on two
     identical paths. */</comment>
  <if>if <condition>(<expr><name>dst_path</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>xml_s</name> = <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>svn_xml_escape_cdata_cstring</name><argument_list>(<argument><expr>&amp;<name>xml_s</name></expr></argument>, <argument><expr><name>dst_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>s</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"&lt;S:dst-path&gt;%s&lt;/S:dst-path&gt;" <name>DEBUG_CR</name></expr></argument>,
                       <argument><expr><name><name>xml_s</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_write_full</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>tmpfile</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <comment type="block">/* Old servers know "recursive" but not "depth"; help them DTRT. */</comment>
  <if>if <condition>(<expr><name>depth</name> == <name>svn_depth_files</name> || <name>depth</name> == <name>svn_depth_empty</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name> <init>= <expr>"&lt;S:recursive&gt;no&lt;/S:recursive&gt;" <name>DEBUG_CR</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_write_full</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>tmpfile</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>,
                                     <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <comment type="block">/* mod_dav_svn defaults to svn_depth_infinity, but we always send anyway. */</comment>
  <block>{
    <expr_stmt><expr><name>s</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"&lt;S:depth&gt;%s&lt;/S:depth&gt;" <name>DEBUG_CR</name></expr></argument>,
                     <argument><expr><call><name>svn_depth_to_word</name><argument_list>(<argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_write_full</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>tmpfile</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>

  <comment type="block">/* mod_dav_svn will use ancestry in diffs unless it finds this element. */</comment>
  <if>if <condition>(<expr><name>ignore_ancestry</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name> <init>= <expr>"&lt;S:ignore-ancestry&gt;yes&lt;/S:ignore-ancestry&gt;" <name>DEBUG_CR</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_write_full</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>tmpfile</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>,
                                     <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <comment type="block">/* mod_dav_svn 1.5 and later won't send copyfrom args unless it
     finds this element.  older mod_dav_svn modules should just
     ignore the unknown element. */</comment>
  <if>if <condition>(<expr><name>send_copyfrom_args</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name> <init>=
        <expr>"&lt;S:send-copyfrom-args&gt;yes&lt;/S:send-copyfrom-args&gt;" <name>DEBUG_CR</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_write_full</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>tmpfile</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>,
                                     <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <comment type="block">/* If we want a resource walk to occur, note that now. */</comment>
  <if>if <condition>(<expr><name>resource_walk</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name> <init>= <expr>"&lt;S:resource-walk&gt;yes&lt;/S:resource-walk&gt;" <name>DEBUG_CR</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_write_full</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>tmpfile</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>,
                                     <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <comment type="block">/* When in 'send-all' mode, mod_dav_svn will assume that it should
     calculate and transmit real text-deltas (instead of empty windows
     that merely indicate "text is changed") unless it finds this
     element.  When not in 'send-all' mode, mod_dav_svn will never
     send text-deltas at all.

     NOTE: Do NOT count on servers actually obeying this, as some exist
     which obey send-all, but do not check for this directive at all! */</comment>
  <if>if <condition>(<expr><name>send_all</name> &amp;&amp; (! <name>fetch_content</name>)</expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name> <init>= <expr>"&lt;S:text-deltas&gt;no&lt;/S:text-deltas&gt;" <name>DEBUG_CR</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_write_full</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>tmpfile</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>,
                                     <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <expr_stmt><expr>*<name>reporter</name> = &amp;<name>ra_neon_reporter</name></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>report_baton</name> = <name>rb</name></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type> <name>svn_ra_neon__do_update</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>svn_ra_reporter3_t</name> **</type><name>reporter</name></decl></param>,
                                     <param><decl><type><name>void</name> **</type><name>report_baton</name></decl></param>,
                                     <param><decl><type><name>svn_revnum_t</name></type> <name>revision_to_update_to</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>update_target</name></decl></param>,
                                     <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                                     <param><decl><type><name>svn_boolean_t</name></type> <name>send_copyfrom_args</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>wc_update</name></decl></param>,
                                     <param><decl><type><name>void</name> *</type><name>wc_update_baton</name></decl></param>,
                                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>make_reporter</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                       <argument><expr><name>reporter</name></expr></argument>,
                       <argument><expr><name>report_baton</name></expr></argument>,
                       <argument><expr><name>revision_to_update_to</name></expr></argument>,
                       <argument><expr><name>update_target</name></expr></argument>,
                       <argument><expr><name>NULL</name></expr></argument>,
                       <argument><expr><name>depth</name></expr></argument>,
                       <argument><expr><name>send_copyfrom_args</name></expr></argument>,
                       <argument><expr><name>FALSE</name></expr></argument>,
                       <argument><expr><name>FALSE</name></expr></argument>,
                       <argument><expr><name>wc_update</name></expr></argument>,
                       <argument><expr><name>wc_update_baton</name></expr></argument>,
                       <argument><expr><name>TRUE</name></expr></argument>, <comment type="block">/* fetch_content */</comment>
                       <argument><expr><name>TRUE</name></expr></argument>, <comment type="block">/* send_all */</comment>
                       <argument><expr><name>FALSE</name></expr></argument>, <comment type="block">/* spool_response */</comment>
                       <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type> <name>svn_ra_neon__do_status</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>svn_ra_reporter3_t</name> **</type><name>reporter</name></decl></param>,
                                     <param><decl><type><name>void</name> **</type><name>report_baton</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>status_target</name></decl></param>,
                                     <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                                     <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>wc_status</name></decl></param>,
                                     <param><decl><type><name>void</name> *</type><name>wc_status_baton</name></decl></param>,
                                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>make_reporter</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                       <argument><expr><name>reporter</name></expr></argument>,
                       <argument><expr><name>report_baton</name></expr></argument>,
                       <argument><expr><name>revision</name></expr></argument>,
                       <argument><expr><name>status_target</name></expr></argument>,
                       <argument><expr><name>NULL</name></expr></argument>,
                       <argument><expr><name>depth</name></expr></argument>,
                       <argument><expr><name>FALSE</name></expr></argument>,
                       <argument><expr><name>FALSE</name></expr></argument>,
                       <argument><expr><name>FALSE</name></expr></argument>,
                       <argument><expr><name>wc_status</name></expr></argument>,
                       <argument><expr><name>wc_status_baton</name></expr></argument>,
                       <argument><expr><name>FALSE</name></expr></argument>, <comment type="block">/* fetch_content */</comment>
                       <argument><expr><name>TRUE</name></expr></argument>, <comment type="block">/* send_all */</comment>
                       <argument><expr><name>FALSE</name></expr></argument>, <comment type="block">/* spool_response */</comment>
                       <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type> <name>svn_ra_neon__do_switch</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>svn_ra_reporter3_t</name> **</type><name>reporter</name></decl></param>,
                                     <param><decl><type><name>void</name> **</type><name>report_baton</name></decl></param>,
                                     <param><decl><type><name>svn_revnum_t</name></type> <name>revision_to_update_to</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>update_target</name></decl></param>,
                                     <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>switch_url</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>wc_update</name></decl></param>,
                                     <param><decl><type><name>void</name> *</type><name>wc_update_baton</name></decl></param>,
                                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>make_reporter</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                       <argument><expr><name>reporter</name></expr></argument>,
                       <argument><expr><name>report_baton</name></expr></argument>,
                       <argument><expr><name>revision_to_update_to</name></expr></argument>,
                       <argument><expr><name>update_target</name></expr></argument>,
                       <argument><expr><name>switch_url</name></expr></argument>,
                       <argument><expr><name>depth</name></expr></argument>,
                       <argument><expr><name>FALSE</name></expr></argument>,  <comment type="block">/* ### TODO(sussman): no copyfrom args */</comment>
                       <argument><expr><name>TRUE</name></expr></argument>,
                       <argument><expr><name>FALSE</name></expr></argument>, <comment type="block">/* ### Disabled, pre-1.2 servers sometimes
                                 return incorrect resource-walk data */</comment>
                       <argument><expr><name>wc_update</name></expr></argument>,
                       <argument><expr><name>wc_update_baton</name></expr></argument>,
                       <argument><expr><name>TRUE</name></expr></argument>, <comment type="block">/* fetch_content */</comment>
                       <argument><expr><name>TRUE</name></expr></argument>, <comment type="block">/* send_all */</comment>
                       <argument><expr><name>FALSE</name></expr></argument>, <comment type="block">/* spool_response */</comment>
                       <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type> <name>svn_ra_neon__do_diff</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>svn_ra_reporter3_t</name> **</type><name>reporter</name></decl></param>,
                                   <param><decl><type><name>void</name> **</type><name>report_baton</name></decl></param>,
                                   <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>diff_target</name></decl></param>,
                                   <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                                   <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl></param>,
                                   <param><decl><type><name>svn_boolean_t</name></type> <name>text_deltas</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>versus_url</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>wc_diff</name></decl></param>,
                                   <param><decl><type><name>void</name> *</type><name>wc_diff_baton</name></decl></param>,
                                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>make_reporter</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                       <argument><expr><name>reporter</name></expr></argument>,
                       <argument><expr><name>report_baton</name></expr></argument>,
                       <argument><expr><name>revision</name></expr></argument>,
                       <argument><expr><name>diff_target</name></expr></argument>,
                       <argument><expr><name>versus_url</name></expr></argument>,
                       <argument><expr><name>depth</name></expr></argument>,
                       <argument><expr><name>FALSE</name></expr></argument>,
                       <argument><expr><name>ignore_ancestry</name></expr></argument>,
                       <argument><expr><name>FALSE</name></expr></argument>,
                       <argument><expr><name>wc_diff</name></expr></argument>,
                       <argument><expr><name>wc_diff_baton</name></expr></argument>,
                       <argument><expr><name>text_deltas</name></expr></argument>, <comment type="block">/* fetch_content */</comment>
                       <argument><expr><name>FALSE</name></expr></argument>, <comment type="block">/* send_all */</comment>
                       <argument><expr><name>TRUE</name></expr></argument>, <comment type="block">/* spool_response */</comment>
                       <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
</unit>
