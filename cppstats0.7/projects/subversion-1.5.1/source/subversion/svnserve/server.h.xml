<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/svnserve/server.h"><comment type="block">/*
 * svn_server.h :  declarations for the svn server
 *
 * ====================================================================
 * Copyright (c) 2000-2006 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>


<escape char="0xc"/>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SERVER_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SERVER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_network_io.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_repos.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>server_baton_t</name> <block>{
  <decl_stmt><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>            <comment type="block">/* For convenience; same as svn_repos_fs(repos) */</comment>
  <decl_stmt><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl>;</decl_stmt>       <comment type="block">/* Parsed repository svnserve.conf */</comment>
  <decl_stmt><decl><type><name>svn_config_t</name> *</type><name>pwdb</name></decl>;</decl_stmt>      <comment type="block">/* Parsed password database */</comment>
  <decl_stmt><decl><type><name>svn_authz_t</name> *</type><name>authzdb</name></decl>;</decl_stmt>    <comment type="block">/* Parsed authz rules */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>authz_repos_name</name></decl>;</decl_stmt> <comment type="block">/* The name of the repository */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name></decl>;</decl_stmt>       <comment type="block">/* Authentication realm */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_url</name></decl>;</decl_stmt>   <comment type="block">/* URL to base of repository */</comment>
  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>fs_path</name></decl>;</decl_stmt><comment type="block">/* Decoded base in-repos path (w/ leading slash) */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>user</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>tunnel</name></decl>;</decl_stmt>    <comment type="block">/* Tunneled through login agent */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tunnel_user</name></decl>;</decl_stmt> <comment type="block">/* Allow EXTERNAL to authenticate as this */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>read_only</name></decl>;</decl_stmt> <comment type="block">/* Disallow write access (global flag) */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SVN_HAVE_SASL</name></cpp:ifdef>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>use_sasl</name></decl>;</decl_stmt>  <comment type="block">/* Use Cyrus SASL for authentication */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
}</block></struct></type> <name>server_baton_t</name>;</typedef>

<enum>enum <name>authn_type</name> <block>{ <decl><name>UNAUTHENTICATED</name></decl>, <decl><name>AUTHENTICATED</name></decl> }</block>;</enum>
<enum>enum <name>access_type</name> <block>{ <decl><name>NO_ACCESS</name></decl>, <decl><name>READ_ACCESS</name></decl>, <decl><name>WRITE_ACCESS</name></decl> }</block>;</enum>

<enum>enum <name>access_type</name> <name>get_access</name><expr_stmt><expr>(<name>server_baton_t</name> *<name>b</name>, enum <name>authn_type</name> <name>auth</name>)</expr>;</expr_stmt></enum>

<typedef>typedef <type><struct>struct <name>serve_params_t</name> <block>{
  <comment type="block">/* The virtual root of the repositories to serve.  The client URL
     path is interpreted relative to this root and is not allowed to
     escape it. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>root</name></decl>;</decl_stmt>

  <comment type="block">/* True if the connection is tunneled over an ssh-like transport,
     such that the client may use EXTERNAL to authenticate as the
     current uid's username. */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>tunnel</name></decl>;</decl_stmt>

  <comment type="block">/* If tunnel is true, overrides the current uid's username as the
     identity EXTERNAL authenticates as. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tunnel_user</name></decl>;</decl_stmt>

  <comment type="block">/* True if the read-only flag was specified on the command-line,
     which forces all connections to be read-only. */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>read_only</name></decl>;</decl_stmt>

  <comment type="block">/* A parsed repository svnserve configuration file, ala
     svnserve.conf.  If this is NULL, then no configuration file was
     specified on the command line.  If this is non-NULL, then
     per-repository svnserve.conf are not read. */</comment>
  <decl_stmt><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl>;</decl_stmt>

  <comment type="block">/* A parsed repository password database.  If this is NULL, then
     either no svnserve configuration file was specified on the
     command line, or it was specified and it did not refer to a
     password database. */</comment>
  <decl_stmt><decl><type><name>svn_config_t</name> *</type><name>pwdb</name></decl>;</decl_stmt>

  <comment type="block">/* A parsed repository authorization database.  If this is NULL,
     then either no svnserve configuration file was specified on the
     command line, or it was specified and it did not refer to a
     authorization database. */</comment>
  <decl_stmt><decl><type><name>svn_authz_t</name> *</type><name>authzdb</name></decl>;</decl_stmt>
}</block></struct></type> <name>serve_params_t</name>;</typedef>

<comment type="block">/* Serve the connection CONN according to the parameters PARAMS. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>serve</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>, <param><decl><type><name>serve_params_t</name> *</type><name>params</name></decl></param>,
                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Load a svnserve configuration file located at FILENAME into CFG,
   any referenced password database into PWDB and any referenced
   authorization database into AUTHZDB.  If MUST_EXIST is true and
   FILENAME does not exist, then this returns an error.  BASE may be
   specified as the base path to any referenced password and
   authorization files found in FILENAME. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>load_configs</name><parameter_list>(<param><decl><type><name>svn_config_t</name> **</type><name>cfg</name></decl></param>,
                          <param><decl><type><name>svn_config_t</name> **</type><name>pwdb</name></decl></param>,
                          <param><decl><type><name>svn_authz_t</name> **</type><name>authzdb</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename</name></decl></param>,
                          <param><decl><type><name>svn_boolean_t</name></type> <name>must_exist</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base</name></decl></param>,
                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Initialize the Cyrus SASL library. POOL is used for allocations. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>cyrus_init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Authenticate using Cyrus SASL. */</comment>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>cyrus_auth_request</name><argument_list>(<argument><expr><name>svn_ra_svn_conn_t</name> *<name>conn</name></expr></argument>,
                                <argument><expr><name>apr_pool_t</name> *<name>pool</name></expr></argument>,
                                <argument><expr><name>server_baton_t</name> *<name>b</name></expr></argument>,
                                <argument>enum <expr><name>access_type</name> <name>required</name></expr></argument>,
                                <argument><expr><name>svn_boolean_t</name> <name>needs_username</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* SERVER_H */</comment>
</unit>
