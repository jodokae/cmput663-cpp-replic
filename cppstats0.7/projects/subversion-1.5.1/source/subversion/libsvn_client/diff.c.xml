<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_client/diff.c"><comment type="block">/*
 * diff.c: comparing
 *
 * ====================================================================
 * Copyright (c) 2000-2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<comment type="block">/* ==================================================================== */</comment>


<escape char="0xc"/>
<comment type="block">/*** Includes. ***/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_hash.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_wc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_delta.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_diff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_mergeinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_utf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_props.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_sorts.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_wc_private.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>

<escape char="0xc"/>
<comment type="block">/*
 * Constant separator strings
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>equal_string</name><index>[]</index></name> <init>=
  <expr>"==================================================================="</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>under_string</name><index>[]</index></name> <init>=
  <expr>"___________________________________________________________________"</expr></init></decl>;</decl_stmt>


<comment type="block">/*-----------------------------------------------------------------*/</comment>
<escape char="0xc"/>
<comment type="block">/* Utilities */</comment>

<comment type="block">/* Wrapper for apr_file_printf(), which see.  FORMAT is a utf8-encoded
   string after it is formatted, so this function can convert it to
   ENCODING before printing. */</comment>
<function_decl><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>file_printf_from_utf8</name><parameter_list>(<param><decl><type><name>apr_file_t</name> *</type><name>fptr</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>encoding</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>format</name></decl></param>, <param><decl><type>...</type></decl></param>)</parameter_list>
  __attribute__ <parameter_list>(<param/></parameter_list>(format<parameter_list>(<param><decl><type><name>printf</name></type></decl></param>, <param/></parameter_list>3, 4</function_decl>)))<empty_stmt>;</empty_stmt>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>file_printf_from_utf8</name><parameter_list>(<param><decl><type><name>apr_file_t</name> *</type><name>fptr</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>encoding</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>format</name></decl></param>, <param><decl><type>...</type></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>buf</name></decl>, *<decl><type ref="prev"/><name>buf_apr</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>buf</name> = <call><name>apr_pvsprintf</name><argument_list>(<argument><expr><call><name>apr_file_pool_get</name><argument_list>(<argument><expr><name>fptr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_utf_cstring_from_utf8_ex2</name><argument_list>(<argument><expr>&amp;<name>buf_apr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>,
                                        <argument><expr><call><name>apr_file_pool_get</name><argument_list>(<argument><expr><name>fptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>svn_io_file_write_full</name><argument_list>(<argument><expr><name>fptr</name></expr></argument>, <argument><expr><name>buf_apr</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf_apr</name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>apr_file_pool_get</name><argument_list>(<argument><expr><name>fptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<comment type="block">/* A helper function for display_prop_diffs.  Output the differences between
   the mergeinfo stored in ORIG_MERGEINFO_VAL and NEW_MERGEINFO_VAL in a
   human-readable form to FILE, using ENCODING.  Use POOL for temporary
   allocations. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>display_mergeinfo_diff</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>old_mergeinfo_val</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>new_mergeinfo_val</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>encoding</name></decl></param>,
                       <param><decl><type><name>apr_file_t</name> *</type><name>file</name></decl></param>,
                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>old_mergeinfo_hash</name></decl>, *<decl><type ref="prev"/><name>new_mergeinfo_hash</name></decl>, *<decl><type ref="prev"/><name>added</name></decl>, *<decl><type ref="prev"/><name>deleted</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>from_path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>merge_revarray</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>old_mergeinfo_val</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_mergeinfo_parse</name><argument_list>(<argument><expr>&amp;<name>old_mergeinfo_hash</name></expr></argument>, <argument><expr><name>old_mergeinfo_val</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><name>old_mergeinfo_hash</name> = <name>NULL</name></expr>;</expr_stmt></else></if>

  <if>if <condition>(<expr><name>new_mergeinfo_val</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_mergeinfo_parse</name><argument_list>(<argument><expr>&amp;<name>new_mergeinfo_hash</name></expr></argument>, <argument><expr><name>new_mergeinfo_val</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><name>new_mergeinfo_hash</name> = <name>NULL</name></expr>;</expr_stmt></else></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_mergeinfo_diff</name><argument_list>(<argument><expr>&amp;<name>deleted</name></expr></argument>, <argument><expr>&amp;<name>added</name></expr></argument>, <argument><expr><name>old_mergeinfo_hash</name></expr></argument>,
                             <argument><expr><name>new_mergeinfo_hash</name></expr></argument>,
                             <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>deleted</name></expr></argument>)</argument_list></call></expr>;</init>
       <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_string_t</name> *</type><name>merge_revstr</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>from_path</name> = <name>key</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>merge_revarray</name> = <name>val</name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_rangelist_to_string</name><argument_list>(<argument><expr>&amp;<name>merge_revstr</name></expr></argument>, <argument><expr><name>merge_revarray</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>file_printf_from_utf8</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>,
                                    <argument><expr><call><name>_</name><argument_list>(<argument><expr>"   Reverse-merged %s:r%s%s"</expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><name>from_path</name></expr></argument>, <argument><expr><name><name>merge_revstr</name>-&gt;<name>data</name></name></expr></argument>,
                                    <argument><expr><name>APR_EOL_STR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

  <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>added</name></expr></argument>)</argument_list></call></expr>;</init>
       <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_string_t</name> *</type><name>merge_revstr</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>from_path</name> = <name>key</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>merge_revarray</name> = <name>val</name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_rangelist_to_string</name><argument_list>(<argument><expr>&amp;<name>merge_revstr</name></expr></argument>, <argument><expr><name>merge_revarray</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>file_printf_from_utf8</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>,
                                    <argument><expr><call><name>_</name><argument_list>(<argument><expr>"   Merged %s:r%s%s"</expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><name>from_path</name></expr></argument>, <argument><expr><name><name>merge_revstr</name>-&gt;<name>data</name></name></expr></argument>,
                                    <argument><expr><name>APR_EOL_STR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAKE_ERR_BAD_RELATIVE_PATH</name><parameter_list>(<param><type><name>path</name></type></param>, <param><type><name>relative_to_dir</name></type></param>)</parameter_list></cpp:macro> \
        <cpp:value>svn_error_createf(SVN_ERR_BAD_RELATIVE_PATH, NULL, \
                          _("Path '%s' must be an immediate child of " \
                            "the directory '%s'"), path, relative_to_dir)</cpp:value></cpp:define>

<comment type="block">/* A helper func that writes out verbal descriptions of property diffs
   to FILE.   Of course, the apr_file_t will probably be the 'outfile'
   passed to svn_client_diff4, which is probably stdout. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>display_prop_diffs</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>propchanges</name></decl></param>,
                   <param><decl><type><name>apr_hash_t</name> *</type><name>original_props</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>encoding</name></decl></param>,
                   <param><decl><type><name>apr_file_t</name> *</type><name>file</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>relative_to_dir</name></decl></param>,
                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>relative_to_dir</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* Possibly adjust the path shown in the output (see issue #2723). */</comment>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>child_path</name> <init>= <expr><call><name>svn_path_is_child</name><argument_list>(<argument><expr><name>relative_to_dir</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>child_path</name></expr>)</condition><then>
        <expr_stmt><expr><name>path</name> = <name>child_path</name></expr>;</expr_stmt></then>
      <else>else <if>if <condition>(<expr>!<call><name>svn_path_compare_paths</name><argument_list>(<argument><expr><name>relative_to_dir</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><name>path</name> = "."</expr>;</expr_stmt></then>
      <else>else
        <return>return <expr><call><name>MAKE_ERR_BAD_RELATIVE_PATH</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>relative_to_dir</name></expr></argument>)</argument_list></call></expr>;</return></else></if></else></if>
    }</block></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>file_printf_from_utf8</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>,
                                <argument><expr><call><name>_</name><argument_list>(<argument><expr>"%sProperty changes on: %s%s"</expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><name>APR_EOL_STR</name></expr></argument>,
                                <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><name>APR_EOL_STR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>file_printf_from_utf8</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>, <argument><expr>"%s" <name>APR_EOL_STR</name></expr></argument>,
                                <argument><expr><name>under_string</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>propchanges</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>header_fmt</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>original_value</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>svn_prop_t</name> *</type><name>propchange</name> <init>= 
        <expr>&amp;<call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>propchanges</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_prop_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>original_props</name></expr>)</condition><then>
        <expr_stmt><expr><name>original_value</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>original_props</name></expr></argument>,
                                      <argument><expr><name><name>propchange</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
      <else>else
        <expr_stmt><expr><name>original_value</name> = <name>NULL</name></expr>;</expr_stmt></else></if>

      <comment type="block">/* If the property doesn't exist on either side, or if it exists
         with the same value, skip it.  */</comment>
      <if>if <condition>(<expr>(! (<name>original_value</name> || <name><name>propchange</name>-&gt;<name>value</name></name>))
          || (<name>original_value</name> &amp;&amp; <name><name>propchange</name>-&gt;<name>value</name></name>
              &amp;&amp; <call><name>svn_string_compare</name><argument_list>(<argument><expr><name>original_value</name></expr></argument>, <argument><expr><name><name>propchange</name>-&gt;<name>value</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
        <continue>continue;</continue></then></if>

      <if>if <condition>(<expr>! <name>original_value</name></expr>)</condition><then>
        <expr_stmt><expr><name>header_fmt</name> = <call><name>_</name><argument_list>(<argument><expr>"Added: %s%s"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
      <else>else <if>if <condition>(<expr>! <name><name>propchange</name>-&gt;<name>value</name></name></expr>)</condition><then>
        <expr_stmt><expr><name>header_fmt</name> = <call><name>_</name><argument_list>(<argument><expr>"Deleted: %s%s"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
      <else>else
        <expr_stmt><expr><name>header_fmt</name> = <call><name>_</name><argument_list>(<argument><expr>"Modified: %s%s"</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>file_printf_from_utf8</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>header_fmt</name></expr></argument>,
                                    <argument><expr><name><name>propchange</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>APR_EOL_STR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>propchange</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>SVN_PROP_MERGEINFO</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>orig</name> <init>= <expr><name>original_value</name> ? <name><name>original_value</name>-&gt;<name>data</name></name> : <name>NULL</name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name> <init>= <expr><name><name>propchange</name>-&gt;<name>value</name></name> ? <name><name>propchange</name>-&gt;<name>value</name>-&gt;<name>data</name></name> : <name>NULL</name></expr></init></decl>;</decl_stmt>

          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>display_mergeinfo_diff</name><argument_list>(<argument><expr><name>orig</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <continue>continue;</continue>
        }</block></then></if>

      <comment type="block">/* For now, we have a rather simple heuristic: if this is an
         "svn:" property, then assume the value is UTF-8 and must
         therefore be converted before printing.  Otherwise, just
         print whatever's there and hope for the best. */</comment>
      <block>{
        <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>val_is_utf8</name> <init>= <expr><call><name>svn_prop_is_svn_prop</name><argument_list>(<argument><expr><name><name>propchange</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>original_value</name> != <name>NULL</name></expr>)</condition><then>
          <block>{
            <if>if <condition>(<expr><name>val_is_utf8</name></expr>)</condition><then>
              <block>{
                <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>file_printf_from_utf8</name>
                        <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>,
                         <argument><expr>"   - %s" <name>APR_EOL_STR</name></expr></argument>, <argument><expr><name><name>original_value</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              }</block></then>
            <else>else
              <block>{
                <comment type="block">/* ### todo: check for error? */</comment>
                <expr_stmt><expr><call><name>apr_file_printf</name>
                  <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr>"   - %s" <name>APR_EOL_STR</name></expr></argument>, <argument><expr><name><name>original_value</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              }</block></else></if>
          }</block></then></if>

        <if>if <condition>(<expr><name><name>propchange</name>-&gt;<name>value</name></name> != <name>NULL</name></expr>)</condition><then>
          <block>{
            <if>if <condition>(<expr><name>val_is_utf8</name></expr>)</condition><then>
              <block>{
                <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>file_printf_from_utf8</name>
                        <argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>, <argument><expr>"   + %s" <name>APR_EOL_STR</name></expr></argument>,
                         <argument><expr><name><name>propchange</name>-&gt;<name>value</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              }</block></then>
            <else>else
              <block>{
                <comment type="block">/* ### todo: check for error? */</comment>
                <expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr>"   + %s" <name>APR_EOL_STR</name></expr></argument>,
                                <argument><expr><name><name>propchange</name>-&gt;<name>value</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              }</block></else></if>
          }</block></then></if>
      }</block>
    }</block></for>

  <comment type="block">/* ### todo [issue #1533]: Use file_printf_from_utf8() to convert this
     to native encoding, at least conditionally?  Or is it better to
     have under_string always output the same eol, so programs can
     find it consistently?  Also, what about checking for error? */</comment>
  <expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>APR_EOL_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/*-----------------------------------------------------------------*/</comment>
<escape char="0xc"/>
<comment type="block">/*** Callbacks for 'svn diff', invoked by the repos-diff editor. ***/</comment>


<struct>struct <name>diff_cmd_baton</name> <block>{

  <comment type="block">/* If non-null, the external diff command to invoke. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>diff_cmd</name></decl>;</decl_stmt>

  <comment type="block">/* This is allocated in this struct's pool or a higher-up pool. */</comment>
  <union>union <block>{
    <comment type="block">/* If 'diff_cmd' is null, then this is the parsed options to
       pass to the internal libsvn_diff implementation. */</comment>
    <decl_stmt><decl><type><name>svn_diff_file_options_t</name> *</type><name>for_internal</name></decl>;</decl_stmt>
    <comment type="block">/* Else if 'diff_cmd' is non-null, then... */</comment>
    <struct>struct <block>{
      <comment type="block">/* ...this is an argument array for the external command, and */</comment>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>argv</name></decl>;</decl_stmt>
      <comment type="block">/* ...this is the length of argv. */</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>;</decl_stmt>
    }</block> <decl><name>for_external</name></decl>;</struct>
  }</block> <decl><name>options</name></decl>;</union>

  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_file_t</name> *</type><name>outfile</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_file_t</name> *</type><name>errfile</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>header_encoding</name></decl>;</decl_stmt>

  <comment type="block">/* The original targets passed to the diff command.  We may need
     these to construct distinctive diff labels when comparing the
     same relative path in the same revision, under different anchors
     (for example, when comparing a trunk against a branch). */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>orig_path_1</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>orig_path_2</name></decl>;</decl_stmt>

  <comment type="block">/* These are the numeric representations of the revisions passed to
     svn_client_diff4, either may be SVN_INVALID_REVNUM.  We need these
     because some of the svn_wc_diff_callbacks2_t don't get revision
     arguments.

     ### Perhaps we should change the callback signatures and eliminate
     ### these?
  */</comment>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>revnum1</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>revnum2</name></decl>;</decl_stmt>

  <comment type="block">/* Set this if you want diff output even for binary files. */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>force_binary</name></decl>;</decl_stmt>

  <comment type="block">/* Set this flag if you want diff_file_changed to output diffs
     unconditionally, even if the diffs are empty. */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>force_empty</name></decl>;</decl_stmt>

  <comment type="block">/* The directory that diff target paths should be considered as
     relative to for output generation (see issue #2723). */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>relative_to_dir</name></decl>;</decl_stmt>
}</block>;</struct>


<comment type="block">/* Generate a label for the diff output for file PATH at revision REVNUM.
   If REVNUM is invalid then it is assumed to be the current working
   copy.  Assumes the paths are already in the desired style (local
   vs internal).  Allocate the label in POOL. */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>diff_label</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
           <param><decl><type><name>svn_revnum_t</name></type> <name>revnum</name></decl></param>,
           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>label</name></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>revnum</name> != <name>SVN_INVALID_REVNUM</name></expr>)</condition><then>
    <expr_stmt><expr><name>label</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"%s\t(revision %ld)"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>revnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><name>label</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"%s\t(working copy)"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

  <return>return <expr><name>label</name></expr>;</return>
}</block></function>

<comment type="block">/* A svn_wc_diff_callbacks2_t function.  Used for both file and directory
   property diffs. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>diff_props_changed</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                   <param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>state</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>propchanges</name></decl></param>,
                   <param><decl><type><name>apr_hash_t</name> *</type><name>original_props</name></decl></param>,
                   <param><decl><type><name>void</name> *</type><name>diff_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>diff_cmd_baton</name> *</type><name>diff_cmd_baton</name> <init>= <expr><name>diff_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>props</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name><name>diff_cmd_baton</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_categorize_props</name><argument_list>(<argument><expr><name>propchanges</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>props</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name><name>props</name>-&gt;<name>nelts</name></name> &gt; 0</expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>display_prop_diffs</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>original_props</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
                               <argument><expr><name><name>diff_cmd_baton</name>-&gt;<name>header_encoding</name></name></expr></argument>,
                               <argument><expr><name><name>diff_cmd_baton</name>-&gt;<name>outfile</name></name></expr></argument>,
                               <argument><expr><name><name>diff_cmd_baton</name>-&gt;<name>relative_to_dir</name></name></expr></argument>,
                               <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr><name>state</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>state</name> = <name>svn_wc_notify_state_unknown</name></expr>;</expr_stmt></then></if>

  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Show differences between TMPFILE1 and TMPFILE2. PATH, REV1, and REV2 are
   used in the headers to indicate the file and revisions.  If either
   MIMETYPE1 or MIMETYPE2 indicate binary content, don't show a diff,
   but instead print a warning message. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>diff_content_changed</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmpfile1</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmpfile2</name></decl></param>,
                     <param><decl><type><name>svn_revnum_t</name></type> <name>rev1</name></decl></param>,
                     <param><decl><type><name>svn_revnum_t</name></type> <name>rev2</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype1</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype2</name></decl></param>,
                     <param><decl><type><name>void</name> *</type><name>diff_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>diff_cmd_baton</name> *</type><name>diff_cmd_baton</name> <init>= <expr><name>diff_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>exitcode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name><name>diff_cmd_baton</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>os</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rel_to_dir</name> <init>= <expr><name><name>diff_cmd_baton</name>-&gt;<name>relative_to_dir</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_file_t</name> *</type><name>errfile</name> <init>= <expr><name><name>diff_cmd_baton</name>-&gt;<name>errfile</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>label1</name></decl>, *<decl><type ref="prev"/><name>label2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>mt1_binary</name> <init>= <expr><name>FALSE</name></expr></init>, <name>mt2_binary</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path1</name></decl>, *<decl><type ref="prev"/><name>path2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <comment type="block">/* Get a stream from our output file. */</comment>
  <expr_stmt><expr><name>os</name> = <call><name>svn_stream_from_aprfile</name><argument_list>(<argument><expr><name><name>diff_cmd_baton</name>-&gt;<name>outfile</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Generate the diff headers. */</comment>

  <comment type="block">/* ### Holy cow.  Due to anchor/target weirdness, we can't
     simply join diff_cmd_baton-&gt;orig_path_1 with path, ditto for
     orig_path_2.  That will work when they're directory URLs, but
     not for file URLs.  Nor can we just use anchor1 and anchor2
     from do_diff(), at least not without some more logic here.
     What a nightmare.

     For now, to distinguish the two paths, we'll just put the
     unique portions of the original targets in parentheses after
     the received path, with ellipses for handwaving.  This makes
     the labels a bit clumsy, but at least distinctive.  Better
     solutions are possible, they'll just take more thought. */</comment>

  <expr_stmt><expr><name>path1</name> = <name><name>diff_cmd_baton</name>-&gt;<name>orig_path_1</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>path2</name> = <name><name>diff_cmd_baton</name>-&gt;<name>orig_path_2</name></name></expr>;</expr_stmt>

  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name><name>path1</name><index>[<expr><name>i</name></expr>]</index></name> &amp;&amp; <name><name>path2</name><index>[<expr><name>i</name></expr>]</index></name> &amp;&amp; (<name><name>path1</name><index>[<expr><name>i</name></expr>]</index></name> == <name><name>path2</name><index>[<expr><name>i</name></expr>]</index></name>)</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <empty_stmt>;</empty_stmt></for>

  <comment type="block">/* Make sure the prefix is made of whole components. (Issue #1771) */</comment>
  <if>if <condition>(<expr><name><name>path1</name><index>[<expr><name>i</name></expr>]</index></name> || <name><name>path2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
    <block>{
      <for>for ( <init>;</init> <condition><expr>(<name>i</name> &gt; 0) &amp;&amp; (<name><name>path1</name><index>[<expr><name>i</name></expr>]</index></name> != '/')</expr>;</condition> <incr><expr><name>i</name>--</expr></incr>)
        <empty_stmt>;</empty_stmt></for>
    }</block></then></if>

  <expr_stmt><expr><name>path1</name> = <name>path1</name> + <name>i</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>path2</name> = <name>path2</name> + <name>i</name></expr>;</expr_stmt>

  <comment type="block">/* ### Should diff labels print paths in local style?  Is there
     already a standard for this?  In any case, this code depends on
     a particular style, so not calling svn_path_local_style() on the
     paths below.*/</comment>
  <if>if <condition>(<expr><name><name>path1</name><index>[<expr>0</expr>]</index></name> == '\0'</expr>)</condition><then>
    <expr_stmt><expr><name>path1</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr>"%s"</expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else <if>if <condition>(<expr><name><name>path1</name><index>[<expr>0</expr>]</index></name> == '/'</expr>)</condition><then>
    <expr_stmt><expr><name>path1</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr>"%s\t(...%s)"</expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>path1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><name>path1</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr>"%s\t(.../%s)"</expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>path1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>

  <if>if <condition>(<expr><name><name>path2</name><index>[<expr>0</expr>]</index></name> == '\0'</expr>)</condition><then>
    <expr_stmt><expr><name>path2</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr>"%s"</expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else <if>if <condition>(<expr><name><name>path2</name><index>[<expr>0</expr>]</index></name> == '/'</expr>)</condition><then>
    <expr_stmt><expr><name>path2</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr>"%s\t(...%s)"</expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>path2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><name>path2</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr>"%s\t(.../%s)"</expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>path2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>

  <if>if <condition>(<expr><name><name>diff_cmd_baton</name>-&gt;<name>relative_to_dir</name></name></expr>)</condition><then>
    <block>{
      <comment type="block">/* Possibly adjust the paths shown in the output (see issue #2723). */</comment>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>child_path</name> <init>= <expr><call><name>svn_path_is_child</name><argument_list>(<argument><expr><name>rel_to_dir</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>child_path</name></expr>)</condition><then>
        <expr_stmt><expr><name>path</name> = <name>child_path</name></expr>;</expr_stmt></then>
      <else>else <if>if <condition>(<expr>!<call><name>svn_path_compare_paths</name><argument_list>(<argument><expr><name>rel_to_dir</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><name>path</name> = "."</expr>;</expr_stmt></then>
      <else>else
        <return>return <expr><call><name>MAKE_ERR_BAD_RELATIVE_PATH</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>rel_to_dir</name></expr></argument>)</argument_list></call></expr>;</return></else></if></else></if>

      <expr_stmt><expr><name>child_path</name> = <call><name>svn_path_is_child</name><argument_list>(<argument><expr><name>rel_to_dir</name></expr></argument>, <argument><expr><name>path1</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>child_path</name></expr>)</condition><then>
        <expr_stmt><expr><name>path1</name> = <name>child_path</name></expr>;</expr_stmt></then>
      <else>else <if>if <condition>(<expr>!<call><name>svn_path_compare_paths</name><argument_list>(<argument><expr><name>rel_to_dir</name></expr></argument>, <argument><expr><name>path1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><name>path1</name> = "."</expr>;</expr_stmt></then>
      <else>else
        <return>return <expr><call><name>MAKE_ERR_BAD_RELATIVE_PATH</name><argument_list>(<argument><expr><name>path1</name></expr></argument>, <argument><expr><name>rel_to_dir</name></expr></argument>)</argument_list></call></expr>;</return></else></if></else></if>

      <expr_stmt><expr><name>child_path</name> = <call><name>svn_path_is_child</name><argument_list>(<argument><expr><name>rel_to_dir</name></expr></argument>, <argument><expr><name>path2</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>child_path</name></expr>)</condition><then>
        <expr_stmt><expr><name>path2</name> = <name>child_path</name></expr>;</expr_stmt></then>
      <else>else <if>if <condition>(<expr>!<call><name>svn_path_compare_paths</name><argument_list>(<argument><expr><name>rel_to_dir</name></expr></argument>, <argument><expr><name>path2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><name>path2</name> = "."</expr>;</expr_stmt></then>
      <else>else
        <return>return <expr><call><name>MAKE_ERR_BAD_RELATIVE_PATH</name><argument_list>(<argument><expr><name>path2</name></expr></argument>, <argument><expr><name>rel_to_dir</name></expr></argument>)</argument_list></call></expr>;</return></else></if></else></if>
    }</block></then></if>

  <expr_stmt><expr><name>label1</name> = <call><name>diff_label</name><argument_list>(<argument><expr><name>path1</name></expr></argument>, <argument><expr><name>rev1</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>label2</name> = <call><name>diff_label</name><argument_list>(<argument><expr><name>path2</name></expr></argument>, <argument><expr><name>rev2</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Possible easy-out: if either mime-type is binary and force was not
     specified, don't attempt to generate a viewable diff at all.
     Print a warning and exit. */</comment>
  <if>if <condition>(<expr><name>mimetype1</name></expr>)</condition><then>
    <expr_stmt><expr><name>mt1_binary</name> = <call><name>svn_mime_type_is_binary</name><argument_list>(<argument><expr><name>mimetype1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <if>if <condition>(<expr><name>mimetype2</name></expr>)</condition><then>
    <expr_stmt><expr><name>mt2_binary</name> = <call><name>svn_mime_type_is_binary</name><argument_list>(<argument><expr><name>mimetype2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr>! <name><name>diff_cmd_baton</name>-&gt;<name>force_binary</name></name> &amp;&amp; (<name>mt1_binary</name> || <name>mt2_binary</name>)</expr>)</condition><then>
    <block>{
      <comment type="block">/* Print out the diff header. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_printf_from_utf8</name>
              <argument_list>(<argument><expr><name>os</name></expr></argument>, <argument><expr><name><name>diff_cmd_baton</name>-&gt;<name>header_encoding</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>,
               <argument><expr>"Index: %s" <name>APR_EOL_STR</name> "%s" <name>APR_EOL_STR</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>equal_string</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_printf_from_utf8</name>
              <argument_list>(<argument><expr><name>os</name></expr></argument>, <argument><expr><name><name>diff_cmd_baton</name>-&gt;<name>header_encoding</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>,
               <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Cannot display: file marked as a binary type.%s"</expr></argument>)</argument_list></call></expr></argument>,
               <argument><expr><name>APR_EOL_STR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>mt1_binary</name> &amp;&amp; !<name>mt2_binary</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_printf_from_utf8</name>
                <argument_list>(<argument><expr><name>os</name></expr></argument>, <argument><expr><name><name>diff_cmd_baton</name>-&gt;<name>header_encoding</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>,
                 <argument><expr>"svn:mime-type = %s" <name>APR_EOL_STR</name></expr></argument>, <argument><expr><name>mimetype1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
      <else>else <if>if <condition>(<expr><name>mt2_binary</name> &amp;&amp; !<name>mt1_binary</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_printf_from_utf8</name>
                <argument_list>(<argument><expr><name>os</name></expr></argument>, <argument><expr><name><name>diff_cmd_baton</name>-&gt;<name>header_encoding</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>,
                 <argument><expr>"svn:mime-type = %s" <name>APR_EOL_STR</name></expr></argument>, <argument><expr><name>mimetype2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
      <else>else <if>if <condition>(<expr><name>mt1_binary</name> &amp;&amp; <name>mt2_binary</name></expr>)</condition><then>
        <block>{
          <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>mimetype1</name></expr></argument>, <argument><expr><name>mimetype2</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
            <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_printf_from_utf8</name>
                    <argument_list>(<argument><expr><name>os</name></expr></argument>, <argument><expr><name><name>diff_cmd_baton</name>-&gt;<name>header_encoding</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>,
                     <argument><expr>"svn:mime-type = %s" <name>APR_EOL_STR</name></expr></argument>,
                     <argument><expr><name>mimetype1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
          <else>else
            <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_printf_from_utf8</name>
                    <argument_list>(<argument><expr><name>os</name></expr></argument>, <argument><expr><name><name>diff_cmd_baton</name>-&gt;<name>header_encoding</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>,
                     <argument><expr>"svn:mime-type = (%s, %s)" <name>APR_EOL_STR</name></expr></argument>,
                     <argument><expr><name>mimetype1</name></expr></argument>, <argument><expr><name>mimetype2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
        }</block></then></if></else></if></else></if>

      <comment type="block">/* Exit early. */</comment>
      <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
    }</block></then></if>


  <if>if <condition>(<expr><name><name>diff_cmd_baton</name>-&gt;<name>diff_cmd</name></name></expr>)</condition><then>
    <block>{
      <comment type="block">/* Print out the diff header. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_printf_from_utf8</name>
              <argument_list>(<argument><expr><name>os</name></expr></argument>, <argument><expr><name><name>diff_cmd_baton</name>-&gt;<name>header_encoding</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>,
               <argument><expr>"Index: %s" <name>APR_EOL_STR</name> "%s" <name>APR_EOL_STR</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>equal_string</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* Close the stream (flush) */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_close</name><argument_list>(<argument><expr><name>os</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_run_diff</name><argument_list>(<argument><expr>"."</expr></argument>,
                              <argument><expr><name><name>diff_cmd_baton</name>-&gt;<name>options</name>.<name>for_external</name>.<name>argv</name></name></expr></argument>,
                              <argument><expr><name><name>diff_cmd_baton</name>-&gt;<name>options</name>.<name>for_external</name>.<name>argc</name></name></expr></argument>,
                              <argument><expr><name>label1</name></expr></argument>, <argument><expr><name>label2</name></expr></argument>,
                              <argument><expr><name>tmpfile1</name></expr></argument>, <argument><expr><name>tmpfile2</name></expr></argument>,
                              <argument><expr>&amp;<name>exitcode</name></expr></argument>, <argument><expr><name><name>diff_cmd_baton</name>-&gt;<name>outfile</name></name></expr></argument>, <argument><expr><name>errfile</name></expr></argument>,
                              <argument><expr><name><name>diff_cmd_baton</name>-&gt;<name>diff_cmd</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else   <comment type="block">/* use libsvn_diff to generate the diff  */</comment>
    <block>{
      <decl_stmt><decl><type><name>svn_diff_t</name> *</type><name>diff</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_diff_file_diff_2</name><argument_list>(<argument><expr>&amp;<name>diff</name></expr></argument>, <argument><expr><name>tmpfile1</name></expr></argument>, <argument><expr><name>tmpfile2</name></expr></argument>,
                                   <argument><expr><name><name>diff_cmd_baton</name>-&gt;<name>options</name>.<name>for_internal</name></name></expr></argument>,
                                   <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><call><name>svn_diff_contains_diffs</name><argument_list>(<argument><expr><name>diff</name></expr></argument>)</argument_list></call> || <name><name>diff_cmd_baton</name>-&gt;<name>force_empty</name></name></expr>)</condition><then>
        <block>{
          <comment type="block">/* Print out the diff header. */</comment>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_printf_from_utf8</name>
                  <argument_list>(<argument><expr><name>os</name></expr></argument>, <argument><expr><name><name>diff_cmd_baton</name>-&gt;<name>header_encoding</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>,
                   <argument><expr>"Index: %s" <name>APR_EOL_STR</name> "%s" <name>APR_EOL_STR</name></expr></argument>,
                   <argument><expr><name>path</name></expr></argument>, <argument><expr><name>equal_string</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <comment type="block">/* Output the actual diff */</comment>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_diff_file_output_unified3</name>
                  <argument_list>(<argument><expr><name>os</name></expr></argument>, <argument><expr><name>diff</name></expr></argument>, <argument><expr><name>tmpfile1</name></expr></argument>, <argument><expr><name>tmpfile2</name></expr></argument>, <argument><expr><name>label1</name></expr></argument>, <argument><expr><name>label2</name></expr></argument>,
                   <argument><expr><name><name>diff_cmd_baton</name>-&gt;<name>header_encoding</name></name></expr></argument>, <argument><expr><name>rel_to_dir</name></expr></argument>,
                   <argument><expr><name><name>diff_cmd_baton</name>-&gt;<name>options</name>.<name>for_internal</name>-&gt;<name>show_c_function</name></name></expr></argument>,
                   <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></else></if>

  <comment type="block">/* ### todo: someday we'll need to worry about whether we're going
     to need to write a diff plug-in mechanism that makes use of the
     two paths, instead of just blindly running SVN_CLIENT_DIFF.  */</comment>

  <comment type="block">/* Destroy the subpool. */</comment>
  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* A svn_wc_diff_callbacks2_t function. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>diff_file_changed</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                  <param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>content_state</name></decl></param>,
                  <param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>prop_state</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmpfile1</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmpfile2</name></decl></param>,
                  <param><decl><type><name>svn_revnum_t</name></type> <name>rev1</name></decl></param>,
                  <param><decl><type><name>svn_revnum_t</name></type> <name>rev2</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype1</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype2</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>prop_changes</name></decl></param>,
                  <param><decl><type><name>apr_hash_t</name> *</type><name>original_props</name></decl></param>,
                  <param><decl><type><name>void</name> *</type><name>diff_baton</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>tmpfile1</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>diff_content_changed</name><argument_list>(<argument><expr><name>path</name></expr></argument>,
                                 <argument><expr><name>tmpfile1</name></expr></argument>, <argument><expr><name>tmpfile2</name></expr></argument>, <argument><expr><name>rev1</name></expr></argument>, <argument><expr><name>rev2</name></expr></argument>,
                                 <argument><expr><name>mimetype1</name></expr></argument>, <argument><expr><name>mimetype2</name></expr></argument>, <argument><expr><name>diff_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <if>if <condition>(<expr><name><name>prop_changes</name>-&gt;<name>nelts</name></name> &gt; 0</expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>diff_props_changed</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>prop_state</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>prop_changes</name></expr></argument>,
                               <argument><expr><name>original_props</name></expr></argument>, <argument><expr><name>diff_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <if>if <condition>(<expr><name>content_state</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>content_state</name> = <name>svn_wc_notify_state_unknown</name></expr>;</expr_stmt></then></if>
  <if>if <condition>(<expr><name>prop_state</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>prop_state</name> = <name>svn_wc_notify_state_unknown</name></expr>;</expr_stmt></then></if>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Because the repos-diff editor passes at least one empty file to
   each of these next two functions, they can be dumb wrappers around
   the main workhorse routine. */</comment>

<comment type="block">/* A svn_wc_diff_callbacks2_t function. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>diff_file_added</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                <param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>content_state</name></decl></param>,
                <param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>prop_state</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmpfile1</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmpfile2</name></decl></param>,
                <param><decl><type><name>svn_revnum_t</name></type> <name>rev1</name></decl></param>,
                <param><decl><type><name>svn_revnum_t</name></type> <name>rev2</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype1</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype2</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>prop_changes</name></decl></param>,
                <param><decl><type><name>apr_hash_t</name> *</type><name>original_props</name></decl></param>,
                <param><decl><type><name>void</name> *</type><name>diff_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>diff_cmd_baton</name> *</type><name>diff_cmd_baton</name> <init>= <expr><name>diff_baton</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* We want diff_file_changed to unconditionally show diffs, even if
     the diff is empty (as would be the case if an empty file were
     added.)  It's important, because 'patch' would still see an empty
     diff and create an empty file.  It's also important to let the
     user see that *something* happened. */</comment>
  <expr_stmt><expr><name><name>diff_cmd_baton</name>-&gt;<name>force_empty</name></name> = <name>TRUE</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>diff_file_changed</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>content_state</name></expr></argument>, <argument><expr><name>prop_state</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
                            <argument><expr><name>tmpfile1</name></expr></argument>, <argument><expr><name>tmpfile2</name></expr></argument>,
                            <argument><expr><name>rev1</name></expr></argument>, <argument><expr><name>rev2</name></expr></argument>,
                            <argument><expr><name>mimetype1</name></expr></argument>, <argument><expr><name>mimetype2</name></expr></argument>,
                            <argument><expr><name>prop_changes</name></expr></argument>, <argument><expr><name>original_props</name></expr></argument>, <argument><expr><name>diff_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>diff_cmd_baton</name>-&gt;<name>force_empty</name></name> = <name>FALSE</name></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* A svn_wc_diff_callbacks2_t function. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>diff_file_deleted_with_diff</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                            <param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>state</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmpfile1</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmpfile2</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype1</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype2</name></decl></param>,
                            <param><decl><type><name>apr_hash_t</name> *</type><name>original_props</name></decl></param>,
                            <param><decl><type><name>void</name> *</type><name>diff_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>diff_cmd_baton</name> *</type><name>diff_cmd_baton</name> <init>= <expr><name>diff_baton</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* We don't list all the deleted properties. */</comment>
  <return>return <expr><call><name>diff_file_changed</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
                           <argument><expr><name>tmpfile1</name></expr></argument>, <argument><expr><name>tmpfile2</name></expr></argument>,
                           <argument><expr><name><name>diff_cmd_baton</name>-&gt;<name>revnum1</name></name></expr></argument>, <argument><expr><name><name>diff_cmd_baton</name>-&gt;<name>revnum2</name></name></expr></argument>,
                           <argument><expr><name>mimetype1</name></expr></argument>, <argument><expr><name>mimetype2</name></expr></argument>,
                           <argument><expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>diff_cmd_baton</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>1</expr></argument>,
                                          <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_prop_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>,
                           <argument><expr><call><name>apr_hash_make</name><argument_list>(<argument><expr><name><name>diff_cmd_baton</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>diff_baton</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* A svn_wc_diff_callbacks2_t function. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>diff_file_deleted_no_diff</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                          <param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>state</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmpfile1</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmpfile2</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype1</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype2</name></decl></param>,
                          <param><decl><type><name>apr_hash_t</name> *</type><name>original_props</name></decl></param>,
                          <param><decl><type><name>void</name> *</type><name>diff_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>diff_cmd_baton</name> *</type><name>diff_cmd_baton</name> <init>= <expr><name>diff_baton</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>state</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>state</name> = <name>svn_wc_notify_state_unknown</name></expr>;</expr_stmt></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>file_printf_from_utf8</name>
          <argument_list>(<argument><expr><name><name>diff_cmd_baton</name>-&gt;<name>outfile</name></name></expr></argument>,
           <argument><expr><name><name>diff_cmd_baton</name>-&gt;<name>header_encoding</name></name></expr></argument>,
           <argument><expr>"Index: %s (deleted)" <name>APR_EOL_STR</name> "%s" <name>APR_EOL_STR</name></expr></argument>,
           <argument><expr><name>path</name></expr></argument>, <argument><expr><name>equal_string</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* A svn_wc_diff_callbacks2_t function.
   For now, let's have 'svn diff' send feedback to the top-level
   application, so that something reasonable about directories and
   propsets gets printed to stdout. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>diff_dir_added</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
               <param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>state</name></decl></param>,
               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
               <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
               <param><decl><type><name>void</name> *</type><name>diff_baton</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>state</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>state</name> = <name>svn_wc_notify_state_unknown</name></expr>;</expr_stmt></then></if>

  <comment type="block">/* ### todo:  send feedback to app */</comment>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* A svn_wc_diff_callbacks2_t function. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>diff_dir_deleted</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                 <param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>state</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                 <param><decl><type><name>void</name> *</type><name>diff_baton</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>state</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>state</name> = <name>svn_wc_notify_state_unknown</name></expr>;</expr_stmt></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/*-----------------------------------------------------------------*/</comment>
<escape char="0xc"/>
<comment type="block">/** The logic behind 'svn diff' and 'svn merge'.  */</comment>


<comment type="block">/* Hi!  This is a comment left behind by Karl, and Ben is too afraid
   to erase it at this time, because he's not fully confident that all
   this knowledge has been grokked yet.

   There are five cases:
      1. path is not an URL and start_revision != end_revision
      2. path is not an URL and start_revision == end_revision
      3. path is an URL and start_revision != end_revision
      4. path is an URL and start_revision == end_revision
      5. path is not an URL and no revisions given

   With only one distinct revision the working copy provides the
   other.  When path is an URL there is no working copy. Thus

     1: compare repository versions for URL coresponding to working copy
     2: compare working copy against repository version
     3: compare repository versions for URL
     4: nothing to do.
     5: compare working copy against text-base

   Case 4 is not as stupid as it looks, for example it may occur if
   the user specifies two dates that resolve to the same revision.  */</comment>




<comment type="block">/* Helper function: given a working-copy PATH, return its associated
   url in *URL, allocated in POOL.  If PATH is *already* a URL, that's
   fine, just set *URL = PATH. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>convert_to_url</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>url</name></decl></param>,
               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>  <comment type="block">/* ### FIXME local */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><call><name>svn_path_is_url</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <expr_stmt><expr>*<name>url</name> = <name>path</name></expr>;</expr_stmt>
      <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
    }</block></then></if>

  <comment type="block">/* ### This may not be a good idea, see issue 880 */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_probe_open3</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                                 <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_versioned</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_close</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>url</name></name></expr>)</condition><then>
    <expr_stmt><expr>*<name>url</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr>*<name>url</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>copyfrom_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/** Helper structure: for passing around the diff parameters */</comment>
<struct>struct <name>diff_parameters</name>
<block>{
  <comment type="block">/* First input path */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path1</name></decl>;</decl_stmt>

  <comment type="block">/* Revision of first input path */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision1</name></decl>;</decl_stmt>

  <comment type="block">/* Second input path */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path2</name></decl>;</decl_stmt>

  <comment type="block">/* Revision of second input path */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision2</name></decl>;</decl_stmt>

  <comment type="block">/* Peg revision */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>peg_revision</name></decl>;</decl_stmt>

  <comment type="block">/* Desired depth */</comment>
  <decl_stmt><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl>;</decl_stmt>

  <comment type="block">/* Ignore ancestry */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl>;</decl_stmt>

  <comment type="block">/* Ignore deleted */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>no_diff_deleted</name></decl>;</decl_stmt>

  <comment type="block">/* Changelists of interest */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>changelists</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/** Helper structure: filled by check_paths() */</comment>
<struct>struct <name>diff_paths</name>
<block>{
  <comment type="block">/* path1 can only be found in the repository? */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>is_repos1</name></decl>;</decl_stmt>

  <comment type="block">/* path2 can only be found in the repository? */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>is_repos2</name></decl>;</decl_stmt>
}</block>;</struct>


<comment type="block">/** Check if paths are urls and if the revisions are local, and, for
    pegged revisions, ensure that at least one revision is non-local.
    Fills the PATHS structure. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>check_paths</name><parameter_list>(<param><decl><type><specifier>const</specifier> struct <name>diff_parameters</name> *</type><name>params</name></decl></param>,
            <param><decl><type>struct <name>diff_paths</name> *</type><name>paths</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>is_local_rev1</name></decl>, <decl><type ref="prev"/><name>is_local_rev2</name></decl>;</decl_stmt>

  <comment type="block">/* Verify our revision arguments in light of the paths. */</comment>
  <if>if <condition>(<expr>(<name><name>params</name>-&gt;<name>revision1</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_unspecified</name>)
      || (<name><name>params</name>-&gt;<name>revision2</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_unspecified</name>)</expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CLIENT_BAD_REVISION</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                            <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Not all required revisions are specified"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <comment type="block">/* Revisions can be said to be local or remote.  BASE and WORKING,
     for example, are local.  */</comment>
  <expr_stmt><expr><name>is_local_rev1</name> =
    ((<name><name>params</name>-&gt;<name>revision1</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_base</name>)
     || (<name><name>params</name>-&gt;<name>revision1</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_working</name>))</expr>;</expr_stmt>
  <expr_stmt><expr><name>is_local_rev2</name> =
    ((<name><name>params</name>-&gt;<name>revision2</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_base</name>)
     || (<name><name>params</name>-&gt;<name>revision2</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_working</name>))</expr>;</expr_stmt>

  <if>if <condition>(<expr><name><name>params</name>-&gt;<name>peg_revision</name>-&gt;<name>kind</name></name> != <name>svn_opt_revision_unspecified</name></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><name>is_local_rev1</name> &amp;&amp; <name>is_local_rev2</name></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CLIENT_BAD_REVISION</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                <argument><expr><call><name>_</name><argument_list>(<argument><expr>"At least one revision must be non-local "
                                  "for a pegged diff"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>

      <expr_stmt><expr><name><name>paths</name>-&gt;<name>is_repos1</name></name> = ! <name>is_local_rev1</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>paths</name>-&gt;<name>is_repos2</name></name> = ! <name>is_local_rev2</name></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <comment type="block">/* Working copy paths with non-local revisions get turned into
         URLs.  We don't do that here, though.  We simply record that it
         needs to be done, which is information that helps us choose our
         diff helper function.  */</comment>
      <expr_stmt><expr><name><name>paths</name>-&gt;<name>is_repos1</name></name> = ! <name>is_local_rev1</name> || <call><name>svn_path_is_url</name><argument_list>(<argument><expr><name><name>params</name>-&gt;<name>path1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>paths</name>-&gt;<name>is_repos2</name></name> = ! <name>is_local_rev2</name> || <call><name>svn_path_is_url</name><argument_list>(<argument><expr><name><name>params</name>-&gt;<name>path2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/** Helper structure filled by diff_prepare_repos_repos */</comment>
<struct>struct <name>diff_repos_repos_t</name>
<block>{
  <comment type="block">/* URL created from path1 */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url1</name></decl>;</decl_stmt>

  <comment type="block">/* URL created from path2 */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url2</name></decl>;</decl_stmt>

  <comment type="block">/* The BASE_PATH for the diff */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_path</name></decl>;</decl_stmt>

  <comment type="block">/* url1 and url2 are the same */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>same_urls</name></decl>;</decl_stmt>

  <comment type="block">/* Revision of url1 */</comment>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev1</name></decl>;</decl_stmt>

  <comment type="block">/* Revision of url2 */</comment>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev2</name></decl>;</decl_stmt>

  <comment type="block">/* Anchor based on url1 */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>anchor1</name></decl>;</decl_stmt>

  <comment type="block">/* Anchor based on url2 */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>anchor2</name></decl>;</decl_stmt>

  <comment type="block">/* Target based on url1 */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target1</name></decl>;</decl_stmt>

  <comment type="block">/* Target based on url2 */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target2</name></decl>;</decl_stmt>

  <comment type="block">/* RA session pointing at anchor1. */</comment>
  <decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/** Helper function: prepare a repos repos diff. Fills DRR
 * structure. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>diff_prepare_repos_repos</name><parameter_list>(<param><decl><type><specifier>const</specifier> struct <name>diff_parameters</name> *</type><name>params</name></decl></param>,
                         <param><decl><type>struct <name>diff_repos_repos_t</name> *</type><name>drr</name></decl></param>,
                         <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind1</name></decl>, <decl><type ref="prev"/><name>kind2</name></decl>;</decl_stmt>

  <comment type="block">/* Figure out URL1 and URL2. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>convert_to_url</name><argument_list>(<argument><expr>&amp;<name><name>drr</name>-&gt;<name>url1</name></name></expr></argument>, <argument><expr><name><name>params</name>-&gt;<name>path1</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>convert_to_url</name><argument_list>(<argument><expr>&amp;<name><name>drr</name>-&gt;<name>url2</name></name></expr></argument>, <argument><expr><name><name>params</name>-&gt;<name>path2</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>drr</name>-&gt;<name>same_urls</name></name> = (<call><name>strcmp</name><argument_list>(<argument><expr><name><name>drr</name>-&gt;<name>url1</name></name></expr></argument>, <argument><expr><name><name>drr</name>-&gt;<name>url2</name></name></expr></argument>)</argument_list></call> == 0)</expr>;</expr_stmt>

  <comment type="block">/* We need exactly one BASE_PATH, so we'll let the BASE_PATH
     calculated for PATH2 override the one for PATH1 (since the diff
     will be "applied" to URL2 anyway). */</comment>
  <expr_stmt><expr><name><name>drr</name>-&gt;<name>base_path</name></name> = <name>NULL</name></expr>;</expr_stmt>
  <if>if <condition>(<expr><name><name>drr</name>-&gt;<name>url1</name></name> != <name><name>params</name>-&gt;<name>path1</name></name></expr>)</condition><then>
    <expr_stmt><expr><name><name>drr</name>-&gt;<name>base_path</name></name> = <name><name>params</name>-&gt;<name>path1</name></name></expr>;</expr_stmt></then></if>
  <if>if <condition>(<expr><name><name>drr</name>-&gt;<name>url2</name></name> != <name><name>params</name>-&gt;<name>path2</name></name></expr>)</condition><then>
    <expr_stmt><expr><name><name>drr</name>-&gt;<name>base_path</name></name> = <name><name>params</name>-&gt;<name>path2</name></name></expr>;</expr_stmt></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__open_ra_session_internal</name><argument_list>(<argument><expr>&amp;<name>ra_session</name></expr></argument>, <argument><expr><name><name>drr</name>-&gt;<name>url2</name></name></expr></argument>,
                                               <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                                               <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If we are performing a pegged diff, we need to find out what our
     actual URLs will be. */</comment>
  <if>if <condition>(<expr><name><name>params</name>-&gt;<name>peg_revision</name>-&gt;<name>kind</name></name> != <name>svn_opt_revision_unspecified</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_opt_revision_t</name> *</type><name>start_ignore</name></decl>, *<decl><type ref="prev"/><name>end_ignore</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__repos_locations</name><argument_list>(<argument><expr>&amp;<name><name>drr</name>-&gt;<name>url1</name></name></expr></argument>, <argument><expr>&amp;<name>start_ignore</name></expr></argument>,
                                          <argument><expr>&amp;<name><name>drr</name>-&gt;<name>url2</name></name></expr></argument>, <argument><expr>&amp;<name>end_ignore</name></expr></argument>,
                                          <argument><expr><name>ra_session</name></expr></argument>,
                                          <argument><expr><name><name>params</name>-&gt;<name>path2</name></name></expr></argument>,
                                          <argument><expr><name><name>params</name>-&gt;<name>peg_revision</name></name></expr></argument>,
                                          <argument><expr><name><name>params</name>-&gt;<name>revision1</name></name></expr></argument>,
                                          <argument><expr><name><name>params</name>-&gt;<name>revision2</name></name></expr></argument>,
                                          <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* Reparent the session, since drr-&gt;url2 might have changed as a result
         the above call. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_reparent</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name><name>drr</name>-&gt;<name>url2</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <comment type="block">/* Resolve revision and get path kind for the second target. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_revision_number</name>
          <argument_list>(<argument><expr>&amp;<name><name>drr</name>-&gt;<name>rev2</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name><name>params</name>-&gt;<name>revision2</name></name></expr></argument>,
           <argument><expr>(<name><name>params</name>-&gt;<name>path2</name></name> == <name><name>drr</name>-&gt;<name>url2</name></name>) ? <name>NULL</name> : <name><name>params</name>-&gt;<name>path2</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_check_path</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name><name>drr</name>-&gt;<name>rev2</name></name></expr></argument>, <argument><expr>&amp;<name>kind2</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>kind2</name> == <name>svn_node_none</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name>
      <argument_list>(<argument><expr><name>SVN_ERR_FS_NOT_FOUND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
       <argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s' was not found in the repository at revision %ld"</expr></argument>)</argument_list></call></expr></argument>,
       <argument><expr><name><name>drr</name>-&gt;<name>url2</name></name></expr></argument>, <argument><expr><name><name>drr</name>-&gt;<name>rev2</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <comment type="block">/* Do the same for the first target. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_reparent</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name><name>drr</name>-&gt;<name>url1</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_revision_number</name>
          <argument_list>(<argument><expr>&amp;<name><name>drr</name>-&gt;<name>rev1</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name><name>params</name>-&gt;<name>revision1</name></name></expr></argument>,
           <argument><expr>(<name><name>params</name>-&gt;<name>path1</name></name> == <name><name>drr</name>-&gt;<name>url1</name></name>) ? <name>NULL</name> : <name><name>params</name>-&gt;<name>path1</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_check_path</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name><name>drr</name>-&gt;<name>rev1</name></name></expr></argument>, <argument><expr>&amp;<name>kind1</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>kind1</name> == <name>svn_node_none</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name>
      <argument_list>(<argument><expr><name>SVN_ERR_FS_NOT_FOUND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
       <argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s' was not found in the repository at revision %ld"</expr></argument>)</argument_list></call></expr></argument>,
       <argument><expr><name><name>drr</name>-&gt;<name>url1</name></name></expr></argument>, <argument><expr><name><name>drr</name>-&gt;<name>rev1</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <comment type="block">/* Choose useful anchors and targets for our two URLs. */</comment>
  <expr_stmt><expr><name><name>drr</name>-&gt;<name>anchor1</name></name> = <name><name>drr</name>-&gt;<name>url1</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>drr</name>-&gt;<name>anchor2</name></name> = <name><name>drr</name>-&gt;<name>url2</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>drr</name>-&gt;<name>target1</name></name> = ""</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>drr</name>-&gt;<name>target2</name></name> = ""</expr>;</expr_stmt>
  <if>if <condition>(<expr>(<name>kind1</name> == <name>svn_node_file</name>) || (<name>kind2</name> == <name>svn_node_file</name>)</expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_path_split</name><argument_list>(<argument><expr><name><name>drr</name>-&gt;<name>url1</name></name></expr></argument>, <argument><expr>&amp;<name><name>drr</name>-&gt;<name>anchor1</name></name></expr></argument>, <argument><expr>&amp;<name><name>drr</name>-&gt;<name>target1</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>drr</name>-&gt;<name>target1</name></name> = <call><name>svn_path_uri_decode</name><argument_list>(<argument><expr><name><name>drr</name>-&gt;<name>target1</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>svn_path_split</name><argument_list>(<argument><expr><name><name>drr</name>-&gt;<name>url2</name></name></expr></argument>, <argument><expr>&amp;<name><name>drr</name>-&gt;<name>anchor2</name></name></expr></argument>, <argument><expr>&amp;<name><name>drr</name>-&gt;<name>target2</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>drr</name>-&gt;<name>target2</name></name> = <call><name>svn_path_uri_decode</name><argument_list>(<argument><expr><name><name>drr</name>-&gt;<name>target2</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name><name>drr</name>-&gt;<name>base_path</name></name></expr>)</condition><then>
        <expr_stmt><expr><name><name>drr</name>-&gt;<name>base_path</name></name> = <call><name>svn_path_dirname</name><argument_list>(<argument><expr><name><name>drr</name>-&gt;<name>base_path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_reparent</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name><name>drr</name>-&gt;<name>anchor1</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <expr_stmt><expr><name><name>drr</name>-&gt;<name>ra_session</name></name> = <name>ra_session</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* A Theoretical Note From Ben, regarding do_diff().

   This function is really svn_client_diff4().  If you read the public
   API description for svn_client_diff4(), it sounds quite Grand.  It
   sounds really generalized and abstract and beautiful: that it will
   diff any two paths, be they working-copy paths or URLs, at any two
   revisions.

   Now, the *reality* is that we have exactly three 'tools' for doing
   diffing, and thus this routine is built around the use of the three
   tools.  Here they are, for clarity:

     - svn_wc_diff:  assumes both paths are the same wcpath.
                     compares wcpath@BASE vs. wcpath@WORKING

     - svn_wc_get_diff_editor:  compares some URL@REV vs. wcpath@WORKING

     - svn_client__get_diff_editor:  compares some URL1@REV1 vs. URL2@REV2

   So the truth of the matter is, if the caller's arguments can't be
   pigeonholed into one of these three use-cases, we currently bail
   with a friendly apology.

   Perhaps someday a brave soul will truly make svn_client_diff4
   perfectly general.  For now, we live with the 90% case.  Certainly,
   the commandline client only calls this function in legal ways.
   When there are other users of svn_client.h, maybe this will become
   a more pressing issue.
 */</comment>

<comment type="block">/* Return a "you can't do that" error, optionally wrapping another
   error CHILD_ERR. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>unsupported_diff_error</name><parameter_list>(<param><decl><type><name>svn_error_t</name> *</type><name>child_err</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_INCORRECT_PARAMS</name></expr></argument>, <argument><expr><name>child_err</name></expr></argument>,
                          <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Sorry, svn_client_diff4 was called in a way "
                            "that is not yet supported"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<comment type="block">/* Perform a diff between two working-copy paths.

   PATH1 and PATH2 are both working copy paths.  REVISION1 and
   REVISION2 are their respective revisions.

   All other options are the same as those passed to svn_client_diff4(). */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>diff_wc_wc</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path1</name></decl></param>,
           <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision1</name></decl></param>,
           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path2</name></decl></param>,
           <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision2</name></decl></param>,
           <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
           <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl></param>,
           <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>changelists</name></decl></param>,
           <param><decl><type><specifier>const</specifier> <name>svn_wc_diff_callbacks2_t</name> *</type><name>callbacks</name></decl></param>,
           <param><decl><type>struct <name>diff_cmd_baton</name> *</type><name>callback_baton</name></decl></param>,
           <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>, *<decl><type ref="prev"/><name>target_access</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>levels_to_lock</name> <init>= <expr><call><name>SVN_WC__LEVELS_TO_LOCK_FROM_DEPTH</name><argument_list>(<argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Assert that we have valid input. */</comment>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>! <call><name>svn_path_is_url</name><argument_list>(<argument><expr><name>path1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>! <call><name>svn_path_is_url</name><argument_list>(<argument><expr><name>path2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Currently we support only the case where path1 and path2 are the
     same path. */</comment>
  <if>if <condition>(<expr>(<call><name>strcmp</name><argument_list>(<argument><expr><name>path1</name></expr></argument>, <argument><expr><name>path2</name></expr></argument>)</argument_list></call> != 0)
      || (! ((<name><name>revision1</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_base</name>)
             &amp;&amp; (<name><name>revision2</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_working</name>)))</expr>)</condition><then>
    <return>return <expr><call><name>unsupported_diff_error</name>
      <argument_list>(<argument><expr><call><name>svn_error_create</name>
       <argument_list>(<argument><expr><name>SVN_ERR_INCORRECT_PARAMS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
        <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Only diffs between a path's text-base "
          "and its working files are supported at this time"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_open_anchor</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr>&amp;<name>target_access</name></expr></argument>, <argument><expr>&amp;<name>target</name></expr></argument>,
                                 <argument><expr><name>path1</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>levels_to_lock</name></expr></argument>,
                                 <argument><expr><name><name>ctx</name>-&gt;<name>cancel_func</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>,
                                 <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Resolve named revisions to real numbers. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_revision_number</name>
          <argument_list>(<argument><expr>&amp;<name><name>callback_baton</name>-&gt;<name>revnum1</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>revision1</name></expr></argument>, <argument><expr><name>path1</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>callback_baton</name>-&gt;<name>revnum2</name></name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>  <comment type="block">/* WC */</comment>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_diff4</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>callbacks</name></expr></argument>, <argument><expr><name>callback_baton</name></expr></argument>,
                       <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>ignore_ancestry</name></expr></argument>, <argument><expr><name>changelists</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_close</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Perform a diff between two repository paths.

   DIFF_PARAM.PATH1 and DIFF_PARAM.PATH2 may be either URLs or the working
   copy paths. DIFF_PARAM.REVISION1 and DIFF_PARAM.REVISION2 are their
   respective revisions. If DIFF_PARAM.PEG_REVISION is specified,
   DIFF_PARAM.PATH2 is the path at the peg revision, and the actual two
   paths compared are determined by following copy history from PATH2.

   All other options are the same as those passed to svn_client_diff4(). */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>diff_repos_repos</name><parameter_list>(<param><decl><type><specifier>const</specifier> struct <name>diff_parameters</name> *</type><name>diff_param</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>svn_wc_diff_callbacks2_t</name> *</type><name>callbacks</name></decl></param>,
                 <param><decl><type>struct <name>diff_cmd_baton</name> *</type><name>callback_baton</name></decl></param>,
                 <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>extra_ra_session</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_ra_reporter3_t</name> *</type><name>reporter</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>report_baton</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>diff_editor</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>diff_edit_baton</name></decl>;</decl_stmt>

  <decl_stmt><decl><type>struct <name>diff_repos_repos_t</name></type> <name>drr</name></decl>;</decl_stmt>

  <comment type="block">/* Prepare info for the repos repos diff. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>diff_prepare_repos_repos</name><argument_list>(<argument><expr><name>diff_param</name></expr></argument>, <argument><expr>&amp;<name>drr</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get actual URLs. */</comment>
  <expr_stmt><expr><name><name>callback_baton</name>-&gt;<name>orig_path_1</name></name> = <name><name>drr</name>.<name>url1</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>callback_baton</name>-&gt;<name>orig_path_2</name></name> = <name><name>drr</name>.<name>url2</name></name></expr>;</expr_stmt>

  <comment type="block">/* Get numeric revisions. */</comment>
  <expr_stmt><expr><name><name>callback_baton</name>-&gt;<name>revnum1</name></name> = <name><name>drr</name>.<name>rev1</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>callback_baton</name>-&gt;<name>revnum2</name></name> = <name><name>drr</name>.<name>rev2</name></name></expr>;</expr_stmt>

  <comment type="block">/* Now, we open an extra RA session to the correct anchor
     location for URL1.  This is used during the editor calls to fetch file
     contents.  */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__open_ra_session_internal</name>
          <argument_list>(<argument><expr>&amp;<name>extra_ra_session</name></expr></argument>, <argument><expr><name><name>drr</name>.<name>anchor1</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>,
           <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Set up the repos_diff editor on BASE_PATH, if available.
     Otherwise, we just use "". */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_diff_editor</name>
          <argument_list>(<argument><expr><name><name>drr</name>.<name>base_path</name></name> ? <name><name>drr</name>.<name>base_path</name></name> : ""</expr></argument>,
           <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>callbacks</name></expr></argument>, <argument><expr><name>callback_baton</name></expr></argument>, <argument><expr><name><name>diff_param</name>-&gt;<name>depth</name></name></expr></argument>,
           <argument><expr><name>FALSE</name></expr></argument> <comment type="block">/* doesn't matter for diff */</comment>, <argument><expr><name>extra_ra_session</name></expr></argument>, <argument><expr><name><name>drr</name>.<name>rev1</name></name></expr></argument>,
           <argument><expr><name>NULL</name></expr></argument> <comment type="block">/* no notify_func */</comment>, <argument><expr><name>NULL</name></expr></argument> <comment type="block">/* no notify_baton */</comment>,
           <argument><expr><name><name>ctx</name>-&gt;<name>cancel_func</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>,
           <argument><expr>&amp;<name>diff_editor</name></expr></argument>, <argument><expr>&amp;<name>diff_edit_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* We want to switch our txn into URL2 */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_do_diff3</name>
          <argument_list>(<argument><expr><name><name>drr</name>.<name>ra_session</name></name></expr></argument>, <argument><expr>&amp;<name>reporter</name></expr></argument>, <argument><expr>&amp;<name>report_baton</name></expr></argument>, <argument><expr><name><name>drr</name>.<name>rev2</name></name></expr></argument>, <argument><expr><name><name>drr</name>.<name>target1</name></name></expr></argument>,
           <argument><expr><name><name>diff_param</name>-&gt;<name>depth</name></name></expr></argument>, <argument><expr><name><name>diff_param</name>-&gt;<name>ignore_ancestry</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
           <argument><expr><name><name>drr</name>.<name>url2</name></name></expr></argument>, <argument><expr><name>diff_editor</name></expr></argument>, <argument><expr><name>diff_edit_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Drive the reporter; do the diff. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>reporter</name>-&gt;<name>set_path</name></name><argument_list>(<argument><expr><name>report_baton</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name><name>drr</name>.<name>rev1</name></name></expr></argument>,
                             <argument><expr><name>svn_depth_infinity</name></expr></argument>,
                             <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>reporter</name>-&gt;<name>finish_report</name></name><argument_list>(<argument><expr><name>report_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Perform a diff between a repository path and a working-copy path.

   PATH1 may be either a URL or a working copy path.  PATH2 is a
   working copy path.  REVISION1 and REVISION2 are their respective
   revisions.  If REVERSE is TRUE, the diff will be done in reverse.
   If PEG_REVISION is specified, then PATH1 is the path in the peg
   revision, and the actual repository path to be compared is
   determined by following copy history.

   All other options are the same as those passed to svn_client_diff4(). */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>diff_repos_wc</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path1</name></decl></param>,
              <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision1</name></decl></param>,
              <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>peg_revision</name></decl></param>,
              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path2</name></decl></param>,
              <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision2</name></decl></param>,
              <param><decl><type><name>svn_boolean_t</name></type> <name>reverse</name></decl></param>,
              <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
              <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl></param>,
              <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>changelists</name></decl></param>,
              <param><decl><type><specifier>const</specifier> <name>svn_wc_diff_callbacks2_t</name> *</type><name>callbacks</name></decl></param>,
              <param><decl><type>struct <name>diff_cmd_baton</name> *</type><name>callback_baton</name></decl></param>,
              <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url1</name></decl>, *<decl><type ref="prev"/><name>anchor</name></decl>, *<decl><type ref="prev"/><name>anchor_url</name></decl>, *<decl><type ref="prev"/><name>target</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>, *<decl><type ref="prev"/><name>dir_access</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_ra_reporter3_t</name> *</type><name>reporter</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>report_baton</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>diff_editor</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>diff_edit_baton</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>rev2_is_base</name> <init>= <expr>(<name><name>revision2</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_base</name>)</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>levels_to_lock</name> <init>= <expr><call><name>SVN_WC__LEVELS_TO_LOCK_FROM_DEPTH</name><argument_list>(<argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>server_supports_depth</name></decl>;</decl_stmt>

  <comment type="block">/* Assert that we have valid input. */</comment>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>! <call><name>svn_path_is_url</name><argument_list>(<argument><expr><name>path2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Convert path1 to a URL to feed to do_diff. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>convert_to_url</name><argument_list>(<argument><expr>&amp;<name>url1</name></expr></argument>, <argument><expr><name>path1</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_open_anchor</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr>&amp;<name>dir_access</name></expr></argument>, <argument><expr>&amp;<name>target</name></expr></argument>,
                                 <argument><expr><name>path2</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>levels_to_lock</name></expr></argument>,
                                 <argument><expr><name><name>ctx</name>-&gt;<name>cancel_func</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>,
                                 <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>anchor</name> = <call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Fetch the URL of the anchor directory. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_versioned</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>! <name><name>entry</name>-&gt;<name>url</name></name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_ENTRY_MISSING_URL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Directory '%s' has no URL"</expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
  <expr_stmt><expr><name>anchor_url</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If we are performing a pegged diff, we need to find out what our
     actual URLs will be. */</comment>
  <if>if <condition>(<expr><name><name>peg_revision</name>-&gt;<name>kind</name></name> != <name>svn_opt_revision_unspecified</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_opt_revision_t</name> *</type><name>start_ignore</name></decl>, *<decl><type ref="prev"/><name>end_ignore</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url_ignore</name></decl>;</decl_stmt>

      <expr_stmt><expr><name><name>end</name>.<name>kind</name></name> = <name>svn_opt_revision_unspecified</name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__repos_locations</name><argument_list>(<argument><expr>&amp;<name>url1</name></expr></argument>, <argument><expr>&amp;<name>start_ignore</name></expr></argument>,
                                          <argument><expr>&amp;<name>url_ignore</name></expr></argument>, <argument><expr>&amp;<name>end_ignore</name></expr></argument>,
                                          <argument><expr><name>NULL</name></expr></argument>,
                                          <argument><expr><name>path1</name></expr></argument>,
                                          <argument><expr><name>peg_revision</name></expr></argument>,
                                          <argument><expr><name>revision1</name></expr></argument>, <argument><expr>&amp;<name>end</name></expr></argument>,
                                          <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr>!<name>reverse</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name><name>callback_baton</name>-&gt;<name>orig_path_1</name></name> = <name>url1</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>callback_baton</name>-&gt;<name>orig_path_2</name></name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>anchor_url</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else
        <block>{
          <expr_stmt><expr><name><name>callback_baton</name>-&gt;<name>orig_path_1</name></name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>anchor_url</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>callback_baton</name>-&gt;<name>orig_path_2</name></name> = <name>url1</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then></if>

  <comment type="block">/* Establish RA session to path2's anchor */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__open_ra_session_internal</name><argument_list>(<argument><expr>&amp;<name>ra_session</name></expr></argument>, <argument><expr><name>anchor_url</name></expr></argument>,
                                               <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
                                               <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_get_diff_editor4</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>target</name></expr></argument>,
                                  <argument><expr><name>callbacks</name></expr></argument>, <argument><expr><name>callback_baton</name></expr></argument>,
                                  <argument><expr><name>depth</name></expr></argument>,
                                  <argument><expr><name>ignore_ancestry</name></expr></argument>,
                                  <argument><expr><name>rev2_is_base</name></expr></argument>,
                                  <argument><expr><name>reverse</name></expr></argument>,
                                  <argument><expr><name><name>ctx</name>-&gt;<name>cancel_func</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>,
                                  <argument><expr><name>changelists</name></expr></argument>,
                                  <argument><expr>&amp;<name>diff_editor</name></expr></argument>, <argument><expr>&amp;<name>diff_edit_baton</name></expr></argument>,
                                  <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Tell the RA layer we want a delta to change our txn to URL1 */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_revision_number</name>
          <argument_list>(<argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>revision1</name></expr></argument>,
           <argument><expr>(<name>path1</name> == <name>url1</name>) ? <name>NULL</name> : <name>path1</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<name>reverse</name></expr>)</condition><then>
    <expr_stmt><expr><name><name>callback_baton</name>-&gt;<name>revnum1</name></name> = <name>rev</name></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><name><name>callback_baton</name>-&gt;<name>revnum2</name></name> = <name>rev</name></expr>;</expr_stmt></else></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_do_diff3</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>,
                          <argument><expr>&amp;<name>reporter</name></expr></argument>, <argument><expr>&amp;<name>report_baton</name></expr></argument>,
                          <argument><expr><name>rev</name></expr></argument>,
                          <argument><expr><name>target</name> ? <call><name>svn_path_uri_decode</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call> : <name>NULL</name></expr></argument>,
                          <argument><expr><name>depth</name></expr></argument>,
                          <argument><expr><name>ignore_ancestry</name></expr></argument>,
                          <argument><expr><name>TRUE</name></expr></argument>,  <comment type="block">/* text_deltas */</comment>
                          <argument><expr><name>url1</name></expr></argument>,
                          <argument><expr><name>diff_editor</name></expr></argument>, <argument><expr><name>diff_edit_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_has_capability</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>&amp;<name>server_supports_depth</name></expr></argument>,
                                <argument><expr><name>SVN_RA_CAPABILITY_DEPTH</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Create a txn mirror of path2;  the diff editor will print
     diffs in reverse.  :-)  */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_crawl_revisions3</name><argument_list>(<argument><expr><name>path2</name></expr></argument>, <argument><expr><name>dir_access</name></expr></argument>,
                                  <argument><expr><name>reporter</name></expr></argument>, <argument><expr><name>report_baton</name></expr></argument>,
                                  <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr>(! <name>server_supports_depth</name>)</expr></argument>,
                                  <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <comment type="block">/* notification is N/A */</comment>
                                  <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_close</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* This is basically just the guts of svn_client_diff[_peg]3(). */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>do_diff</name><parameter_list>(<param><decl><type><specifier>const</specifier> struct <name>diff_parameters</name> *</type><name>diff_param</name></decl></param>,
        <param><decl><type><specifier>const</specifier> <name>svn_wc_diff_callbacks2_t</name> *</type><name>callbacks</name></decl></param>,
        <param><decl><type>struct <name>diff_cmd_baton</name> *</type><name>callback_baton</name></decl></param>,
        <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>diff_paths</name></type> <name>diff_paths</name></decl>;</decl_stmt>

  <comment type="block">/* Check if paths/revisions are urls/local. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_paths</name><argument_list>(<argument><expr><name>diff_param</name></expr></argument>, <argument><expr>&amp;<name>diff_paths</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name><name>diff_paths</name>.<name>is_repos1</name></name></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><name><name>diff_paths</name>.<name>is_repos2</name></name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>diff_repos_repos</name><argument_list>(<argument><expr><name>diff_param</name></expr></argument>, <argument><expr><name>callbacks</name></expr></argument>, <argument><expr><name>callback_baton</name></expr></argument>,
                                   <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else <comment type="block">/* path2 is a working copy path */</comment>
        <block>{
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>diff_repos_wc</name><argument_list>(<argument><expr><name><name>diff_param</name>-&gt;<name>path1</name></name></expr></argument>, <argument><expr><name><name>diff_param</name>-&gt;<name>revision1</name></name></expr></argument>,
                                <argument><expr><name><name>diff_param</name>-&gt;<name>peg_revision</name></name></expr></argument>,
                                <argument><expr><name><name>diff_param</name>-&gt;<name>path2</name></name></expr></argument>, <argument><expr><name><name>diff_param</name>-&gt;<name>revision2</name></name></expr></argument>,
                                <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>diff_param</name>-&gt;<name>depth</name></name></expr></argument>,
                                <argument><expr><name><name>diff_param</name>-&gt;<name>ignore_ancestry</name></name></expr></argument>,
                                <argument><expr><name><name>diff_param</name>-&gt;<name>changelists</name></name></expr></argument>,
                                <argument><expr><name>callbacks</name></expr></argument>, <argument><expr><name>callback_baton</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then>
  <else>else <comment type="block">/* path1 is a working copy path */</comment>
    <block>{
      <if>if <condition>(<expr><name><name>diff_paths</name>.<name>is_repos2</name></name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>diff_repos_wc</name><argument_list>(<argument><expr><name><name>diff_param</name>-&gt;<name>path2</name></name></expr></argument>, <argument><expr><name><name>diff_param</name>-&gt;<name>revision2</name></name></expr></argument>,
                                <argument><expr><name><name>diff_param</name>-&gt;<name>peg_revision</name></name></expr></argument>,
                                <argument><expr><name><name>diff_param</name>-&gt;<name>path1</name></name></expr></argument>, <argument><expr><name><name>diff_param</name>-&gt;<name>revision1</name></name></expr></argument>,
                                <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name><name>diff_param</name>-&gt;<name>depth</name></name></expr></argument>,
                                <argument><expr><name><name>diff_param</name>-&gt;<name>ignore_ancestry</name></name></expr></argument>,
                                <argument><expr><name><name>diff_param</name>-&gt;<name>changelists</name></name></expr></argument>,
                                <argument><expr><name>callbacks</name></expr></argument>, <argument><expr><name>callback_baton</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else <comment type="block">/* path2 is a working copy path */</comment>
        <block>{
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>diff_wc_wc</name><argument_list>(<argument><expr><name><name>diff_param</name>-&gt;<name>path1</name></name></expr></argument>, <argument><expr><name><name>diff_param</name>-&gt;<name>revision1</name></name></expr></argument>,
                             <argument><expr><name><name>diff_param</name>-&gt;<name>path2</name></name></expr></argument>, <argument><expr><name><name>diff_param</name>-&gt;<name>revision2</name></name></expr></argument>,
                             <argument><expr><name><name>diff_param</name>-&gt;<name>depth</name></name></expr></argument>,
                             <argument><expr><name><name>diff_param</name>-&gt;<name>ignore_ancestry</name></name></expr></argument>,
                             <argument><expr><name><name>diff_param</name>-&gt;<name>changelists</name></name></expr></argument>,
                             <argument><expr><name>callbacks</name></expr></argument>, <argument><expr><name>callback_baton</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></else></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Perform a diff summary between two repository paths. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>diff_summarize_repos_repos</name><parameter_list>(<param><decl><type><specifier>const</specifier> struct <name>diff_parameters</name> *</type><name>diff_param</name></decl></param>,
                           <param><decl><type><name>svn_client_diff_summarize_func_t</name></type> <name>summarize_func</name></decl></param>,
                           <param><decl><type><name>void</name> *</type><name>summarize_baton</name></decl></param>,
                           <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>extra_ra_session</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_ra_reporter3_t</name> *</type><name>reporter</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>report_baton</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>diff_editor</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>diff_edit_baton</name></decl>;</decl_stmt>

  <decl_stmt><decl><type>struct <name>diff_repos_repos_t</name></type> <name>drr</name></decl>;</decl_stmt>

  <comment type="block">/* Prepare info for the repos repos diff. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>diff_prepare_repos_repos</name><argument_list>(<argument><expr><name>diff_param</name></expr></argument>, <argument><expr>&amp;<name>drr</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Now, we open an extra RA session to the correct anchor
     location for URL1.  This is used to get the kind of deleted paths.  */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__open_ra_session_internal</name>
          <argument_list>(<argument><expr>&amp;<name>extra_ra_session</name></expr></argument>, <argument><expr><name><name>drr</name>.<name>anchor1</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
           <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Set up the repos_diff editor. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_diff_summarize_editor</name>
          <argument_list>(<argument><expr><name><name>drr</name>.<name>target2</name></name></expr></argument>, <argument><expr><name>summarize_func</name></expr></argument>,
           <argument><expr><name>summarize_baton</name></expr></argument>, <argument><expr><name>extra_ra_session</name></expr></argument>, <argument><expr><name><name>drr</name>.<name>rev1</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>cancel_func</name></name></expr></argument>,
           <argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>, <argument><expr>&amp;<name>diff_editor</name></expr></argument>, <argument><expr>&amp;<name>diff_edit_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* We want to switch our txn into URL2 */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_do_diff3</name>
          <argument_list>(<argument><expr><name><name>drr</name>.<name>ra_session</name></name></expr></argument>, <argument><expr>&amp;<name>reporter</name></expr></argument>, <argument><expr>&amp;<name>report_baton</name></expr></argument>, <argument><expr><name><name>drr</name>.<name>rev2</name></name></expr></argument>, <argument><expr><name><name>drr</name>.<name>target1</name></name></expr></argument>,
           <argument><expr><name><name>diff_param</name>-&gt;<name>depth</name></name></expr></argument>, <argument><expr><name><name>diff_param</name>-&gt;<name>ignore_ancestry</name></name></expr></argument>,
           <argument><expr><name>FALSE</name></expr></argument> <comment type="block">/* do not create text delta */</comment>, <argument><expr><name><name>drr</name>.<name>url2</name></name></expr></argument>, <argument><expr><name>diff_editor</name></expr></argument>,
           <argument><expr><name>diff_edit_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Drive the reporter; do the diff. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>reporter</name>-&gt;<name>set_path</name></name><argument_list>(<argument><expr><name>report_baton</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name><name>drr</name>.<name>rev1</name></name></expr></argument>,
                             <argument><expr><name>svn_depth_infinity</name></expr></argument>,
                             <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>reporter</name>-&gt;<name>finish_report</name></name><argument_list>(<argument><expr><name>report_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* This is basically just the guts of svn_client_diff_summarize[_peg](). */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>do_diff_summarize</name><parameter_list>(<param><decl><type><specifier>const</specifier> struct <name>diff_parameters</name> *</type><name>diff_param</name></decl></param>,
                  <param><decl><type><name>svn_client_diff_summarize_func_t</name></type> <name>summarize_func</name></decl></param>,
                  <param><decl><type><name>void</name> *</type><name>summarize_baton</name></decl></param>,
                  <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>diff_paths</name></type> <name>diff_paths</name></decl>;</decl_stmt>

  <comment type="block">/* Check if paths/revisions are urls/local. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_paths</name><argument_list>(<argument><expr><name>diff_param</name></expr></argument>, <argument><expr>&amp;<name>diff_paths</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name><name>diff_paths</name>.<name>is_repos1</name></name> &amp;&amp; <name><name>diff_paths</name>.<name>is_repos2</name></name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>diff_summarize_repos_repos</name><argument_list>(<argument><expr><name>diff_param</name></expr></argument>, <argument><expr><name>summarize_func</name></expr></argument>,
                                         <argument><expr><name>summarize_baton</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_UNSUPPORTED_FEATURE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                            <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Summarizing diff can only compare repository "
                              "to repository"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></else></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Initialize DIFF_CMD_BATON.diff_cmd and DIFF_CMD_BATON.options,
 * according to OPTIONS and CONFIG.  CONFIG may be null.
 * Allocate the fields in POOL, which should be at least as long-lived
 * as the pool DIFF_CMD_BATON itself is allocated in.
 */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>set_up_diff_cmd_and_options</name><parameter_list>(<param><decl><type>struct <name>diff_cmd_baton</name> *</type><name>diff_cmd_baton</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>options</name></decl></param>,
                            <param><decl><type><name>apr_hash_t</name> *</type><name>config</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>diff_cmd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* See if there is a command. */</comment>
  <if>if <condition>(<expr><name>config</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_config_t</name> *</type><name>cfg</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>SVN_CONFIG_CATEGORY_CONFIG</name></expr></argument>,
                                       <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>svn_config_get</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr>&amp;<name>diff_cmd</name></expr></argument>, <argument><expr><name>SVN_CONFIG_SECTION_HELPERS</name></expr></argument>,
                     <argument><expr><name>SVN_CONFIG_OPTION_DIFF_CMD</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <expr_stmt><expr><name><name>diff_cmd_baton</name>-&gt;<name>diff_cmd</name></name> = <name>diff_cmd</name></expr>;</expr_stmt>

  <comment type="block">/* If there was a command, arrange options to pass to it. */</comment>
  <if>if <condition>(<expr><name><name>diff_cmd_baton</name>-&gt;<name>diff_cmd</name></name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>argv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>argc</name> <init>= <expr><name><name>options</name>-&gt;<name>nelts</name></name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>argc</name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
          <expr_stmt><expr><name>argv</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>argc</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>argc</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
            <expr_stmt><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
        }</block></then></if>
      <expr_stmt><expr><name><name>diff_cmd_baton</name>-&gt;<name>options</name>.<name>for_external</name>.<name>argv</name></name> = <name>argv</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>diff_cmd_baton</name>-&gt;<name>options</name>.<name>for_external</name>.<name>argc</name></name> = <name>argc</name></expr>;</expr_stmt>
    }</block></then>
  <else>else  <comment type="block">/* No command, so arrange options for internal invocation instead. */</comment>
    <block>{
      <expr_stmt><expr><name><name>diff_cmd_baton</name>-&gt;<name>options</name>.<name>for_internal</name></name>
        = <call><name>svn_diff_file_options_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_diff_file_options_parse</name>
              <argument_list>(<argument><expr><name><name>diff_cmd_baton</name>-&gt;<name>options</name>.<name>for_internal</name></name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/*----------------------------------------------------------------------- */</comment>
<escape char="0xc"/>
<comment type="block">/*** Public Interfaces. ***/</comment>

<comment type="block">/* Display context diffs between two PATH/REVISION pairs.  Each of
   these inputs will be one of the following:

   - a repository URL at a given revision.
   - a working copy path, ignoring local mods.
   - a working copy path, including local mods.

   We can establish a matrix that shows the nine possible types of
   diffs we expect to support.


      ` .     DST ||  URL:rev   | WC:base    | WC:working |
          ` .     ||            |            |            |
      SRC     ` . ||            |            |            |
      ============++============+============+============+
       URL:rev    || (*)        | (*)        | (*)        |
                  ||            |            |            |
                  ||            |            |            |
                  ||            |            |            |
      ------------++------------+------------+------------+
       WC:base    || (*)        |                         |
                  ||            | New svn_wc_diff which   |
                  ||            | is smart enough to      |
                  ||            | handle two WC paths     |
      ------------++------------+ and their related       +
       WC:working || (*)        | text-bases and working  |
                  ||            | files.  This operation  |
                  ||            | is entirely local.      |
                  ||            |                         |
      ------------++------------+------------+------------+
      * These cases require server communication.
*/</comment>
<function><type><name>svn_error_t</name> *</type>
<name>svn_client_diff4</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>options</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path1</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision1</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path2</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision2</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>relative_to_dir</name></decl></param>,
                 <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                 <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl></param>,
                 <param><decl><type><name>svn_boolean_t</name></type> <name>no_diff_deleted</name></decl></param>,
                 <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_content_type</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>header_encoding</name></decl></param>,
                 <param><decl><type><name>apr_file_t</name> *</type><name>outfile</name></decl></param>,
                 <param><decl><type><name>apr_file_t</name> *</type><name>errfile</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>changelists</name></decl></param>,
                 <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>diff_parameters</name></type> <name>diff_params</name></decl>;</decl_stmt>

  <decl_stmt><decl><type>struct <name>diff_cmd_baton</name></type> <name>diff_cmd_baton</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_diff_callbacks2_t</name></type> <name>diff_callbacks</name></decl>;</decl_stmt>

  <comment type="block">/* We will never do a pegged diff from here. */</comment>
  <decl_stmt><decl><type><name>svn_opt_revision_t</name></type> <name>peg_revision</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>peg_revision</name>.<name>kind</name></name> = <name>svn_opt_revision_unspecified</name></expr>;</expr_stmt>

  <comment type="block">/* fill diff_param */</comment>
  <expr_stmt><expr><name><name>diff_params</name>.<name>path1</name></name> = <name>path1</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_params</name>.<name>revision1</name></name> = <name>revision1</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_params</name>.<name>path2</name></name> = <name>path2</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_params</name>.<name>revision2</name></name> = <name>revision2</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_params</name>.<name>peg_revision</name></name> = &amp;<name>peg_revision</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_params</name>.<name>depth</name></name> = <name>depth</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_params</name>.<name>ignore_ancestry</name></name> = <name>ignore_ancestry</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_params</name>.<name>no_diff_deleted</name></name> = <name>no_diff_deleted</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_params</name>.<name>changelists</name></name> = <name>changelists</name></expr>;</expr_stmt>

  <comment type="block">/* setup callback and baton */</comment>
  <expr_stmt><expr><name><name>diff_callbacks</name>.<name>file_changed</name></name> = <name>diff_file_changed</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_callbacks</name>.<name>file_added</name></name> = <name>diff_file_added</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_callbacks</name>.<name>file_deleted</name></name> = <name>no_diff_deleted</name> ? <name>diff_file_deleted_no_diff</name> :
                                                  <name>diff_file_deleted_with_diff</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_callbacks</name>.<name>dir_added</name></name> =  <name>diff_dir_added</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_callbacks</name>.<name>dir_deleted</name></name> = <name>diff_dir_deleted</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_callbacks</name>.<name>dir_props_changed</name></name> = <name>diff_props_changed</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>diff_cmd_baton</name>.<name>orig_path_1</name></name> = <name>path1</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_cmd_baton</name>.<name>orig_path_2</name></name> = <name>path2</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>set_up_diff_cmd_and_options</name><argument_list>(<argument><expr>&amp;<name>diff_cmd_baton</name></expr></argument>, <argument><expr><name>options</name></expr></argument>,
                                      <argument><expr><name><name>ctx</name>-&gt;<name>config</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_cmd_baton</name>.<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_cmd_baton</name>.<name>outfile</name></name> = <name>outfile</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_cmd_baton</name>.<name>errfile</name></name> = <name>errfile</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_cmd_baton</name>.<name>header_encoding</name></name> = <name>header_encoding</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_cmd_baton</name>.<name>revnum1</name></name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_cmd_baton</name>.<name>revnum2</name></name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>diff_cmd_baton</name>.<name>force_empty</name></name> = <name>FALSE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_cmd_baton</name>.<name>force_binary</name></name> = <name>ignore_content_type</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_cmd_baton</name>.<name>relative_to_dir</name></name> = <name>relative_to_dir</name></expr>;</expr_stmt>

  <return>return <expr><call><name>do_diff</name><argument_list>(<argument><expr>&amp;<name>diff_params</name></expr></argument>, <argument><expr>&amp;<name>diff_callbacks</name></expr></argument>, <argument><expr>&amp;<name>diff_cmd_baton</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_client_diff3</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>options</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path1</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision1</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path2</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision2</name></decl></param>,
                 <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                 <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl></param>,
                 <param><decl><type><name>svn_boolean_t</name></type> <name>no_diff_deleted</name></decl></param>,
                 <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_content_type</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>header_encoding</name></decl></param>,
                 <param><decl><type><name>apr_file_t</name> *</type><name>outfile</name></decl></param>,
                 <param><decl><type><name>apr_file_t</name> *</type><name>errfile</name></decl></param>,
                 <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_client_diff4</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>path1</name></expr></argument>, <argument><expr><name>revision1</name></expr></argument>, <argument><expr><name>path2</name></expr></argument>,
                          <argument><expr><name>revision2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                          <argument><expr><call><name>SVN_DEPTH_INFINITY_OR_FILES</name><argument_list>(<argument><expr><name>recurse</name></expr></argument>)</argument_list></call></expr></argument>,
                          <argument><expr><name>ignore_ancestry</name></expr></argument>, <argument><expr><name>no_diff_deleted</name></expr></argument>,
                          <argument><expr><name>ignore_content_type</name></expr></argument>, <argument><expr><name>header_encoding</name></expr></argument>,
                          <argument><expr><name>outfile</name></expr></argument>, <argument><expr><name>errfile</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_client_diff2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>options</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path1</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision1</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path2</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision2</name></decl></param>,
                 <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                 <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl></param>,
                 <param><decl><type><name>svn_boolean_t</name></type> <name>no_diff_deleted</name></decl></param>,
                 <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_content_type</name></decl></param>,
                 <param><decl><type><name>apr_file_t</name> *</type><name>outfile</name></decl></param>,
                 <param><decl><type><name>apr_file_t</name> *</type><name>errfile</name></decl></param>,
                 <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_client_diff3</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>path1</name></expr></argument>, <argument><expr><name>revision1</name></expr></argument>, <argument><expr><name>path2</name></expr></argument>, <argument><expr><name>revision2</name></expr></argument>,
                          <argument><expr><name>recurse</name></expr></argument>, <argument><expr><name>ignore_ancestry</name></expr></argument>, <argument><expr><name>no_diff_deleted</name></expr></argument>,
                          <argument><expr><name>ignore_content_type</name></expr></argument>, <argument><expr><name>SVN_APR_LOCALE_CHARSET</name></expr></argument>,
                          <argument><expr><name>outfile</name></expr></argument>, <argument><expr><name>errfile</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_client_diff</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>options</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path1</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision1</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path2</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision2</name></decl></param>,
                <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl></param>,
                <param><decl><type><name>svn_boolean_t</name></type> <name>no_diff_deleted</name></decl></param>,
                <param><decl><type><name>apr_file_t</name> *</type><name>outfile</name></decl></param>,
                <param><decl><type><name>apr_file_t</name> *</type><name>errfile</name></decl></param>,
                <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_client_diff2</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>path1</name></expr></argument>, <argument><expr><name>revision1</name></expr></argument>, <argument><expr><name>path2</name></expr></argument>, <argument><expr><name>revision2</name></expr></argument>,
                          <argument><expr><name>recurse</name></expr></argument>, <argument><expr><name>ignore_ancestry</name></expr></argument>, <argument><expr><name>no_diff_deleted</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                          <argument><expr><name>outfile</name></expr></argument>, <argument><expr><name>errfile</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_client_diff_peg4</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>options</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>peg_revision</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>start_revision</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>end_revision</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>relative_to_dir</name></decl></param>,
                     <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                     <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl></param>,
                     <param><decl><type><name>svn_boolean_t</name></type> <name>no_diff_deleted</name></decl></param>,
                     <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_content_type</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>header_encoding</name></decl></param>,
                     <param><decl><type><name>apr_file_t</name> *</type><name>outfile</name></decl></param>,
                     <param><decl><type><name>apr_file_t</name> *</type><name>errfile</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>changelists</name></decl></param>,
                     <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>diff_parameters</name></type> <name>diff_params</name></decl>;</decl_stmt>

  <decl_stmt><decl><type>struct <name>diff_cmd_baton</name></type> <name>diff_cmd_baton</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_diff_callbacks2_t</name></type> <name>diff_callbacks</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><call><name>svn_path_is_url</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> &amp;&amp; 
        (<name><name>start_revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_base</name> 
         || <name><name>end_revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_base</name>)</expr> )</condition><then>
    <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CLIENT_BAD_REVISION</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                            <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Revision type requires a working copy "
                              "path, not a URL"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <comment type="block">/* fill diff_param */</comment>
  <expr_stmt><expr><name><name>diff_params</name>.<name>path1</name></name> = <name>path</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_params</name>.<name>revision1</name></name> = <name>start_revision</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_params</name>.<name>path2</name></name> = <name>path</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_params</name>.<name>revision2</name></name> = <name>end_revision</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_params</name>.<name>peg_revision</name></name> = <name>peg_revision</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_params</name>.<name>depth</name></name> = <name>depth</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_params</name>.<name>ignore_ancestry</name></name> = <name>ignore_ancestry</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_params</name>.<name>no_diff_deleted</name></name> = <name>no_diff_deleted</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_params</name>.<name>changelists</name></name> = <name>changelists</name></expr>;</expr_stmt>

  <comment type="block">/* setup callback and baton */</comment>
  <expr_stmt><expr><name><name>diff_callbacks</name>.<name>file_changed</name></name> = <name>diff_file_changed</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_callbacks</name>.<name>file_added</name></name> = <name>diff_file_added</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_callbacks</name>.<name>file_deleted</name></name> = <name>no_diff_deleted</name> ? <name>diff_file_deleted_no_diff</name> :
                                                  <name>diff_file_deleted_with_diff</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_callbacks</name>.<name>dir_added</name></name> =  <name>diff_dir_added</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_callbacks</name>.<name>dir_deleted</name></name> = <name>diff_dir_deleted</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_callbacks</name>.<name>dir_props_changed</name></name> = <name>diff_props_changed</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>diff_cmd_baton</name>.<name>orig_path_1</name></name> = <name>path</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_cmd_baton</name>.<name>orig_path_2</name></name> = <name>path</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>set_up_diff_cmd_and_options</name><argument_list>(<argument><expr>&amp;<name>diff_cmd_baton</name></expr></argument>, <argument><expr><name>options</name></expr></argument>,
                                      <argument><expr><name><name>ctx</name>-&gt;<name>config</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_cmd_baton</name>.<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_cmd_baton</name>.<name>outfile</name></name> = <name>outfile</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_cmd_baton</name>.<name>errfile</name></name> = <name>errfile</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_cmd_baton</name>.<name>header_encoding</name></name> = <name>header_encoding</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_cmd_baton</name>.<name>revnum1</name></name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_cmd_baton</name>.<name>revnum2</name></name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>diff_cmd_baton</name>.<name>force_empty</name></name> = <name>FALSE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_cmd_baton</name>.<name>force_binary</name></name> = <name>ignore_content_type</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_cmd_baton</name>.<name>relative_to_dir</name></name> = <name>relative_to_dir</name></expr>;</expr_stmt>

  <return>return <expr><call><name>do_diff</name><argument_list>(<argument><expr>&amp;<name>diff_params</name></expr></argument>, <argument><expr>&amp;<name>diff_callbacks</name></expr></argument>, <argument><expr>&amp;<name>diff_cmd_baton</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_client_diff_peg3</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>options</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>peg_revision</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>start_revision</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>end_revision</name></decl></param>,
                     <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                     <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl></param>,
                     <param><decl><type><name>svn_boolean_t</name></type> <name>no_diff_deleted</name></decl></param>,
                     <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_content_type</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>header_encoding</name></decl></param>,
                     <param><decl><type><name>apr_file_t</name> *</type><name>outfile</name></decl></param>,
                     <param><decl><type><name>apr_file_t</name> *</type><name>errfile</name></decl></param>,
                     <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_client_diff_peg4</name><argument_list>(<argument><expr><name>options</name></expr></argument>,
                              <argument><expr><name>path</name></expr></argument>,
                              <argument><expr><name>peg_revision</name></expr></argument>,
                              <argument><expr><name>start_revision</name></expr></argument>,
                              <argument><expr><name>end_revision</name></expr></argument>,
                              <argument><expr><name>NULL</name></expr></argument>,
                              <argument><expr><call><name>SVN_DEPTH_INFINITY_OR_FILES</name><argument_list>(<argument><expr><name>recurse</name></expr></argument>)</argument_list></call></expr></argument>,
                              <argument><expr><name>ignore_ancestry</name></expr></argument>,
                              <argument><expr><name>no_diff_deleted</name></expr></argument>,
                              <argument><expr><name>ignore_content_type</name></expr></argument>,
                              <argument><expr><name>header_encoding</name></expr></argument>,
                              <argument><expr><name>outfile</name></expr></argument>,
                              <argument><expr><name>errfile</name></expr></argument>,
                              <argument><expr><name>NULL</name></expr></argument>,
                              <argument><expr><name>ctx</name></expr></argument>,
                              <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_client_diff_peg2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>options</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>peg_revision</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>start_revision</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>end_revision</name></decl></param>,
                     <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                     <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl></param>,
                     <param><decl><type><name>svn_boolean_t</name></type> <name>no_diff_deleted</name></decl></param>,
                     <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_content_type</name></decl></param>,
                     <param><decl><type><name>apr_file_t</name> *</type><name>outfile</name></decl></param>,
                     <param><decl><type><name>apr_file_t</name> *</type><name>errfile</name></decl></param>,
                     <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_client_diff_peg3</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>peg_revision</name></expr></argument>, <argument><expr><name>start_revision</name></expr></argument>,
                              <argument><expr><name>end_revision</name></expr></argument>,
                              <argument><expr><call><name>SVN_DEPTH_INFINITY_OR_FILES</name><argument_list>(<argument><expr><name>recurse</name></expr></argument>)</argument_list></call></expr></argument>,
                              <argument><expr><name>ignore_ancestry</name></expr></argument>, <argument><expr><name>no_diff_deleted</name></expr></argument>,
                              <argument><expr><name>ignore_content_type</name></expr></argument>, <argument><expr><name>SVN_APR_LOCALE_CHARSET</name></expr></argument>,
                              <argument><expr><name>outfile</name></expr></argument>, <argument><expr><name>errfile</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_client_diff_peg</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>options</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>peg_revision</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>start_revision</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>end_revision</name></decl></param>,
                    <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                    <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl></param>,
                    <param><decl><type><name>svn_boolean_t</name></type> <name>no_diff_deleted</name></decl></param>,
                    <param><decl><type><name>apr_file_t</name> *</type><name>outfile</name></decl></param>,
                    <param><decl><type><name>apr_file_t</name> *</type><name>errfile</name></decl></param>,
                    <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_client_diff_peg2</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>peg_revision</name></expr></argument>,
                              <argument><expr><name>start_revision</name></expr></argument>, <argument><expr><name>end_revision</name></expr></argument>, <argument><expr><name>recurse</name></expr></argument>,
                              <argument><expr><name>ignore_ancestry</name></expr></argument>, <argument><expr><name>no_diff_deleted</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                              <argument><expr><name>outfile</name></expr></argument>, <argument><expr><name>errfile</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_client_diff_summarize2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path1</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision1</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path2</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision2</name></decl></param>,
                           <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                           <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>changelists</name></decl></param>,
                           <param><decl><type><name>svn_client_diff_summarize_func_t</name></type> <name>summarize_func</name></decl></param>,
                           <param><decl><type><name>void</name> *</type><name>summarize_baton</name></decl></param>,
                           <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>diff_parameters</name></type> <name>diff_params</name></decl>;</decl_stmt>

  <comment type="block">/* We will never do a pegged diff from here. */</comment>
  <decl_stmt><decl><type><name>svn_opt_revision_t</name></type> <name>peg_revision</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>peg_revision</name>.<name>kind</name></name> = <name>svn_opt_revision_unspecified</name></expr>;</expr_stmt>

  <comment type="block">/* fill diff_param */</comment>
  <expr_stmt><expr><name><name>diff_params</name>.<name>path1</name></name> = <name>path1</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_params</name>.<name>revision1</name></name> = <name>revision1</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_params</name>.<name>path2</name></name> = <name>path2</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_params</name>.<name>revision2</name></name> = <name>revision2</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_params</name>.<name>peg_revision</name></name> = &amp;<name>peg_revision</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_params</name>.<name>depth</name></name> = <name>depth</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_params</name>.<name>ignore_ancestry</name></name> = <name>ignore_ancestry</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_params</name>.<name>no_diff_deleted</name></name> = <name>FALSE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_params</name>.<name>changelists</name></name> = <name>changelists</name></expr>;</expr_stmt>

  <return>return <expr><call><name>do_diff_summarize</name><argument_list>(<argument><expr>&amp;<name>diff_params</name></expr></argument>, <argument><expr><name>summarize_func</name></expr></argument>, <argument><expr><name>summarize_baton</name></expr></argument>,
                           <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_client_diff_summarize</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path1</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision1</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path2</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision2</name></decl></param>,
                          <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                          <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl></param>,
                          <param><decl><type><name>svn_client_diff_summarize_func_t</name></type> <name>summarize_func</name></decl></param>,
                          <param><decl><type><name>void</name> *</type><name>summarize_baton</name></decl></param>,
                          <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_client_diff_summarize2</name><argument_list>(<argument><expr><name>path1</name></expr></argument>, <argument><expr><name>revision1</name></expr></argument>, <argument><expr><name>path2</name></expr></argument>,
                                    <argument><expr><name>revision2</name></expr></argument>,
                                    <argument><expr><call><name>SVN_DEPTH_INFINITY_OR_FILES</name><argument_list>(<argument><expr><name>recurse</name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><name>ignore_ancestry</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>summarize_func</name></expr></argument>,
                                    <argument><expr><name>summarize_baton</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_client_diff_summarize_peg2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>peg_revision</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>start_revision</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>end_revision</name></decl></param>,
                               <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                               <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>changelists</name></decl></param>,
                               <param><decl><type><name>svn_client_diff_summarize_func_t</name></type> <name>summarize_func</name></decl></param>,
                               <param><decl><type><name>void</name> *</type><name>summarize_baton</name></decl></param>,
                               <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>diff_parameters</name></type> <name>diff_params</name></decl>;</decl_stmt>

  <comment type="block">/* fill diff_param */</comment>
  <expr_stmt><expr><name><name>diff_params</name>.<name>path1</name></name> = <name>path</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_params</name>.<name>revision1</name></name> = <name>start_revision</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_params</name>.<name>path2</name></name> = <name>path</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_params</name>.<name>revision2</name></name> = <name>end_revision</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_params</name>.<name>peg_revision</name></name> = <name>peg_revision</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_params</name>.<name>depth</name></name> = <name>depth</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_params</name>.<name>ignore_ancestry</name></name> = <name>ignore_ancestry</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_params</name>.<name>no_diff_deleted</name></name> = <name>FALSE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>diff_params</name>.<name>changelists</name></name> = <name>changelists</name></expr>;</expr_stmt>

  <return>return <expr><call><name>do_diff_summarize</name><argument_list>(<argument><expr>&amp;<name>diff_params</name></expr></argument>, <argument><expr><name>summarize_func</name></expr></argument>, <argument><expr><name>summarize_baton</name></expr></argument>,
                           <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_client_diff_summarize_peg</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>peg_revision</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>start_revision</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>end_revision</name></decl></param>,
                              <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                              <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl></param>,
                              <param><decl><type><name>svn_client_diff_summarize_func_t</name></type> <name>summarize_func</name></decl></param>,
                              <param><decl><type><name>void</name> *</type><name>summarize_baton</name></decl></param>,
                              <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_client_diff_summarize_peg2</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>peg_revision</name></expr></argument>,
                                        <argument><expr><name>start_revision</name></expr></argument>, <argument><expr><name>end_revision</name></expr></argument>,
                                        <argument><expr><call><name>SVN_DEPTH_INFINITY_OR_FILES</name><argument_list>(<argument><expr><name>recurse</name></expr></argument>)</argument_list></call></expr></argument>,
                                        <argument><expr><name>ignore_ancestry</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                        <argument><expr><name>summarize_func</name></expr></argument>, <argument><expr><name>summarize_baton</name></expr></argument>,
                                        <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_client_diff_summarize_t</name> *</type>
<name>svn_client_diff_summarize_dup</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_client_diff_summarize_t</name> *</type><name>diff</name></decl></param>,
                              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_client_diff_summarize_t</name> *</type><name>dup_diff</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>dup_diff</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>dup_diff</name> = *<name>diff</name></expr>;</expr_stmt>

  <if>if <condition>(<expr><name><name>diff</name>-&gt;<name>path</name></name></expr>)</condition><then>
    <expr_stmt><expr><name><name>dup_diff</name>-&gt;<name>path</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>diff</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <return>return <expr><name>dup_diff</name></expr>;</return>
}</block></function>
</unit>
