<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_client/repos_diff_summarize.c"><comment type="block">/*
 * repos_diff_summarize.c -- The diff summarize editor for summarizing
 * the differences of two repository versions
 *
 * ====================================================================
 * Copyright (c) 2005-2006 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_props.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"client.h"</cpp:file></cpp:include>


<comment type="block">/* Overall crawler editor baton.  */</comment>
<struct>struct <name>edit_baton</name> <block>{
  <comment type="block">/* The target of the diff, relative to the root of the edit */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl>;</decl_stmt>

  <comment type="block">/* The summarize callback passed down from the API */</comment>
  <decl_stmt><decl><type><name>svn_client_diff_summarize_func_t</name></type> <name>summarize_func</name></decl>;</decl_stmt>

  <comment type="block">/* The summarize callback baton */</comment>
  <decl_stmt><decl><type><name>void</name> *</type><name>summarize_func_baton</name></decl>;</decl_stmt>

  <comment type="block">/* An RA session used to check the kind of deleted paths */</comment>
  <decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl>;</decl_stmt>

  <comment type="block">/* The start revision for the comparison */</comment>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl>;</decl_stmt>
}</block>;</struct>


<comment type="block">/* Item baton. */</comment>
<struct>struct <name>item_baton</name> <block>{
  <comment type="block">/* The overall crawler editor baton */</comment>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>edit_baton</name></decl>;</decl_stmt>

  <comment type="block">/* The summarize filled by the editor calls, NULL if this item hasn't
     been modified (yet) */</comment>
  <decl_stmt><decl><type><name>svn_client_diff_summarize_t</name> *</type><name>summarize</name></decl>;</decl_stmt>

  <comment type="block">/* The path of the file or directory within the repository */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>

  <comment type="block">/* The kind of this item */</comment>
  <decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>node_kind</name></decl>;</decl_stmt>

  <comment type="block">/* The file/directory pool */</comment>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>item_pool</name></decl>;</decl_stmt>
}</block>;</struct>


<comment type="block">/* Create an item baton, with the fields initialized to EDIT_BATON, PATH,
 * NODE_KIND and POOL, respectively.  Allocate the returned structure in POOL.
 */</comment>
<function><type><specifier>static</specifier> struct <name>item_baton</name> *</type>
<name>create_item_baton</name><parameter_list>(<param><decl><type>struct <name>edit_baton</name> *</type><name>edit_baton</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                  <param><decl><type><name>svn_node_kind_t</name></type> <name>node_kind</name></decl></param>,
                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>item_baton</name> *</type><name>b</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>b</name>-&gt;<name>edit_baton</name></name> = <name>edit_baton</name></expr>;</expr_stmt>
  <comment type="block">/* Issue #2765: b-&gt;path is supposed to be relative to the target.
     If the target is a file, just use an empty path.  This way the
     receiver can just concatenate this path to the original path
     without doing any extra checks. */</comment>
  <if>if <condition>(<expr><name>node_kind</name> == <name>svn_node_file</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>edit_baton</name>-&gt;<name>target</name></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <expr_stmt><expr><name><name>b</name>-&gt;<name>path</name></name> =  ""</expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><name><name>b</name>-&gt;<name>path</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
  <expr_stmt><expr><name><name>b</name>-&gt;<name>node_kind</name></name> = <name>node_kind</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>b</name>-&gt;<name>item_pool</name></name> = <name>pool</name></expr>;</expr_stmt>

  <return>return <expr><name>b</name></expr>;</return>
}</block></function>

<comment type="block">/* Make sure that this item baton contains a summarize struct.
 * If it doesn't before this call, allocate a new struct in the item's pool,
 * initializing the diff kind to normal.
 * All other fields are also initialized from IB to to NULL/invalid values. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ensure_summarize</name><parameter_list>(<param><decl><type>struct <name>item_baton</name> *</type><name>ib</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_client_diff_summarize_t</name> *</type><name>sum</name></decl>;</decl_stmt>
  <if>if <condition>(<expr><name><name>ib</name>-&gt;<name>summarize</name></name></expr>)</condition><then>
    <return>return;</return></then></if>

  <expr_stmt><expr><name>sum</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>ib</name>-&gt;<name>item_pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>sum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>sum</name>-&gt;<name>node_kind</name></name> = <name><name>ib</name>-&gt;<name>node_kind</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sum</name>-&gt;<name>summarize_kind</name></name> = <name>svn_client_diff_summarize_kind_normal</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sum</name>-&gt;<name>path</name></name> = <name><name>ib</name>-&gt;<name>path</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>ib</name>-&gt;<name>summarize</name></name> = <name>sum</name></expr>;</expr_stmt>
}</block></function>


<comment type="block">/* An editor function. The root of the comparison hierarchy */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>open_root</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
          <param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
          <param><decl><type><name>void</name> **</type><name>root_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>item_baton</name> *</type><name>ib</name> <init>= <expr><call><name>create_item_baton</name><argument_list>(<argument><expr><name>edit_baton</name></expr></argument>, <argument><expr>""</expr></argument>,
                                            <argument><expr><name>svn_node_dir</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>root_baton</name> = <name>ib</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* An editor function.  */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>delete_entry</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
             <param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
             <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>item_baton</name> *</type><name>ib</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>ib</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_client_diff_summarize_t</name> *</type><name>sum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>

  <comment type="block">/* We need to know if this is a directory or a file */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_check_path</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>ra_session</name></name></expr></argument>,
                            <argument><expr><name>path</name></expr></argument>,
                            <argument><expr><name><name>eb</name>-&gt;<name>revision</name></name></expr></argument>,
                            <argument><expr>&amp;<name>kind</name></expr></argument>,
                            <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>sum</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>sum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sum</name>-&gt;<name>summarize_kind</name></name> = <name>svn_client_diff_summarize_kind_deleted</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sum</name>-&gt;<name>path</name></name> = <name>path</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sum</name>-&gt;<name>node_kind</name></name> = <name>kind</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>eb</name>-&gt;<name>summarize_func</name></name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>summarize_func_baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* An editor function.  */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>add_directory</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
              <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl></param>,
              <param><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_rev</name></decl></param>,
              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
              <param><decl><type><name>void</name> **</type><name>child_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>item_baton</name> *</type><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>item_baton</name> *</type><name>cb</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>cb</name> = <call><name>create_item_baton</name><argument_list>(<argument><expr><name><name>pb</name>-&gt;<name>edit_baton</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>svn_node_dir</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ensure_summarize</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cb</name>-&gt;<name>summarize</name>-&gt;<name>summarize_kind</name></name> = <name>svn_client_diff_summarize_kind_added</name></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>child_baton</name> = <name>cb</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* An editor function.  */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>open_directory</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
               <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
               <param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
               <param><decl><type><name>void</name> **</type><name>child_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>item_baton</name> *</type><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>item_baton</name> *</type><name>cb</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>cb</name> = <call><name>create_item_baton</name><argument_list>(<argument><expr><name><name>pb</name>-&gt;<name>edit_baton</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>svn_node_dir</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>child_baton</name> = <name>cb</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* An editor function.  */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>close_directory</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>dir_baton</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>item_baton</name> *</type><name>ib</name> <init>= <expr><name>dir_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>ib</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>ib</name>-&gt;<name>summarize</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>eb</name>-&gt;<name>summarize_func</name></name><argument_list>(<argument><expr><name><name>ib</name>-&gt;<name>summarize</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>summarize_func_baton</name></name></expr></argument>,
                               <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* An editor function.  */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>add_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
         <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl></param>,
         <param><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_rev</name></decl></param>,
         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
         <param><decl><type><name>void</name> **</type><name>file_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>item_baton</name> *</type><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>item_baton</name> *</type><name>cb</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>cb</name> = <call><name>create_item_baton</name><argument_list>(<argument><expr><name><name>pb</name>-&gt;<name>edit_baton</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>svn_node_file</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ensure_summarize</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cb</name>-&gt;<name>summarize</name>-&gt;<name>summarize_kind</name></name> = <name>svn_client_diff_summarize_kind_added</name></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>file_baton</name> = <name>cb</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* An editor function.  */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>open_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
          <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
          <param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
          <param><decl><type><name>void</name> **</type><name>file_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>item_baton</name> *</type><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>item_baton</name> *</type><name>cb</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>cb</name> = <call><name>create_item_baton</name><argument_list>(<argument><expr><name><name>pb</name>-&gt;<name>edit_baton</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>svn_node_file</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>file_baton</name> = <name>cb</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* An editor function.  */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>apply_textdelta</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_checksum</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                <param><decl><type><name>svn_txdelta_window_handler_t</name> *</type><name>handler</name></decl></param>,
                <param><decl><type><name>void</name> **</type><name>handler_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>item_baton</name> *</type><name>ib</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ensure_summarize</name><argument_list>(<argument><expr><name>ib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name><name>ib</name>-&gt;<name>summarize</name>-&gt;<name>summarize_kind</name></name> == <name>svn_client_diff_summarize_kind_normal</name></expr>)</condition><then>
    <expr_stmt><expr><name><name>ib</name>-&gt;<name>summarize</name>-&gt;<name>summarize_kind</name></name> = <name>svn_client_diff_summarize_kind_modified</name></expr>;</expr_stmt></then></if>

  <expr_stmt><expr>*<name>handler</name> = <name>svn_delta_noop_window_handler</name></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>handler_baton</name> = <name>NULL</name></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* An editor function.  */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>close_file</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>text_checksum</name></decl></param>,
           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>item_baton</name> *</type><name>fb</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>fb</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>fb</name>-&gt;<name>summarize</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>eb</name>-&gt;<name>summarize_func</name></name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>summarize</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>summarize_func_baton</name></name></expr></argument>,
                               <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* An editor function, implementing both change_file_prop and
 * change_dir_prop.  */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>change_prop</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>entry_baton</name></decl></param>,
            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
            <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>item_baton</name> *</type><name>ib</name> <init>= <expr><name>entry_baton</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><call><name>svn_property_kind</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> == <name>svn_prop_regular_kind</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>ensure_summarize</name><argument_list>(<argument><expr><name>ib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ib</name>-&gt;<name>summarize</name>-&gt;<name>prop_changed</name></name> = <name>TRUE</name></expr>;</expr_stmt>
    }</block></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Create a repository diff summarize editor and baton.  */</comment>
<function><type><name>svn_error_t</name> *</type>
<name>svn_client__get_diff_summarize_editor</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
                                      <param><decl><type><name>svn_client_diff_summarize_func_t</name></type>
                                      <name>summarize_func</name></decl></param>,
                                      <param><decl><type><name>void</name> *</type><name>item_baton</name></decl></param>,
                                      <param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
                                      <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                                      <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
                                      <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
                                      <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
                                      <param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
                                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_delta_editor_t</name> *</type><name>tree_editor</name> <init>= <expr><call><name>svn_delta_default_editor</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>eb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>eb</name>-&gt;<name>target</name></name> = <name>target</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>summarize_func</name></name> = <name>summarize_func</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>summarize_func_baton</name></name> = <name>item_baton</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>ra_session</name></name> = <name>ra_session</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>revision</name></name> = <name>revision</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>open_root</name></name> = <name>open_root</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>delete_entry</name></name> = <name>delete_entry</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>add_directory</name></name> = <name>add_directory</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>open_directory</name></name> = <name>open_directory</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>change_dir_prop</name></name> = <name>change_prop</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>close_directory</name></name> = <name>close_directory</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>add_file</name></name> = <name>add_file</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>open_file</name></name> = <name>open_file</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>apply_textdelta</name></name> = <name>apply_textdelta</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>change_file_prop</name></name> = <name>change_prop</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>close_file</name></name> = <name>close_file</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_delta_get_cancellation_editor</name>
          <argument_list>(<argument><expr><name>cancel_func</name></expr></argument>, <argument><expr><name>cancel_baton</name></expr></argument>, <argument><expr><name>tree_editor</name></expr></argument>, <argument><expr><name>eb</name></expr></argument>, <argument><expr><name>editor</name></expr></argument>, <argument><expr><name>edit_baton</name></expr></argument>,
           <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
