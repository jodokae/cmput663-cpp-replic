<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_client/repos_diff.c"><comment type="block">/*
 * repos_diff.c -- The diff editor for comparing two repository versions
 *
 * ====================================================================
 * Copyright (c) 2000-2006 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<comment type="block">/* This code uses an editor driven by a tree delta between two
 * repository revisions (REV1 and REV2). For each file encountered in
 * the delta the editor constructs two temporary files, one for each
 * revision. This necessitates a separate request for the REV1 version
 * of the file when the delta shows the file being modified or
 * deleted. Files that are added by the delta do not require a
 * separate request, the REV1 version is empty and the delta is
 * sufficient to construct the REV2 version. When both versions of
 * each file have been created the diff callback is invoked to display
 * the difference between the two files.  */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_wc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_props.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"client.h"</cpp:file></cpp:include>

<comment type="block">/* Overall crawler editor baton.  */</comment>
<struct>struct <name>edit_baton</name> <block>{
  <comment type="block">/* TARGET is a working-copy directory which corresponds to the base
     URL open in RA_SESSION below. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl>;</decl_stmt>

  <comment type="block">/* ADM_ACCESS is an access baton that includes the TARGET directory */</comment>
  <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>

  <comment type="block">/* The callback and calback argument that implement the file comparison
     function */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_diff_callbacks2_t</name> *</type><name>diff_callbacks</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>diff_cmd_baton</name></decl>;</decl_stmt>

  <comment type="block">/* DRY_RUN is TRUE if this is a dry-run diff, false otherwise. */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>dry_run</name></decl>;</decl_stmt>

  <comment type="block">/* RA_SESSION is the open session for making requests to the RA layer */</comment>
  <decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl>;</decl_stmt>

  <comment type="block">/* The rev1 from the '-r Rev1:Rev2' command line option */</comment>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl>;</decl_stmt>

  <comment type="block">/* The rev2 from the '-r Rev1:Rev2' option, specifically set by
     set_target_revision(). */</comment>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>target_revision</name></decl>;</decl_stmt>

  <comment type="block">/* The path to a temporary empty file used for add/delete
     differences.  The path is cached here so that it can be reused,
     since all empty files are the same. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>empty_file</name></decl>;</decl_stmt>

  <comment type="block">/* Empty hash used for adds. */</comment>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>empty_hash</name></decl>;</decl_stmt>

  <comment type="block">/* Hash used to check replaced paths. Key is path relative CWD,
   * Value is *kind_action_state_t.
   * All allocations are from edit_baton's pool. */</comment>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>deleted_paths</name></decl>;</decl_stmt>

  <comment type="block">/* If the func is non-null, send notifications of actions. */</comment>
  <decl_stmt><decl><type><name>svn_wc_notify_func2_t</name></type> <name>notify_func</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>notify_baton</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
}</block>;</struct>

<typedef>typedef <type><struct>struct <name>kind_action_state_t</name>
<block>{
  <decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_notify_action_t</name></type> <name>action</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_notify_state_t</name></type> <name>state</name></decl>;</decl_stmt>
}</block></struct></type> <name>kind_action_state_t</name>;</typedef>

<comment type="block">/* Directory level baton.
 */</comment>
<struct>struct <name>dir_baton</name> <block>{
  <comment type="block">/* Gets set if the directory is added rather than replaced/unchanged. */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>added</name></decl>;</decl_stmt>

  <comment type="block">/* The path of the directory within the repository */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>

  <comment type="block">/* The path of the directory in the wc, relative to cwd */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>wcpath</name></decl>;</decl_stmt>

  <comment type="block">/* The baton for the parent directory, or null if this is the root of the
     hierarchy to be compared. */</comment>
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>dir_baton</name></decl>;</decl_stmt>

  <comment type="block">/* The overall crawler editor baton. */</comment>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>edit_baton</name></decl>;</decl_stmt>

  <comment type="block">/* A cache of any property changes (svn_prop_t) received for this dir. */</comment>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>propchanges</name></decl>;</decl_stmt>

  <comment type="block">/* The pristine-property list attached to this directory. */</comment>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>pristine_props</name></decl>;</decl_stmt>

  <comment type="block">/* The pool passed in by add_dir, open_dir, or open_root.
     Also, the pool this dir baton is allocated in. */</comment>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/* File level baton.
 */</comment>
<struct>struct <name>file_baton</name> <block>{
  <comment type="block">/* Gets set if the file is added rather than replaced. */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>added</name></decl>;</decl_stmt>

  <comment type="block">/* The path of the file within the repository */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>

  <comment type="block">/* The path of the file in the wc, relative to cwd */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>wcpath</name></decl>;</decl_stmt>

  <comment type="block">/* The path and APR file handle to the temporary file that contains the
     first repository version.  Also, the pristine-property list of
     this file. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path_start_revision</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_file_t</name> *</type><name>file_start_revision</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>pristine_props</name></decl>;</decl_stmt>

  <comment type="block">/* The path and APR file handle to the temporary file that contains the
     second repository version.  These fields are set when processing
     textdelta and file deletion, and will be NULL if there's no
     textual difference between the two revisions. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path_end_revision</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_file_t</name> *</type><name>file_end_revision</name></decl>;</decl_stmt>

  <comment type="block">/* APPLY_HANDLER/APPLY_BATON represent the delta application baton. */</comment>
  <decl_stmt><decl><type><name>svn_txdelta_window_handler_t</name></type> <name>apply_handler</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>apply_baton</name></decl>;</decl_stmt>

  <comment type="block">/* The overall crawler editor baton. */</comment>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>edit_baton</name></decl>;</decl_stmt>

  <comment type="block">/* A cache of any property changes (svn_prop_t) received for this file. */</comment>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>propchanges</name></decl>;</decl_stmt>

  <comment type="block">/* The pool passed in by add_file or open_file.
     Also, the pool this file_baton is allocated in. */</comment>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
}</block>;</struct>


<comment type="block">/* Create a new directory baton for PATH in POOL.  ADDED is set if
 * this directory is being added rather than replaced. PARENT_BATON is
 * the baton of the parent directory (or NULL if this is the root of
 * the comparison hierarchy). The directory and its parent may or may
 * not exist in the working copy.  EDIT_BATON is the overall crawler
 * editor baton.
 */</comment>
<function><type><specifier>static</specifier> struct <name>dir_baton</name> *</type>
<name>make_dir_baton</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
               <param><decl><type>struct <name>dir_baton</name> *</type><name>parent_baton</name></decl></param>,
               <param><decl><type>struct <name>edit_baton</name> *</type><name>edit_baton</name></decl></param>,
               <param><decl><type><name>svn_boolean_t</name></type> <name>added</name></decl></param>,
               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>dir_baton</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>dir_baton</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>dir_baton</name>-&gt;<name>dir_baton</name></name> = <name>parent_baton</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dir_baton</name>-&gt;<name>edit_baton</name></name> = <name>edit_baton</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dir_baton</name>-&gt;<name>added</name></name> = <name>added</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dir_baton</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dir_baton</name>-&gt;<name>path</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dir_baton</name>-&gt;<name>wcpath</name></name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>edit_baton</name>-&gt;<name>target</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dir_baton</name>-&gt;<name>propchanges</name></name>  = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_prop_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>dir_baton</name></expr>;</return>
}</block></function>

<comment type="block">/* Create a new file baton for PATH in POOL, which is a child of
 * directory PARENT_PATH. ADDED is set if this file is being added
 * rather than replaced.  EDIT_BATON is a pointer to the global edit
 * baton.
 */</comment>
<function><type><specifier>static</specifier> struct <name>file_baton</name> *</type>
<name>make_file_baton</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                <param><decl><type><name>svn_boolean_t</name></type> <name>added</name></decl></param>,
                <param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>file_baton</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>file_baton</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>file_baton</name>-&gt;<name>edit_baton</name></name> = <name>edit_baton</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>file_baton</name>-&gt;<name>added</name></name> = <name>added</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>file_baton</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>file_baton</name>-&gt;<name>path</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>file_baton</name>-&gt;<name>wcpath</name></name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>target</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>file_baton</name>-&gt;<name>propchanges</name></name>  = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_prop_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>file_baton</name></expr>;</return>
}</block></function>


<comment type="block">/* Helper function: return up to two svn:mime-type values buried
 * within a file baton.  Set *MIMETYPE1 to the value within the file's
 * pristine properties, or NULL if not available.  Set *MIMETYPE2 to
 * the value within the "new" file's propchanges, or NULL if not
 * available.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>get_file_mime_types</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>mimetype1</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>mimetype2</name></decl></param>,
                    <param><decl><type>struct <name>file_baton</name> *</type><name>b</name></decl></param>)</parameter_list>
<block>{
  <comment type="block">/* Defaults */</comment>
  <expr_stmt><expr>*<name>mimetype1</name> = <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>mimetype2</name> = <name>NULL</name></expr>;</expr_stmt>

  <if>if <condition>(<expr><name><name>b</name>-&gt;<name>pristine_props</name></name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_string_t</name> *</type><name>pristine_val</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>pristine_val</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>pristine_props</name></name></expr></argument>, <argument><expr><name>SVN_PROP_MIME_TYPE</name></expr></argument>,
                                  <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>SVN_PROP_MIME_TYPE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>pristine_val</name></expr>)</condition><then>
        <expr_stmt><expr>*<name>mimetype1</name> = <name><name>pristine_val</name>-&gt;<name>data</name></name></expr>;</expr_stmt></then></if>
    }</block></then></if>

  <if>if <condition>(<expr><name><name>b</name>-&gt;<name>propchanges</name></name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_prop_t</name> *</type><name>propchange</name></decl>;</decl_stmt>

      <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>b</name>-&gt;<name>propchanges</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
          <expr_stmt><expr><name>propchange</name> = &amp;<call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>propchanges</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_prop_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>propchange</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>SVN_PROP_MIME_TYPE</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
            <block>{
              <if>if <condition>(<expr><name><name>propchange</name>-&gt;<name>value</name></name></expr>)</condition><then>
                <expr_stmt><expr>*<name>mimetype2</name> = <name><name>propchange</name>-&gt;<name>value</name>-&gt;<name>data</name></name></expr>;</expr_stmt></then></if>
              <break>break;</break>
            }</block></then></if>
        }</block></for>
    }</block></then></if>
}</block></function>


<comment type="block">/* Get the repository version of a file. This makes an RA request to
 * retrieve the file contents. A pool cleanup handler is installed to
 * delete this file.
 */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>get_file_from_ra</name><parameter_list>(<param><decl><type>struct <name>file_baton</name> *</type><name>b</name></decl></param>, <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_file_t</name> *</type><name>file</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>fstream</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>temp_dir</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_temp_dir</name><argument_list>(<argument><expr>&amp;<name>temp_dir</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_open_unique_file2</name><argument_list>(<argument><expr>&amp;<name>file</name></expr></argument>, <argument><expr>&amp;(<name><name>b</name>-&gt;<name>path_start_revision</name></name>)</expr></argument>,
                                   <argument><expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name>temp_dir</name></expr></argument>, <argument><expr>"tmp"</expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                   <argument><expr>""</expr></argument>, <argument><expr><name>svn_io_file_del_on_pool_cleanup</name></expr></argument>,
                                   <argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>fstream</name> = <call><name>svn_stream_from_aprfile</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_file</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>edit_baton</name>-&gt;<name>ra_session</name></name></expr></argument>,
                          <argument><expr><name><name>b</name>-&gt;<name>path</name></name></expr></argument>,
                          <argument><expr><name>revision</name></expr></argument>,
                          <argument><expr><name>fstream</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                          <argument><expr>&amp;(<name><name>b</name>-&gt;<name>pristine_props</name></name>)</expr></argument>,
                          <argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_close</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Get the props attached to a directory in the repository at BASE_REVISION. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>get_dirprops_from_ra</name><parameter_list>(<param><decl><type>struct <name>dir_baton</name> *</type><name>b</name></decl></param>, <param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_dir2</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>edit_baton</name>-&gt;<name>ra_session</name></name></expr></argument>,
                          <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;(<name><name>b</name>-&gt;<name>pristine_props</name></name>)</expr></argument>,
                          <argument><expr><name><name>b</name>-&gt;<name>path</name></name></expr></argument>,
                          <argument><expr><name>base_revision</name></expr></argument>,
                          <argument><expr>0</expr></argument>,
                          <argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Create an empty file, the path to the file is returned in
   EMPTY_FILE_PATH.  If ADM_ACCESS is not NULL and a lock is held,
   create the file in the adm tmp/ area, otherwise use a system temp
   directory.

   If FILE is non-NULL, an open file is returned in *FILE. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>create_empty_file</name><parameter_list>(<param><decl><type><name>apr_file_t</name> **</type><name>file</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>empty_file_path</name></decl></param>,
                  <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                  <param><decl><type><name>svn_io_file_del_t</name></type> <name>delete_when</name></decl></param>,
                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>adm_access</name> &amp;&amp; <call><name>svn_wc_adm_locked</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_create_tmp_file2</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>empty_file_path</name></expr></argument>,
                                    <argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><name>delete_when</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>temp_dir</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_temp_dir</name><argument_list>(<argument><expr>&amp;<name>temp_dir</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_open_unique_file2</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>empty_file_path</name></expr></argument>,
                                       <argument><expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name>temp_dir</name></expr></argument>, <argument><expr>"tmp"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
                                       <argument><expr>""</expr></argument>, <argument><expr><name>delete_when</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Return in *PATH_ACCESS the access baton for the directory PATH by
   searching the access baton set of ADM_ACCESS.  If ADM_ACCESS is NULL
   then *PATH_ACCESS will be NULL.  If LENIENT is TRUE then failure to find
   an access baton will not return an error but will set *PATH_ACCESS to
   NULL instead. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>get_path_access</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> **</type><name>path_access</name></decl></param>,
                <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                <param><decl><type><name>svn_boolean_t</name></type> <name>lenient</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>! <name>adm_access</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>path_access</name> = <name>NULL</name></expr>;</expr_stmt></then>
  <else>else
    <block>{
      <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr><name>path_access</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
                                             <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
        <block>{
          <if>if <condition>(<expr>! <name>lenient</name></expr>)</condition><then>
            <return>return <expr><name>err</name></expr>;</return></then></if>
          <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr>*<name>path_access</name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></else></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Like get_path_access except the returned access baton, in
   *PARENT_ACCESS, is for the parent of PATH rather than for PATH
   itself. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>get_parent_access</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> **</type><name>parent_access</name></decl></param>,
                  <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                  <param><decl><type><name>svn_boolean_t</name></type> <name>lenient</name></decl></param>,
                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>! <name>adm_access</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>parent_access</name> = <name>NULL</name></expr>;</expr_stmt></then>  <comment type="block">/* Avoid messing around with paths */</comment>
  <else>else
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>parent_path</name> <init>= <expr><call><name>svn_path_dirname</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_path_access</name><argument_list>(<argument><expr><name>parent_access</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>parent_path</name></expr></argument>,
                              <argument><expr><name>lenient</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Get the empty file associated with the edit baton. This is cached so
 * that it can be reused, all empty files are the same.
 */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>get_empty_file</name><parameter_list>(<param><decl><type>struct <name>edit_baton</name> *</type><name>eb</name></decl></param>,
               <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>empty_file_path</name></decl></param>)</parameter_list>
<block>{
  <comment type="block">/* Create the file if it does not exist */</comment>
  <comment type="block">/* Note that we tried to use /dev/null in r17220, but
     that won't work on Windows: it's impossible to stat NUL */</comment>
  <if>if <condition>(<expr>!<name><name>eb</name>-&gt;<name>empty_file</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>create_empty_file</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;(<name><name>eb</name>-&gt;<name>empty_file</name></name>)</expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>adm_access</name></name></expr></argument>,
                              <argument><expr><name>svn_io_file_del_on_pool_cleanup</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>


  <expr_stmt><expr>*<name>empty_file_path</name> = <name><name>eb</name>-&gt;<name>empty_file</name></name></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* An editor function. The root of the comparison hierarchy */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>set_target_revision</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
                    <param><decl><type><name>svn_revnum_t</name></type> <name>target_revision</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>eb</name>-&gt;<name>target_revision</name></name> = <name>target_revision</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* An editor function. The root of the comparison hierarchy */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>open_root</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
          <param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
          <param><decl><type><name>void</name> **</type><name>root_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>b</name> <init>= <expr><call><name>make_dir_baton</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>eb</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Override the wcpath in our baton. */</comment>
  <expr_stmt><expr><name><name>b</name>-&gt;<name>wcpath</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>target</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_dirprops_from_ra</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>base_revision</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>root_baton</name> = <name>b</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* An editor function.  */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>delete_entry</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
             <param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
             <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>pb</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_notify_state_t</name></type> <name>state</name> <init>= <expr><name>svn_wc_notify_state_inapplicable</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_notify_action_t</name></type> <name>action</name> <init>= <expr><name>svn_wc_notify_skip</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* We need to know if this is a directory or a file */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_check_path</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>ra_session</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>revision</name></name></expr></argument>, <argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_path_access</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>adm_access</name></name></expr></argument>, <argument><expr><name><name>pb</name>-&gt;<name>wcpath</name></name></expr></argument>,
                          <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>(! <name><name>eb</name>-&gt;<name>adm_access</name></name>) || <name>adm_access</name></expr>)</condition><then>
    <block>{
      <switch>switch <condition>(<expr><name>kind</name></expr>)</condition>
        <block>{
        <case>case <expr><name>svn_node_file</name></expr>:
          <block>{
            <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype1</name></decl>, *<decl><type ref="prev"/><name>mimetype2</name></decl>;</decl_stmt>
            <decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>b</name></decl>;</decl_stmt>

            <comment type="block">/* Compare a file being deleted against an empty file */</comment>
            <expr_stmt><expr><name>b</name> = <call><name>make_file_baton</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>eb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_file_from_ra</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>revision</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_empty_file</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>edit_baton</name></name></expr></argument>, <argument><expr>&amp;(<name><name>b</name>-&gt;<name>path_end_revision</name></name>)</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>get_file_mime_types</name><argument_list>(<argument><expr>&amp;<name>mimetype1</name></expr></argument>, <argument><expr>&amp;<name>mimetype2</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>eb</name>-&gt;<name>diff_callbacks</name>-&gt;<name>file_deleted</name></name>
                    <argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr>&amp;<name>state</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>wcpath</name></name></expr></argument>,
                     <argument><expr><name><name>b</name>-&gt;<name>path_start_revision</name></name></expr></argument>,
                     <argument><expr><name><name>b</name>-&gt;<name>path_end_revision</name></name></expr></argument>,
                     <argument><expr><name>mimetype1</name></expr></argument>, <argument><expr><name>mimetype2</name></expr></argument>,
                     <argument><expr><name><name>b</name>-&gt;<name>pristine_props</name></name></expr></argument>,
                     <argument><expr><name><name>b</name>-&gt;<name>edit_baton</name>-&gt;<name>diff_cmd_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break>break;</break>
          }</block>
        </case><case>case <expr><name>svn_node_dir</name></expr>:
          <block>{
            <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>eb</name>-&gt;<name>diff_callbacks</name>-&gt;<name>dir_deleted</name></name>
                    <argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr>&amp;<name>state</name></expr></argument>,
                     <argument><expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>target</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
                     <argument><expr><name><name>eb</name>-&gt;<name>diff_cmd_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          }</block>
        </case><default>default:
          <break>break;</break>
        </default>}</block></switch>

      <if>if <condition>(<expr>(<name>state</name> != <name>svn_wc_notify_state_missing</name>)
          &amp;&amp; (<name>state</name> != <name>svn_wc_notify_state_obstructed</name>)</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>action</name> = <name>svn_wc_notify_update_delete</name></expr>;</expr_stmt>
          <if>if <condition>(<expr><name><name>eb</name>-&gt;<name>dry_run</name></name></expr>)</condition><then>
            <block>{
              <comment type="block">/* Remember what we _would've_ deleted (issue #2584). */</comment>
              <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>wcpath</name> <init>= <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>target</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>pb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><call><name>svn_client__dry_run_deletions</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>diff_cmd_baton</name></name></expr></argument>)</argument_list></call></expr></argument>,
                           <argument><expr><name>wcpath</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>wcpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

              <comment type="block">/* ### TODO: if (kind == svn_node_dir), record all
                 ### children as deleted to avoid collisions from
                 ### subsequent edits. */</comment>
            }</block></then></if>
        }</block></then></if>
    }</block></then></if>

  <if>if <condition>(<expr><name><name>eb</name>-&gt;<name>notify_func</name></name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>deleted_path</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>kind_action_state_t</name> *</type><name>kas</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>kas</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>deleted_path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>target</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>kas</name>-&gt;<name>kind</name></name> = <name>kind</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>kas</name>-&gt;<name>action</name></name> = <name>action</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>kas</name>-&gt;<name>state</name></name> = <name>state</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>deleted_paths</name></name></expr></argument>, <argument><expr><name>deleted_path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>kas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* An editor function.  */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>add_directory</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
              <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl></param>,
              <param><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_revision</name></decl></param>,
              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
              <param><decl><type><name>void</name> **</type><name>child_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>pb</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>b</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_notify_state_t</name></type> <name>state</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_notify_action_t</name></type> <name>action</name></decl>;</decl_stmt>

  <comment type="block">/* ### TODO: support copyfrom? */</comment>

  <expr_stmt><expr><name>b</name> = <call><name>make_dir_baton</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>eb</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>b</name>-&gt;<name>pristine_props</name></name> = <name><name>eb</name>-&gt;<name>empty_hash</name></name></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>child_baton</name> = <name>b</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_path_access</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>adm_access</name></name></expr></argument>, <argument><expr><name><name>pb</name>-&gt;<name>wcpath</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
                          <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>eb</name>-&gt;<name>diff_callbacks</name>-&gt;<name>dir_added</name></name>
          <argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr>&amp;<name>state</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>wcpath</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>target_revision</name></name></expr></argument>,
           <argument><expr><name><name>eb</name>-&gt;<name>diff_cmd_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>(<name>state</name> == <name>svn_wc_notify_state_missing</name>)
      || (<name>state</name> == <name>svn_wc_notify_state_obstructed</name>)</expr>)</condition><then>
    <expr_stmt><expr><name>action</name> = <name>svn_wc_notify_skip</name></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><name>action</name> = <name>svn_wc_notify_update_add</name></expr>;</expr_stmt></else></if>

  <if>if <condition>(<expr><name><name>eb</name>-&gt;<name>notify_func</name></name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_wc_notify_t</name> *</type><name>notify</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>is_replace</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>kind_action_state_t</name> *</type><name>kas</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>deleted_paths</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>wcpath</name></name></expr></argument>,
                                              <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>kas</name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>svn_wc_notify_action_t</name></type> <name>new_action</name></decl>;</decl_stmt>
          <if>if <condition>(<expr><name><name>kas</name>-&gt;<name>action</name></name> == <name>svn_wc_notify_update_delete</name>
              &amp;&amp; <name>action</name> == <name>svn_wc_notify_update_add</name></expr>)</condition><then>
            <block>{
              <expr_stmt><expr><name>is_replace</name> = <name>TRUE</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>new_action</name> = <name>svn_wc_notify_update_replace</name></expr>;</expr_stmt>
            }</block></then>
          <else>else
            <expr_stmt><expr><name>new_action</name> = <name><name>kas</name>-&gt;<name>action</name></name></expr>;</expr_stmt></else></if>
          <expr_stmt><expr><name>notify</name>  = <call><name>svn_wc_create_notify</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>wcpath</name></name></expr></argument>, <argument><expr><name>new_action</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>notify</name>-&gt;<name>kind</name></name> = <name><name>kas</name>-&gt;<name>kind</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>notify</name>-&gt;<name>content_state</name></name> = <name><name>notify</name>-&gt;<name>prop_state</name></name> = <name><name>kas</name>-&gt;<name>state</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>notify</name>-&gt;<name>lock_state</name></name> = <name>svn_wc_notify_lock_state_inapplicable</name></expr>;</expr_stmt>
          <expr_stmt><expr><call>(*<name><name>eb</name>-&gt;<name>notify_func</name></name>)<argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>notify_baton</name></name></expr></argument>, <argument><expr><name>notify</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>deleted_paths</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>wcpath</name></name></expr></argument>,
                       <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

      <if>if <condition>(<expr>!<name>is_replace</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>notify</name> = <call><name>svn_wc_create_notify</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>wcpath</name></name></expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>notify</name>-&gt;<name>kind</name></name> = <name>svn_node_dir</name></expr>;</expr_stmt>
          <expr_stmt><expr><call>(*<name><name>eb</name>-&gt;<name>notify_func</name></name>)<argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>notify_baton</name></name></expr></argument>, <argument><expr><name>notify</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* An editor function.  */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>open_directory</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
               <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
               <param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
               <param><decl><type><name>void</name> **</type><name>child_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>b</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>b</name> = <call><name>make_dir_baton</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>pb</name>-&gt;<name>edit_baton</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>child_baton</name> = <name>b</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_dirprops_from_ra</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>base_revision</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* An editor function.  */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>add_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
         <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl></param>,
         <param><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_revision</name></decl></param>,
         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
         <param><decl><type><name>void</name> **</type><name>file_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>b</name></decl>;</decl_stmt>

  <comment type="block">/* ### TODO: support copyfrom? */</comment>

  <expr_stmt><expr><name>b</name> = <call><name>make_file_baton</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name><name>pb</name>-&gt;<name>edit_baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>file_baton</name> = <name>b</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_empty_file</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>edit_baton</name></name></expr></argument>, <argument><expr>&amp;(<name><name>b</name>-&gt;<name>path_start_revision</name></name>)</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>b</name>-&gt;<name>pristine_props</name></name> = <name><name>pb</name>-&gt;<name>edit_baton</name>-&gt;<name>empty_hash</name></name></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* An editor function.  */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>open_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
          <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
          <param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
          <param><decl><type><name>void</name> **</type><name>file_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>b</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>b</name> = <call><name>make_file_baton</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>pb</name>-&gt;<name>edit_baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>file_baton</name> = <name>b</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_file_from_ra</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>base_revision</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Do the work of applying the text delta.  */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>window_handler</name><parameter_list>(<param><decl><type><name>svn_txdelta_window_t</name> *</type><name>window</name></decl></param>,
               <param><decl><type><name>void</name> *</type><name>window_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>b</name> <init>= <expr><name>window_baton</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>b</name>-&gt;<name>apply_handler</name></name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>apply_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<name>window</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_close</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>file_start_revision</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_close</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>file_end_revision</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* An editor function.  */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>apply_textdelta</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_checksum</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                <param><decl><type><name>svn_txdelta_window_handler_t</name> *</type><name>handler</name></decl></param>,
                <param><decl><type><name>void</name> **</type><name>handler_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>b</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>

  <comment type="block">/* Open the file to be used as the base for second revision */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_open</name><argument_list>(<argument><expr>&amp;(<name><name>b</name>-&gt;<name>file_start_revision</name></name>)</expr></argument>,
                           <argument><expr><name><name>b</name>-&gt;<name>path_start_revision</name></name></expr></argument>,
                           <argument><expr><name>APR_READ</name></expr></argument>, <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Open the file that will become the second revision after applying the
     text delta, it starts empty */</comment>
  <if>if <condition>(<expr><name><name>b</name>-&gt;<name>edit_baton</name>-&gt;<name>adm_access</name></name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>err</name> = <call><name>svn_wc_adm_probe_retrieve</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>edit_baton</name>-&gt;<name>adm_access</name></name></expr></argument>,
                                      <argument><expr><name><name>b</name>-&gt;<name>wcpath</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>adm_access</name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then>
  <else>else
    <expr_stmt><expr><name>adm_access</name> = <name>NULL</name></expr>;</expr_stmt></else></if>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>create_empty_file</name><argument_list>(<argument><expr>&amp;(<name><name>b</name>-&gt;<name>file_end_revision</name></name>)</expr></argument>,
                            <argument><expr>&amp;(<name><name>b</name>-&gt;<name>path_end_revision</name></name>)</expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
                            <argument><expr><name>svn_io_file_del_on_pool_cleanup</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>svn_txdelta_apply</name><argument_list>(<argument><expr><call><name>svn_stream_from_aprfile</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>file_start_revision</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name>svn_stream_from_aprfile</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>file_end_revision</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><name>NULL</name></expr></argument>,
                    <argument><expr><name><name>b</name>-&gt;<name>path</name></name></expr></argument>,
                    <argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>,
                    <argument><expr>&amp;(<name><name>b</name>-&gt;<name>apply_handler</name></name>)</expr></argument>, <argument><expr>&amp;(<name><name>b</name>-&gt;<name>apply_baton</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>handler</name> = <name>window_handler</name></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>handler_baton</name> = <name>file_baton</name></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* An editor function.  When the file is closed we have a temporary
 * file containing a pristine version of the repository file. This can
 * be compared against the working copy.
 *
 * ### Ignore TEXT_CHECKSUM for now.  Someday we can use it to verify
 * ### the integrity of the file being diffed.  Done efficiently, this
 * ### would probably involve calculating the checksum as the data is
 * ### received, storing the final checksum in the file_baton, and
 * ### comparing against it here.
 */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>close_file</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>text_checksum</name></decl></param>,
           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>b</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>b</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_notify_action_t</name></type> <name>action</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_notify_state_t</name></type>
    <name>content_state</name> <init>= <expr><name>svn_wc_notify_state_unknown</name></expr></init>,
    <name>prop_state</name> <init>= <expr><name>svn_wc_notify_state_unknown</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>err</name> = <call><name>get_parent_access</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>adm_access</name></name></expr></argument>,
                          <argument><expr><name><name>b</name>-&gt;<name>wcpath</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>dry_run</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>err</name> &amp;&amp; <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_WC_NOT_LOCKED</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* ### maybe try to stat the local b-&gt;wcpath? */</comment>
      <comment type="block">/* If the file path doesn't exist, then send a 'skipped' notification. */</comment>
      <if>if <condition>(<expr><name><name>eb</name>-&gt;<name>notify_func</name></name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>svn_wc_notify_t</name> *</type><name>notify</name> <init>= <expr><call><name>svn_wc_create_notify</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>wcpath</name></name></expr></argument>,
                                                         <argument><expr><name>svn_wc_notify_skip</name></expr></argument>,
                                                         <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>notify</name>-&gt;<name>kind</name></name> = <name>svn_node_file</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>notify</name>-&gt;<name>content_state</name></name> = <name>svn_wc_notify_state_missing</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>notify</name>-&gt;<name>prop_state</name></name> = <name>prop_state</name></expr>;</expr_stmt>
          <expr_stmt><expr><call>(*<name><name>eb</name>-&gt;<name>notify_func</name></name>)<argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>notify_baton</name></name></expr></argument>, <argument><expr><name>notify</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

      <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
    <return>return <expr><name>err</name></expr>;</return></then></if></else></if>

  <if>if <condition>(<expr><name><name>b</name>-&gt;<name>path_end_revision</name></name> || <name><name>b</name>-&gt;<name>propchanges</name>-&gt;<name>nelts</name></name> &gt; 0</expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype1</name></decl>, *<decl><type ref="prev"/><name>mimetype2</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>get_file_mime_types</name><argument_list>(<argument><expr>&amp;<name>mimetype1</name></expr></argument>, <argument><expr>&amp;<name>mimetype2</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name><name>b</name>-&gt;<name>added</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>eb</name>-&gt;<name>diff_callbacks</name>-&gt;<name>file_added</name></name>
                <argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr>&amp;<name>content_state</name></expr></argument>, <argument><expr>&amp;<name>prop_state</name></expr></argument>,
                 <argument><expr><name><name>b</name>-&gt;<name>wcpath</name></name></expr></argument>,
                 <argument><expr><name><name>b</name>-&gt;<name>path_end_revision</name></name> ? <name><name>b</name>-&gt;<name>path_start_revision</name></name> : <name>NULL</name></expr></argument>,
                 <argument><expr><name><name>b</name>-&gt;<name>path_end_revision</name></name></expr></argument>,
                 <argument><expr>0</expr></argument>,
                 <argument><expr><name><name>b</name>-&gt;<name>edit_baton</name>-&gt;<name>target_revision</name></name></expr></argument>,
                 <argument><expr><name>mimetype1</name></expr></argument>, <argument><expr><name>mimetype2</name></expr></argument>,
                 <argument><expr><name><name>b</name>-&gt;<name>propchanges</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>pristine_props</name></name></expr></argument>,
                 <argument><expr><name><name>b</name>-&gt;<name>edit_baton</name>-&gt;<name>diff_cmd_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
      <else>else
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>eb</name>-&gt;<name>diff_callbacks</name>-&gt;<name>file_changed</name></name>
                <argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr>&amp;<name>content_state</name></expr></argument>, <argument><expr>&amp;<name>prop_state</name></expr></argument>,
                 <argument><expr><name><name>b</name>-&gt;<name>wcpath</name></name></expr></argument>,
                 <argument><expr><name><name>b</name>-&gt;<name>path_end_revision</name></name> ? <name><name>b</name>-&gt;<name>path_start_revision</name></name> : <name>NULL</name></expr></argument>,
                 <argument><expr><name><name>b</name>-&gt;<name>path_end_revision</name></name></expr></argument>,
                 <argument><expr><name><name>b</name>-&gt;<name>edit_baton</name>-&gt;<name>revision</name></name></expr></argument>,
                 <argument><expr><name><name>b</name>-&gt;<name>edit_baton</name>-&gt;<name>target_revision</name></name></expr></argument>,
                 <argument><expr><name>mimetype1</name></expr></argument>, <argument><expr><name>mimetype2</name></expr></argument>,
                 <argument><expr><name><name>b</name>-&gt;<name>propchanges</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>pristine_props</name></name></expr></argument>,
                 <argument><expr><name><name>b</name>-&gt;<name>edit_baton</name>-&gt;<name>diff_cmd_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    }</block></then></if>


  <if>if <condition>(<expr>(<name>content_state</name> == <name>svn_wc_notify_state_missing</name>)
      || (<name>content_state</name> == <name>svn_wc_notify_state_obstructed</name>)</expr>)</condition><then>
    <expr_stmt><expr><name>action</name> = <name>svn_wc_notify_skip</name></expr>;</expr_stmt></then>
  <else>else <if>if <condition>(<expr><name><name>b</name>-&gt;<name>added</name></name></expr>)</condition><then>
    <expr_stmt><expr><name>action</name> = <name>svn_wc_notify_update_add</name></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><name>action</name> = <name>svn_wc_notify_update_update</name></expr>;</expr_stmt></else></if></else></if>

  <if>if <condition>(<expr><name><name>eb</name>-&gt;<name>notify_func</name></name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_wc_notify_t</name> *</type><name>notify</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>is_replace</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>kind_action_state_t</name> *</type><name>kas</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>deleted_paths</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>wcpath</name></name></expr></argument>,
                                              <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>kas</name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>svn_wc_notify_action_t</name></type> <name>new_action</name></decl>;</decl_stmt>
          <if>if <condition>(<expr><name><name>kas</name>-&gt;<name>action</name></name> == <name>svn_wc_notify_update_delete</name>
              &amp;&amp; <name>action</name> == <name>svn_wc_notify_update_add</name></expr>)</condition><then>
            <block>{
              <expr_stmt><expr><name>is_replace</name> = <name>TRUE</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>new_action</name> = <name>svn_wc_notify_update_replace</name></expr>;</expr_stmt>
            }</block></then>
          <else>else
            <expr_stmt><expr><name>new_action</name> = <name><name>kas</name>-&gt;<name>action</name></name></expr>;</expr_stmt></else></if>
          <expr_stmt><expr><name>notify</name>  = <call><name>svn_wc_create_notify</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>wcpath</name></name></expr></argument>, <argument><expr><name>new_action</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>notify</name>-&gt;<name>kind</name></name> = <name><name>kas</name>-&gt;<name>kind</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>notify</name>-&gt;<name>content_state</name></name> = <name><name>notify</name>-&gt;<name>prop_state</name></name> = <name><name>kas</name>-&gt;<name>state</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>notify</name>-&gt;<name>lock_state</name></name> = <name>svn_wc_notify_lock_state_inapplicable</name></expr>;</expr_stmt>
          <expr_stmt><expr><call>(*<name><name>eb</name>-&gt;<name>notify_func</name></name>)<argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>notify_baton</name></name></expr></argument>, <argument><expr><name>notify</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>deleted_paths</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>wcpath</name></name></expr></argument>,
                       <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

      <if>if <condition>(<expr>!<name>is_replace</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>notify</name> = <call><name>svn_wc_create_notify</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>wcpath</name></name></expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>notify</name>-&gt;<name>kind</name></name> = <name>svn_node_file</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>notify</name>-&gt;<name>content_state</name></name> = <name>content_state</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>notify</name>-&gt;<name>prop_state</name></name> = <name>prop_state</name></expr>;</expr_stmt>
          <expr_stmt><expr><call>(*<name><name>eb</name>-&gt;<name>notify_func</name></name>)<argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>notify_baton</name></name></expr></argument>, <argument><expr><name>notify</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* An editor function.  */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>close_directory</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>dir_baton</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>b</name> <init>= <expr><name>dir_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>b</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_notify_state_t</name></type> <name>prop_state</name> <init>= <expr><name>svn_wc_notify_state_unknown</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>eb</name>-&gt;<name>dry_run</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name>svn_hash__clear</name><argument_list>(<argument><expr><call><name>svn_client__dry_run_deletions</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>diff_cmd_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr><name><name>b</name>-&gt;<name>propchanges</name>-&gt;<name>nelts</name></name> &gt; 0</expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>err</name> = <call><name>get_path_access</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>adm_access</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>wcpath</name></name></expr></argument>,
                            <argument><expr><name><name>eb</name>-&gt;<name>dry_run</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>err</name> &amp;&amp; <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_WC_NOT_LOCKED</name></expr>)</condition><then>
        <block>{
          <comment type="block">/* ### maybe try to stat the local b-&gt;wcpath? */</comment>
          <comment type="block">/* If the path doesn't exist, then send a 'skipped' notification. */</comment>
          <if>if <condition>(<expr><name><name>eb</name>-&gt;<name>notify_func</name></name></expr>)</condition><then>
            <block>{
              <decl_stmt><decl><type><name>svn_wc_notify_t</name> *</type><name>notify</name>
                <init>= <expr><call><name>svn_wc_create_notify</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>wcpath</name></name></expr></argument>, <argument><expr><name>svn_wc_notify_skip</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <expr_stmt><expr><name><name>notify</name>-&gt;<name>kind</name></name> = <name>svn_node_dir</name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>notify</name>-&gt;<name>content_state</name></name> = <name><name>notify</name>-&gt;<name>prop_state</name></name>
                = <name>svn_wc_notify_state_missing</name></expr>;</expr_stmt>
              <expr_stmt><expr><call>(*<name><name>eb</name>-&gt;<name>notify_func</name></name>)<argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>notify_baton</name></name></expr></argument>, <argument><expr><name>notify</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
          <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
        }</block></then>
      <else>else <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
        <return>return <expr><name>err</name></expr>;</return></then></if></else></if>

      <comment type="block">/* Don't do the props_changed stuff if this is a dry_run and we don't
         have an access baton, since in that case the directory will already
         have been recognised as added, in which case they cannot conflict. */</comment>
      <if>if <condition>(<expr>! <name><name>eb</name>-&gt;<name>dry_run</name></name> || <name>adm_access</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>eb</name>-&gt;<name>diff_callbacks</name>-&gt;<name>dir_props_changed</name></name>
                <argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr>&amp;<name>prop_state</name></expr></argument>,
                 <argument><expr><name><name>b</name>-&gt;<name>wcpath</name></name></expr></argument>,
                 <argument><expr><name><name>b</name>-&gt;<name>propchanges</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>pristine_props</name></name></expr></argument>,
                 <argument><expr><name><name>b</name>-&gt;<name>edit_baton</name>-&gt;<name>diff_cmd_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></then></if>

  <comment type="block">/* ### Don't notify added directories as they triggered notification
     in add_directory.  Does this mean that directory notification
     isn't getting all the information? */</comment>
  <if>if <condition>(<expr>!<name><name>b</name>-&gt;<name>added</name></name> &amp;&amp; <name><name>eb</name>-&gt;<name>notify_func</name></name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_wc_notify_t</name> *</type><name>notify</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>

      <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>deleted_paths</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition>
           <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
        <block>{
          <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>deleted_path</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>kind_action_state_t</name> *</type><name>kas</name></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>deleted_path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>(<name>void</name> *)&amp;<name>kas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>notify</name>  = <call><name>svn_wc_create_notify</name><argument_list>(<argument><expr><name>deleted_path</name></expr></argument>, <argument><expr><name><name>kas</name>-&gt;<name>action</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>notify</name>-&gt;<name>kind</name></name> = <name><name>kas</name>-&gt;<name>kind</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>notify</name>-&gt;<name>content_state</name></name> = <name><name>notify</name>-&gt;<name>prop_state</name></name> = <name><name>kas</name>-&gt;<name>state</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>notify</name>-&gt;<name>lock_state</name></name> = <name>svn_wc_notify_lock_state_inapplicable</name></expr>;</expr_stmt>
          <expr_stmt><expr><call>(*<name><name>eb</name>-&gt;<name>notify_func</name></name>)<argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>notify_baton</name></name></expr></argument>, <argument><expr><name>notify</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>deleted_paths</name></name></expr></argument>, <argument><expr><name>deleted_path</name></expr></argument>,
                       <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

      <expr_stmt><expr><name>notify</name> = <call><name>svn_wc_create_notify</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>wcpath</name></name></expr></argument>,
                                    <argument><expr><name>svn_wc_notify_update_update</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>notify</name>-&gt;<name>kind</name></name> = <name>svn_node_dir</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>notify</name>-&gt;<name>content_state</name></name> = <name>svn_wc_notify_state_inapplicable</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>notify</name>-&gt;<name>prop_state</name></name> = <name>prop_state</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>notify</name>-&gt;<name>lock_state</name></name> = <name>svn_wc_notify_lock_state_inapplicable</name></expr>;</expr_stmt>
      <expr_stmt><expr><call>(*<name><name>eb</name>-&gt;<name>notify_func</name></name>)<argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>notify_baton</name></name></expr></argument>, <argument><expr><name>notify</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* An editor function.  */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>change_file_prop</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>b</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_prop_t</name> *</type><name>propchange</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>propchange</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>propchanges</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>propchange</name>-&gt;<name>name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>propchange</name>-&gt;<name>value</name></name> = <name>value</name> ? <call><name>svn_string_dup</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* An editor function.  */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>change_dir_prop</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>dir_baton</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>db</name> <init>= <expr><name>dir_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_prop_t</name> *</type><name>propchange</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>propchange</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>propchanges</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>propchange</name>-&gt;<name>name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>propchange</name>-&gt;<name>value</name></name> = <name>value</name> ? <call><name>svn_string_dup</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* An editor function.  */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>close_edit</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* An editor function.  */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>absent_directory</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                 <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>pb</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>eb</name>-&gt;<name>notify_func</name></name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_wc_notify_t</name> *</type><name>notify</name>
        <init>= <expr><call><name>svn_wc_create_notify</name><argument_list>(<argument><expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>pb</name>-&gt;<name>wcpath</name></name></expr></argument>,
                                             <argument><expr><call><name>svn_path_basename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
                                             <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><name>svn_wc_notify_skip</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>notify</name>-&gt;<name>kind</name></name> = <name>svn_node_dir</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>notify</name>-&gt;<name>content_state</name></name> = <name><name>notify</name>-&gt;<name>prop_state</name></name>
        = <name>svn_wc_notify_state_missing</name></expr>;</expr_stmt>
      <expr_stmt><expr><call>(*<name><name>eb</name>-&gt;<name>notify_func</name></name>)<argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>notify_baton</name></name></expr></argument>, <argument><expr><name>notify</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* An editor function.  */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>absent_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
            <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>pb</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>eb</name>-&gt;<name>notify_func</name></name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_wc_notify_t</name> *</type><name>notify</name>
        <init>= <expr><call><name>svn_wc_create_notify</name><argument_list>(<argument><expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>pb</name>-&gt;<name>wcpath</name></name></expr></argument>,
                                             <argument><expr><call><name>svn_path_basename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
                                             <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><name>svn_wc_notify_skip</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>notify</name>-&gt;<name>kind</name></name> = <name>svn_node_file</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>notify</name>-&gt;<name>content_state</name></name> = <name><name>notify</name>-&gt;<name>prop_state</name></name>
        = <name>svn_wc_notify_state_missing</name></expr>;</expr_stmt>
      <expr_stmt><expr><call>(*<name><name>eb</name>-&gt;<name>notify_func</name></name>)<argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>notify_baton</name></name></expr></argument>, <argument><expr><name>notify</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Create a repository diff editor and baton.  */</comment>
<function><type><name>svn_error_t</name> *</type>
<name>svn_client__get_diff_editor</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
                            <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>svn_wc_diff_callbacks2_t</name> *</type><name>diff_callbacks</name></decl></param>,
                            <param><decl><type><name>void</name> *</type><name>diff_cmd_baton</name></decl></param>,
                            <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                            <param><decl><type><name>svn_boolean_t</name></type> <name>dry_run</name></decl></param>,
                            <param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
                            <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                            <param><decl><type><name>svn_wc_notify_func2_t</name></type> <name>notify_func</name></decl></param>,
                            <param><decl><type><name>void</name> *</type><name>notify_baton</name></decl></param>,
                            <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
                            <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
                            <param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_delta_editor_t</name> *</type><name>tree_editor</name> <init>= <expr><call><name>svn_delta_default_editor</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>eb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>eb</name>-&gt;<name>target</name></name> = <name>target</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>adm_access</name></name> = <name>adm_access</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>diff_callbacks</name></name> = <name>diff_callbacks</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>diff_cmd_baton</name></name> = <name>diff_cmd_baton</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>dry_run</name></name> = <name>dry_run</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>ra_session</name></name> = <name>ra_session</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>revision</name></name> = <name>revision</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>empty_file</name></name> = <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>empty_hash</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>deleted_paths</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>pool</name></name> = <name>subpool</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>notify_func</name></name> = <name>notify_func</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>notify_baton</name></name> = <name>notify_baton</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>set_target_revision</name></name> = <name>set_target_revision</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>open_root</name></name> = <name>open_root</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>delete_entry</name></name> = <name>delete_entry</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>add_directory</name></name> = <name>add_directory</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>open_directory</name></name> = <name>open_directory</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>add_file</name></name> = <name>add_file</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>open_file</name></name> = <name>open_file</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>apply_textdelta</name></name> = <name>apply_textdelta</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>close_file</name></name> = <name>close_file</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>close_directory</name></name> = <name>close_directory</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>change_file_prop</name></name> = <name>change_file_prop</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>change_dir_prop</name></name> = <name>change_dir_prop</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>close_edit</name></name> = <name>close_edit</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>absent_directory</name></name> = <name>absent_directory</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>absent_file</name></name> = <name>absent_file</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_delta_get_cancellation_editor</name><argument_list>(<argument><expr><name>cancel_func</name></expr></argument>,
                                            <argument><expr><name>cancel_baton</name></expr></argument>,
                                            <argument><expr><name>tree_editor</name></expr></argument>,
                                            <argument><expr><name>eb</name></expr></argument>,
                                            <argument><expr><name>editor</name></expr></argument>,
                                            <argument><expr><name>edit_baton</name></expr></argument>,
                                            <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* We don't destroy subpool, as it's managed by the edit baton. */</comment>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
