<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_client/copy.c"><comment type="block">/*
 * copy.c:  copy/move wrappers around wc 'copy' functionality.
 *
 * ====================================================================
 * Copyright (c) 2000-2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<comment type="block">/* ==================================================================== */</comment>


<escape char="0xc"/>
<comment type="block">/*** Includes. ***/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error_codes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_props.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_mergeinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mergeinfo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_wc_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_mergeinfo_private.h"</cpp:file></cpp:include>


<comment type="block">/* 
 * OUR BASIC APPROACH TO COPIES
 * ============================
 *
 * for each source/destination pair
 *   if (not exist src_path)
 *     return ERR_BAD_SRC error
 *
 *   if (exist dst_path)
 *     return ERR_OBSTRUCTION error
 *   else
 *     copy src_path into parent_of_dst_path as basename (dst_path)
 *
 *   if (this is a move)
 *     delete src_path
 */</comment>


<escape char="0xc"/>
<comment type="block">/*** Code. ***/</comment>

<comment type="block">/* Obtain the implied mergeinfo and the existing mergeinfo of the
   source path, combine them and return the result in
   *TARGET_MERGEINFO.  ADM_ACCESS may be NULL, if SRC_PATH_OR_URL is an
   URL.  If NO_REPOS_ACCESS is set, this function is disallowed from
   consulting the repository about anything.  RA_SESSION may be NULL but
   only if NO_REPOS_ACCESS is true. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>calculate_target_mergeinfo</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
                           <param><decl><type><name>apr_hash_t</name> **</type><name>target_mergeinfo</name></decl></param>,
                           <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_path_or_url</name></decl></param>,
                           <param><decl><type><name>svn_revnum_t</name></type> <name>src_revnum</name></decl></param>,
                           <param><decl><type><name>svn_boolean_t</name></type> <name>no_repos_access</name></decl></param>,
                           <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>locally_added</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_url</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>src_mergeinfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* If we have a schedule-add WC path (which was not copied from
     elsewhere), it doesn't have any repository mergeinfo, so don't
     bother checking. */</comment>
  <if>if <condition>(<expr><name>adm_access</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_versioned</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name>src_path_or_url</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
                                      <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>schedule</name></name> == <name>svn_wc_schedule_add</name> &amp;&amp; (! <name><name>entry</name>-&gt;<name>copied</name></name>)</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>locally_added</name> = <name>TRUE</name></expr>;</expr_stmt>
        }</block></then>
      <else>else
        <block>{
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__entry_location</name><argument_list>(<argument><expr>&amp;<name>src_url</name></expr></argument>, <argument><expr>&amp;<name>src_revnum</name></expr></argument>,
                                             <argument><expr><name>src_path_or_url</name></expr></argument>,
                                             <argument><expr><name>svn_opt_revision_working</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>,
                                             <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then>
  <else>else
    <block>{
      <expr_stmt><expr><name>src_url</name> = <name>src_path_or_url</name></expr>;</expr_stmt>
    }</block></else></if>

  <if>if <condition>(<expr>! <name>locally_added</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mergeinfo_path</name></decl>;</decl_stmt>

      <if>if <condition>(<expr>! <name>no_repos_access</name></expr>)</condition><then>
        <block>{
          <comment type="block">/* Fetch any existing (explicit) mergeinfo. */</comment>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__path_relative_to_root</name><argument_list>(<argument><expr>&amp;<name>mergeinfo_path</name></expr></argument>, <argument><expr><name>src_url</name></expr></argument>,
                                                    <argument><expr><name>entry</name> ? <name><name>entry</name>-&gt;<name>repos</name></name> : <name>NULL</name></expr></argument>, 
                                                    <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>ra_session</name></expr></argument>,
                                                    <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_repos_mergeinfo</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>&amp;<name>src_mergeinfo</name></expr></argument>,
                                                  <argument><expr><name>mergeinfo_path</name></expr></argument>, <argument><expr><name>src_revnum</name></expr></argument>,
                                                  <argument><expr><name>svn_mergeinfo_inherited</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
                                                  <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else
        <block>{
          <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>inherited</name></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_wc_mergeinfo</name><argument_list>(<argument><expr>&amp;<name>src_mergeinfo</name></expr></argument>, <argument><expr>&amp;<name>inherited</name></expr></argument>,
                                               <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>svn_mergeinfo_inherited</name></expr></argument>,
                                               <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>src_path_or_url</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                               <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then></if>

  <expr_stmt><expr>*<name>target_mergeinfo</name> = <name>src_mergeinfo</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Extend the mergeinfo for the single WC path TARGET_WCPATH, adding
   MERGEINFO to any mergeinfo pre-existing in the WC. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>extend_wc_mergeinfo</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target_wcpath</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl></param>,
                    <param><decl><type><name>apr_hash_t</name> *</type><name>mergeinfo</name></decl></param>, <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                    <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>wc_mergeinfo</name></decl>;</decl_stmt>

  <comment type="block">/* Get a fresh copy of the pre-existing state of the WC's mergeinfo
     updating it. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__parse_mergeinfo</name><argument_list>(<argument><expr>&amp;<name>wc_mergeinfo</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>target_wcpath</name></expr></argument>,
                                      <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Combine the provided mergeinfo with any mergeinfo from the WC. */</comment>
  <if>if <condition>(<expr><name>wc_mergeinfo</name> &amp;&amp; <name>mergeinfo</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_mergeinfo_merge</name><argument_list>(<argument><expr><name>wc_mergeinfo</name></expr></argument>, <argument><expr><name>mergeinfo</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else <if>if <condition>(<expr>! <name>wc_mergeinfo</name></expr>)</condition><then>
    <expr_stmt><expr><name>wc_mergeinfo</name> = <name>mergeinfo</name></expr>;</expr_stmt></then></if></else></if>

  <return>return <expr><call><name>svn_client__record_wc_mergeinfo</name><argument_list>(<argument><expr><name>target_wcpath</name></expr></argument>, <argument><expr><name>wc_mergeinfo</name></expr></argument>,
                                         <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* Propagate implied and explicit mergeinfo for WC-local copy/move
   operations.  Otherwise, either propagate PAIR-&gt;dst's explicit (only)
   mergeinfo, or set empty mergeinfo on PAIR-&gt;dst.  Use POOL for
   temporary allocations. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>propagate_mergeinfo_within_wc</name><parameter_list>(<param><decl><type><name>svn_client__copy_pair_t</name> *</type><name>pair</name></decl></param>,
                              <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>src_access</name></decl></param>,
                              <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>dst_access</name></decl></param>,
                              <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>mergeinfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_versioned</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name><name>pair</name>-&gt;<name>src</name></name></expr></argument>, <argument><expr><name>src_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Don't attempt to figure out implied mergeinfo for a locally
     added/replaced PAIR-&gt;src without histroy (if its deleted we
     should never even get this far). */</comment>
  <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>schedule</name></name> == <name>svn_wc_schedule_normal</name>
      || (<name><name>entry</name>-&gt;<name>schedule</name></name> == <name>svn_wc_schedule_add</name> &amp;&amp; <name><name>entry</name>-&gt;<name>copied</name></name>)</expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name><name>pair</name>-&gt;<name>src_revnum</name></name> = <name><name>entry</name>-&gt;<name>revision</name></name></expr>;</expr_stmt>
      
      <comment type="block">/* ASSUMPTION: Non-numeric operative and peg revisions --
         other than working or unspecified -- won't be encountered
         here.  For those cases, WC paths will have already been
         transformed into repository URLs (as done towards the end
         of the setup_copy() routine), and be handled by a
         different code path. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>calculate_target_mergeinfo</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>mergeinfo</name></expr></argument>, 
                                         <argument><expr><name>src_access</name></expr></argument>, <argument><expr><name><name>pair</name>-&gt;<name>src</name></name></expr></argument>, 
                                         <argument><expr><name><name>pair</name>-&gt;<name>src_revnum</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, 
                                         <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* NULL mergeinfo could be due to there being no mergeinfo.  But
         it could also be due to us not being able to query the server
         about mergeinfo on some parent directory of ours.  We need to
         turn "no mergeinfo" into "empty mergeinfo", just in case. */</comment>
      <if>if <condition>(<expr>! <name>mergeinfo</name></expr>)</condition><then>
        <expr_stmt><expr><name>mergeinfo</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <comment type="block">/* Because any local mergeinfo from the copy source will have
         already been propagated to the destination, we can avoid
         looking at WC-local mergeinfo for the source. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_versioned</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name><name>pair</name>-&gt;<name>dst</name></name></expr></argument>, <argument><expr><name>dst_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                                      <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <return>return <expr><call><name>extend_wc_mergeinfo</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>dst</name></name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>mergeinfo</name></expr></argument>, <argument><expr><name>dst_access</name></expr></argument>,
                                 <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

  <comment type="block">/* If the source had no explicit mergeinfo, set empty explicit
     mergeinfo for PAIR-&gt;dst, as it almost certainly won't be correct
     for that path to inherit the mergeinfo of its parent. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__parse_mergeinfo</name><argument_list>(<argument><expr>&amp;<name>mergeinfo</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>pair</name>-&gt;<name>src</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                                      <argument><expr><name>src_access</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>mergeinfo</name> == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>mergeinfo</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name>svn_client__record_wc_mergeinfo</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>dst</name></name></expr></argument>, <argument><expr><name>mergeinfo</name></expr></argument>, <argument><expr><name>dst_access</name></expr></argument>,
                                             <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then>
  <else>else
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></else></if>
}</block></function>

<comment type="block">/* Find the longest common ancestor for all the SRCs and DSTs in COPY_PAIRS.
   If SRC_ANCESTOR or DST_ANCESTOR is NULL, nothing will be returned in it.
   COMMON_ANCESTOR will be the common ancestor of both the SRC_ANCESTOR and
   DST_ANCESTOR, and will only be set if it is not NULL.
 */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>get_copy_pair_ancestors</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>copy_pairs</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>src_ancestor</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>dst_ancestor</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>common_ancestor</name></decl></param>,
                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>top_dst</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>top_src</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>top_src</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>copy_pairs</name></expr></argument>, <argument><expr>0</expr></argument>,
                                               <argument><expr><name>svn_client__copy_pair_t</name> *</expr></argument>)</argument_list></call>-&gt;<name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Because all the destinations are in the same directory, we can easily
     determine their common ancestor. */</comment>
  <if>if <condition>(<expr><name><name>copy_pairs</name>-&gt;<name>nelts</name></name> == 1</expr>)</condition><then>
    <expr_stmt><expr><name>top_dst</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>copy_pairs</name></expr></argument>, <argument><expr>0</expr></argument>,
                                     <argument><expr><name>svn_client__copy_pair_t</name> *</expr></argument>)</argument_list></call>-&gt;<name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><name>top_dst</name> = <call><name>svn_path_dirname</name><argument_list>(<argument><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>copy_pairs</name></expr></argument>, <argument><expr>0</expr></argument>,
                                             <argument><expr><name>svn_client__copy_pair_t</name> *</expr></argument>)</argument_list></call>-&gt;<name>dst</name></expr></argument>,
                               <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

  <comment type="block">/* We don't need to clear the subpool here for several reasons:
     1)  If we do, we can't use it to allocate the initial versions of
         top_src and top_dst (above).
     2)  We don't return any errors in the following loop, so we are guanteed
         to destory the subpool at the end of this function.
     3)  The number of iterations is likely to be few, and the loop will be
         through quickly, so memory leakage will not be significant, in time or
         space.  */</comment>
  <for>for (<init><expr><name>i</name> = 1</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>copy_pairs</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>svn_client__copy_pair_t</name> *</type><name>pair</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>copy_pairs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
                                              <argument><expr><name>svn_client__copy_pair_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name>top_src</name> = <call><name>svn_path_get_longest_ancestor</name><argument_list>(<argument><expr><name>top_src</name></expr></argument>, <argument><expr><name><name>pair</name>-&gt;<name>src</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

  <if>if <condition>(<expr><name>src_ancestor</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>src_ancestor</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>top_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr><name>dst_ancestor</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>dst_ancestor</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>top_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr><name>common_ancestor</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>common_ancestor</name> = <call><name>svn_path_get_longest_ancestor</name><argument_list>(<argument><expr><name>top_src</name></expr></argument>, <argument><expr><name>top_dst</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Copy each COPY_PAIR-&gt;SRC into COPY_PAIR-&gt;DST.  Use POOL for temporary
   allocations. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>do_wc_to_wc_copies</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>copy_pairs</name></decl></param>,
                   <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iterpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_parent</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>dst_access</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>get_copy_pair_ancestors</name><argument_list>(<argument><expr><name>copy_pairs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>dst_parent</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name><name>copy_pairs</name>-&gt;<name>nelts</name></name> == 1</expr>)</condition><then>
    <expr_stmt><expr><name>dst_parent</name> = <call><name>svn_path_dirname</name><argument_list>(<argument><expr><name>dst_parent</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <comment type="block">/* Because all copies are to the same destination directory, we can open
     the directory once, and use it for each copy. */</comment>
  <comment type="block">/* ### If we didn't potentially use DST_ACCESS as the SRC_ACCESS, we
     ### could use a read lock here. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_open3</name><argument_list>(<argument><expr>&amp;<name>dst_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>dst_parent</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr>0</expr></argument>,
                           <argument><expr><name><name>ctx</name>-&gt;<name>cancel_func</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>copy_pairs</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>src_access</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_parent</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_client__copy_pair_t</name> *</type><name>pair</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>copy_pairs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
                                                    <argument><expr><name>svn_client__copy_pair_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Check for cancellation */</comment>
      <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>cancel_func</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>ctx</name>-&gt;<name>cancel_func</name></name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <expr_stmt><expr><call><name>svn_path_split</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>src</name></name></expr></argument>, <argument><expr>&amp;<name>src_parent</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Need to avoid attempting to open the same dir twice when source
         and destination overlap. */</comment>
      <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>src_parent</name></expr></argument>, <argument><expr><name><name>pair</name>-&gt;<name>dst_parent</name></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <block>{
          <comment type="block">/* For directories, extend our lock depth so that we can
             access the source's entry fields. */</comment>
          <if>if <condition>(<expr><name><name>pair</name>-&gt;<name>src_kind</name></name> == <name>svn_node_dir</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_open3</name><argument_list>(<argument><expr>&amp;<name>src_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>pair</name>-&gt;<name>src</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                                     <argument><expr>-1</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>cancel_func</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>,
                                     <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
          <else>else
            <expr_stmt><expr><name>src_access</name> = <name>dst_access</name></expr>;</expr_stmt></else></if>
        }</block></then>
      <else>else
        <block>{
          <expr_stmt><expr><name>err</name> = <call><name>svn_wc_adm_open3</name><argument_list>(<argument><expr>&amp;<name>src_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>src_parent</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                                 <argument><expr><name><name>pair</name>-&gt;<name>src_kind</name></name> == <name>svn_node_dir</name> ? -1 : 0</expr></argument>,
                                 <argument><expr><name><name>ctx</name>-&gt;<name>cancel_func</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>,
                                 <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <comment type="block">/* The parent of a copy src might not be versioned at all. */</comment>
          <if>if <condition>(<expr><name>err</name> &amp;&amp; <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_WC_NOT_DIRECTORY</name></expr>)</condition><then>
            <block>{
              <expr_stmt><expr><name>src_access</name> = <name>NULL</name></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>err</name> = <name>NULL</name></expr>;</expr_stmt>
            }</block></then></if>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

      <comment type="block">/* Perform the copy */</comment>

      <comment type="block">/* ### This is not a move, so we won't have locked the source, so we
         ### won't detect any outstanding locks. If the source is locked and
         ### requires cleanup should we abort the copy? */</comment>

      <expr_stmt><expr><name>err</name> = <call><name>svn_wc_copy2</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>src</name></name></expr></argument>, <argument><expr><name>dst_access</name></expr></argument>, <argument><expr><name><name>pair</name>-&gt;<name>base_name</name></name></expr></argument>,
                         <argument><expr><name><name>ctx</name>-&gt;<name>cancel_func</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>,
                         <argument><expr><name><name>ctx</name>-&gt;<name>notify_func2</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>notify_baton2</name></name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
        <break>break;</break></then></if>

      <if>if <condition>(<expr><name>src_access</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>err</name> = <call><name>propagate_mergeinfo_within_wc</name><argument_list>(<argument><expr><name>pair</name></expr></argument>, <argument><expr><name>src_access</name></expr></argument>, <argument><expr><name>dst_access</name></expr></argument>,
                                              <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
            <break>break;</break></then></if>
          
          <if>if <condition>(<expr><name>src_access</name> != <name>dst_access</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_close</name><argument_list>(<argument><expr><name>src_access</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></then></if>
    }</block></for>

  <expr_stmt><expr><call><name>svn_sleep_for_timestamps</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_close</name><argument_list>(<argument><expr><name>dst_access</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Move each COPY_PAIR-&gt;SRC into COPY_PAIR-&gt;DST, deleting COPY_PAIR-&gt;SRC
   afterwards.  Use POOL for temporary allocations. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>do_wc_to_wc_moves</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>copy_pairs</name></decl></param>,
                  <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iterpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>

  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>copy_pairs</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>src_access</name></decl>, *<decl><type ref="prev"/><name>dst_access</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_parent</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_client__copy_pair_t</name> *</type><name>pair</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>copy_pairs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
                                                    <argument><expr><name>svn_client__copy_pair_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Check for cancellation */</comment>
      <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>cancel_func</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>ctx</name>-&gt;<name>cancel_func</name></name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <expr_stmt><expr><call><name>svn_path_split</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>src</name></name></expr></argument>, <argument><expr>&amp;<name>src_parent</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_open3</name><argument_list>(<argument><expr>&amp;<name>src_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>src_parent</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
                               <argument><expr><name><name>pair</name>-&gt;<name>src_kind</name></name> == <name>svn_node_dir</name> ? -1 : 0</expr></argument>,
                               <argument><expr><name><name>ctx</name>-&gt;<name>cancel_func</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>,
                               <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Need to avoid attempting to open the same dir twice when source
         and destination overlap. */</comment>
      <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>src_parent</name></expr></argument>, <argument><expr><name><name>pair</name>-&gt;<name>dst_parent</name></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>dst_access</name> = <name>src_access</name></expr>;</expr_stmt>
        }</block></then>
      <else>else
        <block>{
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_parent_abs</name></decl>, *<decl><type ref="prev"/><name>dst_parent_abs</name></decl>;</decl_stmt>

          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_path_get_absolute</name><argument_list>(<argument><expr>&amp;<name>src_parent_abs</name></expr></argument>, <argument><expr><name>src_parent</name></expr></argument>,
                                        <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_path_get_absolute</name><argument_list>(<argument><expr>&amp;<name>dst_parent_abs</name></expr></argument>, <argument><expr><name><name>pair</name>-&gt;<name>dst_parent</name></name></expr></argument>,
                                        <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <if>if <condition>(<expr>(<name><name>pair</name>-&gt;<name>src_kind</name></name> == <name>svn_node_dir</name>)
              &amp;&amp; (<call><name>svn_path_is_child</name><argument_list>(<argument><expr><name>src_parent_abs</name></expr></argument>, <argument><expr><name>dst_parent_abs</name></expr></argument>,
                                    <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
            <block>{
              <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr>&amp;<name>dst_access</name></expr></argument>, <argument><expr><name>src_access</name></expr></argument>,
                                          <argument><expr><name><name>pair</name>-&gt;<name>dst_parent</name></name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
          <else>else
            <block>{
              <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_open3</name><argument_list>(<argument><expr>&amp;<name>dst_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>pair</name>-&gt;<name>dst_parent</name></name></expr></argument>,
                                       <argument><expr><name>TRUE</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>cancel_func</name></name></expr></argument>,
                                       <argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>,
                                       <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></else></if>

      <comment type="block">/* ### Ideally, we'd lookup the mergeinfo here, before
         ### performing the copy.  However, as an implementation
         ### shortcut, we perform the lookup after the copy. */</comment>

      <comment type="block">/* Perform the copy with mergeinfo, and then the delete. */</comment>
      <expr_stmt><expr><name>err</name> = <call><name>svn_wc_copy2</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>src</name></name></expr></argument>, <argument><expr><name>dst_access</name></expr></argument>, <argument><expr><name><name>pair</name>-&gt;<name>base_name</name></name></expr></argument>,
                         <argument><expr><name><name>ctx</name>-&gt;<name>cancel_func</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>,
                         <argument><expr><name><name>ctx</name>-&gt;<name>notify_func2</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>notify_baton2</name></name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
        <break>break;</break></then></if>

      <expr_stmt><expr><name>err</name> = <call><name>propagate_mergeinfo_within_wc</name><argument_list>(<argument><expr><name>pair</name></expr></argument>, <argument><expr><name>src_access</name></expr></argument>, <argument><expr><name>dst_access</name></expr></argument>,
                                          <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
        <break>break;</break></then></if>

      <comment type="block">/* Perform the delete. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_delete3</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>src</name></name></expr></argument>, <argument><expr><name>src_access</name></expr></argument>,
                             <argument><expr><name><name>ctx</name>-&gt;<name>cancel_func</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>,
                             <argument><expr><name><name>ctx</name>-&gt;<name>notify_func2</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>notify_baton2</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                             <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>dst_access</name> != <name>src_access</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_close</name><argument_list>(<argument><expr><name>dst_access</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_close</name><argument_list>(<argument><expr><name>src_access</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

  <expr_stmt><expr><call><name>svn_sleep_for_timestamps</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>wc_to_wc_copy</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>copy_pairs</name></decl></param>,
              <param><decl><type><name>svn_boolean_t</name></type> <name>is_move</name></decl></param>,
              <param><decl><type><name>svn_boolean_t</name></type> <name>make_parents</name></decl></param>,
              <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iterpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check that all of our SRCs exist, and all the DSTs don't. */</comment>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>copy_pairs</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>svn_client__copy_pair_t</name> *</type><name>pair</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>copy_pairs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
                                                    <argument><expr><name>svn_client__copy_pair_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>dst_kind</name></decl>, <decl><type ref="prev"/><name>dst_parent_kind</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Verify that SRC_PATH exists. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_check_path</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>src</name></name></expr></argument>, <argument><expr>&amp;<name><name>pair</name>-&gt;<name>src_kind</name></name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name><name>pair</name>-&gt;<name>src_kind</name></name> == <name>svn_node_none</name></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_NODE_UNKNOWN_KIND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                 <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Path '%s' does not exist"</expr></argument>)</argument_list></call></expr></argument>,
                                 <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>src</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>

      <comment type="block">/* If DST_PATH does not exist, then its basename will become a new
         file or dir added to its parent (possibly an implicit '.').
         Else, just error out. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_check_path</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>dst</name></name></expr></argument>, <argument><expr>&amp;<name>dst_kind</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>dst_kind</name> != <name>svn_node_none</name></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_ENTRY_EXISTS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                 <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Path '%s' already exists"</expr></argument>)</argument_list></call></expr></argument>,
                                 <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>dst</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>

      <expr_stmt><expr><call><name>svn_path_split</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>dst</name></name></expr></argument>, <argument><expr>&amp;<name><name>pair</name>-&gt;<name>dst_parent</name></name></expr></argument>, <argument><expr>&amp;<name><name>pair</name>-&gt;<name>base_name</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Make sure the destination parent is a directory and produce a clear
         error message if it is not. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_check_path</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>dst_parent</name></name></expr></argument>, <argument><expr>&amp;<name>dst_parent_kind</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>make_parents</name> &amp;&amp; <name>dst_parent_kind</name> == <name>svn_node_none</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__make_local_parents</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>dst_parent</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>,
                                                 <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else <if>if <condition>(<expr><name>dst_parent_kind</name> != <name>svn_node_dir</name></expr>)</condition><then>
        <block>{
          <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_WC_NOT_DIRECTORY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                   <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Path '%s' is not a directory"</expr></argument>)</argument_list></call></expr></argument>,
                                   <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>dst_parent</name></name></expr></argument>,
                                                        <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if></else></if>
    }</block></for>

  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Copy or move all targets. */</comment>
  <if>if <condition>(<expr><name>is_move</name></expr>)</condition><then>
    <return>return <expr><call><name>do_wc_to_wc_moves</name><argument_list>(<argument><expr><name>copy_pairs</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return></then>
  <else>else
    <return>return <expr><call><name>do_wc_to_wc_copies</name><argument_list>(<argument><expr><name>copy_pairs</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>


<comment type="block">/* Path-specific state used as part of path_driver_cb_baton. */</comment>
<typedef>typedef <type><struct>struct
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_url</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>src_kind</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>src_revnum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>resurrection</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>dir_add</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_string_t</name> *</type><name>mergeinfo</name></decl>;</decl_stmt>  <comment type="block">/* the new mergeinfo for the target */</comment>
}</block></struct></type> <name>path_driver_info_t</name>;</typedef>


<comment type="block">/* The baton used with the path_driver_cb_func() callback for a copy
   or move operation. */</comment>
<struct>struct <name>path_driver_cb_baton</name>
<block>{
  <comment type="block">/* The editor (and its state) used to perform the operation. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>editor</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>edit_baton</name></decl>;</decl_stmt>

  <comment type="block">/* A hash of path -&gt; path_driver_info_t *'s. */</comment>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>action_hash</name></decl>;</decl_stmt>

  <comment type="block">/* Whether the operation is a move or copy. */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>is_move</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>path_driver_cb_func</name><parameter_list>(<param><decl><type><name>void</name> **</type><name>dir_baton</name></decl></param>,
                    <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
                    <param><decl><type><name>void</name> *</type><name>callback_baton</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>path_driver_cb_baton</name> *</type><name>cb_baton</name> <init>= <expr><name>callback_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>do_delete</name> <init>= <expr><name>FALSE</name></expr></init>, <name>do_add</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>path_driver_info_t</name> *</type><name>path_info</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>cb_baton</name>-&gt;<name>action_hash</name></name></expr></argument>,
                                               <argument><expr><name>path</name></expr></argument>,
                                               <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Initialize return value. */</comment>
  <expr_stmt><expr>*<name>dir_baton</name> = <name>NULL</name></expr>;</expr_stmt>

  <comment type="block">/* This function should never get an empty PATH.  We can neither
     create nor delete the empty PATH, so if someone is calling us
     with such, the code is just plain wrong. */</comment>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>! <call><name>svn_path_is_empty</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check to see if we need to add the path as a directory. */</comment>
  <if>if <condition>(<expr><name><name>path_info</name>-&gt;<name>dir_add</name></name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>cb_baton</name>-&gt;<name>editor</name>-&gt;<name>add_directory</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>parent_baton</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                              <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>,
                                              <argument><expr><name>dir_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
    }</block></then></if>

  <comment type="block">/* If this is a resurrection, we know the source and dest paths are
     the same, and that our driver will only be calling us once.  */</comment>
  <if>if <condition>(<expr><name><name>path_info</name>-&gt;<name>resurrection</name></name></expr>)</condition><then>
    <block>{
      <comment type="block">/* If this is a move, we do nothing.  Otherwise, we do the copy.  */</comment>
      <if>if <condition>(<expr>! <name><name>cb_baton</name>-&gt;<name>is_move</name></name></expr>)</condition><then>
        <expr_stmt><expr><name>do_add</name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
    }</block></then>
  <comment type="block">/* Not a resurrection. */</comment>
  <else>else
    <block>{
      <comment type="block">/* If this is a move, we check PATH to see if it is the source
         or the destination of the move. */</comment>
      <if>if <condition>(<expr><name><name>cb_baton</name>-&gt;<name>is_move</name></name></expr>)</condition><then>
        <block>{
          <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>path_info</name>-&gt;<name>src_path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
            <expr_stmt><expr><name>do_delete</name> = <name>TRUE</name></expr>;</expr_stmt></then>
          <else>else
            <expr_stmt><expr><name>do_add</name> = <name>TRUE</name></expr>;</expr_stmt></else></if>
        }</block></then>
      <comment type="block">/* Not a move?  This must just be the copy addition. */</comment>
      <else>else
        <block>{
          <expr_stmt><expr><name>do_add</name> = <name>TRUE</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></else></if>

  <if>if <condition>(<expr><name>do_delete</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>cb_baton</name>-&gt;<name>editor</name>-&gt;<name>delete_entry</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
                                             <argument><expr><name>parent_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  <if>if <condition>(<expr><name>do_add</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_path_check_valid</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name><name>path_info</name>-&gt;<name>src_kind</name></name> == <name>svn_node_file</name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>void</name> *</type><name>file_baton</name></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>cb_baton</name>-&gt;<name>editor</name>-&gt;<name>add_file</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>parent_baton</name></expr></argument>,
                                             <argument><expr><name><name>path_info</name>-&gt;<name>src_url</name></name></expr></argument>,
                                             <argument><expr><name><name>path_info</name>-&gt;<name>src_revnum</name></name></expr></argument>,
                                             <argument><expr><name>pool</name></expr></argument>, <argument><expr>&amp;<name>file_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name><name>path_info</name>-&gt;<name>mergeinfo</name></name></expr>)</condition><then>
            <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>cb_baton</name>-&gt;<name>editor</name>-&gt;<name>change_file_prop</name></name><argument_list>(<argument><expr><name>file_baton</name></expr></argument>,
                                                       <argument><expr><name>SVN_PROP_MERGEINFO</name></expr></argument>,
                                                       <argument><expr><name><name>path_info</name>-&gt;<name>mergeinfo</name></name></expr></argument>,
                                                       <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>cb_baton</name>-&gt;<name>editor</name>-&gt;<name>close_file</name></name><argument_list>(<argument><expr><name>file_baton</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else
        <block>{
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>cb_baton</name>-&gt;<name>editor</name>-&gt;<name>add_directory</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>parent_baton</name></expr></argument>,
                                                  <argument><expr><name><name>path_info</name>-&gt;<name>src_url</name></name></expr></argument>,
                                                  <argument><expr><name><name>path_info</name>-&gt;<name>src_revnum</name></name></expr></argument>,
                                                  <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>dir_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name><name>path_info</name>-&gt;<name>mergeinfo</name></name></expr>)</condition><then>
            <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>cb_baton</name>-&gt;<name>editor</name>-&gt;<name>change_dir_prop</name></name><argument_list>(<argument><expr>*<name>dir_baton</name></expr></argument>,
                                                      <argument><expr><name>SVN_PROP_MERGEINFO</name></expr></argument>,
                                                      <argument><expr><name><name>path_info</name>-&gt;<name>mergeinfo</name></name></expr></argument>,
                                                      <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></else></if>
    }</block></then></if>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>repos_to_repos_copy</name><parameter_list>(<param><decl><type><name>svn_commit_info_t</name> **</type><name>commit_info_p</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>copy_pairs</name></decl></param>,
                    <param><decl><type><name>svn_boolean_t</name></type> <name>make_parents</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>apr_hash_t</name> *</type><name>revprop_table</name></decl></param>,
                    <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                    <param><decl><type><name>svn_boolean_t</name></type> <name>is_move</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>paths</name> <init>= <expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>2 * <name><name>copy_pairs</name>-&gt;<name>nelts</name></name></expr></argument>,
                                             <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>action_hash</name> <init>= <expr><call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>path_infos</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>top_url</name></decl>, *<decl><type ref="prev"/><name>message</name></decl>, *<decl><type ref="prev"/><name>repos_root</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>youngest</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>editor</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>edit_baton</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>commit_baton</name></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>path_driver_cb_baton</name></type> <name>cb_baton</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>new_dirs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>commit_revprops</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iterpool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

  <comment type="block">/* Create a path_info struct for each src/dst pair, and initialize it. */</comment>
  <expr_stmt><expr><name>path_infos</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>copy_pairs</name>-&gt;<name>nelts</name></name></expr></argument>,
                              <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>path_driver_info_t</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>copy_pairs</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>path_driver_info_t</name> *</type><name>info</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>info</name>-&gt;<name>resurrection</name></name> = <name>FALSE</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>path_infos</name></expr></argument>, <argument><expr><name>path_driver_info_t</name> *</expr></argument>)</argument_list></call> = <name>info</name></expr>;</expr_stmt>
    }</block></for>

  <comment type="block">/* We have to open our session to the longest path common to all
     SRC_URLS and DST_URLS in the repository so we can do existence
     checks on all paths, and so we can operate on all paths in the
     case of a move. */</comment>
  <expr_stmt><expr><call><name>get_copy_pair_ancestors</name><argument_list>(<argument><expr><name>copy_pairs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>top_url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check each src/dst pair for resurrection. */</comment>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>copy_pairs</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>svn_client__copy_pair_t</name> *</type><name>pair</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>copy_pairs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
                                                    <argument><expr><name>svn_client__copy_pair_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>path_driver_info_t</name> *</type><name>info</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>path_infos</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
                                               <argument><expr><name>path_driver_info_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>src</name></name></expr></argument>, <argument><expr><name><name>pair</name>-&gt;<name>dst</name></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name><name>info</name>-&gt;<name>resurrection</name></name> = <name>TRUE</name></expr>;</expr_stmt>

          <comment type="block">/* Special edge-case!  (issue #683)  If you're resurrecting a
             deleted item like this:  'svn cp -rN src_URL dst_URL', then
             it's possible for src_URL == dst_URL == top_url.  In this
             situation, we want to open an RA session to be at least the
             *parent* of all three. */</comment>
          <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>src</name></name></expr></argument>, <argument><expr><name>top_url</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
            <block>{
              <expr_stmt><expr><name>top_url</name> = <call><name>svn_path_dirname</name><argument_list>(<argument><expr><name>top_url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></for>

  <comment type="block">/* Open an RA session for the URL. Note that we don't have a local
     directory, nor a place to put temp files. */</comment>
  <expr_stmt><expr><name>err</name> = <call><name>svn_client__open_ra_session_internal</name><argument_list>(<argument><expr>&amp;<name>ra_session</name></expr></argument>, <argument><expr><name>top_url</name></expr></argument>,
                                             <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
                                             <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If the two URLs appear not to be in the same repository, then
     top_url will be empty and the call to svn_ra_open3()
     above will have failed.  Below we check for that, and propagate a
     descriptive error back to the user.

     Ideally, we'd contact the repositories and compare their UUIDs to
     determine whether or not src and dst are in the same repository,
     instead of depending on an essentially textual comparison.
     However, it is simpler to assume that if someone is using the
     same repository, then they will use the same hostname/path to
     refer to it both times.  Conversely, if the repositories are
     different, then they can't share a non-empty prefix, so top_url
     would still be "" and svn_ra_get_library() would still error.
     Thus we can get this check without extra network turnarounds to
     fetch the UUIDs.
   */</comment>
  <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr>(<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_RA_ILLEGAL_URL</name>)
          &amp;&amp; ((<name>top_url</name> == <name>NULL</name>) || (<name><name>top_url</name><index>[<expr>0</expr>]</index></name> == '\0'))</expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>svn_client__copy_pair_t</name> *</type><name>first_pair</name> <init>=
            <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>copy_pairs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>svn_client__copy_pair_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <return>return <expr><call><name>svn_error_createf</name>
            <argument_list>(<argument><expr><name>SVN_ERR_UNSUPPORTED_FEATURE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
             <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Source and dest appear not to be in the same repository "
               "(src: '%s'; dst: '%s')"</expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><name><name>first_pair</name>-&gt;<name>src</name></name></expr></argument>, <argument><expr><name><name>first_pair</name>-&gt;<name>dst</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then>
      <else>else
        <return>return <expr><name>err</name></expr>;</return></else></if>
    }</block></then></if>

  <expr_stmt><expr><name>iterpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Iterate over the parents of the destination directory, and make a list
     of the ones that don't yet exist.  We do not have to worry about
     reparenting the ra session because top_url is a common ancestor of the
     destination and sources.  The sources exist, so therefore top_url must
     also exist. */</comment>
  <if>if <condition>(<expr><name>make_parents</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_client__copy_pair_t</name> *</type><name>pair</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>copy_pairs</name></expr></argument>, <argument><expr>0</expr></argument>,
                                                    <argument><expr><name>svn_client__copy_pair_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dir</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>new_dirs</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>dir</name> = <call><name>svn_path_is_child</name><argument_list>(<argument><expr><name>top_url</name></expr></argument>, <argument><expr><call><name>svn_path_dirname</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>dst</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
                              <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_check_path</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>, <argument><expr>&amp;<name>kind</name></expr></argument>,
                                <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <while>while <condition>(<expr><name>kind</name> == <name>svn_node_none</name></expr>)</condition>
        <block>{
          <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>new_dirs</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>dir</name></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>svn_path_split</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr>&amp;<name>dir</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_check_path</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>, <argument><expr>&amp;<name>kind</name></expr></argument>,
                                    <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
    }</block></then></if>

  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_repos_root2</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>&amp;<name>repos_root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* For each src/dst pair, check to see if that SRC_URL is a child of
     the DST_URL (excepting the case where DST_URL is the repo root).
     If it is, and the parent of DST_URL is the current TOP_URL, then we
     need to reparent the session one directory higher, the parent of
     the DST_URL. */</comment>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>copy_pairs</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>svn_client__copy_pair_t</name> *</type><name>pair</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>copy_pairs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
                                                    <argument><expr><name>svn_client__copy_pair_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>path_driver_info_t</name> *</type><name>info</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>path_infos</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
                                               <argument><expr><name>path_driver_info_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>dst</name></name></expr></argument>, <argument><expr><name>repos_root</name></expr></argument>)</argument_list></call> != 0
          &amp;&amp; <call><name>svn_path_is_child</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>dst</name></name></expr></argument>, <argument><expr><name><name>pair</name>-&gt;<name>src</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name><name>info</name>-&gt;<name>resurrection</name></name> = <name>TRUE</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>top_url</name> = <call><name>svn_path_dirname</name><argument_list>(<argument><expr><name>top_url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_reparent</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>top_url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>

  <comment type="block">/* Fetch the youngest revision. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_latest_revnum</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>&amp;<name>youngest</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>copy_pairs</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>svn_client__copy_pair_t</name> *</type><name>pair</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>copy_pairs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
                                                    <argument><expr><name>svn_client__copy_pair_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>path_driver_info_t</name> *</type><name>info</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>path_infos</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
                                               <argument><expr><name>path_driver_info_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>dst_kind</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_rel</name></decl>, *<decl><type ref="prev"/><name>dst_rel</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_opt_revision_t</name> *</type><name>new_rev</name></decl>, *<decl><type ref="prev"/><name>ignored_rev</name></decl>, <decl><type ref="prev"/><name>dead_end_rev</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ignored_url</name></decl>;</decl_stmt>

      <comment type="block">/* Pass NULL for the path, to ensure error if trying to get a
         revision based on the working copy. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_revision_number</name>
              <argument_list>(<argument><expr>&amp;<name><name>pair</name>-&gt;<name>src_revnum</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ra_session</name></expr></argument>, <argument><expr>&amp;<name><name>pair</name>-&gt;<name>src_op_revision</name></name></expr></argument>,
               <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>info</name>-&gt;<name>src_revnum</name></name> = <name><name>pair</name>-&gt;<name>src_revnum</name></name></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>dead_end_rev</name>.<name>kind</name></name> = <name>svn_opt_revision_unspecified</name></expr>;</expr_stmt>

      <comment type="block">/* Run the history function to get the object's url in the operational
         revision. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__repos_locations</name><argument_list>(<argument><expr>&amp;<name><name>pair</name>-&gt;<name>src</name></name></expr></argument>, <argument><expr>&amp;<name>new_rev</name></expr></argument>,
                                          <argument><expr>&amp;<name>ignored_url</name></expr></argument>, <argument><expr>&amp;<name>ignored_rev</name></expr></argument>,
                                          <argument><expr><name>NULL</name></expr></argument>,
                                          <argument><expr><name><name>pair</name>-&gt;<name>src</name></name></expr></argument>, <argument><expr>&amp;<name><name>pair</name>-&gt;<name>src_peg_revision</name></name></expr></argument>,
                                          <argument><expr>&amp;<name><name>pair</name>-&gt;<name>src_op_revision</name></name></expr></argument>, <argument><expr>&amp;<name>dead_end_rev</name></expr></argument>,
                                          <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Get the portions of the SRC and DST URLs that are relative to
         TOP_URL, and URI-decode those sections. */</comment>
      <expr_stmt><expr><name>src_rel</name> = <call><name>svn_path_is_child</name><argument_list>(<argument><expr><name>top_url</name></expr></argument>, <argument><expr><name><name>pair</name>-&gt;<name>src</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>src_rel</name></expr>)</condition><then>
        <expr_stmt><expr><name>src_rel</name> = <call><name>svn_path_uri_decode</name><argument_list>(<argument><expr><name>src_rel</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
      <else>else
        <expr_stmt><expr><name>src_rel</name> = ""</expr>;</expr_stmt></else></if>

      <expr_stmt><expr><name>dst_rel</name> = <call><name>svn_path_is_child</name><argument_list>(<argument><expr><name>top_url</name></expr></argument>, <argument><expr><name><name>pair</name>-&gt;<name>dst</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>dst_rel</name></expr>)</condition><then>
        <expr_stmt><expr><name>dst_rel</name> = <call><name>svn_path_uri_decode</name><argument_list>(<argument><expr><name>dst_rel</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
      <else>else
        <expr_stmt><expr><name>dst_rel</name> = ""</expr>;</expr_stmt></else></if>

      <comment type="block">/* We can't move something into itself, period. */</comment>
      <if>if <condition>(<expr><call><name>svn_path_is_empty</name><argument_list>(<argument><expr><name>src_rel</name></expr></argument>)</argument_list></call> &amp;&amp; <name>is_move</name></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_UNSUPPORTED_FEATURE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                 <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Cannot move URL '%s' into itself"</expr></argument>)</argument_list></call></expr></argument>,
                                 <argument><expr><name><name>pair</name>-&gt;<name>src</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>

      <comment type="block">/* Verify that SRC_URL exists in the repository. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_check_path</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>src_rel</name></expr></argument>, <argument><expr><name><name>pair</name>-&gt;<name>src_revnum</name></name></expr></argument>,
                                <argument><expr>&amp;<name><name>info</name>-&gt;<name>src_kind</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name><name>info</name>-&gt;<name>src_kind</name></name> == <name>svn_node_none</name></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_createf</name>
          <argument_list>(<argument><expr><name>SVN_ERR_FS_NOT_FOUND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
           <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Path '%s' does not exist in revision %ld"</expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><name><name>pair</name>-&gt;<name>src</name></name></expr></argument>, <argument><expr><name><name>pair</name>-&gt;<name>src_revnum</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>

      <comment type="block">/* Figure out the basename that will result from this operation. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_check_path</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>dst_rel</name></expr></argument>, <argument><expr><name>youngest</name></expr></argument>, <argument><expr>&amp;<name>dst_kind</name></expr></argument>,
                                <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>dst_kind</name> != <name>svn_node_none</name></expr>)</condition><then>
        <block>{
          <comment type="block">/* We disallow the overwriting of existing paths. */</comment>
          <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_FS_ALREADY_EXISTS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                   <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Path '%s' already exists"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dst_rel</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

      <expr_stmt><expr><name><name>info</name>-&gt;<name>src_url</name></name> = <name><name>pair</name>-&gt;<name>src</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name>-&gt;<name>src_path</name></name> = <name>src_rel</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name>-&gt;<name>dst_path</name></name> = <name>dst_rel</name></expr>;</expr_stmt>
    }</block></for>

  <if>if <condition>(<expr><call><name>SVN_CLIENT__HAS_LOG_MSG_FUNC</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <comment type="block">/* Produce a list of new paths to add, and provide it to the
         mechanism used to acquire a log message. */</comment>
      <decl_stmt><decl><type><name>svn_client_commit_item3_t</name> *</type><name>item</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmp_file</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>commit_items</name>
        <init>= <expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>2 * <name><name>copy_pairs</name>-&gt;<name>nelts</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <comment type="block">/* Add any intermediate directories to the message */</comment>
      <if>if <condition>(<expr><name>make_parents</name></expr>)</condition><then>
        <block>{
          <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>new_dirs</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
            <block>{
              <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>new_dirs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

              <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client_commit_item_create</name>
                      <argument_list>(<argument><expr>(const <name>svn_client_commit_item3_t</name> **) &amp;<name>item</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

              <expr_stmt><expr><name><name>item</name>-&gt;<name>url</name></name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>top_url</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>item</name>-&gt;<name>state_flags</name></name> = <name>SVN_CLIENT_COMMIT_ITEM_ADD</name></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>commit_items</name></expr></argument>, <argument><expr><name>svn_client_commit_item3_t</name> *</expr></argument>)</argument_list></call> = <name>item</name></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>

      <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>path_infos</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
          <decl_stmt><decl><type><name>path_driver_info_t</name> *</type><name>info</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>path_infos</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
                                                   <argument><expr><name>path_driver_info_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client_commit_item_create</name>
                  <argument_list>(<argument><expr>(const <name>svn_client_commit_item3_t</name> **) &amp;<name>item</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><name><name>item</name>-&gt;<name>url</name></name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>top_url</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>dst_path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>item</name>-&gt;<name>state_flags</name></name> = <name>SVN_CLIENT_COMMIT_ITEM_ADD</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>commit_items</name></expr></argument>, <argument><expr><name>svn_client_commit_item3_t</name> *</expr></argument>)</argument_list></call> = <name>item</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>action_hash</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>dst_path</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                       <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <if>if <condition>(<expr><name>is_move</name> &amp;&amp; (! <name><name>info</name>-&gt;<name>resurrection</name></name>)</expr>)</condition><then>
            <block>{
              <expr_stmt><expr><name>item</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>item</name>-&gt;<name>url</name></name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>top_url</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>src_path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>item</name>-&gt;<name>state_flags</name></name> = <name>SVN_CLIENT_COMMIT_ITEM_DELETE</name></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>commit_items</name></expr></argument>, <argument><expr><name>svn_client_commit_item3_t</name> *</expr></argument>)</argument_list></call> = <name>item</name></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>action_hash</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>src_path</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                           <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_log_msg</name><argument_list>(<argument><expr>&amp;<name>message</name></expr></argument>, <argument><expr>&amp;<name>tmp_file</name></expr></argument>, <argument><expr><name>commit_items</name></expr></argument>,
                                      <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr>! <name>message</name></expr>)</condition><then>
        <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
    }</block></then>
  <else>else
    <expr_stmt><expr><name>message</name> = ""</expr>;</expr_stmt></else></if>

  <comment type="block">/* Setup our PATHS for the path-based editor drive. */</comment>
  <comment type="block">/* First any intermediate directories. */</comment>
  <if>if <condition>(<expr><name>make_parents</name></expr>)</condition><then>
    <block>{
      <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>new_dirs</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>new_dirs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>path_driver_info_t</name> *</type><name>info</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <expr_stmt><expr><name><name>info</name>-&gt;<name>dst_path</name></name> = <name>url</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>info</name>-&gt;<name>dir_add</name></name> = <name>TRUE</name></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>paths</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>url</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>action_hash</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></then></if>

  <comment type="block">/* Then, copy destinations, and possibly move sources. */</comment>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>path_infos</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>path_driver_info_t</name> *</type><name>info</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>path_infos</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
                                               <argument><expr><name>path_driver_info_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>mergeinfo</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>calculate_target_mergeinfo</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>&amp;<name>mergeinfo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                         <argument><expr><name><name>info</name>-&gt;<name>src_url</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>src_revnum</name></name></expr></argument>, 
                                         <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>mergeinfo</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_mergeinfo_to_string</name><argument_list>(<argument><expr>&amp;<name><name>info</name>-&gt;<name>mergeinfo</name></name></expr></argument>, <argument><expr><name>mergeinfo</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>paths</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name><name>info</name>-&gt;<name>dst_path</name></name></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>is_move</name> &amp;&amp; (! <name><name>info</name>-&gt;<name>resurrection</name></name>)</expr>)</condition><then>
        <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>paths</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name><name>info</name>-&gt;<name>src_path</name></name></expr>;</expr_stmt></then></if>
    }</block></for>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__ensure_revprop_table</name><argument_list>(<argument><expr>&amp;<name>commit_revprops</name></expr></argument>, <argument><expr><name>revprop_table</name></expr></argument>,
                                           <argument><expr><name>message</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Fetch RA commit editor. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__commit_get_baton</name><argument_list>(<argument><expr>&amp;<name>commit_baton</name></expr></argument>, <argument><expr><name>commit_info_p</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_commit_editor3</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>&amp;<name>editor</name></expr></argument>, <argument><expr>&amp;<name>edit_baton</name></expr></argument>,
                                    <argument><expr><name>commit_revprops</name></expr></argument>,
                                    <argument><expr><name>svn_client__commit_callback</name></expr></argument>,
                                    <argument><expr><name>commit_baton</name></expr></argument>,
                                    <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <comment type="block">/* No lock tokens */</comment>
                                    <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Setup the callback baton. */</comment>
  <expr_stmt><expr><name><name>cb_baton</name>.<name>editor</name></name> = <name>editor</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cb_baton</name>.<name>edit_baton</name></name> = <name>edit_baton</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cb_baton</name>.<name>action_hash</name></name> = <name>action_hash</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cb_baton</name>.<name>is_move</name></name> = <name>is_move</name></expr>;</expr_stmt>

  <comment type="block">/* Call the path-based editor driver. */</comment>
  <expr_stmt><expr><name>err</name> = <call><name>svn_delta_path_driver</name><argument_list>(<argument><expr><name>editor</name></expr></argument>, <argument><expr><name>edit_baton</name></expr></argument>, <argument><expr><name>youngest</name></expr></argument>, <argument><expr><name>paths</name></expr></argument>,
                              <argument><expr><name>path_driver_cb_func</name></expr></argument>, <argument><expr>&amp;<name>cb_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* At least try to abort the edit (and fs txn) before throwing err. */</comment>
      <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name><name>editor</name>-&gt;<name>abort_edit</name></name><argument_list>(<argument><expr><name>edit_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>err</name></expr>;</return>
    }</block></then></if>

  <comment type="block">/* Close the edit. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>editor</name>-&gt;<name>close_edit</name></name><argument_list>(<argument><expr><name>edit_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>



<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>wc_to_repos_copy</name><parameter_list>(<param><decl><type><name>svn_commit_info_t</name> **</type><name>commit_info_p</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>copy_pairs</name></decl></param>,
                 <param><decl><type><name>svn_boolean_t</name></type> <name>make_parents</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>apr_hash_t</name> *</type><name>revprop_table</name></decl></param>,
                 <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>message</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>top_src_path</name></decl>, *<decl><type ref="prev"/><name>top_dst_url</name></decl>, *<decl><type ref="prev"/><name>repos_root</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>editor</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>edit_baton</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>base_kind</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>commit_baton</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>committables</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>, *<decl><type ref="prev"/><name>dir_access</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>commit_items</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iterpool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>new_dirs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>commit_revprops</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <comment type="block">/* The commit process uses absolute paths, so we need to open the access
     baton using absolute paths, and so we really need to use absolute
     paths everywhere. */</comment>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>copy_pairs</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>svn_client__copy_pair_t</name> *</type><name>pair</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>copy_pairs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
                                                    <argument><expr><name>svn_client__copy_pair_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_path_get_absolute</name><argument_list>(<argument><expr>&amp;<name><name>pair</name>-&gt;<name>src_abs</name></name></expr></argument>, <argument><expr><name><name>pair</name>-&gt;<name>src</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

  <comment type="block">/*Find the common root of all the source paths, and probe the wc. */</comment>
  <expr_stmt><expr><call><name>get_copy_pair_ancestors</name><argument_list>(<argument><expr><name>copy_pairs</name></expr></argument>, <argument><expr>&amp;<name>top_src_path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_probe_open3</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>top_src_path</name></expr></argument>,
                                 <argument><expr><name>FALSE</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>cancel_func</name></name></expr></argument>,
                                 <argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Determine the least common ancesor for the destinations, and open an RA
     session to that location. */</comment>
  <expr_stmt><expr><call><name>svn_path_split</name><argument_list>(<argument><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>copy_pairs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>svn_client__copy_pair_t</name> *</expr></argument>)</argument_list></call>-&gt;<name>dst</name></expr></argument>,
                 <argument><expr>&amp;<name>top_dst_url</name></expr></argument>,
                 <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for (<init><expr><name>i</name> = 1</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>copy_pairs</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>svn_client__copy_pair_t</name> *</type><name>pair</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>copy_pairs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
                                                    <argument><expr><name>svn_client__copy_pair_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>top_dst_url</name> = <call><name>svn_path_get_longest_ancestor</name><argument_list>(<argument><expr><name>top_dst_url</name></expr></argument>, <argument><expr><name><name>pair</name>-&gt;<name>dst</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__open_ra_session_internal</name><argument_list>(<argument><expr>&amp;<name>ra_session</name></expr></argument>, <argument><expr><name>top_dst_url</name></expr></argument>,
                                               <argument><expr><call><name>svn_wc_adm_access_path</name>
                                               <argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>,
                                               <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
                                               <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If requested, determine the nearest existing parent of the destination,
     and reparent the ra session there. */</comment>
  <if>if <condition>(<expr><name>make_parents</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>root_url</name> <init>= <expr><name>top_dst_url</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>new_dirs</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_check_path</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>, <argument><expr>&amp;<name>kind</name></expr></argument>,
                                <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <while>while <condition>(<expr><name>kind</name> == <name>svn_node_none</name></expr>)</condition>
        <block>{
          <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>new_dirs</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>root_url</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>svn_path_split</name><argument_list>(<argument><expr><name>root_url</name></expr></argument>, <argument><expr>&amp;<name>root_url</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_reparent</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>root_url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_check_path</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>, <argument><expr>&amp;<name>kind</name></expr></argument>,
                                    <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>

      <expr_stmt><expr><name>top_dst_url</name> = <name>root_url</name></expr>;</expr_stmt>
    }</block></then></if>

  <comment type="block">/* Figure out the basename that will result from each copy and check to make
     sure it doesn't exist already. */</comment>
  <expr_stmt><expr><name>iterpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>copy_pairs</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>dst_kind</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_rel</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_client__copy_pair_t</name> *</type><name>pair</name> <init>= 
        <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>copy_pairs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_client__copy_pair_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name><name>pair</name>-&gt;<name>src</name></name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pair</name>-&gt;<name>src_revnum</name></name> = <name><name>entry</name>-&gt;<name>revision</name></name></expr>;</expr_stmt>

      <expr_stmt><expr><name>dst_rel</name> = <call><name>svn_path_uri_decode</name><argument_list>(<argument><expr><call><name>svn_path_is_child</name><argument_list>(<argument><expr><name>top_dst_url</name></expr></argument>, 
                                                      <argument><expr><name><name>pair</name>-&gt;<name>dst</name></name></expr></argument>, 
                                                      <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_check_path</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>dst_rel</name></expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>, 
                                <argument><expr>&amp;<name>dst_kind</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>dst_kind</name> != <name>svn_node_none</name></expr>)</condition><then>
        <block>{
          <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_FS_ALREADY_EXISTS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                   <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Path '%s' already exists"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pair</name>-&gt;<name>dst</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
    }</block></for>

  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><call><name>SVN_CLIENT__HAS_LOG_MSG_FUNC</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <comment type="block">/* Produce a list of new paths to add, and provide it to the
         mechanism used to acquire a log message. */</comment>
      <decl_stmt><decl><type><name>svn_client_commit_item3_t</name> *</type><name>item</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmp_file</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>commit_items</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>copy_pairs</name>-&gt;<name>nelts</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Add any intermediate directories to the message */</comment>
      <if>if <condition>(<expr><name>make_parents</name></expr>)</condition><then>
        <block>{
          <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>new_dirs</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
            <block>{
              <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>new_dirs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

              <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client_commit_item_create</name>
                      <argument_list>(<argument><expr>(const <name>svn_client_commit_item3_t</name> **) &amp;<name>item</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

              <expr_stmt><expr><name><name>item</name>-&gt;<name>url</name></name> = <name>url</name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>item</name>-&gt;<name>state_flags</name></name> = <name>SVN_CLIENT_COMMIT_ITEM_ADD</name></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>commit_items</name></expr></argument>, <argument><expr><name>svn_client_commit_item3_t</name> *</expr></argument>)</argument_list></call> = <name>item</name></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>

      <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>copy_pairs</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )
        <block>{
          <decl_stmt><decl><type><name>svn_client__copy_pair_t</name> *</type><name>pair</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>copy_pairs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
                                            <argument><expr><name>svn_client__copy_pair_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client_commit_item_create</name>
                  <argument_list>(<argument><expr>(const <name>svn_client_commit_item3_t</name> **) &amp;<name>item</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><name><name>item</name>-&gt;<name>url</name></name> = <name><name>pair</name>-&gt;<name>dst</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>item</name>-&gt;<name>state_flags</name></name> = <name>SVN_CLIENT_COMMIT_ITEM_ADD</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>commit_items</name></expr></argument>, <argument><expr><name>svn_client_commit_item3_t</name> *</expr></argument>)</argument_list></call> = <name>item</name></expr>;</expr_stmt>
        }</block></for>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_log_msg</name><argument_list>(<argument><expr>&amp;<name>message</name></expr></argument>, <argument><expr>&amp;<name>tmp_file</name></expr></argument>, <argument><expr><name>commit_items</name></expr></argument>,
                                      <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr>! <name>message</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_close</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
        }</block></then></if>
    }</block></then>
  <else>else
    <expr_stmt><expr><name>message</name> = ""</expr>;</expr_stmt></else></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__ensure_revprop_table</name><argument_list>(<argument><expr>&amp;<name>commit_revprops</name></expr></argument>, <argument><expr><name>revprop_table</name></expr></argument>,
                                           <argument><expr><name>message</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Crawl the working copy for commit items. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_check_path</name><argument_list>(<argument><expr><name>top_src_path</name></expr></argument>, <argument><expr>&amp;<name>base_kind</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>base_kind</name> == <name>svn_node_dir</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr>&amp;<name>dir_access</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>top_src_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><name>dir_access</name> = <name>adm_access</name></expr>;</expr_stmt></else></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_copy_committables</name><argument_list>(<argument><expr>&amp;<name>committables</name></expr></argument>,
                                            <argument><expr><name>copy_pairs</name></expr></argument>, <argument><expr><name>dir_access</name></expr></argument>,
                                            <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* ### todo: There should be only one hash entry, which currently
     has a hacked name until we have the entries files storing
     canonical repository URLs.  Then, the hacked name can go away and
     be replaced with a entry-&gt;repos (or whereever the entry's
     canonical repos URL is stored). */</comment>
  <if>if <condition>(<expr>! (<name>commit_items</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>committables</name></expr></argument>,
                                     <argument><expr><name>SVN_CLIENT__SINGLE_REPOS_NAME</name></expr></argument>,
                                     <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_close</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
    }</block></then></if>

  <comment type="block">/* If we are creating intermediate directories, tack them onto the list
     of committables. */</comment>
  <if>if <condition>(<expr><name>make_parents</name></expr>)</condition><then>
    <block>{
      <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>new_dirs</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>new_dirs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>svn_client_commit_item3_t</name> *</type><name>item</name></decl>;</decl_stmt>

          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client_commit_item_create</name>
                  <argument_list>(<argument><expr>(const <name>svn_client_commit_item3_t</name> **) &amp;<name>item</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><name><name>item</name>-&gt;<name>url</name></name> = <name>url</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>item</name>-&gt;<name>state_flags</name></name> = <name>SVN_CLIENT_COMMIT_ITEM_ADD</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>item</name>-&gt;<name>incoming_prop_changes</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>,
                                                       <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_prop_t</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>commit_items</name></expr></argument>, <argument><expr><name>svn_client_commit_item3_t</name> *</expr></argument>)</argument_list></call> = <name>item</name></expr>;</expr_stmt>
        }</block></for>
    }</block></then></if>

  <comment type="block">/* Reparent the ra_session to repos_root. So that 'svn_ra_get_log'
     on paths relative to repos_root would work fine. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_repos_root2</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>&amp;<name>repos_root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_reparent</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>repos_root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* ### TODO: This extra loop would be unnecessary if this code lived
     ### in svn_client__get_copy_committables(), which is incidentally
     ### only used above (so should really be in this source file). */</comment>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>copy_pairs</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>svn_prop_t</name> *</type><name>mergeinfo_prop</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>mergeinfo</name></decl>, *<decl><type ref="prev"/><name>wc_mergeinfo</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_client__copy_pair_t</name> *</type><name>pair</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>copy_pairs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
                                                    <argument><expr><name>svn_client__copy_pair_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_client_commit_item3_t</name> *</type><name>item</name> <init>=
        <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>commit_items</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_client_commit_item3_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <comment type="block">/* Set the mergeinfo for the destination to the combined merge
         info known to the WC and the repository. */</comment>
      <expr_stmt><expr><name><name>item</name>-&gt;<name>outgoing_prop_changes</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>,
                                                   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_prop_t</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>mergeinfo_prop</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>item</name>-&gt;<name>outgoing_prop_changes</name>-&gt;<name>pool</name></name></expr></argument>,
                                  <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_prop_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>mergeinfo_prop</name>-&gt;<name>name</name></name> = <name>SVN_PROP_MERGEINFO</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>calculate_target_mergeinfo</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>&amp;<name>mergeinfo</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, 
                                         <argument><expr><name><name>pair</name>-&gt;<name>src</name></name></expr></argument>, <argument><expr><name><name>pair</name>-&gt;<name>src_revnum</name></name></expr></argument>, 
                                         <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name><name>pair</name>-&gt;<name>src</name></name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__parse_mergeinfo</name><argument_list>(<argument><expr>&amp;<name>wc_mergeinfo</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>,
                                          <argument><expr><name><name>pair</name>-&gt;<name>src</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>,
                                          <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>wc_mergeinfo</name> &amp;&amp; <name>mergeinfo</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_mergeinfo_merge</name><argument_list>(<argument><expr><name>mergeinfo</name></expr></argument>, <argument><expr><name>wc_mergeinfo</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
      <else>else <if>if <condition>(<expr>! <name>mergeinfo</name></expr>)</condition><then>
        <expr_stmt><expr><name>mergeinfo</name> = <name>wc_mergeinfo</name></expr>;</expr_stmt></then></if></else></if>
      <if>if <condition>(<expr><name>mergeinfo</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_mergeinfo_to_string</name><argument_list>(<argument><expr>(<name>svn_string_t</name> **)
                                           &amp;<name><name>mergeinfo_prop</name>-&gt;<name>value</name></name></expr></argument>,
                                           <argument><expr><name>mergeinfo</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name><name>item</name>-&gt;<name>outgoing_prop_changes</name></name></expr></argument>, <argument><expr><name>svn_prop_t</name> *</expr></argument>)</argument_list></call> =
            <name>mergeinfo_prop</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>

  <comment type="block">/* Sort and condense our COMMIT_ITEMS. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__condense_commit_items</name><argument_list>(<argument><expr>&amp;<name>top_dst_url</name></expr></argument>,
                                            <argument><expr><name>commit_items</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Open an RA session to DST_URL. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__open_ra_session_internal</name><argument_list>(<argument><expr>&amp;<name>ra_session</name></expr></argument>, <argument><expr><name>top_dst_url</name></expr></argument>,
                                               <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>commit_items</name></expr></argument>,
                                               <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Fetch RA commit editor. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__commit_get_baton</name><argument_list>(<argument><expr>&amp;<name>commit_baton</name></expr></argument>, <argument><expr><name>commit_info_p</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_commit_editor3</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>&amp;<name>editor</name></expr></argument>, <argument><expr>&amp;<name>edit_baton</name></expr></argument>,
                                    <argument><expr><name>commit_revprops</name></expr></argument>,
                                    <argument><expr><name>svn_client__commit_callback</name></expr></argument>,
                                    <argument><expr><name>commit_baton</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                    <argument><expr><name>TRUE</name></expr></argument>, <comment type="block">/* No lock tokens */</comment>
                                    <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Perform the commit. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR_W</name><argument_list>(<argument><expr><call><name>svn_client__do_commit</name><argument_list>(<argument><expr><name>top_dst_url</name></expr></argument>, <argument><expr><name>commit_items</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
                                  <argument><expr><name>editor</name></expr></argument>, <argument><expr><name>edit_baton</name></expr></argument>,
                                  <argument><expr>0</expr></argument>, <comment type="block">/* ### any notify_path_offset needed? */</comment>
                                  <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Commit failed (details follow):"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Sleep to ensure timestamp integrity. */</comment>
  <expr_stmt><expr><call><name>svn_sleep_for_timestamps</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* It's only a read lock, so unlocking is harmless. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_close</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Peform each individual copy operation for a repos -&gt; wc copy.  A
   helper for repos_to_wc_copy(). */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>repos_to_wc_copy_single</name><parameter_list>(<param><decl><type><name>svn_client__copy_pair_t</name> *</type><name>pair</name></decl></param>,
                        <param><decl><type><name>svn_boolean_t</name></type> <name>same_repositories</name></decl></param>,
                        <param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
                        <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                        <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>src_revnum</name> <init>= <expr><name><name>pair</name>-&gt;<name>src_revnum</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>src_mergeinfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>dst_entry</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>pair</name>-&gt;<name>src_kind</name></name> == <name>svn_node_dir</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__checkout_internal</name>
              <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>pair</name>-&gt;<name>src_original</name></name></expr></argument>, <argument><expr><name><name>pair</name>-&gt;<name>dst</name></name></expr></argument>, <argument><expr>&amp;<name><name>pair</name>-&gt;<name>src_peg_revision</name></name></expr></argument>,
               <argument><expr>&amp;<name><name>pair</name>-&gt;<name>src_op_revision</name></name></expr></argument>,
               <argument><expr><call><name>SVN_DEPTH_INFINITY_OR_FILES</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></argument>,
               <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Rewrite URLs recursively, remove wcprops, and mark everything
         as 'copied' -- assuming that the src and dst are from the
         same repository.  (It's kind of weird that svn_wc_add() is the
         way to do this; see its doc for more about the controversy.) */</comment>
      <if>if <condition>(<expr><name>same_repositories</name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>dst_access</name></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_open3</name><argument_list>(<argument><expr>&amp;<name>dst_access</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name><name>pair</name>-&gt;<name>dst</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
                                   <argument><expr>-1</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>cancel_func</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>,
                                   <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>dst_entry</name></expr></argument>, <argument><expr><name><name>pair</name>-&gt;<name>dst</name></name></expr></argument>, <argument><expr><name>dst_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                               <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <if>if <condition>(<expr><name><name>pair</name>-&gt;<name>src_op_revision</name>.<name>kind</name></name> == <name>svn_opt_revision_head</name></expr>)</condition><then>
            <block>{
              <comment type="block">/* If we just checked out from the "head" revision,
                 that's fine, but we don't want to pass a '-1' as a
                 copyfrom_rev to svn_wc_add().  That function will
                 dump it right into the entry, and when we try to
                 commit later on, the 'add-dir-with-history' step will
                 be -very- unhappy; it only accepts specific
                 revisions.

                 On the other hand, we *could* say that -1 is a
                 legitimate copyfrom_rev, but I think that's bogus.
                 Somebody made a copy from a particular revision; if
                 they wait a long time to commit, it would be terrible
                 if the copied happened from a newer revision!! */</comment>

              <comment type="block">/* We just did a checkout; whatever revision we just
                 got, that should be the copyfrom_revision when we
                 commit later. */</comment>
              <expr_stmt><expr><name>src_revnum</name> = <name><name>dst_entry</name>-&gt;<name>revision</name></name></expr>;</expr_stmt>
            }</block></then></if>

          <comment type="block">/* Schedule dst_path for addition in parent, with copy history.
             (This function also recursively puts a 'copied' flag on every
             entry). */</comment>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_add2</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>dst</name></name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name><name>pair</name>-&gt;<name>src</name></name></expr></argument>,
                              <argument><expr><name>src_revnum</name></expr></argument>,
                              <argument><expr><name><name>ctx</name>-&gt;<name>cancel_func</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>,
                              <argument><expr><name><name>ctx</name>-&gt;<name>notify_func2</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>notify_baton2</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="block">/* ### Recording of implied mergeinfo should really occur
             ### *before* the notification callback is invoked by
             ### svn_wc_add2(), but can't occur before we add the new
             ### source path. */</comment>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>calculate_target_mergeinfo</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>&amp;<name>src_mergeinfo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, 
                                             <argument><expr><name><name>pair</name>-&gt;<name>src</name></name></expr></argument>, <argument><expr><name>src_revnum</name></expr></argument>, 
                                             <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>extend_wc_mergeinfo</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>dst</name></name></expr></argument>, <argument><expr><name>dst_entry</name></expr></argument>, <argument><expr><name>src_mergeinfo</name></expr></argument>,
                                      <argument><expr><name>dst_access</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else  <comment type="block">/* different repositories */</comment>
        <block>{
          <comment type="block">/* ### Someday, we would just call svn_wc_add(), as above,
             but with no copyfrom args.  I.e. in the
             directory-foreign-UUID case, we still want everything
             scheduled for addition, URLs rewritten, and wcprop cache
             deleted, but WITHOUT any copied flags or copyfrom urls.
             Unfortunately, svn_wc_add() is such a mess that it chokes
             at the moment when we pass a NULL copyfromurl. */</comment>

          <return>return <expr><call><name>svn_error_createf</name>
            <argument_list>(<argument><expr><name>SVN_ERR_UNSUPPORTED_FEATURE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
             <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Source URL '%s' is from foreign repository; "
               "leaving it as a disjoint WC"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pair</name>-&gt;<name>src</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></then> <comment type="block">/* end directory case */</comment>

  <else>else <if>if <condition>(<expr><name><name>pair</name>-&gt;<name>src_kind</name></name> == <name>svn_node_file</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>apr_file_t</name> *</type><name>fp</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>fstream</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>real_rev</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>new_text_path</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>new_props</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_rel</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_open_unique_file2</name><argument_list>(<argument><expr>&amp;<name>fp</name></expr></argument>, <argument><expr>&amp;<name>new_text_path</name></expr></argument>, <argument><expr><name><name>pair</name>-&gt;<name>dst</name></name></expr></argument>, <argument><expr>".tmp"</expr></argument>,
                                       <argument><expr><name>svn_io_file_del_none</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>fstream</name> = <call><name>svn_stream_from_aprfile2</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__path_relative_to_session</name><argument_list>(<argument><expr>&amp;<name>src_rel</name></expr></argument>, <argument><expr><name>ra_session</name></expr></argument>, 
                                                   <argument><expr><name><name>pair</name>-&gt;<name>src</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_file</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>src_rel</name></expr></argument>, <argument><expr><name>src_revnum</name></expr></argument>, <argument><expr><name>fstream</name></expr></argument>,
                              <argument><expr>&amp;<name>real_rev</name></expr></argument>, <argument><expr>&amp;<name>new_props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_close</name><argument_list>(<argument><expr><name>fstream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* If SRC_REVNUM is invalid (HEAD), then REAL_REV is now the
         revision that was actually retrieved.  This is the value we
         want to use as 'copyfrom_rev' below. */</comment>
      <if>if <condition>(<expr>! <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>src_revnum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><name>src_revnum</name> = <name>real_rev</name></expr>;</expr_stmt></then></if>

      <expr_stmt><expr><name>err</name> = <call><name>svn_wc_add_repos_file2</name>
        <argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>dst</name></name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
         <argument><expr><name>new_text_path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>new_props</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
         <argument><expr><name>same_repositories</name> ? <name><name>pair</name>-&gt;<name>src</name></name> : <name>NULL</name></expr></argument>,
         <argument><expr><name>same_repositories</name> ? <name>src_revnum</name> : <name>SVN_INVALID_REVNUM</name></expr></argument>,
         <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>dst_entry</name></expr></argument>, <argument><expr><name><name>pair</name>-&gt;<name>dst</name></name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>calculate_target_mergeinfo</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>&amp;<name>src_mergeinfo</name></expr></argument>,
                                         <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>pair</name>-&gt;<name>src</name></name></expr></argument>, <argument><expr><name>src_revnum</name></expr></argument>, 
                                         <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>extend_wc_mergeinfo</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>dst</name></name></expr></argument>, <argument><expr><name>dst_entry</name></expr></argument>, <argument><expr><name>src_mergeinfo</name></expr></argument>,
                                  <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Ideally, svn_wc_add_repos_file() would take a notify function
         and baton, and we wouldn't have to make this call here.
         However, the situation is... complicated.  See issue #1552
         for the full story. */</comment>
      <if>if <condition>(<expr>!<name>err</name> &amp;&amp; <name><name>ctx</name>-&gt;<name>notify_func2</name></name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>svn_wc_notify_t</name> *</type><name>notify</name> <init>= <expr><call><name>svn_wc_create_notify</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>dst</name></name></expr></argument>,
                                                         <argument><expr><name>svn_wc_notify_add</name></expr></argument>,
                                                         <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>notify</name>-&gt;<name>kind</name></name> = <name><name>pair</name>-&gt;<name>src_kind</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><call>(*<name><name>ctx</name>-&gt;<name>notify_func2</name></name>)<argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>notify_baton2</name></name></expr></argument>, <argument><expr><name>notify</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

      <expr_stmt><expr><call><name>svn_sleep_for_timestamps</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></else></if>

    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>repos_to_wc_copy</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>copy_pairs</name></decl></param>,
                 <param><decl><type><name>svn_boolean_t</name></type> <name>make_parents</name></decl></param>,
                 <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>top_src_url</name></decl>, *<decl><type ref="prev"/><name>top_dst_path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_uuid</name> <init>= <expr><name>NULL</name></expr></init>, *<name>dst_uuid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>same_repositories</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iterpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <comment type="block">/* Get the real path for the source, based upon its peg revision. */</comment>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>copy_pairs</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>svn_client__copy_pair_t</name> *</type><name>pair</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>copy_pairs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
                                                    <argument><expr><name>svn_client__copy_pair_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src</name></decl>, *<decl><type ref="prev"/><name>ignored_url</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_opt_revision_t</name> *</type><name>new_rev</name></decl>, *<decl><type ref="prev"/><name>ignored_rev</name></decl>, <decl><type ref="prev"/><name>dead_end_rev</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>dead_end_rev</name>.<name>kind</name></name> = <name>svn_opt_revision_unspecified</name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__repos_locations</name><argument_list>(<argument><expr>&amp;<name>src</name></expr></argument>, <argument><expr>&amp;<name>new_rev</name></expr></argument>,
                                          <argument><expr>&amp;<name>ignored_url</name></expr></argument>, <argument><expr>&amp;<name>ignored_rev</name></expr></argument>,
                                          <argument><expr><name>NULL</name></expr></argument>,
                                          <argument><expr><name><name>pair</name>-&gt;<name>src</name></name></expr></argument>,
                                          <argument><expr>&amp;<name><name>pair</name>-&gt;<name>src_peg_revision</name></name></expr></argument>,
                                          <argument><expr>&amp;<name><name>pair</name>-&gt;<name>src_op_revision</name></name></expr></argument>,
                                          <argument><expr>&amp;<name>dead_end_rev</name></expr></argument>,
                                          <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>pair</name>-&gt;<name>src_original</name></name> = <name><name>pair</name>-&gt;<name>src</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pair</name>-&gt;<name>src</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

  <expr_stmt><expr><call><name>get_copy_pair_ancestors</name><argument_list>(<argument><expr><name>copy_pairs</name></expr></argument>, <argument><expr>&amp;<name>top_src_url</name></expr></argument>, <argument><expr>&amp;<name>top_dst_path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name><name>copy_pairs</name>-&gt;<name>nelts</name></name> == 1</expr>)</condition><then>
    <expr_stmt><expr><name>top_src_url</name> = <call><name>svn_path_dirname</name><argument_list>(<argument><expr><name>top_src_url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <comment type="block">/* Open a repository session to the longest common src ancestor.  We do not
     (yet) have a working copy, so we don't have a corresponding path and
     tempfiles cannot go into the admin area. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__open_ra_session_internal</name><argument_list>(<argument><expr>&amp;<name>ra_session</name></expr></argument>, <argument><expr><name>top_src_url</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                               <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
                                               <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Pass null for the path, to ensure error if trying to get a
     revision based on the working copy.  */</comment>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>copy_pairs</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>svn_client__copy_pair_t</name> *</type><name>pair</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>copy_pairs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
                                                    <argument><expr><name>svn_client__copy_pair_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_revision_number</name>
              <argument_list>(<argument><expr>&amp;<name><name>pair</name>-&gt;<name>src_revnum</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ra_session</name></expr></argument>, <argument><expr>&amp;<name><name>pair</name>-&gt;<name>src_op_revision</name></name></expr></argument>,
               <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

  <comment type="block">/* Get the correct src path for the peg revision used, and verify that we
     aren't overwriting an existing path. */</comment>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>copy_pairs</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>svn_client__copy_pair_t</name> *</type><name>pair</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>copy_pairs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
                                                    <argument><expr><name>svn_client__copy_pair_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>dst_parent_kind</name></decl>, <decl><type ref="prev"/><name>dst_kind</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_parent</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_rel</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Next, make sure that the path exists in the repository. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__path_relative_to_session</name><argument_list>(<argument><expr>&amp;<name>src_rel</name></expr></argument>, <argument><expr><name>ra_session</name></expr></argument>, 
                                                   <argument><expr><name><name>pair</name>-&gt;<name>src</name></name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_check_path</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>src_rel</name></expr></argument>, <argument><expr><name><name>pair</name>-&gt;<name>src_revnum</name></name></expr></argument>,
                                <argument><expr>&amp;<name><name>pair</name>-&gt;<name>src_kind</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name><name>pair</name>-&gt;<name>src_kind</name></name> == <name>svn_node_none</name></expr>)</condition><then>
        <block>{
          <if>if <condition>(<expr><call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>src_revnum</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><call><name>svn_error_createf</name>
              <argument_list>(<argument><expr><name>SVN_ERR_FS_NOT_FOUND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
               <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Path '%s' not found in revision %ld"</expr></argument>)</argument_list></call></expr></argument>,
               <argument><expr><name><name>pair</name>-&gt;<name>src</name></name></expr></argument>, <argument><expr><name><name>pair</name>-&gt;<name>src_revnum</name></name></expr></argument>)</argument_list></call></expr>;</return></then>
          <else>else
            <return>return <expr><call><name>svn_error_createf</name>
              <argument_list>(<argument><expr><name>SVN_ERR_FS_NOT_FOUND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
               <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Path '%s' not found in head revision"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pair</name>-&gt;<name>src</name></name></expr></argument>)</argument_list></call></expr>;</return></else></if>
        }</block></then></if>

      <comment type="block">/* Figure out about dst. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_check_path</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>dst</name></name></expr></argument>, <argument><expr>&amp;<name>dst_kind</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>dst_kind</name> != <name>svn_node_none</name></expr>)</condition><then>
        <block>{
          <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_ENTRY_EXISTS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                   <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Path '%s' already exists"</expr></argument>)</argument_list></call></expr></argument>,
                                   <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>dst</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

      <comment type="block">/* Make sure the destination parent is a directory and produce a clear
         error message if it is not. */</comment>
      <expr_stmt><expr><name>dst_parent</name> = <call><name>svn_path_dirname</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>dst</name></name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_check_path</name><argument_list>(<argument><expr><name>dst_parent</name></expr></argument>, <argument><expr>&amp;<name>dst_parent_kind</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>make_parents</name> &amp;&amp; <name>dst_parent_kind</name> == <name>svn_node_none</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__make_local_parents</name><argument_list>(<argument><expr><name>dst_parent</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>,
                                                 <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else <if>if <condition>(<expr><name>dst_parent_kind</name> != <name>svn_node_dir</name></expr>)</condition><then>
        <block>{
          <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_WC_NOT_DIRECTORY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                   <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Path '%s' is not a directory"</expr></argument>)</argument_list></call></expr></argument>,
                                   <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>dst_parent</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if></else></if>
    }</block></for>

  <comment type="block">/* Probe the wc at the longest common dst ancestor. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_probe_open3</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>top_dst_path</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
                                 <argument><expr>0</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>cancel_func</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>,
                                 <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* We've already checked for physical obstruction by a working file.
     But there could also be logical obstruction by an entry whose
     working file happens to be missing.*/</comment>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>copy_pairs</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>svn_client__copy_pair_t</name> *</type><name>pair</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>copy_pairs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
                                                    <argument><expr><name>svn_client__copy_pair_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>ent</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>ent</name></expr></argument>, <argument><expr><name><name>pair</name>-&gt;<name>dst</name></name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>ent</name> &amp;&amp; (<name><name>ent</name>-&gt;<name>kind</name></name> != <name>svn_node_dir</name>) &amp;&amp;
          (<name><name>ent</name>-&gt;<name>schedule</name></name> != <name>svn_wc_schedule_delete</name>)</expr>)</condition><then>
        <return>return <expr><call><name>svn_error_createf</name>
          <argument_list>(<argument><expr><name>SVN_ERR_WC_OBSTRUCTED_UPDATE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
           <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Entry for '%s' exists (though the working file is missing)"</expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>dst</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
    }</block></for>

  <comment type="block">/* Decide whether the two repositories are the same or not. */</comment>
  <block>{
    <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>src_err</name></decl>, *<decl><type ref="prev"/><name>dst_err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>parent</name></decl>;</decl_stmt>

    <comment type="block">/* Get the repository uuid of SRC_URL */</comment>
    <expr_stmt><expr><name>src_err</name> = <call><name>svn_ra_get_uuid2</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>&amp;<name>src_uuid</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>src_err</name> &amp;&amp; <name><name>src_err</name>-&gt;<name>apr_err</name></name> != <name>SVN_ERR_RA_NO_REPOS_UUID</name></expr>)</condition><then>
      <return>return <expr><name>src_err</name></expr>;</return></then></if>

    <comment type="block">/* Get repository uuid of dst's parent directory, since dst may
       not exist.  ### TODO:  we should probably walk up the wc here,
       in case the parent dir has an imaginary URL.  */</comment>
    <if>if <condition>(<expr><name><name>copy_pairs</name>-&gt;<name>nelts</name></name> == 1</expr>)</condition><then>
      <expr_stmt><expr><call><name>svn_path_split</name><argument_list>(<argument><expr><name>top_dst_path</name></expr></argument>, <argument><expr>&amp;<name>parent</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else
      <expr_stmt><expr><name>parent</name> = <name>top_dst_path</name></expr>;</expr_stmt></else></if>
    <expr_stmt><expr><name>dst_err</name> = <call><name>svn_client_uuid_from_path</name><argument_list>(<argument><expr>&amp;<name>dst_uuid</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
                                        <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>dst_err</name> &amp;&amp; <name><name>dst_err</name>-&gt;<name>apr_err</name></name> != <name>SVN_ERR_RA_NO_REPOS_UUID</name></expr>)</condition><then>
      <return>return <expr><name>dst_err</name></expr>;</return></then></if>

    <comment type="block">/* If either of the UUIDs are nonexistent, then at least one of
       the repositories must be very old.  Rather than punish the
       user, just assume the repositories are different, so no
       copy-history is attempted. */</comment>
    <if>if <condition>(<expr><name>src_err</name> || <name>dst_err</name> || (! <name>src_uuid</name>) || (! <name>dst_uuid</name>)</expr>)</condition><then>
      <expr_stmt><expr><name>same_repositories</name> = <name>FALSE</name></expr>;</expr_stmt></then>

    <else>else
      <expr_stmt><expr><name>same_repositories</name> = (<call><name>strcmp</name><argument_list>(<argument><expr><name>src_uuid</name></expr></argument>, <argument><expr><name>dst_uuid</name></expr></argument>)</argument_list></call> == 0) ? <name>TRUE</name> : <name>FALSE</name></expr>;</expr_stmt></else></if>
  }</block>

  <comment type="block">/* Perform the move for each of the copy_pairs. */</comment>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>copy_pairs</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <comment type="block">/* Check for cancellation */</comment>
      <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>cancel_func</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>ctx</name>-&gt;<name>cancel_func</name></name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>repos_to_wc_copy_single</name><argument_list>(<argument><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>copy_pairs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
                                                    <argument><expr><name>svn_client__copy_pair_t</name> *</expr></argument>)</argument_list></call></expr></argument>,
                                      <argument><expr><name>same_repositories</name></expr></argument>,
                                      <argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
                                      <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_close</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEED_REPOS_REVNUM</name><parameter_list>(<param><type><name>revision</name></type></param>)</parameter_list></cpp:macro> \
        <cpp:value>((revision.kind != svn_opt_revision_unspecified) \
          &amp;&amp; (revision.kind != svn_opt_revision_working))</cpp:value></cpp:define>

<comment type="block">/* Perform all allocations in POOL. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>setup_copy</name><parameter_list>(<param><decl><type><name>svn_commit_info_t</name> **</type><name>commit_info_p</name></decl></param>,
           <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>sources</name></decl></param>,
           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_path_in</name></decl></param>,
           <param><decl><type><name>svn_boolean_t</name></type> <name>is_move</name></decl></param>,
           <param><decl><type><name>svn_boolean_t</name></type> <name>force</name></decl></param>,
           <param><decl><type><name>svn_boolean_t</name></type> <name>make_parents</name></decl></param>,
           <param><decl><type><specifier>const</specifier> <name>apr_hash_t</name> *</type><name>revprop_table</name></decl></param>,
           <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>copy_pairs</name> <init>= <expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>sources</name>-&gt;<name>nelts</name></name></expr></argument>,
                                                  <argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>copy_pair</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>srcs_are_urls</name></decl>, <decl><type ref="prev"/><name>dst_is_url</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <comment type="block">/* Check to see if the supplied peg revisions make sense. */</comment>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>sources</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>svn_client_copy_source_t</name> *</type><name>source</name> <init>=
        <expr>(<call>(<name>svn_client_copy_source_t</name> **) <argument_list>(<argument><expr><name><name>sources</name>-&gt;<name>elts</name></name></expr></argument>)</argument_list></call>)<index>[<expr><name>i</name></expr>]</index></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><call><name>svn_path_is_url</name><argument_list>(<argument><expr><name><name>source</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call>
          &amp;&amp; (<name><name>source</name>-&gt;<name>peg_revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_base</name>
              || <name><name>source</name>-&gt;<name>peg_revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_committed</name>
              || <name><name>source</name>-&gt;<name>peg_revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_previous</name>)</expr>)</condition><then>
        <return>return <expr><call><name>svn_error_create</name>
          <argument_list>(<argument><expr><name>SVN_ERR_CLIENT_BAD_REVISION</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
           <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Revision type requires a working copy path, not a URL"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
    }</block></for>

  <comment type="block">/* Are either of our paths URLs?
   * Just check the first src_path.  If there are more than one, we'll check
   * for homogeneity amoung them down below. */</comment>
  <expr_stmt><expr><name>srcs_are_urls</name> = <call><name>svn_path_is_url</name><argument_list>(<argument><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>sources</name></expr></argument>, <argument><expr>0</expr></argument>,
                                  <argument><expr><name>svn_client_copy_source_t</name> *</expr></argument>)</argument_list></call>-&gt;<name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>dst_is_url</name> = <call><name>svn_path_is_url</name><argument_list>(<argument><expr><name>dst_path_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If we have multiple source paths, it implies the dst_path is a directory
   * we are moving or copying into.  Populate the dst_paths array to contain
   * a destination path for each of the source paths. */</comment>
  <if>if <condition>(<expr><name><name>sources</name>-&gt;<name>nelts</name></name> &gt; 1</expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iterpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>sources</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
          <decl_stmt><decl><type><name>svn_client_copy_source_t</name> *</type><name>source</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>sources</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
                                               <argument><expr><name>svn_client_copy_source_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>svn_client__copy_pair_t</name> *</type><name>pair</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>pair</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_basename</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>src_is_url</name> <init>= <expr><call><name>svn_path_is_url</name><argument_list>(<argument><expr><name><name>source</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><name><name>pair</name>-&gt;<name>src</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>source</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pair</name>-&gt;<name>src_op_revision</name></name> = *<name><name>source</name>-&gt;<name>revision</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pair</name>-&gt;<name>src_peg_revision</name></name> = *<name><name>source</name>-&gt;<name>peg_revision</name></name></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_opt_resolve_revisions</name><argument_list>(<argument><expr>&amp;<name><name>pair</name>-&gt;<name>src_peg_revision</name></name></expr></argument>,
                                            <argument><expr>&amp;<name><name>pair</name>-&gt;<name>src_op_revision</name></name></expr></argument>,
                                            <argument><expr><name>src_is_url</name></expr></argument>,
                                            <argument><expr><name>TRUE</name></expr></argument>,
                                            <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>src_basename</name> = <call><name>svn_path_basename</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>src</name></name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>srcs_are_urls</name> &amp;&amp; ! <name>dst_is_url</name></expr>)</condition><then>
            <expr_stmt><expr><name>src_basename</name> = <call><name>svn_path_uri_decode</name><argument_list>(<argument><expr><name>src_basename</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

          <comment type="block">/* Check to see if all the sources are urls or all working copy
           * paths. */</comment>
          <if>if <condition>(<expr><name>src_is_url</name> != <name>srcs_are_urls</name></expr>)</condition><then>
            <return>return <expr><call><name>svn_error_create</name>
              <argument_list>(<argument><expr><name>SVN_ERR_UNSUPPORTED_FEATURE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
               <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Cannot mix repository and working copy sources"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>

          <expr_stmt><expr><name><name>pair</name>-&gt;<name>dst</name></name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>dst_path_in</name></expr></argument>, <argument><expr><name>src_basename</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>copy_pairs</name></expr></argument>, <argument><expr><name>svn_client__copy_pair_t</name> *</expr></argument>)</argument_list></call> = <name>pair</name></expr>;</expr_stmt>
        }</block></for>

      <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <comment type="block">/* Only one source path. */</comment>
      <decl_stmt><decl><type><name>svn_client__copy_pair_t</name> *</type><name>pair</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>pair</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_client_copy_source_t</name> *</type><name>source</name> <init>=
        <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>sources</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>svn_client_copy_source_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name><name>pair</name>-&gt;<name>src</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>source</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pair</name>-&gt;<name>src_op_revision</name></name> = *<name><name>source</name>-&gt;<name>revision</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pair</name>-&gt;<name>src_peg_revision</name></name> = *<name><name>source</name>-&gt;<name>peg_revision</name></name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_opt_resolve_revisions</name><argument_list>(<argument><expr>&amp;<name><name>pair</name>-&gt;<name>src_peg_revision</name></name></expr></argument>,
                                        <argument><expr>&amp;<name><name>pair</name>-&gt;<name>src_op_revision</name></name></expr></argument>,
                                        <argument><expr><call><name>svn_path_is_url</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>src</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                        <argument><expr><name>TRUE</name></expr></argument>,
                                        <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>pair</name>-&gt;<name>dst</name></name> = <name>dst_path_in</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>copy_pairs</name></expr></argument>, <argument><expr><name>svn_client__copy_pair_t</name> *</expr></argument>)</argument_list></call> = <name>pair</name></expr>;</expr_stmt>
    }</block></else></if>

  <if>if <condition>(<expr>!<name>srcs_are_urls</name> &amp;&amp; !<name>dst_is_url</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iterpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>copy_pairs</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr> )
        <block>{
          <decl_stmt><decl><type><name>svn_client__copy_pair_t</name> *</type><name>pair</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>copy_pairs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
                                            <argument><expr><name>svn_client__copy_pair_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <if>if <condition>(<expr><call><name>svn_path_is_child</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>src</name></name></expr></argument>, <argument><expr><name><name>pair</name>-&gt;<name>dst</name></name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><call><name>svn_error_createf</name>
              <argument_list>(<argument><expr><name>SVN_ERR_UNSUPPORTED_FEATURE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
               <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Cannot copy path '%s' into its own child '%s'"</expr></argument>)</argument_list></call></expr></argument>,
               <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>src</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
               <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>dst</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
        }</block></for>

      <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <if>if <condition>(<expr><name>is_move</name></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><name>srcs_are_urls</name> == <name>dst_is_url</name></expr>)</condition><then>
        <block>{
          <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>copy_pairs</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
            <block>{
              <decl_stmt><decl><type><name>svn_client__copy_pair_t</name> *</type><name>pair</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>copy_pairs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
                                                <argument><expr><name>svn_client__copy_pair_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

              <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>src</name></name></expr></argument>, <argument><expr><name><name>pair</name>-&gt;<name>dst</name></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
                <return>return <expr><call><name>svn_error_createf</name>
                  <argument_list>(<argument><expr><name>SVN_ERR_UNSUPPORTED_FEATURE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                   <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Cannot move path '%s' into itself"</expr></argument>)</argument_list></call></expr></argument>,
                   <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>src</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
            }</block></for>
        }</block></then>
      <else>else
        <block>{
          <comment type="block">/* Disallow moves between the working copy and the repository. */</comment>
          <return>return <expr><call><name>svn_error_create</name>
            <argument_list>(<argument><expr><name>SVN_ERR_UNSUPPORTED_FEATURE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
             <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Moves between the working copy and the repository are not "
               "supported"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></then>
  <else>else
    <block>{
      <if>if <condition>(<expr>!<name>srcs_are_urls</name></expr>)</condition><then>
        <block>{
          <comment type="block">/* If we are doing a wc-&gt;* move, but with an operational revision
             other than the working copy revision, we are really doing a
             repo-&gt;* move, because we're going to need to get the rev from the
             repo. */</comment>

          <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>need_repos_op_rev</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>need_repos_peg_rev</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

          <comment type="block">/* Check to see if any revision is something other than
             svn_opt_revision_unspecified or svn_opt_revision_working. */</comment>
          <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>copy_pairs</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
            <block>{
              <decl_stmt><decl><type><name>svn_client__copy_pair_t</name> *</type><name>pair</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>copy_pairs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
                                                <argument><expr><name>svn_client__copy_pair_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

              <if>if <condition>(<expr><call><name>NEED_REPOS_REVNUM</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>src_op_revision</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><name>need_repos_op_rev</name> = <name>TRUE</name></expr>;</expr_stmt></then></if>

              <if>if <condition>(<expr><call><name>NEED_REPOS_REVNUM</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>src_peg_revision</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><name>need_repos_peg_rev</name> = <name>TRUE</name></expr>;</expr_stmt></then></if>

              <if>if <condition>(<expr><name>need_repos_op_rev</name> || <name>need_repos_peg_rev</name></expr>)</condition><then>
                <break>break;</break></then></if>
            }</block></for>

          <if>if <condition>(<expr><name>need_repos_op_rev</name> || <name>need_repos_peg_rev</name></expr>)</condition><then>
            <block>{
              <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iterpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

              <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>copy_pairs</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
                <block>{
                  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl>;</decl_stmt>
                  <decl_stmt><decl><type><name>svn_client__copy_pair_t</name> *</type><name>pair</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>copy_pairs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
                                                    <argument><expr><name>svn_client__copy_pair_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                  <comment type="block">/* We can convert the working copy path to a URL based on the
                     entries file. */</comment>
                  <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>  <comment type="block">/* ### FIXME local */</comment>
                  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>

                  <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_probe_open3</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                                 <argument><expr><name><name>pair</name>-&gt;<name>src</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr>0</expr></argument>,
                                                 <argument><expr><name><name>ctx</name>-&gt;<name>cancel_func</name></name></expr></argument>,
                                                 <argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>,
                                                 <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_versioned</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name><name>pair</name>-&gt;<name>src</name></name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
                                                  <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_close</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                  <expr_stmt><expr><name>url</name> = (<name><name>entry</name>-&gt;<name>copied</name></name> ? <name><name>entry</name>-&gt;<name>copyfrom_url</name></name> : <name><name>entry</name>-&gt;<name>url</name></name>)</expr>;</expr_stmt>
                  <if>if <condition>(<expr><name>url</name> == <name>NULL</name></expr>)</condition><then>
                    <return>return <expr><call><name>svn_error_createf</name>
                      <argument_list>(<argument><expr><name>SVN_ERR_ENTRY_MISSING_URL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                       <argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s' does not have a URL associated with it"</expr></argument>)</argument_list></call></expr></argument>,
                       <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>src</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>

                  <expr_stmt><expr><name><name>pair</name>-&gt;<name>src</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                  <if>if <condition>(<expr>!<name>need_repos_peg_rev</name>
                      || <name><name>pair</name>-&gt;<name>src_peg_revision</name>.<name>kind</name></name> == <name>svn_opt_revision_base</name></expr>)</condition><then>
                    <block>{
                      <comment type="block">/* Default the peg revision to that of the WC entry. */</comment>
                      <expr_stmt><expr><name><name>pair</name>-&gt;<name>src_peg_revision</name>.<name>kind</name></name> = <name>svn_opt_revision_number</name></expr>;</expr_stmt>
                      <expr_stmt><expr><name><name>pair</name>-&gt;<name>src_peg_revision</name>.<name>value</name>.<name>number</name></name> =
                        (<name><name>entry</name>-&gt;<name>copied</name></name> ? <name><name>entry</name>-&gt;<name>copyfrom_rev</name></name> : <name><name>entry</name>-&gt;<name>revision</name></name>)</expr>;</expr_stmt>
                    }</block></then></if>

                  <if>if <condition>(<expr><name><name>pair</name>-&gt;<name>src_op_revision</name>.<name>kind</name></name> == <name>svn_opt_revision_base</name></expr>)</condition><then>
                    <block>{
                      <comment type="block">/* Use the entry's revision as the operational rev. */</comment>
                      <expr_stmt><expr><name><name>pair</name>-&gt;<name>src_op_revision</name>.<name>kind</name></name> = <name>svn_opt_revision_number</name></expr>;</expr_stmt>
                      <expr_stmt><expr><name><name>pair</name>-&gt;<name>src_op_revision</name>.<name>value</name>.<name>number</name></name> =
                        (<name><name>entry</name>-&gt;<name>copied</name></name> ? <name><name>entry</name>-&gt;<name>copyfrom_rev</name></name> : <name><name>entry</name>-&gt;<name>revision</name></name>)</expr>;</expr_stmt>
                    }</block></then></if>
                }</block></for>

              <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>srcs_are_urls</name> = <name>TRUE</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></else></if>

  <comment type="block">/* Now, call the right handler for the operation. */</comment>
  <if>if <condition>(<expr>(! <name>srcs_are_urls</name>) &amp;&amp; (! <name>dst_is_url</name>)</expr>)</condition><then>
    <block>{
      <expr_stmt><expr>*<name>commit_info_p</name> = <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>wc_to_wc_copy</name><argument_list>(<argument><expr><name>copy_pairs</name></expr></argument>, <argument><expr><name>is_move</name></expr></argument>, <argument><expr><name>make_parents</name></expr></argument>,
                            <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr>(! <name>srcs_are_urls</name>) &amp;&amp; (<name>dst_is_url</name>)</expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>wc_to_repos_copy</name><argument_list>(<argument><expr><name>commit_info_p</name></expr></argument>, <argument><expr><name>copy_pairs</name></expr></argument>, <argument><expr><name>make_parents</name></expr></argument>,
                               <argument><expr><name>revprop_table</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr>(<name>srcs_are_urls</name>) &amp;&amp; (! <name>dst_is_url</name>)</expr>)</condition><then>
    <block>{
      <expr_stmt><expr>*<name>commit_info_p</name> = <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>repos_to_wc_copy</name><argument_list>(<argument><expr><name>copy_pairs</name></expr></argument>, <argument><expr><name>make_parents</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>repos_to_repos_copy</name><argument_list>(<argument><expr><name>commit_info_p</name></expr></argument>, <argument><expr><name>copy_pairs</name></expr></argument>, <argument><expr><name>make_parents</name></expr></argument>,
                                  <argument><expr><name>revprop_table</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>is_move</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if></else></if></else></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<escape char="0xc"/>
<comment type="block">/* Public Interfaces */</comment>
<function><type><name>svn_error_t</name> *</type>
<name>svn_client_copy4</name><parameter_list>(<param><decl><type><name>svn_commit_info_t</name> **</type><name>commit_info_p</name></decl></param>,
                 <param><decl><type><name>apr_array_header_t</name> *</type><name>sources</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_path</name></decl></param>,
                 <param><decl><type><name>svn_boolean_t</name></type> <name>copy_as_child</name></decl></param>,
                 <param><decl><type><name>svn_boolean_t</name></type> <name>make_parents</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>apr_hash_t</name> *</type><name>revprop_table</name></decl></param>,
                 <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_commit_info_t</name> *</type><name>commit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>sources</name>-&gt;<name>nelts</name></name> &gt; 1 &amp;&amp; !<name>copy_as_child</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CLIENT_MULTIPLE_SOURCES_DISALLOWED</name></expr></argument>,
                            <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <expr_stmt><expr><name>err</name> = <call><name>setup_copy</name><argument_list>(<argument><expr>&amp;<name>commit_info</name></expr></argument>,
                   <argument><expr><name>sources</name></expr></argument>, <argument><expr><name>dst_path</name></expr></argument>,
                   <argument><expr><name>FALSE</name></expr></argument> <comment type="block">/* is_move */</comment>,
                   <argument><expr><name>TRUE</name></expr></argument> <comment type="block">/* force, set to avoid deletion check */</comment>,
                   <argument><expr><name>make_parents</name></expr></argument>,
                   <argument><expr><name>revprop_table</name></expr></argument>,
                   <argument><expr><name>ctx</name></expr></argument>,
                   <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If the destination exists, try to copy the sources as children of the
     destination. */</comment>
  <if>if <condition>(<expr><name>copy_as_child</name> &amp;&amp; <name>err</name> &amp;&amp; (<name><name>sources</name>-&gt;<name>nelts</name></name> == 1)
        &amp;&amp; (<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_ENTRY_EXISTS</name>
            || <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_ALREADY_EXISTS</name>)</expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_path</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>sources</name></expr></argument>, <argument><expr>0</expr></argument>,
                               <argument><expr><name>svn_client_copy_source_t</name> *</expr></argument>)</argument_list></call>-&gt;<name>path</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_basename</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>src_basename</name> = <call><name>svn_path_basename</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><call><name>svn_path_is_url</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>)</argument_list></call> &amp;&amp; ! <call><name>svn_path_is_url</name><argument_list>(<argument><expr><name>dst_path</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><name>src_basename</name> = <call><name>svn_path_uri_decode</name><argument_list>(<argument><expr><name>src_basename</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <expr_stmt><expr><name>err</name> = <call><name>setup_copy</name><argument_list>(<argument><expr>&amp;<name>commit_info</name></expr></argument>,
                       <argument><expr><name>sources</name></expr></argument>,
                       <argument><expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name>dst_path</name></expr></argument>, <argument><expr><name>src_basename</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>,
                       <argument><expr><name>FALSE</name></expr></argument> <comment type="block">/* is_move */</comment>,
                       <argument><expr><name>TRUE</name></expr></argument> <comment type="block">/* force, set to avoid deletion check */</comment>,
                       <argument><expr><name>make_parents</name></expr></argument>,
                       <argument><expr><name>revprop_table</name></expr></argument>,
                       <argument><expr><name>ctx</name></expr></argument>,
                       <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <if>if <condition>(<expr><name>commit_info_p</name> != <name>NULL</name></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><name>commit_info</name></expr>)</condition><then>
        <expr_stmt><expr>*<name>commit_info_p</name> = <call><name>svn_commit_info_dup</name><argument_list>(<argument><expr><name>commit_info</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
      <else>else
        <expr_stmt><expr>*<name>commit_info_p</name> = <name>NULL</name></expr>;</expr_stmt></else></if>
    }</block></then></if>

  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_client_copy3</name><parameter_list>(<param><decl><type><name>svn_commit_info_t</name> **</type><name>commit_info_p</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_path</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>src_revision</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_path</name></decl></param>,
                 <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>sources</name> <init>= <expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>,
                                  <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>svn_client_copy_source_t</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_client_copy_source_t</name></type> <name>copy_source</name></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>copy_source</name>.<name>path</name></name> = <name>src_path</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>copy_source</name>.<name>revision</name></name> = <name>src_revision</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>copy_source</name>.<name>peg_revision</name></name> = <name>src_revision</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>sources</name></expr></argument>, <argument><expr>const <name>svn_client_copy_source_t</name> *</expr></argument>)</argument_list></call> = &amp;<name>copy_source</name></expr>;</expr_stmt>

  <return>return <expr><call><name>svn_client_copy4</name><argument_list>(<argument><expr><name>commit_info_p</name></expr></argument>, <argument><expr><name>sources</name></expr></argument>, <argument><expr><name>dst_path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                          <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_client_copy2</name><parameter_list>(<param><decl><type><name>svn_commit_info_t</name> **</type><name>commit_info_p</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_path</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>src_revision</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_path</name></decl></param>,
                 <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>err</name> = <call><name>svn_client_copy3</name><argument_list>(<argument><expr><name>commit_info_p</name></expr></argument>, <argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>src_revision</name></expr></argument>,
                         <argument><expr><name>dst_path</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If the target exists, try to copy the source as a child of the target.
     This will obviously fail if target is not a directory, but that's exactly
     what we want. */</comment>
  <if>if <condition>(<expr><name>err</name> &amp;&amp; (<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_ENTRY_EXISTS</name>
              || <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_ALREADY_EXISTS</name>)</expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_basename</name> <init>= <expr><call><name>svn_path_basename</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><call><name>svn_client_copy3</name><argument_list>(<argument><expr><name>commit_info_p</name></expr></argument>, <argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>src_revision</name></expr></argument>,
                              <argument><expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name>dst_path</name></expr></argument>, <argument><expr><name>src_basename</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
                              <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_client_copy</name><parameter_list>(<param><decl><type><name>svn_client_commit_info_t</name> **</type><name>commit_info_p</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_path</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>src_revision</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_path</name></decl></param>,
                <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_commit_info_t</name> *</type><name>commit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>err</name> = <call><name>svn_client_copy2</name><argument_list>(<argument><expr>&amp;<name>commit_info</name></expr></argument>, <argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>src_revision</name></expr></argument>, <argument><expr><name>dst_path</name></expr></argument>,
                         <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* These structs have the same layout for the common fields. */</comment>
  <expr_stmt><expr>*<name>commit_info_p</name> = (<name>svn_client_commit_info_t</name> *) <name>commit_info</name></expr>;</expr_stmt>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_client_move5</name><parameter_list>(<param><decl><type><name>svn_commit_info_t</name> **</type><name>commit_info_p</name></decl></param>,
                 <param><decl><type><name>apr_array_header_t</name> *</type><name>src_paths</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_path</name></decl></param>,
                 <param><decl><type><name>svn_boolean_t</name></type> <name>force</name></decl></param>,
                 <param><decl><type><name>svn_boolean_t</name></type> <name>move_as_child</name></decl></param>,
                 <param><decl><type><name>svn_boolean_t</name></type> <name>make_parents</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>apr_hash_t</name> *</type><name>revprop_table</name></decl></param>,
                 <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_commit_info_t</name> *</type><name>commit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name></type> <name>head_revision</name>
    <init>= <expr><block>{ <expr><name>svn_opt_revision_head</name></expr>, <expr><block>{ <expr>0</expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>sources</name> <init>= <expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>src_paths</name>-&gt;<name>nelts</name></name></expr></argument>,
                                  <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>svn_client_copy_source_t</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>src_paths</name>-&gt;<name>nelts</name></name> &gt; 1 &amp;&amp; !<name>move_as_child</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CLIENT_MULTIPLE_SOURCES_DISALLOWED</name></expr></argument>,
                            <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>src_paths</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_path</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>src_paths</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_client_copy_source_t</name> *</type><name>copy_source</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
                                                         <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>copy_source</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name><name>copy_source</name>-&gt;<name>path</name></name> = <name>src_path</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>copy_source</name>-&gt;<name>revision</name></name> = &amp;<name>head_revision</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>copy_source</name>-&gt;<name>peg_revision</name></name> = &amp;<name>head_revision</name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>sources</name></expr></argument>, <argument><expr><name>svn_client_copy_source_t</name> *</expr></argument>)</argument_list></call> = <name>copy_source</name></expr>;</expr_stmt>
    }</block></for>

  <expr_stmt><expr><name>err</name> = <call><name>setup_copy</name><argument_list>(<argument><expr>&amp;<name>commit_info</name></expr></argument>, <argument><expr><name>sources</name></expr></argument>, <argument><expr><name>dst_path</name></expr></argument>,
                   <argument><expr><name>TRUE</name></expr></argument> <comment type="block">/* is_move */</comment>,
                   <argument><expr><name>force</name></expr></argument>,
                   <argument><expr><name>make_parents</name></expr></argument>,
                   <argument><expr><name>revprop_table</name></expr></argument>,
                   <argument><expr><name>ctx</name></expr></argument>,
                   <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If the destination exists, try to move the sources as children of the
     destination. */</comment>
  <if>if <condition>(<expr><name>move_as_child</name> &amp;&amp; <name>err</name> &amp;&amp; (<name><name>src_paths</name>-&gt;<name>nelts</name></name> == 1)
        &amp;&amp; (<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_ENTRY_EXISTS</name>
            || <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_ALREADY_EXISTS</name>)</expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_path</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>src_paths</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_basename</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>src_basename</name> = <call><name>svn_path_basename</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>err</name> = <call><name>setup_copy</name><argument_list>(<argument><expr>&amp;<name>commit_info</name></expr></argument>, <argument><expr><name>sources</name></expr></argument>,
                       <argument><expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name>dst_path</name></expr></argument>, <argument><expr><name>src_basename</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
                       <argument><expr><name>TRUE</name></expr></argument> <comment type="block">/* is_move */</comment>,
                       <argument><expr><name>force</name></expr></argument>,
                       <argument><expr><name>make_parents</name></expr></argument>,
                       <argument><expr><name>revprop_table</name></expr></argument>,
                       <argument><expr><name>ctx</name></expr></argument>,
                       <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <if>if <condition>(<expr><name>commit_info_p</name> != <name>NULL</name></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><name>commit_info</name></expr>)</condition><then>
        <expr_stmt><expr>*<name>commit_info_p</name> = <call><name>svn_commit_info_dup</name><argument_list>(<argument><expr><name>commit_info</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
      <else>else
        <expr_stmt><expr>*<name>commit_info_p</name> = <name>commit_info</name></expr>;</expr_stmt></else></if>
    }</block></then></if>

  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_client_move4</name><parameter_list>(<param><decl><type><name>svn_commit_info_t</name> **</type><name>commit_info_p</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_path</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_path</name></decl></param>,
                 <param><decl><type><name>svn_boolean_t</name></type> <name>force</name></decl></param>,
                 <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>src_paths</name> <init>=
    <expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>src_paths</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>src_path</name></expr>;</expr_stmt>

  <return>return <expr><call><name>svn_client_move5</name><argument_list>(<argument><expr><name>commit_info_p</name></expr></argument>, <argument><expr><name>src_paths</name></expr></argument>, <argument><expr><name>dst_path</name></expr></argument>, <argument><expr><name>force</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                          <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_client_move3</name><parameter_list>(<param><decl><type><name>svn_commit_info_t</name> **</type><name>commit_info_p</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_path</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_path</name></decl></param>,
                 <param><decl><type><name>svn_boolean_t</name></type> <name>force</name></decl></param>,
                 <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>err</name> = <call><name>svn_client_move4</name><argument_list>(<argument><expr><name>commit_info_p</name></expr></argument>, <argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>dst_path</name></expr></argument>, <argument><expr><name>force</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If the target exists, try to move the source as a child of the target.
     This will obviously fail if target is not a directory, but that's exactly
     what we want. */</comment>
  <if>if <condition>(<expr><name>err</name> &amp;&amp; (<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_ENTRY_EXISTS</name>
              || <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_ALREADY_EXISTS</name>)</expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_basename</name> <init>= <expr><call><name>svn_path_basename</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><call><name>svn_client_move4</name><argument_list>(<argument><expr><name>commit_info_p</name></expr></argument>, <argument><expr><name>src_path</name></expr></argument>,
                              <argument><expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name>dst_path</name></expr></argument>, <argument><expr><name>src_basename</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
                              <argument><expr><name>force</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_client_move2</name><parameter_list>(<param><decl><type><name>svn_client_commit_info_t</name> **</type><name>commit_info_p</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_path</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_path</name></decl></param>,
                 <param><decl><type><name>svn_boolean_t</name></type> <name>force</name></decl></param>,
                 <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_commit_info_t</name> *</type><name>commit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>err</name> = <call><name>svn_client_move3</name><argument_list>(<argument><expr>&amp;<name>commit_info</name></expr></argument>, <argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>dst_path</name></expr></argument>, <argument><expr><name>force</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* These structs have the same layout for the common fields. */</comment>
  <expr_stmt><expr>*<name>commit_info_p</name> = (<name>svn_client_commit_info_t</name> *) <name>commit_info</name></expr>;</expr_stmt>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_client_move</name><parameter_list>(<param><decl><type><name>svn_client_commit_info_t</name> **</type><name>commit_info_p</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_path</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>src_revision</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_path</name></decl></param>,
                <param><decl><type><name>svn_boolean_t</name></type> <name>force</name></decl></param>,
                <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_commit_info_t</name> *</type><name>commit_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_client_copy_source_t</name></type> <name>copy_source</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>sources</name> <init>= <expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>,
                                  <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>svn_client_copy_source_t</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* It doesn't make sense to specify revisions in a move. */</comment>

  <comment type="block">/* ### todo: this check could fail wrongly.  For example,
     someone could pass in an svn_opt_revision_number that just
     happens to be the HEAD.  It's fair enough to punt then, IMHO,
     and just demand that the user not specify a revision at all;
     beats mucking up this function with RA calls and such. */</comment>
  <if>if <condition>(<expr><name><name>src_revision</name>-&gt;<name>kind</name></name> != <name>svn_opt_revision_unspecified</name>
      &amp;&amp; <name><name>src_revision</name>-&gt;<name>kind</name></name> != <name>svn_opt_revision_head</name></expr>)</condition><then>
    <block>{
      <return>return <expr><call><name>svn_error_create</name>
        <argument_list>(<argument><expr><name>SVN_ERR_UNSUPPORTED_FEATURE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
         <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Cannot specify revisions (except HEAD) with move operations"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

  <expr_stmt><expr><name><name>copy_source</name>.<name>path</name></name> = <name>src_path</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>copy_source</name>.<name>revision</name></name> = <name>src_revision</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>copy_source</name>.<name>peg_revision</name></name> = <name>src_revision</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>sources</name></expr></argument>, <argument><expr>const <name>svn_client_copy_source_t</name> *</expr></argument>)</argument_list></call> = &amp;<name>copy_source</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>err</name> = <call><name>setup_copy</name><argument_list>(<argument><expr>&amp;<name>commit_info</name></expr></argument>,
                   <argument><expr><name>sources</name></expr></argument>, <argument><expr><name>dst_path</name></expr></argument>,
                   <argument><expr><name>TRUE</name></expr></argument> <comment type="block">/* is_move */</comment>,
                   <argument><expr><name>force</name></expr></argument>,
                   <argument><expr><name>FALSE</name></expr></argument> <comment type="block">/* make_parents */</comment>,
                   <argument><expr><name>NULL</name></expr></argument>,
                   <argument><expr><name>ctx</name></expr></argument>,
                   <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* These structs have the same layout for the common fields. */</comment>
  <expr_stmt><expr>*<name>commit_info_p</name> = (<name>svn_client_commit_info_t</name> *) <name>commit_info</name></expr>;</expr_stmt>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>
</unit>
