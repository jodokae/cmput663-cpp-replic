<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_client/update.c"><comment type="block">/*
 * update.c:  wrappers around wc update functionality
 *
 * ====================================================================
 * Copyright (c) 2000-2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<comment type="block">/* ==================================================================== */</comment>


<escape char="0xc"/>
<comment type="block">/*** Includes. ***/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_wc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"client.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_wc_private.h"</cpp:file></cpp:include>

<escape char="0xc"/>
<comment type="block">/*** Code. ***/</comment>


<comment type="block">/* Context baton for file_fetcher below. */</comment>
<struct>struct <name>ff_baton</name>
<block>{
  <decl_stmt><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl>;</decl_stmt>       <comment type="block">/* client context used to open ra session */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_root</name></decl>;</decl_stmt>      <comment type="block">/* the root of the ra session */</comment>
  <decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl>;</decl_stmt>   <comment type="block">/* the secondary ra session itself */</comment>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>            <comment type="block">/* the pool where the ra session is allocated */</comment>
}</block>;</struct>


<comment type="block">/* Implementation of svn_wc_get_file_t.  A feeble callback wrapper
   around svn_ra_get_file(), so that the update_editor can use it to
   fetch any file, any time. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>file_fetcher</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
             <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
             <param><decl><type><name>svn_stream_t</name> *</type><name>stream</name></decl></param>,
             <param><decl><type><name>svn_revnum_t</name> *</type><name>fetched_rev</name></decl></param>,
             <param><decl><type><name>apr_hash_t</name> **</type><name>props</name></decl></param>,
             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>ff_baton</name> *</type><name>ffb</name> <init>= <expr>(struct <name>ff_baton</name> *)<name>baton</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr>! <name><name>ffb</name>-&gt;<name>session</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__open_ra_session_internal</name><argument_list>(<argument><expr>&amp;(<name><name>ffb</name>-&gt;<name>session</name></name>)</expr></argument>,
                                                 <argument><expr><name><name>ffb</name>-&gt;<name>repos_root</name></name></expr></argument>,
                                                 <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                                 <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
                                                 <argument><expr><name><name>ffb</name>-&gt;<name>ctx</name></name></expr></argument>, <argument><expr><name><name>ffb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_file</name><argument_list>(<argument><expr><name><name>ffb</name>-&gt;<name>session</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>,
                          <argument><expr><name>fetched_rev</name></expr></argument>, <argument><expr><name>props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_client__update_internal</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name> *</type><name>result_rev</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision</name></decl></param>,
                            <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                            <param><decl><type><name>svn_boolean_t</name></type> <name>depth_is_sticky</name></decl></param>,
                            <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_externals</name></decl></param>,
                            <param><decl><type><name>svn_boolean_t</name></type> <name>allow_unver_obstructions</name></decl></param>,
                            <param><decl><type><name>svn_boolean_t</name> *</type><name>timestamp_sleep</name></decl></param>,
                            <param><decl><type><name>svn_boolean_t</name></type> <name>send_copyfrom_args</name></decl></param>,
                            <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>update_editor</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>update_edit_baton</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_ra_reporter3_t</name> *</type><name>reporter</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>report_baton</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>anchor</name></decl>, *<decl><type ref="prev"/><name>target</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_root</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>revnum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>levels_to_lock</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_traversal_info_t</name> *</type><name>traversal_info</name> <init>= <expr><call><name>svn_wc_init_traversal_info</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>use_commit_times</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>sleep_here</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name> *</type><name>use_sleep</name> <init>= <expr><name>timestamp_sleep</name> ? <name>timestamp_sleep</name> : &amp;<name>sleep_here</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>diff3_cmd</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>dir_access</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>preserved_exts_str</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>preserved_exts</name></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>ff_baton</name> *</type><name>ffb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>server_supports_depth</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_config_t</name> *</type><name>cfg</name> <init>= <expr><name><name>ctx</name>-&gt;<name>config</name></name> ? <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>config</name></name></expr></argument>,
                                                 <argument><expr><name>SVN_CONFIG_CATEGORY_CONFIG</name></expr></argument>,
                                                 <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call> : <name>NULL</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* An unknown depth can't be sticky. */</comment>
  <if>if <condition>(<expr><name>depth</name> == <name>svn_depth_unknown</name></expr>)</condition><then>
    <expr_stmt><expr><name>depth_is_sticky</name> = <name>FALSE</name></expr>;</expr_stmt></then></if>
  
  <comment type="block">/* ### Ah, the irony.  We'd like to base our levels_to_lock on the
     ### depth we're going to use for the update.  But that may depend
     ### on the depth in the working copy, which we can't discover
     ### without calling adm_open.  We could expend an extra call,
     ### with levels_to_lock=0, to get the real depth (but only if we
     ### need to) and then make the real call... but it's not worth
     ### the complexity right now.  If the requested depth tells us to
     ### lock the entire tree when we don't actually need to, that's a
     ### performance hit, but (except for access contention) it is not
     ### a correctness problem. */</comment>
  <expr_stmt><expr><name>levels_to_lock</name> = <call><name>SVN_WC__LEVELS_TO_LOCK_FROM_DEPTH</name><argument_list>(<argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Sanity check.  Without this, the update is meaningless. */</comment>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><call><name>svn_path_is_url</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_WC_NOT_DIRECTORY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Path '%s' is not a directory"</expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <comment type="block">/* Use PATH to get the update's anchor and targets and get a write lock */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_open_anchor</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr>&amp;<name>dir_access</name></expr></argument>, <argument><expr>&amp;<name>target</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
                                 <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>levels_to_lock</name></expr></argument>,
                                 <argument><expr><name><name>ctx</name>-&gt;<name>cancel_func</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>,
                                 <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>anchor</name> = <call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get full URL from the ANCHOR. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>! <name><name>entry</name>-&gt;<name>url</name></name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_ENTRY_MISSING_URL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Entry '%s' has no URL"</expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <comment type="block">/* Get revnum set to something meaningful, so we can fetch the
     update editor. */</comment>
  <if>if <condition>(<expr><name><name>revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_number</name></expr>)</condition><then>
    <expr_stmt><expr><name>revnum</name> = <name><name>revision</name>-&gt;<name>value</name>.<name>number</name></name></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><name>revnum</name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt></else></if>

  <comment type="block">/* Get the external diff3, if any. */</comment>
  <expr_stmt><expr><call><name>svn_config_get</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr>&amp;<name>diff3_cmd</name></expr></argument>, <argument><expr><name>SVN_CONFIG_SECTION_HELPERS</name></expr></argument>,
                 <argument><expr><name>SVN_CONFIG_OPTION_DIFF3_CMD</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* See if the user wants last-commit timestamps instead of current ones. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_config_get_bool</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr>&amp;<name>use_commit_times</name></expr></argument>,
                              <argument><expr><name>SVN_CONFIG_SECTION_MISCELLANY</name></expr></argument>,
                              <argument><expr><name>SVN_CONFIG_OPTION_USE_COMMIT_TIMES</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* See which files the user wants to preserve the extension of when
     conflict files are made. */</comment>
  <expr_stmt><expr><call><name>svn_config_get</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr>&amp;<name>preserved_exts_str</name></expr></argument>, <argument><expr><name>SVN_CONFIG_SECTION_MISCELLANY</name></expr></argument>,
                 <argument><expr><name>SVN_CONFIG_OPTION_PRESERVED_CF_EXTS</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>preserved_exts</name> = *<name>preserved_exts_str</name>
    ? <call><name>svn_cstring_split</name><argument_list>(<argument><expr><name>preserved_exts_str</name></expr></argument>, <argument><expr>"\n\r\t\v "</expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>
    : <name>NULL</name></expr>;</expr_stmt>

  <comment type="block">/* Open an RA session for the URL */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__open_ra_session_internal</name><argument_list>(<argument><expr>&amp;<name>ra_session</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>url</name></name></expr></argument>,
                                               <argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
                                               <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
                                               <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* ### todo: shouldn't svn_client__get_revision_number be able
     to take a URL as easily as a local path?  */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_revision_number</name>
          <argument_list>(<argument><expr>&amp;<name>revnum</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Take the chance to set the repository root on the target.
     Why do we bother doing this for old working copies?
     There are two reasons: first, it's nice to get this information into
     old WCs so they are "ready" when we start depending on it.  (We can
     never *depend* upon it in a strict sense, however.)
     Second, if people mix old and new clients, this information will
     be dropped by the old clients, which might be annoying. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_repos_root2</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>&amp;<name>repos_root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_maybe_set_repos_root</name><argument_list>(<argument><expr><name>dir_access</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>repos_root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Build a baton for the file-fetching callback. */</comment>
  <expr_stmt><expr><name>ffb</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>ffb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ffb</name>-&gt;<name>ctx</name></name> = <name>ctx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ffb</name>-&gt;<name>repos_root</name></name> = <name>repos_root</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ffb</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>

  <comment type="block">/* Fetch the update editor.  If REVISION is invalid, that's okay;
     the RA driver will call editor-&gt;set_target_revision later on. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_get_update_editor3</name><argument_list>(<argument><expr>&amp;<name>revnum</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>target</name></expr></argument>,
                                    <argument><expr><name>use_commit_times</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>depth_is_sticky</name></expr></argument>,
                                    <argument><expr><name>allow_unver_obstructions</name></expr></argument>,
                                    <argument><expr><name><name>ctx</name>-&gt;<name>notify_func2</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>notify_baton2</name></name></expr></argument>,
                                    <argument><expr><name><name>ctx</name>-&gt;<name>cancel_func</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>,
                                    <argument><expr><name><name>ctx</name>-&gt;<name>conflict_func</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>conflict_baton</name></name></expr></argument>,
                                    <argument><expr><name>file_fetcher</name></expr></argument>, <argument><expr><name>ffb</name></expr></argument>,
                                    <argument><expr><name>diff3_cmd</name></expr></argument>, <argument><expr><name>preserved_exts</name></expr></argument>,
                                    <argument><expr>&amp;<name>update_editor</name></expr></argument>, <argument><expr>&amp;<name>update_edit_baton</name></expr></argument>,
                                    <argument><expr><name>traversal_info</name></expr></argument>,
                                    <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Tell RA to do an update of URL+TARGET to REVISION; if we pass an
     invalid revnum, that means RA will use the latest revision.  */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_do_update2</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>,
                            <argument><expr>&amp;<name>reporter</name></expr></argument>, <argument><expr>&amp;<name>report_baton</name></expr></argument>,
                            <argument><expr><name>revnum</name></expr></argument>,
                            <argument><expr><name>target</name></expr></argument>,
                            <argument><expr><name>depth</name></expr></argument>,
                            <argument><expr><name>send_copyfrom_args</name></expr></argument>,
                            <argument><expr><name>update_editor</name></expr></argument>, <argument><expr><name>update_edit_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_has_capability</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>&amp;<name>server_supports_depth</name></expr></argument>,
                                <argument><expr><name>SVN_RA_CAPABILITY_DEPTH</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Drive the reporter structure, describing the revisions within
     PATH.  When we call reporter-&gt;finish_report, the
     update_editor will be driven by svn_repos_dir_delta2. */</comment>
  <expr_stmt><expr><name>err</name> = <call><name>svn_wc_crawl_revisions3</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>dir_access</name></expr></argument>, <argument><expr><name>reporter</name></expr></argument>, <argument><expr><name>report_baton</name></expr></argument>,
                                <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr>(! <name>server_supports_depth</name>)</expr></argument>,
                                <argument><expr><name>use_commit_times</name></expr></argument>,
                                <argument><expr><name><name>ctx</name>-&gt;<name>notify_func2</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>notify_baton2</name></name></expr></argument>,
                                <argument><expr><name>traversal_info</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* Don't rely on the error handling to handle the sleep later, do
         it now */</comment>
      <expr_stmt><expr><call><name>svn_sleep_for_timestamps</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>err</name></expr>;</return>
    }</block></then></if>
  <expr_stmt><expr>*<name>use_sleep</name> = <name>TRUE</name></expr>;</expr_stmt>

  <comment type="block">/* We handle externals after the update is complete, so that
     handling external items (and any errors therefrom) doesn't delay
     the primary operation.  */</comment>
  <if>if <condition>(<expr><call><name>SVN_DEPTH_IS_RECURSIVE</name><argument_list>(<argument><expr><name>depth</name></expr></argument>)</argument_list></call> &amp;&amp; (! <name>ignore_externals</name>)</expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__handle_externals</name><argument_list>(<argument><expr><name>traversal_info</name></expr></argument>,
                                         <argument><expr><name><name>entry</name>-&gt;<name>url</name></name></expr></argument>,
                                         <argument><expr><name>anchor</name></expr></argument>,
                                         <argument><expr><name>repos_root</name></expr></argument>,
                                         <argument><expr><name>depth</name></expr></argument>,
                                         <argument><expr><name>TRUE</name></expr></argument>, <comment type="block">/* update unchanged ones */</comment>
                                         <argument><expr><name>use_sleep</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr><name>sleep_here</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>svn_sleep_for_timestamps</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
  
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_close</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Let everyone know we're finished here. */</comment>
  <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>notify_func2</name></name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_wc_notify_t</name> *</type><name>notify</name>
        <init>= <expr><call><name>svn_wc_create_notify</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>svn_wc_notify_update_completed</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>notify</name>-&gt;<name>kind</name></name> = <name>svn_node_none</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>notify</name>-&gt;<name>content_state</name></name> = <name><name>notify</name>-&gt;<name>prop_state</name></name>
        = <name>svn_wc_notify_state_inapplicable</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>notify</name>-&gt;<name>lock_state</name></name> = <name>svn_wc_notify_lock_state_inapplicable</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>notify</name>-&gt;<name>revision</name></name> = <name>revnum</name></expr>;</expr_stmt>
      <expr_stmt><expr><call>(*<name><name>ctx</name>-&gt;<name>notify_func2</name></name>)<argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>notify_baton2</name></name></expr></argument>, <argument><expr><name>notify</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <comment type="block">/* If the caller wants the result revision, give it to them. */</comment>
  <if>if <condition>(<expr><name>result_rev</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>result_rev</name> = <name>revnum</name></expr>;</expr_stmt></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_client_update3</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>result_revs</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>paths</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision</name></decl></param>,
                   <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                   <param><decl><type><name>svn_boolean_t</name></type> <name>depth_is_sticky</name></decl></param>,
                   <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_externals</name></decl></param>,
                   <param><decl><type><name>svn_boolean_t</name></type> <name>allow_unver_obstructions</name></decl></param>,
                   <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>result_revs</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>result_revs</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>paths</name>-&gt;<name>nelts</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_revnum_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>paths</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>sleep</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>result_rev</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>paths</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>cancel_func</name></name> &amp;&amp; (<name>err</name> = <call><name><name>ctx</name>-&gt;<name>cancel_func</name></name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
        <break>break;</break></then></if>

      <expr_stmt><expr><name>err</name> = <call><name>svn_client__update_internal</name><argument_list>(<argument><expr>&amp;<name>result_rev</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, 
                                        <argument><expr><name>depth_is_sticky</name></expr></argument>, <argument><expr><name>ignore_externals</name></expr></argument>,
                                        <argument><expr><name>allow_unver_obstructions</name></expr></argument>,
                                        <argument><expr>&amp;<name>sleep</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>err</name> &amp;&amp; <name><name>err</name>-&gt;<name>apr_err</name></name> != <name>SVN_ERR_WC_NOT_DIRECTORY</name></expr>)</condition><then>
        <block>{
          <return>return <expr><name>err</name></expr>;</return>
        }</block></then>
      <else>else <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
        <block>{
          <comment type="block">/* SVN_ERR_WC_NOT_DIRECTORY: it's not versioned */</comment>
          <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>err</name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>result_rev</name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
          <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>notify_func2</name></name></expr>)</condition><then>
            <expr_stmt><expr><call>(*<name><name>ctx</name>-&gt;<name>notify_func2</name></name>)<argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>notify_baton2</name></name></expr></argument>,
                                 <argument><expr><call><name>svn_wc_create_notify</name><argument_list>(<argument><expr><name>path</name></expr></argument>,
                                                      <argument><expr><name>svn_wc_notify_skip</name></expr></argument>,
                                                      <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></then></if></else></if>
      <if>if <condition>(<expr><name>result_revs</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr>*<name>result_revs</name></expr></argument>, <argument><expr><name>svn_revnum_t</name></expr></argument>)</argument_list></call> = <name>result_rev</name></expr>;</expr_stmt></then></if>
    }</block></for>

  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_sleep_for_timestamps</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_client_update2</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>result_revs</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>paths</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision</name></decl></param>,
                   <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                   <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_externals</name></decl></param>,
                   <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_client_update3</name><argument_list>(<argument><expr><name>result_revs</name></expr></argument>, <argument><expr><name>paths</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>,
                            <argument><expr><call><name>SVN_DEPTH_INFINITY_OR_FILES</name><argument_list>(<argument><expr><name>recurse</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                            <argument><expr><name>ignore_externals</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_client_update</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name> *</type><name>result_rev</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision</name></decl></param>,
                  <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                  <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_client__update_internal</name><argument_list>(<argument><expr><name>result_rev</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>,
                                     <argument><expr><call><name>SVN_DEPTH_INFINITY_OR_FILES</name><argument_list>(<argument><expr><name>recurse</name></expr></argument>)</argument_list></call></expr></argument>,
                                     <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, 
                                     <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
</unit>
