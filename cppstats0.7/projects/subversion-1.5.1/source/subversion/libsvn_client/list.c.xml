<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_client/list.c"><comment type="block">/*
 * list.c:  list local and remote directory entries.
 *
 * ====================================================================
 * Copyright (c) 2000-2006 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<comment type="block">/* ==================================================================== */</comment>



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_sorts.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>

<comment type="block">/* Get the directory entries of DIR at REV (relative to the root of
   RA_SESSION), getting at least the fields specified by DIRENT_FIELDS.
   Use the cancellation function/baton of CTX to check for cancellation.

   If DEPTH is svn_depth_empty, return immediately.  If DEPTH is
   svn_depth_files, invoke LIST_FUNC on the file entries with BATON;
   if svn_depth_immediates, invoke it on file and directory entries;
   if svn_depth_infinity, invoke it on file and directory entries and
   recurse into the directory entries with the same depth.

   LOCKS, if non-NULL, is a hash mapping const char * paths to svn_lock_t
   objects and FS_PATH is the absolute filesystem path of the RA session.
   Use POOL for temporary allocations.
*/</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>get_dir_contents</name><parameter_list>(<param><decl><type><name>apr_uint32_t</name></type> <name>dirent_fields</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dir</name></decl></param>,
                 <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                 <param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
                 <param><decl><type><name>apr_hash_t</name> *</type><name>locks</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fs_path</name></decl></param>,
                 <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                 <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                 <param><decl><type><name>svn_client_list_func_t</name></type> <name>list_func</name></decl></param>,
                 <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>tmpdirents</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iterpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>array</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>depth</name> == <name>svn_depth_empty</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* Get the directory's entries, but not its props. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_dir2</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>&amp;<name>tmpdirents</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                          <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>dirent_fields</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>cancel_func</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>ctx</name>-&gt;<name>cancel_func</name></name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <comment type="block">/* Sort the hash, so we can call the callback in a "deterministic" order. */</comment>
  <expr_stmt><expr><name>array</name> = <call><name>svn_sort__hash</name><argument_list>(<argument><expr><name>tmpdirents</name></expr></argument>, <argument><expr><name>svn_sort_compare_items_lexically</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>array</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>svn_sort__item_t</name> *</type><name>item</name> <init>= <expr>&amp;<call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_sort__item_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_dirent_t</name> *</type><name>the_ent</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>tmpdirents</name></expr></argument>, <argument><expr><name><name>item</name>-&gt;<name>key</name></name></expr></argument>, <argument><expr><name><name>item</name>-&gt;<name>klen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_lock_t</name> *</type><name>lock</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name><name>item</name>-&gt;<name>key</name></name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>locks</name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>abs_path</name> <init>= <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name>fs_path</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>lock</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>locks</name></expr></argument>, <argument><expr><name>abs_path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else
        <expr_stmt><expr><name>lock</name> = <name>NULL</name></expr>;</expr_stmt></else></if>

      <if>if <condition>(<expr><name><name>the_ent</name>-&gt;<name>kind</name></name> == <name>svn_node_file</name>
          || <name>depth</name> == <name>svn_depth_immediates</name>
          || <name>depth</name> == <name>svn_depth_infinity</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>list_func</name><argument_list>(<argument><expr><name>baton</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>the_ent</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><name>fs_path</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <if>if <condition>(<expr><name>depth</name> == <name>svn_depth_infinity</name> &amp;&amp; <name><name>the_ent</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_dir_contents</name><argument_list>(<argument><expr><name>dirent_fields</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>,
                                 <argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>locks</name></expr></argument>, <argument><expr><name>fs_path</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>,
                                 <argument><expr><name>list_func</name></expr></argument>, <argument><expr><name>baton</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></for>

  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_client_list2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path_or_url</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>peg_revision</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision</name></decl></param>,
                 <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                 <param><decl><type><name>apr_uint32_t</name></type> <name>dirent_fields</name></decl></param>,
                 <param><decl><type><name>svn_boolean_t</name></type> <name>fetch_locks</name></decl></param>,
                 <param><decl><type><name>svn_client_list_func_t</name></type> <name>list_func</name></decl></param>,
                 <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                 <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_dirent_t</name> *</type><name>dirent</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_root</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fs_path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>locks</name></decl>;</decl_stmt>

  <comment type="block">/* We use the kind field to determine if we should recurse, so we
     always need it. */</comment>
  <expr_stmt><expr><name>dirent_fields</name> |= <name>SVN_DIRENT_KIND</name></expr>;</expr_stmt>

  <comment type="block">/* Get an RA plugin for this filesystem object. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__ra_session_from_path</name><argument_list>(<argument><expr>&amp;<name>ra_session</name></expr></argument>, <argument><expr>&amp;<name>rev</name></expr></argument>,
                                           <argument><expr>&amp;<name>url</name></expr></argument>, <argument><expr><name>path_or_url</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                           <argument><expr><name>peg_revision</name></expr></argument>,
                                           <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_repos_root2</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>&amp;<name>repos_root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__path_relative_to_root</name><argument_list>(<argument><expr>&amp;<name>fs_path</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>repos_root</name></expr></argument>,
                                            <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>err</name> = <call><name>svn_ra_stat</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr>&amp;<name>dirent</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* svnserve before 1.2 doesn't support the above, so fall back on
     a less efficient method. */</comment>
  <if>if <condition>(<expr><name>err</name> &amp;&amp; <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_RA_NOT_IMPLEMENTED</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_check_path</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>kind</name> != <name>svn_node_none</name></expr>)</condition><then>
        <block>{
          <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>repos_root</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
            <block>{
              <decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>parent_session</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>parent_ents</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>parent_url</name></decl>, *<decl><type ref="prev"/><name>base_name</name></decl>;</decl_stmt>

              <comment type="block">/* Open another session to the path's parent.  This server
                 doesn't support svn_ra_reparent anyway, so don't try it. */</comment>
              <expr_stmt><expr><call><name>svn_path_split</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr>&amp;<name>parent_url</name></expr></argument>, <argument><expr>&amp;<name>base_name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

              <comment type="block">/* 'base_name' is now the last component of an URL, but we want
                 to use it as a plain file name. Therefore, we must URI-decode
                 it. */</comment>
              <expr_stmt><expr><name>base_name</name> = <call><name>svn_path_uri_decode</name><argument_list>(<argument><expr><name>base_name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

              <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__open_ra_session_internal</name><argument_list>(<argument><expr>&amp;<name>parent_session</name></expr></argument>,
                                                           <argument><expr><name>parent_url</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                                           <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                                                           <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

              <comment type="block">/* Get all parent's entries, no props. */</comment>
              <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_dir2</name><argument_list>(<argument><expr><name>parent_session</name></expr></argument>, <argument><expr>&amp;<name>parent_ents</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                      <argument><expr><name>NULL</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>dirent_fields</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

              <comment type="block">/* Get the relevant entry. */</comment>
              <expr_stmt><expr><name>dirent</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>parent_ents</name></expr></argument>, <argument><expr><name>base_name</name></expr></argument>,
                                    <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
          <else>else
            <block>{
              <comment type="block">/* We can't get the directory entry for the repository root,
                 but we can still get the information we want.
                 The created-rev of the repository root must, by definition,
                 be rev. */</comment>
              <expr_stmt><expr><name>dirent</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>dirent</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>dirent</name>-&gt;<name>kind</name></name> = <name>kind</name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>dirent</name>-&gt;<name>size</name></name> = 0</expr>;</expr_stmt>
              <if>if <condition>(<expr><name>dirent_fields</name> &amp; <name>SVN_DIRENT_HAS_PROPS</name></expr>)</condition><then>
                <block>{
                  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl>;</decl_stmt>
                  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_dir2</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>props</name></expr></argument>,
                                          <argument><expr>""</expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr>0</expr></argument> <comment type="block">/* no dirent fields */</comment>,
                                          <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><name><name>dirent</name>-&gt;<name>has_props</name></name> = (<call><name>apr_hash_count</name><argument_list>(<argument><expr><name>props</name></expr></argument>)</argument_list></call> != 0)</expr>;</expr_stmt>
                }</block></then></if>
              <expr_stmt><expr><name><name>dirent</name>-&gt;<name>created_rev</name></name> = <name>rev</name></expr>;</expr_stmt>
              <if>if <condition>(<expr><name>dirent_fields</name> &amp; (<name>SVN_DIRENT_TIME</name> | <name>SVN_DIRENT_LAST_AUTHOR</name>)</expr>)</condition><then>
                <block>{
                  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl>;</decl_stmt>
                  <decl_stmt><decl><type><name>svn_string_t</name> *</type><name>val</name></decl>;</decl_stmt>

                  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_rev_proplist</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr>&amp;<name>props</name></expr></argument>,
                                              <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><name>val</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_DATE</name></expr></argument>,
                                     <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <if>if <condition>(<expr><name>val</name></expr>)</condition><then>
                    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_time_from_cstring</name><argument_list>(<argument><expr>&amp;<name><name>dirent</name>-&gt;<name>time</name></name></expr></argument>, <argument><expr><name><name>val</name>-&gt;<name>data</name></name></expr></argument>,
                                                  <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
                  <else>else
                    <expr_stmt><expr><name><name>dirent</name>-&gt;<name>time</name></name> = 0</expr>;</expr_stmt></else></if>

                  <expr_stmt><expr><name>val</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_AUTHOR</name></expr></argument>,
                                     <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><name><name>dirent</name>-&gt;<name>last_author</name></name> = <name>val</name> ? <name><name>val</name>-&gt;<name>data</name></name> : <name>NULL</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></else></if>
        }</block></then>
      <else>else
        <expr_stmt><expr><name>dirent</name> = <name>NULL</name></expr>;</expr_stmt></else></if>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
    <return>return <expr><name>err</name></expr>;</return></then></if></else></if>

  <if>if <condition>(<expr>! <name>dirent</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_FS_NOT_FOUND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr><call><name>_</name><argument_list>(<argument><expr>"URL '%s' non-existent in that revision"</expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <comment type="block">/* Maybe get all locks under url. */</comment>
  <if>if <condition>(<expr><name>fetch_locks</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* IMPORTANT: If locks are stored in a more temporary pool, we need
         to fix store_dirent below to duplicate the locks. */</comment>
      <expr_stmt><expr><name>err</name> = <call><name>svn_ra_get_locks</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>&amp;<name>locks</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>err</name> &amp;&amp; <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_RA_NOT_IMPLEMENTED</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>locks</name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></then>
      <else>else <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
        <return>return <expr><name>err</name></expr>;</return></then></if></else></if>
    }</block></then>
  <else>else
    <expr_stmt><expr><name>locks</name> = <name>NULL</name></expr>;</expr_stmt></else></if>

  <comment type="block">/* Report the dirent for the target. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>list_func</name><argument_list>(<argument><expr><name>baton</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>dirent</name></expr></argument>, <argument><expr><name>locks</name>
                    ? (<call><name>apr_hash_get</name><argument_list>(<argument><expr><name>locks</name></expr></argument>, <argument><expr><name>fs_path</name></expr></argument>,
                                    <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call>)
                    : <name>NULL</name></expr></argument>, <argument><expr><name>fs_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name><name>dirent</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name>
      &amp;&amp; (<name>depth</name> == <name>svn_depth_files</name>
          || <name>depth</name> == <name>svn_depth_immediates</name>
          || <name>depth</name> == <name>svn_depth_infinity</name>)</expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_dir_contents</name><argument_list>(<argument><expr><name>dirent_fields</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>locks</name></expr></argument>,
                             <argument><expr><name>fs_path</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>list_func</name></expr></argument>, <argument><expr><name>baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_client_list</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path_or_url</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>peg_revision</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision</name></decl></param>,
                <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                <param><decl><type><name>apr_uint32_t</name></type> <name>dirent_fields</name></decl></param>,
                <param><decl><type><name>svn_boolean_t</name></type> <name>fetch_locks</name></decl></param>,
                <param><decl><type><name>svn_client_list_func_t</name></type> <name>list_func</name></decl></param>,
                <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_client_list2</name><argument_list>(<argument><expr><name>path_or_url</name></expr></argument>,
                          <argument><expr><name>peg_revision</name></expr></argument>,
                          <argument><expr><name>revision</name></expr></argument>,
                          <argument><expr><call><name>SVN_DEPTH_INFINITY_OR_IMMEDIATES</name><argument_list>(<argument><expr><name>recurse</name></expr></argument>)</argument_list></call></expr></argument>,
                          <argument><expr><name>dirent_fields</name></expr></argument>,
                          <argument><expr><name>fetch_locks</name></expr></argument>,
                          <argument><expr><name>list_func</name></expr></argument>,
                          <argument><expr><name>baton</name></expr></argument>,
                          <argument><expr><name>ctx</name></expr></argument>,
                          <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* Baton used by compatibility wrapper svn_client_ls3. */</comment>
<struct>struct <name>ls_baton</name> <block>{
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>dirents</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>locks</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/* This implements svn_client_list_func_t. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>store_dirent</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>svn_dirent_t</name> *</type><name>dirent</name></decl></param>,
             <param><decl><type><specifier>const</specifier> <name>svn_lock_t</name> *</type><name>lock</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>abs_path</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>ls_baton</name> *</type><name>lb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* The dirent is allocated in a temporary pool, so duplicate it into the
     correct pool.  Note, however, that the locks are stored in the correct
     pool already. */</comment>
  <expr_stmt><expr><name>dirent</name> = <call><name>svn_dirent_dup</name><argument_list>(<argument><expr><name>dirent</name></expr></argument>, <argument><expr><name><name>lb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* An empty path means we are called for the target of the operation.
     For compatibility, we only store the target if it is a file, and we
     store it under the basename of the URL.  Note that this makes it
     impossible to differentiate between the target being a directory with a
     child with the same basename as the target and the target being a file,
     but that's how it was implemented. */</comment>
  <if>if <condition>(<expr><name><name>path</name><index>[<expr>0</expr>]</index></name> == '\0'</expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><name><name>dirent</name>-&gt;<name>kind</name></name> == <name>svn_node_file</name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_name</name> <init>= <expr><call><name>svn_path_basename</name><argument_list>(<argument><expr><name>abs_path</name></expr></argument>, <argument><expr><name><name>lb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>lb</name>-&gt;<name>dirents</name></name></expr></argument>, <argument><expr><name>base_name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>dirent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>lock</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>lb</name>-&gt;<name>locks</name></name></expr></argument>, <argument><expr><name>base_name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></then></if>
    }</block></then>
  <else>else
    <block>{
      <expr_stmt><expr><name>path</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>lb</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>lb</name>-&gt;<name>dirents</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>dirent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>lock</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>lb</name>-&gt;<name>locks</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></else></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_client_ls3</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>dirents</name></decl></param>,
               <param><decl><type><name>apr_hash_t</name> **</type><name>locks</name></decl></param>,
               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path_or_url</name></decl></param>,
               <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>peg_revision</name></decl></param>,
               <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision</name></decl></param>,
               <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
               <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>ls_baton</name></type> <name>lb</name></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>dirents</name> = <name><name>lb</name>.<name>dirents</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>locks</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>locks</name> = <name><name>lb</name>.<name>locks</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <expr_stmt><expr><name><name>lb</name>.<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>

  <return>return <expr><call><name>svn_client_list</name><argument_list>(<argument><expr><name>path_or_url</name></expr></argument>, <argument><expr><name>peg_revision</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>recurse</name></expr></argument>,
                         <argument><expr><name>SVN_DIRENT_ALL</name></expr></argument>, <argument><expr><name>locks</name> != <name>NULL</name></expr></argument>,
                         <argument><expr><name>store_dirent</name></expr></argument>, <argument><expr>&amp;<name>lb</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_client_ls2</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>dirents</name></decl></param>,
               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path_or_url</name></decl></param>,
               <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>peg_revision</name></decl></param>,
               <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision</name></decl></param>,
               <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
               <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{

  <return>return <expr><call><name>svn_client_ls3</name><argument_list>(<argument><expr><name>dirents</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>path_or_url</name></expr></argument>, <argument><expr><name>peg_revision</name></expr></argument>,
                        <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>recurse</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_client_ls</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>dirents</name></decl></param>,
              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path_or_url</name></decl></param>,
              <param><decl><type><name>svn_opt_revision_t</name> *</type><name>revision</name></decl></param>,
              <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
              <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_client_ls2</name><argument_list>(<argument><expr><name>dirents</name></expr></argument>, <argument><expr><name>path_or_url</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>,
                        <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>recurse</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
</unit>
