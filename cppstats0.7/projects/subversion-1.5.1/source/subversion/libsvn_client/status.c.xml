<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_client/status.c"><comment type="block">/*
 * status.c:  return the status of a working copy dirent
 *
 * ====================================================================
 * Copyright (c) 2000-2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<comment type="block">/* ==================================================================== */</comment>


<escape char="0xc"/>
<comment type="block">/*** Includes. ***/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"client.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_delta.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_hash.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_wc_private.h"</cpp:file></cpp:include>

<escape char="0xc"/>
<comment type="block">/*** Getting update information ***/</comment>

<comment type="block">/* Baton for tweak_status.  It wraps a bit of extra functionality
   around the received status func/baton, so we can remember if the
   target was deleted in HEAD and tweak incoming status structures
   accordingly. */</comment>
<struct>struct <name>status_baton</name>
<block>{
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>deleted_in_repos</name></decl>;</decl_stmt>          <comment type="block">/* target is deleted in repos */</comment>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>changelist_hash</name></decl>;</decl_stmt>             <comment type="block">/* keys are changelist names */</comment>
  <decl_stmt><decl><type><name>svn_wc_status_func2_t</name></type> <name>real_status_func</name></decl>;</decl_stmt>  <comment type="block">/* real status function */</comment>
  <decl_stmt><decl><type><name>void</name> *</type><name>real_status_baton</name></decl>;</decl_stmt>                 <comment type="block">/* real status baton */</comment>
}</block>;</struct>

<comment type="block">/* A status callback function which wraps the *real* status
   function/baton.   This sucker takes care of any status tweaks we
   need to make (such as noting that the target of the status is
   missing from HEAD in the repository).

   This implements the 'svn_wc_status_func2_t' function type. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>tweak_status</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
             <param><decl><type><name>svn_wc_status2_t</name> *</type><name>status</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>status_baton</name> *</type><name>sb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* If we know that the target was deleted in HEAD of the repository,
     we need to note that fact in all the status structures that come
     through here. */</comment>
  <if>if <condition>(<expr><name><name>sb</name>-&gt;<name>deleted_in_repos</name></name></expr>)</condition><then>
    <expr_stmt><expr><name><name>status</name>-&gt;<name>repos_text_status</name></name> = <name>svn_wc_status_deleted</name></expr>;</expr_stmt></then></if>

  <comment type="block">/* If the status item has an entry, but doesn't belong to one of the
     changelists our caller is interested in, we filter our this status
     transmission.  */</comment>
  <if>if <condition>(<expr>! <call><name>SVN_WC__CL_MATCH</name><argument_list>(<argument><expr><name><name>sb</name>-&gt;<name>changelist_hash</name></name></expr></argument>, <argument><expr><name><name>status</name>-&gt;<name>entry</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return;</return></then></if>

  <comment type="block">/* Call the real status function/baton. */</comment>
  <expr_stmt><expr><call><name><name>sb</name>-&gt;<name>real_status_func</name></name><argument_list>(<argument><expr><name><name>sb</name>-&gt;<name>real_status_baton</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/* A baton for our reporter that is used to collect locks. */</comment>
<typedef>typedef <type><struct>struct <name>report_baton_t</name> <block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_ra_reporter3_t</name>*</type> <name>wrapped_reporter</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>wrapped_report_baton</name></decl>;</decl_stmt>
  <comment type="block">/* The common ancestor URL of all paths included in the report. */</comment>
  <decl_stmt><decl><type><name>char</name> *</type><name>ancestor</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>set_locks_baton</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl>;</decl_stmt>
  <comment type="block">/* Pool to store locks in. */</comment>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
}</block></struct></type> <name>report_baton_t</name>;</typedef>

<comment type="block">/* Implements svn_ra_reporter3_t-&gt;set_path. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>reporter_set_path</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>report_baton</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                  <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>, <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                  <param><decl><type><name>svn_boolean_t</name></type> <name>start_empty</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lock_token</name></decl></param>,
                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>report_baton_t</name> *</type><name>rb</name> <init>= <expr><name>report_baton</name></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name><name>rb</name>-&gt;<name>wrapped_reporter</name>-&gt;<name>set_path</name></name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>wrapped_report_baton</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
                                        <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>start_empty</name></expr></argument>,
                                        <argument><expr><name>lock_token</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* Implements svn_ra_reporter3_t-&gt;delete_path. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>reporter_delete_path</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>report_baton</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>report_baton_t</name> *</type><name>rb</name> <init>= <expr><name>report_baton</name></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name><name>rb</name>-&gt;<name>wrapped_reporter</name>-&gt;<name>delete_path</name></name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>wrapped_report_baton</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
                                           <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* Implements svn_ra_reporter3_t-&gt;link_path. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>reporter_link_path</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>report_baton</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
                   <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>, <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                   <param><decl><type><name>svn_boolean_t</name></type> <name>start_empty</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lock_token</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>report_baton_t</name> *</type><name>rb</name> <init>= <expr><name>report_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ancestor</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>ancestor</name> = <call><name>svn_path_get_longest_ancestor</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name><name>rb</name>-&gt;<name>ancestor</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If we got a shorter ancestor, truncate our current ancestor.
     Note that svn_path_get_longest_ancestor will allocate its return
     value even if it identical to one of its arguments. */</comment>
  <expr_stmt><expr><name>len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>ancestor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>len</name> &lt; <call><name>strlen</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>ancestor</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <expr_stmt><expr><name><name>rb</name>-&gt;<name>ancestor</name><index>[<expr><name>len</name></expr>]</index></name> = '\0'</expr>;</expr_stmt></then></if>

  <return>return <expr><call><name><name>rb</name>-&gt;<name>wrapped_reporter</name>-&gt;<name>link_path</name></name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>wrapped_report_baton</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>url</name></expr></argument>,
                                         <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>start_empty</name></expr></argument>,
                                         <argument><expr><name>lock_token</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* Implements svn_ra_reporter3_t-&gt;finish_report. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>reporter_finish_report</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>report_baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>report_baton_t</name> *</type><name>rb</name> <init>= <expr><name>report_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>ras</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>locks</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_root</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Open an RA session to our common ancestor and grab the locks under it.
   */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__open_ra_session_internal</name><argument_list>(<argument><expr>&amp;<name>ras</name></expr></argument>, <argument><expr><name><name>rb</name>-&gt;<name>ancestor</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                               <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
                                               <argument><expr><name><name>rb</name>-&gt;<name>ctx</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* The locks need to live throughout the edit.  Note that if the
     server doesn't support lock discovery, we'll just not do locky
     stuff. */</comment>
  <expr_stmt><expr><name>err</name> = <call><name>svn_ra_get_locks</name><argument_list>(<argument><expr><name>ras</name></expr></argument>, <argument><expr>&amp;<name>locks</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name><name>rb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>err</name> &amp;&amp; ((<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_RA_NOT_IMPLEMENTED</name>)
              || (<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_UNSUPPORTED_FEATURE</name>))</expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>err</name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>locks</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_repos_root2</name><argument_list>(<argument><expr><name>ras</name></expr></argument>, <argument><expr>&amp;<name>repos_root</name></expr></argument>, <argument><expr><name><name>rb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Close the RA session. */</comment>
  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_status_set_repos_locks</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>set_locks_baton</name></name></expr></argument>, <argument><expr><name>locks</name></expr></argument>,
                                        <argument><expr><name>repos_root</name></expr></argument>, <argument><expr><name><name>rb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name><name>rb</name>-&gt;<name>wrapped_reporter</name>-&gt;<name>finish_report</name></name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>wrapped_report_baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* Implements svn_ra_reporter3_t-&gt;abort_report. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>reporter_abort_report</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>report_baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>report_baton_t</name> *</type><name>rb</name> <init>= <expr><name>report_baton</name></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name><name>rb</name>-&gt;<name>wrapped_reporter</name>-&gt;<name>abort_report</name></name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>wrapped_report_baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* A reporter that keeps track of the common URL ancestor of all paths in
   the WC and fetches repository locks for all paths under this ancestor. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_ra_reporter3_t</name></type> <name>lock_fetch_reporter</name> <init>= <expr><block>{
  <expr><name>reporter_set_path</name></expr>,
  <expr><name>reporter_delete_path</name></expr>,
  <expr><name>reporter_link_path</name></expr>,
  <expr><name>reporter_finish_report</name></expr>,
  <expr><name>reporter_abort_report</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<escape char="0xc"/>
<comment type="block">/*** Public Interface. ***/</comment>


<function><type><name>svn_error_t</name> *</type>
<name>svn_client_status3</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name> *</type><name>result_rev</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision</name></decl></param>,
                   <param><decl><type><name>svn_wc_status_func2_t</name></type> <name>status_func</name></decl></param>,
                   <param><decl><type><name>void</name> *</type><name>status_baton</name></decl></param>,
                   <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                   <param><decl><type><name>svn_boolean_t</name></type> <name>get_all</name></decl></param>,
                   <param><decl><type><name>svn_boolean_t</name></type> <name>update</name></decl></param>,
                   <param><decl><type><name>svn_boolean_t</name></type> <name>no_ignore</name></decl></param>,
                   <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_externals</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>changelists</name></decl></param>,
                   <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>anchor_access</name></decl>, *<decl><type ref="prev"/><name>target_access</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_traversal_info_t</name> *</type><name>traversal_info</name> <init>= <expr><call><name>svn_wc_init_traversal_info</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>anchor</name></decl>, *<decl><type ref="prev"/><name>target</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>editor</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>edit_baton</name></decl>, *<decl><type ref="prev"/><name>set_locks_baton</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>status_baton</name></type> <name>sb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>ignores</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>changelist_hash</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>edit_revision</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>changelists</name> &amp;&amp; <name><name>changelists</name>-&gt;<name>nelts</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_hash_from_cstring_keys</name><argument_list>(<argument><expr>&amp;<name>changelist_hash</name></expr></argument>, <argument><expr><name>changelists</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <expr_stmt><expr><name><name>sb</name>.<name>real_status_func</name></name> = <name>status_func</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sb</name>.<name>real_status_baton</name></name> = <name>status_baton</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sb</name>.<name>deleted_in_repos</name></name> = <name>FALSE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sb</name>.<name>changelist_hash</name></name> = <name>changelist_hash</name></expr>;</expr_stmt>

  <comment type="block">/* Try to open the target directory. If the target is a file or an
     unversioned directory, open the parent directory instead */</comment>
  <expr_stmt><expr><name>err</name> = <call><name>svn_wc_adm_open3</name><argument_list>(<argument><expr>&amp;<name>anchor_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                         <argument><expr><call><name>SVN_DEPTH_IS_RECURSIVE</name><argument_list>(<argument><expr><name>depth</name></expr></argument>)</argument_list></call> ? -1 : 1</expr></argument>,
                         <argument><expr><name><name>ctx</name>-&gt;<name>cancel_func</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>,
                         <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>err</name> &amp;&amp; <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_WC_NOT_DIRECTORY</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_open_anchor</name><argument_list>(<argument><expr>&amp;<name>anchor_access</name></expr></argument>, <argument><expr>&amp;<name>target_access</name></expr></argument>, <argument><expr>&amp;<name>target</name></expr></argument>,
                                     <argument><expr><name>path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                                     <argument><expr><call><name>SVN_DEPTH_IS_RECURSIVE</name><argument_list>(<argument><expr><name>depth</name></expr></argument>)</argument_list></call> ? -1 : 1</expr></argument>,
                                     <argument><expr><name><name>ctx</name>-&gt;<name>cancel_func</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>,
                                     <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr>!<name>err</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>target</name> = ""</expr>;</expr_stmt>
      <expr_stmt><expr><name>target_access</name> = <name>anchor_access</name></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <return>return <expr><name>err</name></expr>;</return></else></if></else></if>

  <expr_stmt><expr><name>anchor</name> = <call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>anchor_access</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get the status edit, and use our wrapping status function/baton
     as the callback pair. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_get_default_ignores</name><argument_list>(<argument><expr>&amp;<name>ignores</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>config</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_get_status_editor3</name><argument_list>(<argument><expr>&amp;<name>editor</name></expr></argument>, <argument><expr>&amp;<name>edit_baton</name></expr></argument>, <argument><expr>&amp;<name>set_locks_baton</name></expr></argument>,
                                    <argument><expr>&amp;<name>edit_revision</name></expr></argument>, <argument><expr><name>anchor_access</name></expr></argument>, <argument><expr><name>target</name></expr></argument>,
                                    <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>get_all</name></expr></argument>, <argument><expr><name>no_ignore</name></expr></argument>, <argument><expr><name>ignores</name></expr></argument>,
                                    <argument><expr><name>tweak_status</name></expr></argument>, <argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>cancel_func</name></name></expr></argument>,
                                    <argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>, <argument><expr><name>traversal_info</name></expr></argument>,
                                    <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If we want to know about out-of-dateness, we crawl the working copy and
     let the RA layer drive the editor for real.  Otherwise, we just close the
     edit.  :-) */</comment>
  <if>if <condition>(<expr><name>update</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>URL</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>server_supports_depth</name></decl>;</decl_stmt>

      <comment type="block">/* Get full URL from the ANCHOR. */</comment>
      <if>if <condition>(<expr>! <name>entry</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_versioned</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>anchor_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                                        <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
      <if>if <condition>(<expr>! <name><name>entry</name>-&gt;<name>url</name></name></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_createf</name>
          <argument_list>(<argument><expr><name>SVN_ERR_ENTRY_MISSING_URL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
           <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Entry '%s' has no URL"</expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
      <expr_stmt><expr><name>URL</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Open a repository session to the URL. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__open_ra_session_internal</name><argument_list>(<argument><expr>&amp;<name>ra_session</name></expr></argument>, <argument><expr><name>URL</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>,
                                                   <argument><expr><name>anchor_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                                   <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
                                                   <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Verify that URL exists in HEAD.  If it doesn't, this can save
         us a whole lot of hassle; if it does, the cost of this
         request should be minimal compared to the size of getting
         back the average amount of "out-of-date" information. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_check_path</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
                                <argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>kind</name> == <name>svn_node_none</name></expr>)</condition><then>
        <block>{
          <comment type="block">/* Our status target does not exist in HEAD of the
             repository.  If we're just adding this thing, that's
             fine.  But if it was previously versioned, then it must
             have been deleted from the repository. */</comment>
          <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>schedule</name></name> != <name>svn_wc_schedule_add</name></expr>)</condition><then>
            <expr_stmt><expr><name><name>sb</name>.<name>deleted_in_repos</name></name> = <name>TRUE</name></expr>;</expr_stmt></then></if>

          <comment type="block">/* And now close the edit. */</comment>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>editor</name>-&gt;<name>close_edit</name></name><argument_list>(<argument><expr><name>edit_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else
        <block>{
          <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>revnum</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>report_baton_t</name></type> <name>rb</name></decl>;</decl_stmt>

          <if>if <condition>(<expr><name><name>revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_head</name></expr>)</condition><then>
            <block>{
              <comment type="block">/* Cause the revision number to be omitted from the request,
                 which implies HEAD. */</comment>
              <expr_stmt><expr><name>revnum</name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
            }</block></then>
          <else>else
            <block>{
              <comment type="block">/* Get a revision number for our status operation. */</comment>
              <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_revision_number</name>
                      <argument_list>(<argument><expr>&amp;<name>revnum</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

          <comment type="block">/* Do the deed.  Let the RA layer drive the status editor. */</comment>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_do_status2</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>&amp;<name><name>rb</name>.<name>wrapped_reporter</name></name></expr></argument>,
                                    <argument><expr>&amp;<name><name>rb</name>.<name>wrapped_report_baton</name></name></expr></argument>,
                                    <argument><expr><name>target</name></expr></argument>, <argument><expr><name>revnum</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>editor</name></expr></argument>,
                                    <argument><expr><name>edit_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="block">/* Init the report baton. */</comment>
          <expr_stmt><expr><name><name>rb</name>.<name>ancestor</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>URL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>rb</name>.<name>set_locks_baton</name></name> = <name>set_locks_baton</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>rb</name>.<name>ctx</name></name> = <name>ctx</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>rb</name>.<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_has_capability</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>&amp;<name>server_supports_depth</name></expr></argument>,
                                        <argument><expr><name>SVN_RA_CAPABILITY_DEPTH</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="block">/* Drive the reporter structure, describing the revisions
             within PATH.  When we call reporter-&gt;finish_report,
             EDITOR will be driven to describe differences between our
             working copy and HEAD. */</comment>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_crawl_revisions3</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>target_access</name></expr></argument>,
                                          <argument><expr>&amp;<name>lock_fetch_reporter</name></expr></argument>, <argument><expr>&amp;<name>rb</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                                          <argument><expr><name>depth</name></expr></argument>, <argument><expr>(! <name>server_supports_depth</name>)</expr></argument>,
                                          <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then>
  <else>else
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>editor</name>-&gt;<name>close_edit</name></name><argument_list>(<argument><expr><name>edit_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>notify_func2</name></name> &amp;&amp; <name>update</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_wc_notify_t</name> *</type><name>notify</name>
        <init>= <expr><call><name>svn_wc_create_notify</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>svn_wc_notify_status_completed</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>notify</name>-&gt;<name>revision</name></name> = <name>edit_revision</name></expr>;</expr_stmt>
      <expr_stmt><expr><call>(<name><name>ctx</name>-&gt;<name>notify_func2</name></name>)<argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>notify_baton2</name></name></expr></argument>, <argument><expr><name>notify</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <comment type="block">/* If the caller wants the result revision, give it to them. */</comment>
  <if>if <condition>(<expr><name>result_rev</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>result_rev</name> = <name>edit_revision</name></expr>;</expr_stmt></then></if>

  <comment type="block">/* Close the access baton here, as svn_client__do_external_status()
     calls back into this function and thus will be re-opening the
     working copy. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_close</name><argument_list>(<argument><expr><name>anchor_access</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If there are svn:externals set, we don't want those to show up as
     unversioned or unrecognized, so patch up the hash.  If caller wants
     all the statuses, we will change unversioned status items that
     are interesting to an svn:externals property to
     svn_wc_status_unversioned, otherwise we'll just remove the status
     item altogether.

     We only descend into an external if depth is svn_depth_infinity or
     svn_depth_unknown.  However, there are conceivable behaviors that
     would involve descending under other circumstances; thus, we pass
     depth anyway, so the code will DTRT if we change the conditional
     in the future.
  */</comment>
  <if>if <condition>(<expr><call><name>SVN_DEPTH_IS_RECURSIVE</name><argument_list>(<argument><expr><name>depth</name></expr></argument>)</argument_list></call> &amp;&amp; (! <name>ignore_externals</name>)</expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__do_external_status</name><argument_list>(<argument><expr><name>traversal_info</name></expr></argument>, <argument><expr><name>status_func</name></expr></argument>,
                                           <argument><expr><name>status_baton</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>get_all</name></expr></argument>,
                                           <argument><expr><name>update</name></expr></argument>, <argument><expr><name>no_ignore</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_client_status2</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name> *</type><name>result_rev</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision</name></decl></param>,
                   <param><decl><type><name>svn_wc_status_func2_t</name></type> <name>status_func</name></decl></param>,
                   <param><decl><type><name>void</name> *</type><name>status_baton</name></decl></param>,
                   <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                   <param><decl><type><name>svn_boolean_t</name></type> <name>get_all</name></decl></param>,
                   <param><decl><type><name>svn_boolean_t</name></type> <name>update</name></decl></param>,
                   <param><decl><type><name>svn_boolean_t</name></type> <name>no_ignore</name></decl></param>,
                   <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_externals</name></decl></param>,
                   <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_client_status3</name><argument_list>(<argument><expr><name>result_rev</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>,
                            <argument><expr><name>status_func</name></expr></argument>, <argument><expr><name>status_baton</name></expr></argument>,
                            <argument><expr><call><name>SVN_DEPTH_INFINITY_OR_IMMEDIATES</name><argument_list>(<argument><expr><name>recurse</name></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><name>get_all</name></expr></argument>, <argument><expr><name>update</name></expr></argument>, <argument><expr><name>no_ignore</name></expr></argument>, <argument><expr><name>ignore_externals</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                            <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<comment type="block">/* Baton for old_status_func_cb; does what you think it does. */</comment>
<struct>struct <name>old_status_func_cb_baton</name>
<block>{
  <decl_stmt><decl><type><name>svn_wc_status_func_t</name></type> <name>original_func</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>original_baton</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/* Help svn_client_status() accept an old-style status func and baton,
   by wrapping them before passing along to svn_client_status2().

   This implements the 'svn_wc_status_func2_t' function type. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>old_status_func_cb</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                               <param><decl><type><name>svn_wc_status2_t</name> *</type><name>status</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>old_status_func_cb_baton</name> *</type><name>b</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_status_t</name> *</type><name>stat</name> <init>= <expr>(<name>svn_wc_status_t</name> *) <name>status</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name><name>b</name>-&gt;<name>original_func</name></name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>original_baton</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_client_status</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name> *</type><name>result_rev</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                  <param><decl><type><name>svn_opt_revision_t</name> *</type><name>revision</name></decl></param>,
                  <param><decl><type><name>svn_wc_status_func_t</name></type> <name>status_func</name></decl></param>,
                  <param><decl><type><name>void</name> *</type><name>status_baton</name></decl></param>,
                  <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                  <param><decl><type><name>svn_boolean_t</name></type> <name>get_all</name></decl></param>,
                  <param><decl><type><name>svn_boolean_t</name></type> <name>update</name></decl></param>,
                  <param><decl><type><name>svn_boolean_t</name></type> <name>no_ignore</name></decl></param>,
                  <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>old_status_func_cb_baton</name> *</type><name>b</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>b</name>-&gt;<name>original_func</name></name> = <name>status_func</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>b</name>-&gt;<name>original_baton</name></name> = <name>status_baton</name></expr>;</expr_stmt>

  <return>return <expr><call><name>svn_client_status2</name><argument_list>(<argument><expr><name>result_rev</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>,
                            <argument><expr><name>old_status_func_cb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>,
                            <argument><expr><name>recurse</name></expr></argument>, <argument><expr><name>get_all</name></expr></argument>, <argument><expr><name>update</name></expr></argument>, <argument><expr><name>no_ignore</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                            <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

</unit>
