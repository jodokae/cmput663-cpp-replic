<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_client/mergeinfo.h"><comment type="block">/*
 * mergeinfo.h : Client library-internal mergeinfo APIs.
 *
 * ====================================================================
 * Copyright (c) 2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVN_LIBSVN_CLIENT_MERGEINFO_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_LIBSVN_CLIENT_MERGEINFO_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_wc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_client.h"</cpp:file></cpp:include>

<escape char="0xc"/>
<comment type="block">/*** Data Structures ***/</comment>


<comment type="block">/* Structure used by discover_and_merge_children() and consumers of the
   children_with_mergeinfo array it populates.  The struct describes
   working copy paths that meet one or more of the following criteria:

     1) Path has explicit mergeinfo
     2) Path is switched
     3) Path has an immediate child which is switched or otherwise
        missing from the WC.
     4) Path has a sibling which is switched or otherwise missing
        from the WC.
     5) Path is the target of a merge.
*/</comment>
<typedef>typedef <type><struct>struct <name>svn_client__merge_path_t</name>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>missing_child</name></decl>;</decl_stmt>       <comment type="block">/* PATH has an immediate child which is
                                        missing. */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>switched</name></decl>;</decl_stmt>            <comment type="block">/* PATH is switched. */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>has_noninheritable</name></decl>;</decl_stmt>  <comment type="block">/* PATH has svn:mergeinfo set on it which
                                        includes non-inheritable revision
                                        ranges. */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>absent</name></decl>;</decl_stmt>              <comment type="block">/* PATH is absent from the WC, probably
                                        due to authz restrictions. */</comment>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>remaining_ranges</name></decl>;</decl_stmt> <comment type="block">/* Per path remaining ranges list. */</comment>
  <decl_stmt><decl><type><name>svn_mergeinfo_t</name></type> <name>pre_merge_mergeinfo</name></decl>;</decl_stmt>  <comment type="block">/* mergeinfo on a path prior to a
                                           merge.*/</comment>
  <decl_stmt><decl><type><name>svn_mergeinfo_t</name></type> <name>implicit_mergeinfo</name></decl>;</decl_stmt>   <comment type="block">/* Implicit mergeinfo on a path prior
                                           to a merge.*/</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>indirect_mergeinfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>scheduled_for_deletion</name></decl>;</decl_stmt> <comment type="block">/* PATH is scheduled for deletion. */</comment>
}</block></struct></type> <name>svn_client__merge_path_t</name>;</typedef>


<escape char="0xc"/>
<comment type="block">/*** Functions ***/</comment>

<comment type="block">/* Find explicit or inherited WC mergeinfo for WCPATH, and return it
   in *MERGEINFO (NULL if no mergeinfo is set).  Set *INHERITED to
   whether the mergeinfo was inherited (TRUE or FALSE).
   
   This function will search for inherited mergeinfo in the parents of
   WCPATH only if the working revision of WCPATH falls within the range
   of the parent's last committed revision to the parent's working
   revision (inclusive).

   INHERIT indicates whether explicit, explicit or inherited, or only
   inherited mergeinfo for WCPATH is retrieved.

   Don't look for inherited mergeinfo any higher than LIMIT_PATH
   (ignored if NULL) or beyond any switched path.

   Set *WALKED_PATH to the path climbed from WCPATH to find inherited
   mergeinfo, or "" if none was found. (ignored if NULL). */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_client__get_wc_mergeinfo</name><parameter_list>(<param><decl><type><name>svn_mergeinfo_t</name> *</type><name>mergeinfo</name></decl></param>,
                             <param><decl><type><name>svn_boolean_t</name> *</type><name>inherited</name></decl></param>,
                             <param><decl><type><name>svn_boolean_t</name></type> <name>pristine</name></decl></param>,
                             <param><decl><type><name>svn_mergeinfo_inheritance_t</name></type> <name>inherit</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>wcpath</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>limit_path</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>walked_path</name></decl></param>,
                             <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                             <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Obtain any mergeinfo for the root-relative repository filesystem path
   REL_PATH from the repository, and set it in *TARGET_MERGEINFO.

   INHERIT indicates whether explicit, explicit or inherited, or only
   inherited mergeinfo for REL_PATH is obtained.

   If REL_PATH does not exist at REV, SVN_ERR_FS_NOT_FOUND or
   SVN_ERR_RA_DAV_REQUEST_FAILED is returned and *TARGET_MERGEINFO
   is untouched.

   If there is no mergeinfo available for REL_PATH, or if the server
   doesn't support a mergeinfo capability and SQUELCH_INCAPABLE is
   TRUE, set *TARGET_MERGEINFO to NULL. */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_client__get_repos_mergeinfo</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
                                <param><decl><type><name>svn_mergeinfo_t</name> *</type><name>target_mergeinfo</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rel_path</name></decl></param>,
                                <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                                <param><decl><type><name>svn_mergeinfo_inheritance_t</name></type> <name>inherit</name></decl></param>,
                                <param><decl><type><name>svn_boolean_t</name></type> <name>squelch_incapable</name></decl></param>,
                                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Retrieve the direct mergeinfo for the TARGET_WCPATH from the WC's
   mergeinfo prop, or that inherited from its nearest ancestor if the
   target has no info of its own.

   If no mergeinfo can be obtained from the WC or REPOS_ONLY is TRUE,
   get it from the repository (opening a new RA session if RA_SESSION
   is NULL).  Store any mergeinfo obtained for TARGET_WCPATH -- which
   is reflected by ENTRY -- in *TARGET_MERGEINFO, if no mergeinfo is
   found *TARGET_MERGEINFO is NULL.

   Like svn_client__get_wc_mergeinfo, this function considers no inherited
   mergeinfo to be found in the WC when trying to crawl into a parent path
   with a different working revision.

   INHERIT indicates whether explicit, explicit or inherited, or only
   inherited mergeinfo for TARGET_WCPATH is retrieved.

   If TARGET_WCPATH inherited its mergeinfo from a working copy ancestor
   or if it was obtained from the repository, set *INDIRECT to TRUE, set it
   to FALSE *otherwise. */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_client__get_wc_or_repos_mergeinfo</name><parameter_list>(<param><decl><type><name>svn_mergeinfo_t</name> *</type><name>target_mergeinfo</name></decl></param>,
                                      <param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl></param>,
                                      <param><decl><type><name>svn_boolean_t</name> *</type><name>indirect</name></decl></param>,
                                      <param><decl><type><name>svn_boolean_t</name></type> <name>repos_only</name></decl></param>,
                                      <param><decl><type><name>svn_mergeinfo_inheritance_t</name></type> <name>inherit</name></decl></param>,
                                      <param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
                                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target_wcpath</name></decl></param>,
                                      <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                                      <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Set *MERGEINFO_P to a mergeinfo constructed solely from the
   natural history of PATH_OR_URL@PEG_REVISION.  RA_SESSION is an RA
   session whose session URL maps to PATH_OR_URL's URL, or NULL.
   ADM_ACCESS is a working copy administrative access baton which can
   be used to fetch information about PATH_OR_URL (if PATH_OR_URL is a
   working copy path), or NULL.  If RANGE_YOUNGEST and RANGE_OLDEST
   are valid, use them to bound the revision ranges of returned
   mergeinfo.  See svn_ra_get_location_segments() for the rules
   governing PEG_REVISION, START_REVISION, and END_REVISION.*/</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_client__get_history_as_mergeinfo</name><parameter_list>(<param><decl><type><name>svn_mergeinfo_t</name> *</type><name>mergeinfo_p</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path_or_url</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>peg_revision</name></decl></param>,
                                     <param><decl><type><name>svn_revnum_t</name></type> <name>range_youngest</name></decl></param>,
                                     <param><decl><type><name>svn_revnum_t</name></type> <name>range_oldest</name></decl></param>,
                                     <param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
                                     <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                                     <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Translates an array SEGMENTS (of svn_location_t *), like the one
   returned from svn_client__repos_location_segments, into a mergeinfo
   *MERGEINFO_P, allocated in POOL. */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_client__mergeinfo_from_segments</name><parameter_list>(<param><decl><type><name>svn_mergeinfo_t</name> *</type><name>mergeinfo_p</name></decl></param>,
                                    <param><decl><type><name>apr_array_header_t</name> *</type><name>segments</name></decl></param>,
                                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Parse any mergeinfo from the WCPATH's ENTRY and store it in
   MERGEINFO.  If PRISTINE is true parse the pristine mergeinfo,
   working otherwise. If no record of any mergeinfo exists, set
   MERGEINFO to NULL.  Does not acount for inherited mergeinfo. */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_client__parse_mergeinfo</name><parameter_list>(<param><decl><type><name>svn_mergeinfo_t</name> *</type><name>mergeinfo</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>wcpath</name></decl></param>,
                            <param><decl><type><name>svn_boolean_t</name></type> <name>pristine</name></decl></param>,
                            <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                            <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Write MERGEINFO into the WC for WCPATH.  If MERGEINFO is NULL,
   remove any SVN_PROP_MERGEINFO for WCPATH.  If MERGEINFO is empty,
   record an empty property value (e.g. ""). */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_client__record_wc_mergeinfo</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>wcpath</name></decl></param>,
                                <param><decl><type><name>svn_mergeinfo_t</name></type> <name>mergeinfo</name></decl></param>,
                                <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Elide any svn:mergeinfo set on TARGET_PATH to its nearest working
   copy (or possibly repository) ancestor with equivalent mergeinfo.

   If WC_ELISION_LIMIT_PATH is NULL check up to the root of the working copy
   or the nearest switched parent for an elision destination, if none is found
   check the repository, otherwise check as far as WC_ELISION_LIMIT_PATH
   within the working copy.  TARGET_PATH and WC_ELISION_LIMIT_PATH, if it
   exists, must both be absolute or relative to the working directory.

   Elision occurs if:

     A) WCPATH has empty mergeinfo and no parent path with explicit mergeinfo
        can be found in either the WC or the repository (WC_ELISION_LIMIT_PATH
        must be NULL for this to occur).

     B) WCPATH has empty mergeinfo and its nearest parent also has empty
        mergeinfo.

     C) WCPATH has the same mergeinfo as its nearest parent when that parent's
        mergeinfo is adjusted for the path difference between the two, e.g.:

                                WCPATH's                          Parent's
                    WCPATH's    Nearest    Parent's   Path        Adjusted
        WCPATH      mergeinfo   parent     Mergeinfo  Difference  Mergeinfo
        -------     ---------   ---------  ---------  ----------  ---------
        A_COPY/D/H  '/A/D/H:3'  A_COPY     '/A:3'     'D/H'       '/A/D/H:3'

   If Elision occurs remove the svn:mergeinfo property from TARGET_WCPATH. */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_client__elide_mergeinfo</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target_wcpath</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>wc_elision_limit_path</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl></param>,
                            <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                            <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* For each path in CHILDREN_WITH_MERGEINFO which is an immediate child of
   TARGET_WCPATH, check if that path's mergeinfo elides to TARGET_WCPATH.
   If it does elide, clear all mergeinfo from the path.

   CHILDREN_WITH_MERGEINFO is filled with child paths (struct
   merge_path_t *) of TARGET_WCPATH which have svn:mergeinfo set on
   them, arranged in depth first order (see
   discover_and_merge_children). */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_client__elide_children</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> *</type><name>children_with_mergeinfo</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target_wcpath</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl></param>,
                           <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                           <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* A wrapper which calls svn_client__elide_mergeinfo() on each child
   in CHILDREN_WITH_MERGEINFO in depth-first. */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_client__elide_mergeinfo_for_tree</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>children_with_mergeinfo</name></decl></param>,
                                     <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                                     <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* TODO(reint): Document. */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_client__elide_mergeinfo_catalog</name><parameter_list>(<param><decl><type><name>svn_mergeinfo_t</name></type> <name>mergeinfo_catalog</name></decl></param>,
                                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SVN_LIBSVN_CLIENT_MERGEINFO_H */</comment>
</unit>
