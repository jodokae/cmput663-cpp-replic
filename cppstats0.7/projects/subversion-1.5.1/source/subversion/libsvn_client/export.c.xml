<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_client/export.c"><comment type="block">/*
 * export.c:  export a tree.
 *
 * ====================================================================
 * Copyright (c) 2000-2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<comment type="block">/* ==================================================================== */</comment>


<escape char="0xc"/>
<comment type="block">/*** Includes. ***/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_file_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_md5.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_subst.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_md5.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_props.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"client.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_wc_private.h"</cpp:file></cpp:include>

<escape char="0xc"/>
<comment type="block">/*** Code. ***/</comment>

<comment type="block">/* Add EXTERNALS_PROP_VAL for the export destination path PATH to
   TRAVERSAL_INFO.  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_externals</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>externals</name></decl></param>,
              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
              <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>externals_prop_val</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name> <init>= <expr><call><name>apr_hash_pool_get</name><argument_list>(<argument><expr><name>externals</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr>! <name>externals_prop_val</name></expr>)</condition><then>
    <return>return;</return></then></if>

  <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>externals</name></expr></argument>,
               <argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>,
               <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
               <argument><expr><call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>externals_prop_val</name>-&gt;<name>data</name></name></expr></argument>,
                              <argument><expr><name><name>externals_prop_val</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/* Helper function that gets the eol style and optionally overrides the
   EOL marker for files marked as native with the EOL marker matching
   the string specified in requested_value which is of the same format
   as the svn:eol-style property values. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>get_eol_style</name><parameter_list>(<param><decl><type><name>svn_subst_eol_style_t</name> *</type><name>style</name></decl></param>,
              <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>eol</name></decl></param>,
              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>,
              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>requested_value</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>svn_subst_eol_style_from_value</name><argument_list>(<argument><expr><name>style</name></expr></argument>, <argument><expr><name>eol</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>requested_value</name> &amp;&amp; *<name>style</name> == <name>svn_subst_eol_style_native</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_subst_eol_style_t</name></type> <name>requested_style</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>requested_eol</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>svn_subst_eol_style_from_value</name><argument_list>(<argument><expr>&amp;<name>requested_style</name></expr></argument>, <argument><expr>&amp;<name>requested_eol</name></expr></argument>,
                                     <argument><expr><name>requested_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>requested_style</name> == <name>svn_subst_eol_style_fixed</name></expr>)</condition><then>
        <expr_stmt><expr>*<name>eol</name> = <name>requested_eol</name></expr>;</expr_stmt></then>
      <else>else
        <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_IO_UNKNOWN_EOL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                 <argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s' is not a valid EOL value"</expr></argument>)</argument_list></call></expr></argument>,
                                 <argument><expr><name>requested_value</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
    }</block></then></if>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>copy_one_versioned_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>from</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>to</name></decl></param>,
                        <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                        <param><decl><type><name>svn_opt_revision_t</name> *</type><name>revision</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>native_eol</name></decl></param>,
                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>kw</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_subst_eol_style_t</name></type> <name>style</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_string_t</name> *</type><name>eol_style</name></decl>, *<decl><type ref="prev"/><name>keywords</name></decl>, *<decl><type ref="prev"/><name>executable</name></decl>, *<decl><type ref="prev"/><name>externals</name></decl>, *<decl><type ref="prev"/><name>special</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>eol</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>local_mod</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_time_t</name></type> <name>tm</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Only export 'added' files when the revision is WORKING.
     Otherwise, skip the 'added' files, since they didn't exist
     in the BASE revision and don't have an associated text-base.

     Don't export 'deleted' files and directories unless it's a
     revision other than WORKING.  These files and directories
     don't really exist in WORKING. */</comment>
  <if>if <condition>(<expr>(<name><name>revision</name>-&gt;<name>kind</name></name> != <name>svn_opt_revision_working</name> &amp;&amp;
       <name><name>entry</name>-&gt;<name>schedule</name></name> == <name>svn_wc_schedule_add</name>) ||
      (<name><name>revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_working</name> &amp;&amp;
       <name><name>entry</name>-&gt;<name>schedule</name></name> == <name>svn_wc_schedule_delete</name>)</expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <if>if <condition>(<expr><name><name>revision</name>-&gt;<name>kind</name></name> != <name>svn_opt_revision_working</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_get_pristine_copy_path</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr>&amp;<name>base</name></expr></argument>,
                                            <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_get_prop_diffs</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>props</name></expr></argument>, <argument><expr><name>from</name></expr></argument>,
                                    <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <decl_stmt><decl><type><name>svn_wc_status2_t</name> *</type><name>status</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>base</name> = <name>from</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_prop_list</name><argument_list>(<argument><expr>&amp;<name>props</name></expr></argument>, <argument><expr><name>from</name></expr></argument>,
                               <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_status2</name><argument_list>(<argument><expr>&amp;<name>status</name></expr></argument>, <argument><expr><name>from</name></expr></argument>,
                             <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name><name>status</name>-&gt;<name>text_status</name></name> != <name>svn_wc_status_normal</name></expr>)</condition><then>
        <expr_stmt><expr><name>local_mod</name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
    }</block></else></if>

  <expr_stmt><expr><name>eol_style</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>SVN_PROP_EOL_STYLE</name></expr></argument>,
                           <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>keywords</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>SVN_PROP_KEYWORDS</name></expr></argument>,
                          <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>executable</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>SVN_PROP_EXECUTABLE</name></expr></argument>,
                            <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>externals</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>SVN_PROP_EXTERNALS</name></expr></argument>,
                           <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>special</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>SVN_PROP_SPECIAL</name></expr></argument>,
                         <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>eol_style</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_eol_style</name><argument_list>(<argument><expr>&amp;<name>style</name></expr></argument>, <argument><expr>&amp;<name>eol</name></expr></argument>, <argument><expr><name><name>eol_style</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>native_eol</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr><name>local_mod</name> &amp;&amp; (! <name>special</name>)</expr>)</condition><then>
    <block>{
      <comment type="block">/* Use the modified time from the working copy of
         the file */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_affected_time</name><argument_list>(<argument><expr>&amp;<name>tm</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <expr_stmt><expr><name>tm</name> = <name><name>entry</name>-&gt;<name>cmt_date</name></name></expr>;</expr_stmt>
    }</block></else></if>

  <if>if <condition>(<expr><name>keywords</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fmt</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>author</name></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>local_mod</name></expr>)</condition><then>
        <block>{
          <comment type="block">/* For locally modified files, we'll append an 'M'
             to the revision number, and set the author to
             "(local)" since we can't always determine the
             current user's username */</comment>
          <expr_stmt><expr><name>fmt</name> = "%ldM"</expr>;</expr_stmt>
          <expr_stmt><expr><name>author</name> = <call><name>_</name><argument_list>(<argument><expr>"(local)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else
        <block>{
          <expr_stmt><expr><name>fmt</name> = "%ld"</expr>;</expr_stmt>
          <expr_stmt><expr><name>author</name> = <name><name>entry</name>-&gt;<name>cmt_author</name></name></expr>;</expr_stmt>
        }</block></else></if>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_subst_build_keywords2</name>
              <argument_list>(<argument><expr>&amp;<name>kw</name></expr></argument>, <argument><expr><name><name>keywords</name>-&gt;<name>data</name></name></expr></argument>,
               <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>cmt_rev</name></name></expr></argument>)</argument_list></call></expr></argument>,
               <argument><expr><name><name>entry</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><name>author</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_subst_copy_and_translate3</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>eol</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                                        <argument><expr><name>kw</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
                                        <argument><expr><name>special</name> ? <name>TRUE</name> : <name>FALSE</name></expr></argument>,
                                        <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>executable</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_set_file_executable</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
                                       <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr>! <name>special</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_set_file_affected_time</name><argument_list>(<argument><expr><name>tm</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>copy_versioned_files</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>from</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>to</name></decl></param>,
                     <param><decl><type><name>svn_opt_revision_t</name> *</type><name>revision</name></decl></param>,
                     <param><decl><type><name>svn_boolean_t</name></type> <name>force</name></decl></param>,
                     <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_externals</name></decl></param>,
                     <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>native_eol</name></decl></param>,
                     <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iterpool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>entries</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>finfo</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_probe_open3</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                                 <argument><expr>0</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>cancel_func</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>,
                                 <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_versioned</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Only export 'added' files when the revision is WORKING.
     Otherwise, skip the 'added' files, since they didn't exist
     in the BASE revision and don't have an associated text-base.

     Don't export 'deleted' files and directories unless it's a
     revision other than WORKING.  These files and directories
     don't really exist in WORKING. */</comment>
  <if>if <condition>(<expr>(<name><name>revision</name>-&gt;<name>kind</name></name> != <name>svn_opt_revision_working</name> &amp;&amp;
       <name><name>entry</name>-&gt;<name>schedule</name></name> == <name>svn_wc_schedule_add</name>) ||
      (<name><name>revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_working</name> &amp;&amp;
       <name><name>entry</name>-&gt;<name>schedule</name></name> == <name>svn_wc_schedule_delete</name>)</expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* Try to make the new directory.  If this fails because the
         directory already exists, check our FORCE flag to see if we
         care. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_stat</name><argument_list>(<argument><expr>&amp;<name>finfo</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>APR_FINFO_PROT</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>err</name> = <call><name>svn_io_dir_make</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name><name>finfo</name>.<name>protection</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
        <block>{
          <if>if <condition>(<expr>! <call><name>APR_STATUS_IS_EEXIST</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>apr_err</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>err</name></expr>;</return></then></if>
          <if>if <condition>(<expr>! <name>force</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>SVN_ERR_W</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Destination directory exists, and will not be "
                             "overwritten unless forced"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
          <else>else
            <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
        }</block></then></if>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entries_read</name><argument_list>(<argument><expr>&amp;<name>entries</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>iterpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
        <block>{
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>item</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>

          <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><name>item</name> = <name>key</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>entry</name> = <name>val</name></expr>;</expr_stmt>

          <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>cancel_func</name></name></expr>)</condition><then>
            <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>ctx</name>-&gt;<name>cancel_func</name></name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

          <comment type="block">/* ### We could also invoke ctx-&gt;notify_func somewhere in
             ### here... Is it called for, though?  Not sure. */</comment>

          <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name></expr>)</condition><then>
            <block>{
              <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>SVN_WC_ENTRY_THIS_DIR</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
                <block>{
                  <empty_stmt>;</empty_stmt> <comment type="block">/* skip this, it's the current directory that we're
                       handling now. */</comment>
                }</block></then>
              <else>else
                <block>{
                  <if>if <condition>(<expr><name>depth</name> == <name>svn_depth_infinity</name></expr>)</condition><then>
                    <block>{
                      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>new_from</name> <init>= <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>item</name></expr></argument>,
                                                           <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>new_to</name> <init>= <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>copy_versioned_files</name><argument_list>(<argument><expr><name>new_from</name></expr></argument>, <argument><expr><name>new_to</name></expr></argument>,
                                                   <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>force</name></expr></argument>,
                                                   <argument><expr><name>ignore_externals</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>,
                                                   <argument><expr><name>native_eol</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>,
                                                   <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></else></if>
            }</block></then>
          <else>else <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_file</name></expr>)</condition><then>
            <block>{
              <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>new_from</name> <init>= <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>new_to</name> <init>= <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

              <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>copy_one_versioned_file</name><argument_list>(<argument><expr><name>new_from</name></expr></argument>, <argument><expr><name>new_to</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
                                              <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>native_eol</name></expr></argument>,
                                              <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if>
        }</block></for>

      <comment type="block">/* Handle externals. */</comment>
      <if>if <condition>(<expr>! <name>ignore_externals</name> &amp;&amp; <name>depth</name> == <name>svn_depth_infinity</name>
          &amp;&amp; <name><name>entry</name>-&gt;<name>depth</name></name> == <name>svn_depth_infinity</name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>ext_items</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>prop_val</name></decl>;</decl_stmt>

          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_prop_get</name><argument_list>(<argument><expr>&amp;<name>prop_val</name></expr></argument>, <argument><expr><name>SVN_PROP_EXTERNALS</name></expr></argument>,
                                  <argument><expr><name>from</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>prop_val</name> != <name>NULL</name></expr>)</condition><then>
            <block>{
              <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

              <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_parse_externals_description3</name><argument_list>(<argument><expr>&amp;<name>ext_items</name></expr></argument>, <argument><expr><name>from</name></expr></argument>,
                                                          <argument><expr><name><name>prop_val</name>-&gt;<name>data</name></name></expr></argument>,
                                                          <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>ext_items</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
                <block>{
                  <decl_stmt><decl><type><name>svn_wc_external_item2_t</name> *</type><name>ext_item</name></decl>;</decl_stmt>
                  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>new_from</name></decl>, *<decl><type ref="prev"/><name>new_to</name></decl>;</decl_stmt>

                  <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                  <expr_stmt><expr><name>ext_item</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>ext_items</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
                                           <argument><expr><name>svn_wc_external_item2_t</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><name>new_from</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name><name>ext_item</name>-&gt;<name>target_dir</name></name></expr></argument>,
                                           <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><name>new_to</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name><name>ext_item</name>-&gt;<name>target_dir</name></name></expr></argument>,
                                         <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                   <comment type="block">/* The target dir might have multiple components.  Guarantee
                      the path leading down to the last component. */</comment>
                  <if>if <condition>(<expr><call><name>svn_path_component_count</name><argument_list>(<argument><expr><name><name>ext_item</name>-&gt;<name>target_dir</name></name></expr></argument>)</argument_list></call> &gt; 1</expr>)</condition><then>
                    <block>{
                      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>parent</name> <init>= <expr><call><name>svn_path_dirname</name><argument_list>(<argument><expr><name>new_to</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_make_dir_recursively</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>

                  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>copy_versioned_files</name><argument_list>(<argument><expr><name>new_from</name></expr></argument>, <argument><expr><name>new_to</name></expr></argument>,
                                               <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>force</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                                               <argument><expr><name>svn_depth_infinity</name></expr></argument>, <argument><expr><name>native_eol</name></expr></argument>,
                                               <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
            }</block></then></if>
        }</block></then></if>

      <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_file</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>copy_one_versioned_file</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>,
                                      <argument><expr><name>native_eol</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></else></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_close</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Abstraction of open_root.
 *
 * Create PATH if it does not exist and is not obstructed, and invoke
 * NOTIFY_FUNC with NOTIFY_BATON on PATH.
 *
 * If PATH exists but is a file, then error with SVN_ERR_WC_NOT_DIRECTORY.
 *
 * If PATH is a already a directory, then error with
 * SVN_ERR_WC_OBSTRUCTED_UPDATE, unless FORCE, in which case just
 * export into PATH with no error.
 */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>open_root_internal</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                   <param><decl><type><name>svn_boolean_t</name></type> <name>force</name></decl></param>,
                   <param><decl><type><name>svn_wc_notify_func2_t</name></type> <name>notify_func</name></decl></param>,
                   <param><decl><type><name>void</name> *</type><name>notify_baton</name></decl></param>,
                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_check_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>kind</name> == <name>svn_node_none</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_make_dir_recursively</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else <if>if <condition>(<expr><name>kind</name> == <name>svn_node_file</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_WC_NOT_DIRECTORY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s' exists and is not a directory"</expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then>
  <else>else <if>if <condition>(<expr>(<name>kind</name> != <name>svn_node_dir</name>) || (! <name>force</name>)</expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_WC_OBSTRUCTED_UPDATE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s' already exists"</expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if></else></if></else></if>

  <if>if <condition>(<expr><name>notify_func</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_wc_notify_t</name> *</type><name>notify</name> <init>= <expr><call><name>svn_wc_create_notify</name><argument_list>(<argument><expr><name>path</name></expr></argument>,
                                                     <argument><expr><name>svn_wc_notify_update_add</name></expr></argument>,
                                                     <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>notify</name>-&gt;<name>kind</name></name> = <name>svn_node_dir</name></expr>;</expr_stmt>
      <expr_stmt><expr><call>(*<name>notify_func</name>)<argument_list>(<argument><expr><name>notify_baton</name></expr></argument>, <argument><expr><name>notify</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* ---------------------------------------------------------------------- */</comment>

<comment type="block">/*** A dedicated 'export' editor, which does no .svn/ accounting.  ***/</comment>


<struct>struct <name>edit_baton</name>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>root_path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>root_url</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>force</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name> *</type><name>target_revision</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>externals</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>native_eol</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>svn_wc_notify_func2_t</name></type> <name>notify_func</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>notify_baton</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>dir_baton</name>
<block>{
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>edit_baton</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>file_baton</name>
<block>{
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>edit_baton</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmppath</name></decl>;</decl_stmt>

  <comment type="block">/* We need to keep this around so we can explicitly close it in close_file,
     thus flushing its output to disk so we can copy and translate it. */</comment>
  <decl_stmt><decl><type><name>apr_file_t</name> *</type><name>tmp_file</name></decl>;</decl_stmt>

  <comment type="block">/* The MD5 digest of the file's fulltext.  This is all zeros until
     the last textdelta window handler call returns. */</comment>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>text_digest</name><index>[<expr><name>APR_MD5_DIGESTSIZE</name></expr>]</index></name></decl>;</decl_stmt>

  <comment type="block">/* The three svn: properties we might actually care about. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>eol_style_val</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>keywords_val</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>executable_val</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>special</name></decl>;</decl_stmt>

  <comment type="block">/* Any keyword vals to be substituted */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>revision</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>author</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_time_t</name></type> <name>date</name></decl>;</decl_stmt>

  <comment type="block">/* Pool associated with this baton. */</comment>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>handler_baton</name>
<block>{
  <decl_stmt><decl><type><name>svn_txdelta_window_handler_t</name></type> <name>apply_handler</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>apply_baton</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmppath</name></decl>;</decl_stmt>
}</block>;</struct>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>set_target_revision</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
                    <param><decl><type><name>svn_revnum_t</name></type> <name>target_revision</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Stashing a target_revision in the baton */</comment>
  <expr_stmt><expr>*(<name><name>eb</name>-&gt;<name>target_revision</name></name>) = <name>target_revision</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>



<comment type="block">/* Just ensure that the main export directory exists. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>open_root</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
          <param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
          <param><decl><type><name>void</name> **</type><name>root_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>db</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>db</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>open_root_internal</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>root_path</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>force</name></name></expr></argument>,
                             <argument><expr><name><name>eb</name>-&gt;<name>notify_func</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>notify_baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Build our dir baton. */</comment>
  <expr_stmt><expr><name><name>db</name>-&gt;<name>path</name></name> = <name><name>eb</name>-&gt;<name>root_path</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>db</name>-&gt;<name>edit_baton</name></name> = <name>eb</name></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>root_baton</name> = <name>db</name></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Ensure the directory exists, and send feedback. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>add_directory</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
              <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl></param>,
              <param><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_revision</name></decl></param>,
              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
              <param><decl><type><name>void</name> **</type><name>baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>db</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>db</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>pb</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>full_path</name> <init>= <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>root_path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_check_path</name><argument_list>(<argument><expr><name>full_path</name></expr></argument>, <argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>kind</name> == <name>svn_node_none</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_dir_make</name><argument_list>(<argument><expr><name>full_path</name></expr></argument>, <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else <if>if <condition>(<expr><name>kind</name> == <name>svn_node_file</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_WC_NOT_DIRECTORY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s' exists and is not a directory"</expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>full_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then>
  <else>else <if>if <condition>(<expr>! (<name>kind</name> == <name>svn_node_dir</name> &amp;&amp; <name><name>eb</name>-&gt;<name>force</name></name>)</expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_WC_OBSTRUCTED_UPDATE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s' already exists"</expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>full_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if></else></if></else></if>

  <if>if <condition>(<expr><name><name>eb</name>-&gt;<name>notify_func</name></name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_wc_notify_t</name> *</type><name>notify</name> <init>= <expr><call><name>svn_wc_create_notify</name><argument_list>(<argument><expr><name>full_path</name></expr></argument>,
                                                     <argument><expr><name>svn_wc_notify_update_add</name></expr></argument>,
                                                     <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>notify</name>-&gt;<name>kind</name></name> = <name>svn_node_dir</name></expr>;</expr_stmt>
      <expr_stmt><expr><call>(*<name><name>eb</name>-&gt;<name>notify_func</name></name>)<argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>notify_baton</name></name></expr></argument>, <argument><expr><name>notify</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <comment type="block">/* Build our dir baton. */</comment>
  <expr_stmt><expr><name><name>db</name>-&gt;<name>path</name></name> = <name>full_path</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>db</name>-&gt;<name>edit_baton</name></name> = <name>eb</name></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>baton</name> = <name>db</name></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Build a file baton. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>add_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
         <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl></param>,
         <param><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_revision</name></decl></param>,
         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
         <param><decl><type><name>void</name> **</type><name>baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>pb</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>fb</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>fb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>full_path</name> <init>= <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>root_path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>full_url</name> <init>= <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>root_url</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>fb</name>-&gt;<name>edit_baton</name></name> = <name>eb</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fb</name>-&gt;<name>path</name></name> = <name>full_path</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fb</name>-&gt;<name>url</name></name> = <name>full_url</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fb</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>baton</name> = <name>fb</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>window_handler</name><parameter_list>(<param><decl><type><name>svn_txdelta_window_t</name> *</type><name>window</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>handler_baton</name> *</type><name>hb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>err</name> = <call><name><name>hb</name>-&gt;<name>apply_handler</name></name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name><name>hb</name>-&gt;<name>apply_baton</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* We failed to apply the patch; clean up the temporary file.  */</comment>
      <expr_stmt><expr><call><name>apr_file_remove</name><argument_list>(<argument><expr><name><name>hb</name>-&gt;<name>tmppath</name></name></expr></argument>, <argument><expr><name><name>hb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <return>return <expr><name>err</name></expr>;</return>
}</block></function>



<comment type="block">/* Write incoming data into the tmpfile stream */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>apply_textdelta</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_checksum</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                <param><decl><type><name>svn_txdelta_window_handler_t</name> *</type><name>handler</name></decl></param>,
                <param><decl><type><name>void</name> **</type><name>handler_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>fb</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>handler_baton</name> *</type><name>hb</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>hb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_open_unique_file2</name><argument_list>(<argument><expr>&amp;<name><name>fb</name>-&gt;<name>tmp_file</name></name></expr></argument>, <argument><expr>&amp;(<name><name>fb</name>-&gt;<name>tmppath</name></name>)</expr></argument>,
                                   <argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr>".tmp"</expr></argument>,
                                   <argument><expr><name>svn_io_file_del_none</name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>hb</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hb</name>-&gt;<name>tmppath</name></name> = <name><name>fb</name>-&gt;<name>tmppath</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>svn_txdelta_apply</name><argument_list>(<argument><expr><call><name>svn_stream_empty</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name>svn_stream_from_aprfile</name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>tmp_file</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><name><name>fb</name>-&gt;<name>text_digest</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>,
                    <argument><expr>&amp;<name><name>hb</name>-&gt;<name>apply_handler</name></name></expr></argument>, <argument><expr>&amp;<name><name>hb</name>-&gt;<name>apply_baton</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>handler_baton</name> = <name>hb</name></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>handler</name> = <name>window_handler</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>change_file_prop</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>fb</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr>! <name>value</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* Store only the magic three properties. */</comment>
  <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_PROP_EOL_STYLE</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <expr_stmt><expr><name><name>fb</name>-&gt;<name>eol_style_val</name></name> = <call><name>svn_string_dup</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>

  <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_PROP_KEYWORDS</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <expr_stmt><expr><name><name>fb</name>-&gt;<name>keywords_val</name></name> = <call><name>svn_string_dup</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>

  <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_PROP_EXECUTABLE</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <expr_stmt><expr><name><name>fb</name>-&gt;<name>executable_val</name></name> = <call><name>svn_string_dup</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>

  <comment type="block">/* Try to fill out the baton's keywords-structure too. */</comment>
  <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_PROP_ENTRY_COMMITTED_REV</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <expr_stmt><expr><name><name>fb</name>-&gt;<name>revision</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>value</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>

  <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_PROP_ENTRY_COMMITTED_DATE</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_time_from_cstring</name><argument_list>(<argument><expr>&amp;<name><name>fb</name>-&gt;<name>date</name></name></expr></argument>, <argument><expr><name><name>value</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>

  <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_PROP_ENTRY_LAST_AUTHOR</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <expr_stmt><expr><name><name>fb</name>-&gt;<name>author</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>value</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>

  <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_PROP_SPECIAL</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <expr_stmt><expr><name><name>fb</name>-&gt;<name>special</name></name> = <name>TRUE</name></expr>;</expr_stmt></then></if></else></if></else></if></else></if></else></if></else></if></else></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>change_dir_prop</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>dir_baton</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>db</name> <init>= <expr><name>dir_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>db</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>value</name> &amp;&amp; (<call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_PROP_EXTERNALS</name></expr></argument>)</argument_list></call> == 0)</expr>)</condition><then>
    <expr_stmt><expr><call><name>add_externals</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>externals</name></name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Move the tmpfile to file, and send feedback. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>close_file</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>text_checksum</name></decl></param>,
           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>fb</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>fb</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Was a txdelta even sent? */</comment>
  <if>if <condition>(<expr>! <name><name>fb</name>-&gt;<name>tmppath</name></name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_close</name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>tmp_file</name></name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>text_checksum</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>actual_checksum</name>
        <init>= <expr><call><name>svn_md5_digest_to_cstring</name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>text_digest</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>actual_checksum</name> &amp;&amp; (<call><name>strcmp</name><argument_list>(<argument><expr><name>text_checksum</name></expr></argument>, <argument><expr><name>actual_checksum</name></expr></argument>)</argument_list></call> != 0)</expr>)</condition><then>
        <block>{
          <return>return <expr><call><name>svn_error_createf</name>
            <argument_list>(<argument><expr><name>SVN_ERR_CHECKSUM_MISMATCH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
             <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Checksum mismatch for '%s'; expected: '%s', actual: '%s'"</expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><name>text_checksum</name></expr></argument>, <argument><expr><name>actual_checksum</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
    }</block></then></if>

  <if>if <condition>(<expr>(! <name><name>fb</name>-&gt;<name>eol_style_val</name></name>) &amp;&amp; (! <name><name>fb</name>-&gt;<name>keywords_val</name></name>) &amp;&amp; (! <name><name>fb</name>-&gt;<name>special</name></name>)</expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_rename</name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>tmppath</name></name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <decl_stmt><decl><type><name>svn_subst_eol_style_t</name></type> <name>style</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>eol</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>final_kw</name></decl>;</decl_stmt>

      <if>if <condition>(<expr><name><name>fb</name>-&gt;<name>eol_style_val</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_eol_style</name><argument_list>(<argument><expr>&amp;<name>style</name></expr></argument>, <argument><expr>&amp;<name>eol</name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>eol_style_val</name>-&gt;<name>data</name></name></expr></argument>,
                              <argument><expr><name><name>eb</name>-&gt;<name>native_eol</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <if>if <condition>(<expr><name><name>fb</name>-&gt;<name>keywords_val</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_subst_build_keywords2</name><argument_list>(<argument><expr>&amp;<name>final_kw</name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>keywords_val</name>-&gt;<name>data</name></name></expr></argument>,
                                          <argument><expr><name><name>fb</name>-&gt;<name>revision</name></name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>date</name></name></expr></argument>,
                                          <argument><expr><name><name>fb</name>-&gt;<name>author</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_subst_copy_and_translate3</name>
              <argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>tmppath</name></name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>,
               <argument><expr><name><name>fb</name>-&gt;<name>eol_style_val</name></name> ? <name>eol</name> : <name>NULL</name></expr></argument>,
               <argument><expr><name><name>fb</name>-&gt;<name>eol_style_val</name></name> ? <name>TRUE</name> : <name>FALSE</name></expr></argument>, <comment type="block">/* repair */</comment>
               <argument><expr><name><name>fb</name>-&gt;<name>keywords_val</name></name> ? <name>final_kw</name> : <name>NULL</name></expr></argument>,
               <argument><expr><name>TRUE</name></expr></argument>, <comment type="block">/* expand */</comment>
               <argument><expr><name><name>fb</name>-&gt;<name>special</name></name></expr></argument>,
               <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_remove_file</name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>tmppath</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <if>if <condition>(<expr><name><name>fb</name>-&gt;<name>executable_val</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_set_file_executable</name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr><name><name>fb</name>-&gt;<name>date</name></name> &amp;&amp; (! <name><name>fb</name>-&gt;<name>special</name></name>)</expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_set_file_affected_time</name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>date</name></name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr><name><name>fb</name>-&gt;<name>edit_baton</name>-&gt;<name>notify_func</name></name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_wc_notify_t</name> *</type><name>notify</name> <init>= <expr><call><name>svn_wc_create_notify</name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>,
                                                     <argument><expr><name>svn_wc_notify_update_add</name></expr></argument>,
                                                     <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>notify</name>-&gt;<name>kind</name></name> = <name>svn_node_file</name></expr>;</expr_stmt>
      <expr_stmt><expr><call>(*<name><name>fb</name>-&gt;<name>edit_baton</name>-&gt;<name>notify_func</name></name>)<argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>edit_baton</name>-&gt;<name>notify_baton</name></name></expr></argument>, <argument><expr><name>notify</name></expr></argument>,
                                     <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<escape char="0xc"/>
<comment type="block">/*** Public Interfaces ***/</comment>

<function><type><name>svn_error_t</name> *</type>
<name>svn_client_export4</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name> *</type><name>result_rev</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>from</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>to</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>peg_revision</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision</name></decl></param>,
                   <param><decl><type><name>svn_boolean_t</name></type> <name>overwrite</name></decl></param>,
                   <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_externals</name></decl></param>,
                   <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>native_eol</name></decl></param>,
                   <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>edit_revision</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><call><name>svn_path_is_url</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call> ||
      ! (<name><name>revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_base</name> ||
         <name><name>revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_committed</name> ||
         <name><name>revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_working</name> ||
         <name><name>revision</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_unspecified</name>)</expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>revnum</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
      <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>eb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_root_url</name></decl>;</decl_stmt>

      <comment type="block">/* Get the RA connection. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__ra_session_from_path</name><argument_list>(<argument><expr>&amp;<name>ra_session</name></expr></argument>, <argument><expr>&amp;<name>revnum</name></expr></argument>,
                                               <argument><expr>&amp;<name>url</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                               <argument><expr><name>peg_revision</name></expr></argument>,
                                               <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Get the repository root. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_repos_root2</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>&amp;<name>repos_root_url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>eb</name>-&gt;<name>root_path</name></name> = <name>to</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>eb</name>-&gt;<name>root_url</name></name> = <name>url</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>eb</name>-&gt;<name>force</name></name> = <name>overwrite</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>eb</name>-&gt;<name>target_revision</name></name> = &amp;<name>edit_revision</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>eb</name>-&gt;<name>notify_func</name></name> = <name><name>ctx</name>-&gt;<name>notify_func2</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>eb</name>-&gt;<name>notify_baton</name></name> = <name><name>ctx</name>-&gt;<name>notify_baton2</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>eb</name>-&gt;<name>externals</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>eb</name>-&gt;<name>native_eol</name></name> = <name>native_eol</name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_check_path</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>revnum</name></expr></argument>, <argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>kind</name> == <name>svn_node_file</name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
          <decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>fb</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>fb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <comment type="block">/* Since you cannot actually root an editor at a file, we
           * manually drive a few functions of our editor. */</comment>

          <comment type="block">/* This is the equivalent of a parentless add_file(). */</comment>
          <expr_stmt><expr><name><name>fb</name>-&gt;<name>edit_baton</name></name> = <name>eb</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>fb</name>-&gt;<name>path</name></name> = <name><name>eb</name>-&gt;<name>root_path</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>fb</name>-&gt;<name>url</name></name> = <name><name>eb</name>-&gt;<name>root_url</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>fb</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>

          <comment type="block">/* Copied from apply_textdelta(). */</comment>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_open_unique_file2</name><argument_list>(<argument><expr>&amp;<name><name>fb</name>-&gt;<name>tmp_file</name></name></expr></argument>, <argument><expr>&amp;(<name><name>fb</name>-&gt;<name>tmppath</name></name>)</expr></argument>,
                                           <argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr>".tmp"</expr></argument>,
                                           <argument><expr><name>svn_io_file_del_none</name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="block">/* Step outside the editor-likeness for a moment, to actually talk
           * to the repository. */</comment>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_file</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>revnum</name></expr></argument>,
                                  <argument><expr><call><name>svn_stream_from_aprfile</name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>tmp_file</name></name></expr></argument>,
                                                          <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
                                  <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="block">/* Push the props into change_file_prop(), to update the file_baton
           * with information. */</comment>
          <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>props</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
            <block>{
              <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
              <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>change_file_prop</name><argument_list>(<argument><expr><name>fb</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>

          <comment type="block">/* And now just use close_file() to do all the keyword and EOL
           * work, and put the file into place. */</comment>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>close_file</name><argument_list>(<argument><expr><name>fb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else <if>if <condition>(<expr><name>kind</name> == <name>svn_node_dir</name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>void</name> *</type><name>edit_baton</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>export_editor</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>const</specifier> <name>svn_ra_reporter3_t</name> *</type><name>reporter</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>void</name> *</type><name>report_baton</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>svn_delta_editor_t</name> *</type><name>editor</name> <init>= <expr><call><name>svn_delta_default_editor</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>use_sleep</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

          <expr_stmt><expr><name><name>editor</name>-&gt;<name>set_target_revision</name></name> = <name>set_target_revision</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>editor</name>-&gt;<name>open_root</name></name> = <name>open_root</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>editor</name>-&gt;<name>add_directory</name></name> = <name>add_directory</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>editor</name>-&gt;<name>add_file</name></name> = <name>add_file</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>editor</name>-&gt;<name>apply_textdelta</name></name> = <name>apply_textdelta</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>editor</name>-&gt;<name>close_file</name></name> = <name>close_file</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>editor</name>-&gt;<name>change_file_prop</name></name> = <name>change_file_prop</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>editor</name>-&gt;<name>change_dir_prop</name></name> = <name>change_dir_prop</name></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_delta_get_cancellation_editor</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>cancel_func</name></name></expr></argument>,
                                                    <argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>,
                                                    <argument><expr><name>editor</name></expr></argument>,
                                                    <argument><expr><name>eb</name></expr></argument>,
                                                    <argument><expr>&amp;<name>export_editor</name></expr></argument>,
                                                    <argument><expr>&amp;<name>edit_baton</name></expr></argument>,
                                                    <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


          <comment type="block">/* Manufacture a basic 'report' to the update reporter. */</comment>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_do_update2</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>,
                                    <argument><expr>&amp;<name>reporter</name></expr></argument>, <argument><expr>&amp;<name>report_baton</name></expr></argument>,
                                    <argument><expr><name>revnum</name></expr></argument>,
                                    <argument><expr>""</expr></argument>, <comment type="block">/* no sub-target */</comment>
                                    <argument><expr><name>depth</name></expr></argument>,
                                    <argument><expr><name>FALSE</name></expr></argument>, <comment type="block">/* don't want copyfrom-args */</comment>
                                    <argument><expr><name>export_editor</name></expr></argument>, <argument><expr><name>edit_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>reporter</name>-&gt;<name>set_path</name></name><argument_list>(<argument><expr><name>report_baton</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>revnum</name></expr></argument>,
                                     <comment type="block">/* Depth is irrelevant, as we're
                                        passing start_empty=TRUE anyway. */</comment>
                                     <argument><expr><name>svn_depth_infinity</name></expr></argument>,
                                     <argument><expr><name>TRUE</name></expr></argument>, <comment type="block">/* "help, my dir is empty!" */</comment>
                                     <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>reporter</name>-&gt;<name>finish_report</name></name><argument_list>(<argument><expr><name>report_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="block">/* Special case: Due to our sly export/checkout method of
           * updating an empty directory, no target will have been created
           * if the exported item is itself an empty directory
           * (export_editor-&gt;open_root never gets called, because there
           * are no "changes" to make to the empty dir we reported to the
           * repository).
           *
           * So we just create the empty dir manually; but we do it via
           * open_root_internal(), in order to get proper notification.
           */</comment>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_check_path</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>kind</name> == <name>svn_node_none</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>open_root_internal</name>
                    <argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name>overwrite</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>notify_func2</name></name></expr></argument>,
                     <argument><expr><name><name>ctx</name>-&gt;<name>notify_baton2</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

          <if>if <condition>(<expr>! <name>ignore_externals</name> &amp;&amp; <name>depth</name> == <name>svn_depth_infinity</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__fetch_externals</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>externals</name></name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>,
                                                <argument><expr><name>repos_root_url</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
                                                <argument><expr>&amp;<name>use_sleep</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></then>
      <else>else <if>if <condition>(<expr><name>kind</name> == <name>svn_node_none</name></expr>)</condition><then>
        <block>{
          <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_ILLEGAL_URL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                   <argument><expr><call><name>_</name><argument_list>(<argument><expr>"URL '%s' doesn't exist"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if></else></if></else></if>
      <comment type="block">/* kind == svn_node_unknown not handled */</comment>
    }</block></then>
  <else>else
    <block>{
      <decl_stmt><decl><type><name>svn_opt_revision_t</name></type> <name>working_revision</name> <init>= <expr>*<name>revision</name></expr></init></decl>;</decl_stmt>
      <comment type="block">/* This is a working copy export. */</comment>
      <if>if <condition>(<expr><name><name>working_revision</name>.<name>kind</name></name> == <name>svn_opt_revision_unspecified</name></expr>)</condition><then>
        <block>{
          <comment type="block">/* Default to WORKING in the case that we have
             been given a working copy path */</comment>
          <expr_stmt><expr><name><name>working_revision</name>.<name>kind</name></name> = <name>svn_opt_revision_working</name></expr>;</expr_stmt>
        }</block></then></if>

      <comment type="block">/* just copy the contents of the working copy into the target path. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>copy_versioned_files</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr>&amp;<name>working_revision</name></expr></argument>, <argument><expr><name>overwrite</name></expr></argument>,
                                   <argument><expr><name>ignore_externals</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>native_eol</name></expr></argument>,
                                   <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>


  <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>notify_func2</name></name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_wc_notify_t</name> *</type><name>notify</name>
        <init>= <expr><call><name>svn_wc_create_notify</name><argument_list>(<argument><expr><name>to</name></expr></argument>,
                               <argument><expr><name>svn_wc_notify_update_completed</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>notify</name>-&gt;<name>revision</name></name> = <name>edit_revision</name></expr>;</expr_stmt>
      <expr_stmt><expr><call>(*<name><name>ctx</name>-&gt;<name>notify_func2</name></name>)<argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>notify_baton2</name></name></expr></argument>, <argument><expr><name>notify</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <if>if <condition>(<expr><name>result_rev</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>result_rev</name> = <name>edit_revision</name></expr>;</expr_stmt></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_client_export3</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name> *</type><name>result_rev</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>from</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>to</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>peg_revision</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision</name></decl></param>,
                   <param><decl><type><name>svn_boolean_t</name></type> <name>overwrite</name></decl></param>,
                   <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_externals</name></decl></param>,
                   <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>native_eol</name></decl></param>,
                   <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_client_export4</name><argument_list>(<argument><expr><name>result_rev</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>peg_revision</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>,
                            <argument><expr><name>overwrite</name></expr></argument>, <argument><expr><name>ignore_externals</name></expr></argument>,
                            <argument><expr><call><name>SVN_DEPTH_INFINITY_OR_FILES</name><argument_list>(<argument><expr><name>recurse</name></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><name>native_eol</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_client_export2</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name> *</type><name>result_rev</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>from</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>to</name></decl></param>,
                   <param><decl><type><name>svn_opt_revision_t</name> *</type><name>revision</name></decl></param>,
                   <param><decl><type><name>svn_boolean_t</name></type> <name>force</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>native_eol</name></decl></param>,
                   <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_opt_revision_t</name></type> <name>peg_revision</name></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>peg_revision</name>.<name>kind</name></name> = <name>svn_opt_revision_unspecified</name></expr>;</expr_stmt>

  <return>return <expr><call><name>svn_client_export3</name><argument_list>(<argument><expr><name>result_rev</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr>&amp;<name>peg_revision</name></expr></argument>,
                            <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>force</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
                            <argument><expr><name>native_eol</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_client_export</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name> *</type><name>result_rev</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>from</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>to</name></decl></param>,
                  <param><decl><type><name>svn_opt_revision_t</name> *</type><name>revision</name></decl></param>,
                  <param><decl><type><name>svn_boolean_t</name></type> <name>force</name></decl></param>,
                  <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_client_export2</name><argument_list>(<argument><expr><name>result_rev</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>force</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>,
                            <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
</unit>
