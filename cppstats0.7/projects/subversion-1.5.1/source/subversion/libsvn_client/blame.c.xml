<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_client/blame.c"><comment type="block">/*
 * blame.c:  return blame messages
 *
 * ====================================================================
 * Copyright (c) 2000-2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"client.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_subst.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_diff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_props.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_sorts.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<comment type="block">/* The metadata associated with a particular revision. */</comment>
<struct>struct <name>rev</name>
<block>{
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl>;</decl_stmt> <comment type="block">/* the revision number */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>author</name></decl>;</decl_stmt>    <comment type="block">/* the author of the revision */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>date</name></decl>;</decl_stmt>      <comment type="block">/* the date of the revision */</comment>
  <comment type="block">/* Used for merge reporting. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>      <comment type="block">/* the absolute repository path */</comment>
}</block>;</struct>

<comment type="block">/* One chunk of blame */</comment>
<struct>struct <name>blame</name>
<block>{
  <decl_stmt><decl><type>struct <name>rev</name> *</type><name>rev</name></decl>;</decl_stmt>    <comment type="block">/* the responsible revision */</comment>
  <decl_stmt><decl><type><name>apr_off_t</name></type> <name>start</name></decl>;</decl_stmt>    <comment type="block">/* the starting diff-token (line) */</comment>
  <decl_stmt><decl><type>struct <name>blame</name> *</type><name>next</name></decl>;</decl_stmt> <comment type="block">/* the next chunk */</comment>
}</block>;</struct>

<comment type="block">/* A chain of blame chunks */</comment>
<struct>struct <name>blame_chain</name>
<block>{
  <decl_stmt><decl><type>struct <name>blame</name> *</type><name>blame</name></decl>;</decl_stmt>      <comment type="block">/* linked list of blame chunks */</comment>
  <decl_stmt><decl><type>struct <name>blame</name> *</type><name>avail</name></decl>;</decl_stmt>      <comment type="block">/* linked list of free blame chunks */</comment>
  <decl_stmt><decl><type>struct <name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>  <comment type="block">/* Allocate members from this pool. */</comment>
}</block>;</struct>

<comment type="block">/* The baton use for the diff output routine. */</comment>
<struct>struct <name>diff_baton</name> <block>{
  <decl_stmt><decl><type>struct <name>blame_chain</name> *</type><name>chain</name></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>rev</name> *</type><name>rev</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/* The baton used for a file revision. */</comment>
<struct>struct <name>file_rev_baton</name> <block>{
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>start_rev</name></decl>, <decl><type ref="prev"/><name>end_rev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_diff_file_options_t</name> *</type><name>diff_options</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>ignore_mime_type</name></decl>;</decl_stmt>
  <comment type="block">/* name of file containing the previous revision of the file */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>last_filename</name></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>rev</name> *</type><name>rev</name></decl>;</decl_stmt>     <comment type="block">/* the rev for which blame is being assigned
                          during a diff */</comment>
  <decl_stmt><decl><type>struct <name>blame_chain</name> *</type><name>chain</name></decl>;</decl_stmt>      <comment type="block">/* the original blame chain. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmp_path</name></decl>;</decl_stmt> <comment type="block">/* temp file name to feed svn_io_open_unique_file */</comment>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>mainpool</name></decl>;</decl_stmt>  <comment type="block">/* lives during the whole sequence of calls */</comment>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>lastpool</name></decl>;</decl_stmt>  <comment type="block">/* pool used during previous call */</comment>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>currpool</name></decl>;</decl_stmt>  <comment type="block">/* pool used during this call */</comment>

  <comment type="block">/* These are used for tracking merged revisions. */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>include_merged_revisions</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>merged_revision</name></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>blame_chain</name> *</type><name>merged_chain</name></decl>;</decl_stmt>  <comment type="block">/* the merged blame chain. */</comment>
  <comment type="block">/* name of file containing the previous merged revision of the file */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>last_original_filename</name></decl>;</decl_stmt>
  <comment type="block">/* pools for files which may need to persist for more than one rev. */</comment>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>filepool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>prevfilepool</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/* The baton used by the txdelta window handler. */</comment>
<struct>struct <name>delta_baton</name> <block>{
  <comment type="block">/* Our underlying handler/baton that we wrap */</comment>
  <decl_stmt><decl><type><name>svn_txdelta_window_handler_t</name></type> <name>wrapped_handler</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>wrapped_baton</name></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>file_rev_baton</name> *</type><name>file_rev_baton</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_file_t</name> *</type><name>source_file</name></decl>;</decl_stmt>  <comment type="block">/* the delta source */</comment>
  <decl_stmt><decl><type><name>apr_file_t</name> *</type><name>file</name></decl>;</decl_stmt>  <comment type="block">/* the result of the delta */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename</name></decl>;</decl_stmt>
}</block>;</struct>




<comment type="block">/* Return a blame chunk associated with REV for a change starting
   at token START, and allocated in CHAIN-&gt;mainpool. */</comment>
<function><type><specifier>static</specifier> struct <name>blame</name> *</type>
<name>blame_create</name><parameter_list>(<param><decl><type>struct <name>blame_chain</name> *</type><name>chain</name></decl></param>,
             <param><decl><type>struct <name>rev</name> *</type><name>rev</name></decl></param>,
             <param><decl><type><name>apr_off_t</name></type> <name>start</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>blame</name> *</type><name>blame</name></decl>;</decl_stmt>
  <if>if <condition>(<expr><name><name>chain</name>-&gt;<name>avail</name></name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>blame</name> = <name><name>chain</name>-&gt;<name>avail</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>chain</name>-&gt;<name>avail</name></name> = <name><name>blame</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <expr_stmt><expr><name>blame</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>chain</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>blame</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
  <expr_stmt><expr><name><name>blame</name>-&gt;<name>rev</name></name> = <name>rev</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>blame</name>-&gt;<name>start</name></name> = <name>start</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>blame</name>-&gt;<name>next</name></name> = <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><name>blame</name></expr>;</return>
}</block></function>

<comment type="block">/* Destroy a blame chunk. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>blame_destroy</name><parameter_list>(<param><decl><type>struct <name>blame_chain</name> *</type><name>chain</name></decl></param>,
              <param><decl><type>struct <name>blame</name> *</type><name>blame</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name><name>blame</name>-&gt;<name>next</name></name> = <name><name>chain</name>-&gt;<name>avail</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>chain</name>-&gt;<name>avail</name></name> = <name>blame</name></expr>;</expr_stmt>
}</block></function>

<comment type="block">/* Return the blame chunk that contains token OFF, starting the search at
   BLAME. */</comment>
<function><type><specifier>static</specifier> struct <name>blame</name> *</type>
<name>blame_find</name><parameter_list>(<param><decl><type>struct <name>blame</name> *</type><name>blame</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>off</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>blame</name> *</type><name>prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>blame</name></expr>)</condition>
    <block>{
      <if>if <condition>(<expr><name><name>blame</name>-&gt;<name>start</name></name> &gt; <name>off</name></expr>)</condition><then> <break>break;</break></then></if>
      <expr_stmt><expr><name>prev</name> = <name>blame</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>blame</name> = <name><name>blame</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
    }</block></while>
  <return>return <expr><name>prev</name></expr>;</return>
}</block></function>

<comment type="block">/* Shift the start-point of BLAME and all subsequence blame-chunks
   by ADJUST tokens */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>blame_adjust</name><parameter_list>(<param><decl><type>struct <name>blame</name> *</type><name>blame</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>adjust</name></decl></param>)</parameter_list>
<block>{
  <while>while <condition>(<expr><name>blame</name></expr>)</condition>
    <block>{
      <expr_stmt><expr><name><name>blame</name>-&gt;<name>start</name></name> += <name>adjust</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>blame</name> = <name><name>blame</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
    }</block></while>
}</block></function>

<comment type="block">/* Delete the blame associated with the region from token START to
   START + LENGTH */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>blame_delete_range</name><parameter_list>(<param><decl><type>struct <name>blame_chain</name> *</type><name>chain</name></decl></param>,
                   <param><decl><type><name>apr_off_t</name></type> <name>start</name></decl></param>,
                   <param><decl><type><name>apr_off_t</name></type> <name>length</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>blame</name> *</type><name>first</name> <init>= <expr><call><name>blame_find</name><argument_list>(<argument><expr><name><name>chain</name>-&gt;<name>blame</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>blame</name> *</type><name>last</name> <init>= <expr><call><name>blame_find</name><argument_list>(<argument><expr><name><name>chain</name>-&gt;<name>blame</name></name></expr></argument>, <argument><expr><name>start</name> + <name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>blame</name> *</type><name>tail</name> <init>= <expr><name><name>last</name>-&gt;<name>next</name></name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>first</name> != <name>last</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type>struct <name>blame</name> *</type><name>walk</name> <init>= <expr><name><name>first</name>-&gt;<name>next</name></name></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><name>walk</name> != <name>last</name></expr>)</condition>
        <block>{
          <decl_stmt><decl><type>struct <name>blame</name> *</type><name>next</name> <init>= <expr><name><name>walk</name>-&gt;<name>next</name></name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>blame_destroy</name><argument_list>(<argument><expr><name>chain</name></expr></argument>, <argument><expr><name>walk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>walk</name> = <name>next</name></expr>;</expr_stmt>
        }</block></while>
      <expr_stmt><expr><name><name>first</name>-&gt;<name>next</name></name> = <name>last</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>last</name>-&gt;<name>start</name></name> = <name>start</name></expr>;</expr_stmt>
      <if>if <condition>(<expr><name><name>first</name>-&gt;<name>start</name></name> == <name>start</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr>*<name>first</name> = *<name>last</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>blame_destroy</name><argument_list>(<argument><expr><name>chain</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>last</name> = <name>first</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

  <if>if <condition>(<expr><name>tail</name> &amp;&amp; <name><name>tail</name>-&gt;<name>start</name></name> == <name><name>last</name>-&gt;<name>start</name></name> + <name>length</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr>*<name>last</name> = *<name>tail</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>blame_destroy</name><argument_list>(<argument><expr><name>chain</name></expr></argument>, <argument><expr><name>tail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>tail</name> = <name><name>last</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
    }</block></then></if>

  <expr_stmt><expr><call><name>blame_adjust</name><argument_list>(<argument><expr><name>tail</name></expr></argument>, <argument><expr>-<name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Insert a chunk of blame associated with REV starting
   at token START and continuing for LENGTH tokens */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>blame_insert_range</name><parameter_list>(<param><decl><type>struct <name>blame_chain</name> *</type><name>chain</name></decl></param>,
                   <param><decl><type>struct <name>rev</name> *</type><name>rev</name></decl></param>,
                   <param><decl><type><name>apr_off_t</name></type> <name>start</name></decl></param>,
                   <param><decl><type><name>apr_off_t</name></type> <name>length</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>blame</name> *</type><name>head</name> <init>= <expr><name><name>chain</name>-&gt;<name>blame</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>blame</name> *</type><name>point</name> <init>= <expr><call><name>blame_find</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>blame</name> *</type><name>insert</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>point</name>-&gt;<name>start</name></name> == <name>start</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>insert</name> = <call><name>blame_create</name><argument_list>(<argument><expr><name>chain</name></expr></argument>, <argument><expr><name><name>point</name>-&gt;<name>rev</name></name></expr></argument>, <argument><expr><name><name>point</name>-&gt;<name>start</name></name> + <name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>point</name>-&gt;<name>rev</name></name> = <name>rev</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>insert</name>-&gt;<name>next</name></name> = <name><name>point</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>point</name>-&gt;<name>next</name></name> = <name>insert</name></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <decl_stmt><decl><type>struct <name>blame</name> *</type><name>middle</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>middle</name> = <call><name>blame_create</name><argument_list>(<argument><expr><name>chain</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>insert</name> = <call><name>blame_create</name><argument_list>(<argument><expr><name>chain</name></expr></argument>, <argument><expr><name><name>point</name>-&gt;<name>rev</name></name></expr></argument>, <argument><expr><name>start</name> + <name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>middle</name>-&gt;<name>next</name></name> = <name>insert</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>insert</name>-&gt;<name>next</name></name> = <name><name>point</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>point</name>-&gt;<name>next</name></name> = <name>middle</name></expr>;</expr_stmt>
    }</block></else></if>
  <expr_stmt><expr><call><name>blame_adjust</name><argument_list>(<argument><expr><name><name>insert</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Callback for diff between subsequent revisions */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>output_diff_modified</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                     <param><decl><type><name>apr_off_t</name></type> <name>original_start</name></decl></param>,
                     <param><decl><type><name>apr_off_t</name></type> <name>original_length</name></decl></param>,
                     <param><decl><type><name>apr_off_t</name></type> <name>modified_start</name></decl></param>,
                     <param><decl><type><name>apr_off_t</name></type> <name>modified_length</name></decl></param>,
                     <param><decl><type><name>apr_off_t</name></type> <name>latest_start</name></decl></param>,
                     <param><decl><type><name>apr_off_t</name></type> <name>latest_length</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>diff_baton</name> *</type><name>db</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>original_length</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>blame_delete_range</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>chain</name></name></expr></argument>, <argument><expr><name>modified_start</name></expr></argument>, <argument><expr><name>original_length</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr><name>modified_length</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>blame_insert_range</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>chain</name></name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>rev</name></name></expr></argument>, <argument><expr><name>modified_start</name></expr></argument>,
                               <argument><expr><name>modified_length</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_diff_output_fns_t</name></type> <name>output_fns</name> <init>= <expr><block>{
        <expr><name>NULL</name></expr>,
        <expr><name>output_diff_modified</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Add the blame for the diffs between LAST_FILE and CUR_FILE with the rev
   specified in FRB.  LAST_FILE may be NULL in which
   case blame is added for every line of CUR_FILE. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>add_file_blame</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>last_file</name></decl></param>,
               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cur_file</name></decl></param>,
               <param><decl><type>struct <name>blame_chain</name> *</type><name>chain</name></decl></param>,
               <param><decl><type>struct <name>rev</name> *</type><name>rev</name></decl></param>,
               <param><decl><type><specifier>const</specifier> <name>svn_diff_file_options_t</name> *</type><name>diff_options</name></decl></param>,
               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name>last_file</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>chain</name>-&gt;<name>blame</name></name> == <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>chain</name>-&gt;<name>blame</name></name> = <call><name>blame_create</name><argument_list>(<argument><expr><name>chain</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <decl_stmt><decl><type><name>svn_diff_t</name> *</type><name>diff</name></decl>;</decl_stmt>
      <decl_stmt><decl><type>struct <name>diff_baton</name></type> <name>diff_baton</name></decl>;</decl_stmt>

      <expr_stmt><expr><name><name>diff_baton</name>.<name>chain</name></name> = <name>chain</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>diff_baton</name>.<name>rev</name></name> = <name>rev</name></expr>;</expr_stmt>

      <comment type="block">/* We have a previous file.  Get the diff and adjust blame info. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_diff_file_diff_2</name><argument_list>(<argument><expr>&amp;<name>diff</name></expr></argument>, <argument><expr><name>last_file</name></expr></argument>, <argument><expr><name>cur_file</name></expr></argument>,
                                   <argument><expr><name>diff_options</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_diff_output</name><argument_list>(<argument><expr><name>diff</name></expr></argument>, <argument><expr>&amp;<name>diff_baton</name></expr></argument>, <argument><expr>&amp;<name>output_fns</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>window_handler</name><parameter_list>(<param><decl><type><name>svn_txdelta_window_t</name> *</type><name>window</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>delta_baton</name> *</type><name>dbaton</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>file_rev_baton</name> *</type><name>frb</name> <init>= <expr><name><name>dbaton</name>-&gt;<name>file_rev_baton</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>blame_chain</name> *</type><name>chain</name></decl>;</decl_stmt>

  <comment type="block">/* Call the wrapped handler first. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>dbaton</name>-&gt;<name>wrapped_handler</name></name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name><name>dbaton</name>-&gt;<name>wrapped_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* We patiently wait for the NULL window marking the end. */</comment>
  <if>if <condition>(<expr><name>window</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* Close the files used for the delta.
     It is important to do this early, since otherwise, they will be deleted
     before all handles are closed, which leads to failures on some platforms
     when new tempfiles are to be created. */</comment>
  <if>if <condition>(<expr><name><name>dbaton</name>-&gt;<name>source_file</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_close</name><argument_list>(<argument><expr><name><name>dbaton</name>-&gt;<name>source_file</name></name></expr></argument>, <argument><expr><name><name>frb</name>-&gt;<name>currpool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_close</name><argument_list>(<argument><expr><name><name>dbaton</name>-&gt;<name>file</name></name></expr></argument>, <argument><expr><name><name>frb</name>-&gt;<name>currpool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If we are including merged revisions, we need to add each rev to the
     merged chain. */</comment>
  <if>if <condition>(<expr><name><name>frb</name>-&gt;<name>include_merged_revisions</name></name></expr>)</condition><then>
    <expr_stmt><expr><name>chain</name> = <name><name>frb</name>-&gt;<name>merged_chain</name></name></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><name>chain</name> = <name><name>frb</name>-&gt;<name>chain</name></name></expr>;</expr_stmt></else></if>

  <comment type="block">/* Process this file. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>add_file_blame</name><argument_list>(<argument><expr><name><name>frb</name>-&gt;<name>last_filename</name></name></expr></argument>,
                         <argument><expr><name><name>dbaton</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr><name>chain</name></expr></argument>, <argument><expr><name><name>frb</name>-&gt;<name>rev</name></name></expr></argument>,
                         <argument><expr><name><name>frb</name>-&gt;<name>diff_options</name></name></expr></argument>, <argument><expr><name><name>frb</name>-&gt;<name>currpool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If we are including merged revisions, and the current revision is not a
     merged one, we need to add its blame info to the chain for the original
     line of history. */</comment>
  <if>if <condition>(<expr><name><name>frb</name>-&gt;<name>include_merged_revisions</name></name> &amp;&amp; ! <name><name>frb</name>-&gt;<name>merged_revision</name></name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>tmppool</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>add_file_blame</name><argument_list>(<argument><expr><name><name>frb</name>-&gt;<name>last_original_filename</name></name></expr></argument>,
                             <argument><expr><name><name>dbaton</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr><name><name>frb</name>-&gt;<name>chain</name></name></expr></argument>, <argument><expr><name><name>frb</name>-&gt;<name>rev</name></name></expr></argument>,
                             <argument><expr><name><name>frb</name>-&gt;<name>diff_options</name></name></expr></argument>, <argument><expr><name><name>frb</name>-&gt;<name>currpool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* This filename could be around for a while, potentially, so
         use the longer lifetime pool, and switch it with the previous one*/</comment>
      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name><name>frb</name>-&gt;<name>prevfilepool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>tmppool</name> = <name><name>frb</name>-&gt;<name>filepool</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>frb</name>-&gt;<name>filepool</name></name> = <name><name>frb</name>-&gt;<name>prevfilepool</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>frb</name>-&gt;<name>prevfilepool</name></name> = <name>tmppool</name></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>frb</name>-&gt;<name>last_original_filename</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>frb</name>-&gt;<name>filepool</name></name></expr></argument>,
                                                <argument><expr><name><name>dbaton</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <comment type="block">/* Prepare for next revision. */</comment>

  <comment type="block">/* Remember the file name so we can diff it with the next revision. */</comment>
  <expr_stmt><expr><name><name>frb</name>-&gt;<name>last_filename</name></name> = <name><name>dbaton</name>-&gt;<name>filename</name></name></expr>;</expr_stmt>

  <comment type="block">/* Switch pools. */</comment>
  <block>{
    <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>tmp_pool</name> <init>= <expr><name><name>frb</name>-&gt;<name>lastpool</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>frb</name>-&gt;<name>lastpool</name></name> = <name><name>frb</name>-&gt;<name>currpool</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>frb</name>-&gt;<name>currpool</name></name> = <name>tmp_pool</name></expr>;</expr_stmt>
  }</block>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Throw an SVN_ERR_CLIENT_IS_BINARY_FILE error if PROP_DIFFS indicates a
   binary MIME type.  Else, return SVN_NO_ERROR. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>check_mimetype</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> *</type><name>prop_diffs</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>prop_diffs</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>svn_prop_t</name> *</type><name>prop</name> <init>= <expr>&amp;<call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>prop_diffs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_prop_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>prop</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>SVN_PROP_MIME_TYPE</name></expr></argument>)</argument_list></call> == 0
          &amp;&amp; <name><name>prop</name>-&gt;<name>value</name></name>
          &amp;&amp; <call><name>svn_mime_type_is_binary</name><argument_list>(<argument><expr><name><name>prop</name>-&gt;<name>value</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_createf</name>
          <argument_list>(<argument><expr><name>SVN_ERR_CLIENT_IS_BINARY_FILE</name></expr></argument>, <argument><expr>0</expr></argument>,
           <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Cannot calculate blame information for binary file '%s'"</expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
    }</block></for>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>file_rev_handler</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>svn_revnum_t</name></type> <name>revnum</name></decl></param>,
                 <param><decl><type><name>apr_hash_t</name> *</type><name>rev_props</name></decl></param>,
                 <param><decl><type><name>svn_boolean_t</name></type> <name>merged_revision</name></decl></param>,
                 <param><decl><type><name>svn_txdelta_window_handler_t</name> *</type><name>content_delta_handler</name></decl></param>,
                 <param><decl><type><name>void</name> **</type><name>content_delta_baton</name></decl></param>,
                 <param><decl><type><name>apr_array_header_t</name> *</type><name>prop_diffs</name></decl></param>,
                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>file_rev_baton</name> *</type><name>frb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>last_stream</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>cur_stream</name></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>delta_baton</name> *</type><name>delta_baton</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>filepool</name></decl>;</decl_stmt>

  <comment type="block">/* Clear the current pool. */</comment>
  <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name><name>frb</name>-&gt;<name>currpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If this file has a non-textual mime-type, bail out. */</comment>
  <if>if <condition>(<expr>! <name><name>frb</name>-&gt;<name>ignore_mime_type</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_mimetype</name><argument_list>(<argument><expr><name>prop_diffs</name></expr></argument>, <argument><expr><name><name>frb</name>-&gt;<name>target</name></name></expr></argument>, <argument><expr><name><name>frb</name>-&gt;<name>currpool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr><name><name>frb</name>-&gt;<name>ctx</name>-&gt;<name>notify_func2</name></name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_wc_notify_t</name> *</type><name>notify</name>
        <init>= <expr><call><name>svn_wc_create_notify</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>svn_wc_notify_blame_revision</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>notify</name>-&gt;<name>kind</name></name> = <name>svn_node_none</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>notify</name>-&gt;<name>content_state</name></name> = <name><name>notify</name>-&gt;<name>prop_state</name></name>
        = <name>svn_wc_notify_state_inapplicable</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>notify</name>-&gt;<name>lock_state</name></name> = <name>svn_wc_notify_lock_state_inapplicable</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>notify</name>-&gt;<name>revision</name></name> = <name>revnum</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>frb</name>-&gt;<name>ctx</name>-&gt;<name>notify_func2</name></name><argument_list>(<argument><expr><name><name>frb</name>-&gt;<name>ctx</name>-&gt;<name>notify_baton2</name></name></expr></argument>, <argument><expr><name>notify</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <if>if <condition>(<expr><name><name>frb</name>-&gt;<name>ctx</name>-&gt;<name>cancel_func</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>frb</name>-&gt;<name>ctx</name>-&gt;<name>cancel_func</name></name><argument_list>(<argument><expr><name><name>frb</name>-&gt;<name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <comment type="block">/* If there were no content changes, we couldn't care less about this
     revision now.  Note that we checked the mime type above, so things
     work if the user just changes the mime type in a commit.
     Also note that we don't switch the pools in this case.  This is important,
     since the tempfile will be removed by the pool and we need the tempfile
     from the last revision with content changes. */</comment>
  <if>if <condition>(<expr>!<name>content_delta_handler</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><name><name>frb</name>-&gt;<name>merged_revision</name></name> = <name>merged_revision</name></expr>;</expr_stmt>

  <comment type="block">/* Create delta baton. */</comment>
  <expr_stmt><expr><name>delta_baton</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>frb</name>-&gt;<name>currpool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>delta_baton</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Prepare the text delta window handler. */</comment>
  <if>if <condition>(<expr><name><name>frb</name>-&gt;<name>last_filename</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_open</name><argument_list>(<argument><expr>&amp;<name><name>delta_baton</name>-&gt;<name>source_file</name></name></expr></argument>, <argument><expr><name><name>frb</name>-&gt;<name>last_filename</name></name></expr></argument>,
                             <argument><expr><name>APR_READ</name></expr></argument>, <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name><name>frb</name>-&gt;<name>currpool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <comment type="block">/* Means empty stream below. */</comment>
    <expr_stmt><expr><name><name>delta_baton</name>-&gt;<name>source_file</name></name> = <name>NULL</name></expr>;</expr_stmt></else></if>
  <expr_stmt><expr><name>last_stream</name> = <call><name>svn_stream_from_aprfile</name><argument_list>(<argument><expr><name><name>delta_baton</name>-&gt;<name>source_file</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name><name>frb</name>-&gt;<name>include_merged_revisions</name></name> &amp;&amp; !<name><name>frb</name>-&gt;<name>merged_revision</name></name></expr>)</condition><then>
    <expr_stmt><expr><name>filepool</name> = <name><name>frb</name>-&gt;<name>filepool</name></name></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><name>filepool</name> = <name><name>frb</name>-&gt;<name>currpool</name></name></expr>;</expr_stmt></else></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_open_unique_file2</name><argument_list>(<argument><expr>&amp;<name><name>delta_baton</name>-&gt;<name>file</name></name></expr></argument>,
                                   <argument><expr>&amp;<name><name>delta_baton</name>-&gt;<name>filename</name></name></expr></argument>,
                                   <argument><expr><name><name>frb</name>-&gt;<name>tmp_path</name></name></expr></argument>,
                                   <argument><expr>".tmp"</expr></argument>, <argument><expr><name>svn_io_file_del_on_pool_cleanup</name></expr></argument>,
                                   <argument><expr><name>filepool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>cur_stream</name> = <call><name>svn_stream_from_aprfile</name><argument_list>(<argument><expr><name><name>delta_baton</name>-&gt;<name>file</name></name></expr></argument>, <argument><expr><name><name>frb</name>-&gt;<name>currpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get window handler for applying delta. */</comment>
  <expr_stmt><expr><call><name>svn_txdelta_apply</name><argument_list>(<argument><expr><name>last_stream</name></expr></argument>, <argument><expr><name>cur_stream</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                    <argument><expr><name><name>frb</name>-&gt;<name>currpool</name></name></expr></argument>,
                    <argument><expr>&amp;<name><name>delta_baton</name>-&gt;<name>wrapped_handler</name></name></expr></argument>,
                    <argument><expr>&amp;<name><name>delta_baton</name>-&gt;<name>wrapped_baton</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Wrap the window handler with our own. */</comment>
  <expr_stmt><expr><name><name>delta_baton</name>-&gt;<name>file_rev_baton</name></name> = <name>frb</name></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>content_delta_handler</name> = <name>window_handler</name></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>content_delta_baton</name> = <name>delta_baton</name></expr>;</expr_stmt>

  <comment type="block">/* Create the rev structure. */</comment>
  <expr_stmt><expr><name><name>frb</name>-&gt;<name>rev</name></name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>frb</name>-&gt;<name>mainpool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>rev</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>revnum</name> &lt; <name><name>frb</name>-&gt;<name>start_rev</name></name></expr>)</condition><then>
    <block>{
      <comment type="block">/* We shouldn't get more than one revision before start. */</comment>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>frb</name>-&gt;<name>last_filename</name></name> == <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* The file existed before start_rev; generate no blame info for
         lines from this revision (or before). */</comment>
      <expr_stmt><expr><name><name>frb</name>-&gt;<name>rev</name>-&gt;<name>revision</name></name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>frb</name>-&gt;<name>rev</name>-&gt;<name>author</name></name> = <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>frb</name>-&gt;<name>rev</name>-&gt;<name>date</name></name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <decl_stmt><decl><type><name>svn_string_t</name> *</type><name>str</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>revnum</name> &lt;= <name><name>frb</name>-&gt;<name>end_rev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Set values from revision props. */</comment>
      <expr_stmt><expr><name><name>frb</name>-&gt;<name>rev</name>-&gt;<name>revision</name></name> = <name>revnum</name></expr>;</expr_stmt>

      <if>if <condition>(<expr>(<name>str</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>rev_props</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_AUTHOR</name></expr></argument>,
                              <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVN_PROP_REVISION_AUTHOR</name></expr></argument>)</argument_list></sizeof> - 1</expr></argument>)</argument_list></call>)</expr>)</condition><then>
        <expr_stmt><expr><name><name>frb</name>-&gt;<name>rev</name>-&gt;<name>author</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>frb</name>-&gt;<name>mainpool</name></name></expr></argument>, <argument><expr><name><name>str</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
      <else>else
        <expr_stmt><expr><name><name>frb</name>-&gt;<name>rev</name>-&gt;<name>author</name></name> = <name>NULL</name></expr>;</expr_stmt></else></if>

      <if>if <condition>(<expr>(<name>str</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>rev_props</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_DATE</name></expr></argument>,
                              <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVN_PROP_REVISION_DATE</name></expr></argument>)</argument_list></sizeof> - 1</expr></argument>)</argument_list></call>)</expr>)</condition><then>
        <expr_stmt><expr><name><name>frb</name>-&gt;<name>rev</name>-&gt;<name>date</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>frb</name>-&gt;<name>mainpool</name></name></expr></argument>, <argument><expr><name><name>str</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
      <else>else
        <expr_stmt><expr><name><name>frb</name>-&gt;<name>rev</name>-&gt;<name>date</name></name> = <name>NULL</name></expr>;</expr_stmt></else></if>
    }</block></else></if>

  <if>if <condition>(<expr><name><name>frb</name>-&gt;<name>include_merged_revisions</name></name></expr>)</condition><then>
    <expr_stmt><expr><name><name>frb</name>-&gt;<name>rev</name>-&gt;<name>path</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>frb</name>-&gt;<name>mainpool</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Ensure that CHAIN_ORIG and CHAIN_MERGED have the same number of chunks,
   and that for every chunk C, CHAIN_ORIG[C] and CHAIN_MERGED[C] have the
   same starting value.  Both CHAIN_ORIG and CHAIN_MERGED should not be
   NULL.  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>normalize_blames</name><parameter_list>(<param><decl><type>struct <name>blame_chain</name> *</type><name>chain</name></decl></param>,
                 <param><decl><type>struct <name>blame_chain</name> *</type><name>chain_merged</name></decl></param>,
                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>blame</name> *</type><name>walk</name></decl>, *<decl><type ref="prev"/><name>walk_merged</name></decl>;</decl_stmt>

  <comment type="block">/* Walk over the CHAIN's blame chunks and CHAIN_MERGED's blame chunks,
     creating new chunks as needed. */</comment>
  <for>for (<init><expr><name>walk</name> = <name><name>chain</name>-&gt;<name>blame</name></name></expr>, <expr><name>walk_merged</name> = <name><name>chain_merged</name>-&gt;<name>blame</name></name></expr>;</init>
       <condition><expr><name><name>walk</name>-&gt;<name>next</name></name> &amp;&amp; <name><name>walk_merged</name>-&gt;<name>next</name></name></expr>;</condition>
       <incr><expr><name>walk</name> = <name><name>walk</name>-&gt;<name>next</name></name></expr>, <expr><name>walk_merged</name> = <name><name>walk_merged</name>-&gt;<name>next</name></name></expr></incr>)
    <block>{
      <comment type="block">/* The current chunks should always be starting at the same offset. */</comment>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>walk</name>-&gt;<name>start</name></name> == <name><name>walk_merged</name>-&gt;<name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name><name>walk</name>-&gt;<name>next</name>-&gt;<name>start</name></name> &lt; <name><name>walk_merged</name>-&gt;<name>next</name>-&gt;<name>start</name></name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type>struct <name>blame</name> *</type><name>tmp</name> <init>= <expr><call><name>blame_create</name><argument_list>(<argument><expr><name>chain_merged</name></expr></argument>, <argument><expr><name><name>walk_merged</name>-&gt;<name>next</name>-&gt;<name>rev</name></name></expr></argument>,
                                           <argument><expr><name><name>walk</name>-&gt;<name>next</name>-&gt;<name>start</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>tmp</name>-&gt;<name>next</name></name> = <name><name>walk_merged</name>-&gt;<name>next</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>walk_merged</name>-&gt;<name>next</name></name> = <name>tmp</name></expr>;</expr_stmt>
        }</block></then></if>

      <if>if <condition>(<expr><name><name>walk</name>-&gt;<name>next</name>-&gt;<name>start</name></name> &gt; <name><name>walk_merged</name>-&gt;<name>next</name>-&gt;<name>start</name></name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type>struct <name>blame</name> *</type><name>tmp</name> <init>= <expr><call><name>blame_create</name><argument_list>(<argument><expr><name>chain</name></expr></argument>, <argument><expr><name><name>walk</name>-&gt;<name>next</name>-&gt;<name>rev</name></name></expr></argument>,
                                           <argument><expr><name><name>walk_merged</name>-&gt;<name>next</name>-&gt;<name>start</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>tmp</name>-&gt;<name>next</name></name> = <name><name>walk</name>-&gt;<name>next</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>walk</name>-&gt;<name>next</name></name> = <name>tmp</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>

  <comment type="block">/* If both next pointers are null, we have an equally long list. */</comment>
  <if>if <condition>(<expr><name><name>walk</name>-&gt;<name>next</name></name> == <name>NULL</name> &amp;&amp; <name><name>walk_merged</name>-&gt;<name>next</name></name> == <name>NULL</name></expr>)</condition><then>
    <return>return;</return></then></if>

  <if>if <condition>(<expr><name><name>walk_merged</name>-&gt;<name>next</name></name> == <name>NULL</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* Make new walk_merged chunks as needed at the end of the list so that
         the length matches that of walk. */</comment>
      <while>while <condition>(<expr><name><name>walk</name>-&gt;<name>next</name></name> != <name>NULL</name></expr>)</condition>
        <block>{
          <decl_stmt><decl><type>struct <name>blame</name> *</type><name>tmp</name> <init>= <expr><call><name>blame_create</name><argument_list>(<argument><expr><name>chain_merged</name></expr></argument>, <argument><expr><name><name>walk_merged</name>-&gt;<name>rev</name></name></expr></argument>,
                                           <argument><expr><name><name>walk</name>-&gt;<name>next</name>-&gt;<name>start</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>walk_merged</name>-&gt;<name>next</name></name> = <name>tmp</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>walk_merged</name> = <name><name>walk_merged</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name>walk</name> = <name><name>walk</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
        }</block></while>
    }</block></then></if>

  <if>if <condition>(<expr><name><name>walk</name>-&gt;<name>next</name></name> == <name>NULL</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* Same as above, only create walk chunks as needed. */</comment>
      <while>while <condition>(<expr><name><name>walk_merged</name>-&gt;<name>next</name></name> != <name>NULL</name></expr>)</condition>
        <block>{
          <decl_stmt><decl><type>struct <name>blame</name> *</type><name>tmp</name> <init>= <expr><call><name>blame_create</name><argument_list>(<argument><expr><name>chain</name></expr></argument>, <argument><expr><name><name>walk</name>-&gt;<name>rev</name></name></expr></argument>,
                                           <argument><expr><name><name>walk_merged</name>-&gt;<name>next</name>-&gt;<name>start</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>walk</name>-&gt;<name>next</name></name> = <name>tmp</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>walk</name> = <name><name>walk</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name>walk_merged</name> = <name><name>walk_merged</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
        }</block></while>
    }</block></then></if>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_client_blame4</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>peg_revision</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>start</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>end</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>svn_diff_file_options_t</name> *</type><name>diff_options</name></decl></param>,
                  <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_mime_type</name></decl></param>,
                  <param><decl><type><name>svn_boolean_t</name></type> <name>include_merged_revisions</name></decl></param>,
                  <param><decl><type><name>svn_client_blame_receiver2_t</name></type> <name>receiver</name></decl></param>,
                  <param><decl><type><name>void</name> *</type><name>receiver_baton</name></decl></param>,
                  <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>file_rev_baton</name></type> <name>frb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>start_revnum</name></decl>, <decl><type ref="prev"/><name>end_revnum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>blame</name> *</type><name>walk</name></decl>, *<decl><type ref="prev"/><name>walk_merged</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_file_t</name> *</type><name>file</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iterpool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>stream</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>start</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_unspecified</name>
      || <name><name>end</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_unspecified</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name>
      <argument_list>(<argument><expr><name>SVN_ERR_CLIENT_BAD_REVISION</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then>
  <else>else <if>if <condition>(<expr><name><name>start</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_working</name>
           || <name><name>end</name>-&gt;<name>kind</name></name> == <name>svn_opt_revision_working</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name>
      <argument_list>(<argument><expr><name>SVN_ERR_UNSUPPORTED_FEATURE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
       <argument><expr><call><name>_</name><argument_list>(<argument><expr>"blame of the WORKING revision is not supported"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if></else></if>

  <comment type="block">/* Get an RA plugin for this filesystem object. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__ra_session_from_path</name><argument_list>(<argument><expr>&amp;<name>ra_session</name></expr></argument>, <argument><expr>&amp;<name>end_revnum</name></expr></argument>,
                                           <argument><expr>&amp;<name>url</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                           <argument><expr><name>peg_revision</name></expr></argument>, <argument><expr><name>end</name></expr></argument>,
                                           <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__get_revision_number</name><argument_list>(<argument><expr>&amp;<name>start_revnum</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ra_session</name></expr></argument>,
                                          <argument><expr><name>start</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>end_revnum</name> &lt; <name>start_revnum</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name>
      <argument_list>(<argument><expr><name>SVN_ERR_CLIENT_BAD_REVISION</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
       <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Start revision must precede end revision"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <expr_stmt><expr><name><name>frb</name>.<name>start_rev</name></name> = <name>start_revnum</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>frb</name>.<name>end_rev</name></name> = <name>end_revnum</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>frb</name>.<name>target</name></name> = <name>target</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>frb</name>.<name>ctx</name></name> = <name>ctx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>frb</name>.<name>diff_options</name></name> = <name>diff_options</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>frb</name>.<name>ignore_mime_type</name></name> = <name>ignore_mime_type</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>frb</name>.<name>include_merged_revisions</name></name> = <name>include_merged_revisions</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>frb</name>.<name>last_filename</name></name> = <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>frb</name>.<name>last_original_filename</name></name> = <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>frb</name>.<name>chain</name></name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name><name>frb</name>.<name>chain</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>frb</name>.<name>chain</name>-&gt;<name>blame</name></name> = <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>frb</name>.<name>chain</name>-&gt;<name>avail</name></name> = <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>frb</name>.<name>chain</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>include_merged_revisions</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name><name>frb</name>.<name>merged_chain</name></name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name><name>frb</name>.<name>merged_chain</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>frb</name>.<name>merged_chain</name>-&gt;<name>blame</name></name> = <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>frb</name>.<name>merged_chain</name>-&gt;<name>avail</name></name> = <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>frb</name>.<name>merged_chain</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
    }</block></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_temp_dir</name><argument_list>(<argument><expr>&amp;<name><name>frb</name>.<name>tmp_path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>frb</name>.<name>tmp_path</name></name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>frb</name>.<name>tmp_path</name></name></expr></argument>, <argument><expr>"tmp"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>,

  <expr><name><name>frb</name>.<name>mainpool</name></name> = <name>pool</name></expr>;</expr_stmt>
  <comment type="block">/* The callback will flip the following two pools, because it needs
     information from the previous call.  Obviously, it can't rely on
     the lifetime of the pool provided by get_file_revs. */</comment>
  <expr_stmt><expr><name><name>frb</name>.<name>lastpool</name></name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>frb</name>.<name>currpool</name></name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>include_merged_revisions</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name><name>frb</name>.<name>filepool</name></name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>frb</name>.<name>prevfilepool</name></name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <comment type="block">/* Collect all blame information.
     We need to ensure that we get one revision before the start_rev,
     if available so that we can know what was actually changed in the start
     revision. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_file_revs2</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>""</expr></argument>,
                                <argument><expr><name>start_revnum</name> - (<name>start_revnum</name> &gt; 0 ? 1 : 0)</expr></argument>,
                                <argument><expr><name>end_revnum</name></expr></argument>, <argument><expr><name>include_merged_revisions</name></expr></argument>,
                                <argument><expr><name>file_rev_handler</name></expr></argument>, <argument><expr>&amp;<name>frb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Report the blame to the caller. */</comment>

  <comment type="block">/* The callback has to have been called at least once. */</comment>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>frb</name>.<name>last_filename</name></name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Create a pool for the iteration below. */</comment>
  <expr_stmt><expr><name>iterpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Open the last file and get a stream. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_open</name><argument_list>(<argument><expr>&amp;<name>file</name></expr></argument>, <argument><expr><name><name>frb</name>.<name>last_filename</name></name></expr></argument>, <argument><expr><name>APR_READ</name> | <name>APR_BUFFERED</name></expr></argument>,
                           <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>stream</name> = <call><name>svn_subst_stream_translated</name><argument_list>(<argument><expr><call><name>svn_stream_from_aprfile</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
                                       <argument><expr>"\n"</expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Perform optional merged chain normalization. */</comment>
  <if>if <condition>(<expr><name>include_merged_revisions</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* If we never created any blame for the original chain, create it now,
         with the most recent changed revision.  This could occur if a file
         was created on a branch and them merged to another branch.  This is
         semanticly a copy, and we want to use the revision on the branch as
         the most recently changed revision.  ### Is this really what we want
         to do here?  Do the sematics of copy change? */</comment>
      <if>if <condition>(<expr>!<name><name>frb</name>.<name>chain</name>-&gt;<name>blame</name></name></expr>)</condition><then>
        <expr_stmt><expr><name><name>frb</name>.<name>chain</name>-&gt;<name>blame</name></name> = <call><name>blame_create</name><argument_list>(<argument><expr><name><name>frb</name>.<name>chain</name></name></expr></argument>, <argument><expr><name><name>frb</name>.<name>rev</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <expr_stmt><expr><call><name>normalize_blames</name><argument_list>(<argument><expr><name><name>frb</name>.<name>chain</name></name></expr></argument>, <argument><expr><name><name>frb</name>.<name>merged_chain</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>walk_merged</name> = <name><name>frb</name>.<name>merged_chain</name>-&gt;<name>blame</name></name></expr>;</expr_stmt>
    }</block></then></if>

  <comment type="block">/* Process each blame item. */</comment>
  <for>for (<init><expr><name>walk</name> = <name><name>frb</name>.<name>chain</name>-&gt;<name>blame</name></name></expr>;</init> <condition><expr><name>walk</name></expr>;</condition> <incr><expr><name>walk</name> = <name><name>walk</name>-&gt;<name>next</name></name></expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>apr_off_t</name></type> <name>line_no</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>merged_rev</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>merged_author</name></decl>, *<decl><type ref="prev"/><name>merged_date</name></decl>, *<decl><type ref="prev"/><name>merged_path</name></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>walk_merged</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>merged_rev</name> = <name><name>walk_merged</name>-&gt;<name>rev</name>-&gt;<name>revision</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name>merged_author</name> = <name><name>walk_merged</name>-&gt;<name>rev</name>-&gt;<name>author</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name>merged_date</name> = <name><name>walk_merged</name>-&gt;<name>rev</name>-&gt;<name>date</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name>merged_path</name> = <name><name>walk_merged</name>-&gt;<name>rev</name>-&gt;<name>path</name></name></expr>;</expr_stmt>
        }</block></then>
      <else>else
        <block>{
          <expr_stmt><expr><name>merged_rev</name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>merged_author</name> = <name>NULL</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>merged_date</name> = <name>NULL</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>merged_path</name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></else></if>

      <for>for (<init><expr><name>line_no</name> = <name><name>walk</name>-&gt;<name>start</name></name></expr>;</init>
           <condition><expr>!<name><name>walk</name>-&gt;<name>next</name></name> || <name>line_no</name> &lt; <name><name>walk</name>-&gt;<name>next</name>-&gt;<name>start</name></name></expr>;</condition>
           <incr><expr>++<name>line_no</name></expr></incr>)
        <block>{
          <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>eof</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>sb</name></decl>;</decl_stmt>

          <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_readline</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr>&amp;<name>eof</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>cancel_func</name></name></expr>)</condition><then>
            <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>ctx</name>-&gt;<name>cancel_func</name></name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
          <if>if <condition>(<expr>!<name>eof</name> || <name><name>sb</name>-&gt;<name>len</name></name></expr>)</condition><then>
            <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>receiver</name><argument_list>(<argument><expr><name>receiver_baton</name></expr></argument>, <argument><expr><name>line_no</name></expr></argument>, <argument><expr><name><name>walk</name>-&gt;<name>rev</name>-&gt;<name>revision</name></name></expr></argument>,
                             <argument><expr><name><name>walk</name>-&gt;<name>rev</name>-&gt;<name>author</name></name></expr></argument>, <argument><expr><name><name>walk</name>-&gt;<name>rev</name>-&gt;<name>date</name></name></expr></argument>,
                             <argument><expr><name>merged_rev</name></expr></argument>, <argument><expr><name>merged_author</name></expr></argument>, <argument><expr><name>merged_date</name></expr></argument>,
                             <argument><expr><name>merged_path</name></expr></argument>, <argument><expr><name><name>sb</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
          <if>if <condition>(<expr><name>eof</name></expr>)</condition><then> <break>break;</break></then></if>
        }</block></for>

      <if>if <condition>(<expr><name>walk_merged</name></expr>)</condition><then>
        <expr_stmt><expr><name>walk_merged</name> = <name><name>walk_merged</name>-&gt;<name>next</name></name></expr>;</expr_stmt></then></if>
    }</block></for>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_close</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* We don't need the temp file any more. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_close</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name><name>frb</name>.<name>lastpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name><name>frb</name>.<name>currpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>include_merged_revisions</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name><name>frb</name>.<name>filepool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name><name>frb</name>.<name>prevfilepool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Baton for use with wrap_blame_receiver */</comment>
<struct>struct <name>blame_receiver_wrapper_baton</name> <block>{
  <decl_stmt><decl><type><name>void</name> *</type><name>baton</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_client_blame_receiver_t</name></type> <name>receiver</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/* This implements svn_client_blame_receiver2_t */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>blame_wrapper_receiver</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                       <param><decl><type><name>apr_int64_t</name></type> <name>line_no</name></decl></param>,
                       <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>author</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>date</name></decl></param>,
                       <param><decl><type><name>svn_revnum_t</name></type> <name>merged_revision</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>merged_author</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>merged_date</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>merged_path</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>line</name></decl></param>,
                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>blame_receiver_wrapper_baton</name> *</type><name>brwb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>brwb</name>-&gt;<name>receiver</name></name></expr>)</condition><then>
    <return>return <expr><call><name><name>brwb</name>-&gt;<name>receiver</name></name><argument_list>(<argument><expr><name><name>brwb</name>-&gt;<name>baton</name></name></expr></argument>,
                          <argument><expr><name>line_no</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>author</name></expr></argument>, <argument><expr><name>date</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>wrap_blame_receiver</name><parameter_list>(<param><decl><type><name>svn_client_blame_receiver2_t</name> *</type><name>receiver2</name></decl></param>,
                    <param><decl><type><name>void</name> **</type><name>receiver2_baton</name></decl></param>,
                    <param><decl><type><name>svn_client_blame_receiver_t</name></type> <name>receiver</name></decl></param>,
                    <param><decl><type><name>void</name> *</type><name>receiver_baton</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>blame_receiver_wrapper_baton</name> *</type><name>brwb</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>brwb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Set the user provided old format callback in the baton. */</comment>
  <expr_stmt><expr><name><name>brwb</name>-&gt;<name>baton</name></name> = <name>receiver_baton</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>brwb</name>-&gt;<name>receiver</name></name> = <name>receiver</name></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>receiver2_baton</name> = <name>brwb</name></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>receiver2</name> = <name>blame_wrapper_receiver</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_client_blame3</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>peg_revision</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>start</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>end</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>svn_diff_file_options_t</name> *</type><name>diff_options</name></decl></param>,
                  <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_mime_type</name></decl></param>,
                  <param><decl><type><name>svn_client_blame_receiver_t</name></type> <name>receiver</name></decl></param>,
                  <param><decl><type><name>void</name> *</type><name>receiver_baton</name></decl></param>,
                  <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_client_blame_receiver2_t</name></type> <name>receiver2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>receiver2_baton</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>wrap_blame_receiver</name><argument_list>(<argument><expr>&amp;<name>receiver2</name></expr></argument>, <argument><expr>&amp;<name>receiver2_baton</name></expr></argument>, <argument><expr><name>receiver</name></expr></argument>, <argument><expr><name>receiver_baton</name></expr></argument>,
                      <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>svn_client_blame4</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>peg_revision</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>diff_options</name></expr></argument>,
                           <argument><expr><name>ignore_mime_type</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>receiver2</name></expr></argument>, <argument><expr><name>receiver2_baton</name></expr></argument>,
                           <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* svn_client_blame3 guarantees 'no EOL chars' as part of the receiver
   LINE argument.  Older versions depend on the fact that if a CR is
   required, that CR is already part of the LINE data.

   Because of this difference, we need to trap old receivers and append
   a CR to LINE before passing it on to the actual receiver on platforms
   which want CRLF line termination.

*/</comment>

<struct>struct <name>wrapped_receiver_baton_s</name>
<block>{
  <decl_stmt><decl><type><name>svn_client_blame_receiver_t</name></type> <name>orig_receiver</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>orig_baton</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>wrapped_receiver</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                 <param><decl><type><name>apr_int64_t</name></type> <name>line_no</name></decl></param>,
                 <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>author</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>date</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>line</name></decl></param>,
                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>wrapped_receiver_baton_s</name> *</type><name>b</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>expanded_line</name> <init>= <expr><call><name>svn_stringbuf_create</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name>expanded_line</name></expr></argument>, <argument><expr>"\r"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name><name>b</name>-&gt;<name>orig_receiver</name></name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>orig_baton</name></name></expr></argument>, <argument><expr><name>line_no</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>author</name></expr></argument>,
                          <argument><expr><name>date</name></expr></argument>, <argument><expr><name><name>expanded_line</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>wrap_pre_blame3_receiver</name><parameter_list>(<param><decl><type><name>svn_client_blame_receiver_t</name> *</type><name>receiver</name></decl></param>,
                   <param><decl><type><name>void</name> **</type><name>receiver_baton</name></decl></param>,
                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>APR_EOL_STR</name></expr></argument>)</argument_list></call> &gt; 1</expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type>struct <name>wrapped_receiver_baton_s</name> *</type><name>b</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name><name>b</name>-&gt;<name>orig_receiver</name></name> = *<name>receiver</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>b</name>-&gt;<name>orig_baton</name></name> = *<name>receiver_baton</name></expr>;</expr_stmt>

      <expr_stmt><expr>*<name>receiver_baton</name> = <name>b</name></expr>;</expr_stmt>
      <expr_stmt><expr>*<name>receiver</name> = <name>wrapped_receiver</name></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_client_blame2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>peg_revision</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>start</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>end</name></decl></param>,
                  <param><decl><type><name>svn_client_blame_receiver_t</name></type> <name>receiver</name></decl></param>,
                  <param><decl><type><name>void</name> *</type><name>receiver_baton</name></decl></param>,
                  <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>wrap_pre_blame3_receiver</name><argument_list>(<argument><expr>&amp;<name>receiver</name></expr></argument>, <argument><expr>&amp;<name>receiver_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>svn_client_blame3</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>peg_revision</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>,
                           <argument><expr><call><name>svn_diff_file_options_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                           <argument><expr><name>receiver</name></expr></argument>, <argument><expr><name>receiver_baton</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_client_blame</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>start</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>end</name></decl></param>,
                 <param><decl><type><name>svn_client_blame_receiver_t</name></type> <name>receiver</name></decl></param>,
                 <param><decl><type><name>void</name> *</type><name>receiver_baton</name></decl></param>,
                 <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>wrap_pre_blame3_receiver</name><argument_list>(<argument><expr>&amp;<name>receiver</name></expr></argument>, <argument><expr>&amp;<name>receiver_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>svn_client_blame2</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>,
                           <argument><expr><name>receiver</name></expr></argument>, <argument><expr><name>receiver_baton</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
</unit>
