<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_client/locking_commands.c"><comment type="block">/*
 * locking_commands.c:  Implementation of lock and unlock.
 *
 * ====================================================================
 * Copyright (c) 2000-2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<comment type="block">/* ==================================================================== */</comment>


<escape char="0xc"/>
<comment type="block">/*** Includes. ***/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_xml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_wc_private.h"</cpp:file></cpp:include>

<escape char="0xc"/>
<comment type="block">/*** Code. ***/</comment>

<comment type="block">/* For use with store_locks_callback, below. */</comment>
<struct>struct <name>lock_baton</name>
<block>{
  <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>urls_to_paths</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
}</block>;</struct>


<comment type="block">/* This callback is called by the ra_layer for each path locked.
 * BATON is a 'struct lock_baton *', PATH is the path being locked,
 * and LOCK is the lock itself.
 *
 * If BATON-&gt;adm_access is not null, then this function either stores
 * the LOCK on REL_URL or removes any lock tokens from REL_URL
 * (depending on whether DO_LOCK is true or false respectively), but
 * only if RA_ERR is null, or (in the unlock case) is something other
 * than SVN_ERR_FS_LOCK_OWNER_MISMATCH.
 */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>store_locks_callback</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rel_url</name></decl></param>,
                     <param><decl><type><name>svn_boolean_t</name></type> <name>do_lock</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>svn_lock_t</name> *</type><name>lock</name></decl></param>,
                     <param><decl><type><name>svn_error_t</name> *</type><name>ra_err</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>lock_baton</name> *</type><name>lb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>abs_path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_notify_t</name> *</type><name>notify</name></decl>;</decl_stmt>

  <comment type="block">/* Create the notify struct first, so we can tweak it below. */</comment>
  <expr_stmt><expr><name>notify</name> = <call><name>svn_wc_create_notify</name><argument_list>(<argument><expr><name>rel_url</name></expr></argument>,
                                <argument><expr><name>do_lock</name>
                                ? (<name>ra_err</name>
                                   ? <name>svn_wc_notify_failed_lock</name>
                                   : <name>svn_wc_notify_locked</name>)
                                : (<name>ra_err</name>
                                   ? <name>svn_wc_notify_failed_unlock</name>
                                   : <name>svn_wc_notify_unlocked</name>)</expr></argument>,
                                <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>notify</name>-&gt;<name>lock</name></name> = <name>lock</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>notify</name>-&gt;<name>err</name></name> = <name>ra_err</name></expr>;</expr_stmt>

  <if>if <condition>(<expr><name><name>lb</name>-&gt;<name>adm_access</name></name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>char</name> *</type><name>path</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>lb</name>-&gt;<name>urls_to_paths</name></name></expr></argument>, <argument><expr><name>rel_url</name></expr></argument>,
                                <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>abs_path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name><name>lb</name>-&gt;<name>adm_access</name></name></expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>lb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_probe_retrieve</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name><name>lb</name>-&gt;<name>adm_access</name></name></expr></argument>,
                                        <argument><expr><name>abs_path</name></expr></argument>, <argument><expr><name><name>lb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>do_lock</name></expr>)</condition><then>
        <block>{
          <if>if <condition>(<expr>!<name>ra_err</name></expr>)</condition><then>
            <block>{
              <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_add_lock</name><argument_list>(<argument><expr><name>abs_path</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name><name>lb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>notify</name>-&gt;<name>lock_state</name></name> = <name>svn_wc_notify_lock_state_locked</name></expr>;</expr_stmt>
            }</block></then>
          <else>else
            <expr_stmt><expr><name><name>notify</name>-&gt;<name>lock_state</name></name> = <name>svn_wc_notify_lock_state_unchanged</name></expr>;</expr_stmt></else></if>
        }</block></then>
      <else>else <comment type="block">/* unlocking */</comment>
        <block>{
          <comment type="block">/* Remove our wc lock token either a) if we got no error, or b) if
             we got any error except for owner mismatch.  Note that the only
             errors that are handed to this callback will be locking-related
             errors. */</comment>

          <if>if <condition>(<expr>!<name>ra_err</name> ||
              (<name>ra_err</name> &amp;&amp; (<name><name>ra_err</name>-&gt;<name>apr_err</name></name> != <name>SVN_ERR_FS_LOCK_OWNER_MISMATCH</name>))</expr>)</condition><then>
            <block>{
              <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_remove_lock</name><argument_list>(<argument><expr><name>abs_path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name><name>lb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>notify</name>-&gt;<name>lock_state</name></name> = <name>svn_wc_notify_lock_state_unlocked</name></expr>;</expr_stmt>
            }</block></then>
          <else>else
            <expr_stmt><expr><name><name>notify</name>-&gt;<name>lock_state</name></name> = <name>svn_wc_notify_lock_state_unchanged</name></expr>;</expr_stmt></else></if>
        }</block></else></if>
    }</block></then></if>

  <if>if <condition>(<expr><name><name>lb</name>-&gt;<name>ctx</name>-&gt;<name>notify_func2</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name><name>lb</name>-&gt;<name>ctx</name>-&gt;<name>notify_func2</name></name><argument_list>(<argument><expr><name><name>lb</name>-&gt;<name>ctx</name>-&gt;<name>notify_baton2</name></name></expr></argument>, <argument><expr><name>notify</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Set *COMMON_PARENT to the nearest common parent of all TARGETS.  If
 * TARGETS are local paths, then the entry for each path is examined
 * and *COMMON_PARENT is set to the common parent URL for all the
 * targets (as opposed to the common local path).
 *
 * If all the targets are local paths within the same wc, i.e., they
 * share a common parent at some level, set *PARENT_ADM_ACCESS_P
 * to the adm_access of that common parent.  *PARENT_ADM_ACCESS_P will
 * be associated with adm_access objects for all the other paths,
 * which are locked in the working copy while we lock them in the
 * repository.
 *
 * If all the targets are URLs in the same repository, i.e. sharing a
 * common parent URL prefix, then set *PARENT_ADM_ACCESS_P to null.
 *
 * If there is no common parent, either because the targets are a
 * mixture of URLs and local paths, or because they simply do not
 * share a common parent, then return SVN_ERR_UNSUPPORTED_FEATURE.
 *
 * DO_LOCK is TRUE for locking TARGETS, and FALSE for unlocking them.
 * FORCE is TRUE for breaking or stealing locks, and FALSE otherwise.
 *
 * Each key stored in *REL_TARGETS_P is a path relative to
 * *COMMON_PARENT.  If TARGETS are local paths, then: if DO_LOCK is
 * true, the value is a pointer to the corresponding base_revision
 * (allocated in POOL) for the path, else the value is the lock token
 * (or "" if no token found in the wc).
 *
 * If TARGETS is an array of urls, REL_FS_PATHS_P is set to NULL.
 * Otherwise each key in REL_FS_PATHS_P is an repository path (relative to
 * COMMON_PARENT) mapped to the target path for TARGET (relative to
 * the common parent WC path). working copy targets that they "belong" to.
 *
 * If *COMMON_PARENT is a URL, then the values are a pointer to
 * SVN_INVALID_REVNUM (allocated in pool) if DO_LOCK, else "".
 *
 * TARGETS may not be empty.
 */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>organize_lock_targets</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>common_parent</name></decl></param>,
                      <param><decl><type><name>svn_wc_adm_access_t</name> **</type><name>parent_adm_access_p</name></decl></param>,
                      <param><decl><type><name>apr_hash_t</name> **</type><name>rel_targets_p</name></decl></param>,
                      <param><decl><type><name>apr_hash_t</name> **</type><name>rel_fs_paths_p</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>targets</name></decl></param>,
                      <param><decl><type><name>svn_boolean_t</name></type> <name>do_lock</name></decl></param>,
                      <param><decl><type><name>svn_boolean_t</name></type> <name>force</name></decl></param>,
                      <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>rel_targets</name> <init>= <expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>,
                                                   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>rel_targets_ret</name> <init>= <expr><call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Get the common parent and all relative paths */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_path_condense_targets</name><argument_list>(<argument><expr><name>common_parent</name></expr></argument>, <argument><expr>&amp;<name>rel_targets</name></expr></argument>, <argument><expr><name>targets</name></expr></argument>,
                                    <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* svn_path_condense_targets leaves paths empty if TARGETS only had
     1 member, so we special case that. */</comment>
  <if>if <condition>(<expr><call><name>apr_is_empty_array</name><argument_list>(<argument><expr><name>rel_targets</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>char</name> *</type><name>base_name</name> <init>= <expr><call><name>svn_path_basename</name><argument_list>(<argument><expr>*<name>common_parent</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr>*<name>common_parent</name> = <call><name>svn_path_dirname</name><argument_list>(<argument><expr>*<name>common_parent</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>rel_targets</name></expr></argument>, <argument><expr><name>char</name> *</expr></argument>)</argument_list></call> = <name>base_name</name></expr>;</expr_stmt>
    }</block></then></if>

  <if>if <condition>(<expr>*<name>common_parent</name> == <name>NULL</name> || (*<name>common_parent</name>)<index>[<expr>0</expr>]</index> == '\0'</expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name>
      <argument_list>(<argument><expr><name>SVN_ERR_UNSUPPORTED_FEATURE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
       <argument><expr><call><name>_</name><argument_list>(<argument><expr>"No common parent found, unable to operate on disjoint arguments"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <if>if <condition>(<expr><call><name>svn_path_is_url</name><argument_list>(<argument><expr>*<name>common_parent</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_revnum_t</name> *</type><name>invalid_revnum</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>invalid_revnum</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>invalid_revnum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr>*<name>invalid_revnum</name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
      <expr_stmt><expr>*<name>parent_adm_access_p</name> = <name>NULL</name></expr>;</expr_stmt>

      <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>rel_targets</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>rel_targets</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>rel_targets_ret</name></expr></argument>, <argument><expr><call><name>svn_path_uri_decode</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
                       <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                       <argument><expr><name>do_lock</name> ? (const <name>void</name> *) <name>invalid_revnum</name>
                       : (const <name>void</name> *) ""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
      <expr_stmt><expr>*<name>rel_fs_paths_p</name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then>
  <else>else  <comment type="block">/* common parent is a local path */</comment>
    <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>max_levels_to_lock</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>rel_urls</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>urls</name> <init>= <expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>,
                                                <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>urls_hash</name> <init>= <expr><call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>common_url</name></decl>;</decl_stmt>

      <comment type="block">/* Calculate the maximum number of components in the rel_targets, which
         is the depth to which we need to lock the WC. */</comment>
      <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>rel_targets</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
        <block>{
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>rel_targets</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>svn_path_component_count</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <if>if <condition>(<expr><name>n</name> &gt; <name>max_levels_to_lock</name></expr>)</condition><then>
            <expr_stmt><expr><name>max_levels_to_lock</name> = <name>n</name></expr>;</expr_stmt></then></if>
        }</block></for>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_probe_open3</name><argument_list>(<argument><expr><name>parent_adm_access_p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                     <argument><expr>*<name>common_parent</name></expr></argument>,
                                     <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>max_levels_to_lock</name></expr></argument>,
                                     <argument><expr><name><name>ctx</name>-&gt;<name>cancel_func</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>,
                                     <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Get the url for each target and verify all paths. */</comment>
      <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>rel_targets</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
          <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>rel_targets</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>abs_path</name></decl>;</decl_stmt>

          <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><name>abs_path</name> = <call><name>svn_path_join</name>
            <argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr>*<name>parent_adm_access_p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_versioned</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name>abs_path</name></expr></argument>,
                                         <argument><expr>*<name>parent_adm_access_p</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <if>if <condition>(<expr>! <name><name>entry</name>-&gt;<name>url</name></name></expr>)</condition><then>
            <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_ENTRY_MISSING_URL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                     <argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s' has no URL"</expr></argument>)</argument_list></call></expr></argument>,
                                     <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>

          <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>urls</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
                                                           <argument><expr><name><name>entry</name>-&gt;<name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

      <comment type="block">/* Condense our absolute urls and get the relative urls. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_path_condense_targets</name><argument_list>(<argument><expr>&amp;<name>common_url</name></expr></argument>, <argument><expr>&amp;<name>rel_urls</name></expr></argument>, <argument><expr><name>urls</name></expr></argument>,
                                        <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* svn_path_condense_targets leaves paths empty if TARGETS only had
         1 member, so we special case that (again). */</comment>
      <if>if <condition>(<expr><call><name>apr_is_empty_array</name><argument_list>(<argument><expr><name>rel_urls</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>char</name> *</type><name>base_name</name> <init>= <expr><call><name>svn_path_basename</name><argument_list>(<argument><expr><name>common_url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>common_url</name> = <call><name>svn_path_dirname</name><argument_list>(<argument><expr><name>common_url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>rel_urls</name></expr></argument>, <argument><expr><name>char</name> *</expr></argument>)</argument_list></call> = <name>base_name</name></expr>;</expr_stmt>
        }</block></then></if>

      <comment type="block">/* If we have no common URL parent, bail (cross-repos lock attempt) */</comment>
      <if>if <condition>(<expr><name>common_url</name> == <name>NULL</name> || (<name>common_url</name>)<index>[<expr>0</expr>]</index> == '\0'</expr>)</condition><then>
        <return>return <expr><call><name>svn_error_create</name>
          <argument_list>(<argument><expr><name>SVN_ERR_UNSUPPORTED_FEATURE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
           <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Unable to lock/unlock across multiple repositories"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>

      <comment type="block">/* Now that we've got the relative URLs, gather our targets and
         store the mapping between relative repository path and WC path. */</comment>
      <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>rel_targets</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
          <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>rel_targets</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>rel_urls</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>abs_path</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>decoded_url</name> <init>= <expr><call><name>svn_path_uri_decode</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>urls_hash</name></expr></argument>, <argument><expr><name>decoded_url</name></expr></argument>,
                       <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                       <argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><name>abs_path</name> = <call><name>svn_path_join</name>
            <argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr>*<name>parent_adm_access_p</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name>abs_path</name></expr></argument>, <argument><expr>*<name>parent_adm_access_p</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                               <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <if>if <condition>(<expr><name>do_lock</name></expr>)</condition><then> <comment type="block">/* Lock. */</comment>
            <block>{
              <decl_stmt><decl><type><name>svn_revnum_t</name> *</type><name>revnum</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>revnum</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>* <name>revnum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr>*<name>revnum</name> = <name><name>entry</name>-&gt;<name>revision</name></name></expr>;</expr_stmt>

              <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>rel_targets_ret</name></expr></argument>, <argument><expr><name>decoded_url</name></expr></argument>,
                           <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>revnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
          <else>else <comment type="block">/* Unlock. */</comment>
            <block>{
              <comment type="block">/* If not force, get the lock token from the WC entry. */</comment>
              <if>if <condition>(<expr>! <name>force</name></expr>)</condition><then>
                <block>{
                  <if>if <condition>(<expr>! <name><name>entry</name>-&gt;<name>lock_token</name></name></expr>)</condition><then>
                    <return>return <expr><call><name>svn_error_createf</name>
                      <argument_list>(<argument><expr><name>SVN_ERR_CLIENT_MISSING_LOCK_TOKEN</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                       <argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s' is not locked in this working copy"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

                  <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>rel_targets_ret</name></expr></argument>, <argument><expr><name>decoded_url</name></expr></argument>,
                               <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                               <argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>lock_token</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
              <else>else
                <block>{
                  <comment type="block">/* If breaking a lock, we shouldn't pass any lock token. */</comment>
                  <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>rel_targets_ret</name></expr></argument>, <argument><expr><name>decoded_url</name></expr></argument>,
                               <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></else></if>
        }</block></for>

      <expr_stmt><expr>*<name>rel_fs_paths_p</name> = <name>urls_hash</name></expr>;</expr_stmt>
      <expr_stmt><expr>*<name>common_parent</name> = <name>common_url</name></expr>;</expr_stmt>
    }</block></else></if>

  <expr_stmt><expr>*<name>rel_targets_p</name> = <name>rel_targets_ret</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Fetch lock tokens from the repository for the paths in PATH_TOKENS,
   setting the values to the fetched tokens, allocated in pool. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>fetch_tokens</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>, <param><decl><type><name>apr_hash_t</name> *</type><name>path_tokens</name></decl></param>,
             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iterpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>path_tokens</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_lock_t</name> *</type><name>lock</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>path</name> = <name>key</name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_lock</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>&amp;<name>lock</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr>! <name>lock</name></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_createf</name>
          <argument_list>(<argument><expr><name>SVN_ERR_CLIENT_MISSING_LOCK_TOKEN</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
           <argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s' is not locked"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

      <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>path_tokens</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                   <argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>lock</name>-&gt;<name>token</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_client_lock</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>targets</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>comment</name></decl></param>,
                <param><decl><type><name>svn_boolean_t</name></type> <name>steal_lock</name></decl></param>,
                <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>common_parent</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>path_revs</name></decl>, *<decl><type ref="prev"/><name>urls_to_paths</name></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>lock_baton</name></type> <name>cb</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><call><name>apr_is_empty_array</name><argument_list>(<argument><expr><name>targets</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* Enforce that the comment be xml-escapable. */</comment>
  <if>if <condition>(<expr><name>comment</name></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr>! <call><name>svn_xml_is_xml_safe</name><argument_list>(<argument><expr><name>comment</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_create</name>
          <argument_list>(<argument><expr><name>SVN_ERR_XML_UNESCAPABLE_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
           <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Lock comment contains illegal characters"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
    }</block></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>organize_lock_targets</name><argument_list>(<argument><expr>&amp;<name>common_parent</name></expr></argument>, <argument><expr>&amp;<name>adm_access</name></expr></argument>,
                                <argument><expr>&amp;<name>path_revs</name></expr></argument>, <argument><expr>&amp;<name>urls_to_paths</name></expr></argument>, <argument><expr><name>targets</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
                                <argument><expr><name>steal_lock</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Open an RA session to the common parent of TARGETS. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__open_ra_session_internal</name>
          <argument_list>(<argument><expr>&amp;<name>ra_session</name></expr></argument>, <argument><expr><name>common_parent</name></expr></argument>,
           <argument><expr><name>adm_access</name> ? <call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call> : <name>NULL</name></expr></argument>,
           <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>cb</name>.<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cb</name>.<name>adm_access</name></name> = <name>adm_access</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cb</name>.<name>urls_to_paths</name></name> = <name>urls_to_paths</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cb</name>.<name>ctx</name></name> = <name>ctx</name></expr>;</expr_stmt>

  <comment type="block">/* Lock the paths. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_lock</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>path_revs</name></expr></argument>, <argument><expr><name>comment</name></expr></argument>,
                      <argument><expr><name>steal_lock</name></expr></argument>, <argument><expr><name>store_locks_callback</name></expr></argument>, <argument><expr>&amp;<name>cb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Unlock the wc. */</comment>
  <if>if <condition>(<expr><name>adm_access</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_close</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_client_unlock</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>targets</name></decl></param>,
                  <param><decl><type><name>svn_boolean_t</name></type> <name>break_lock</name></decl></param>,
                  <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>common_parent</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>path_tokens</name></decl>, *<decl><type ref="prev"/><name>urls_to_paths</name></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>lock_baton</name></type> <name>cb</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><call><name>apr_is_empty_array</name><argument_list>(<argument><expr><name>targets</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>organize_lock_targets</name><argument_list>(<argument><expr>&amp;<name>common_parent</name></expr></argument>, <argument><expr>&amp;<name>adm_access</name></expr></argument>,
                                <argument><expr>&amp;<name>path_tokens</name></expr></argument>, <argument><expr>&amp;<name>urls_to_paths</name></expr></argument>, <argument><expr><name>targets</name></expr></argument>,
                                <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>break_lock</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Open an RA session. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client__open_ra_session_internal</name>
          <argument_list>(<argument><expr>&amp;<name>ra_session</name></expr></argument>, <argument><expr><name>common_parent</name></expr></argument>,
           <argument><expr><name>adm_access</name> ? <call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call> : <name>NULL</name></expr></argument>,
           <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If break_lock is not set, lock tokens are required by the server.
     If the targets were all URLs, ensure that we provide lock tokens,
     so the repository will only check that the user owns the
     locks. */</comment>
  <if>if <condition>(<expr>! <name>adm_access</name> &amp;&amp; !<name>break_lock</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>fetch_tokens</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>path_tokens</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <expr_stmt><expr><name><name>cb</name>.<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cb</name>.<name>adm_access</name></name> = <name>adm_access</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cb</name>.<name>urls_to_paths</name></name> = <name>urls_to_paths</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cb</name>.<name>ctx</name></name> = <name>ctx</name></expr>;</expr_stmt>

  <comment type="block">/* Unlock the paths. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_unlock</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>path_tokens</name></expr></argument>, <argument><expr><name>break_lock</name></expr></argument>,
                        <argument><expr><name>store_locks_callback</name></expr></argument>, <argument><expr>&amp;<name>cb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Unlock the wc. */</comment>
  <if>if <condition>(<expr><name>adm_access</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_close</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

</unit>
