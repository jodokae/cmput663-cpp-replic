<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_ra_svn/marshal.c"><comment type="block">/*
 * marshal.c :  Marshalling routines for Subversion protocol
 *
 * ====================================================================
 * Copyright (c) 2000-2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>


<escape char="0xc"/>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_want.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_general.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_ra_svn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ra_svn.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_iswhitespace</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((c) == ' ' || (c) == '\n')</cpp:value></cpp:define>

<comment type="block">/* --- CONNECTION INITIALIZATION --- */</comment>

<function><type><name>svn_ra_svn_conn_t</name> *</type><name>svn_ra_svn_create_conn</name><parameter_list>(<param><decl><type><name>apr_socket_t</name> *</type><name>sock</name></decl></param>,
                                          <param><decl><type><name>apr_file_t</name> *</type><name>in_file</name></decl></param>,
                                          <param><decl><type><name>apr_file_t</name> *</type><name>out_file</name></decl></param>,
                                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>conn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>(<name>sock</name> &amp;&amp; !<name>in_file</name> &amp;&amp; !<name>out_file</name>) || (!<name>sock</name> &amp;&amp; <name>in_file</name> &amp;&amp; <name>out_file</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SVN_HAVE_SASL</name></cpp:ifdef>
  <expr_stmt><expr><name><name>conn</name>-&gt;<name>sock</name></name> = <name>sock</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conn</name>-&gt;<name>encrypted</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><name><name>conn</name>-&gt;<name>session</name></name> = <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conn</name>-&gt;<name>read_ptr</name></name> = <name><name>conn</name>-&gt;<name>read_buf</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conn</name>-&gt;<name>read_end</name></name> = <name><name>conn</name>-&gt;<name>read_buf</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conn</name>-&gt;<name>write_pos</name></name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conn</name>-&gt;<name>block_handler</name></name> = <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conn</name>-&gt;<name>block_baton</name></name> = <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conn</name>-&gt;<name>capabilities</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conn</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>sock</name> != <name>NULL</name></expr>)</condition><then>
    <expr_stmt><expr><name><name>conn</name>-&gt;<name>stream</name></name> = <call><name>svn_ra_svn__stream_from_sock</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><name><name>conn</name>-&gt;<name>stream</name></name> = <call><name>svn_ra_svn__stream_from_files</name><argument_list>(<argument><expr><name>in_file</name></expr></argument>, <argument><expr><name>out_file</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

  <return>return <expr><name>conn</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_svn_set_capabilities</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>,
                                         <param><decl><type><name>apr_array_header_t</name> *</type><name>list</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra_svn_item_t</name> *</type><name>item</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>word</name></decl>;</decl_stmt>

  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>list</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <expr_stmt><expr><name>item</name> = &amp;<call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_ra_svn_item_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name><name>item</name>-&gt;<name>kind</name></name> != <name>SVN_RA_SVN_WORD</name></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_SVN_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Capability entry is not a word"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
      <expr_stmt><expr><name>word</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>item</name>-&gt;<name>u</name>.<name>word</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>capabilities</name></name></expr></argument>, <argument><expr><name>word</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_boolean_t</name></type> <name>svn_ra_svn_has_capability</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>,
                                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>capability</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr>(<call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>capabilities</name></name></expr></argument>, <argument><expr><name>capability</name></expr></argument>,
                       <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call> != <name>NULL</name>)</expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name>svn_ra_svn__set_block_handler</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>,
                              <param><decl><type><name>ra_svn_block_handler_t</name></type> <name>handler</name></decl></param>,
                              <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>interval</name> <init>= <expr>(<name>handler</name>) ? 0 : -1</expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>conn</name>-&gt;<name>block_handler</name></name> = <name>handler</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conn</name>-&gt;<name>block_baton</name></name> = <name>baton</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_ra_svn__stream_timeout</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>stream</name></name></expr></argument>, <argument><expr><name>interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>svn_boolean_t</name></type> <name>svn_ra_svn__input_waiting</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>,
                                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_ra_svn__stream_pending</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>stream</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* --- WRITE BUFFER MANAGEMENT --- */</comment>

<comment type="block">/* Write bytes into the write buffer until either the write buffer is
 * full or we reach END. */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>writebuf_push</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>end</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_ssize_t</name></type> <name>buflen</name></decl>, <decl><type ref="prev"/><name>copylen</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>buflen</name> = <sizeof>sizeof<argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>write_buf</name></name></expr></argument>)</argument_list></sizeof> - <name><name>conn</name>-&gt;<name>write_pos</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>copylen</name> = (<name>buflen</name> &lt; <name>end</name> - <name>data</name>) ? <name>buflen</name> : <name>end</name> - <name>data</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>write_buf</name></name> + <name><name>conn</name>-&gt;<name>write_pos</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>copylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conn</name>-&gt;<name>write_pos</name></name> += <name>copylen</name></expr>;</expr_stmt>
  <return>return <expr><name>data</name> + <name>copylen</name></expr>;</return>
}</block></function>

<comment type="block">/* Write data to socket or output file as appropriate. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>writebuf_output</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>end</name> <init>= <expr><name>data</name> + <name>len</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_size_t</name></type> <name>count</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra_svn__session_baton_t</name> *</type><name>session</name> <init>= <expr><name><name>conn</name>-&gt;<name>session</name></name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>data</name> &lt; <name>end</name></expr>)</condition>
    <block>{
      <expr_stmt><expr><name>count</name> = <name>end</name> - <name>data</name></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>session</name> &amp;&amp; <name><name>session</name>-&gt;<name>callbacks</name></name> &amp;&amp;
          <name><name>session</name>-&gt;<name>callbacks</name>-&gt;<name>cancel_func</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call>(<name><name>session</name>-&gt;<name>callbacks</name>-&gt;<name>cancel_func</name></name>)
                   <argument_list>(<argument><expr><name><name>session</name>-&gt;<name>callbacks_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn__stream_write</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>stream</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr>&amp;<name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>count</name> == 0</expr>)</condition><then>
        <block>{
          <if>if <condition>(<expr>!<name>subpool</name></expr>)</condition><then>
            <expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
          <else>else
            <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>conn</name>-&gt;<name>block_handler</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>, <argument><expr><name><name>conn</name>-&gt;<name>block_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      <expr_stmt><expr><name>data</name> += <name>count</name></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>session</name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><specifier>const</specifier> <name>svn_ra_callbacks2_t</name> *</type><name>cb</name> <init>= <expr><name><name>session</name>-&gt;<name>callbacks</name></name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>session</name>-&gt;<name>bytes_written</name></name> += <name>count</name></expr>;</expr_stmt>

          <if>if <condition>(<expr><name>cb</name> &amp;&amp; <name><name>cb</name>-&gt;<name>progress_func</name></name></expr>)</condition><then>
            <expr_stmt><expr><call>(<name><name>cb</name>-&gt;<name>progress_func</name></name>)<argument_list>(<argument><expr><name><name>session</name>-&gt;<name>bytes_written</name></name> + <name><name>session</name>-&gt;<name>bytes_read</name></name></expr></argument>,
                                <argument><expr>-1</expr></argument>, <argument><expr><name><name>cb</name>-&gt;<name>progress_baton</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></then></if>
    }</block></while>

  <if>if <condition>(<expr><name>subpool</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Write data from the write buffer out to the socket. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>writebuf_flush</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>write_pos</name> <init>= <expr><name><name>conn</name>-&gt;<name>write_pos</name></name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Clear conn-&gt;write_pos first in case the block handler does a read. */</comment>
  <expr_stmt><expr><name><name>conn</name>-&gt;<name>write_pos</name></name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>writebuf_output</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>conn</name>-&gt;<name>write_buf</name></name></expr></argument>, <argument><expr><name>write_pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>writebuf_write</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>end</name> <init>= <expr><name>data</name> + <name>len</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>conn</name>-&gt;<name>write_pos</name></name> &gt; 0 &amp;&amp; <name><name>conn</name>-&gt;<name>write_pos</name></name> + <name>len</name> &gt; <sizeof>sizeof<argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>write_buf</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition><then>
    <block>{
      <comment type="block">/* Fill and then empty the write buffer. */</comment>
      <expr_stmt><expr><name>data</name> = <call><name>writebuf_push</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>writebuf_flush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <if>if <condition>(<expr><name>end</name> - <name>data</name> &gt; (<name>apr_ssize_t</name>)<sizeof>sizeof<argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>write_buf</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>writebuf_output</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>end</name> - <name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><call><name>writebuf_push</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function_decl><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>writebuf_printf</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fmt</name></decl></param>, <param><decl><type>...</type></decl></param>)</parameter_list>
  __attribute__ <parameter_list>(<param/></parameter_list>(format<parameter_list>(<param><decl><type><name>printf</name></type></decl></param>, <param/></parameter_list>3, 4</function_decl>)))<empty_stmt>;</empty_stmt>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>writebuf_printf</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fmt</name></decl></param>, <param><decl><type>...</type></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>str</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>str</name> = <call><name>apr_pvsprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>writebuf_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* --- READ BUFFER MANAGEMENT --- */</comment>

<comment type="block">/* Read bytes into DATA until either the read buffer is empty or
 * we reach END. */</comment>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>readbuf_drain</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>, <param><decl><type><name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>char</name> *</type><name>end</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_ssize_t</name></type> <name>buflen</name></decl>, <decl><type ref="prev"/><name>copylen</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>buflen</name> = <name><name>conn</name>-&gt;<name>read_end</name></name> - <name><name>conn</name>-&gt;<name>read_ptr</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>copylen</name> = (<name>buflen</name> &lt; <name>end</name> - <name>data</name>) ? <name>buflen</name> : <name>end</name> - <name>data</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>conn</name>-&gt;<name>read_ptr</name></name></expr></argument>, <argument><expr><name>copylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conn</name>-&gt;<name>read_ptr</name></name> += <name>copylen</name></expr>;</expr_stmt>
  <return>return <expr><name>data</name> + <name>copylen</name></expr>;</return>
}</block></function>

<comment type="block">/* Read data from socket or input file as appropriate. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>readbuf_input</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>, <param><decl><type><name>char</name> *</type><name>data</name></decl></param>,
                                  <param><decl><type><name>apr_size_t</name> *</type><name>len</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_ra_svn__session_baton_t</name> *</type><name>session</name> <init>= <expr><name><name>conn</name>-&gt;<name>session</name></name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>session</name> &amp;&amp; <name><name>session</name>-&gt;<name>callbacks</name></name> &amp;&amp;
      <name><name>session</name>-&gt;<name>callbacks</name>-&gt;<name>cancel_func</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call>(<name><name>session</name>-&gt;<name>callbacks</name>-&gt;<name>cancel_func</name></name>)
              <argument_list>(<argument><expr><name><name>session</name>-&gt;<name>callbacks_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn__stream_read</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>stream</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>*<name>len</name> == 0</expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_SVN_CONNECTION_CLOSED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                            <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Connection closed unexpectedly"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <if>if <condition>(<expr><name>session</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>svn_ra_callbacks2_t</name> *</type><name>cb</name> <init>= <expr><name><name>session</name>-&gt;<name>callbacks</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>session</name>-&gt;<name>bytes_read</name></name> += *<name>len</name></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>cb</name> &amp;&amp; <name><name>cb</name>-&gt;<name>progress_func</name></name></expr>)</condition><then>
        <expr_stmt><expr><call>(<name><name>cb</name>-&gt;<name>progress_func</name></name>)<argument_list>(<argument><expr><name><name>session</name>-&gt;<name>bytes_read</name></name> + <name><name>session</name>-&gt;<name>bytes_written</name></name></expr></argument>,
                            <argument><expr>-1</expr></argument>, <argument><expr><name><name>cb</name>-&gt;<name>progress_baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Read data from the socket into the read buffer, which must be empty. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>readbuf_fill</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>read_ptr</name></name> == <name><name>conn</name>-&gt;<name>read_end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>writebuf_flush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>len</name> = <sizeof>sizeof<argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>read_buf</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>readbuf_input</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>conn</name>-&gt;<name>read_buf</name></name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conn</name>-&gt;<name>read_ptr</name></name> = <name><name>conn</name>-&gt;<name>read_buf</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conn</name>-&gt;<name>read_end</name></name> = <name><name>conn</name>-&gt;<name>read_buf</name></name> + <name>len</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>readbuf_getchar</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                    <param><decl><type><name>char</name> *</type><name>result</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name><name>conn</name>-&gt;<name>read_ptr</name></name> == <name><name>conn</name>-&gt;<name>read_end</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>readbuf_fill</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <expr_stmt><expr>*<name>result</name> = *<name><name>conn</name>-&gt;<name>read_ptr</name></name>++</expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>readbuf_getchar_skip_whitespace</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>,
                                                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                                    <param><decl><type><name>char</name> *</type><name>result</name></decl></param>)</parameter_list>
<block>{
  <do>do
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>readbuf_getchar</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  while <condition>(<expr><call><name>svn_iswhitespace</name><argument_list>(<argument><expr>*<name>result</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>readbuf_read</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                 <param><decl><type><name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>char</name> *</type><name>end</name> <init>= <expr><name>data</name> + <name>len</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_size_t</name></type> <name>count</name></decl>;</decl_stmt>

  <comment type="block">/* Copy in an appropriate amount of data from the buffer. */</comment>
  <expr_stmt><expr><name>data</name> = <call><name>readbuf_drain</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Read large chunks directly into buffer. */</comment>
  <while>while <condition>(<expr><name>end</name> - <name>data</name> &gt; (<name>apr_ssize_t</name>)<sizeof>sizeof<argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>read_buf</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>writebuf_flush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>count</name> = <name>end</name> - <name>data</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>readbuf_input</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr>&amp;<name>count</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>data</name> += <name>count</name></expr>;</expr_stmt>
    }</block></while>

  <while>while <condition>(<expr><name>end</name> &gt; <name>data</name></expr>)</condition>
    <block>{
      <comment type="block">/* The remaining amount to read is small; fill the buffer and
       * copy from that. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>readbuf_fill</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>data</name> = <call><name>readbuf_drain</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>readbuf_skip_leading_garbage</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>,
                                                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>  <comment type="block">/* Must be smaller than sizeof(conn-&gt;read_buf) - 1. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>p</name></decl>, *<decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>lparen</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>read_ptr</name></name> == <name><name>conn</name>-&gt;<name>read_end</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr>1</expr>)</condition>
    <block>{
      <comment type="block">/* Read some data directly from the connection input source. */</comment>
      <expr_stmt><expr><name>len</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>readbuf_input</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>end</name> = <name>buf</name> + <name>len</name></expr>;</expr_stmt>

      <comment type="block">/* Scan the data for '(' WS with a very simple state machine. */</comment>
      <for>for (<init><expr><name>p</name> = <name>buf</name></expr>;</init> <condition><expr><name>p</name> &lt; <name>end</name></expr>;</condition> <incr><expr><name>p</name>++</expr></incr>)
        <block>{
          <if>if <condition>(<expr><name>lparen</name> &amp;&amp; <call><name>svn_iswhitespace</name><argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <break>break;</break></then>
          <else>else
            <expr_stmt><expr><name>lparen</name> = (*<name>p</name> == '(')</expr>;</expr_stmt></else></if>
        }</block></for>
      <if>if <condition>(<expr><name>p</name> &lt; <name>end</name></expr>)</condition><then>
        <break>break;</break></then></if>
    }</block></while>

  <comment type="block">/* p now points to the whitespace just after the left paren.  Fake
   * up the left paren and then copy what we have into the read
   * buffer. */</comment>
  <expr_stmt><expr><name><name>conn</name>-&gt;<name>read_buf</name><index>[<expr>0</expr>]</index></name> = '('</expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>read_buf</name></name> + 1</expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name> - <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conn</name>-&gt;<name>read_ptr</name></name> = <name><name>conn</name>-&gt;<name>read_buf</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>conn</name>-&gt;<name>read_end</name></name> = <name><name>conn</name>-&gt;<name>read_buf</name></name> + 1 + (<name>end</name> - <name>p</name>)</expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* --- WRITING DATA ITEMS --- */</comment>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_svn_write_number</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                     <param><decl><type><name>apr_uint64_t</name></type> <name>number</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>writebuf_printf</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"%" <name>APR_UINT64_T_FMT</name> " "</expr></argument>, <argument><expr><name>number</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_svn_write_string</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>str</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>writebuf_printf</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"%" <name>APR_SIZE_T_FMT</name> ":"</expr></argument>, <argument><expr><name><name>str</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>writebuf_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>str</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>str</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>writebuf_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>" "</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_svn_write_cstring</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>,
                                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>writebuf_printf</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"%" <name>APR_SIZE_T_FMT</name> ":%s "</expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_svn_write_word</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>word</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>writebuf_printf</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s "</expr></argument>, <argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_svn_write_proplist</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>,
                                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iterpool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>propname</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_string_t</name> *</type><name>propval</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>props</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>iterpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>props</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
        <block>{
          <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>propname</name> = <name>key</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>propval</name> = <name>val</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_write_tuple</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>, <argument><expr>"cs"</expr></argument>,
                                         <argument><expr><name>propname</name></expr></argument>, <argument><expr><name>propval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
      <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_svn_start_list</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>writebuf_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"( "</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_svn_end_list</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>writebuf_write</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>") "</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_svn_flush</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>writebuf_flush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* --- WRITING TUPLES --- */</comment>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>vwrite_tuple</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fmt</name></decl></param>, <param><decl><type><name>va_list</name></type> <name>ap</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>opt</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cstr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>str</name></decl>;</decl_stmt>

  <if>if <condition>(<expr>*<name>fmt</name> == '!'</expr>)</condition><then>
    <expr_stmt><expr><name>fmt</name>++</expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_start_list</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
  <for>for (<init>;</init> <condition><expr>*<name>fmt</name></expr>;</condition> <incr><expr><name>fmt</name>++</expr></incr>)
    <block>{
      <if>if <condition>(<expr>*<name>fmt</name> == 'n' &amp;&amp; !<name>opt</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_write_number</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>apr_uint64_t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
      <else>else <if>if <condition>(<expr>*<name>fmt</name> == 'r'</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>rev</name> = <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>svn_revnum_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>opt</name> || <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_write_number</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></then>
      <else>else <if>if <condition>(<expr>*<name>fmt</name> == 's'</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>str</name> = <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr>const <name>svn_string_t</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>opt</name> || <name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>str</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_write_string</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></then>
      <else>else <if>if <condition>(<expr>*<name>fmt</name> == 'c'</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>cstr</name> = <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>opt</name> || <name>cstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>cstr</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_write_cstring</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>cstr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></then>
      <else>else <if>if <condition>(<expr>*<name>fmt</name> == 'w'</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>cstr</name> = <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>opt</name> || <name>cstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>cstr</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_write_word</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>cstr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></then>
      <else>else <if>if <condition>(<expr>*<name>fmt</name> == 'b' &amp;&amp; !<name>opt</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>cstr</name> = <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>svn_boolean_t</name></expr></argument>)</argument_list></call> ? "true" : "false"</expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_write_word</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>cstr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else <if>if <condition>(<expr>*<name>fmt</name> == '?'</expr>)</condition><then>
        <expr_stmt><expr><name>opt</name> = <name>TRUE</name></expr>;</expr_stmt></then>
      <else>else <if>if <condition>(<expr>*<name>fmt</name> == '(' &amp;&amp; !<name>opt</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_start_list</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
      <else>else <if>if <condition>(<expr>*<name>fmt</name> == ')'</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_end_list</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>opt</name> = <name>FALSE</name></expr>;</expr_stmt>
        }</block></then>
      <else>else <if>if <condition>(<expr>*<name>fmt</name> == '!' &amp;&amp; !*(<name>fmt</name> + 1)</expr>)</condition><then>
        <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then>
      <else>else
        <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
    }</block></for>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_end_list</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_svn_write_tuple</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fmt</name></decl></param>, <param><decl><type>...</type></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>err</name> = <call><name>vwrite_tuple</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<comment type="block">/* --- READING DATA ITEMS --- */</comment>

<comment type="block">/* Read LEN bytes from CONN into already-allocated structure ITEM.
 * Afterwards, *ITEM is of type 'SVN_RA_SVN_STRING', and its string
 * data is allocated in POOL. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>read_string</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                <param><decl><type><name>svn_ra_svn_item_t</name> *</type><name>item</name></decl></param>, <param><decl><type><name>apr_uint64_t</name></type> <name>len</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>char</name></type> <name><name>readbuf</name><index>[<expr>4096</expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_size_t</name></type> <name>readbuf_len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>stringbuf</name> <init>= <expr><call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* We can't store strings longer than the maximum size of apr_size_t,
   * so check for wrapping */</comment>
  <if>if <condition>(<expr>((<name>apr_size_t</name>) <name>len</name>) &lt; <name>len</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_SVN_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                            <argument><expr><call><name>_</name><argument_list>(<argument><expr>"String length larger than maximum"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <while>while <condition>(<expr><name>len</name></expr>)</condition>
    <block>{
      <expr_stmt><expr><name>readbuf_len</name> = <name>len</name> &gt; <sizeof>sizeof<argument_list>(<argument><expr><name>readbuf</name></expr></argument>)</argument_list></sizeof> ? <sizeof>sizeof<argument_list>(<argument><expr><name>readbuf</name></expr></argument>)</argument_list></sizeof> : <name>len</name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>readbuf_read</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>readbuf</name></expr></argument>, <argument><expr><name>readbuf_len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* Read into a stringbuf_t to so we don't allow the sender to allocate
       * an arbitrary amount of memory without actually sending us that much
       * data */</comment>
      <expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name>stringbuf</name></expr></argument>, <argument><expr><name>readbuf</name></expr></argument>, <argument><expr><name>readbuf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>len</name> -= <name>readbuf_len</name></expr>;</expr_stmt>
    }</block></while>

  <expr_stmt><expr><name><name>item</name>-&gt;<name>kind</name></name> = <name>SVN_RA_SVN_STRING</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>item</name>-&gt;<name>u</name>.<name>string</name></name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name><name>item</name>-&gt;<name>u</name>.<name>string</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>item</name>-&gt;<name>u</name>.<name>string</name>-&gt;<name>data</name></name> = <name><name>stringbuf</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>item</name>-&gt;<name>u</name>.<name>string</name>-&gt;<name>len</name></name> = <name><name>stringbuf</name>-&gt;<name>len</name></name></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Given the first non-whitespace character FIRST_CHAR, read an item
 * into the already allocated structure ITEM.  LEVEL should be set
 * to 0 for the first call and is used to enforce a recurssion limit
 * on the parser. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>read_item</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                              <param><decl><type><name>svn_ra_svn_item_t</name> *</type><name>item</name></decl></param>, <param><decl><type><name>char</name></type> <name>first_char</name></decl></param>,
                              <param><decl><type><name>int</name></type> <name>level</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><name>first_char</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_uint64_t</name></type> <name>val</name></decl>, <decl><type ref="prev"/><name>prev_val</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>str</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra_svn_item_t</name> *</type><name>listitem</name></decl>;</decl_stmt>

  <if>if <condition>(<expr>++<name>level</name> &gt;= 64</expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_SVN_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                            <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Too many nested items"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>


  <comment type="block">/* Determine the item type and read it in.  Make sure that c is the
   * first character at the end of the item so we can test to make
   * sure it's whitespace. */</comment>
  <if>if <condition>(<expr><call><name>apr_isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <comment type="block">/* It's a number or a string.  Read the number part, either way. */</comment>
      <expr_stmt><expr><name>val</name> = <name>c</name> - '0'</expr>;</expr_stmt>
      <while>while <condition>(<expr>1</expr>)</condition>
        <block>{
          <expr_stmt><expr><name>prev_val</name> = <name>val</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>readbuf_getchar</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr>!<call><name>apr_isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <break>break;</break></then></if>
          <expr_stmt><expr><name>val</name> = <name>val</name> * 10 + (<name>c</name> - '0')</expr>;</expr_stmt>
          <if>if <condition>(<expr>(<name>val</name> / 10) != <name>prev_val</name></expr>)</condition><then> <comment type="block">/* val wrapped past maximum value */</comment>
            <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_SVN_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                    <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Number is larger than maximum"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
        }</block></while>
      <if>if <condition>(<expr><name>c</name> == ':'</expr>)</condition><then>
        <block>{
          <comment type="block">/* It's a string. */</comment>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_string</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>readbuf_getchar</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else
        <block>{
          <comment type="block">/* It's a number. */</comment>
          <expr_stmt><expr><name><name>item</name>-&gt;<name>kind</name></name> = <name>SVN_RA_SVN_NUMBER</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>item</name>-&gt;<name>u</name>.<name>number</name></name> = <name>val</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then>
  <else>else <if>if <condition>(<expr><call><name>apr_isalpha</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <comment type="block">/* It's a word. */</comment>
      <expr_stmt><expr><name>str</name> = <call><name>svn_stringbuf_ncreate</name><argument_list>(<argument><expr>&amp;<name>c</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <while>while <condition>(<expr>1</expr>)</condition>
        <block>{
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>readbuf_getchar</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr>!<call><name>apr_isalnum</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> &amp;&amp; <name>c</name> != '-'</expr>)</condition><then>
            <break>break;</break></then></if>
          <expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
      <expr_stmt><expr><name><name>item</name>-&gt;<name>kind</name></name> = <name>SVN_RA_SVN_WORD</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>item</name>-&gt;<name>u</name>.<name>word</name></name> = <name><name>str</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>c</name> == '('</expr>)</condition><then>
    <block>{
      <comment type="block">/* Read in the list items. */</comment>
      <expr_stmt><expr><name><name>item</name>-&gt;<name>kind</name></name> = <name>SVN_RA_SVN_LIST</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>item</name>-&gt;<name>u</name>.<name>list</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_ra_svn_item_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <while>while <condition>(<expr>1</expr>)</condition>
        <block>{
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>readbuf_getchar_skip_whitespace</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>c</name> == ')'</expr>)</condition><then>
            <break>break;</break></then></if>
          <expr_stmt><expr><name>listitem</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>item</name>-&gt;<name>u</name>.<name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_item</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>listitem</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>readbuf_getchar</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></else></if></else></if>

  <if>if <condition>(<expr>!<call><name>svn_iswhitespace</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_SVN_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                            <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Malformed network data"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_svn_read_item</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                  <param><decl><type><name>svn_ra_svn_item_t</name> **</type><name>item</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>

  <comment type="block">/* Allocate space, read the first character, and then do the rest of
   * the work.  This makes sense because of the way lists are read. */</comment>
  <expr_stmt><expr>*<name>item</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>**<name>item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>readbuf_getchar_skip_whitespace</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>read_item</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>*<name>item</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_svn_skip_leading_garbage</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>,
                                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>readbuf_skip_leading_garbage</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* --- READING AND PARSING TUPLES --- */</comment>

<comment type="block">/* Parse a tuple of svn_ra_svn_item_t *'s.  Advance *FMT to the end of the
 * tuple specification and advance AP by the corresponding arguments. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>vparse_tuple</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> *</type><name>items</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>fmt</name></decl></param>, <param><decl><type><name>va_list</name> *</type><name>ap</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>, <decl><type ref="prev"/><name>nesting_level</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra_svn_item_t</name> *</type><name>elt</name></decl>;</decl_stmt>

  <for>for (<init><expr><name>count</name> = 0</expr>;</init> <condition><expr>**<name>fmt</name> &amp;&amp; <name>count</name> &lt; <name><name>items</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>(*<name>fmt</name>)++</expr>, <expr><name>count</name>++</expr></incr>)
    <block>{
      <comment type="block">/* '?' just means the tuple may stop; skip past it. */</comment>
      <if>if <condition>(<expr>**<name>fmt</name> == '?'</expr>)</condition><then>
        <expr_stmt><expr>(*<name>fmt</name>)++</expr>;</expr_stmt></then></if>
      <expr_stmt><expr><name>elt</name> = &amp;<call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>items</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>svn_ra_svn_item_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr>**<name>fmt</name> == 'n' &amp;&amp; <name><name>elt</name>-&gt;<name>kind</name></name> == <name>SVN_RA_SVN_NUMBER</name></expr>)</condition><then>
        <expr_stmt><expr>*<call><name>va_arg</name><argument_list>(<argument><expr>*<name>ap</name></expr></argument>, <argument><expr><name>apr_uint64_t</name> *</expr></argument>)</argument_list></call> = <name><name>elt</name>-&gt;<name>u</name>.<name>number</name></name></expr>;</expr_stmt></then>
      <else>else <if>if <condition>(<expr>**<name>fmt</name> == 'r' &amp;&amp; <name><name>elt</name>-&gt;<name>kind</name></name> == <name>SVN_RA_SVN_NUMBER</name></expr>)</condition><then>
        <expr_stmt><expr>*<call><name>va_arg</name><argument_list>(<argument><expr>*<name>ap</name></expr></argument>, <argument><expr><name>svn_revnum_t</name> *</expr></argument>)</argument_list></call> = (<name>svn_revnum_t</name>) <name><name>elt</name>-&gt;<name>u</name>.<name>number</name></name></expr>;</expr_stmt></then>
      <else>else <if>if <condition>(<expr>**<name>fmt</name> == 's' &amp;&amp; <name><name>elt</name>-&gt;<name>kind</name></name> == <name>SVN_RA_SVN_STRING</name></expr>)</condition><then>
        <expr_stmt><expr>*<call><name>va_arg</name><argument_list>(<argument><expr>*<name>ap</name></expr></argument>, <argument><expr><name>svn_string_t</name> **</expr></argument>)</argument_list></call> = <name><name>elt</name>-&gt;<name>u</name>.<name>string</name></name></expr>;</expr_stmt></then>
      <else>else <if>if <condition>(<expr>**<name>fmt</name> == 'c' &amp;&amp; <name><name>elt</name>-&gt;<name>kind</name></name> == <name>SVN_RA_SVN_STRING</name></expr>)</condition><then>
        <expr_stmt><expr>*<call><name>va_arg</name><argument_list>(<argument><expr>*<name>ap</name></expr></argument>, <argument><expr>const <name>char</name> **</expr></argument>)</argument_list></call> = <name><name>elt</name>-&gt;<name>u</name>.<name>string</name>-&gt;<name>data</name></name></expr>;</expr_stmt></then>
      <else>else <if>if <condition>(<expr>**<name>fmt</name> == 'w' &amp;&amp; <name><name>elt</name>-&gt;<name>kind</name></name> == <name>SVN_RA_SVN_WORD</name></expr>)</condition><then>
        <expr_stmt><expr>*<call><name>va_arg</name><argument_list>(<argument><expr>*<name>ap</name></expr></argument>, <argument><expr>const <name>char</name> **</expr></argument>)</argument_list></call> = <name><name>elt</name>-&gt;<name>u</name>.<name>word</name></name></expr>;</expr_stmt></then>
      <else>else <if>if <condition>(<expr>**<name>fmt</name> == 'b' &amp;&amp; <name><name>elt</name>-&gt;<name>kind</name></name> == <name>SVN_RA_SVN_WORD</name></expr>)</condition><then>
        <block>{
          <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>elt</name>-&gt;<name>u</name>.<name>word</name></name></expr></argument>, <argument><expr>"true"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
            <expr_stmt><expr>*<call><name>va_arg</name><argument_list>(<argument><expr>*<name>ap</name></expr></argument>, <argument><expr><name>svn_boolean_t</name> *</expr></argument>)</argument_list></call> = <name>TRUE</name></expr>;</expr_stmt></then>
          <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>elt</name>-&gt;<name>u</name>.<name>word</name></name></expr></argument>, <argument><expr>"false"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
            <expr_stmt><expr>*<call><name>va_arg</name><argument_list>(<argument><expr>*<name>ap</name></expr></argument>, <argument><expr><name>svn_boolean_t</name> *</expr></argument>)</argument_list></call> = <name>FALSE</name></expr>;</expr_stmt></then>
          <else>else
            <break>break;</break></else></if></else></if>
        }</block></then>
      <else>else <if>if <condition>(<expr>**<name>fmt</name> == 'B' &amp;&amp; <name><name>elt</name>-&gt;<name>kind</name></name> == <name>SVN_RA_SVN_WORD</name></expr>)</condition><then>
        <block>{
          <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>elt</name>-&gt;<name>u</name>.<name>word</name></name></expr></argument>, <argument><expr>"true"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
            <expr_stmt><expr>*<call><name>va_arg</name><argument_list>(<argument><expr>*<name>ap</name></expr></argument>, <argument><expr><name>apr_uint64_t</name> *</expr></argument>)</argument_list></call> = <name>TRUE</name></expr>;</expr_stmt></then>
          <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>elt</name>-&gt;<name>u</name>.<name>word</name></name></expr></argument>, <argument><expr>"false"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
            <expr_stmt><expr>*<call><name>va_arg</name><argument_list>(<argument><expr>*<name>ap</name></expr></argument>, <argument><expr><name>apr_uint64_t</name> *</expr></argument>)</argument_list></call> = <name>FALSE</name></expr>;</expr_stmt></then>
          <else>else
            <break>break;</break></else></if></else></if>
        }</block></then>
      <else>else <if>if <condition>(<expr>**<name>fmt</name> == 'l' &amp;&amp; <name><name>elt</name>-&gt;<name>kind</name></name> == <name>SVN_RA_SVN_LIST</name></expr>)</condition><then>
        <expr_stmt><expr>*<call><name>va_arg</name><argument_list>(<argument><expr>*<name>ap</name></expr></argument>, <argument><expr><name>apr_array_header_t</name> **</expr></argument>)</argument_list></call> = <name><name>elt</name>-&gt;<name>u</name>.<name>list</name></name></expr>;</expr_stmt></then>
      <else>else <if>if <condition>(<expr>**<name>fmt</name> == '(' &amp;&amp; <name><name>elt</name>-&gt;<name>kind</name></name> == <name>SVN_RA_SVN_LIST</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr>(*<name>fmt</name>)++</expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>vparse_tuple</name><argument_list>(<argument><expr><name><name>elt</name>-&gt;<name>u</name>.<name>list</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else <if>if <condition>(<expr>**<name>fmt</name> == ')'</expr>)</condition><then>
        <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then>
      <else>else
        <break>break;</break></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
    }</block></for>
  <if>if <condition>(<expr>**<name>fmt</name> == '?'</expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>nesting_level</name> = 0</expr>;</expr_stmt>
      <for>for (<init>;</init> <condition><expr>**<name>fmt</name></expr>;</condition> <incr><expr>(*<name>fmt</name>)++</expr></incr>)
        <block>{
          <switch>switch <condition>(<expr>**<name>fmt</name></expr>)</condition>
            <block>{
            <case>case <expr>'?'</expr>:
              <break>break;</break>
            </case><case>case <expr>'r'</expr>:
              <expr_stmt><expr>*<call><name>va_arg</name><argument_list>(<argument><expr>*<name>ap</name></expr></argument>, <argument><expr><name>svn_revnum_t</name> *</expr></argument>)</argument_list></call> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
              <break>break;</break>
            </case><case>case <expr>'s'</expr>:
              <expr_stmt><expr>*<call><name>va_arg</name><argument_list>(<argument><expr>*<name>ap</name></expr></argument>, <argument><expr><name>svn_string_t</name> **</expr></argument>)</argument_list></call> = <name>NULL</name></expr>;</expr_stmt>
              <break>break;</break>
            </case><case>case <expr>'c'</expr>:
            </case><case>case <expr>'w'</expr>:
              <expr_stmt><expr>*<call><name>va_arg</name><argument_list>(<argument><expr>*<name>ap</name></expr></argument>, <argument><expr>const <name>char</name> **</expr></argument>)</argument_list></call> = <name>NULL</name></expr>;</expr_stmt>
              <break>break;</break>
            </case><case>case <expr>'l'</expr>:
              <expr_stmt><expr>*<call><name>va_arg</name><argument_list>(<argument><expr>*<name>ap</name></expr></argument>, <argument><expr><name>apr_array_header_t</name> **</expr></argument>)</argument_list></call> = <name>NULL</name></expr>;</expr_stmt>
              <break>break;</break>
            </case><case>case <expr>'B'</expr>:
            </case><case>case <expr>'n'</expr>:
              <expr_stmt><expr>*<call><name>va_arg</name><argument_list>(<argument><expr>*<name>ap</name></expr></argument>, <argument><expr><name>apr_uint64_t</name> *</expr></argument>)</argument_list></call> = <name>SVN_RA_SVN_UNSPECIFIED_NUMBER</name></expr>;</expr_stmt>
              <break>break;</break>
            </case><case>case <expr>'('</expr>:
              <expr_stmt><expr><name>nesting_level</name>++</expr>;</expr_stmt>
              <break>break;</break>
            </case><case>case <expr>')'</expr>:
              <if>if <condition>(<expr>--<name>nesting_level</name> &lt; 0</expr>)</condition><then>
                <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
              <break>break;</break>
            </case><default>default:
              <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </default>}</block></switch>
        }</block></for>
    }</block></then></if>
  <if>if <condition>(<expr>**<name>fmt</name> &amp;&amp; **<name>fmt</name> != ')'</expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_SVN_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                            <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Malformed network data"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_svn_parse_tuple</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> *</type><name>list</name></decl></param>,
                                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fmt</name></decl></param>, <param><decl><type>...</type></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>err</name> = <call><name>vparse_tuple</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>&amp;<name>fmt</name></expr></argument>, <argument><expr>&amp;<name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_svn_read_tuple</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fmt</name></decl></param>, <param><decl><type>...</type></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra_svn_item_t</name> *</type><name>item</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_read_item</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>&amp;<name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name><name>item</name>-&gt;<name>kind</name></name> != <name>SVN_RA_SVN_LIST</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_SVN_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                            <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Malformed network data"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>err</name> = <call><name>vparse_tuple</name><argument_list>(<argument><expr><name><name>item</name>-&gt;<name>u</name>.<name>list</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>&amp;<name>fmt</name></expr></argument>, <argument><expr>&amp;<name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_svn_parse_proplist</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> *</type><name>list</name></decl></param>,
                                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                       <param><decl><type><name>apr_hash_t</name> **</type><name>props</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>char</name> *</type><name>name</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_string_t</name> *</type><name>value</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra_svn_item_t</name> *</type><name>elt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>props</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>list</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <expr_stmt><expr><name>elt</name> = &amp;<call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_ra_svn_item_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name><name>elt</name>-&gt;<name>kind</name></name> != <name>SVN_RA_SVN_LIST</name></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_SVN_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Proplist element not a list"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_parse_tuple</name><argument_list>(<argument><expr><name><name>elt</name>-&gt;<name>u</name>.<name>list</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"cs"</expr></argument>, <argument><expr>&amp;<name>name</name></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr>*<name>props</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* --- READING AND WRITING COMMANDS AND RESPONSES --- */</comment>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_svn__handle_failure_status</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> *</type><name>params</name></decl></param>,
                                               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>message</name></decl>, *<decl><type ref="prev"/><name>file</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra_svn_item_t</name> *</type><name>elt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_uint64_t</name></type> <name>apr_err</name></decl>, <decl><type ref="prev"/><name>line</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>params</name>-&gt;<name>nelts</name></name> == 0</expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_SVN_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                            <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Empty error list"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <comment type="block">/* Rebuild the error list from the end, to avoid reversing the order. */</comment>
  <for>for (<init><expr><name>i</name> = <name><name>params</name>-&gt;<name>nelts</name></name> - 1</expr>;</init> <condition><expr><name>i</name> &gt;= 0</expr>;</condition> <incr><expr><name>i</name>--</expr></incr>)
    <block>{
      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>elt</name> = &amp;<call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_ra_svn_item_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name><name>elt</name>-&gt;<name>kind</name></name> != <name>SVN_RA_SVN_LIST</name></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_SVN_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Malformed error list"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_parse_tuple</name><argument_list>(<argument><expr><name><name>elt</name>-&gt;<name>u</name>.<name>list</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>, <argument><expr>"nccn"</expr></argument>, <argument><expr>&amp;<name>apr_err</name></expr></argument>,
                                      <argument><expr>&amp;<name>message</name></expr></argument>, <argument><expr>&amp;<name>file</name></expr></argument>, <argument><expr>&amp;<name>line</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* The message field should have been optional, but we can't
         easily change that, so "" means a nonexistent message. */</comment>
      <if>if <condition>(<expr>!*<name>message</name></expr>)</condition><then>
        <expr_stmt><expr><name>message</name> = <name>NULL</name></expr>;</expr_stmt></then></if>
      <expr_stmt><expr><name>err</name> = <call><name>svn_error_create</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>err</name>-&gt;<name>file</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>err</name>-&gt;<name>line</name></name> = <name>line</name></expr>;</expr_stmt>
    }</block></for>

  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_svn_read_cmd_response</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>,
                                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fmt</name></decl></param>, <param><decl><type>...</type></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>status</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>params</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_read_tuple</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"wl"</expr></argument>, <argument><expr>&amp;<name>status</name></expr></argument>, <argument><expr>&amp;<name>params</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr>"success"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>err</name> = <call><name>vparse_tuple</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>&amp;<name>fmt</name></expr></argument>, <argument><expr>&amp;<name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>err</name></expr>;</return>
    }</block></then>
  <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr>"failure"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <block>{
      <return>return <expr><call><name>svn_ra_svn__handle_failure_status</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></else></if>

  <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_SVN_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                           <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Unknown status '%s' in command response"</expr></argument>)</argument_list></call></expr></argument>,
                           <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_svn_handle_commands</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>,
                                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                        <param><decl><type><specifier>const</specifier> <name>svn_ra_svn_cmd_entry_t</name> *</type><name>commands</name></decl></param>,
                                        <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cmdname</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>, *<decl><type ref="prev"/><name>write_err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>params</name></decl>;</decl_stmt>

  <while>while <condition>(<expr>1</expr>)</condition>
    <block>{
      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_read_tuple</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>, <argument><expr>"wl"</expr></argument>, <argument><expr>&amp;<name>cmdname</name></expr></argument>, <argument><expr>&amp;<name>params</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name>.<name>cmdname</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
          <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmdname</name></expr></argument>, <argument><expr><name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name>.<name>cmdname</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
            <break>break;</break></then></if>
        }</block></for>
      <if>if <condition>(<expr><name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name>.<name>cmdname</name></expr>)</condition><then>
        <expr_stmt><expr><name>err</name> = (*<name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name>.<name>handler</name>)(<name>conn</name>, <name>subpool</name>, <name>params</name>, <name>baton</name>)</expr>;</expr_stmt></then>
      <else>else
        <block>{
          <expr_stmt><expr><name>err</name> = <call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_SVN_UNKNOWN_CMD</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                  <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Unknown command '%s'"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cmdname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>err</name> = <call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_SVN_CMD_ERR</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

      <if>if <condition>(<expr><name>err</name> &amp;&amp; <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_RA_SVN_CMD_ERR</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>write_err</name> = <call><name>svn_ra_svn_write_cmd_failure</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>write_err</name></expr>)</condition><then>
            <return>return <expr><name>write_err</name></expr>;</return></then></if>
        }</block></then>
      <else>else <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
        <return>return <expr><name>err</name></expr>;</return></then></if></else></if>

      <if>if <condition>(<expr><name><name>commands</name><index>[<expr><name>i</name></expr>]</index></name>.<name>terminate</name></expr>)</condition><then>
        <break>break;</break></then></if>
    }</block></while>
  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_svn_write_cmd</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cmdname</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fmt</name></decl></param>, <param><decl><type>...</type></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_start_list</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_write_word</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>cmdname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>err</name> = <call><name>vwrite_tuple</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
    <return>return <expr><name>err</name></expr>;</return></then></if>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_end_list</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_svn_write_cmd_response</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>,
                                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fmt</name></decl></param>, <param><decl><type>...</type></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_start_list</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_write_word</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"success"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>err</name> = <call><name>vwrite_tuple</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
    <return>return <expr><name>err</name></expr>;</return></then></if>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_end_list</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_svn_write_cmd_failure</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>,
                                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>svn_error_t</name> *</type><name>err</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_start_list</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_write_word</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"failure"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_start_list</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for (<init>;</init> <condition><expr><name>err</name></expr>;</condition> <incr><expr><name>err</name> = <name><name>err</name>-&gt;<name>child</name></name></expr></incr>)
    <block>{
      <comment type="block">/* The message string should have been optional, but we can't
         easily change that, so marshal nonexistent messages as "". */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_write_tuple</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"nccn"</expr></argument>,
                                     <argument><expr>(<name>apr_uint64_t</name>) <name><name>err</name>-&gt;<name>apr_err</name></name></expr></argument>,
                                     <argument><expr><name><name>err</name>-&gt;<name>message</name></name> ? <name><name>err</name>-&gt;<name>message</name></name> : ""</expr></argument>,
                                     <argument><expr><name><name>err</name>-&gt;<name>file</name></name></expr></argument>, <argument><expr>(<name>apr_uint64_t</name>) <name><name>err</name>-&gt;<name>line</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_end_list</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_end_list</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
