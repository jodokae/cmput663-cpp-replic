<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_ra_svn/editorp.c"><comment type="block">/*
 * editorp.c :  Driving and consuming an editor across an svn connection
 *
 * ====================================================================
 * Copyright (c) 2000-2006 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>


<escape char="0xc"/>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_want.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_general.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_md5.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_delta.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_ra_svn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ra_svn.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Both the client and server in the svn protocol need to drive and
 * consume editors.  For a commit, the client drives and the server
 * consumes; for an update/switch/status/diff, the server drives and
 * the client consumes.  This file provides a generic framework for
 * marshalling and unmarshalling editor operations over an svn
 * connection; both ends are useful for both server and client.
 */</comment>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra_svn_edit_callback</name></type> <name>callback</name></decl>;</decl_stmt>    <comment type="block">/* Called on successful completion. */</comment>
  <decl_stmt><decl><type><name>void</name> *</type><name>callback_baton</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>next_token</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>got_status</name></decl>;</decl_stmt>
}</block></struct></type> <name>ra_svn_edit_baton_t</name>;</typedef>

<comment type="block">/* Works for both directories and files. */</comment>
<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ra_svn_edit_baton_t</name> *</type><name>eb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>token</name></decl>;</decl_stmt>
}</block></struct></type> <name>ra_svn_baton_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>editor</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>edit_baton</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>tokens</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name> *</type><name>aborted</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>done</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>file_pool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>file_refs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>for_replay</name></decl>;</decl_stmt>
}</block></struct></type> <name>ra_svn_driver_state_t</name>;</typedef>

<comment type="block">/* Works for both directories and files; however, the pool handling is
   different for files.  To save space during commits (where file
   batons generally last until the end of the commit), token entries
   for files are all created in a single reference-counted pool (the
   file_pool member of the driver state structure), which is cleared
   at close_file time when the reference count hits zero.  So the pool
   field in this structure is vestigial for files, and we use it for a
   different purpose instead: at apply-textdelta time, we set it to a
   subpool of the file pool, which is destroyed in textdelta-end. */</comment>
<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>token</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>baton</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>is_file</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>dstream</name></decl>;</decl_stmt>  <comment type="block">/* svndiff stream for apply_textdelta */</comment>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
}</block></struct></type> <name>ra_svn_token_entry_t</name>;</typedef>

<comment type="block">/* --- CONSUMING AN EDITOR BY PASSING EDIT OPERATIONS OVER THE NET --- */</comment>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>make_token</name><parameter_list>(<param><decl><type><name>char</name></type> <name>type</name></decl></param>, <param><decl><type><name>ra_svn_edit_baton_t</name> *</type><name>eb</name></decl></param>,
                              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%c%d"</expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>next_token</name></name>++</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>ra_svn_baton_t</name> *</type><name>ra_svn_make_baton</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>,
                                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                         <param><decl><type><name>ra_svn_edit_baton_t</name> *</type><name>eb</name></decl></param>,
                                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>token</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>ra_svn_baton_t</name> *</type><name>b</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>b</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>b</name>-&gt;<name>conn</name></name> = <name>conn</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>b</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>b</name>-&gt;<name>eb</name></name> = <name>eb</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>b</name>-&gt;<name>token</name></name> = <name>token</name></expr>;</expr_stmt>
  <return>return <expr><name>b</name></expr>;</return>
}</block></function>

<comment type="block">/* Check for an early error status report from the consumer.  If we
 * get one, abort the edit and return the error. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>check_for_error</name><parameter_list>(<param><decl><type><name>ra_svn_edit_baton_t</name> *</type><name>eb</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>!<name><name>eb</name>-&gt;<name>got_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>svn_ra_svn__input_waiting</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>conn</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name><name>eb</name>-&gt;<name>got_status</name></name> = <name>TRUE</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_write_cmd</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>conn</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"abort-edit"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_read_cmd_response</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>conn</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* We shouldn't get here if the consumer is doing its job. */</comment>
      <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_SVN_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                              <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Successful edit status returned too soon"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>ra_svn_target_rev</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>, <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>ra_svn_edit_baton_t</name> *</type><name>eb</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_for_error</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_write_cmd</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>conn</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"target-rev"</expr></argument>, <argument><expr>"r"</expr></argument>, <argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>ra_svn_open_root</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>, <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>void</name> **</type><name>root_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>ra_svn_edit_baton_t</name> *</type><name>eb</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>token</name> <init>= <expr><call><name>make_token</name><argument_list>(<argument><expr>'d'</expr></argument>, <argument><expr><name>eb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_for_error</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_write_cmd</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>conn</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"open-root"</expr></argument>, <argument><expr>"(?r)c"</expr></argument>, <argument><expr><name>rev</name></expr></argument>,
                               <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>root_baton</name> = <call><name>ra_svn_make_baton</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>conn</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>eb</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>ra_svn_delete_entry</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                                        <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>ra_svn_baton_t</name> *</type><name>b</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_for_error</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>eb</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_write_cmd</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>conn</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"delete-entry"</expr></argument>, <argument><expr>"c(?r)c"</expr></argument>,
                               <argument><expr><name>path</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>token</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>ra_svn_add_dir</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copy_path</name></decl></param>,
                                   <param><decl><type><name>svn_revnum_t</name></type> <name>copy_rev</name></decl></param>,
                                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>void</name> **</type><name>child_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>ra_svn_baton_t</name> *</type><name>b</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>token</name> <init>= <expr><call><name>make_token</name><argument_list>(<argument><expr>'d'</expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>eb</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>(<name>copy_path</name> &amp;&amp; <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>copy_rev</name></expr></argument>)</argument_list></call>)
         || (!<name>copy_path</name> &amp;&amp; !<call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>copy_rev</name></expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_for_error</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>eb</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_write_cmd</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>conn</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"add-dir"</expr></argument>, <argument><expr>"ccc(?cr)"</expr></argument>, <argument><expr><name>path</name></expr></argument>,
                               <argument><expr><name><name>b</name>-&gt;<name>token</name></name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>copy_path</name></expr></argument>, <argument><expr><name>copy_rev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>child_baton</name> = <call><name>ra_svn_make_baton</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>conn</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>eb</name></name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>ra_svn_open_dir</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
                                    <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                    <param><decl><type><name>void</name> **</type><name>child_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>ra_svn_baton_t</name> *</type><name>b</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>token</name> <init>= <expr><call><name>make_token</name><argument_list>(<argument><expr>'d'</expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>eb</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_for_error</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>eb</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_write_cmd</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>conn</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"open-dir"</expr></argument>, <argument><expr>"ccc(?r)"</expr></argument>,
                               <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>token</name></name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>child_baton</name> = <call><name>ra_svn_make_baton</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>conn</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>eb</name></name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>ra_svn_change_dir_prop</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>dir_baton</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                                           <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
                                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>ra_svn_baton_t</name> *</type><name>b</name> <init>= <expr><name>dir_baton</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_for_error</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>eb</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_write_cmd</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>conn</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"change-dir-prop"</expr></argument>, <argument><expr>"cc(?s)"</expr></argument>,
                               <argument><expr><name><name>b</name>-&gt;<name>token</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>ra_svn_close_dir</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>dir_baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>ra_svn_baton_t</name> *</type><name>b</name> <init>= <expr><name>dir_baton</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_for_error</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>eb</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_write_cmd</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>conn</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"close-dir"</expr></argument>, <argument><expr>"c"</expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>token</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>ra_svn_absent_dir</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                      <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>ra_svn_baton_t</name> *</type><name>b</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Avoid sending an unknown command if the other end doesn't support
     absent-dir. */</comment>
  <if>if <condition>(<expr>! <call><name>svn_ra_svn_has_capability</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>conn</name></name></expr></argument>, <argument><expr><name>SVN_RA_SVN_CAP_ABSENT_ENTRIES</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_for_error</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>eb</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_write_cmd</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>conn</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"absent-dir"</expr></argument>, <argument><expr>"cc"</expr></argument>, <argument><expr><name>path</name></expr></argument>,
                               <argument><expr><name><name>b</name>-&gt;<name>token</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>ra_svn_add_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                    <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copy_path</name></decl></param>,
                                    <param><decl><type><name>svn_revnum_t</name></type> <name>copy_rev</name></decl></param>,
                                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                    <param><decl><type><name>void</name> **</type><name>file_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>ra_svn_baton_t</name> *</type><name>b</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>token</name> <init>= <expr><call><name>make_token</name><argument_list>(<argument><expr>'c'</expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>eb</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>(<name>copy_path</name> &amp;&amp; <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>copy_rev</name></expr></argument>)</argument_list></call>)
         || (!<name>copy_path</name> &amp;&amp; !<call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>copy_rev</name></expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_for_error</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>eb</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_write_cmd</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>conn</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"add-file"</expr></argument>, <argument><expr>"ccc(?cr)"</expr></argument>, <argument><expr><name>path</name></expr></argument>,
                               <argument><expr><name><name>b</name>-&gt;<name>token</name></name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>copy_path</name></expr></argument>, <argument><expr><name>copy_rev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>file_baton</name> = <call><name>ra_svn_make_baton</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>conn</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>eb</name></name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>ra_svn_open_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                     <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
                                     <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                     <param><decl><type><name>void</name> **</type><name>file_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>ra_svn_baton_t</name> *</type><name>b</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>token</name> <init>= <expr><call><name>make_token</name><argument_list>(<argument><expr>'c'</expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>eb</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_for_error</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>eb</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_write_cmd</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>conn</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"open-file"</expr></argument>, <argument><expr>"ccc(?r)"</expr></argument>,
                               <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>token</name></name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>file_baton</name> = <call><name>ra_svn_make_baton</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>conn</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>eb</name></name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>ra_svn_svndiff_handler</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>,
                                           <param><decl><type><name>apr_size_t</name> *</type><name>len</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>ra_svn_baton_t</name> *</type><name>b</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_string_t</name></type> <name>str</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_for_error</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>eb</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>str</name>.<name>data</name></name> = <name>data</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>str</name>.<name>len</name></name> = *<name>len</name></expr>;</expr_stmt>
  <return>return <expr><call><name>svn_ra_svn_write_cmd</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>conn</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"textdelta-chunk"</expr></argument>, <argument><expr>"cs"</expr></argument>,
                              <argument><expr><name><name>b</name>-&gt;<name>token</name></name></expr></argument>, <argument><expr>&amp;<name>str</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>ra_svn_svndiff_close_handler</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>ra_svn_baton_t</name> *</type><name>b</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_for_error</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>eb</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_write_cmd</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>conn</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"textdelta-end"</expr></argument>, <argument><expr>"c"</expr></argument>,
                               <argument><expr><name><name>b</name>-&gt;<name>token</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>ra_svn_apply_textdelta</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
                                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_checksum</name></decl></param>,
                                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                           <param><decl><type><name>svn_txdelta_window_handler_t</name> *</type><name>wh</name></decl></param>,
                                           <param><decl><type><name>void</name> **</type><name>wh_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>ra_svn_baton_t</name> *</type><name>b</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>diff_stream</name></decl>;</decl_stmt>

  <comment type="block">/* Tell the other side we're starting a text delta. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_for_error</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>eb</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_write_cmd</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>conn</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"apply-textdelta"</expr></argument>, <argument><expr>"c(?c)"</expr></argument>,
                               <argument><expr><name><name>b</name>-&gt;<name>token</name></name></expr></argument>, <argument><expr><name>base_checksum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Transform the window stream to an svndiff stream.  Reuse the
   * file baton for the stream handler, since it has all the
   * needed information. */</comment>
  <expr_stmt><expr><name>diff_stream</name> = <call><name>svn_stream_create</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_stream_set_write</name><argument_list>(<argument><expr><name>diff_stream</name></expr></argument>, <argument><expr><name>ra_svn_svndiff_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_stream_set_close</name><argument_list>(<argument><expr><name>diff_stream</name></expr></argument>, <argument><expr><name>ra_svn_svndiff_close_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>svn_ra_svn_has_capability</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>conn</name></name></expr></argument>, <argument><expr><name>SVN_RA_SVN_CAP_SVNDIFF1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <expr_stmt><expr><call><name>svn_txdelta_to_svndiff2</name><argument_list>(<argument><expr><name>wh</name></expr></argument>, <argument><expr><name>wh_baton</name></expr></argument>, <argument><expr><name>diff_stream</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><call><name>svn_txdelta_to_svndiff2</name><argument_list>(<argument><expr><name>wh</name></expr></argument>, <argument><expr><name>wh_baton</name></expr></argument>, <argument><expr><name>diff_stream</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>ra_svn_change_file_prop</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
                                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                                            <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
                                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>ra_svn_baton_t</name> *</type><name>b</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_for_error</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>eb</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_write_cmd</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>conn</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"change-file-prop"</expr></argument>, <argument><expr>"cc(?s)"</expr></argument>,
                               <argument><expr><name><name>b</name>-&gt;<name>token</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>ra_svn_close_file</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
                                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>text_checksum</name></decl></param>,
                                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>ra_svn_baton_t</name> *</type><name>b</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_for_error</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>eb</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_write_cmd</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>conn</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"close-file"</expr></argument>, <argument><expr>"c(?c)"</expr></argument>,
                               <argument><expr><name><name>b</name>-&gt;<name>token</name></name></expr></argument>, <argument><expr><name>text_checksum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>ra_svn_absent_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                       <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>ra_svn_baton_t</name> *</type><name>b</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Avoid sending an unknown command if the other end doesn't support
     absent-file. */</comment>
  <if>if <condition>(<expr>! <call><name>svn_ra_svn_has_capability</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>conn</name></name></expr></argument>, <argument><expr><name>SVN_RA_SVN_CAP_ABSENT_ENTRIES</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_for_error</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>eb</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_write_cmd</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>conn</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"absent-file"</expr></argument>, <argument><expr>"cc"</expr></argument>, <argument><expr><name>path</name></expr></argument>,
                               <argument><expr><name><name>b</name>-&gt;<name>token</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>ra_svn_close_edit</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>ra_svn_edit_baton_t</name> *</type><name>eb</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>!<name><name>eb</name>-&gt;<name>got_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>got_status</name></name> = <name>TRUE</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_write_cmd</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>conn</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"close-edit"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>err</name> = <call><name>svn_ra_svn_read_cmd_response</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>conn</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name>svn_ra_svn_write_cmd</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>conn</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"abort-edit"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>err</name></expr>;</return>
    }</block></then></if>
  <if>if <condition>(<expr><name><name>eb</name>-&gt;<name>callback</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>eb</name>-&gt;<name>callback</name></name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>callback_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>ra_svn_abort_edit</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>ra_svn_edit_baton_t</name> *</type><name>eb</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>eb</name>-&gt;<name>got_status</name></name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_write_cmd</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>conn</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"abort-edit"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_read_cmd_response</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>conn</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>svn_ra_svn_get_editor</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
                           <param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>, <param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                           <param><decl><type><name>svn_ra_svn_edit_callback</name></type> <name>callback</name></decl></param>,
                           <param><decl><type><name>void</name> *</type><name>callback_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_delta_editor_t</name> *</type><name>ra_svn_editor</name> <init>= <expr><call><name>svn_delta_default_editor</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ra_svn_edit_baton_t</name> *</type><name>eb</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>eb</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>eb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>conn</name></name> = <name>conn</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>callback</name></name> = <name>callback</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>callback_baton</name></name> = <name>callback_baton</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>next_token</name></name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>got_status</name></name> = <name>FALSE</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>ra_svn_editor</name>-&gt;<name>set_target_revision</name></name> = <name>ra_svn_target_rev</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ra_svn_editor</name>-&gt;<name>open_root</name></name> = <name>ra_svn_open_root</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ra_svn_editor</name>-&gt;<name>delete_entry</name></name> = <name>ra_svn_delete_entry</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ra_svn_editor</name>-&gt;<name>add_directory</name></name> = <name>ra_svn_add_dir</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ra_svn_editor</name>-&gt;<name>open_directory</name></name> = <name>ra_svn_open_dir</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ra_svn_editor</name>-&gt;<name>change_dir_prop</name></name> = <name>ra_svn_change_dir_prop</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ra_svn_editor</name>-&gt;<name>close_directory</name></name> = <name>ra_svn_close_dir</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ra_svn_editor</name>-&gt;<name>absent_directory</name></name> = <name>ra_svn_absent_dir</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ra_svn_editor</name>-&gt;<name>add_file</name></name> = <name>ra_svn_add_file</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ra_svn_editor</name>-&gt;<name>open_file</name></name> = <name>ra_svn_open_file</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ra_svn_editor</name>-&gt;<name>apply_textdelta</name></name> = <name>ra_svn_apply_textdelta</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ra_svn_editor</name>-&gt;<name>change_file_prop</name></name> = <name>ra_svn_change_file_prop</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ra_svn_editor</name>-&gt;<name>close_file</name></name> = <name>ra_svn_close_file</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ra_svn_editor</name>-&gt;<name>absent_file</name></name> = <name>ra_svn_absent_file</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ra_svn_editor</name>-&gt;<name>close_edit</name></name> = <name>ra_svn_close_edit</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ra_svn_editor</name>-&gt;<name>abort_edit</name></name> = <name>ra_svn_abort_edit</name></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>editor</name> = <name>ra_svn_editor</name></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>edit_baton</name> = <name>eb</name></expr>;</expr_stmt>
}</block></function>

<comment type="block">/* --- DRIVING AN EDITOR --- */</comment>

<comment type="block">/* Store a token entry.  The token string will be copied into pool. */</comment>
<function><type><specifier>static</specifier> <name>ra_svn_token_entry_t</name> *</type><name>store_token</name><parameter_list>(<param><decl><type><name>ra_svn_driver_state_t</name> *</type><name>ds</name></decl></param>,
                                         <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>token</name></decl></param>,
                                         <param><decl><type><name>svn_boolean_t</name></type> <name>is_file</name></decl></param>,
                                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>ra_svn_token_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>entry</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>entry</name>-&gt;<name>token</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>entry</name>-&gt;<name>baton</name></name> = <name>baton</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>entry</name>-&gt;<name>is_file</name></name> = <name>is_file</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>entry</name>-&gt;<name>dstream</name></name> = <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>entry</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>ds</name>-&gt;<name>tokens</name></name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>token</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>entry</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>lookup_token</name><parameter_list>(<param><decl><type><name>ra_svn_driver_state_t</name> *</type><name>ds</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>token</name></decl></param>,
                                 <param><decl><type><name>svn_boolean_t</name></type> <name>is_file</name></decl></param>,
                                 <param><decl><type><name>ra_svn_token_entry_t</name> **</type><name>entry</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>entry</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>ds</name>-&gt;<name>tokens</name></name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!*<name>entry</name> || <name>(*<name>entry</name>)-&gt;<name>is_file</name></name> != <name>is_file</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_SVN_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                            <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Invalid file or dir token during edit"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>ra_svn_handle_target_rev</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>,
                                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                             <param><decl><type><name>apr_array_header_t</name> *</type><name>params</name></decl></param>,
                                             <param><decl><type><name>ra_svn_driver_state_t</name> *</type><name>ds</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_parse_tuple</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"r"</expr></argument>, <argument><expr>&amp;<name>rev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_CMD_ERR</name><argument_list>(<argument><expr><call><name><name>ds</name>-&gt;<name>editor</name>-&gt;<name>set_target_revision</name></name><argument_list>(<argument><expr><name><name>ds</name>-&gt;<name>edit_baton</name></name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>ra_svn_handle_open_root</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>,
                                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                            <param><decl><type><name>apr_array_header_t</name> *</type><name>params</name></decl></param>,
                                            <param><decl><type><name>ra_svn_driver_state_t</name> *</type><name>ds</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>token</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>root_baton</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_parse_tuple</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"(?r)c"</expr></argument>, <argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr>&amp;<name>token</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name><name>ds</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_CMD_ERR</name><argument_list>(<argument><expr><call><name><name>ds</name>-&gt;<name>editor</name>-&gt;<name>open_root</name></name><argument_list>(<argument><expr><name><name>ds</name>-&gt;<name>edit_baton</name></name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>,
                                    <argument><expr>&amp;<name>root_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>store_token</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>root_baton</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>ra_svn_handle_delete_entry</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>,
                                               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                               <param><decl><type><name>apr_array_header_t</name> *</type><name>params</name></decl></param>,
                                               <param><decl><type><name>ra_svn_driver_state_t</name> *</type><name>ds</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>, *<decl><type ref="prev"/><name>token</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ra_svn_token_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_parse_tuple</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"c(?r)c"</expr></argument>, <argument><expr>&amp;<name>path</name></expr></argument>, <argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr>&amp;<name>token</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>lookup_token</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr>&amp;<name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>path</name> = <call><name>svn_path_canonicalize</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_CMD_ERR</name><argument_list>(<argument><expr><call><name><name>ds</name>-&gt;<name>editor</name>-&gt;<name>delete_entry</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>ra_svn_handle_add_dir</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>,
                                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                          <param><decl><type><name>apr_array_header_t</name> *</type><name>params</name></decl></param>,
                                          <param><decl><type><name>ra_svn_driver_state_t</name> *</type><name>ds</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>, *<decl><type ref="prev"/><name>token</name></decl>, *<decl><type ref="prev"/><name>child_token</name></decl>, *<decl><type ref="prev"/><name>copy_path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>copy_rev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ra_svn_token_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>child_baton</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_parse_tuple</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"ccc(?cr)"</expr></argument>, <argument><expr>&amp;<name>path</name></expr></argument>, <argument><expr>&amp;<name>token</name></expr></argument>,
                                 <argument><expr>&amp;<name>child_token</name></expr></argument>, <argument><expr>&amp;<name>copy_path</name></expr></argument>, <argument><expr>&amp;<name>copy_rev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>lookup_token</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr>&amp;<name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>path</name> = <call><name>svn_path_canonicalize</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>copy_path</name></expr>)</condition><then>
    <expr_stmt><expr><name>copy_path</name> = <call><name>svn_path_canonicalize</name><argument_list>(<argument><expr><name>copy_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <expr_stmt><expr><call><name>SVN_CMD_ERR</name><argument_list>(<argument><expr><call><name><name>ds</name>-&gt;<name>editor</name>-&gt;<name>add_directory</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name>copy_path</name></expr></argument>,
                                        <argument><expr><name>copy_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>, <argument><expr>&amp;<name>child_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>store_token</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>child_baton</name></expr></argument>, <argument><expr><name>child_token</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>ra_svn_handle_open_dir</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>,
                                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                           <param><decl><type><name>apr_array_header_t</name> *</type><name>params</name></decl></param>,
                                           <param><decl><type><name>ra_svn_driver_state_t</name> *</type><name>ds</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>, *<decl><type ref="prev"/><name>token</name></decl>, *<decl><type ref="prev"/><name>child_token</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ra_svn_token_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>child_baton</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_parse_tuple</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"ccc(?r)"</expr></argument>, <argument><expr>&amp;<name>path</name></expr></argument>, <argument><expr>&amp;<name>token</name></expr></argument>,
                                 <argument><expr>&amp;<name>child_token</name></expr></argument>, <argument><expr>&amp;<name>rev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>lookup_token</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr>&amp;<name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>path</name> = <call><name>svn_path_canonicalize</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_CMD_ERR</name><argument_list>(<argument><expr><call><name><name>ds</name>-&gt;<name>editor</name>-&gt;<name>open_directory</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>,
                                         <argument><expr>&amp;<name>child_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>store_token</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>child_baton</name></expr></argument>, <argument><expr><name>child_token</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>ra_svn_handle_change_dir_prop</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>,
                                                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                                  <param><decl><type><name>apr_array_header_t</name> *</type><name>params</name></decl></param>,
                                                  <param><decl><type><name>ra_svn_driver_state_t</name> *</type><name>ds</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>token</name></decl>, *<decl><type ref="prev"/><name>name</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_string_t</name> *</type><name>value</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ra_svn_token_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_parse_tuple</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"cc(?s)"</expr></argument>, <argument><expr>&amp;<name>token</name></expr></argument>, <argument><expr>&amp;<name>name</name></expr></argument>,
                                 <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>lookup_token</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr>&amp;<name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_CMD_ERR</name><argument_list>(<argument><expr><call><name><name>ds</name>-&gt;<name>editor</name>-&gt;<name>change_dir_prop</name></name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>,
                                          <argument><expr><name><name>entry</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>ra_svn_handle_close_dir</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>,
                                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                            <param><decl><type><name>apr_array_header_t</name> *</type><name>params</name></decl></param>,
                                            <param><decl><type><name>ra_svn_driver_state_t</name> *</type><name>ds</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>token</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ra_svn_token_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>

  <comment type="block">/* Parse and look up the directory token. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_parse_tuple</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"c"</expr></argument>, <argument><expr>&amp;<name>token</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>lookup_token</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr>&amp;<name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Close the directory and destroy the baton. */</comment>
  <expr_stmt><expr><call><name>SVN_CMD_ERR</name><argument_list>(<argument><expr><call><name><name>ds</name>-&gt;<name>editor</name>-&gt;<name>close_directory</name></name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>ds</name>-&gt;<name>tokens</name></name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>ra_svn_handle_absent_dir</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>,
                                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                             <param><decl><type><name>apr_array_header_t</name> *</type><name>params</name></decl></param>,
                                             <param><decl><type><name>ra_svn_driver_state_t</name> *</type><name>ds</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>token</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ra_svn_token_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>

  <comment type="block">/* Parse parameters and look up the directory token. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_parse_tuple</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"cc"</expr></argument>, <argument><expr>&amp;<name>path</name></expr></argument>, <argument><expr>&amp;<name>token</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>lookup_token</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr>&amp;<name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Call the editor. */</comment>
  <expr_stmt><expr><call><name>SVN_CMD_ERR</name><argument_list>(<argument><expr><call><name><name>ds</name>-&gt;<name>editor</name>-&gt;<name>absent_directory</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>ra_svn_handle_add_file</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>,
                                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                           <param><decl><type><name>apr_array_header_t</name> *</type><name>params</name></decl></param>,
                                           <param><decl><type><name>ra_svn_driver_state_t</name> *</type><name>ds</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>, *<decl><type ref="prev"/><name>token</name></decl>, *<decl><type ref="prev"/><name>file_token</name></decl>, *<decl><type ref="prev"/><name>copy_path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>copy_rev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ra_svn_token_entry_t</name> *</type><name>entry</name></decl>, *<decl><type ref="prev"/><name>file_entry</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_parse_tuple</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"ccc(?cr)"</expr></argument>, <argument><expr>&amp;<name>path</name></expr></argument>, <argument><expr>&amp;<name>token</name></expr></argument>,
                                 <argument><expr>&amp;<name>file_token</name></expr></argument>, <argument><expr>&amp;<name>copy_path</name></expr></argument>, <argument><expr>&amp;<name>copy_rev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>lookup_token</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr>&amp;<name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ds</name>-&gt;<name>file_refs</name></name>++</expr>;</expr_stmt>
  <expr_stmt><expr><name>path</name> = <call><name>svn_path_canonicalize</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>copy_path</name></expr>)</condition><then>
    <expr_stmt><expr><name>copy_path</name> = <call><name>svn_path_canonicalize</name><argument_list>(<argument><expr><name>copy_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <expr_stmt><expr><name>file_entry</name> = <call><name>store_token</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>file_token</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name><name>ds</name>-&gt;<name>file_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_CMD_ERR</name><argument_list>(<argument><expr><call><name><name>ds</name>-&gt;<name>editor</name>-&gt;<name>add_file</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name>copy_path</name></expr></argument>, <argument><expr><name>copy_rev</name></expr></argument>,
                                   <argument><expr><name><name>ds</name>-&gt;<name>file_pool</name></name></expr></argument>, <argument><expr>&amp;<name><name>file_entry</name>-&gt;<name>baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>ra_svn_handle_open_file</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>,
                                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                            <param><decl><type><name>apr_array_header_t</name> *</type><name>params</name></decl></param>,
                                            <param><decl><type><name>ra_svn_driver_state_t</name> *</type><name>ds</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>, *<decl><type ref="prev"/><name>token</name></decl>, *<decl><type ref="prev"/><name>file_token</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ra_svn_token_entry_t</name> *</type><name>entry</name></decl>, *<decl><type ref="prev"/><name>file_entry</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_parse_tuple</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"ccc(?r)"</expr></argument>, <argument><expr>&amp;<name>path</name></expr></argument>, <argument><expr>&amp;<name>token</name></expr></argument>,
                                 <argument><expr>&amp;<name>file_token</name></expr></argument>, <argument><expr>&amp;<name>rev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>lookup_token</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr>&amp;<name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ds</name>-&gt;<name>file_refs</name></name>++</expr>;</expr_stmt>
  <expr_stmt><expr><name>path</name> = <call><name>svn_path_canonicalize</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>file_entry</name> = <call><name>store_token</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>file_token</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name><name>ds</name>-&gt;<name>file_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_CMD_ERR</name><argument_list>(<argument><expr><call><name><name>ds</name>-&gt;<name>editor</name>-&gt;<name>open_file</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name><name>ds</name>-&gt;<name>file_pool</name></name></expr></argument>,
                                    <argument><expr>&amp;<name><name>file_entry</name>-&gt;<name>baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>ra_svn_handle_apply_textdelta</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>,
                                                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                                  <param><decl><type><name>apr_array_header_t</name> *</type><name>params</name></decl></param>,
                                                  <param><decl><type><name>ra_svn_driver_state_t</name> *</type><name>ds</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>token</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ra_svn_token_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_txdelta_window_handler_t</name></type> <name>wh</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>wh_baton</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>base_checksum</name></decl>;</decl_stmt>

  <comment type="block">/* Parse arguments and look up the token. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_parse_tuple</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"c(?c)"</expr></argument>,
                                 <argument><expr>&amp;<name>token</name></expr></argument>, <argument><expr>&amp;<name>base_checksum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>lookup_token</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr>&amp;<name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>dstream</name></name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_SVN_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                            <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Apply-textdelta already active"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
  <expr_stmt><expr><name><name>entry</name>-&gt;<name>pool</name></name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name><name>ds</name>-&gt;<name>file_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_CMD_ERR</name><argument_list>(<argument><expr><call><name><name>ds</name>-&gt;<name>editor</name>-&gt;<name>apply_textdelta</name></name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name>base_checksum</name></expr></argument>,
                                          <argument><expr><name><name>entry</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>wh</name></expr></argument>, <argument><expr>&amp;<name>wh_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>entry</name>-&gt;<name>dstream</name></name> = <call><name>svn_txdelta_parse_svndiff</name><argument_list>(<argument><expr><name>wh</name></expr></argument>, <argument><expr><name>wh_baton</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>ra_svn_handle_textdelta_chunk</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>,
                                                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                                  <param><decl><type><name>apr_array_header_t</name> *</type><name>params</name></decl></param>,
                                                  <param><decl><type><name>ra_svn_driver_state_t</name> *</type><name>ds</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>token</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ra_svn_token_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_string_t</name> *</type><name>str</name></decl>;</decl_stmt>

  <comment type="block">/* Parse arguments and look up the token. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_parse_tuple</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"cs"</expr></argument>, <argument><expr>&amp;<name>token</name></expr></argument>, <argument><expr>&amp;<name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>lookup_token</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr>&amp;<name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name><name>entry</name>-&gt;<name>dstream</name></name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_SVN_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                            <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Apply-textdelta not active"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
  <expr_stmt><expr><call><name>SVN_CMD_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_write</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>dstream</name></name></expr></argument>, <argument><expr><name><name>str</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr>&amp;<name><name>str</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>ra_svn_handle_textdelta_end</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>,
                                                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                                <param><decl><type><name>apr_array_header_t</name> *</type><name>params</name></decl></param>,
                                                <param><decl><type><name>ra_svn_driver_state_t</name> *</type><name>ds</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>token</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ra_svn_token_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>

  <comment type="block">/* Parse arguments and look up the token. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_parse_tuple</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"c"</expr></argument>, <argument><expr>&amp;<name>token</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>lookup_token</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr>&amp;<name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name><name>entry</name>-&gt;<name>dstream</name></name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_SVN_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                            <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Apply-textdelta not active"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
  <expr_stmt><expr><call><name>SVN_CMD_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_close</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>dstream</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>entry</name>-&gt;<name>dstream</name></name> = <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>ra_svn_handle_change_file_prop</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>,
                                                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                                   <param><decl><type><name>apr_array_header_t</name> *</type><name>params</name></decl></param>,
                                                   <param><decl><type><name>ra_svn_driver_state_t</name> *</type><name>ds</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>token</name></decl>, *<decl><type ref="prev"/><name>name</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_string_t</name> *</type><name>value</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ra_svn_token_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_parse_tuple</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"cc(?s)"</expr></argument>, <argument><expr>&amp;<name>token</name></expr></argument>, <argument><expr>&amp;<name>name</name></expr></argument>,
                                 <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>lookup_token</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr>&amp;<name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_CMD_ERR</name><argument_list>(<argument><expr><call><name><name>ds</name>-&gt;<name>editor</name>-&gt;<name>change_file_prop</name></name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>ra_svn_handle_close_file</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>,
                                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                             <param><decl><type><name>apr_array_header_t</name> *</type><name>params</name></decl></param>,
                                             <param><decl><type><name>ra_svn_driver_state_t</name> *</type><name>ds</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>token</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ra_svn_token_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>text_checksum</name></decl>;</decl_stmt>

  <comment type="block">/* Parse arguments and look up the file token. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_parse_tuple</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"c(?c)"</expr></argument>,
                                 <argument><expr>&amp;<name>token</name></expr></argument>, <argument><expr>&amp;<name>text_checksum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>lookup_token</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr>&amp;<name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Close the file and destroy the baton. */</comment>
  <expr_stmt><expr><call><name>SVN_CMD_ERR</name><argument_list>(<argument><expr><call><name><name>ds</name>-&gt;<name>editor</name>-&gt;<name>close_file</name></name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name>text_checksum</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>ds</name>-&gt;<name>tokens</name></name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>--<name><name>ds</name>-&gt;<name>file_refs</name></name> == 0</expr>)</condition><then>
    <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name><name>ds</name>-&gt;<name>file_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>ra_svn_handle_absent_file</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>,
                                              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                              <param><decl><type><name>apr_array_header_t</name> *</type><name>params</name></decl></param>,
                                              <param><decl><type><name>ra_svn_driver_state_t</name> *</type><name>ds</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>token</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ra_svn_token_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>

  <comment type="block">/* Parse parameters and look up the parent directory token. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_parse_tuple</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"cc"</expr></argument>, <argument><expr>&amp;<name>path</name></expr></argument>, <argument><expr>&amp;<name>token</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>lookup_token</name><argument_list>(<argument><expr><name>ds</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr>&amp;<name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Call the editor. */</comment>
  <expr_stmt><expr><call><name>SVN_CMD_ERR</name><argument_list>(<argument><expr><call><name><name>ds</name>-&gt;<name>editor</name>-&gt;<name>absent_file</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>ra_svn_handle_close_edit</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>,
                                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                             <param><decl><type><name>apr_array_header_t</name> *</type><name>params</name></decl></param>,
                                             <param><decl><type><name>ra_svn_driver_state_t</name> *</type><name>ds</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>SVN_CMD_ERR</name><argument_list>(<argument><expr><call><name><name>ds</name>-&gt;<name>editor</name>-&gt;<name>close_edit</name></name><argument_list>(<argument><expr><name><name>ds</name>-&gt;<name>edit_baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ds</name>-&gt;<name>done</name></name> = <name>TRUE</name></expr>;</expr_stmt>
  <if>if <condition>(<expr><name><name>ds</name>-&gt;<name>aborted</name></name></expr>)</condition><then>
    <expr_stmt><expr>*<name><name>ds</name>-&gt;<name>aborted</name></name> = <name>FALSE</name></expr>;</expr_stmt></then></if>
  <return>return <expr><call><name>svn_ra_svn_write_cmd_response</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>ra_svn_handle_abort_edit</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>,
                                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                             <param><decl><type><name>apr_array_header_t</name> *</type><name>params</name></decl></param>,
                                             <param><decl><type><name>ra_svn_driver_state_t</name> *</type><name>ds</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name><name>ds</name>-&gt;<name>done</name></name> = <name>TRUE</name></expr>;</expr_stmt>
  <if>if <condition>(<expr><name><name>ds</name>-&gt;<name>aborted</name></name></expr>)</condition><then>
    <expr_stmt><expr>*<name><name>ds</name>-&gt;<name>aborted</name></name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
  <expr_stmt><expr><call><name>SVN_CMD_ERR</name><argument_list>(<argument><expr><call><name><name>ds</name>-&gt;<name>editor</name>-&gt;<name>abort_edit</name></name><argument_list>(<argument><expr><name><name>ds</name>-&gt;<name>edit_baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>svn_ra_svn_write_cmd_response</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>ra_svn_handle_finish_replay</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>,
                                                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                                <param><decl><type><name>apr_array_header_t</name> *</type><name>params</name></decl></param>,
                                                <param><decl><type><name>ra_svn_driver_state_t</name> *</type><name>ds</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>!<name><name>ds</name>-&gt;<name>for_replay</name></name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name>
      <argument_list>(<argument><expr><name>SVN_ERR_RA_SVN_UNKNOWN_CMD</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
       <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Command 'finish-replay' invalid outside of replays"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
  <expr_stmt><expr><name><name>ds</name>-&gt;<name>done</name></name> = <name>TRUE</name></expr>;</expr_stmt>
  <if>if <condition>(<expr><name><name>ds</name>-&gt;<name>aborted</name></name></expr>)</condition><then>
    <expr_stmt><expr>*<name><name>ds</name>-&gt;<name>aborted</name></name> = <name>FALSE</name></expr>;</expr_stmt></then></if>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cmd</name></decl>;</decl_stmt>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>handler</name>)<parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                          <param><decl><type><name>apr_array_header_t</name> *</type><name>params</name></decl></param>,
                          <param><decl><type><name>ra_svn_driver_state_t</name> *</type><name>ds</name></decl></param>)</parameter_list>;</function_decl>
}</block> <decl><name><name>ra_svn_edit_cmds</name><index>[]</index></name> <init>= <expr><block>{
  <expr><block>{ <expr>"target-rev"</expr>,       <expr><name>ra_svn_handle_target_rev</name></expr> }</block></expr>,
  <expr><block>{ <expr>"open-root"</expr>,        <expr><name>ra_svn_handle_open_root</name></expr> }</block></expr>,
  <expr><block>{ <expr>"delete-entry"</expr>,     <expr><name>ra_svn_handle_delete_entry</name></expr> }</block></expr>,
  <expr><block>{ <expr>"add-dir"</expr>,          <expr><name>ra_svn_handle_add_dir</name></expr> }</block></expr>,
  <expr><block>{ <expr>"open-dir"</expr>,         <expr><name>ra_svn_handle_open_dir</name></expr> }</block></expr>,
  <expr><block>{ <expr>"change-dir-prop"</expr>,  <expr><name>ra_svn_handle_change_dir_prop</name></expr> }</block></expr>,
  <expr><block>{ <expr>"close-dir"</expr>,        <expr><name>ra_svn_handle_close_dir</name></expr> }</block></expr>,
  <expr><block>{ <expr>"absent-dir"</expr>,       <expr><name>ra_svn_handle_absent_dir</name></expr> }</block></expr>,
  <expr><block>{ <expr>"add-file"</expr>,         <expr><name>ra_svn_handle_add_file</name></expr> }</block></expr>,
  <expr><block>{ <expr>"open-file"</expr>,        <expr><name>ra_svn_handle_open_file</name></expr> }</block></expr>,
  <expr><block>{ <expr>"apply-textdelta"</expr>,  <expr><name>ra_svn_handle_apply_textdelta</name></expr> }</block></expr>,
  <expr><block>{ <expr>"textdelta-chunk"</expr>,  <expr><name>ra_svn_handle_textdelta_chunk</name></expr> }</block></expr>,
  <expr><block>{ <expr>"textdelta-end"</expr>,    <expr><name>ra_svn_handle_textdelta_end</name></expr> }</block></expr>,
  <expr><block>{ <expr>"change-file-prop"</expr>, <expr><name>ra_svn_handle_change_file_prop</name></expr> }</block></expr>,
  <expr><block>{ <expr>"close-file"</expr>,       <expr><name>ra_svn_handle_close_file</name></expr> }</block></expr>,
  <expr><block>{ <expr>"absent-file"</expr>,      <expr><name>ra_svn_handle_absent_file</name></expr> }</block></expr>,
  <expr><block>{ <expr>"close-edit"</expr>,       <expr><name>ra_svn_handle_close_edit</name></expr> }</block></expr>,
  <expr><block>{ <expr>"abort-edit"</expr>,       <expr><name>ra_svn_handle_abort_edit</name></expr> }</block></expr>,
  <expr><block>{ <expr>"finish-replay"</expr>,    <expr><name>ra_svn_handle_finish_replay</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>blocked_write</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                  <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>ra_svn_driver_state_t</name> *</type><name>ds</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cmd</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>params</name></decl>;</decl_stmt>

  <comment type="block">/* We blocked trying to send an error.  Read and discard an editing
   * command in order to avoid deadlock. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_read_tuple</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"wl"</expr></argument>, <argument><expr>&amp;<name>cmd</name></expr></argument>, <argument><expr>&amp;<name>params</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>"abort-edit"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name><name>ds</name>-&gt;<name>done</name></name> = <name>TRUE</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>svn_ra_svn__set_block_handler</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_svn_drive_editor2</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>,
                                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                      <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>editor</name></decl></param>,
                                      <param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
                                      <param><decl><type><name>svn_boolean_t</name> *</type><name>aborted</name></decl></param>,
                                      <param><decl><type><name>svn_boolean_t</name></type> <name>for_replay</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>ra_svn_driver_state_t</name></type> <name>state</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cmd</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>, *<decl><type ref="prev"/><name>write_err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>params</name></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>state</name>.<name>editor</name></name> = <name>editor</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>state</name>.<name>edit_baton</name></name> = <name>edit_baton</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>state</name>.<name>tokens</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>state</name>.<name>aborted</name></name> = <name>aborted</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>state</name>.<name>done</name></name> = <name>FALSE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>state</name>.<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>state</name>.<name>file_pool</name></name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>state</name>.<name>file_refs</name></name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>state</name>.<name>for_replay</name></name> = <name>for_replay</name></expr>;</expr_stmt>

  <while>while <condition>(<expr>!<name><name>state</name>.<name>done</name></name></expr>)</condition>
    <block>{
      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_read_tuple</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>, <argument><expr>"wl"</expr></argument>, <argument><expr>&amp;<name>cmd</name></expr></argument>, <argument><expr>&amp;<name>params</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name><name>ra_svn_edit_cmds</name><index>[<expr><name>i</name></expr>]</index></name>.<name>cmd</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
          <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name><name>ra_svn_edit_cmds</name><index>[<expr><name>i</name></expr>]</index></name>.<name>cmd</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
            <break>break;</break></then></if>
        }</block></for>
      <if>if <condition>(<expr><name><name>ra_svn_edit_cmds</name><index>[<expr><name>i</name></expr>]</index></name>.<name>cmd</name></expr>)</condition><then>
        <expr_stmt><expr><name>err</name> = (*<name><name>ra_svn_edit_cmds</name><index>[<expr><name>i</name></expr>]</index></name>.<name>handler</name>)(<name>conn</name>, <name>subpool</name>, <name>params</name>, &amp;<name>state</name>)</expr>;</expr_stmt></then>
      <else>else
        <block>{
          <expr_stmt><expr><name>err</name> = <call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_SVN_UNKNOWN_CMD</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                  <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Unknown command '%s'"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>err</name> = <call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_SVN_CMD_ERR</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

      <if>if <condition>(<expr><name>err</name> &amp;&amp; <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_RA_SVN_CMD_ERR</name></expr>)</condition><then>
        <block>{
          <if>if <condition>(<expr><name>aborted</name></expr>)</condition><then>
            <expr_stmt><expr>*<name>aborted</name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
          <if>if <condition>(<expr>!<name><name>state</name>.<name>done</name></name></expr>)</condition><then>
            <block>{
              <comment type="block">/* Abort the edit and use non-blocking I/O to write the error. */</comment>
              <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name><name>editor</name>-&gt;<name>abort_edit</name></name><argument_list>(<argument><expr><name>edit_baton</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>svn_ra_svn__set_block_handler</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>blocked_write</name></expr></argument>, <argument><expr>&amp;<name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
          <expr_stmt><expr><name>write_err</name> = <call><name>svn_ra_svn_write_cmd_failure</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr>!<name>write_err</name></expr>)</condition><then>
            <expr_stmt><expr><name>write_err</name> = <call><name>svn_ra_svn_flush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
          <expr_stmt><expr><call><name>svn_ra_svn__set_block_handler</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><name>write_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        }</block></then></if>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>

  <comment type="block">/* Read and discard editing commands until the edit is complete.
     Hopefully, the other side will call another editor command, run
     check_for_error, notice the error, write "abort-edit" at us, and
     throw the error up a few levels on its side (possibly even
     tossing it right back at us, which is why we can return
     SVN_NO_ERROR below).

     However, if the other side is way ahead of us, it might
     completely finish the edit (or sequence of edit/revprops, for
     "replay-range") before we send over our "failure".  So we should
     also stop if we see "success".  (Then the other side will try to
     interpret our "failure" as a command, which will itself fail...
     The net effect is that whatever error we wrote to the other side
     will be replaced with SVN_ERR_RA_SVN_UNKNOWN_CMD.)
   */</comment>
  <while>while <condition>(<expr>!<name><name>state</name>.<name>done</name></name></expr>)</condition>
    <block>{
      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_read_tuple</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>, <argument><expr>"wl"</expr></argument>, <argument><expr>&amp;<name>cmd</name></expr></argument>, <argument><expr>&amp;<name>params</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>"abort-edit"</expr></argument>)</argument_list></call> == 0
          || <call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>"success"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <expr_stmt><expr><name><name>state</name>.<name>done</name></name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
    }</block></while>

  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_svn_drive_editor</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>editor</name></decl></param>,
                                     <param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
                                     <param><decl><type><name>svn_boolean_t</name> *</type><name>aborted</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_ra_svn_drive_editor2</name><argument_list>(<argument><expr><name>conn</name></expr></argument>,
                                  <argument><expr><name>pool</name></expr></argument>,
                                  <argument><expr><name>editor</name></expr></argument>,
                                  <argument><expr><name>edit_baton</name></expr></argument>,
                                  <argument><expr><name>aborted</name></expr></argument>,
                                  <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
</unit>
