<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_ra_svn/cram.c"><comment type="block">/*
 * cram.c :  Minimal standalone CRAM-MD5 implementation
 *
 * ====================================================================
 * Copyright (c) 2000-2004 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>


<escape char="0xc"/>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STDIO</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_want.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_general.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_network_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_md5.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_ra_svn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ra_svn.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hex_to_int</name><parameter_list>(<param><decl><type><name>char</name></type> <name>c</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr>(<name>c</name> &gt;= '0' &amp;&amp; <name>c</name> &lt;= '9') ? <name>c</name> - '0'
    : (<name>c</name> &gt;= 'a' &amp;&amp; <name>c</name> &lt;= 'f') ? <name>c</name> - 'a' + 10
    : -1</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>char</name></type> <name>int_to_hex</name><parameter_list>(<param><decl><type><name>int</name></type> <name>v</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr>(<name>v</name> &lt; 10) ? '0' + <name>v</name> : 'a' + (<name>v</name> - 10)</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_boolean_t</name></type> <name>hex_decode</name><parameter_list>(<param><decl><type><name>unsigned</name> <name>char</name> *</type><name>hashval</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>hexval</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>h1</name></decl>, <decl><type ref="prev"/><name>h2</name></decl>;</decl_stmt>

  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>APR_MD5_DIGESTSIZE</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <expr_stmt><expr><name>h1</name> = <call><name>hex_to_int</name><argument_list>(<argument><expr><name><name>hexval</name><index>[<expr>2 * <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>h2</name> = <call><name>hex_to_int</name><argument_list>(<argument><expr><name><name>hexval</name><index>[<expr>2 * <name>i</name> + 1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>h1</name> == -1 || <name>h2</name> == -1</expr>)</condition><then>
        <return>return <expr><name>FALSE</name></expr>;</return></then></if>
      <expr_stmt><expr><name><name>hashval</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>h1</name> &lt;&lt; 4) | <name>h2</name></expr>;</expr_stmt>
    }</block></for>
  <return>return <expr><name>TRUE</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hex_encode</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>hexval</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type><name>hashval</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>APR_MD5_DIGESTSIZE</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <expr_stmt><expr><name><name>hexval</name><index>[<expr>2 * <name>i</name></expr>]</index></name> = <call><name>int_to_hex</name><argument_list>(<argument><expr>(<name><name>hashval</name><index>[<expr><name>i</name></expr>]</index></name> &gt;&gt; 4) &amp; 0xf</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hexval</name><index>[<expr>2 * <name>i</name> + 1</expr>]</index></name> = <call><name>int_to_hex</name><argument_list>(<argument><expr><name><name>hashval</name><index>[<expr><name>i</name></expr>]</index></name> &amp; 0xf</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>compute_digest</name><parameter_list>(<param><decl><type><name>unsigned</name> <name>char</name> *</type><name>digest</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>challenge</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>password</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>secret</name><index>[<expr>64</expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call></expr></init>, <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_md5_ctx_t</name></type> <name>ctx</name></decl>;</decl_stmt>

  <comment type="block">/* Munge the password into a 64-byte secret. */</comment>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>secret</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>secret</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>len</name> &lt;= <sizeof>sizeof<argument_list>(<argument><expr><name>secret</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>secret</name></expr></argument>, <argument><expr><name>password</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><call><name>apr_md5</name><argument_list>(<argument><expr><name>secret</name></expr></argument>, <argument><expr><name>password</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

  <comment type="block">/* Compute MD5(secret XOR opad, MD5(secret XOR ipad, challenge)),
   * where ipad is a string of 0x36 and opad is a string of 0x5c. */</comment>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <sizeof>sizeof<argument_list>(<argument><expr><name>secret</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <expr_stmt><expr><name><name>secret</name><index>[<expr><name>i</name></expr>]</index></name> ^= 0x36</expr>;</expr_stmt></for>
  <expr_stmt><expr><call><name>apr_md5_init</name><argument_list>(<argument><expr>&amp;<name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>apr_md5_update</name><argument_list>(<argument><expr>&amp;<name>ctx</name></expr></argument>, <argument><expr><name>secret</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>secret</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>apr_md5_update</name><argument_list>(<argument><expr>&amp;<name>ctx</name></expr></argument>, <argument><expr><name>challenge</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>challenge</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>apr_md5_final</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr>&amp;<name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <sizeof>sizeof<argument_list>(<argument><expr><name>secret</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <expr_stmt><expr><name><name>secret</name><index>[<expr><name>i</name></expr>]</index></name> ^= (0x36 ^ 0x5c)</expr>;</expr_stmt></for>
  <expr_stmt><expr><call><name>apr_md5_init</name><argument_list>(<argument><expr>&amp;<name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>apr_md5_update</name><argument_list>(<argument><expr>&amp;<name>ctx</name></expr></argument>, <argument><expr><name>secret</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>secret</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>apr_md5_update</name><argument_list>(<argument><expr>&amp;<name>ctx</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><name>APR_MD5_DIGESTSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>apr_md5_final</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr>&amp;<name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/* Fail the authentication, from the server's perspective. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>fail</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_write_tuple</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"w(c)"</expr></argument>, <argument><expr>"failure"</expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>svn_ra_svn_flush</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* If we can, make the nonce with random bytes.  If we can't... well,
 * it just has to be different each time.  The current time isn't
 * absolutely guaranteed to be different for each connection, but it
 * should prevent replay attacks in practice. */</comment>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>make_nonce</name><parameter_list>(<param><decl><type><name>apr_uint64_t</name> *</type><name>nonce</name></decl></param>)</parameter_list>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_RANDOM</name></expr></cpp:if>
  <return>return <expr><call><name>apr_generate_random_bytes</name><argument_list>(<argument><expr>(<name>unsigned</name> <name>char</name> *) <name>nonce</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>nonce</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr>*<name>nonce</name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_svn_cram_server</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                    <param><decl><type><name>svn_config_t</name> *</type><name>pwdb</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>user</name></decl></param>,
                                    <param><decl><type><name>svn_boolean_t</name> *</type><name>success</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_uint64_t</name></type> <name>nonce</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>hostbuf</name><index>[<expr><name>APRMAXHOSTLEN</name> + 1</expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>cdigest</name><index>[<expr><name>APR_MD5_DIGESTSIZE</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>sdigest</name><index>[<expr><name>APR_MD5_DIGESTSIZE</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>challenge</name></decl>, *<decl><type ref="prev"/><name>sep</name></decl>, *<decl><type ref="prev"/><name>password</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra_svn_item_t</name> *</type><name>item</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_string_t</name> *</type><name>resp</name></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>success</name> = <name>FALSE</name></expr>;</expr_stmt>

  <comment type="block">/* Send a challenge. */</comment>
  <expr_stmt><expr><name>status</name> = <call><name>make_nonce</name><argument_list>(<argument><expr>&amp;<name>nonce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>status</name></expr>)</condition><then>
    <expr_stmt><expr><name>status</name> = <call><name>apr_gethostname</name><argument_list>(<argument><expr><name>hostbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hostbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <if>if <condition>(<expr><name>status</name></expr>)</condition><then>
    <return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"Internal server error in authentication"</expr></argument>)</argument_list></call></expr>;</return></then></if>
  <expr_stmt><expr><name>challenge</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
                           <argument><expr>"&lt;%" <name>APR_UINT64_T_FMT</name> ".%" <name>APR_TIME_T_FMT</name> "@%s&gt;"</expr></argument>,
                           <argument><expr><name>nonce</name></expr></argument>, <argument><expr><call><name>apr_time_now</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hostbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_write_tuple</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"w(c)"</expr></argument>, <argument><expr>"step"</expr></argument>, <argument><expr><name>challenge</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Read the client's response and decode it into *user and cdigest. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_read_item</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>&amp;<name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name><name>item</name>-&gt;<name>kind</name></name> != <name>SVN_RA_SVN_STRING</name></expr>)</condition><then>  <comment type="block">/* Very wrong; don't report failure */</comment>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><name>resp</name> = <name><name>item</name>-&gt;<name>u</name>.<name>string</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>sep</name> = <call><name>strrchr</name><argument_list>(<argument><expr><name><name>resp</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr>' '</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>sep</name> || <name><name>resp</name>-&gt;<name>len</name></name> - (<name>sep</name> + 1 - <name><name>resp</name>-&gt;<name>data</name></name>) != <name>APR_MD5_DIGESTSIZE</name> * 2
      || !<call><name>hex_decode</name><argument_list>(<argument><expr><name>cdigest</name></expr></argument>, <argument><expr><name>sep</name> + 1</expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"Malformed client response in authentication"</expr></argument>)</argument_list></call></expr>;</return></then></if>
  <expr_stmt><expr>*<name>user</name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>resp</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>sep</name> - <name><name>resp</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Verify the digest against the password in pwfile. */</comment>
  <expr_stmt><expr><call><name>svn_config_get</name><argument_list>(<argument><expr><name>pwdb</name></expr></argument>, <argument><expr>&amp;<name>password</name></expr></argument>, <argument><expr><name>SVN_CONFIG_SECTION_USERS</name></expr></argument>, <argument><expr>*<name>user</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>password</name></expr>)</condition><then>
    <return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"Username not found"</expr></argument>)</argument_list></call></expr>;</return></then></if>
  <expr_stmt><expr><call><name>compute_digest</name><argument_list>(<argument><expr><name>sdigest</name></expr></argument>, <argument><expr><name>challenge</name></expr></argument>, <argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>cdigest</name></expr></argument>, <argument><expr><name>sdigest</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sdigest</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
    <return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"Password incorrect"</expr></argument>)</argument_list></call></expr>;</return></then></if>

  <expr_stmt><expr>*<name>success</name> = <name>TRUE</name></expr>;</expr_stmt>
  <return>return <expr><call><name>svn_ra_svn_write_tuple</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"w()"</expr></argument>, <argument><expr>"success"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_svn__cram_client</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>user</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>password</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>message</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>status</name></decl>, *<decl><type ref="prev"/><name>str</name></decl>, *<decl><type ref="prev"/><name>reply</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><name>APR_MD5_DIGESTSIZE</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>hex</name><index>[<expr>2 * <name>APR_MD5_DIGESTSIZE</name> + 1</expr>]</index></name></decl>;</decl_stmt>

  <comment type="block">/* Read the server challenge. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_read_tuple</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"w(?c)"</expr></argument>, <argument><expr>&amp;<name>status</name></expr></argument>, <argument><expr>&amp;<name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr>"failure"</expr></argument>)</argument_list></call> == 0 &amp;&amp; <name>str</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr>*<name>message</name> = <name>str</name></expr>;</expr_stmt>
      <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
    }</block></then>
  <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr>"step"</expr></argument>)</argument_list></call> != 0 || !<name>str</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_NOT_AUTHORIZED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                            <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Unexpected server response to authentication"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if></else></if>

  <comment type="block">/* Write our response. */</comment>
  <expr_stmt><expr><call><name>compute_digest</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>hex_encode</name><argument_list>(<argument><expr><name>hex</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hex</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>hex</name></expr></argument>)</argument_list></sizeof> - 1</expr>]</index></name> = '\0'</expr>;</expr_stmt>
  <expr_stmt><expr><name>reply</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s %s"</expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>hex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_write_cstring</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>reply</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Read the success or failure response from the server. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_read_tuple</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"w(?c)"</expr></argument>, <argument><expr>&amp;<name>status</name></expr></argument>, <argument><expr>&amp;<name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr>"failure"</expr></argument>)</argument_list></call> == 0 &amp;&amp; <name>str</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr>*<name>message</name> = <name>str</name></expr>;</expr_stmt>
      <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
    }</block></then>
  <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr>"success"</expr></argument>)</argument_list></call> != 0 || <name>str</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_NOT_AUTHORIZED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                            <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Unexpected server response to authentication"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if></else></if>

  <expr_stmt><expr>*<name>message</name> = <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
