<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_ra_svn/internal_auth.c"><comment type="block">/*
 * simple_auth.c :  Simple SASL-based authentication, used in case
 * Cyrus SASL isn't available.
 *
 * ====================================================================
 * Copyright (c) 2006 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_want.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_general.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_ra.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_ra_svn.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ra_svn.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>svn_boolean_t</name></type> <name>find_mech</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> *</type><name>mechlist</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mech</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra_svn_item_t</name> *</type><name>elt</name></decl>;</decl_stmt>

  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>mechlist</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <expr_stmt><expr><name>elt</name> = &amp;<call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>mechlist</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_ra_svn_item_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name><name>elt</name>-&gt;<name>kind</name></name> == <name>SVN_RA_SVN_WORD</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>elt</name>-&gt;<name>u</name>.<name>word</name></name></expr></argument>, <argument><expr><name>mech</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <return>return <expr><name>TRUE</name></expr>;</return></then></if>
    }</block></for>
  <return>return <expr><name>FALSE</name></expr>;</return>
}</block></function>

<comment type="block">/* Read the "success" response to ANONYMOUS or EXTERNAL authentication. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>read_success</name><parameter_list>(<param><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>status</name></decl>, *<decl><type ref="prev"/><name>arg</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn_read_tuple</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"w(?c)"</expr></argument>, <argument><expr>&amp;<name>status</name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr>"failure"</expr></argument>)</argument_list></call> == 0 &amp;&amp; <name>arg</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_NOT_AUTHORIZED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Authentication error from server: %s"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return></then>
  <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr>"success"</expr></argument>)</argument_list></call> != 0 || <name>arg</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_NOT_AUTHORIZED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                            <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Unexpected server response to authentication"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if></else></if>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_svn__do_internal_auth</name><parameter_list>(<param><decl><type><name>svn_ra_svn__session_baton_t</name> *</type><name>sess</name></decl></param>,
                             <param><decl><type><name>apr_array_header_t</name> *</type><name>mechlist</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_ra_svn_conn_t</name> *</type><name>conn</name> <init>= <expr><name><name>sess</name>-&gt;<name>conn</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realmstring</name></decl>, *<decl><type ref="prev"/><name>user</name></decl>, *<decl><type ref="prev"/><name>password</name></decl>, *<decl><type ref="prev"/><name>msg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_auth_iterstate_t</name> *</type><name>iterstate</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>creds</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>realmstring</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s %s"</expr></argument>, <argument><expr><name><name>sess</name>-&gt;<name>realm_prefix</name></name></expr></argument>, <argument><expr><name>realm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name><name>sess</name>-&gt;<name>is_tunneled</name></name> &amp;&amp; <call><name>find_mech</name><argument_list>(<argument><expr><name>mechlist</name></expr></argument>, <argument><expr>"EXTERNAL"</expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
        <comment type="block">/* Ask the server to use the tunnel connection environment (on
        * Unix, that means uid) to determine the authentication name. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn__auth_response</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"EXTERNAL"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name>read_success</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then>
  <else>else <if>if <condition>(<expr><call><name>find_mech</name><argument_list>(<argument><expr><name>mechlist</name></expr></argument>, <argument><expr>"ANONYMOUS"</expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn__auth_response</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"ANONYMOUS"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name>read_success</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then>
  <else>else <if>if <condition>(<expr><call><name>find_mech</name><argument_list>(<argument><expr><name>mechlist</name></expr></argument>, <argument><expr>"CRAM-MD5"</expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_auth_first_credentials</name><argument_list>(<argument><expr>&amp;<name>creds</name></expr></argument>, <argument><expr>&amp;<name>iterstate</name></expr></argument>,
                                        <argument><expr><name>SVN_AUTH_CRED_SIMPLE</name></expr></argument>, <argument><expr><name>realmstring</name></expr></argument>,
                                        <argument><expr><name><name>sess</name>-&gt;<name>callbacks</name>-&gt;<name>auth_baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr>!<name>creds</name></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_NOT_AUTHORIZED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Can't get password"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
      <while>while <condition>(<expr><name>creds</name></expr>)</condition>
        <block>{
          <expr_stmt><expr><name>user</name> = ((<name>svn_auth_cred_simple_t</name> *) <name>creds</name>)-&gt;<name>username</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>password</name> = ((<name>svn_auth_cred_simple_t</name> *) <name>creds</name>)-&gt;<name>password</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn__auth_response</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"CRAM-MD5"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_svn__cram_client</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>password</name></expr></argument>, <argument><expr>&amp;<name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr>!<name>msg</name></expr>)</condition><then>
            <break>break;</break></then></if>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_auth_next_credentials</name><argument_list>(<argument><expr>&amp;<name>creds</name></expr></argument>, <argument><expr><name>iterstate</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
      <if>if <condition>(<expr>!<name>creds</name></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_NOT_AUTHORIZED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Authentication error from server: %s"</expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_auth_save_credentials</name><argument_list>(<argument><expr><name>iterstate</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
    }</block></then>
  <else>else
    <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_SVN_NO_MECHANISMS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></else></if></else></if></else></if>
}</block></function>
</unit>
