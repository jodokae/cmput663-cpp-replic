<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_ra_serf/getdate.c"><comment type="block">/*
 * getdate.c :  entry point for get_dated_revision for ra_serf
 *
 * ====================================================================
 * Copyright (c) 2006-2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>


<escape char="0xc"/>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_uri.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;expat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;serf.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_ra.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_dav.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_xml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libsvn_ra/ra_loader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_delta.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_time.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_dav_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ra_serf.h"</cpp:file></cpp:include>

<escape char="0xc"/>
<comment type="block">/*
 * This enum represents the current state of our XML parsing for a REPORT.
 */</comment>
<typedef>typedef <type><enum>enum <block>{
  <decl><name>NONE</name> <init>= <expr>0</expr></init></decl>,
  <decl><name>VERSION_NAME</name></decl>,
}</block></enum></type> <name>date_state_e</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
  <comment type="block">/* The currently collected value as we build it up */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_size_t</name></type> <name>tmp_len</name></decl>;</decl_stmt>
}</block></struct></type> <name>date_info_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>

  <comment type="block">/* The time asked about. */</comment>
  <decl_stmt><decl><type><name>apr_time_t</name></type> <name>time</name></decl>;</decl_stmt>

  <comment type="block">/* What was the youngest revision at that time? */</comment>
  <decl_stmt><decl><type><name>svn_revnum_t</name> *</type><name>revision</name></decl>;</decl_stmt>

  <comment type="block">/* are we done? */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>done</name></decl>;</decl_stmt>

}</block></struct></type> <name>date_context_t</name>;</typedef>

<escape char="0xc"/>
<function><type><specifier>static</specifier> <name>date_info_t</name> *</type>
<name>push_state</name><parameter_list>(<param><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser</name></decl></param>,
           <param><decl><type><name>date_context_t</name> *</type><name>date_ctx</name></decl></param>,
           <param><decl><type><name>date_state_e</name></type> <name>state</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>svn_ra_serf__xml_push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>state</name> == <name>VERSION_NAME</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>date_info_t</name> *</type><name>info</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>info</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>private</name></name> = <name>info</name></expr>;</expr_stmt>
    }</block></then></if>

  <return>return <expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>private</name></name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>start_getdate</name><parameter_list>(<param><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser</name></decl></param>,
              <param><decl><type><name>void</name> *</type><name>userData</name></decl></param>,
              <param><decl><type><name>svn_ra_serf__dav_props_t</name></type> <name>name</name></decl></param>,
              <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>attrs</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>date_context_t</name> *</type><name>date_ctx</name> <init>= <expr><name>userData</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>date_state_e</name></type> <name>state</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>state</name> = <name><name>parser</name>-&gt;<name>state</name>-&gt;<name>current_state</name></name></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>state</name> == <name>NONE</name> &amp;&amp;
      <call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr><name>SVN_DAV__VERSION_NAME</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>date_ctx</name></expr></argument>, <argument><expr><name>VERSION_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>end_getdate</name><parameter_list>(<param><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser</name></decl></param>,
            <param><decl><type><name>void</name> *</type><name>userData</name></decl></param>,
            <param><decl><type><name>svn_ra_serf__dav_props_t</name></type> <name>name</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>date_context_t</name> *</type><name>date_ctx</name> <init>= <expr><name>userData</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>date_state_e</name></type> <name>state</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>date_info_t</name> *</type><name>info</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>state</name> = <name><name>parser</name>-&gt;<name>state</name>-&gt;<name>current_state</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>info</name> = <name><name>parser</name>-&gt;<name>state</name>-&gt;<name>private</name></name></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>state</name> == <name>VERSION_NAME</name> &amp;&amp;
      <call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr><name>SVN_DAV__VERSION_NAME</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <block>{
      <expr_stmt><expr>*<name><name>date_ctx</name>-&gt;<name>revision</name></name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>tmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>svn_ra_serf__xml_pop_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>cdata_getdate</name><parameter_list>(<param><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser</name></decl></param>,
              <param><decl><type><name>void</name> *</type><name>userData</name></decl></param>,
              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>,
              <param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>date_context_t</name> *</type><name>date_ctx</name> <init>= <expr><name>userData</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>date_state_e</name></type> <name>state</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>date_info_t</name> *</type><name>info</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>UNUSED_CTX</name><argument_list>(<argument><expr><name>date_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>state</name> = <name><name>parser</name>-&gt;<name>state</name>-&gt;<name>current_state</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>info</name> = <name><name>parser</name>-&gt;<name>state</name>-&gt;<name>private</name></name></expr>;</expr_stmt>

  <switch>switch <condition>(<expr><name>state</name></expr>)</condition>
    <block>{
    <case>case <expr><name>VERSION_NAME</name></expr>:
        <expr_stmt><expr><call><name>svn_ra_serf__expand_string</name><argument_list>(<argument><expr>&amp;<name><name>info</name>-&gt;<name>tmp</name></name></expr></argument>, <argument><expr>&amp;<name><name>info</name>-&gt;<name>tmp_len</name></name></expr></argument>,
                                   <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </case><default>default:
        <break>break;</break>
    </default>}</block></switch>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETDATE_HEADER</name></cpp:macro> <cpp:value>"&lt;S:dated-rev-report xmlns:S=\"" SVN_XML_NAMESPACE "\" xmlns:D=\"DAV:\"&gt;"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETDATE_FOOTER</name></cpp:macro> <cpp:value>"&lt;/S:dated-rev-report&gt;"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>serf_bucket_t</name>*</type>
<name>create_getdate_body</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                    <param><decl><type><name>serf_bucket_alloc_t</name> *</type><name>alloc</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>serf_bucket_t</name> *</type><name>buckets</name></decl>, *<decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>date_context_t</name> *</type><name>date_ctx</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>buckets</name> = <call><name>serf_bucket_aggregate_create</name><argument_list>(<argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr><name>GETDATE_HEADER</name></expr></argument>,
                                      <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GETDATE_HEADER</name></expr></argument>)</argument_list></sizeof> - 1</expr></argument>,
                                      <argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name>buckets</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>svn_ra_serf__add_tag_buckets</name><argument_list>(<argument><expr><name>buckets</name></expr></argument>,
                               <argument><expr>"D:" <name>SVN_DAV__CREATIONDATE</name></expr></argument>,
                               <argument><expr><call><name>svn_time_to_cstring</name><argument_list>(<argument><expr><name><name>date_ctx</name>-&gt;<name>time</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr><name>GETDATE_FOOTER</name></expr></argument>,
                                      <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GETDATE_FOOTER</name></expr></argument>)</argument_list></sizeof>-1</expr></argument>,
                                      <argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name>buckets</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>buckets</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__get_dated_revision</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
                                <param><decl><type><name>svn_revnum_t</name> *</type><name>revision</name></decl></param>,
                                <param><decl><type><name>apr_time_t</name></type> <name>tm</name></decl></param>,
                                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>date_context_t</name> *</type><name>date_ctx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name> <init>= <expr><name><name>ra_session</name>-&gt;<name>priv</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra_serf__handler_t</name> *</type><name>handler</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser_ctx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>vcc_url</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>status_code</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>date_ctx</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>date_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>date_ctx</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>date_ctx</name>-&gt;<name>time</name></name> = <name>tm</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>date_ctx</name>-&gt;<name>revision</name></name> = <name>revision</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>date_ctx</name>-&gt;<name>done</name></name> = <name>FALSE</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_serf__discover_root</name><argument_list>(<argument><expr>&amp;<name>vcc_url</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                     <argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name></expr></argument>,
                                     <argument><expr><name><name>session</name>-&gt;<name>repos_url</name>.<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>handler</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>handler</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>handler</name>-&gt;<name>method</name></name> = "REPORT"</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>handler</name>-&gt;<name>path</name></name> = <name>vcc_url</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>handler</name>-&gt;<name>body_type</name></name> = "text/xml"</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>handler</name>-&gt;<name>conn</name></name> = <name><name>session</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>handler</name>-&gt;<name>session</name></name> = <name>session</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>parser_ctx</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>parser_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>user_data</name></name> = <name>date_ctx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>start</name></name> = <name>start_getdate</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>end</name></name> = <name>end_getdate</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>cdata</name></name> = <name>cdata_getdate</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>done</name></name> = &amp;<name><name>date_ctx</name>-&gt;<name>done</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>status_code</name></name> = &amp;<name>status_code</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>handler</name>-&gt;<name>body_delegate</name></name> = <name>create_getdate_body</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>handler</name>-&gt;<name>body_delegate_baton</name></name> = <name>date_ctx</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>handler</name>-&gt;<name>response_handler</name></name> = <name>svn_ra_serf__handle_xml_parser</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>handler</name>-&gt;<name>response_baton</name></name> = <name>parser_ctx</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>svn_ra_serf__request_create</name><argument_list>(<argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name><name>date_ctx</name>-&gt;<name>revision</name></name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_serf__context_run_wait</name><argument_list>(<argument><expr>&amp;<name><name>date_ctx</name>-&gt;<name>done</name></name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
