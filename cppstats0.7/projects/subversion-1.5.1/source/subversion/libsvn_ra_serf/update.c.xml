<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_ra_serf/update.c"><comment type="block">/*
 * update.c :  entry point for update RA functions for ra_serf
 *
 * ====================================================================
 * Copyright (c) 2006 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>


<escape char="0xc"/>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_want.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_uri.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;expat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;serf.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_ra.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_dav.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_xml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libsvn_ra/ra_loader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_delta.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_base64.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ra_serf.h"</cpp:file></cpp:include>

<escape char="0xc"/>
<comment type="block">/*
 * This enum represents the current state of our XML parsing for a REPORT.
 *
 * A little explanation of how the parsing works.  Every time we see
 * an open-directory tag, we enter the OPEN_DIR state.  Likewise, for
 * add-directory, open-file, etc.  When we see the closing variant of the
 * open-directory tag, we'll 'pop' out of that state.
 *
 * Each state has a pool associated with it that can have temporary
 * allocations that will live as long as the tag is opened.  Once
 * the tag is 'closed', the pool will be reused.
 */</comment>
<typedef>typedef <type><enum>enum <block>{
    <decl><name>NONE</name> <init>= <expr>0</expr></init></decl>,
    <decl><name>OPEN_DIR</name></decl>,
    <decl><name>ADD_DIR</name></decl>,
    <decl><name>OPEN_FILE</name></decl>,
    <decl><name>ADD_FILE</name></decl>,
    <decl><name>PROP</name></decl>,
    <decl><name>IGNORE_PROP_NAME</name></decl>,
    <decl><name>NEED_PROP_NAME</name></decl>,
}</block></enum></type> <name>report_state_e</name>;</typedef>

<comment type="block">/* Forward-declare our report context. */</comment>
<typedef>typedef <type>struct <name>report_context_t</name></type> <name>report_context_t</name>;</typedef>

<comment type="block">/*
 * This structure represents the information for a directory.
 */</comment>
<typedef>typedef <type><struct>struct <name>report_dir_t</name>
<block>{
  <comment type="block">/* Our parent directory.
   *
   * This value is NULL when we are the root.
   */</comment>
  <decl_stmt><decl><type>struct <name>report_dir_t</name> *</type><name>parent_dir</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>

  <comment type="block">/* Pointer back to our original report context. */</comment>
  <decl_stmt><decl><type><name>report_context_t</name> *</type><name>report_context</name></decl>;</decl_stmt>

  <comment type="block">/* Our name sans any parents. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_name</name></decl>;</decl_stmt>

  <comment type="block">/* the expanded directory name (including all parent names) */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>

  <comment type="block">/* temporary path buffer for this directory. */</comment>
  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>name_buf</name></decl>;</decl_stmt>

  <comment type="block">/* the canonical url for this directory. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl>;</decl_stmt>

  <comment type="block">/* Our base revision - SVN_INVALID_REVNUM if we're adding this dir. */</comment>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>base_rev</name></decl>;</decl_stmt>

  <comment type="block">/* The target revision we're retrieving. */</comment>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>target_rev</name></decl>;</decl_stmt>

  <comment type="block">/* controlling dir baton - this is only created in open_dir() */</comment>
  <decl_stmt><decl><type><name>void</name> *</type><name>dir_baton</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>dir_baton_pool</name></decl>;</decl_stmt>

  <comment type="block">/* Our master update editor and baton. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>update_editor</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>update_baton</name></decl>;</decl_stmt>

  <comment type="block">/* How many references to this directory do we still have open? */</comment>
  <decl_stmt><decl><type><name>apr_size_t</name></type> <name>ref_count</name></decl>;</decl_stmt>

  <comment type="block">/* Namespace list allocated out of this -&gt;pool. */</comment>
  <decl_stmt><decl><type><name>svn_ra_serf__ns_t</name> *</type><name>ns_list</name></decl>;</decl_stmt>

  <comment type="block">/* hashtable for all of the properties (shared within a dir) */</comment>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl>;</decl_stmt>

  <comment type="block">/* hashtable for all to-be-removed properties (shared within a dir) */</comment>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>removed_props</name></decl>;</decl_stmt>

  <comment type="block">/* The propfind request for our current directory */</comment>
  <decl_stmt><decl><type><name>svn_ra_serf__propfind_context_t</name> *</type><name>propfind</name></decl>;</decl_stmt>

  <comment type="block">/* Has the server told us to fetch the dir props? */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>fetch_props</name></decl>;</decl_stmt>

  <comment type="block">/* Have we closed the directory tag (meaning no more additions)? */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>tag_closed</name></decl>;</decl_stmt>

  <comment type="block">/* The children of this directory  */</comment>
  <decl_stmt><decl><type>struct <name>report_dir_t</name> *</type><name>children</name></decl>;</decl_stmt>

  <comment type="block">/* The next sibling of this directory */</comment>
  <decl_stmt><decl><type>struct <name>report_dir_t</name> *</type><name>sibling</name></decl>;</decl_stmt>
}</block></struct></type> <name>report_dir_t</name>;</typedef>

<comment type="block">/*
 * This structure represents the information for a file.
 *
 * A directory may have a report_info_t associated with it as well.
 *
 * This structure is created as we parse the REPORT response and
 * once the element is completed, we create a report_fetch_t structure
 * to give to serf to retrieve this file.
 */</comment>
<typedef>typedef <type><struct>struct <name>report_info_t</name>
<block>{
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>

  <comment type="block">/* The enclosing directory.
   *
   * If this structure refers to a directory, the dir it points to will be
   * itself.
   */</comment>
  <decl_stmt><decl><type><name>report_dir_t</name> *</type><name>dir</name></decl>;</decl_stmt>

  <comment type="block">/* Our name sans any directory info. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_name</name></decl>;</decl_stmt>

  <comment type="block">/* the expanded file name (including all parent directory names) */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>

  <comment type="block">/* file name buffer */</comment>
  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>name_buf</name></decl>;</decl_stmt>

  <comment type="block">/* the canonical url for this file. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl>;</decl_stmt>

  <comment type="block">/* lock token, if we had one to start off with. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lock_token</name></decl>;</decl_stmt>

  <comment type="block">/* Our base revision - SVN_INVALID_REVNUM if we're adding this file. */</comment>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>base_rev</name></decl>;</decl_stmt>

  <comment type="block">/* The target revision we're retrieving. */</comment>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>target_rev</name></decl>;</decl_stmt>

  <comment type="block">/* our delta base, if present (NULL if we're adding the file) */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>delta_base</name></decl>;</decl_stmt>

  <comment type="block">/* Path of original item if add with history */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl>;</decl_stmt>

  <comment type="block">/* Revision of original item if add with history */</comment>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_rev</name></decl>;</decl_stmt>

  <comment type="block">/* The propfind request for our current file (if present) */</comment>
  <decl_stmt><decl><type><name>svn_ra_serf__propfind_context_t</name> *</type><name>propfind</name></decl>;</decl_stmt>

  <comment type="block">/* Has the server told us to fetch the file props? */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>fetch_props</name></decl>;</decl_stmt>

  <comment type="block">/* Has the server told us to go fetch - only valid if we had it already */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>fetch_file</name></decl>;</decl_stmt>

  <comment type="block">/* The properties for this file */</comment>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl>;</decl_stmt>

  <comment type="block">/* pool passed to update-&gt;add_file, etc. */</comment>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>editor_pool</name></decl>;</decl_stmt>

  <comment type="block">/* controlling file_baton and textdelta handler */</comment>
  <decl_stmt><decl><type><name>void</name> *</type><name>file_baton</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_txdelta_window_handler_t</name></type> <name>textdelta</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>textdelta_baton</name></decl>;</decl_stmt>

  <comment type="block">/* temporary property for this file which is currently being parsed
   * It will eventually be stored in our parent directory's property hash.
   */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prop_ns</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prop_name</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prop_val</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_size_t</name></type> <name>prop_val_len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prop_encoding</name></decl>;</decl_stmt>
}</block></struct></type> <name>report_info_t</name>;</typedef>

<comment type="block">/*
 * This structure represents a single request to GET (fetch) a file with
 * its associated Serf session/connection.
 */</comment>
<typedef>typedef <type><struct>struct <name>report_fetch_t</name> <block>{
  <comment type="block">/* Our pool. */</comment>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>

  <comment type="block">/* Non-NULL if we received an error during processing. */</comment>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

  <comment type="block">/* The session we should use to fetch the file. */</comment>
  <decl_stmt><decl><type><name>svn_ra_serf__session_t</name> *</type><name>sess</name></decl>;</decl_stmt>

  <comment type="block">/* The connection we should use to fetch file. */</comment>
  <decl_stmt><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>conn</name></decl>;</decl_stmt>

  <comment type="block">/* Stores the information for the file we want to fetch. */</comment>
  <decl_stmt><decl><type><name>report_info_t</name> *</type><name>info</name></decl>;</decl_stmt>

  <comment type="block">/* Have we read our response headers yet? */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>read_headers</name></decl>;</decl_stmt>

  <comment type="block">/* This flag is set when our response is aborted before we reach the
   * end and we decide to requeue this request.
   */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>aborted_read</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_off_t</name></type> <name>aborted_read_size</name></decl>;</decl_stmt>

  <comment type="block">/* This is the amount of data that we have read so far. */</comment>
  <decl_stmt><decl><type><name>apr_off_t</name></type> <name>read_size</name></decl>;</decl_stmt>

  <comment type="block">/* If we're receiving an svndiff, this will be non-NULL. */</comment>
  <decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>delta_stream</name></decl>;</decl_stmt>

  <comment type="block">/* If we're writing this file to a stream, this will be non-NULL. */</comment>
  <decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>target_stream</name></decl>;</decl_stmt>

  <comment type="block">/* Are we done fetching this file? */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>done</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra_serf__list_t</name> **</type><name>done_list</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra_serf__list_t</name></type> <name>done_item</name></decl>;</decl_stmt>

}</block></struct></type> <name>report_fetch_t</name>;</typedef>

<comment type="block">/*
 * The master structure for a REPORT request and response.
 */</comment>
<struct>struct <name>report_context_t</name> <block>{
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>svn_ra_serf__session_t</name> *</type><name>sess</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>conn</name></decl>;</decl_stmt>

  <comment type="block">/* Source path and destination path */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>source</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>destination</name></decl>;</decl_stmt>

  <comment type="block">/* Our update target. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>update_target</name></decl>;</decl_stmt>

  <comment type="block">/* What is the target revision that we want for this REPORT? */</comment>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>target_rev</name></decl>;</decl_stmt>

  <comment type="block">/* Have we been asked to ignore ancestry or textdeltas? */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>text_deltas</name></decl>;</decl_stmt>

  <comment type="block">/* Do we want the server to send copyfrom args or not? */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>send_copyfrom_args</name></decl>;</decl_stmt>

  <comment type="block">/* Path -&gt; lock token mapping. */</comment>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>lock_path_tokens</name></decl>;</decl_stmt>

  <comment type="block">/* Our master update editor and baton. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>update_editor</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>update_baton</name></decl>;</decl_stmt>

  <comment type="block">/* The request body for the REPORT. */</comment>
  <decl_stmt><decl><type><name>serf_bucket_t</name> *</type><name>buckets</name></decl>;</decl_stmt>

  <comment type="block">/* root directory object */</comment>
  <decl_stmt><decl><type><name>report_dir_t</name> *</type><name>root_dir</name></decl>;</decl_stmt>

  <comment type="block">/* number of pending GET requests */</comment>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>active_fetches</name></decl>;</decl_stmt>

  <comment type="block">/* completed fetches (contains report_fetch_t) */</comment>
  <decl_stmt><decl><type><name>svn_ra_serf__list_t</name> *</type><name>done_fetches</name></decl>;</decl_stmt>

  <comment type="block">/* number of pending PROPFIND requests */</comment>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>active_propfinds</name></decl>;</decl_stmt>

  <comment type="block">/* completed PROPFIND requests (contains propfind_context_t) */</comment>
  <decl_stmt><decl><type><name>svn_ra_serf__list_t</name> *</type><name>done_propfinds</name></decl>;</decl_stmt>

  <comment type="block">/* list of files that only have prop changes (contains report_info_t) */</comment>
  <decl_stmt><decl><type><name>svn_ra_serf__list_t</name> *</type><name>file_propchanges_only</name></decl>;</decl_stmt>

  <comment type="block">/* The path to the REPORT request */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>

  <comment type="block">/* Are we done parsing the REPORT response? */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>done</name></decl>;</decl_stmt>

}</block>;</struct>

<escape char="0xc"/>
<comment type="block">/** Report state management helper **/</comment>

<function><type><specifier>static</specifier> <name>report_info_t</name> *</type>
<name>push_state</name><parameter_list>(<param><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser</name></decl></param>,
           <param><decl><type><name>report_context_t</name> *</type><name>ctx</name></decl></param>,
           <param><decl><type><name>report_state_e</name></type> <name>state</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>report_info_t</name> *</type><name>info</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>info_parent_pool</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>svn_ra_serf__xml_push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>info</name> = <name><name>parser</name>-&gt;<name>state</name>-&gt;<name>private</name></name></expr>;</expr_stmt>

  <comment type="block">/* Our private pool needs to be disjoint from the state pool. */</comment>
  <if>if <condition>(<expr>!<name>info</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>info_parent_pool</name> = <name><name>ctx</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <expr_stmt><expr><name>info_parent_pool</name> = <name><name>info</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
    }</block></else></if>

  <if>if <condition>(<expr><name>state</name> == <name>OPEN_DIR</name> || <name>state</name> == <name>ADD_DIR</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>report_info_t</name> *</type><name>new_info</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>new_info</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>info_parent_pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>new_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name><name>new_info</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>info_parent_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>new_info</name>-&gt;<name>lock_token</name></name> = <name>NULL</name></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>new_info</name>-&gt;<name>dir</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>new_info</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name><name>new_info</name>-&gt;<name>dir</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>new_info</name>-&gt;<name>dir</name>-&gt;<name>pool</name></name> = <name><name>new_info</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>

      <comment type="block">/* Create the root property tree. */</comment>
      <expr_stmt><expr><name><name>new_info</name>-&gt;<name>dir</name>-&gt;<name>props</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name><name>new_info</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>new_info</name>-&gt;<name>props</name></name> = <name><name>new_info</name>-&gt;<name>dir</name>-&gt;<name>props</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>new_info</name>-&gt;<name>dir</name>-&gt;<name>removed_props</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name><name>new_info</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Point to the update_editor */</comment>
      <expr_stmt><expr><name><name>new_info</name>-&gt;<name>dir</name>-&gt;<name>update_editor</name></name> = <name><name>ctx</name>-&gt;<name>update_editor</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>new_info</name>-&gt;<name>dir</name>-&gt;<name>update_baton</name></name> = <name><name>ctx</name>-&gt;<name>update_baton</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>new_info</name>-&gt;<name>dir</name>-&gt;<name>report_context</name></name> = <name>ctx</name></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>info</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>ref_count</name></name>++</expr>;</expr_stmt>

          <expr_stmt><expr><name><name>new_info</name>-&gt;<name>dir</name>-&gt;<name>parent_dir</name></name> = <name><name>info</name>-&gt;<name>dir</name></name></expr>;</expr_stmt>

          <comment type="block">/* Point our ns_list at our parents to try to reuse it. */</comment>
          <expr_stmt><expr><name><name>new_info</name>-&gt;<name>dir</name>-&gt;<name>ns_list</name></name> = <name><name>info</name>-&gt;<name>dir</name>-&gt;<name>ns_list</name></name></expr>;</expr_stmt>

          <comment type="block">/* Add ourselves to our parent's list */</comment>
          <expr_stmt><expr><name><name>new_info</name>-&gt;<name>dir</name>-&gt;<name>sibling</name></name> = <name><name>info</name>-&gt;<name>dir</name>-&gt;<name>children</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>children</name></name> = <name><name>new_info</name>-&gt;<name>dir</name></name></expr>;</expr_stmt>
        }</block></then>
      <else>else
        <block>{
          <comment type="block">/* Allow us to be found later. */</comment>
          <expr_stmt><expr><name><name>ctx</name>-&gt;<name>root_dir</name></name> = <name><name>new_info</name>-&gt;<name>dir</name></name></expr>;</expr_stmt>
        }</block></else></if>

      <expr_stmt><expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>private</name></name> = <name>new_info</name></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>state</name> == <name>OPEN_FILE</name> || <name>state</name> == <name>ADD_FILE</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>report_info_t</name> *</type><name>new_info</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>new_info</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>info_parent_pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>new_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name><name>new_info</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>info_parent_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>new_info</name>-&gt;<name>file_baton</name></name> = <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>new_info</name>-&gt;<name>lock_token</name></name> = <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>new_info</name>-&gt;<name>fetch_file</name></name> = <name>FALSE</name></expr>;</expr_stmt>

      <comment type="block">/* Point at our parent's directory state. */</comment>
      <expr_stmt><expr><name><name>new_info</name>-&gt;<name>dir</name></name> = <name><name>info</name>-&gt;<name>dir</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>ref_count</name></name>++</expr>;</expr_stmt>

      <expr_stmt><expr><name><name>new_info</name>-&gt;<name>props</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name><name>new_info</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>private</name></name> = <name>new_info</name></expr>;</expr_stmt>
    }</block></then></if></else></if>

  <return>return <expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>private</name></name></expr>;</return>
}</block></function>

<escape char="0xc"/>
<comment type="block">/** Wrappers around our various property walkers **/</comment>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>set_file_props</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ns</name></decl></param>, <param><decl><type><name>apr_ssize_t</name></type> <name>ns_len</name></decl></param>,
               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>apr_ssize_t</name></type> <name>name_len</name></decl></param>,
               <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>val</name></decl></param>,
               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>report_info_t</name> *</type><name>info</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>editor</name> <init>= <expr><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>update_editor</name></name></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name>svn_ra_serf__set_baton_props</name><argument_list>(<argument><expr><name><name>editor</name>-&gt;<name>change_file_prop</name></name></expr></argument>,
                                      <argument><expr><name><name>info</name>-&gt;<name>file_baton</name></name></expr></argument>,
                                      <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>ns_len</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>set_dir_props</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ns</name></decl></param>, <param><decl><type><name>apr_ssize_t</name></type> <name>ns_len</name></decl></param>,
              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>apr_ssize_t</name></type> <name>name_len</name></decl></param>,
              <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>val</name></decl></param>,
              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>report_dir_t</name> *</type><name>dir</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>svn_ra_serf__set_baton_props</name><argument_list>(<argument><expr><name><name>dir</name>-&gt;<name>update_editor</name>-&gt;<name>change_dir_prop</name></name></expr></argument>,
                                      <argument><expr><name><name>dir</name>-&gt;<name>dir_baton</name></name></expr></argument>,
                                      <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>ns_len</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>remove_file_props</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ns</name></decl></param>, <param><decl><type><name>apr_ssize_t</name></type> <name>ns_len</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>apr_ssize_t</name></type> <name>name_len</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>val</name></decl></param>,
                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>report_info_t</name> *</type><name>info</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>editor</name> <init>= <expr><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>update_editor</name></name></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name>svn_ra_serf__set_baton_props</name><argument_list>(<argument><expr><name><name>editor</name>-&gt;<name>change_file_prop</name></name></expr></argument>,
                                      <argument><expr><name><name>info</name>-&gt;<name>file_baton</name></name></expr></argument>,
                                      <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>ns_len</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>remove_dir_props</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ns</name></decl></param>, <param><decl><type><name>apr_ssize_t</name></type> <name>ns_len</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>apr_ssize_t</name></type> <name>name_len</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>val</name></decl></param>,
                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>report_dir_t</name> *</type><name>dir</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>svn_ra_serf__set_baton_props</name><argument_list>(<argument><expr><name><name>dir</name>-&gt;<name>update_editor</name>-&gt;<name>change_dir_prop</name></name></expr></argument>,
                                      <argument><expr><name><name>dir</name>-&gt;<name>dir_baton</name></name></expr></argument>,
                                      <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>ns_len</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<escape char="0xc"/>
<comment type="block">/** Helpers to open and close directories */</comment>

<function><type><specifier>static</specifier> <name>svn_error_t</name>*</type>
<name>open_dir</name><parameter_list>(<param><decl><type><name>report_dir_t</name> *</type><name>dir</name></decl></param>)</parameter_list>
<block>{
  <comment type="block">/* if we're already open, return now */</comment>
  <if>if <condition>(<expr><name><name>dir</name>-&gt;<name>dir_baton</name></name></expr>)</condition><then>
    <block>{
      <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
    }</block></then></if>

  <if>if <condition>(<expr><name><name>dir</name>-&gt;<name>base_name</name><index>[<expr>0</expr>]</index></name> == '\0'</expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name><name>dir</name>-&gt;<name>dir_baton_pool</name></name></expr></argument>, <argument><expr><name><name>dir</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name><name>dir</name>-&gt;<name>report_context</name>-&gt;<name>destination</name></name> &amp;&amp;
          <name><name>dir</name>-&gt;<name>report_context</name>-&gt;<name>sess</name>-&gt;<name>wc_callbacks</name>-&gt;<name>invalidate_wc_props</name></name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>dir</name>-&gt;<name>report_context</name>-&gt;<name>sess</name>-&gt;<name>wc_callbacks</name>-&gt;<name>invalidate_wc_props</name></name><argument_list>(
                      <argument><expr><name><name>dir</name>-&gt;<name>report_context</name>-&gt;<name>sess</name>-&gt;<name>wc_callback_baton</name></name></expr></argument>,
                      <argument><expr><name><name>dir</name>-&gt;<name>report_context</name>-&gt;<name>update_target</name></name></expr></argument>,
                      <argument><expr><name>SVN_RA_SERF__WC_CHECKED_IN_URL</name></expr></argument>, <argument><expr><name><name>dir</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>dir</name>-&gt;<name>update_editor</name>-&gt;<name>open_root</name></name><argument_list>(<argument><expr><name><name>dir</name>-&gt;<name>update_baton</name></name></expr></argument>, <argument><expr><name><name>dir</name>-&gt;<name>base_rev</name></name></expr></argument>,
                                            <argument><expr><name><name>dir</name>-&gt;<name>dir_baton_pool</name></name></expr></argument>,
                                            <argument><expr>&amp;<name><name>dir</name>-&gt;<name>dir_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>open_dir</name><argument_list>(<argument><expr><name><name>dir</name>-&gt;<name>parent_dir</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name><name>dir</name>-&gt;<name>dir_baton_pool</name></name></expr></argument>, <argument><expr><name><name>dir</name>-&gt;<name>parent_dir</name>-&gt;<name>dir_baton_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name><name>dir</name>-&gt;<name>base_rev</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>dir</name>-&gt;<name>update_editor</name>-&gt;<name>open_directory</name></name><argument_list>(<argument><expr><name><name>dir</name>-&gt;<name>name</name></name></expr></argument>,
                                                     <argument><expr><name><name>dir</name>-&gt;<name>parent_dir</name>-&gt;<name>dir_baton</name></name></expr></argument>,
                                                     <argument><expr><name><name>dir</name>-&gt;<name>base_rev</name></name></expr></argument>,
                                                     <argument><expr><name><name>dir</name>-&gt;<name>dir_baton_pool</name></name></expr></argument>,
                                                     <argument><expr>&amp;<name><name>dir</name>-&gt;<name>dir_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else
        <block>{
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>dir</name>-&gt;<name>update_editor</name>-&gt;<name>add_directory</name></name><argument_list>(<argument><expr><name><name>dir</name>-&gt;<name>name</name></name></expr></argument>,
                                                    <argument><expr><name><name>dir</name>-&gt;<name>parent_dir</name>-&gt;<name>dir_baton</name></name></expr></argument>,
                                                    <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
                                                    <argument><expr><name><name>dir</name>-&gt;<name>dir_baton_pool</name></name></expr></argument>,
                                                    <argument><expr>&amp;<name><name>dir</name>-&gt;<name>dir_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></else></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>close_dir</name><parameter_list>(<param><decl><type><name>report_dir_t</name> *</type><name>dir</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>report_dir_t</name> *</type><name>prev</name></decl>, *<decl><type ref="prev"/><name>sibling</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>dir</name>-&gt;<name>ref_count</name></name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <expr_stmt><expr><call><name>svn_ra_serf__walk_all_props</name><argument_list>(<argument><expr><name><name>dir</name>-&gt;<name>props</name></name></expr></argument>, <argument><expr><name><name>dir</name>-&gt;<name>base_name</name></name></expr></argument>, <argument><expr><name><name>dir</name>-&gt;<name>base_rev</name></name></expr></argument>,
                              <argument><expr><name>set_dir_props</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name><name>dir</name>-&gt;<name>dir_baton_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>svn_ra_serf__walk_all_props</name><argument_list>(<argument><expr><name><name>dir</name>-&gt;<name>removed_props</name></name></expr></argument>, <argument><expr><name><name>dir</name>-&gt;<name>base_name</name></name></expr></argument>,
                              <argument><expr><name><name>dir</name>-&gt;<name>base_rev</name></name></expr></argument>, <argument><expr><name>remove_dir_props</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>,
                              <argument><expr><name><name>dir</name>-&gt;<name>dir_baton_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name><name>dir</name>-&gt;<name>fetch_props</name></name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_ra_serf__walk_all_props</name><argument_list>(<argument><expr><name><name>dir</name>-&gt;<name>props</name></name></expr></argument>, <argument><expr><name><name>dir</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name><name>dir</name>-&gt;<name>target_rev</name></name></expr></argument>,
                                  <argument><expr><name>set_dir_props</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name><name>dir</name>-&gt;<name>dir_baton_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>dir</name>-&gt;<name>update_editor</name>-&gt;<name>close_directory</name></name><argument_list>(<argument><expr><name><name>dir</name>-&gt;<name>dir_baton</name></name></expr></argument>,
                                              <argument><expr><name><name>dir</name>-&gt;<name>dir_baton_pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* remove us from our parent's children list */</comment>
  <if>if <condition>(<expr><name><name>dir</name>-&gt;<name>parent_dir</name></name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>prev</name> = <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>sibling</name> = <name><name>dir</name>-&gt;<name>parent_dir</name>-&gt;<name>children</name></name></expr>;</expr_stmt>

      <while>while <condition>(<expr><name>sibling</name> != <name>dir</name></expr>)</condition>
        <block>{
          <expr_stmt><expr><name>prev</name> = <name>sibling</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>sibling</name> = <name><name>sibling</name>-&gt;<name>sibling</name></name></expr>;</expr_stmt>
          <if>if <condition>(<expr>!<name>sibling</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></while>

      <if>if <condition>(<expr>!<name>prev</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name><name>dir</name>-&gt;<name>parent_dir</name>-&gt;<name>children</name></name> = <name><name>dir</name>-&gt;<name>sibling</name></name></expr>;</expr_stmt>
        }</block></then>
      <else>else
        <block>{
          <expr_stmt><expr><name><name>prev</name>-&gt;<name>sibling</name></name> = <name><name>dir</name>-&gt;<name>sibling</name></name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then></if>

  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name><name>dir</name>-&gt;<name>dir_baton_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name><name>dir</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>close_all_dirs</name><parameter_list>(<param><decl><type><name>report_dir_t</name> *</type><name>dir</name></decl></param>)</parameter_list>
<block>{
  <while>while <condition>(<expr><name><name>dir</name>-&gt;<name>children</name></name></expr>)</condition>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>close_all_dirs</name><argument_list>(<argument><expr><name><name>dir</name>-&gt;<name>children</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>dir</name>-&gt;<name>ref_count</name></name>--</expr>;</expr_stmt>
    }</block></while>

  <if>if <condition>(<expr><name><name>dir</name>-&gt;<name>ref_count</name></name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>open_dir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>close_dir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<escape char="0xc"/>
<comment type="block">/** Routines called when we are fetching a file */</comment>

<comment type="block">/* This function works around a bug in some older versions of
 * mod_dav_svn in that it will not send remove-prop in the update
 * report when a lock property disappears when send-all is false.
 *
 * Therefore, we'll try to look at our properties and see if there's
 * an active lock.  If not, then we'll assume there isn't a lock
 * anymore.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>check_lock</name><parameter_list>(<param><decl><type><name>report_info_t</name> *</type><name>info</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lock_val</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>lock_val</name> = <call><name>svn_ra_serf__get_ver_prop</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>props</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>url</name></name></expr></argument>,
                                       <argument><expr><name><name>info</name>-&gt;<name>target_rev</name></name></expr></argument>,
                                       <argument><expr>"DAV:"</expr></argument>, <argument><expr>"lockdiscovery"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>lock_val</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>char</name> *</type><name>new_lock</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>new_lock</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>editor_pool</name></name></expr></argument>, <argument><expr><name>lock_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>apr_collapse_spaces</name><argument_list>(<argument><expr><name>new_lock</name></expr></argument>, <argument><expr><name>new_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>lock_val</name> = <name>new_lock</name></expr>;</expr_stmt>
    }</block></then></if>

  <if>if <condition>(<expr>!<name>lock_val</name> || <name><name>lock_val</name><index>[<expr>0</expr>]</index></name> == '\0'</expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_string_t</name> *</type><name>str</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>str</name> = <call><name>svn_string_ncreate</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>editor_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>svn_ra_serf__set_ver_prop</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>removed_props</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>base_name</name></name></expr></argument>,
                                <argument><expr><name><name>info</name>-&gt;<name>base_rev</name></name></expr></argument>, <argument><expr>"DAV:"</expr></argument>, <argument><expr>"lock-token"</expr></argument>,
                                <argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type>
<name>headers_fetch</name><parameter_list>(<param><decl><type><name>serf_bucket_t</name> *</type><name>headers</name></decl></param>,
              <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>report_fetch_t</name> *</type><name>fetch_ctx</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* note that we have old VC URL */</comment>
  <if>if <condition>(<expr><call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name><name>fetch_ctx</name>-&gt;<name>info</name>-&gt;<name>base_rev</name></name></expr></argument>)</argument_list></call> &amp;&amp;
      <name><name>fetch_ctx</name>-&gt;<name>info</name>-&gt;<name>delta_base</name></name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>serf_bucket_headers_setn</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><name>SVN_DAV_DELTA_BASE_HEADER</name></expr></argument>,
                               <argument><expr><name><name>fetch_ctx</name>-&gt;<name>info</name>-&gt;<name>delta_base</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>serf_bucket_headers_setn</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr>"Accept-Encoding"</expr></argument>,
                               <argument><expr>"svndiff1;q=0.9,svndiff;q=0.8"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr><name><name>fetch_ctx</name>-&gt;<name>conn</name>-&gt;<name>using_compression</name></name> == <name>TRUE</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>serf_bucket_headers_setn</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr>"Accept-Encoding"</expr></argument>, <argument><expr>"gzip"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></else></if>

  <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type>
<name>cancel_fetch</name><parameter_list>(<param><decl><type><name>serf_request_t</name> *</type><name>request</name></decl></param>,
             <param><decl><type><name>serf_bucket_t</name> *</type><name>response</name></decl></param>,
             <param><decl><type><name>int</name></type> <name>status_code</name></decl></param>,
             <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>report_fetch_t</name> *</type><name>fetch_ctx</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Uh-oh.  Our connection died on us.
   *
   * The core ra_serf layer will requeue our request - we just need to note
   * that we got cut off in the middle of our song.
   */</comment>
  <if>if <condition>(<expr>!<name>response</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* If we already started the fetch and opened the file handle, we need
       * to hold subsequent read() ops until we get back to where we were
       * before the close and we can then resume the textdelta() calls.
       */</comment>
      <if>if <condition>(<expr><name><name>fetch_ctx</name>-&gt;<name>read_headers</name></name> == <name>TRUE</name></expr>)</condition><then>
        <block>{
          <if>if <condition>(<expr><name><name>fetch_ctx</name>-&gt;<name>aborted_read</name></name> == <name>FALSE</name> &amp;&amp; <name><name>fetch_ctx</name>-&gt;<name>read_size</name></name></expr>)</condition><then>
            <block>{
              <expr_stmt><expr><name><name>fetch_ctx</name>-&gt;<name>aborted_read</name></name> = <name>TRUE</name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>fetch_ctx</name>-&gt;<name>aborted_read_size</name></name> = <name><name>fetch_ctx</name>-&gt;<name>read_size</name></name></expr>;</expr_stmt>
            }</block></then></if>
          <expr_stmt><expr><name><name>fetch_ctx</name>-&gt;<name>read_size</name></name> = 0</expr>;</expr_stmt>
        }</block></then></if>

      <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
    }</block></then></if>

  <comment type="block">/* We have no idea what went wrong. */</comment>
  <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type>
<name>error_fetch</name><parameter_list>(<param><decl><type><name>serf_request_t</name> *</type><name>request</name></decl></param>,
            <param><decl><type><name>report_fetch_t</name> *</type><name>fetch_ctx</name></decl></param>,
            <param><decl><type><name>svn_error_t</name> *</type><name>err</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name><name>fetch_ctx</name>-&gt;<name>err</name></name> = <name>err</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>fetch_ctx</name>-&gt;<name>done</name></name> = <name>TRUE</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>fetch_ctx</name>-&gt;<name>done_item</name>.<name>data</name></name> = <name>fetch_ctx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fetch_ctx</name>-&gt;<name>done_item</name>.<name>next</name></name> = *<name><name>fetch_ctx</name>-&gt;<name>done_list</name></name></expr>;</expr_stmt>
  <expr_stmt><expr>*<name><name>fetch_ctx</name>-&gt;<name>done_list</name></name> = &amp;<name><name>fetch_ctx</name>-&gt;<name>done_item</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>serf_request_set_handler</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>svn_ra_serf__handle_discard_body</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type>
<name>handle_fetch</name><parameter_list>(<param><decl><type><name>serf_request_t</name> *</type><name>request</name></decl></param>,
             <param><decl><type><name>serf_bucket_t</name> *</type><name>response</name></decl></param>,
             <param><decl><type><name>void</name> *</type><name>handler_baton</name></decl></param>,
             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>report_fetch_t</name> *</type><name>fetch_ctx</name> <init>= <expr><name>handler_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>serf_status_line</name></type> <name>sl</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>fetch_ctx</name>-&gt;<name>read_headers</name></name> == <name>FALSE</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>serf_bucket_t</name> *</type><name>hdrs</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>report_info_t</name> *</type><name>info</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>hdrs</name> = <call><name>serf_bucket_response_get_headers</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>val</name> = <call><name>serf_bucket_headers_get</name><argument_list>(<argument><expr><name>hdrs</name></expr></argument>, <argument><expr>"Content-Type"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>info</name> = <name><name>fetch_ctx</name>-&gt;<name>info</name></name></expr>;</expr_stmt>

      <expr_stmt><expr><name>err</name> = <call><name>open_dir</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
        <block>{
          <return>return <expr><call><name>error_fetch</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>fetch_ctx</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

      <expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name><name>info</name>-&gt;<name>editor_pool</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>dir_baton_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Expand our full name now if we haven't done so yet. */</comment>
      <if>if <condition>(<expr>!<name><name>info</name>-&gt;<name>name</name></name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name><name>info</name>-&gt;<name>name_buf</name></name> = <call><name>svn_stringbuf_dup</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>name_buf</name></name></expr></argument>,
                                             <argument><expr><name><name>info</name>-&gt;<name>editor_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>svn_path_add_component</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>name_buf</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>base_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>info</name>-&gt;<name>name</name></name> = <name><name>info</name>-&gt;<name>name_buf</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
        }</block></then></if>

      <if>if <condition>(<expr><call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>base_rev</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>err</name> = <call><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>update_editor</name>-&gt;<name>open_file</name></name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>name</name></name></expr></argument>,
                                                    <argument><expr><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>dir_baton</name></name></expr></argument>,
                                                    <argument><expr><name><name>info</name>-&gt;<name>base_rev</name></name></expr></argument>,
                                                    <argument><expr><name><name>info</name>-&gt;<name>editor_pool</name></name></expr></argument>,
                                                    <argument><expr>&amp;<name><name>info</name>-&gt;<name>file_baton</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else
        <block>{
          <expr_stmt><expr><name>err</name> = <call><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>update_editor</name>-&gt;<name>add_file</name></name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>name</name></name></expr></argument>,
                                                   <argument><expr><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>dir_baton</name></name></expr></argument>,
                                                   <argument><expr><name><name>info</name>-&gt;<name>copyfrom_path</name></name></expr></argument>,
                                                   <argument><expr><name><name>info</name>-&gt;<name>copyfrom_rev</name></name></expr></argument>,
                                                   <argument><expr><name><name>info</name>-&gt;<name>editor_pool</name></name></expr></argument>,
                                                   <argument><expr>&amp;<name><name>info</name>-&gt;<name>file_baton</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

      <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
        <block>{
          <return>return <expr><call><name>error_fetch</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>fetch_ctx</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

      <expr_stmt><expr><name>err</name> = <call><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>update_editor</name>-&gt;<name>apply_textdelta</name></name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>file_baton</name></name></expr></argument>,
                                                      <argument><expr><name>NULL</name></expr></argument>,
                                                      <argument><expr><name><name>info</name>-&gt;<name>editor_pool</name></name></expr></argument>,
                                                      <argument><expr>&amp;<name><name>info</name>-&gt;<name>textdelta</name></name></expr></argument>,
                                                      <argument><expr>&amp;<name><name>info</name>-&gt;<name>textdelta_baton</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
        <block>{
          <return>return <expr><call><name>error_fetch</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>fetch_ctx</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

      <if>if <condition>(<expr><name>val</name> &amp;&amp; <call><name>svn_cstring_casecmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr>"application/vnd.svn-svndiff"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name><name>fetch_ctx</name>-&gt;<name>delta_stream</name></name> =
              <call><name>svn_txdelta_parse_svndiff</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>textdelta</name></name></expr></argument>,
                                        <argument><expr><name><name>info</name>-&gt;<name>textdelta_baton</name></name></expr></argument>,
                                        <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>editor_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else
        <block>{
          <expr_stmt><expr><name><name>fetch_ctx</name>-&gt;<name>delta_stream</name></name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></else></if>

      <expr_stmt><expr><name><name>fetch_ctx</name>-&gt;<name>read_headers</name></name> = <name>TRUE</name></expr>;</expr_stmt>
    }</block></then></if>

  <comment type="block">/* If the error code wasn't 200, something went wrong. Don't use the returned
     data as its probably an error message. Just bail out instead. */</comment>
  <expr_stmt><expr><name>status</name> = <call><name>serf_bucket_response_status</name><argument_list>(<argument><expr><name>response</name></expr></argument>, <argument><expr>&amp;<name>sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>SERF_BUCKET_READ_ERROR</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <return>return <expr><name>status</name></expr>;</return>
    }</block></then></if>
  <if>if <condition>(<expr><name><name>sl</name>.<name>code</name></name> != 200</expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_REQUEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                              <argument><expr><call><name>_</name><argument_list>(<argument><expr>"GET request failed: %d %s"</expr></argument>)</argument_list></call></expr></argument>,
                              <argument><expr><name><name>sl</name>.<name>code</name></name></expr></argument>, <argument><expr><name><name>sl</name>.<name>reason</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name>error_fetch</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>fetch_ctx</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

  <while>while <condition>(<expr>1</expr>)</condition>
    <block>{
      <decl_stmt><decl><type><name>svn_txdelta_window_t</name></type> <name>delta_window</name> <init>= <expr><block>{ <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_txdelta_op_t</name></type> <name>delta_op</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_string_t</name></type> <name>window_data</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>status</name> = <call><name>serf_bucket_read</name><argument_list>(<argument><expr><name>response</name></expr></argument>, <argument><expr>8000</expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><call><name>SERF_BUCKET_READ_ERROR</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
          <return>return <expr><name>status</name></expr>;</return>
        }</block></then></if>

      <expr_stmt><expr><name><name>fetch_ctx</name>-&gt;<name>read_size</name></name> += <name>len</name></expr>;</expr_stmt>

      <if>if <condition>(<expr><name><name>fetch_ctx</name>-&gt;<name>aborted_read</name></name> == <name>TRUE</name></expr>)</condition><then>
        <block>{
          <comment type="block">/* We haven't caught up to where we were before. */</comment>
          <if>if <condition>(<expr><name><name>fetch_ctx</name>-&gt;<name>read_size</name></name> &lt; <name><name>fetch_ctx</name>-&gt;<name>aborted_read_size</name></name></expr>)</condition><then>
            <block>{
              <comment type="block">/* Eek.  What did the file shrink or something? */</comment>
              <if>if <condition>(<expr><call><name>APR_STATUS_IS_EOF</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <block>{
                  <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

              <comment type="block">/* Skip on to the next iteration of this loop. */</comment>
              <if>if <condition>(<expr><call><name>APR_STATUS_IS_EAGAIN</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <block>{
                  <return>return <expr><name>status</name></expr>;</return>
                }</block></then></if>
              <continue>continue;</continue>
            }</block></then></if>

          <comment type="block">/* Woo-hoo.  We're back. */</comment>
          <expr_stmt><expr><name><name>fetch_ctx</name>-&gt;<name>aborted_read</name></name> = <name>FALSE</name></expr>;</expr_stmt>

          <comment type="block">/* Increment data and len by the difference. */</comment>
          <expr_stmt><expr><name>data</name> += <name><name>fetch_ctx</name>-&gt;<name>read_size</name></name> - <name><name>fetch_ctx</name>-&gt;<name>aborted_read_size</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name>len</name> = <name><name>fetch_ctx</name>-&gt;<name>read_size</name></name> - <name><name>fetch_ctx</name>-&gt;<name>aborted_read_size</name></name></expr>;</expr_stmt>
        }</block></then></if>

      <if>if <condition>(<expr><name><name>fetch_ctx</name>-&gt;<name>delta_stream</name></name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>err</name> = <call><name>svn_stream_write</name><argument_list>(<argument><expr><name><name>fetch_ctx</name>-&gt;<name>delta_stream</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
            <block>{
              <return>return <expr><call><name>error_fetch</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>fetch_ctx</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
        }</block></then>
      <comment type="block">/* otherwise, manually construct the text delta window. */</comment>
      <else>else <if>if <condition>(<expr><name>len</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name><name>window_data</name>.<name>data</name></name> = <name>data</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>window_data</name>.<name>len</name></name> = <name>len</name></expr>;</expr_stmt>

          <expr_stmt><expr><name><name>delta_op</name>.<name>action_code</name></name> = <name>svn_txdelta_new</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>delta_op</name>.<name>offset</name></name> = 0</expr>;</expr_stmt>
          <expr_stmt><expr><name><name>delta_op</name>.<name>length</name></name> = <name>len</name></expr>;</expr_stmt>

          <expr_stmt><expr><name><name>delta_window</name>.<name>tview_len</name></name> = <name>len</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>delta_window</name>.<name>num_ops</name></name> = 1</expr>;</expr_stmt>
          <expr_stmt><expr><name><name>delta_window</name>.<name>ops</name></name> = &amp;<name>delta_op</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>delta_window</name>.<name>new_data</name></name> = &amp;<name>window_data</name></expr>;</expr_stmt>

          <comment type="block">/* write to the file located in the info. */</comment>
          <expr_stmt><expr><name>err</name> = <call><name><name>fetch_ctx</name>-&gt;<name>info</name>-&gt;<name>textdelta</name></name><argument_list>(<argument><expr>&amp;<name>delta_window</name></expr></argument>,
                                           <argument><expr><name><name>fetch_ctx</name>-&gt;<name>info</name>-&gt;<name>textdelta_baton</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
            <block>{
              <return>return <expr><call><name>error_fetch</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>fetch_ctx</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
        }</block></then></if></else></if>

      <if>if <condition>(<expr><call><name>APR_STATUS_IS_EOF</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>report_info_t</name> *</type><name>info</name> <init>= <expr><name><name>fetch_ctx</name>-&gt;<name>info</name></name></expr></init></decl>;</decl_stmt>

          <expr_stmt><expr><name>err</name> = <call><name><name>info</name>-&gt;<name>textdelta</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>textdelta_baton</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
            <block>{
              <return>return <expr><call><name>error_fetch</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>fetch_ctx</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>

          <if>if <condition>(<expr><name><name>info</name>-&gt;<name>lock_token</name></name></expr>)</condition><then>
            <expr_stmt><expr><call><name>check_lock</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

          <comment type="block">/* set all of the properties we received */</comment>
          <expr_stmt><expr><call><name>svn_ra_serf__walk_all_props</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>props</name></name></expr></argument>,
                                      <argument><expr><name><name>info</name>-&gt;<name>base_name</name></name></expr></argument>,
                                      <argument><expr><name><name>info</name>-&gt;<name>base_rev</name></name></expr></argument>,
                                      <argument><expr><name>set_file_props</name></expr></argument>,
                                      <argument><expr><name>info</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>editor_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>svn_ra_serf__walk_all_props</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>removed_props</name></name></expr></argument>,
                                      <argument><expr><name><name>info</name>-&gt;<name>base_name</name></name></expr></argument>,
                                      <argument><expr><name><name>info</name>-&gt;<name>base_rev</name></name></expr></argument>,
                                      <argument><expr><name>remove_file_props</name></expr></argument>,
                                      <argument><expr><name>info</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>editor_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name><name>info</name>-&gt;<name>fetch_props</name></name></expr>)</condition><then>
            <block>{
              <expr_stmt><expr><call><name>svn_ra_serf__walk_all_props</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>props</name></name></expr></argument>,
                                          <argument><expr><name><name>info</name>-&gt;<name>url</name></name></expr></argument>,
                                          <argument><expr><name><name>info</name>-&gt;<name>target_rev</name></name></expr></argument>,
                                          <argument><expr><name>set_file_props</name></expr></argument>,
                                          <argument><expr><name>info</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>editor_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

          <expr_stmt><expr><name>err</name> = <call><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>update_editor</name>-&gt;<name>close_file</name></name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>file_baton</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                                     <argument><expr><name><name>info</name>-&gt;<name>editor_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
            <block>{
              <return>return <expr><call><name>error_fetch</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>fetch_ctx</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>

          <expr_stmt><expr><name><name>fetch_ctx</name>-&gt;<name>done</name></name> = <name>TRUE</name></expr>;</expr_stmt>

          <expr_stmt><expr><name><name>fetch_ctx</name>-&gt;<name>done_item</name>.<name>data</name></name> = <name>fetch_ctx</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>fetch_ctx</name>-&gt;<name>done_item</name>.<name>next</name></name> = *<name><name>fetch_ctx</name>-&gt;<name>done_list</name></name></expr>;</expr_stmt>
          <expr_stmt><expr>*<name><name>fetch_ctx</name>-&gt;<name>done_list</name></name> = &amp;<name><name>fetch_ctx</name>-&gt;<name>done_item</name></name></expr>;</expr_stmt>

          <comment type="block">/* We're done with our pools. */</comment>
          <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>editor_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <return>return <expr><name>status</name></expr>;</return>
        }</block></then></if>
      <if>if <condition>(<expr><call><name>APR_STATUS_IS_EAGAIN</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
          <return>return <expr><name>status</name></expr>;</return>
        }</block></then></if>
    }</block></while>
  <comment type="block">/* not reached */</comment>
}</block></function>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type>
<name>handle_stream</name><parameter_list>(<param><decl><type><name>serf_request_t</name> *</type><name>request</name></decl></param>,
              <param><decl><type><name>serf_bucket_t</name> *</type><name>response</name></decl></param>,
              <param><decl><type><name>void</name> *</type><name>handler_baton</name></decl></param>,
              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>report_fetch_t</name> *</type><name>fetch_ctx</name> <init>= <expr><name>handler_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>serf_status_line</name></type> <name>sl</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>serf_bucket_response_status</name><argument_list>(<argument><expr><name>response</name></expr></argument>, <argument><expr>&amp;<name>sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Woo-hoo.  Nothing here to see.  */</comment>
  <if>if <condition>(<expr><name><name>sl</name>.<name>code</name></name> == 404</expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name><name>fetch_ctx</name>-&gt;<name>done</name></name> = <name>TRUE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>fetch_ctx</name>-&gt;<name>err</name></name> = <call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_PATH_NOT_FOUND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                         <argument><expr>"'%s' path not found"</expr></argument>,
                                         <argument><expr><name><name>fetch_ctx</name>-&gt;<name>info</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name>svn_ra_serf__handle_discard_body</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>response</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

  <while>while <condition>(<expr>1</expr>)</condition>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>status</name> = <call><name>serf_bucket_read</name><argument_list>(<argument><expr><name>response</name></expr></argument>, <argument><expr>8000</expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><call><name>SERF_BUCKET_READ_ERROR</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
          <return>return <expr><name>status</name></expr>;</return>
        }</block></then></if>

      <expr_stmt><expr><name><name>fetch_ctx</name>-&gt;<name>read_size</name></name> += <name>len</name></expr>;</expr_stmt>

      <if>if <condition>(<expr><name><name>fetch_ctx</name>-&gt;<name>aborted_read</name></name> == <name>TRUE</name></expr>)</condition><then>
        <block>{
          <comment type="block">/* We haven't caught up to where we were before. */</comment>
          <if>if <condition>(<expr><name><name>fetch_ctx</name>-&gt;<name>read_size</name></name> &lt; <name><name>fetch_ctx</name>-&gt;<name>aborted_read_size</name></name></expr>)</condition><then>
            <block>{
              <comment type="block">/* Eek.  What did the file shrink or something? */</comment>
              <if>if <condition>(<expr><call><name>APR_STATUS_IS_EOF</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <block>{
                  <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

              <comment type="block">/* Skip on to the next iteration of this loop. */</comment>
              <if>if <condition>(<expr><call><name>APR_STATUS_IS_EAGAIN</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <block>{
                  <return>return <expr><name>status</name></expr>;</return>
                }</block></then></if>
              <continue>continue;</continue>
            }</block></then></if>

          <comment type="block">/* Woo-hoo.  We're back. */</comment>
          <expr_stmt><expr><name><name>fetch_ctx</name>-&gt;<name>aborted_read</name></name> = <name>FALSE</name></expr>;</expr_stmt>

          <comment type="block">/* Increment data and len by the difference. */</comment>
          <expr_stmt><expr><name>data</name> += <name><name>fetch_ctx</name>-&gt;<name>read_size</name></name> - <name><name>fetch_ctx</name>-&gt;<name>aborted_read_size</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name>len</name> += <name><name>fetch_ctx</name>-&gt;<name>read_size</name></name> - <name><name>fetch_ctx</name>-&gt;<name>aborted_read_size</name></name></expr>;</expr_stmt>
        }</block></then></if>

      <if>if <condition>(<expr><name>len</name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>apr_size_t</name></type> <name>written_len</name></decl>;</decl_stmt>

          <expr_stmt><expr><name>written_len</name> = <name>len</name></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>svn_stream_write</name><argument_list>(<argument><expr><name><name>fetch_ctx</name>-&gt;<name>target_stream</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr>&amp;<name>written_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

      <if>if <condition>(<expr><call><name>APR_STATUS_IS_EOF</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name><name>fetch_ctx</name>-&gt;<name>done</name></name> = <name>TRUE</name></expr>;</expr_stmt>
        }</block></then></if>

      <if>if <condition>(<expr><name>status</name></expr>)</condition><then>
        <block>{
          <return>return <expr><name>status</name></expr>;</return>
        }</block></then></if>
    }</block></while>
  <comment type="block">/* not reached */</comment>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>handle_propchange_only</name><parameter_list>(<param><decl><type><name>report_info_t</name> *</type><name>info</name></decl></param>)</parameter_list>
<block>{
  <comment type="block">/* Ensure our parent is open. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>open_dir</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>dir</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name><name>info</name>-&gt;<name>editor_pool</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>dir_baton_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Expand our full name now if we haven't done so yet. */</comment>
  <if>if <condition>(<expr>!<name><name>info</name>-&gt;<name>name</name></name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name><name>info</name>-&gt;<name>name_buf</name></name> = <call><name>svn_stringbuf_dup</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>name_buf</name></name></expr></argument>,
                                         <argument><expr><name><name>info</name>-&gt;<name>editor_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>svn_path_add_component</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>name_buf</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>base_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name>-&gt;<name>name</name></name> = <name><name>info</name>-&gt;<name>name_buf</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
    }</block></then></if>

  <if>if <condition>(<expr><call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>base_rev</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>update_editor</name>-&gt;<name>open_file</name></name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>name</name></name></expr></argument>,
                                                  <argument><expr><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>dir_baton</name></name></expr></argument>,
                                                  <argument><expr><name><name>info</name>-&gt;<name>base_rev</name></name></expr></argument>,
                                                  <argument><expr><name><name>info</name>-&gt;<name>editor_pool</name></name></expr></argument>,
                                                  <argument><expr>&amp;<name><name>info</name>-&gt;<name>file_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>update_editor</name>-&gt;<name>add_file</name></name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>name</name></name></expr></argument>,
                                                 <argument><expr><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>dir_baton</name></name></expr></argument>,
                                                 <argument><expr><name><name>info</name>-&gt;<name>copyfrom_path</name></name></expr></argument>,
                                                 <argument><expr><name><name>info</name>-&gt;<name>copyfrom_rev</name></name></expr></argument>,
                                                 <argument><expr><name><name>info</name>-&gt;<name>editor_pool</name></name></expr></argument>,
                                                 <argument><expr>&amp;<name><name>info</name>-&gt;<name>file_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <if>if <condition>(<expr><name><name>info</name>-&gt;<name>fetch_file</name></name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>update_editor</name>-&gt;<name>apply_textdelta</name></name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>file_baton</name></name></expr></argument>,
                                                    <argument><expr><name>NULL</name></expr></argument>,
                                                    <argument><expr><name><name>info</name>-&gt;<name>editor_pool</name></name></expr></argument>,
                                                    <argument><expr>&amp;<name><name>info</name>-&gt;<name>textdelta</name></name></expr></argument>,
                                                    <argument><expr>&amp;<name><name>info</name>-&gt;<name>textdelta_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <if>if <condition>(<expr><name><name>info</name>-&gt;<name>lock_token</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name>check_lock</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <comment type="block">/* set all of the properties we received */</comment>
  <expr_stmt><expr><call><name>svn_ra_serf__walk_all_props</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>props</name></name></expr></argument>,
                              <argument><expr><name><name>info</name>-&gt;<name>base_name</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>base_rev</name></name></expr></argument>,
                              <argument><expr><name>set_file_props</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>editor_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_ra_serf__walk_all_props</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>removed_props</name></name></expr></argument>,
                              <argument><expr><name><name>info</name>-&gt;<name>base_name</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>base_rev</name></name></expr></argument>,
                              <argument><expr><name>remove_file_props</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>editor_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name><name>info</name>-&gt;<name>fetch_props</name></name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_ra_serf__walk_all_props</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>props</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>target_rev</name></name></expr></argument>,
                                  <argument><expr><name>set_file_props</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>editor_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>update_editor</name>-&gt;<name>close_file</name></name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>file_baton</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                               <argument><expr><name><name>info</name>-&gt;<name>editor_pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* We're done with our pools. */</comment>
  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>editor_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>ref_count</name></name>--</expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>fetch_file</name><parameter_list>(<param><decl><type><name>report_context_t</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>report_info_t</name> *</type><name>info</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>conn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra_serf__handler_t</name> *</type><name>handler</name></decl>;</decl_stmt>

  <comment type="block">/* What connection should we go on? */</comment>
  <expr_stmt><expr><name>conn</name> = <name><name>ctx</name>-&gt;<name>sess</name>-&gt;<name>conns</name><index>[<expr><name><name>ctx</name>-&gt;<name>sess</name>-&gt;<name>cur_conn</name></name></expr>]</index></name></expr>;</expr_stmt>

  <comment type="block">/* go fetch info-&gt;name from DAV:checked-in */</comment>
  <expr_stmt><expr><name><name>info</name>-&gt;<name>url</name></name> =
      <call><name>svn_ra_serf__get_ver_prop</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>props</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>base_name</name></name></expr></argument>,
                                <argument><expr><name><name>info</name>-&gt;<name>base_rev</name></name></expr></argument>, <argument><expr>"DAV:"</expr></argument>, <argument><expr>"checked-in"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<name><name>info</name>-&gt;<name>url</name></name></expr>)</condition><then>
    <block>{
      <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_OPTIONS_REQ_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                        <argument><expr><call><name>_</name><argument_list>(<argument><expr>"The OPTIONS response did not include the "
                          "requested checked-in value"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

  <comment type="block">/* If needed, create the PROPFIND to retrieve the file's properties. */</comment>
  <expr_stmt><expr><name><name>info</name>-&gt;<name>propfind</name></name> = <name>NULL</name></expr>;</expr_stmt>
  <if>if <condition>(<expr><name><name>info</name>-&gt;<name>fetch_props</name></name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_ra_serf__deliver_props</name><argument_list>(<argument><expr>&amp;<name><name>info</name>-&gt;<name>propfind</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>props</name></name></expr></argument>,
                                 <argument><expr><name><name>ctx</name>-&gt;<name>sess</name></name></expr></argument>, <argument><expr><name>conn</name></expr></argument>,
                                 <argument><expr><name><name>info</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>target_rev</name></name></expr></argument>, <argument><expr>"0"</expr></argument>, <argument><expr><name>all_props</name></expr></argument>,
                                 <argument><expr><name>FALSE</name></expr></argument>, <argument><expr>&amp;<name><name>ctx</name>-&gt;<name>done_propfinds</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr>!<name><name>info</name>-&gt;<name>propfind</name></name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

      <expr_stmt><expr><name><name>ctx</name>-&gt;<name>active_propfinds</name></name>++</expr>;</expr_stmt>
    }</block></then></if>

  <comment type="block">/* If we've been asked to fetch the file or its an add, do so.
   * Otherwise, handle the case where only the properties changed.
   */</comment>
  <if>if <condition>(<expr><name><name>info</name>-&gt;<name>fetch_file</name></name> &amp;&amp; <name><name>ctx</name>-&gt;<name>text_deltas</name></name> == <name>TRUE</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>report_fetch_t</name> *</type><name>fetch_ctx</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>fetch_ctx</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>fetch_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>fetch_ctx</name>-&gt;<name>pool</name></name> = <name><name>info</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>fetch_ctx</name>-&gt;<name>info</name></name> = <name>info</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>fetch_ctx</name>-&gt;<name>done_list</name></name> = &amp;<name><name>ctx</name>-&gt;<name>done_fetches</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>fetch_ctx</name>-&gt;<name>sess</name></name> = <name><name>ctx</name>-&gt;<name>sess</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>fetch_ctx</name>-&gt;<name>conn</name></name> = <name>conn</name></expr>;</expr_stmt>

      <expr_stmt><expr><name>handler</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>handler</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>handler</name>-&gt;<name>method</name></name> = "GET"</expr>;</expr_stmt>
      <expr_stmt><expr><name><name>handler</name>-&gt;<name>path</name></name> = <name><name>fetch_ctx</name>-&gt;<name>info</name>-&gt;<name>url</name></name></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>handler</name>-&gt;<name>conn</name></name> = <name>conn</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>handler</name>-&gt;<name>session</name></name> = <name><name>ctx</name>-&gt;<name>sess</name></name></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>handler</name>-&gt;<name>header_delegate</name></name> = <name>headers_fetch</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>handler</name>-&gt;<name>header_delegate_baton</name></name> = <name>fetch_ctx</name></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>handler</name>-&gt;<name>response_handler</name></name> = <name>handle_fetch</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>handler</name>-&gt;<name>response_baton</name></name> = <name>fetch_ctx</name></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>handler</name>-&gt;<name>response_error</name></name> = <name>cancel_fetch</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>handler</name>-&gt;<name>response_error_baton</name></name> = <name>fetch_ctx</name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>svn_ra_serf__request_create</name><argument_list>(<argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>ctx</name>-&gt;<name>active_fetches</name></name>++</expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr><name><name>info</name>-&gt;<name>propfind</name></name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_ra_serf__list_t</name> *</type><name>list_item</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>list_item</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>list_item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>list_item</name>-&gt;<name>data</name></name> = <name>info</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>list_item</name>-&gt;<name>next</name></name> = <name><name>ctx</name>-&gt;<name>file_propchanges_only</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ctx</name>-&gt;<name>file_propchanges_only</name></name> = <name>list_item</name></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <comment type="block">/* No propfind or GET request.  Just handle the prop changes now. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>handle_propchange_only</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if></else></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<escape char="0xc"/>
<comment type="block">/** XML callbacks for our update-report response parsing */</comment>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>start_report</name><parameter_list>(<param><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser</name></decl></param>,
             <param><decl><type><name>void</name> *</type><name>userData</name></decl></param>,
             <param><decl><type><name>svn_ra_serf__dav_props_t</name></type> <name>name</name></decl></param>,
             <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>attrs</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>report_context_t</name> *</type><name>ctx</name> <init>= <expr><name>userData</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>report_state_e</name></type> <name>state</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>state</name> = <name><name>parser</name>-&gt;<name>state</name>-&gt;<name>current_state</name></name></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>state</name> == <name>NONE</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"target-revision"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rev</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>rev</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"rev"</expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr>!<name>rev</name></expr>)</condition><then>
        <block>{
          <return>return <expr><call><name>svn_error_create</name>
            <argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
             <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Missing revision attr in target-revision element"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

      <expr_stmt><expr><call><name><name>ctx</name>-&gt;<name>update_editor</name>-&gt;<name>set_target_revision</name></name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>update_baton</name></name></expr></argument>,
                                              <argument><expr><call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr></argument>,
                                              <argument><expr><name><name>ctx</name>-&gt;<name>sess</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>state</name> == <name>NONE</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"open-directory"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rev</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>report_info_t</name> *</type><name>info</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>rev</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"rev"</expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr>!<name>rev</name></expr>)</condition><then>
        <block>{
          <return>return <expr><call><name>svn_error_create</name>
            <argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
             <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Missing revision attr in open-directory element"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

      <expr_stmt><expr><name>info</name> = <call><name>push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>OPEN_DIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>info</name>-&gt;<name>base_rev</name></name> = <call><name>apr_atoi64</name><argument_list>(<argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>base_rev</name></name> = <name><name>info</name>-&gt;<name>base_rev</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>target_rev</name></name> = <name><name>ctx</name>-&gt;<name>target_rev</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name>-&gt;<name>fetch_props</name></name> = <name>TRUE</name></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>base_name</name></name> = ""</expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>name_buf</name></name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>name</name></name> = <name><name>info</name>-&gt;<name>dir</name>-&gt;<name>name_buf</name>-&gt;<name>data</name></name></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>info</name>-&gt;<name>base_name</name></name> = <name><name>info</name>-&gt;<name>dir</name>-&gt;<name>base_name</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name>-&gt;<name>name</name></name> = <name><name>info</name>-&gt;<name>dir</name>-&gt;<name>name</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name>-&gt;<name>name_buf</name></name> = <name><name>info</name>-&gt;<name>dir</name>-&gt;<name>name_buf</name></name></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>state</name> == <name>NONE</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* do nothing as we haven't seen our valid start tag yet. */</comment>
    }</block></then>
  <else>else <if>if <condition>(<expr>(<name>state</name> == <name>OPEN_DIR</name> || <name>state</name> == <name>ADD_DIR</name>) &amp;&amp;
           <call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"open-directory"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rev</name></decl>, *<decl><type ref="prev"/><name>dirname</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>report_dir_t</name> *</type><name>dir</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>report_info_t</name> *</type><name>info</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>rev</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"rev"</expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr>!<name>rev</name></expr>)</condition><then>
        <block>{
          <return>return <expr><call><name>svn_error_create</name>
            <argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
             <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Missing revision attr in open-directory element"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

      <expr_stmt><expr><name>dirname</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"name"</expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr>!<name>dirname</name></expr>)</condition><then>
        <block>{
          <return>return <expr><call><name>svn_error_create</name>
            <argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
             <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Missing name attr in open-directory element"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

      <expr_stmt><expr><name>info</name> = <call><name>push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>OPEN_DIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>dir</name> = <name><name>info</name>-&gt;<name>dir</name></name></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>info</name>-&gt;<name>base_rev</name></name> = <call><name>apr_atoi64</name><argument_list>(<argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>dir</name>-&gt;<name>base_rev</name></name> = <name><name>info</name>-&gt;<name>base_rev</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>dir</name>-&gt;<name>target_rev</name></name> = <name><name>ctx</name>-&gt;<name>target_rev</name></name></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>info</name>-&gt;<name>fetch_props</name></name> = <name>FALSE</name></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>dir</name>-&gt;<name>base_name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>dir</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>dirname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name>-&gt;<name>base_name</name></name> = <name><name>dir</name>-&gt;<name>base_name</name></name></expr>;</expr_stmt>

      <comment type="block">/* Expand our name. */</comment>
      <expr_stmt><expr><name><name>dir</name>-&gt;<name>name_buf</name></name> = <call><name>svn_stringbuf_dup</name><argument_list>(<argument><expr><name><name>dir</name>-&gt;<name>parent_dir</name>-&gt;<name>name_buf</name></name></expr></argument>, <argument><expr><name><name>dir</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>svn_path_add_component</name><argument_list>(<argument><expr><name><name>dir</name>-&gt;<name>name_buf</name></name></expr></argument>, <argument><expr><name><name>dir</name>-&gt;<name>base_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>dir</name>-&gt;<name>name</name></name> = <name><name>dir</name>-&gt;<name>name_buf</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name>-&gt;<name>name</name></name> = <name><name>dir</name>-&gt;<name>name</name></name></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr>(<name>state</name> == <name>OPEN_DIR</name> || <name>state</name> == <name>ADD_DIR</name>) &amp;&amp;
           <call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"add-directory"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dir_name</name></decl>, *<decl><type ref="prev"/><name>cf</name></decl>, *<decl><type ref="prev"/><name>cr</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>report_dir_t</name> *</type><name>dir</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>report_info_t</name> *</type><name>info</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>dir_name</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"name"</expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr>!<name>dir_name</name></expr>)</condition><then>
        <block>{
          <return>return <expr><call><name>svn_error_create</name>
            <argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
             <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Missing name attr in add-directory element"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
      <expr_stmt><expr><name>cf</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"copyfrom-path"</expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>cr</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"copyfrom-rev"</expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>info</name> = <call><name>push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ADD_DIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>dir</name> = <name><name>info</name>-&gt;<name>dir</name></name></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>dir</name>-&gt;<name>base_name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>dir</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>dir_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name>-&gt;<name>base_name</name></name> = <name><name>dir</name>-&gt;<name>base_name</name></name></expr>;</expr_stmt>

      <comment type="block">/* Expand our name. */</comment>
      <expr_stmt><expr><name><name>dir</name>-&gt;<name>name_buf</name></name> = <call><name>svn_stringbuf_dup</name><argument_list>(<argument><expr><name><name>dir</name>-&gt;<name>parent_dir</name>-&gt;<name>name_buf</name></name></expr></argument>, <argument><expr><name><name>dir</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>svn_path_add_component</name><argument_list>(<argument><expr><name><name>dir</name>-&gt;<name>name_buf</name></name></expr></argument>, <argument><expr><name><name>dir</name>-&gt;<name>base_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>dir</name>-&gt;<name>name</name></name> = <name><name>dir</name>-&gt;<name>name_buf</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name>-&gt;<name>name</name></name> = <name><name>dir</name>-&gt;<name>name</name></name></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>info</name>-&gt;<name>copyfrom_path</name></name> = <name>cf</name> ? <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>cf</name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name>-&gt;<name>copyfrom_rev</name></name> = <name>cr</name> ? <call><name>apr_atoi64</name><argument_list>(<argument><expr><name>cr</name></expr></argument>)</argument_list></call> : <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>

      <comment type="block">/* Mark that we don't have a base. */</comment>
      <expr_stmt><expr><name><name>info</name>-&gt;<name>base_rev</name></name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>dir</name>-&gt;<name>base_rev</name></name> = <name><name>info</name>-&gt;<name>base_rev</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>dir</name>-&gt;<name>target_rev</name></name> = <name><name>ctx</name>-&gt;<name>target_rev</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>dir</name>-&gt;<name>fetch_props</name></name> = <name>TRUE</name></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr>(<name>state</name> == <name>OPEN_DIR</name> || <name>state</name> == <name>ADD_DIR</name>) &amp;&amp;
           <call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"open-file"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file_name</name></decl>, *<decl><type ref="prev"/><name>rev</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>report_info_t</name> *</type><name>info</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>file_name</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"name"</expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr>!<name>file_name</name></expr>)</condition><then>
        <block>{
          <return>return <expr><call><name>svn_error_create</name>
            <argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
             <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Missing name attr in open-file element"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

      <expr_stmt><expr><name>rev</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"rev"</expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr>!<name>rev</name></expr>)</condition><then>
        <block>{
          <return>return <expr><call><name>svn_error_create</name>
            <argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
             <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Missing revision attr in open-file element"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

      <expr_stmt><expr><name>info</name> = <call><name>push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>OPEN_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>info</name>-&gt;<name>base_rev</name></name> = <call><name>apr_atoi64</name><argument_list>(<argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name>-&gt;<name>target_rev</name></name> = <name><name>ctx</name>-&gt;<name>target_rev</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name>-&gt;<name>fetch_props</name></name> = <name>FALSE</name></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>info</name>-&gt;<name>base_name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name>-&gt;<name>name</name></name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr>(<name>state</name> == <name>OPEN_DIR</name> || <name>state</name> == <name>ADD_DIR</name>) &amp;&amp;
           <call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"add-file"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file_name</name></decl>, *<decl><type ref="prev"/><name>cf</name></decl>, *<decl><type ref="prev"/><name>cr</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>report_info_t</name> *</type><name>info</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>file_name</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"name"</expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>cf</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"copyfrom-path"</expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>cr</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"copyfrom-rev"</expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr>!<name>file_name</name></expr>)</condition><then>
        <block>{
          <return>return <expr><call><name>svn_error_create</name>
            <argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
             <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Missing name attr in add-file element"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

      <expr_stmt><expr><name>info</name> = <call><name>push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ADD_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>info</name>-&gt;<name>base_rev</name></name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name>-&gt;<name>target_rev</name></name> = <name><name>ctx</name>-&gt;<name>target_rev</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name>-&gt;<name>fetch_props</name></name> = <name>TRUE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name>-&gt;<name>fetch_file</name></name> = <name>TRUE</name></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>info</name>-&gt;<name>base_name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name>-&gt;<name>name</name></name> = <name>NULL</name></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>info</name>-&gt;<name>copyfrom_path</name></name> = <name>cf</name> ? <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>cf</name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name>-&gt;<name>copyfrom_rev</name></name> = <name>cr</name> ? <call><name>apr_atoi64</name><argument_list>(<argument><expr><name>cr</name></expr></argument>)</argument_list></call> : <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr>(<name>state</name> == <name>OPEN_DIR</name> || <name>state</name> == <name>ADD_DIR</name>) &amp;&amp;
           <call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"delete-entry"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file_name</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>name_buf</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>report_info_t</name> *</type><name>info</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>tmppool</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>file_name</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"name"</expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr>!<name>file_name</name></expr>)</condition><then>
        <block>{
          <return>return <expr><call><name>svn_error_create</name>
            <argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
             <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Missing name attr in delete-entry element"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

      <expr_stmt><expr><name>info</name> = <name><name>parser</name>-&gt;<name>state</name>-&gt;<name>private</name></name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>open_dir</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>dir</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>tmppool</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>dir_baton_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>name_buf</name> = <call><name>svn_stringbuf_dup</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>name_buf</name></name></expr></argument>, <argument><expr><name>tmppool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>svn_path_add_component</name><argument_list>(<argument><expr><name>name_buf</name></expr></argument>, <argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>update_editor</name>-&gt;<name>delete_entry</name></name><argument_list>(<argument><expr><name><name>name_buf</name>-&gt;<name>data</name></name></expr></argument>,
                                                     <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
                                                     <argument><expr><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>dir_baton</name></name></expr></argument>,
                                                     <argument><expr><name>tmppool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>tmppool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr>(<name>state</name> == <name>OPEN_DIR</name> || <name>state</name> == <name>ADD_DIR</name>) &amp;&amp;
           <call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"absent-directory"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file_name</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>report_info_t</name> *</type><name>info</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>file_name</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"name"</expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr>!<name>file_name</name></expr>)</condition><then>
        <block>{
          <return>return <expr><call><name>svn_error_create</name>
            <argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
             <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Missing name attr in absent-directory element"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

      <expr_stmt><expr><name>info</name> = <name><name>parser</name>-&gt;<name>state</name>-&gt;<name>private</name></name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>open_dir</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>dir</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>ctx</name>-&gt;<name>update_editor</name>-&gt;<name>absent_directory</name></name><argument_list>(<argument><expr><name>file_name</name></expr></argument>,
                                           <argument><expr><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>dir_baton</name></name></expr></argument>,
                                           <argument><expr><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr>(<name>state</name> == <name>OPEN_DIR</name> || <name>state</name> == <name>ADD_DIR</name>) &amp;&amp;
           <call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"absent-file"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file_name</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>report_info_t</name> *</type><name>info</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>file_name</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"name"</expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr>!<name>file_name</name></expr>)</condition><then>
        <block>{
          <return>return <expr><call><name>svn_error_create</name>
            <argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
             <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Missing name attr in absent-file element"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

      <expr_stmt><expr><name>info</name> = <name><name>parser</name>-&gt;<name>state</name>-&gt;<name>private</name></name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>open_dir</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>dir</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>ctx</name>-&gt;<name>update_editor</name>-&gt;<name>absent_file</name></name><argument_list>(<argument><expr><name>file_name</name></expr></argument>,
                                      <argument><expr><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>dir_baton</name></name></expr></argument>,
                                      <argument><expr><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>state</name> == <name>OPEN_DIR</name> || <name>state</name> == <name>ADD_DIR</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>report_info_t</name> *</type><name>info</name></decl>;</decl_stmt>

      <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"checked-in"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>info</name> = <call><name>push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>IGNORE_PROP_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>info</name>-&gt;<name>prop_ns</name></name> = <name><name>name</name>.<name>namespace</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>info</name>-&gt;<name>prop_name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>info</name>-&gt;<name>prop_encoding</name></name> = <name>NULL</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>info</name>-&gt;<name>prop_val</name></name> = <name>NULL</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>info</name>-&gt;<name>prop_val_len</name></name> = 0</expr>;</expr_stmt>
        }</block></then>
      <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"set-prop"</expr></argument>)</argument_list></call> == 0 ||
               <call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"remove-prop"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>full_prop_name</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>colon</name></decl>;</decl_stmt>

          <expr_stmt><expr><name>info</name> = <call><name>push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>PROP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><name>full_prop_name</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"name"</expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr>!<name>full_prop_name</name></expr>)</condition><then>
            <block>{
              <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                       <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Missing name attr in %s element"</expr></argument>)</argument_list></call></expr></argument>,
                                       <argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>

          <expr_stmt><expr><name>colon</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>full_prop_name</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <if>if <condition>(<expr><name>colon</name></expr>)</condition><then>
            <expr_stmt><expr><name>colon</name>++</expr>;</expr_stmt></then>
          <else>else
            <expr_stmt><expr><name>colon</name> = <name>full_prop_name</name></expr>;</expr_stmt></else></if>

          <expr_stmt><expr><name><name>info</name>-&gt;<name>prop_ns</name></name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>full_prop_name</name></expr></argument>,
                                         <argument><expr><name>colon</name> - <name>full_prop_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>info</name>-&gt;<name>prop_name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>colon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>info</name>-&gt;<name>prop_encoding</name></name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"encoding"</expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>info</name>-&gt;<name>prop_val</name></name> = <name>NULL</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>info</name>-&gt;<name>prop_val_len</name></name> = 0</expr>;</expr_stmt>
        }</block></then>
      <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"prop"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <block>{
          <comment type="block">/* need to fetch it. */</comment>
          <expr_stmt><expr><call><name>push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>NEED_PROP_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"fetch-props"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>info</name> = <name><name>parser</name>-&gt;<name>state</name>-&gt;<name>private</name></name></expr>;</expr_stmt>

          <expr_stmt><expr><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>fetch_props</name></name> = <name>TRUE</name></expr>;</expr_stmt>
        }</block></then>
      <else>else
        <block>{
          <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if></else></if></else></if></else></if>

    }</block></then>
  <else>else <if>if <condition>(<expr><name>state</name> == <name>OPEN_FILE</name> || <name>state</name> == <name>ADD_FILE</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>report_info_t</name> *</type><name>info</name></decl>;</decl_stmt>

      <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"checked-in"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>info</name> = <call><name>push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>IGNORE_PROP_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>info</name>-&gt;<name>prop_ns</name></name> = <name><name>name</name>.<name>namespace</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>info</name>-&gt;<name>prop_name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>info</name>-&gt;<name>prop_encoding</name></name> = <name>NULL</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>info</name>-&gt;<name>prop_val</name></name> = <name>NULL</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>info</name>-&gt;<name>prop_val_len</name></name> = 0</expr>;</expr_stmt>
        }</block></then>
      <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"prop"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <block>{
          <comment type="block">/* need to fetch it. */</comment>
          <expr_stmt><expr><call><name>push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>NEED_PROP_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"fetch-props"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>info</name> = <name><name>parser</name>-&gt;<name>state</name>-&gt;<name>private</name></name></expr>;</expr_stmt>

          <expr_stmt><expr><name><name>info</name>-&gt;<name>fetch_props</name></name> = <name>TRUE</name></expr>;</expr_stmt>
        }</block></then>
      <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"fetch-file"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>info</name> = <name><name>parser</name>-&gt;<name>state</name>-&gt;<name>private</name></name></expr>;</expr_stmt>

          <expr_stmt><expr><name><name>info</name>-&gt;<name>fetch_file</name></name> = <name>TRUE</name></expr>;</expr_stmt>
        }</block></then>
      <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"set-prop"</expr></argument>)</argument_list></call> == 0 ||
               <call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"remove-prop"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>full_prop_name</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>colon</name></decl>;</decl_stmt>

          <expr_stmt><expr><name>info</name> = <call><name>push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>PROP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><name>full_prop_name</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"name"</expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr>!<name>full_prop_name</name></expr>)</condition><then>
            <block>{
              <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                       <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Missing name attr in %s element"</expr></argument>)</argument_list></call></expr></argument>,
                                       <argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>
          <expr_stmt><expr><name>colon</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>full_prop_name</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <if>if <condition>(<expr><name>colon</name></expr>)</condition><then>
            <expr_stmt><expr><name>colon</name>++</expr>;</expr_stmt></then>
          <else>else
            <expr_stmt><expr><name>colon</name> = <name>full_prop_name</name></expr>;</expr_stmt></else></if>

          <expr_stmt><expr><name><name>info</name>-&gt;<name>prop_ns</name></name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>full_prop_name</name></expr></argument>,
                                         <argument><expr><name>colon</name> - <name>full_prop_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>info</name>-&gt;<name>prop_name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>colon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>info</name>-&gt;<name>prop_encoding</name></name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"encoding"</expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>info</name>-&gt;<name>prop_val</name></name> = <name>NULL</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>info</name>-&gt;<name>prop_val_len</name></name> = 0</expr>;</expr_stmt>
        }</block></then>
      <else>else
        <block>{
          <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if></else></if></else></if></else></if></else></if>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>state</name> == <name>IGNORE_PROP_NAME</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>PROP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>state</name> == <name>NEED_PROP_NAME</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>report_info_t</name> *</type><name>info</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>info</name> = <call><name>push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>PROP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>info</name>-&gt;<name>prop_ns</name></name> = <name><name>name</name>.<name>namespace</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name>-&gt;<name>prop_name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name>-&gt;<name>prop_val</name></name> = <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name>-&gt;<name>prop_val_len</name></name> = 0</expr>;</expr_stmt>
    }</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>end_report</name><parameter_list>(<param><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser</name></decl></param>,
           <param><decl><type><name>void</name> *</type><name>userData</name></decl></param>,
           <param><decl><type><name>svn_ra_serf__dav_props_t</name></type> <name>name</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>report_context_t</name> *</type><name>ctx</name> <init>= <expr><name>userData</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>report_state_e</name></type> <name>state</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>state</name> = <name><name>parser</name>-&gt;<name>state</name>-&gt;<name>current_state</name></name></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>state</name> == <name>NONE</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* nothing to close yet. */</comment>
      <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
    }</block></then></if>

  <if>if <condition>(<expr>((<name>state</name> == <name>OPEN_DIR</name> &amp;&amp; (<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"open-directory"</expr></argument>)</argument_list></call> == 0)) ||
       (<name>state</name> == <name>ADD_DIR</name> &amp;&amp; (<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"add-directory"</expr></argument>)</argument_list></call> == 0)))</expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>checked_in_url</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>report_info_t</name> *</type><name>info</name> <init>= <expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>private</name></name></expr></init></decl>;</decl_stmt>

      <comment type="block">/* We've now closed this directory; note it. */</comment>
      <expr_stmt><expr><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>tag_closed</name></name> = <name>TRUE</name></expr>;</expr_stmt>

      <comment type="block">/* go fetch info-&gt;file_name from DAV:checked-in */</comment>
      <expr_stmt><expr><name>checked_in_url</name> =
          <call><name>svn_ra_serf__get_ver_prop</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>props</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>base_name</name></name></expr></argument>,
                                    <argument><expr><name><name>info</name>-&gt;<name>base_rev</name></name></expr></argument>, <argument><expr>"DAV:"</expr></argument>, <argument><expr>"checked-in"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* If we were expecting to have the properties and we aren't able to
       * get it, bail.
       */</comment>
      <if>if <condition>(<expr>!<name>checked_in_url</name> &amp;&amp;
          (!<call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>base_rev</name></name></expr></argument>)</argument_list></call> || <name><name>info</name>-&gt;<name>dir</name>-&gt;<name>fetch_props</name></name>)</expr>)</condition><then>
        <block>{
          <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_OPTIONS_REQ_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                  <argument><expr><call><name>_</name><argument_list>(<argument><expr>"The OPTIONS response did not include the "
                                    "requested checked-in value"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

      <expr_stmt><expr><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>url</name></name> = <name>checked_in_url</name></expr>;</expr_stmt>

      <comment type="block">/* At this point, we should have the checked-in href.
       * If needed, create the PROPFIND to retrieve the dir's properties.
       */</comment>
      <if>if <condition>(<expr>!<call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>base_rev</name></name></expr></argument>)</argument_list></call> || <name><name>info</name>-&gt;<name>dir</name>-&gt;<name>fetch_props</name></name></expr>)</condition><then>
        <block>{
          <comment type="block">/* Unconditionally set fetch_props now. */</comment>
          <expr_stmt><expr><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>fetch_props</name></name> = <name>TRUE</name></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>svn_ra_serf__deliver_props</name><argument_list>(<argument><expr>&amp;<name><name>info</name>-&gt;<name>dir</name>-&gt;<name>propfind</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>props</name></name></expr></argument>,
                                     <argument><expr><name><name>ctx</name>-&gt;<name>sess</name></name></expr></argument>,
                                     <argument><expr><name><name>ctx</name>-&gt;<name>sess</name>-&gt;<name>conns</name><index>[<expr><name><name>ctx</name>-&gt;<name>sess</name>-&gt;<name>cur_conn</name></name></expr>]</index></name></expr></argument>,
                                     <argument><expr><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>target_rev</name></name></expr></argument>,
                                     <argument><expr>"0"</expr></argument>, <argument><expr><name>all_props</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                                     <argument><expr>&amp;<name><name>ctx</name>-&gt;<name>done_propfinds</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <if>if <condition>(<expr>!<name><name>info</name>-&gt;<name>dir</name>-&gt;<name>propfind</name></name></expr>)</condition><then>
            <block>{
              <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

          <expr_stmt><expr><name><name>ctx</name>-&gt;<name>active_propfinds</name></name>++</expr>;</expr_stmt>
        }</block></then>
      <else>else
        <block>{
          <expr_stmt><expr><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>propfind</name></name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></else></if>

      <expr_stmt><expr><call><name>svn_ra_serf__xml_pop_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>state</name> == <name>OPEN_FILE</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"open-file"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>report_info_t</name> *</type><name>info</name> <init>= <expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>private</name></name></expr></init></decl>;</decl_stmt>

      <comment type="block">/* Expand our full name now if we haven't done so yet. */</comment>
      <if>if <condition>(<expr>!<name><name>info</name>-&gt;<name>name</name></name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name><name>info</name>-&gt;<name>name_buf</name></name> = <call><name>svn_stringbuf_dup</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>dir</name>-&gt;<name>name_buf</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>svn_path_add_component</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>name_buf</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>base_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>info</name>-&gt;<name>name</name></name> = <name><name>info</name>-&gt;<name>name_buf</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
        }</block></then></if>

      <expr_stmt><expr><name><name>info</name>-&gt;<name>lock_token</name></name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>lock_path_tokens</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>name</name></name></expr></argument>,
                                      <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name><name>info</name>-&gt;<name>lock_token</name></name> &amp;&amp; <name><name>info</name>-&gt;<name>fetch_props</name></name> == <name>FALSE</name></expr>)</condition><then>
        <expr_stmt><expr><name><name>info</name>-&gt;<name>fetch_props</name></name> = <name>TRUE</name></expr>;</expr_stmt></then></if>

      <comment type="block">/* If we have a WC, we can dive all the way into the WC to get the
       * previous URL so we can do an differential GET with the base URL.
       *
       * If we don't have a WC (as is the case for URL&lt;-&gt;URL diff), we can
       * manually reconstruct the base URL.  This avoids us having to grab
       * two full-text for URL&lt;-&gt;URL diffs.  Instead, we can just grab one
       * full-text and a diff from the server against that other file.
       */</comment>
      <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>sess</name>-&gt;<name>wc_callbacks</name>-&gt;<name>get_wc_prop</name></name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name><name>ctx</name>-&gt;<name>sess</name>-&gt;<name>wc_callbacks</name>-&gt;<name>get_wc_prop</name></name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>sess</name>-&gt;<name>wc_callback_baton</name></name></expr></argument>,
                                               <argument><expr><name><name>info</name>-&gt;<name>name</name></name></expr></argument>,
                                               <argument><expr><name>SVN_RA_SERF__WC_CHECKED_IN_URL</name></expr></argument>,
                                               <argument><expr>&amp;<name><name>info</name>-&gt;<name>delta_base</name></name></expr></argument>,
                                               <argument><expr><name><name>info</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else
        <block>{
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>c</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>apr_size_t</name></type> <name>comp_count</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>path</name></decl>;</decl_stmt>

          <expr_stmt><expr><name>c</name> = <call><name>svn_ra_serf__get_ver_prop</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>props</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>base_name</name></name></expr></argument>,
                                        <argument><expr><name><name>info</name>-&gt;<name>base_rev</name></name></expr></argument>, <argument><expr>"DAV:"</expr></argument>, <argument><expr>"checked-in"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><name>path</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><name>comp_count</name> = <call><name>svn_path_component_count</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>name_buf</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>svn_path_remove_components</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>comp_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="block">/* Find out the difference of the destination compared to the repos
           * root url. Cut of this difference from path, which will give us our
           * version resource root path.
           *
           * Example:
           * path: 
           *  /repositories/log_tests-17/!svn/ver/4/branches/a
           * repos_root: 
           *  http://localhost/repositories/log_tests-17
           * destination:
           *  http://localhost/repositories/log_tests-17/branches/a
           *
           * So, find 'branches/a' as the difference. Cut it of path, gives us:
           *  /repositories/log_tests-17/!svn/ver/4
           */</comment>
          <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>destination</name></name> &amp;&amp; 
              <call><name>strcmp</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>destination</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>sess</name>-&gt;<name>repos_root_str</name></name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
            <block>{
              <decl_stmt><decl><type><name>apr_size_t</name></type> <name>root_count</name></decl>, <decl><type ref="prev"/><name>src_count</name></decl>;</decl_stmt>

              <expr_stmt><expr><name>src_count</name> = <call><name>svn_path_component_count</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>destination</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>root_count</name> = <call><name>svn_path_component_count</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>sess</name>-&gt;<name>repos_root_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

              <expr_stmt><expr><call><name>svn_path_remove_components</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>src_count</name> - <name>root_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

          <comment type="block">/* At this point, we should just have the version number
           * remaining.  We know our target revision, so we'll replace it
           * and recreate what we just chopped off.
           */</comment>
          <expr_stmt><expr><call><name>svn_path_remove_component</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>svn_path_add_component</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>apr_ltoa</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>base_rev</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="block">/* Similar as above, we now have to add the relative path between 
           * source and root path. 
           *
           * Example:
           * path: 
           *  /repositories/log_tests-17/!svn/ver/2
           * repos_root path: 
           *  /repositories/log_tests-17
           * source:
           *  /repositories/log_tests-17/trunk
           *
           * So, find 'trunk' as the difference. Addding it to path, gives us:
           *  /repositories/log_tests-17/!svn/ver/2/trunk
           */</comment>
          <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>source</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>sess</name>-&gt;<name>repos_root</name>.<name>path</name></name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
            <block>{
              <decl_stmt><decl><type><name>apr_size_t</name></type> <name>root_len</name></decl>;</decl_stmt>

              <expr_stmt><expr><name>root_len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>sess</name>-&gt;<name>repos_root</name>.<name>path</name></name></expr></argument>)</argument_list></call> + 1</expr>;</expr_stmt>

              <expr_stmt><expr><call><name>svn_path_add_component</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>&amp;<name><name>ctx</name>-&gt;<name>source</name><index>[<expr><name>root_len</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

          <comment type="block">/* Re-add the filename. */</comment>
          <expr_stmt><expr><call><name>svn_path_add_component</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><name><name>info</name>-&gt;<name>delta_base</name></name> = <call><name>svn_string_create_from_buf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>fetch_file</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>svn_ra_serf__xml_pop_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>state</name> == <name>ADD_FILE</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"add-file"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <block>{
      <comment type="block">/* We should have everything we need to fetch the file. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>fetch_file</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>private</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>svn_ra_serf__xml_pop_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>state</name> == <name>PROP</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* We need to move the prop_ns, prop_name, and prop_val into the
       * same lifetime as the dir-&gt;pool.
       */</comment>
      <decl_stmt><decl><type><name>svn_ra_serf__ns_t</name> *</type><name>ns</name></decl>, *<decl><type ref="prev"/><name>ns_name_match</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>report_info_t</name> *</type><name>info</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>report_dir_t</name> *</type><name>dir</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>set_val</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_string_t</name> *</type><name>set_val_str</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>info</name> = <name><name>parser</name>-&gt;<name>state</name>-&gt;<name>private</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>dir</name> = <name><name>info</name>-&gt;<name>dir</name></name></expr>;</expr_stmt>

      <comment type="block">/* We're going to be slightly tricky.  We don't care what the -&gt;url
       * field is here at this point.  So, we're going to stick a single
       * copy of the property name inside of the -&gt;url field.
       */</comment>
      <expr_stmt><expr><name>ns_name_match</name> = <name>NULL</name></expr>;</expr_stmt>
      <for>for (<init><expr><name>ns</name> = <name><name>dir</name>-&gt;<name>ns_list</name></name></expr>;</init> <condition><expr><name>ns</name></expr>;</condition> <incr><expr><name>ns</name> = <name><name>ns</name>-&gt;<name>next</name></name></expr></incr>)
        <block>{
          <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ns</name>-&gt;<name>namespace</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>prop_ns</name></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
            <block>{
              <expr_stmt><expr><name>ns_name_match</name> = <name>ns</name></expr>;</expr_stmt>
              <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ns</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>prop_name</name></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
                <block>{
                  <expr_stmt><expr><name>found</name> = 1</expr>;</expr_stmt>
                  <break>break;</break>
                }</block></then></if>
            }</block></then></if>
        }</block></for>

      <if>if <condition>(<expr>!<name>found</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>ns</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>dir</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>ns</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr>!<name>ns_name_match</name></expr>)</condition><then>
            <block>{
              <expr_stmt><expr><name><name>ns</name>-&gt;<name>namespace</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>dir</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>prop_ns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
          <else>else
            <block>{
              <expr_stmt><expr><name><name>ns</name>-&gt;<name>namespace</name></name> = <name><name>ns_name_match</name>-&gt;<name>namespace</name></name></expr>;</expr_stmt>
            }</block></else></if>
          <expr_stmt><expr><name><name>ns</name>-&gt;<name>url</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>dir</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>prop_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><name><name>ns</name>-&gt;<name>next</name></name> = <name><name>dir</name>-&gt;<name>ns_list</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>dir</name>-&gt;<name>ns_list</name></name> = <name>ns</name></expr>;</expr_stmt>
        }</block></then></if>

      <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"remove-prop"</expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>props</name> = <name><name>info</name>-&gt;<name>props</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name>pool</name> = <name><name>info</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
        }</block></then>
      <else>else
        <block>{
          <expr_stmt><expr><name>props</name> = <name><name>dir</name>-&gt;<name>removed_props</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name>pool</name> = <name><name>dir</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>info</name>-&gt;<name>prop_val</name></name> = ""</expr>;</expr_stmt>
          <expr_stmt><expr><name><name>info</name>-&gt;<name>prop_val_len</name></name> = 1</expr>;</expr_stmt>
        }</block></else></if>

      <if>if <condition>(<expr><name><name>info</name>-&gt;<name>prop_encoding</name></name></expr>)</condition><then>
        <block>{
          <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>prop_encoding</name></name></expr></argument>, <argument><expr>"base64"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
            <block>{
              <decl_stmt><decl><type><name>svn_string_t</name></type> <name>encoded</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>decoded</name></decl>;</decl_stmt>

              <expr_stmt><expr><name><name>encoded</name>.<name>data</name></name> = <name><name>info</name>-&gt;<name>prop_val</name></name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>encoded</name>.<name>len</name></name> = <name><name>info</name>-&gt;<name>prop_val_len</name></name></expr>;</expr_stmt>

              <expr_stmt><expr><name>decoded</name> = <call><name>svn_base64_decode_string</name><argument_list>(<argument><expr>&amp;<name>encoded</name></expr></argument>, <argument><expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

              <expr_stmt><expr><name><name>info</name>-&gt;<name>prop_val</name></name> = <name><name>decoded</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>info</name>-&gt;<name>prop_val_len</name></name> = <name><name>decoded</name>-&gt;<name>len</name></name></expr>;</expr_stmt>
            }</block></then>
          <else>else
            <block>{
              <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>,
                                       <argument><expr><name>NULL</name></expr></argument>,
                                       <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Got unrecognized encoding '%s'"</expr></argument>)</argument_list></call></expr></argument>,
                                       <argument><expr><name><name>info</name>-&gt;<name>prop_encoding</name></name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></else></if>

        }</block></then></if>

      <expr_stmt><expr><name>set_val</name> = <call><name>apr_pmemdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>prop_val</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>prop_val_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>set_val_str</name> = <call><name>svn_string_ncreate</name><argument_list>(<argument><expr><name>set_val</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>prop_val_len</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>svn_ra_serf__set_ver_prop</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>base_name</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>base_rev</name></name></expr></argument>,
                                <argument><expr><name><name>ns</name>-&gt;<name>namespace</name></name></expr></argument>, <argument><expr><name><name>ns</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name>set_val_str</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>svn_ra_serf__xml_pop_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>state</name> == <name>IGNORE_PROP_NAME</name> || <name>state</name> == <name>NEED_PROP_NAME</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_ra_serf__xml_pop_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></else></if></else></if></else></if></else></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>cdata_report</name><parameter_list>(<param><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser</name></decl></param>,
             <param><decl><type><name>void</name> *</type><name>userData</name></decl></param>,
             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>,
             <param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>report_context_t</name> *</type><name>ctx</name> <init>= <expr><name>userData</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>UNUSED_CTX</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>current_state</name></name> == <name>PROP</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>report_info_t</name> *</type><name>info</name> <init>= <expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>private</name></name></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>svn_ra_serf__expand_string</name><argument_list>(<argument><expr>&amp;<name><name>info</name>-&gt;<name>prop_val</name></name></expr></argument>, <argument><expr>&amp;<name><name>info</name>-&gt;<name>prop_val_len</name></name></expr></argument>,
                                 <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<escape char="0xc"/>
<comment type="block">/** Editor callbacks given to callers to create request body */</comment>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>set_path</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>report_baton</name></decl></param>,
         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
         <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
         <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
         <param><decl><type><name>svn_boolean_t</name></type> <name>start_empty</name></decl></param>,
         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lock_token</name></decl></param>,
         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>report_context_t</name> *</type><name>report</name> <init>= <expr><name>report_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>serf_bucket_t</name> *</type><name>tmp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>path_buf</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr>"&lt;S:entry rev=\""</expr></argument>,
                                      <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>"&lt;S:entry rev=\""</expr></argument>)</argument_list></sizeof>-1</expr></argument>,
                                      <argument><expr><name><name>report</name>-&gt;<name>sess</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>buckets</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING</name><argument_list>(<argument><expr><call><name>apr_ltoa</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>revision</name></expr></argument>)</argument_list></call></expr></argument>,
                                  <argument><expr><name><name>report</name>-&gt;<name>sess</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>buckets</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr>"\""</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>"\""</expr></argument>)</argument_list></sizeof>-1</expr></argument>,
                                      <argument><expr><name><name>report</name>-&gt;<name>sess</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>buckets</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>lock_token</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>lock_path_tokens</name></name></expr></argument>,
                   <argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>,
                   <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                   <argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>lock_token</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr>" lock-token=\""</expr></argument>,
                                          <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>" lock-token=\""</expr></argument>)</argument_list></sizeof>-1</expr></argument>,
                                          <argument><expr><name><name>report</name>-&gt;<name>sess</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>buckets</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING</name><argument_list>(<argument><expr><name>lock_token</name></expr></argument>,
                                      <argument><expr><name><name>report</name>-&gt;<name>sess</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>buckets</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr>"\""</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>"\""</expr></argument>)</argument_list></sizeof>-1</expr></argument>,
                                          <argument><expr><name><name>report</name>-&gt;<name>sess</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>buckets</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <comment type="block">/* Depth. */</comment>
  <expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr>" depth=\""</expr></argument>,
                                      <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>" depth=\""</expr></argument>)</argument_list></sizeof>-1</expr></argument>,
                                      <argument><expr><name><name>report</name>-&gt;<name>sess</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>buckets</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING</name><argument_list>(<argument><expr><call><name>svn_depth_to_word</name><argument_list>(<argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr></argument>,
                                  <argument><expr><name><name>report</name>-&gt;<name>sess</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>buckets</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr>"\""</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>"\""</expr></argument>)</argument_list></sizeof>-1</expr></argument>,
                                      <argument><expr><name><name>report</name>-&gt;<name>sess</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>buckets</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>start_empty</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr>" start-empty=\"true\""</expr></argument>,
                                          <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>" start-empty=\"true\""</expr></argument>)</argument_list></sizeof>-1</expr></argument>,
                                          <argument><expr><name><name>report</name>-&gt;<name>sess</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>buckets</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr>"&gt;"</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>"&gt;"</expr></argument>)</argument_list></sizeof>-1</expr></argument>,
                                      <argument><expr><name><name>report</name>-&gt;<name>sess</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>buckets</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>path_buf</name> = <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_xml_escape_cdata_cstring</name><argument_list>(<argument><expr>&amp;<name>path_buf</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>report</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr><name><name>path_buf</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>path_buf</name>-&gt;<name>len</name></name></expr></argument>,
                                      <argument><expr><name><name>report</name>-&gt;<name>sess</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>buckets</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr>"&lt;/S:entry&gt;"</expr></argument>,
                                      <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>"&lt;/S:entry&gt;"</expr></argument>)</argument_list></sizeof>-1</expr></argument>,
                                      <argument><expr><name><name>report</name>-&gt;<name>sess</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>buckets</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>delete_path</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>report_baton</name></decl></param>,
            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>report_context_t</name> *</type><name>report</name> <init>= <expr><name>report_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>serf_bucket_t</name> *</type><name>tmp</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr>"&lt;S:missing&gt;"</expr></argument>,
                                      <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>"&lt;S:missing&gt;"</expr></argument>)</argument_list></sizeof>-1</expr></argument>,
                                      <argument><expr><name><name>report</name>-&gt;<name>sess</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>buckets</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING</name><argument_list>(<argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>,
                                  <argument><expr><name><name>report</name>-&gt;<name>sess</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>buckets</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr>"&lt;/S:missing&gt;"</expr></argument>,
                                      <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>"&lt;/S:missing&gt;"</expr></argument>)</argument_list></sizeof>-1</expr></argument>,
                                      <argument><expr><name><name>report</name>-&gt;<name>sess</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>buckets</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>link_path</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>report_baton</name></decl></param>,
          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
          <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
          <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
          <param><decl><type><name>svn_boolean_t</name></type> <name>start_empty</name></decl></param>,
          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lock_token</name></decl></param>,
          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>report_context_t</name> *</type><name>report</name> <init>= <expr><name>report_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>serf_bucket_t</name> *</type><name>tmp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>link</name></decl>, *<decl><type ref="prev"/><name>vcc_url</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_uri_t</name></type> <name>uri</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr>"&lt;S:entry rev=\""</expr></argument>,
                                      <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>"&lt;S:entry rev=\""</expr></argument>)</argument_list></sizeof>-1</expr></argument>,
                                      <argument><expr><name><name>report</name>-&gt;<name>sess</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>buckets</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING</name><argument_list>(<argument><expr><call><name>apr_ltoa</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>revision</name></expr></argument>)</argument_list></call></expr></argument>,
                                  <argument><expr><name><name>report</name>-&gt;<name>sess</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>buckets</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr>"\""</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>"\""</expr></argument>)</argument_list></sizeof>-1</expr></argument>,
                                      <argument><expr><name><name>report</name>-&gt;<name>sess</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>buckets</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>lock_token</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>lock_path_tokens</name></name></expr></argument>,
                   <argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>,
                   <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                   <argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>lock_token</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr>" lock-token=\""</expr></argument>,
                                          <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>" lock-token=\""</expr></argument>)</argument_list></sizeof>-1</expr></argument>,
                                          <argument><expr><name><name>report</name>-&gt;<name>sess</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>buckets</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING</name><argument_list>(<argument><expr><name>lock_token</name></expr></argument>,
                                      <argument><expr><name><name>report</name>-&gt;<name>sess</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>buckets</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr>"\""</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>"\""</expr></argument>)</argument_list></sizeof>-1</expr></argument>,
                                          <argument><expr><name><name>report</name>-&gt;<name>sess</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>buckets</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <comment type="block">/* Depth. */</comment>
  <expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr>" depth=\""</expr></argument>,
                                      <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>" depth=\""</expr></argument>)</argument_list></sizeof>-1</expr></argument>,
                                      <argument><expr><name><name>report</name>-&gt;<name>sess</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>buckets</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING</name><argument_list>(<argument><expr><call><name>svn_depth_to_word</name><argument_list>(<argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr></argument>,
                                  <argument><expr><name><name>report</name>-&gt;<name>sess</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>buckets</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr>"\""</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>"\""</expr></argument>)</argument_list></sizeof>-1</expr></argument>,
                                      <argument><expr><name><name>report</name>-&gt;<name>sess</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>buckets</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>start_empty</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr>" start-empty=\"true\""</expr></argument>,
                                          <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>" start-empty=\"true\""</expr></argument>)</argument_list></sizeof>-1</expr></argument>,
                                          <argument><expr><name><name>report</name>-&gt;<name>sess</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>buckets</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr>" linkpath=\"/"</expr></argument>,
                                      <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>" linkpath=\"/"</expr></argument>)</argument_list></sizeof>-1</expr></argument>,
                                      <argument><expr><name><name>report</name>-&gt;<name>sess</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>buckets</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* We need to pass in the baseline relative path.
   *
   * TODO Confirm that it's on the same server?
   */</comment>
  <expr_stmt><expr><name>status</name> = <call><name>apr_uri_parse</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr>&amp;<name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>status</name></expr>)</condition><then>
    <block>{
      <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                               <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Unable to parse URL '%s'"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_serf__discover_root</name><argument_list>(<argument><expr>&amp;<name>vcc_url</name></expr></argument>, <argument><expr>&amp;<name>link</name></expr></argument>, <argument><expr><name><name>report</name>-&gt;<name>sess</name></name></expr></argument>,
                                     <argument><expr><name><name>report</name>-&gt;<name>sess</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name><name>uri</name>.<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING</name><argument_list>(<argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr></argument>,
                                  <argument><expr><name><name>report</name>-&gt;<name>sess</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>buckets</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr>"\""</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>"\""</expr></argument>)</argument_list></sizeof>-1</expr></argument>,
                                      <argument><expr><name><name>report</name>-&gt;<name>sess</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>buckets</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr>"&gt;"</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>"&gt;"</expr></argument>)</argument_list></sizeof>-1</expr></argument>,
                                      <argument><expr><name><name>report</name>-&gt;<name>sess</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>buckets</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING</name><argument_list>(<argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>,
                                  <argument><expr><name><name>report</name>-&gt;<name>sess</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>buckets</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr>"&lt;/S:entry&gt;"</expr></argument>,
                                      <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>"&lt;/S:entry&gt;"</expr></argument>)</argument_list></sizeof>-1</expr></argument>,
                                      <argument><expr><name><name>report</name>-&gt;<name>sess</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>buckets</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>finish_report</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>report_baton</name></decl></param>,
              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>report_context_t</name> *</type><name>report</name> <init>= <expr><name>report_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra_serf__session_t</name> *</type><name>sess</name> <init>= <expr><name><name>report</name>-&gt;<name>sess</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra_serf__handler_t</name> *</type><name>handler</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser_ctx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra_serf__list_t</name> *</type><name>done_list</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>serf_bucket_t</name> *</type><name>tmp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>vcc_url</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>closed_root</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr>"&lt;/S:update-report&gt;"</expr></argument>,
                                      <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>"&lt;/S:update-report&gt;"</expr></argument>)</argument_list></sizeof>-1</expr></argument>,
                                      <argument><expr><name><name>report</name>-&gt;<name>sess</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>buckets</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>props</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_serf__discover_root</name><argument_list>(<argument><expr>&amp;<name>vcc_url</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sess</name></expr></argument>, <argument><expr><name><name>sess</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name></expr></argument>,
                                      <argument><expr><name><name>sess</name>-&gt;<name>repos_url</name>.<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<name>vcc_url</name></expr>)</condition><then>
    <block>{
      <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_OPTIONS_REQ_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                              <argument><expr><call><name>_</name><argument_list>(<argument><expr>"The OPTIONS response did not include the "
                                "requested version-controlled-configuration "
                                "value"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

  <comment type="block">/* create and deliver request */</comment>
  <expr_stmt><expr><name><name>report</name>-&gt;<name>path</name></name> = <name>vcc_url</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>handler</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>handler</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>handler</name>-&gt;<name>method</name></name> = "REPORT"</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>handler</name>-&gt;<name>path</name></name> = <name><name>report</name>-&gt;<name>path</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>handler</name>-&gt;<name>body_buckets</name></name> = <name><name>report</name>-&gt;<name>buckets</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>handler</name>-&gt;<name>body_type</name></name> = "text/xml"</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>handler</name>-&gt;<name>conn</name></name> = <name><name>sess</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>handler</name>-&gt;<name>session</name></name> = <name>sess</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>parser_ctx</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>parser_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>user_data</name></name> = <name>report</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>start</name></name> = <name>start_report</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>end</name></name> = <name>end_report</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>cdata</name></name> = <name>cdata_report</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>done</name></name> = &amp;<name><name>report</name>-&gt;<name>done</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>handler</name>-&gt;<name>response_handler</name></name> = <name>svn_ra_serf__handle_xml_parser</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>handler</name>-&gt;<name>response_baton</name></name> = <name>parser_ctx</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>svn_ra_serf__request_create</name><argument_list>(<argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for (<init><expr><name>i</name> = <name><name>sess</name>-&gt;<name>num_conns</name></name></expr>;</init> <condition><expr><name>i</name> &lt; 4</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <expr_stmt><expr><name><name>sess</name>-&gt;<name>conns</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>sess</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name><name>sess</name>-&gt;<name>conns</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>sess</name>-&gt;<name>conns</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>bkt_alloc</name> = <call><name>serf_bucket_allocator_create</name><argument_list>(<argument><expr><name><name>sess</name>-&gt;<name>pool</name></name></expr></argument>,
                                                               <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>sess</name>-&gt;<name>conns</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>address</name> = <name><name>sess</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name>-&gt;<name>address</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>sess</name>-&gt;<name>conns</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>hostinfo</name> = <name><name>sess</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name>-&gt;<name>hostinfo</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>sess</name>-&gt;<name>conns</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>using_ssl</name> = <name><name>sess</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name>-&gt;<name>using_ssl</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>sess</name>-&gt;<name>conns</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>using_compression</name> = <name><name>sess</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name>-&gt;<name>using_compression</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>sess</name>-&gt;<name>conns</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>proxy_auth_header</name> = <name><name>sess</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name>-&gt;<name>proxy_auth_header</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>sess</name>-&gt;<name>conns</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>proxy_auth_value</name> = <name><name>sess</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name>-&gt;<name>proxy_auth_value</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>sess</name>-&gt;<name>conns</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>useragent</name> = <name><name>sess</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name>-&gt;<name>useragent</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>sess</name>-&gt;<name>conns</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>last_status_code</name> = -1</expr>;</expr_stmt>
      <expr_stmt><expr><name><name>sess</name>-&gt;<name>conns</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>ssl_context</name> = <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>sess</name>-&gt;<name>conns</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>session</name> = <name>sess</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>sess</name>-&gt;<name>conns</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>conn</name> = <call><name>serf_connection_create</name><argument_list>(<argument><expr><name><name>sess</name>-&gt;<name>context</name></name></expr></argument>,
                                                    <argument><expr><name><name>sess</name>-&gt;<name>conns</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>address</name></expr></argument>,
                                                    <argument><expr><name>svn_ra_serf__conn_setup</name></expr></argument>,
                                                    <argument><expr><name><name>sess</name>-&gt;<name>conns</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
                                                    <argument><expr><name>svn_ra_serf__conn_closed</name></expr></argument>,
                                                    <argument><expr><name><name>sess</name>-&gt;<name>conns</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
                                                    <argument><expr><name><name>sess</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>sess</name>-&gt;<name>num_conns</name></name>++</expr>;</expr_stmt>

      <comment type="block">/* Authentication protocol specific initalization. */</comment>
      <if>if <condition>(<expr><name><name>sess</name>-&gt;<name>auth_protocol</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name><name>sess</name>-&gt;<name>auth_protocol</name>-&gt;<name>init_conn_func</name></name><argument_list>(<argument><expr><name>sess</name></expr></argument>, <argument><expr><name><name>sess</name>-&gt;<name>conns</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></for>

  <expr_stmt><expr><name><name>sess</name>-&gt;<name>cur_conn</name></name> = 1</expr>;</expr_stmt>
  <expr_stmt><expr><name>closed_root</name> = <name>FALSE</name></expr>;</expr_stmt>

  <while>while <condition>(<expr>!<name><name>report</name>-&gt;<name>done</name></name> || <name><name>report</name>-&gt;<name>active_fetches</name></name> || <name><name>report</name>-&gt;<name>active_propfinds</name></name></expr>)</condition>
    <block>{
      <expr_stmt><expr><name>status</name> = <call><name>serf_context_run</name><argument_list>(<argument><expr><name><name>sess</name>-&gt;<name>context</name></name></expr></argument>, <argument><expr><name>SERF_DURATION_FOREVER</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><call><name>APR_STATUS_IS_TIMEUP</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
          <continue>continue;</continue>
        }</block></then></if>
      <if>if <condition>(<expr><name>status</name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name><name>parser_ctx</name>-&gt;<name>error</name></name></expr></init></decl>;</decl_stmt>

          <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name><name>sess</name>-&gt;<name>pending_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><name><name>parser_ctx</name>-&gt;<name>error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><name><name>sess</name>-&gt;<name>pending_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <return>return <expr><call><name>svn_error_wrap_apr</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Error retrieving REPORT (%d)"</expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

      <comment type="block">/* Switch our connection. */</comment>
      <if>if <condition>(<expr>!<name><name>report</name>-&gt;<name>done</name></name></expr>)</condition><then>
         <if>if <condition>(<expr>++<name><name>sess</name>-&gt;<name>cur_conn</name></name> == <name><name>sess</name>-&gt;<name>num_conns</name></name></expr>)</condition><then>
             <expr_stmt><expr><name><name>sess</name>-&gt;<name>cur_conn</name></name> = 1</expr>;</expr_stmt></then></if></then></if>

      <comment type="block">/* prune our propfind list if they are done. */</comment>
      <expr_stmt><expr><name>done_list</name> = <name><name>report</name>-&gt;<name>done_propfinds</name></name></expr>;</expr_stmt>
      <while>while <condition>(<expr><name>done_list</name></expr>)</condition>
        <block>{
          <expr_stmt><expr><name><name>report</name>-&gt;<name>active_propfinds</name></name>--</expr>;</expr_stmt>

          <comment type="block">/* If we have some files that we won't be fetching the content
           * for, ensure that we update the file with any altered props.
           */</comment>
          <if>if <condition>(<expr><name><name>report</name>-&gt;<name>file_propchanges_only</name></name></expr>)</condition><then>
            <block>{
              <decl_stmt><decl><type><name>svn_ra_serf__list_t</name> *</type><name>cur</name></decl>, *<decl><type ref="prev"/><name>prev</name></decl>;</decl_stmt>

              <expr_stmt><expr><name>prev</name> = <name>NULL</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>cur</name> = <name><name>report</name>-&gt;<name>file_propchanges_only</name></name></expr>;</expr_stmt>

              <while>while <condition>(<expr><name>cur</name></expr>)</condition>
                <block>{
                  <decl_stmt><decl><type><name>report_info_t</name> *</type><name>item</name> <init>= <expr><name><name>cur</name>-&gt;<name>data</name></name></expr></init></decl>;</decl_stmt>

                  <if>if <condition>(<expr><name><name>item</name>-&gt;<name>propfind</name></name> == <name><name>done_list</name>-&gt;<name>data</name></name></expr>)</condition><then>
                    <block>{
                      <break>break;</break>
                    }</block></then></if>

                  <expr_stmt><expr><name>prev</name> = <name>cur</name></expr>;</expr_stmt>
                  <expr_stmt><expr><name>cur</name> = <name><name>cur</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
                }</block></while>

              <comment type="block">/* If we found a match, set the new props and remove this
               * propchange from our list.
               */</comment>
              <if>if <condition>(<expr><name>cur</name></expr>)</condition><then>
                <block>{
                  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>handle_propchange_only</name><argument_list>(<argument><expr><name><name>cur</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                  <if>if <condition>(<expr>!<name>prev</name></expr>)</condition><then>
                    <block>{
                      <expr_stmt><expr><name><name>report</name>-&gt;<name>file_propchanges_only</name></name> = <name><name>cur</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
                    }</block></then>
                  <else>else
                    <block>{
                      <expr_stmt><expr><name><name>prev</name>-&gt;<name>next</name></name> = <name><name>cur</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then></if>
            }</block></then></if>

          <expr_stmt><expr><name>done_list</name> = <name><name>done_list</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
        }</block></while>
      <expr_stmt><expr><name><name>report</name>-&gt;<name>done_propfinds</name></name> = <name>NULL</name></expr>;</expr_stmt>

      <comment type="block">/* prune our fetches list if they are done. */</comment>
      <expr_stmt><expr><name>done_list</name> = <name><name>report</name>-&gt;<name>done_fetches</name></name></expr>;</expr_stmt>
      <while>while <condition>(<expr><name>done_list</name></expr>)</condition>
        <block>{
          <decl_stmt><decl><type><name>report_fetch_t</name> *</type><name>done_fetch</name> <init>= <expr><name><name>done_list</name>-&gt;<name>data</name></name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>report_dir_t</name> *</type><name>cur_dir</name></decl>;</decl_stmt>

          <if>if <condition>(<expr><name><name>done_fetch</name>-&gt;<name>err</name></name></expr>)</condition><then>
            <block>{
              <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name><name>done_fetch</name>-&gt;<name>err</name></name></expr></init></decl>;</decl_stmt>
              <comment type="block">/* Error found. There might be more, clear those first. */</comment>
              <expr_stmt><expr><name>done_list</name> = <name><name>done_list</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
              <while>while <condition>(<expr><name>done_list</name></expr>)</condition>
                <block>{
                  <expr_stmt><expr><name>done_fetch</name> = <name><name>done_list</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
                  <if>if <condition>(<expr><name><name>done_fetch</name>-&gt;<name>err</name></name></expr>)</condition><then>
                    <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name><name>done_fetch</name>-&gt;<name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                  <expr_stmt><expr><name>done_list</name> = <name><name>done_list</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
                }</block></while>
              <return>return <expr><name>err</name></expr>;</return>
            }</block></then></if>

          <comment type="block">/* decrease our parent's directory refcount. */</comment>
          <expr_stmt><expr><name>cur_dir</name> = <name><name>done_fetch</name>-&gt;<name>info</name>-&gt;<name>dir</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>cur_dir</name>-&gt;<name>ref_count</name></name>--</expr>;</expr_stmt>

          <comment type="block">/* Decrement our active fetch count. */</comment>
          <expr_stmt><expr><name><name>report</name>-&gt;<name>active_fetches</name></name>--</expr>;</expr_stmt>

          <expr_stmt><expr><name>done_list</name> = <name><name>done_list</name>-&gt;<name>next</name></name></expr>;</expr_stmt>

          <comment type="block">/* If we have a valid directory and
           * we have no open items in this dir and
           * we've closed the directory tag (no more children can be added)
           * and either:
           *   we know we won't be fetching props or
           *   we've already completed the propfind
           * then, we know it's time for us to close this directory.
           */</comment>
          <while>while <condition>(<expr><name>cur_dir</name> &amp;&amp; !<name><name>cur_dir</name>-&gt;<name>ref_count</name></name> &amp;&amp; <name><name>cur_dir</name>-&gt;<name>tag_closed</name></name> &amp;&amp;
                 (!<name><name>cur_dir</name>-&gt;<name>fetch_props</name></name> ||
                  <call><name>svn_ra_serf__propfind_is_done</name><argument_list>(<argument><expr><name><name>cur_dir</name>-&gt;<name>propfind</name></name></expr></argument>)</argument_list></call>)</expr>)</condition>
            <block>{
              <decl_stmt><decl><type><name>report_dir_t</name> *</type><name>parent</name> <init>= <expr><name><name>cur_dir</name>-&gt;<name>parent_dir</name></name></expr></init></decl>;</decl_stmt>

              <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>close_dir</name><argument_list>(<argument><expr><name>cur_dir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <if>if <condition>(<expr><name>parent</name></expr>)</condition><then>
                <block>{
                  <expr_stmt><expr><name><name>parent</name>-&gt;<name>ref_count</name></name>--</expr>;</expr_stmt>
                }</block></then>
              <else>else
                <block>{
                  <expr_stmt><expr><name>closed_root</name> = <name>TRUE</name></expr>;</expr_stmt>
                }</block></else></if>
              <expr_stmt><expr><name>cur_dir</name> = <name>parent</name></expr>;</expr_stmt>
            }</block></while>
        }</block></while>
      <expr_stmt><expr><name><name>report</name>-&gt;<name>done_fetches</name></name> = <name>NULL</name></expr>;</expr_stmt>

      <comment type="block">/* Debugging purposes only! */</comment>
      <expr_stmt><expr><call><name>serf_debug__closed_conn</name><argument_list>(<argument><expr><name><name>sess</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>sess</name>-&gt;<name>num_conns</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
         <expr_stmt><expr><call><name>serf_debug__closed_conn</name><argument_list>(<argument><expr><name><name>sess</name>-&gt;<name>conns</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>bkt_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></while>

  <comment type="block">/* Ensure that we opened and closed our root dir and that we closed
   * all of our children. */</comment>
  <if>if <condition>(<expr><name>closed_root</name> == <name>FALSE</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>close_all_dirs</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>root_dir</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <comment type="block">/* FIXME subpool */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>report</name>-&gt;<name>update_editor</name>-&gt;<name>close_edit</name></name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>update_baton</name></name></expr></argument>, <argument><expr><name><name>sess</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>abort_report</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>report_baton</name></decl></param>,
             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
  report_context_t *report = report_baton;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_ra_reporter3_t</name></type> <name>ra_serf_reporter</name> <init>= <expr><block>{
  <expr><name>set_path</name></expr>,
  <expr><name>delete_path</name></expr>,
  <expr><name>link_path</name></expr>,
  <expr><name>finish_report</name></expr>,
  <expr><name>abort_report</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<escape char="0xc"/>
<comment type="block">/** RA function implementations and body */</comment>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>make_update_reporter</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>svn_ra_reporter3_t</name> **</type><name>reporter</name></decl></param>,
                     <param><decl><type><name>void</name> **</type><name>report_baton</name></decl></param>,
                     <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_path</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dest_path</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>update_target</name></decl></param>,
                     <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                     <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl></param>,
                     <param><decl><type><name>svn_boolean_t</name></type> <name>text_deltas</name></decl></param>,
                     <param><decl><type><name>svn_boolean_t</name></type> <name>send_copyfrom_args</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>update_editor</name></decl></param>,
                     <param><decl><type><name>void</name> *</type><name>update_baton</name></decl></param>,
                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>report_context_t</name> *</type><name>report</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>serf_bucket_t</name> *</type><name>tmp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>path_buf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>filter_editor</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>filter_baton</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>has_target</name> <init>= <expr>*<name>update_target</name> ? <name>TRUE</name> : <name>FALSE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>server_supports_depth</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra_serf__session_t</name> *</type><name>sess</name> <init>= <expr><name><name>ra_session</name>-&gt;<name>priv</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_serf__has_capability</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>&amp;<name>server_supports_depth</name></expr></argument>,
                                      <argument><expr><name>SVN_RA_CAPABILITY_DEPTH</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* We can skip the depth filtering when the user requested
     depth_files or depth_infinity because the server will
     transmit the right stuff anyway. */</comment>
  <if>if <condition>(<expr>(<name>depth</name> != <name>svn_depth_files</name>)
      &amp;&amp; (<name>depth</name> != <name>svn_depth_infinity</name>)
      &amp;&amp; ! <name>server_supports_depth</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_delta_depth_filter_editor</name><argument_list>(<argument><expr>&amp;<name>filter_editor</name></expr></argument>,
                                            <argument><expr>&amp;<name>filter_baton</name></expr></argument>,
                                            <argument><expr><name>update_editor</name></expr></argument>,
                                            <argument><expr><name>update_baton</name></expr></argument>,
                                            <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>has_target</name></expr></argument>,
                                            <argument><expr><name><name>sess</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>update_editor</name> = <name>filter_editor</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>update_baton</name> = <name>filter_baton</name></expr>;</expr_stmt>
    }</block></then></if>

  <expr_stmt><expr><name>report</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>report</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>report</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>report</name>-&gt;<name>sess</name></name> = <name>sess</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>report</name>-&gt;<name>conn</name></name> = <name><name>report</name>-&gt;<name>sess</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>report</name>-&gt;<name>target_rev</name></name> = <name>revision</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>report</name>-&gt;<name>ignore_ancestry</name></name> = <name>ignore_ancestry</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>report</name>-&gt;<name>send_copyfrom_args</name></name> = <name>send_copyfrom_args</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>report</name>-&gt;<name>text_deltas</name></name> = <name>text_deltas</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>report</name>-&gt;<name>lock_path_tokens</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>src_path</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>path_buf</name> = <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>svn_xml_escape_cdata_cstring</name><argument_list>(<argument><expr>&amp;<name>path_buf</name></expr></argument>, <argument><expr><name>src_path</name></expr></argument>, <argument><expr><name><name>report</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>report</name>-&gt;<name>source</name></name> = <name><name>path_buf</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
    }</block></then></if>

  <if>if <condition>(<expr><name>dest_path</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>path_buf</name> = <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>svn_xml_escape_cdata_cstring</name><argument_list>(<argument><expr>&amp;<name>path_buf</name></expr></argument>, <argument><expr><name>dest_path</name></expr></argument>, <argument><expr><name><name>report</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>report</name>-&gt;<name>destination</name></name> = <name><name>path_buf</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
    }</block></then></if>

  <if>if <condition>(<expr><name>update_target</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>path_buf</name> = <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>svn_xml_escape_cdata_cstring</name><argument_list>(<argument><expr>&amp;<name>path_buf</name></expr></argument>, <argument><expr><name>update_target</name></expr></argument>, <argument><expr><name><name>report</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>report</name>-&gt;<name>update_target</name></name> = <name><name>path_buf</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
    }</block></then></if>

  <expr_stmt><expr><name><name>report</name>-&gt;<name>update_editor</name></name> = <name>update_editor</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>report</name>-&gt;<name>update_baton</name></name> = <name>update_baton</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>report</name>-&gt;<name>done</name></name> = <name>FALSE</name></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>reporter</name> = &amp;<name>ra_serf_reporter</name></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>report_baton</name> = <name>report</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>report</name>-&gt;<name>buckets</name></name> = <call><name>serf_bucket_aggregate_create</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>sess</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr>"&lt;S:update-report xmlns:S=\""</expr></argument>,
                                      <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>"&lt;S:update-report xmlns:S=\""</expr></argument>)</argument_list></sizeof>-1</expr></argument>,
                                      <argument><expr><name><name>report</name>-&gt;<name>sess</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>buckets</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr><name>SVN_XML_NAMESPACE</name></expr></argument>,
                                      <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVN_XML_NAMESPACE</name></expr></argument>)</argument_list></sizeof>-1</expr></argument>,
                                      <argument><expr><name><name>report</name>-&gt;<name>sess</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>buckets</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr>"\"&gt;"</expr></argument>,
                                      <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>"\"&gt;"</expr></argument>)</argument_list></sizeof>-1</expr></argument>,
                                      <argument><expr><name><name>report</name>-&gt;<name>sess</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>buckets</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>svn_ra_serf__add_tag_buckets</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>buckets</name></name></expr></argument>,
                               <argument><expr>"S:src-path"</expr></argument>, <argument><expr><name><name>report</name>-&gt;<name>source</name></name></expr></argument>,
                               <argument><expr><name><name>report</name>-&gt;<name>sess</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>target_rev</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_ra_serf__add_tag_buckets</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>buckets</name></name></expr></argument>,
                                   <argument><expr>"S:target-revision"</expr></argument>,
                                   <argument><expr><call><name>apr_ltoa</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>report</name>-&gt;<name>target_rev</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                   <argument><expr><name><name>report</name>-&gt;<name>sess</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <if>if <condition>(<expr><name><name>report</name>-&gt;<name>destination</name></name> &amp;&amp; *<name><name>report</name>-&gt;<name>destination</name></name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_ra_serf__add_tag_buckets</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>buckets</name></name></expr></argument>,
                                   <argument><expr>"S:dst-path"</expr></argument>,
                                   <argument><expr><name><name>report</name>-&gt;<name>destination</name></name></expr></argument>,
                                   <argument><expr><name><name>report</name>-&gt;<name>sess</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <if>if <condition>(<expr><name><name>report</name>-&gt;<name>update_target</name></name> &amp;&amp; *<name><name>report</name>-&gt;<name>update_target</name></name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_ra_serf__add_tag_buckets</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>buckets</name></name></expr></argument>,
                                   <argument><expr>"S:update-target"</expr></argument>, <argument><expr><name><name>report</name>-&gt;<name>update_target</name></name></expr></argument>,
                                   <argument><expr><name><name>report</name>-&gt;<name>sess</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <if>if <condition>(<expr><name><name>report</name>-&gt;<name>ignore_ancestry</name></name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_ra_serf__add_tag_buckets</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>buckets</name></name></expr></argument>,
                                   <argument><expr>"S:ignore-ancestry"</expr></argument>, <argument><expr>"yes"</expr></argument>,
                                   <argument><expr><name><name>report</name>-&gt;<name>sess</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <if>if <condition>(<expr><name><name>report</name>-&gt;<name>send_copyfrom_args</name></name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_ra_serf__add_tag_buckets</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>buckets</name></name></expr></argument>,
                                   <argument><expr>"S:send-copyfrom-args"</expr></argument>, <argument><expr>"yes"</expr></argument>,
                                   <argument><expr><name><name>report</name>-&gt;<name>sess</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <comment type="block">/* Old servers know "recursive" but not "depth"; help them DTRT. */</comment>
  <if>if <condition>(<expr><name>depth</name> == <name>svn_depth_files</name> || <name>depth</name> == <name>svn_depth_empty</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_ra_serf__add_tag_buckets</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>buckets</name></name></expr></argument>,
                                   <argument><expr>"S:recursive"</expr></argument>, <argument><expr>"no"</expr></argument>,
                                   <argument><expr><name><name>report</name>-&gt;<name>sess</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <expr_stmt><expr><call><name>svn_ra_serf__add_tag_buckets</name><argument_list>(<argument><expr><name><name>report</name>-&gt;<name>buckets</name></name></expr></argument>,
                               <argument><expr>"S:depth"</expr></argument>, <argument><expr><call><name>svn_depth_to_word</name><argument_list>(<argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><name><name>report</name>-&gt;<name>sess</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__do_update</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>svn_ra_reporter3_t</name> **</type><name>reporter</name></decl></param>,
                       <param><decl><type><name>void</name> **</type><name>report_baton</name></decl></param>,
                       <param><decl><type><name>svn_revnum_t</name></type> <name>revision_to_update_to</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>update_target</name></decl></param>,
                       <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                       <param><decl><type><name>svn_boolean_t</name></type> <name>send_copyfrom_args</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>update_editor</name></decl></param>,
                       <param><decl><type><name>void</name> *</type><name>update_baton</name></decl></param>,
                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name> <init>= <expr><name><name>ra_session</name>-&gt;<name>priv</name></name></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name>make_update_reporter</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>reporter</name></expr></argument>, <argument><expr><name>report_baton</name></expr></argument>,
                              <argument><expr><name>revision_to_update_to</name></expr></argument>,
                              <argument><expr><name><name>session</name>-&gt;<name>repos_url</name>.<name>path</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>update_target</name></expr></argument>,
                              <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>send_copyfrom_args</name></expr></argument>,
                              <argument><expr><name>update_editor</name></expr></argument>, <argument><expr><name>update_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__do_diff</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>svn_ra_reporter3_t</name> **</type><name>reporter</name></decl></param>,
                     <param><decl><type><name>void</name> **</type><name>report_baton</name></decl></param>,
                     <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>diff_target</name></decl></param>,
                     <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                     <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl></param>,
                     <param><decl><type><name>svn_boolean_t</name></type> <name>text_deltas</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>versus_url</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>diff_editor</name></decl></param>,
                     <param><decl><type><name>void</name> *</type><name>diff_baton</name></decl></param>,
                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name> <init>= <expr><name><name>ra_session</name>-&gt;<name>priv</name></name></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name>make_update_reporter</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>reporter</name></expr></argument>, <argument><expr><name>report_baton</name></expr></argument>,
                              <argument><expr><name>revision</name></expr></argument>,
                              <argument><expr><name><name>session</name>-&gt;<name>repos_url</name>.<name>path</name></name></expr></argument>, <argument><expr><name>versus_url</name></expr></argument>, <argument><expr><name>diff_target</name></expr></argument>,
                              <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>ignore_ancestry</name></expr></argument>, <argument><expr><name>text_deltas</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                              <argument><expr><name>diff_editor</name></expr></argument>, <argument><expr><name>diff_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__do_status</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>svn_ra_reporter3_t</name> **</type><name>reporter</name></decl></param>,
                       <param><decl><type><name>void</name> **</type><name>report_baton</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>status_target</name></decl></param>,
                       <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                       <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>status_editor</name></decl></param>,
                       <param><decl><type><name>void</name> *</type><name>status_baton</name></decl></param>,
                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name> <init>= <expr><name><name>ra_session</name>-&gt;<name>priv</name></name></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name>make_update_reporter</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>reporter</name></expr></argument>, <argument><expr><name>report_baton</name></expr></argument>,
                              <argument><expr><name>revision</name></expr></argument>,
                              <argument><expr><name><name>session</name>-&gt;<name>repos_url</name>.<name>path</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>status_target</name></expr></argument>,
                              <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                              <argument><expr><name>status_editor</name></expr></argument>, <argument><expr><name>status_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__do_switch</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>svn_ra_reporter3_t</name> **</type><name>reporter</name></decl></param>,
                       <param><decl><type><name>void</name> **</type><name>report_baton</name></decl></param>,
                       <param><decl><type><name>svn_revnum_t</name></type> <name>revision_to_switch_to</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>switch_target</name></decl></param>,
                       <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>switch_url</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>switch_editor</name></decl></param>,
                       <param><decl><type><name>void</name> *</type><name>switch_baton</name></decl></param>,
                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name> <init>= <expr><name><name>ra_session</name>-&gt;<name>priv</name></name></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name>make_update_reporter</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr><name>reporter</name></expr></argument>, <argument><expr><name>report_baton</name></expr></argument>,
                              <argument><expr><name>revision_to_switch_to</name></expr></argument>,
                              <argument><expr><name><name>session</name>-&gt;<name>repos_url</name>.<name>path</name></name></expr></argument>,
                              <argument><expr><name>switch_url</name></expr></argument>, <argument><expr><name>switch_target</name></expr></argument>,
                              <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument> <comment type="block">/* TODO(sussman) */</comment>,
                              <argument><expr><name>switch_editor</name></expr></argument>, <argument><expr><name>switch_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__get_file</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                      <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                      <param><decl><type><name>svn_stream_t</name> *</type><name>stream</name></decl></param>,
                      <param><decl><type><name>svn_revnum_t</name> *</type><name>fetched_rev</name></decl></param>,
                      <param><decl><type><name>apr_hash_t</name> **</type><name>props</name></decl></param>,
                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name> <init>= <expr><name><name>ra_session</name>-&gt;<name>priv</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>conn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra_serf__handler_t</name> *</type><name>handler</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fetch_url</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>fetch_props</name></decl>;</decl_stmt>

  <comment type="block">/* What connection should we go on? */</comment>
  <expr_stmt><expr><name>conn</name> = <name><name>session</name>-&gt;<name>conns</name><index>[<expr><name><name>session</name>-&gt;<name>cur_conn</name></name></expr>]</index></name></expr>;</expr_stmt>

  <comment type="block">/* Fetch properties. */</comment>
  <expr_stmt><expr><name>fetch_props</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>fetch_url</name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>repos_url</name>.<name>path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* The simple case is if we want HEAD - then a GET on the fetch_url is fine.
   *
   * Otherwise, we need to get the baseline version for this particular
   * revision and then fetch that file.
   */</comment>
  <if>if <condition>(<expr><call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>revision</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>vcc_url</name></decl>, *<decl><type ref="prev"/><name>rel_path</name></decl>, *<decl><type ref="prev"/><name>baseline_url</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_serf__discover_root</name><argument_list>(<argument><expr>&amp;<name>vcc_url</name></expr></argument>, <argument><expr>&amp;<name>rel_path</name></expr></argument>,
                                         <argument><expr><name>session</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>fetch_url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_serf__retrieve_props</name><argument_list>(<argument><expr><name>fetch_props</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>vcc_url</name></expr></argument>,
                                          <argument><expr><name>revision</name></expr></argument>, <argument><expr>"0"</expr></argument>, <argument><expr><name>baseline_props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>baseline_url</name> = <call><name>svn_ra_serf__get_ver_prop</name><argument_list>(<argument><expr><name>fetch_props</name></expr></argument>, <argument><expr><name>vcc_url</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>,
                                               <argument><expr>"DAV:"</expr></argument>, <argument><expr>"baseline-collection"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>fetch_url</name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name>baseline_url</name></expr></argument>, <argument><expr><name>rel_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>revision</name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
    }</block></then></if>

  <comment type="block">/* TODO Filter out all of our props into a usable format. */</comment>
  <if>if <condition>(<expr><name>props</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr>*<name>props</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_serf__retrieve_props</name><argument_list>(<argument><expr><name>fetch_props</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>fetch_url</name></expr></argument>,
                                          <argument><expr><name>revision</name></expr></argument>, <argument><expr>"0"</expr></argument>, <argument><expr><name>all_props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>svn_ra_serf__walk_all_props</name><argument_list>(<argument><expr><name>fetch_props</name></expr></argument>, <argument><expr><name>fetch_url</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>,
                                  <argument><expr><name>svn_ra_serf__set_flat_props</name></expr></argument>, <argument><expr>*<name>props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <if>if <condition>(<expr><name>stream</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>report_fetch_t</name> *</type><name>stream_ctx</name></decl>;</decl_stmt>

      <comment type="block">/* Create the fetch context. */</comment>
      <expr_stmt><expr><name>stream_ctx</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>stream_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>stream_ctx</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>stream_ctx</name>-&gt;<name>target_stream</name></name> = <name>stream</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>stream_ctx</name>-&gt;<name>sess</name></name> = <name>session</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>stream_ctx</name>-&gt;<name>conn</name></name> = <name>conn</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>stream_ctx</name>-&gt;<name>info</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name><name>stream_ctx</name>-&gt;<name>info</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>stream_ctx</name>-&gt;<name>info</name>-&gt;<name>name</name></name> = <name>fetch_url</name></expr>;</expr_stmt>

      <expr_stmt><expr><name>handler</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>handler</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>handler</name>-&gt;<name>method</name></name> = "GET"</expr>;</expr_stmt>
      <expr_stmt><expr><name><name>handler</name>-&gt;<name>path</name></name> = <name>fetch_url</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>handler</name>-&gt;<name>conn</name></name> = <name>conn</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>handler</name>-&gt;<name>session</name></name> = <name>session</name></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>handler</name>-&gt;<name>response_handler</name></name> = <name>handle_stream</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>handler</name>-&gt;<name>response_baton</name></name> = <name>stream_ctx</name></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>handler</name>-&gt;<name>response_error</name></name> = <name>cancel_fetch</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>handler</name>-&gt;<name>response_error_baton</name></name> = <name>stream_ctx</name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>svn_ra_serf__request_create</name><argument_list>(<argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_serf__context_run_wait</name><argument_list>(<argument><expr>&amp;<name><name>stream_ctx</name>-&gt;<name>done</name></name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><name><name>stream_ctx</name>-&gt;<name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
