<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_ra_serf/ra_serf.h"><comment type="block">/*
 * ra_serf.h : Private declarations for the Serf-based DAV RA module.
 *
 * ====================================================================
 * Copyright (c) 2006-2008 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVN_LIBSVN_RA_SERF_RA_SERF_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_LIBSVN_RA_SERF_RA_SERF_H</name></cpp:macro></cpp:define>

<escape char="0xc"/>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;serf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;expat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_uri.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_ra.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_delta.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_dav.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_dav_protocol.h"</cpp:file></cpp:include>

<escape char="0xc"/>
<comment type="block">/** Use this to silence compiler warnings about unused parameters. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNUSED_CTX</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((void)(x))</cpp:value></cpp:define>

<comment type="block">/** Our User-Agent string. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USER_AGENT</name></cpp:macro> <cpp:value>"SVN/" SVN_VERSION " serf/" \
                   APR_STRINGIFY(SERF_MAJOR_VERSION) "." \
                   APR_STRINGIFY(SERF_MINOR_VERSION) "." \
                   APR_STRINGIFY(SERF_PATCH_VERSION)</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>SERF_VERSION_AT_LEAST</name><argument_list>(<argument><expr>0, 1, 3</expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_RA_SERF_SSPI_ENABLED</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* WIN32 */</comment>

<escape char="0xc"/>
<comment type="block">/* Forward declarations. */</comment>
<typedef>typedef <type>struct <name>svn_ra_serf__session_t</name></type> <name>svn_ra_serf__session_t</name>;</typedef>
<typedef>typedef <type>struct <name>svn_ra_serf__auth_protocol_t</name></type> <name>svn_ra_serf__auth_protocol_t</name>;</typedef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SVN_RA_SERF_SSPI_ENABLED</name></cpp:ifdef>
<typedef>typedef <type>struct <name>serf_sspi_context_t</name></type> <name>serf_sspi_context_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* A serf connection and optionally associated SSL context.  */</comment>
<typedef>typedef <type><struct>struct <block>{
  <comment type="block">/* Our connection to a server. */</comment>
  <decl_stmt><decl><type><name>serf_connection_t</name> *</type><name>conn</name></decl>;</decl_stmt>

  <comment type="block">/* Bucket allocator for this connection. */</comment>
  <decl_stmt><decl><type><name>serf_bucket_alloc_t</name> *</type><name>bkt_alloc</name></decl>;</decl_stmt>

  <comment type="block">/* Host name */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>hostinfo</name></decl>;</decl_stmt>

  <comment type="block">/* The address where the connections are made to */</comment>
  <decl_stmt><decl><type><name>apr_sockaddr_t</name> *</type><name>address</name></decl>;</decl_stmt>

  <comment type="block">/* Are we using ssl */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>using_ssl</name></decl>;</decl_stmt>

  <comment type="block">/* Should we ask for compressed responses? */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>using_compression</name></decl>;</decl_stmt>

  <comment type="block">/* What was the last HTTP status code we got on this connection? */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>last_status_code</name></decl>;</decl_stmt>

  <comment type="block">/* Current authorization header used for this connection; may be NULL */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>auth_header</name></decl>;</decl_stmt>

  <comment type="block">/* Current authorization value used for this connection; may be NULL */</comment>
  <decl_stmt><decl><type><name>char</name> *</type><name>auth_value</name></decl>;</decl_stmt>

  <comment type="block">/* Optional SSL context for this connection. */</comment>
  <decl_stmt><decl><type><name>serf_ssl_context_t</name> *</type><name>ssl_context</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_auth_iterstate_t</name> *</type><name>ssl_client_auth_state</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_auth_iterstate_t</name> *</type><name>ssl_client_pw_auth_state</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SVN_RA_SERF_SSPI_ENABLED</name></cpp:ifdef>
  <comment type="block">/* Optional SSPI context for this connection. */</comment>
  <decl_stmt><decl><type><name>serf_sspi_context_t</name> *</type><name>sspi_context</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/* Current authorization header used for the proxy server; may be NULL */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>proxy_auth_header</name></decl>;</decl_stmt>

  <comment type="block">/* Current authorization value used for the proxy server; may be NULL */</comment>
  <decl_stmt><decl><type><name>char</name> *</type><name>proxy_auth_value</name></decl>;</decl_stmt>
  
  <comment type="block">/* user agent string */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>useragent</name></decl>;</decl_stmt>

}</block></struct></type> <name>svn_ra_serf__connection_t</name>;</typedef>

<comment type="block">/*
 * The master serf RA session.
 *
 * This is stored in the ra session -&gt;priv field.
 */</comment>
<struct>struct <name>svn_ra_serf__session_t</name> <block>{
  <comment type="block">/* Pool for allocations during this session */</comment>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>

  <comment type="block">/* The current context */</comment>
  <decl_stmt><decl><type><name>serf_context_t</name> *</type><name>context</name></decl>;</decl_stmt>

  <comment type="block">/* Bucket allocator for this context. */</comment>
  <decl_stmt><decl><type><name>serf_bucket_alloc_t</name> *</type><name>bkt_alloc</name></decl>;</decl_stmt>

  <comment type="block">/* Are we using ssl */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>using_ssl</name></decl>;</decl_stmt>

  <comment type="block">/* Should we ask for compressed responses? */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>using_compression</name></decl>;</decl_stmt>

  <comment type="block">/* The current connection */</comment>
  <decl_stmt><decl><type><name>svn_ra_serf__connection_t</name> **</type><name>conns</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>num_conns</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>cur_conn</name></decl>;</decl_stmt>

  <comment type="block">/* The URL that was passed into _open() */</comment>
  <decl_stmt><decl><type><name>apr_uri_t</name></type> <name>repos_url</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_url_str</name></decl>;</decl_stmt>

  <comment type="block">/* The actual discovered root; may be NULL until we know it. */</comment>
  <decl_stmt><decl><type><name>apr_uri_t</name></type> <name>repos_root</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_root_str</name></decl>;</decl_stmt>

  <comment type="block">/* Our Version-Controlled-Configuration; may be NULL until we know it. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>vcc_url</name></decl>;</decl_stmt>

  <comment type="block">/* Cached properties */</comment>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>cached_props</name></decl>;</decl_stmt>

  <comment type="block">/* Authentication related properties. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>auth_header</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>auth_value</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_auth_iterstate_t</name> *</type><name>auth_state</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>auth_attempts</name></decl>;</decl_stmt>

  <comment type="block">/* Callback functions to get info from WC */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_ra_callbacks2_t</name> *</type><name>wc_callbacks</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>wc_callback_baton</name></decl>;</decl_stmt>

  <comment type="block">/* Callback function to send info to WC */</comment>
  <decl_stmt><decl><type><name>svn_ra_progress_notify_func_t</name></type> <name>wc_progress_func</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>wc_progress_baton</name></decl>;</decl_stmt>

  <comment type="block">/* Error that we've received but not yet returned upstream. */</comment>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>pending_error</name></decl>;</decl_stmt>

  <comment type="block">/* vtable and info object handling the authentication */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_ra_serf__auth_protocol_t</name> *</type><name>auth_protocol</name></decl>;</decl_stmt>

  <comment type="block">/* Maps SVN_RA_CAPABILITY_foo keys to "yes" or "no" values.
     If a capability is not yet discovered, it is absent from the table.
     The table itself is allocated in the svn_ra_serf__session_t's pool;
     keys and values must have at least that lifetime.  Most likely
     the keys and values are constants anyway (and sufficiently
     well-informed internal code may just compare against those
     constants' addresses, therefore). */</comment>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>capabilities</name></decl>;</decl_stmt>

  <comment type="block">/* Are we using a proxy? */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>using_proxy</name></decl>;</decl_stmt>

  <comment type="block">/* Proxy Authentication related properties */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>proxy_auth_header</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>proxy_auth_value</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_ra_serf__auth_protocol_t</name> *</type><name>proxy_auth_protocol</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>proxy_username</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>proxy_password</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>proxy_auth_attempts</name></decl>;</decl_stmt>

  <comment type="block">/* SSL server certificates */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>trust_default_ca</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_authorities</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/*
 * Structure which represents a DAV element with a NAMESPACE and NAME.
 */</comment>
<typedef>typedef <type><struct>struct <block>{
  <comment type="block">/* Element namespace */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>namespace</name></decl>;</decl_stmt>
  <comment type="block">/* Element name */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
}</block></struct></type> <name>svn_ra_serf__dav_props_t</name>;</typedef>

<comment type="block">/*
 * Structure which represents an XML namespace.
 */</comment>
<typedef>typedef <type><struct>struct <name>ns_t</name> <block>{
  <comment type="block">/* The assigned name. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>namespace</name></decl>;</decl_stmt>
  <comment type="block">/* The full URL for this namespace. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl>;</decl_stmt>
  <comment type="block">/* The next namespace in our list. */</comment>
  <decl_stmt><decl><type>struct <name>ns_t</name> *</type><name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>svn_ra_serf__ns_t</name>;</typedef>

<comment type="block">/*
 * An incredibly simple list.
 */</comment>
<typedef>typedef <type><struct>struct <name>ra_serf_list_t</name> <block>{
  <decl_stmt><decl><type><name>void</name> *</type><name>data</name></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>ra_serf_list_t</name> *</type><name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>svn_ra_serf__list_t</name>;</typedef>

<comment type="block">/** DAV property sets **/</comment>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_ra_serf__dav_props_t</name></type> <name><name>base_props</name><index>[]</index></name> <init>=
<expr><block>{
  <expr><block>{ <expr>"DAV:"</expr>, <expr>"version-controlled-configuration"</expr> }</block></expr>,
  <expr><block>{ <expr>"DAV:"</expr>, <expr>"resourcetype"</expr> }</block></expr>,
  <expr><block>{ <expr><name>SVN_DAV_PROP_NS_DAV</name></expr>, <expr>"baseline-relative-path"</expr> }</block></expr>,
  <expr><block>{ <expr><name>SVN_DAV_PROP_NS_DAV</name></expr>, <expr>"repository-uuid"</expr> }</block></expr>,
  <expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_ra_serf__dav_props_t</name></type> <name><name>checked_in_props</name><index>[]</index></name> <init>=
<expr><block>{
  <expr><block>{ <expr>"DAV:"</expr>, <expr>"checked-in"</expr> }</block></expr>,
  <expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_ra_serf__dav_props_t</name></type> <name><name>baseline_props</name><index>[]</index></name> <init>=
<expr><block>{
  <expr><block>{ <expr>"DAV:"</expr>, <expr>"baseline-collection"</expr> }</block></expr>,
  <expr><block>{ <expr>"DAV:"</expr>, <expr><name>SVN_DAV__VERSION_NAME</name></expr> }</block></expr>,
  <expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_ra_serf__dav_props_t</name></type> <name><name>all_props</name><index>[]</index></name> <init>=
<expr><block>{
  <expr><block>{ <expr>"DAV:"</expr>, <expr>"allprop"</expr> }</block></expr>,
  <expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_ra_serf__dav_props_t</name></type> <name><name>vcc_props</name><index>[]</index></name> <init>=
<expr><block>{
  <expr><block>{ <expr>"DAV:"</expr>, <expr>"version-controlled-configuration"</expr> }</block></expr>,
  <expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_ra_serf__dav_props_t</name></type> <name><name>check_path_props</name><index>[]</index></name> <init>=
<expr><block>{
  <expr><block>{ <expr>"DAV:"</expr>, <expr>"resourcetype"</expr> }</block></expr>,
  <expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_ra_serf__dav_props_t</name></type> <name><name>uuid_props</name><index>[]</index></name> <init>=
<expr><block>{
  <expr><block>{ <expr><name>SVN_DAV_PROP_NS_DAV</name></expr>, <expr>"repository-uuid"</expr> }</block></expr>,
  <expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_ra_serf__dav_props_t</name></type> <name><name>repos_root_props</name><index>[]</index></name> <init>=
<expr><block>{
  <expr><block>{ <expr><name>SVN_DAV_PROP_NS_DAV</name></expr>, <expr>"baseline-relative-path"</expr> }</block></expr>,
  <expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_ra_serf__dav_props_t</name></type> <name><name>href_props</name><index>[]</index></name> <init>=
<expr><block>{
  <expr><block>{ <expr>"DAV:"</expr>, <expr>"href"</expr> }</block></expr>,
  <expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* WC props compatibility with ra_neon. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_RA_SERF__WC_NAMESPACE</name></cpp:macro> <cpp:value>SVN_PROP_WC_PREFIX "ra_dav:"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_RA_SERF__WC_ACTIVITY_URL</name></cpp:macro> <cpp:value>SVN_RA_SERF__WC_NAMESPACE "activity-url"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_RA_SERF__WC_CHECKED_IN_URL</name></cpp:macro> <cpp:value>SVN_RA_SERF__WC_NAMESPACE "version-url"</cpp:value></cpp:define>

<comment type="block">/** Serf utility functions **/</comment>

<function_decl><type><name>serf_bucket_t</name> *</type>
<name>svn_ra_serf__conn_setup</name><parameter_list>(<param><decl><type><name>apr_socket_t</name> *</type><name>sock</name></decl></param>,
                        <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>serf_bucket_t</name>*</type>
<name>svn_ra_serf__accept_response</name><parameter_list>(<param><decl><type><name>serf_request_t</name> *</type><name>request</name></decl></param>,
                             <param><decl><type><name>serf_bucket_t</name> *</type><name>stream</name></decl></param>,
                             <param><decl><type><name>void</name> *</type><name>acceptor_baton</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type>
<name>svn_ra_serf__conn_closed</name><parameter_list>(<param><decl><type><name>serf_connection_t</name> *</type><name>conn</name></decl></param>,
                         <param><decl><type><name>void</name> *</type><name>closed_baton</name></decl></param>,
                         <param><decl><type><name>apr_status_t</name></type> <name>why</name></decl></param>,
                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>apr_status_t</name></type>
<name>svn_ra_serf__is_conn_closing</name><parameter_list>(<param><decl><type><name>serf_bucket_t</name> *</type><name>response</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>apr_status_t</name></type>
<name>svn_ra_serf__cleanup_serf_session</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Helper function to provide SSL client certificates. */</comment>
<function_decl><type><name>apr_status_t</name></type>
<name>svn_ra_serf__handle_client_cert</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>cert_path</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Helper function to provide SSL client certificate passwords. */</comment>
<function_decl><type><name>apr_status_t</name></type>
<name>svn_ra_serf__handle_client_cert_pw</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cert_path</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>password</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Create a REQUEST with an associated REQ_BKT in the SESSION.
 *
 * If HDRS_BKT is not-NULL, it will be set to a headers_bucket that
 * corresponds to the new request.
 *
 * The request will be METHOD at URL.
 *
 * If BODY_BKT is not-NULL, it will be sent as the request body.
 *
 * If CONTENT_TYPE is not-NULL, it will be sent as the Content-Type header.
 */</comment>
<function_decl><type><name>void</name></type>
<name>svn_ra_serf__setup_serf_req</name><parameter_list>(<param><decl><type><name>serf_request_t</name> *</type><name>request</name></decl></param>,
                            <param><decl><type><name>serf_bucket_t</name> **</type><name>req_bkt</name></decl></param>, <param><decl><type><name>serf_bucket_t</name> **</type><name>hdrs_bkt</name></decl></param>,
                            <param><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>conn</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>method</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
                            <param><decl><type><name>serf_bucket_t</name> *</type><name>body_bkt</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>content_type</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/*
 * This function will run the serf context in SESS until *DONE is TRUE.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__context_run_wait</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>done</name></decl></param>,
                              <param><decl><type><name>svn_ra_serf__session_t</name> *</type><name>sess</name></decl></param>,
                              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Callback for when a request body is needed. */</comment>
<typedef>typedef <function_decl><type><name>serf_bucket_t</name>*</type>
(*<name>svn_ra_serf__request_body_delegate_t</name>)<parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                                        <param><decl><type><name>serf_bucket_alloc_t</name> *</type><name>alloc</name></decl></param>,
                                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="block">/* Callback for when request headers are needed. */</comment>
<typedef>typedef <function_decl><type><name>apr_status_t</name></type>
(*<name>svn_ra_serf__request_header_delegate_t</name>)<parameter_list>(<param><decl><type><name>serf_bucket_t</name> *</type><name>headers</name></decl></param>,
                                          <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="block">/* Callback for when a response has an error. */</comment>
<typedef>typedef <function_decl><type><name>apr_status_t</name></type>
(*<name>svn_ra_serf__response_error_t</name>)<parameter_list>(<param><decl><type><name>serf_request_t</name> *</type><name>request</name></decl></param>,
                                 <param><decl><type><name>serf_bucket_t</name> *</type><name>response</name></decl></param>,
                                 <param><decl><type><name>int</name></type> <name>status_code</name></decl></param>,
                                 <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="block">/*
 * Structure that can be passed to our default handler to guide the
 * execution of the request through its lifecycle.
 */</comment>
<typedef>typedef <type><struct>struct <block>{
  <comment type="block">/* The HTTP method string of the request */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>method</name></decl>;</decl_stmt>

  <comment type="block">/* The resource to the execute the method on. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>

  <comment type="block">/* The request's body buckets.
   *
   * May be NULL if there is no body to send or -&gt;body_delegate is set.
   *
   * Using the body_delegate function is preferred as it delays the
   * creation of the body until we're about to deliver the request
   * instead of creating it earlier.
   *
   * @see svn_ra_serf__request_body_delegate_t
   */</comment>
  <decl_stmt><decl><type><name>serf_bucket_t</name> *</type><name>body_buckets</name></decl>;</decl_stmt>

  <comment type="block">/* The content-type of the request body. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>body_type</name></decl>;</decl_stmt>

  <comment type="block">/* The handler and baton pair for our handler. */</comment>
  <decl_stmt><decl><type><name>serf_response_handler_t</name></type> <name>response_handler</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>response_baton</name></decl>;</decl_stmt>

  <comment type="block">/* The handler and baton pair to be executed when a non-recoverable error
   * is detected.  If it is NULL in the presence of an error, an abort() may
   * be triggered.
   */</comment>
  <decl_stmt><decl><type><name>svn_ra_serf__response_error_t</name></type> <name>response_error</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>response_error_baton</name></decl>;</decl_stmt>

  <comment type="block">/* This function and baton will be executed when the request is about
   * to be delivered by serf.
   *
   * This just passes through serf's raw request creation parameters.
   * None of the other parameters will be utilized if this field is set.
   */</comment>
  <decl_stmt><decl><type><name>serf_request_setup_t</name></type> <name>delegate</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>delegate_baton</name></decl>;</decl_stmt>

  <comment type="block">/* This function and baton pair allows for custom request headers to
   * be set.
   *
   * It will be executed after the request has been set up but before it is
   * delivered.
   */</comment>
  <decl_stmt><decl><type><name>svn_ra_serf__request_header_delegate_t</name></type> <name>header_delegate</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>header_delegate_baton</name></decl>;</decl_stmt>

  <comment type="block">/* This function and baton pair allows a body to be created right before
   * delivery.
   *
   * It will be executed after the request has been set up but before it is
   * delivered.
   */</comment>
  <decl_stmt><decl><type><name>svn_ra_serf__request_body_delegate_t</name></type> <name>body_delegate</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>body_delegate_baton</name></decl>;</decl_stmt>

  <comment type="block">/* The connection and session to be used for this request. */</comment>
  <decl_stmt><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>conn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name></decl>;</decl_stmt>
}</block></struct></type> <name>svn_ra_serf__handler_t</name>;</typedef>

<comment type="block">/*
 * Helper function to queue a request in the @a handler's connection.
 */</comment>
<function_decl><type><name>serf_request_t</name>*</type>
<name>svn_ra_serf__request_create</name><parameter_list>(<param><decl><type><name>svn_ra_serf__handler_t</name> *</type><name>handler</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>serf_request_t</name>*</type>
<name>svn_ra_serf__priority_request_create</name><parameter_list>(<param><decl><type><name>svn_ra_serf__handler_t</name> *</type><name>handler</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* XML helper callbacks. */</comment>

<typedef>typedef <type><struct>struct <name>svn_ra_serf__xml_state_t</name> <block>{
  <comment type="block">/* A numeric value that represents the current state in parsing.
   *
   * Value 0 is reserved for use as the default state.
   */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>current_state</name></decl>;</decl_stmt>

  <comment type="block">/* Private pointer set by the parsing code. */</comment>
  <decl_stmt><decl><type><name>void</name> *</type><name>private</name></decl>;</decl_stmt>

  <comment type="block">/* Allocations should be made in this pool to match the lifetime of the
   * state.
   */</comment>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>

  <comment type="block">/* The currently-declared namespace for this state. */</comment>
  <decl_stmt><decl><type><name>svn_ra_serf__ns_t</name> *</type><name>ns_list</name></decl>;</decl_stmt>

  <comment type="block">/* Our previous states. */</comment>
  <decl_stmt><decl><type>struct <name>svn_ra_serf__xml_state_t</name> *</type><name>prev</name></decl>;</decl_stmt>
}</block></struct></type> <name>svn_ra_serf__xml_state_t</name>;</typedef>

<comment type="block">/* Forward declaration of the XML parser structure. */</comment>
<typedef>typedef <type>struct <name>svn_ra_serf__xml_parser_t</name></type> <name>svn_ra_serf__xml_parser_t</name>;</typedef>

<comment type="block">/* Callback invoked with @a baton by our XML @a parser when an element with
 * the @a name containing @a attrs is opened.
 */</comment>
<typedef>typedef <function_decl><type><name>svn_error_t</name> *</type>
(*<name>svn_ra_serf__xml_start_element_t</name>)<parameter_list>(<param><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser</name></decl></param>,
                                    <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                                    <param><decl><type><name>svn_ra_serf__dav_props_t</name></type> <name>name</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>attrs</name></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="block">/* Callback invoked with @a baton by our XML @a parser when an element with
 * the @a name is closed.
 */</comment>
<typedef>typedef <function_decl><type><name>svn_error_t</name> *</type>
(*<name>svn_ra_serf__xml_end_element_t</name>)<parameter_list>(<param><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser</name></decl></param>,
                                  <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                                  <param><decl><type><name>svn_ra_serf__dav_props_t</name></type> <name>name</name></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="block">/* Callback invoked with @a baton by our XML @a parser when a CDATA portion
 * of @a data with size @a len is encountered.
 *
 * This may be invoked multiple times for the same tag.
 *
 * @see svn_ra_serf__expand_string
 */</comment>
<typedef>typedef <function_decl><type><name>svn_error_t</name> *</type>
(*<name>svn_ra_serf__xml_cdata_chunk_handler_t</name>)<parameter_list>(<param><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser</name></decl></param>,
                                          <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>,
                                          <param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="block">/*
 * Helper structure associated with handle_xml_parser handler that will
 * specify how an XML response will be processed.
 */</comment>
<struct>struct <name>svn_ra_serf__xml_parser_t</name> <block>{
  <comment type="block">/* Temporary allocations should be made in this pool. */</comment>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>

  <comment type="block">/* Caller-specific data passed to the start, end, cdata callbacks.  */</comment>
  <decl_stmt><decl><type><name>void</name> *</type><name>user_data</name></decl>;</decl_stmt>

  <comment type="block">/* Callback invoked when a tag is opened. */</comment>
  <decl_stmt><decl><type><name>svn_ra_serf__xml_start_element_t</name></type> <name>start</name></decl>;</decl_stmt>

  <comment type="block">/* Callback invoked when a tag is closed. */</comment>
  <decl_stmt><decl><type><name>svn_ra_serf__xml_end_element_t</name></type> <name>end</name></decl>;</decl_stmt>

  <comment type="block">/* Callback invoked when a cdata chunk is received. */</comment>
  <decl_stmt><decl><type><name>svn_ra_serf__xml_cdata_chunk_handler_t</name></type> <name>cdata</name></decl>;</decl_stmt>

  <comment type="block">/* Our associated expat-based XML parser. */</comment>
  <decl_stmt><decl><type><name>XML_Parser</name></type> <name>xmlp</name></decl>;</decl_stmt>

  <comment type="block">/* Our current state. */</comment>
  <decl_stmt><decl><type><name>svn_ra_serf__xml_state_t</name> *</type><name>state</name></decl>;</decl_stmt>

  <comment type="block">/* Our previously used states (will be reused). */</comment>
  <decl_stmt><decl><type><name>svn_ra_serf__xml_state_t</name> *</type><name>free_state</name></decl>;</decl_stmt>

  <comment type="block">/* If non-NULL, the status code of the response will be stored here.
   *
   * If this is NULL and an error is received, an abort will be triggered.
   */</comment>
  <decl_stmt><decl><type><name>int</name> *</type><name>status_code</name></decl>;</decl_stmt>

  <comment type="block">/* If non-NULL, this value will be set to TRUE when the response is
   * completed.
   */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name> *</type><name>done</name></decl>;</decl_stmt>

  <comment type="block">/* If non-NULL, when this parser completes, it will add done_item to
   * the list.
   */</comment>
  <decl_stmt><decl><type><name>svn_ra_serf__list_t</name> **</type><name>done_list</name></decl>;</decl_stmt>

  <comment type="block">/* A pointer to the item that will be inserted into the list upon
   * completeion.
   */</comment>
  <decl_stmt><decl><type><name>svn_ra_serf__list_t</name> *</type><name>done_item</name></decl>;</decl_stmt>

  <comment type="block">/* If this flag is TRUE, errors during parsing will be ignored.
   *
   * This is mainly used when we are processing an error XML response to
   * avoid infinite loops.
   */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>ignore_errors</name></decl>;</decl_stmt>

  <comment type="block">/* If an error occurred, this value will be non-NULL. */</comment>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>error</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/*
 * Parses a server-side error message into a local Subversion error.
 */</comment>
<typedef>typedef <type><struct>struct <block>{
  <comment type="block">/* Our local representation of the error. */</comment>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>error</name></decl>;</decl_stmt>

  <comment type="block">/* Have we checked to see if there's an XML error in this response? */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>init</name></decl>;</decl_stmt>

  <comment type="block">/* Was there an XML error response? */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>has_xml_response</name></decl>;</decl_stmt>

  <comment type="block">/* Are we done with the response? */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>done</name></decl>;</decl_stmt>

  <comment type="block">/* Have we seen an error tag? */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>in_error</name></decl>;</decl_stmt>

  <comment type="block">/* Should we be collecting the XML cdata? */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>collect_cdata</name></decl>;</decl_stmt>

  <comment type="block">/* Collected cdata. NULL if cdata not needed. */</comment>
  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>cdata</name></decl>;</decl_stmt>

  <comment type="block">/* XML parser and namespace used to parse the remote response */</comment>
  <decl_stmt><decl><type><name>svn_ra_serf__xml_parser_t</name></type> <name>parser</name></decl>;</decl_stmt>
}</block></struct></type> <name>svn_ra_serf__server_error_t</name>;</typedef>

<comment type="block">/* A simple request context that can be passed to handle_status_only. */</comment>
<typedef>typedef <type><struct>struct <block>{
  <comment type="block">/* The HTTP status code of the response */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

  <comment type="block">/* The HTTP status line of the response */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>reason</name></decl>;</decl_stmt>

  <comment type="block">/* This value is set to TRUE when the response is completed. */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>done</name></decl>;</decl_stmt>

  <comment type="block">/* If an error occurred, this value will be initialized. */</comment>
  <decl_stmt><decl><type><name>svn_ra_serf__server_error_t</name></type> <name>server_error</name></decl>;</decl_stmt>
}</block></struct></type> <name>svn_ra_serf__simple_request_context_t</name>;</typedef>

<comment type="block">/*
 * Serf handler for @a request / @a response pair that takes in a
 * @a baton (@see svn_ra_serf__simple_request_context_t).
 *
 * Temporary allocations are made in @a pool.
 */</comment>
<function_decl><type><name>apr_status_t</name></type>
<name>svn_ra_serf__handle_status_only</name><parameter_list>(<param><decl><type><name>serf_request_t</name> *</type><name>request</name></decl></param>,
                                <param><decl><type><name>serf_bucket_t</name> *</type><name>response</name></decl></param>,
                                <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Handler that discards the entire @a response body associated with a
 * @a request.
 *
 * If @a baton is a svn_ra_serf__server_error_t (i.e. non-NULL) and an
 * error is detected, it will be populated for later detection.
 *
 * All temporary allocations will be made in a @a pool.
 */</comment>
<function_decl><type><name>apr_status_t</name></type>
<name>svn_ra_serf__handle_discard_body</name><parameter_list>(<param><decl><type><name>serf_request_t</name> *</type><name>request</name></decl></param>,
                                 <param><decl><type><name>serf_bucket_t</name> *</type><name>response</name></decl></param>,
                                 <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Handler that retrieves the embedded XML error response from the
 * the @a response body associated with a @a request.
 *
 * All temporary allocations will be made in a @a pool.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__handle_server_error</name><parameter_list>(<param><decl><type><name>serf_request_t</name> *</type><name>request</name></decl></param>,
                                 <param><decl><type><name>serf_bucket_t</name> *</type><name>response</name></decl></param>,
                                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Handler that retrieves the embedded XML multistatus response from the
 * the @a RESPONSE body associated with a @a REQUEST. *DONE is set to TRUE.
 *
 * The @a BATON should be of type svn_ra_serf__simple_request_context_t.
 *
 * All temporary allocations will be made in a @a pool.
 */</comment>
<function_decl><type><name>apr_status_t</name></type>
<name>svn_ra_serf__handle_multistatus_only</name><parameter_list>(<param><decl><type><name>serf_request_t</name> *</type><name>request</name></decl></param>,
                                     <param><decl><type><name>serf_bucket_t</name> *</type><name>response</name></decl></param>,
                                     <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/*
 * This function will feed the RESPONSE body into XMLP.  When parsing is
 * completed (i.e. an EOF is received), *DONE is set to TRUE.
 *
 * If an error occurs during processing RESP_ERR is invoked with the
 * RESP_ERR_BATON.
 *
 * Temporary allocations are made in POOL.
 */</comment>
<function_decl><type><name>apr_status_t</name></type>
<name>svn_ra_serf__handle_xml_parser</name><parameter_list>(<param><decl><type><name>serf_request_t</name> *</type><name>request</name></decl></param>,
                               <param><decl><type><name>serf_bucket_t</name> *</type><name>response</name></decl></param>,
                               <param><decl><type><name>void</name> *</type><name>handler_baton</name></decl></param>,
                               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** XML helper functions. **/</comment>

<comment type="block">/*
 * Advance the internal XML @a parser to the @a state.
 */</comment>
<function_decl><type><name>void</name></type>
<name>svn_ra_serf__xml_push_state</name><parameter_list>(<param><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser</name></decl></param>,
                            <param><decl><type><name>int</name></type> <name>state</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Return to the previous internal XML @a parser state.
 */</comment>
<function_decl><type><name>void</name></type>
<name>svn_ra_serf__xml_pop_state</name><parameter_list>(<param><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Add the appropriate serf buckets to @a agg_bucket represented by
 * the XML * @a tag and @a value.
 *
 * The bucket will be allocated from @a bkt_alloc.
 */</comment>
<function_decl><type><name>void</name></type>
<name>svn_ra_serf__add_tag_buckets</name><parameter_list>(<param><decl><type><name>serf_bucket_t</name> *</type><name>agg_bucket</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tag</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>,
                             <param><decl><type><name>serf_bucket_alloc_t</name> *</type><name>bkt_alloc</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Look up the @a attrs array for namespace definitions and add each one
 * to the @a ns_list of namespaces.
 *
 * New namespaces will be allocated in @a pool.
 */</comment>
<function_decl><type><name>void</name></type>
<name>svn_ra_serf__define_ns</name><parameter_list>(<param><decl><type><name>svn_ra_serf__ns_t</name> **</type><name>ns_list</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>attrs</name></decl></param>,
                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Look up @a name in the @a ns_list list for previously declared namespace
 * definitions.
 *
 * @return @a svn_ra_serf__dav_props_t tuple representing the expanded name.
 */</comment>
<function_decl><type><name>svn_ra_serf__dav_props_t</name></type>
<name>svn_ra_serf__expand_ns</name><parameter_list>(<param><decl><type><name>svn_ra_serf__ns_t</name> *</type><name>ns_list</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Expand the string represented by @a cur with a current size of @a
 * cur_len by appending @a new with a size of @a new_len.
 *
 * The reallocated string is made in @a pool.
 */</comment>
<function_decl><type><name>void</name></type>
<name>svn_ra_serf__expand_string</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>cur</name></decl></param>, <param><decl><type><name>apr_size_t</name> *</type><name>cur_len</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>new</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>new_len</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** PROPFIND-related functions **/</comment>

<comment type="block">/* Opaque structure representing PROPFINDs. */</comment>
<typedef>typedef <type>struct <name>svn_ra_serf__propfind_context_t</name></type> <name>svn_ra_serf__propfind_context_t</name>;</typedef>

<comment type="block">/*
 * Returns a flag representing whether the PROPFIND @a ctx is completed.
 */</comment>
<function_decl><type><name>svn_boolean_t</name></type>
<name>svn_ra_serf__propfind_is_done</name><parameter_list>(<param><decl><type><name>svn_ra_serf__propfind_context_t</name> *</type><name>ctx</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Returns the response status code of the PROPFIND @a ctx.
 */</comment>
<function_decl><type><name>int</name></type>
<name>svn_ra_serf__propfind_status_code</name><parameter_list>(<param><decl><type><name>svn_ra_serf__propfind_context_t</name> *</type><name>ctx</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Our PROPFIND bucket */</comment>
<function_decl><type><name>serf_bucket_t</name> *</type>
<name>svn_ra_serf__bucket_propfind_create</name><parameter_list>(<param><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>conn</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>label</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>depth</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>svn_ra_serf__dav_props_t</name> *</type><name>find_props</name></decl></param>,
                                    <param><decl><type><name>serf_bucket_alloc_t</name> *</type><name>allocator</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/*
 * This function will deliver a PROP_CTX PROPFIND request in the SESS
 * serf context for the properties listed in LOOKUP_PROPS at URL for
 * DEPTH ("0","1","infinity").
 *
 * This function will not block waiting for the response.  If the
 * request can be satisfied from a local cache, set PROP_CTX to NULL
 * as a signal to callers of that fact.  Otherwise, callers are
 * expected to call svn_ra_serf__wait_for_props().
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__deliver_props</name><parameter_list>(<param><decl><type><name>svn_ra_serf__propfind_context_t</name> **</type><name>prop_ctx</name></decl></param>,
                           <param><decl><type><name>apr_hash_t</name> *</type><name>prop_vals</name></decl></param>,
                           <param><decl><type><name>svn_ra_serf__session_t</name> *</type><name>sess</name></decl></param>,
                           <param><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>conn</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
                           <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>depth</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>svn_ra_serf__dav_props_t</name> *</type><name>lookup_props</name></decl></param>,
                           <param><decl><type><name>svn_boolean_t</name></type> <name>cache_props</name></decl></param>,
                           <param><decl><type><name>svn_ra_serf__list_t</name> **</type><name>done_list</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/*
 * This helper function will block until the PROP_CTX indicates that is done
 * or another error is returned.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__wait_for_props</name><parameter_list>(<param><decl><type><name>svn_ra_serf__propfind_context_t</name> *</type><name>prop_ctx</name></decl></param>,
                            <param><decl><type><name>svn_ra_serf__session_t</name> *</type><name>sess</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Shared helper func: given a public URL which may not exist in HEAD,
   use SESSION to search up parent directories until we can retrieve a
   *PROPS (allocated in POOL) containing a standard set of base props:
   {VCC, resourcetype, baseline-relative-path}.

   Also return:
   *MISSING_PATH (allocated in POOL), which is the trailing portion of
     the URL that did not exist.  If an error occurs, *MISSING_PATH isn't
     changed.
   *REMAINING_PATH (allocated in POOL), which is the parent path on which
     we found the PROPS.
   */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__search_for_base_props</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>remaining_path</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>missing_path</name></decl></param>,
                                   <param><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name></decl></param>,
                                   <param><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>conn</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
                                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/*
 * This is a blocking version of deliver_props.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__retrieve_props</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>prop_vals</name></decl></param>,
                            <param><decl><type><name>svn_ra_serf__session_t</name> *</type><name>sess</name></decl></param>,
                            <param><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>conn</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
                            <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>depth</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>svn_ra_serf__dav_props_t</name> *</type><name>props</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* ### TODO: doco. */</comment>
<function_decl><type><name>void</name></type>
<name>svn_ra_serf__set_ver_prop</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ns</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>val</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** Property walker functions **/</comment>

<typedef>typedef <function_decl><type><name>svn_error_t</name> *</type>
(*<name>svn_ra_serf__walker_visitor_t</name>)<parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ns</name></decl></param>, <param><decl><type><name>apr_ssize_t</name></type> <name>ns_len</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>apr_ssize_t</name></type> <name>name_len</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>val</name></decl></param>,
                                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl></typedef>

<function_decl><type><name>void</name></type>
<name>svn_ra_serf__walk_all_props</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                            <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                            <param><decl><type><name>svn_ra_serf__walker_visitor_t</name></type> <name>walker</name></decl></param>,
                            <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<typedef>typedef <function_decl><type><name>svn_error_t</name> *</type>
(*<name>svn_ra_serf__path_rev_walker_t</name>)<parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>apr_ssize_t</name></type> <name>path_len</name></decl></param>,
                                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ns</name></decl></param>, <param><decl><type><name>apr_ssize_t</name></type> <name>ns_len</name></decl></param>,
                                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>apr_ssize_t</name></type> <name>name_len</name></decl></param>,
                                  <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>val</name></decl></param>,
                                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl></typedef>
<function_decl><type><name>void</name></type>
<name>svn_ra_serf__walk_all_paths</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl></param>,
                            <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                            <param><decl><type><name>svn_ra_serf__path_rev_walker_t</name></type> <name>walker</name></decl></param>,
                            <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Higher-level variants on the walker. */</comment>
<typedef>typedef <function_decl><type><name>svn_error_t</name> *</type> (*<name>svn_ra_serf__prop_set_t</name>)<parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                                                 <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
                                                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl></typedef>

<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__set_baton_props</name><parameter_list>(<param><decl><type><name>svn_ra_serf__prop_set_t</name></type> <name>setprop</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ns</name></decl></param>, <param><decl><type><name>apr_ssize_t</name></type> <name>ns_len</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>apr_ssize_t</name></type> <name>name_len</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>val</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__set_flat_props</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ns</name></decl></param>, <param><decl><type><name>apr_ssize_t</name></type> <name>ns_len</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>apr_ssize_t</name></type> <name>name_len</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>val</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__set_bare_props</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ns</name></decl></param>, <param><decl><type><name>apr_ssize_t</name></type> <name>ns_len</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>apr_ssize_t</name></type> <name>name_len</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>val</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Get PROPS for PATH at REV revision with a NS:NAME. */</comment>
<function_decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type>
<name>svn_ra_serf__get_ver_prop_string</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ns</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_ra_serf__get_ver_prop</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ns</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Same as get_prop, but for the unknown revision */</comment>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_ra_serf__get_prop</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ns</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Set PROPS for PATH at REV revision with a NS:NAME VAL.
 *
 * The POOL governs allocation.
 */</comment>
<function_decl><type><name>void</name></type>
<name>svn_ra_serf__set_rev_prop</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ns</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>val</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Same as set_rev_prop, but sets it for the unknown revision. */</comment>
<function_decl><type><name>void</name></type>
<name>svn_ra_serf__set_prop</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ns</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>val</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** MERGE-related functions **/</comment>

<typedef>typedef <type>struct <name>svn_ra_serf__merge_context_t</name></type> <name>svn_ra_serf__merge_context_t</name>;</typedef>

<function_decl><type><name>svn_boolean_t</name>*</type>
<name>svn_ra_serf__merge_get_done_ptr</name><parameter_list>(<param><decl><type><name>svn_ra_serf__merge_context_t</name> *</type><name>ctx</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>svn_commit_info_t</name>*</type>
<name>svn_ra_serf__merge_get_commit_info</name><parameter_list>(<param><decl><type><name>svn_ra_serf__merge_context_t</name> *</type><name>ctx</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type>
<name>svn_ra_serf__merge_get_status</name><parameter_list>(<param><decl><type><name>svn_ra_serf__merge_context_t</name> *</type><name>ctx</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type>
<name>svn_ra_serf__merge_lock_token_list</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>lock_tokens</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>parent</name></decl></param>,
                                   <param><decl><type><name>serf_bucket_t</name> *</type><name>body</name></decl></param>,
                                   <param><decl><type><name>serf_bucket_alloc_t</name> *</type><name>alloc</name></decl></param>,
                                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Create an MERGE request */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__merge_create_req</name><parameter_list>(<param><decl><type><name>svn_ra_serf__merge_context_t</name> **</type><name>merge_ctx</name></decl></param>,
                              <param><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name></decl></param>,
                              <param><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>conn</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>activity_url</name></decl></param>,
                              <param><decl><type><name>apr_size_t</name></type> <name>activity_url_len</name></decl></param>,
                              <param><decl><type><name>apr_hash_t</name> *</type><name>lock_tokens</name></decl></param>,
                              <param><decl><type><name>svn_boolean_t</name></type> <name>keep_locks</name></decl></param>,
                              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** OPTIONS-related functions **/</comment>

<typedef>typedef <type>struct <name>svn_ra_serf__options_context_t</name></type> <name>svn_ra_serf__options_context_t</name>;</typedef>

<comment type="block">/* Is this OPTIONS-request done yet? */</comment>
<function_decl><type><name>svn_boolean_t</name>*</type>
<name>svn_ra_serf__get_options_done_ptr</name><parameter_list>(<param><decl><type><name>svn_ra_serf__options_context_t</name> *</type><name>ctx</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_ra_serf__options_get_activity_collection</name><parameter_list>(<param><decl><type><name>svn_ra_serf__options_context_t</name> *</type><name>ctx</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__get_options_error</name><parameter_list>(<param><decl><type><name>svn_ra_serf__options_context_t</name> *</type><name>ctx</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__get_options_parser_error</name><parameter_list>(<param><decl><type><name>svn_ra_serf__options_context_t</name> *</type><name>ctx</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Create an OPTIONS request */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__create_options_req</name><parameter_list>(<param><decl><type><name>svn_ra_serf__options_context_t</name> **</type><name>opt_ctx</name></decl></param>,
                                <param><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name></decl></param>,
                                <param><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>conn</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Try to discover our current root @a vcc_url and the resultant @a rel_path
 * based on @a orig_path for the @a session on @a conn.
 *
 * @a rel_path may be NULL if the caller is not interested in the relative
 * path.
 *
 * All temporary allocations will be made in @a pool.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__discover_root</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>vcc_url</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>rel_path</name></decl></param>,
                           <param><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name></decl></param>,
                           <param><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>conn</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>orig_path</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Set *BC_URL to the baseline collection url, and set *BC_RELATIVE to
 * the path relative to that url for URL in REVISION using SESSION.
 * REVISION may be SVN_INVALID_REVNUM (to mean "the current HEAD
 * revision").  If URL is NULL, use SESSION's session url.
 * Use POOL for all allocations.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__get_baseline_info</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>bc_url</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>bc_relative</name></decl></param>,
                               <param><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
                               <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** RA functions **/</comment>

<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__get_log</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>paths</name></decl></param>,
                     <param><decl><type><name>svn_revnum_t</name></type> <name>start</name></decl></param>,
                     <param><decl><type><name>svn_revnum_t</name></type> <name>end</name></decl></param>,
                     <param><decl><type><name>int</name></type> <name>limit</name></decl></param>,
                     <param><decl><type><name>svn_boolean_t</name></type> <name>discover_changed_paths</name></decl></param>,
                     <param><decl><type><name>svn_boolean_t</name></type> <name>strict_node_history</name></decl></param>,
                     <param><decl><type><name>svn_boolean_t</name></type> <name>include_merged_revisions</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>revprops</name></decl></param>,
                     <param><decl><type><name>svn_log_entry_receiver_t</name></type> <name>receiver</name></decl></param>,
                     <param><decl><type><name>void</name> *</type><name>receiver_baton</name></decl></param>,
                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__get_locations</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                           <param><decl><type><name>apr_hash_t</name> **</type><name>locations</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                           <param><decl><type><name>svn_revnum_t</name></type> <name>peg_revision</name></decl></param>,
                           <param><decl><type><name>apr_array_header_t</name> *</type><name>location_revisions</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__get_location_segments</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                   <param><decl><type><name>svn_revnum_t</name></type> <name>peg_revision</name></decl></param>,
                                   <param><decl><type><name>svn_revnum_t</name></type> <name>start_rev</name></decl></param>,
                                   <param><decl><type><name>svn_revnum_t</name></type> <name>end_rev</name></decl></param>,
                                   <param><decl><type><name>svn_location_segment_receiver_t</name></type> <name>receiver</name></decl></param>,
                                   <param><decl><type><name>void</name> *</type><name>receiver_baton</name></decl></param>,
                                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__do_diff</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>svn_ra_reporter3_t</name> **</type><name>reporter</name></decl></param>,
                     <param><decl><type><name>void</name> **</type><name>report_baton</name></decl></param>,
                     <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>diff_target</name></decl></param>,
                     <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                     <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl></param>,
                     <param><decl><type><name>svn_boolean_t</name></type> <name>text_deltas</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>versus_url</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>diff_editor</name></decl></param>,
                     <param><decl><type><name>void</name> *</type><name>diff_baton</name></decl></param>,
                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__do_status</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>svn_ra_reporter3_t</name> **</type><name>reporter</name></decl></param>,
                       <param><decl><type><name>void</name> **</type><name>report_baton</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>status_target</name></decl></param>,
                       <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                       <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>status_editor</name></decl></param>,
                       <param><decl><type><name>void</name> *</type><name>status_baton</name></decl></param>,
                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__do_update</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>svn_ra_reporter3_t</name> **</type><name>reporter</name></decl></param>,
                       <param><decl><type><name>void</name> **</type><name>report_baton</name></decl></param>,
                       <param><decl><type><name>svn_revnum_t</name></type> <name>revision_to_update_to</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>update_target</name></decl></param>,
                       <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                       <param><decl><type><name>svn_boolean_t</name></type> <name>send_copyfrom_args</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>update_editor</name></decl></param>,
                       <param><decl><type><name>void</name> *</type><name>update_baton</name></decl></param>,
                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__do_switch</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>svn_ra_reporter3_t</name> **</type><name>reporter</name></decl></param>,
                       <param><decl><type><name>void</name> **</type><name>report_baton</name></decl></param>,
                       <param><decl><type><name>svn_revnum_t</name></type> <name>revision_to_switch_to</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>switch_target</name></decl></param>,
                       <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>switch_url</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>switch_editor</name></decl></param>,
                       <param><decl><type><name>void</name> *</type><name>switch_baton</name></decl></param>,
                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__get_file_revs</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                           <param><decl><type><name>svn_revnum_t</name></type> <name>start</name></decl></param>,
                           <param><decl><type><name>svn_revnum_t</name></type> <name>end</name></decl></param>,
                           <param><decl><type><name>svn_boolean_t</name></type> <name>include_merged_revisions</name></decl></param>,
                           <param><decl><type><name>svn_file_rev_handler_t</name></type> <name>handler</name></decl></param>,
                           <param><decl><type><name>void</name> *</type><name>handler_baton</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__get_dated_revision</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                                <param><decl><type><name>svn_revnum_t</name> *</type><name>revision</name></decl></param>,
                                <param><decl><type><name>apr_time_t</name></type> <name>tm</name></decl></param>,
                                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__get_commit_editor</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
                               <param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
                               <param><decl><type><name>apr_hash_t</name> *</type><name>revprop_table</name></decl></param>,
                               <param><decl><type><name>svn_commit_callback2_t</name></type> <name>callback</name></decl></param>,
                               <param><decl><type><name>void</name> *</type><name>callback_baton</name></decl></param>,
                               <param><decl><type><name>apr_hash_t</name> *</type><name>lock_tokens</name></decl></param>,
                               <param><decl><type><name>svn_boolean_t</name></type> <name>keep_locks</name></decl></param>,
                               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__get_file</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                      <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                      <param><decl><type><name>svn_stream_t</name> *</type><name>stream</name></decl></param>,
                      <param><decl><type><name>svn_revnum_t</name> *</type><name>fetched_rev</name></decl></param>,
                      <param><decl><type><name>apr_hash_t</name> **</type><name>props</name></decl></param>,
                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__change_rev_prop</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                             <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__replay</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
                    <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                    <param><decl><type><name>svn_revnum_t</name></type> <name>low_water_mark</name></decl></param>,
                    <param><decl><type><name>svn_boolean_t</name></type> <name>text_deltas</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>editor</name></decl></param>,
                    <param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__replay_range</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
                          <param><decl><type><name>svn_revnum_t</name></type> <name>start_revision</name></decl></param>,
                          <param><decl><type><name>svn_revnum_t</name></type> <name>end_revision</name></decl></param>,
                          <param><decl><type><name>svn_revnum_t</name></type> <name>low_water_mark</name></decl></param>,
                          <param><decl><type><name>svn_boolean_t</name></type> <name>send_deltas</name></decl></param>,
                          <param><decl><type><name>svn_ra_replay_revstart_callback_t</name></type> <name>revstart_func</name></decl></param>,
                          <param><decl><type><name>svn_ra_replay_revfinish_callback_t</name></type> <name>revfinish_func</name></decl></param>,
                          <param><decl><type><name>void</name> *</type><name>replay_baton</name></decl></param>,
                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__lock</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
                  <param><decl><type><name>apr_hash_t</name> *</type><name>path_revs</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>comment</name></decl></param>,
                  <param><decl><type><name>svn_boolean_t</name></type> <name>force</name></decl></param>,
                  <param><decl><type><name>svn_ra_lock_callback_t</name></type> <name>lock_func</name></decl></param>,
                  <param><decl><type><name>void</name> *</type><name>lock_baton</name></decl></param>,
                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__unlock</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
                    <param><decl><type><name>apr_hash_t</name> *</type><name>path_tokens</name></decl></param>,
                    <param><decl><type><name>svn_boolean_t</name></type> <name>force</name></decl></param>,
                    <param><decl><type><name>svn_ra_lock_callback_t</name></type> <name>lock_func</name></decl></param>,
                    <param><decl><type><name>void</name> *</type><name>lock_baton</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__get_lock</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
                      <param><decl><type><name>svn_lock_t</name> **</type><name>lock</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__get_locks</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
                       <param><decl><type><name>apr_hash_t</name> **</type><name>locks</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>svn_error_t</name> *</type> <name>svn_ra_serf__get_mergeinfo</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
                                         <param><decl><type><name>apr_hash_t</name> **</type><name>mergeinfo</name></decl></param>,
                                         <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>paths</name></decl></param>,
                                         <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                                         <param><decl><type><name>svn_mergeinfo_inheritance_t</name></type> <name>inherit</name></decl></param>,
                                         <param><decl><type><name>svn_boolean_t</name></type> <name>include_descendants</name></decl></param>,
                                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Implements the has_capability RA layer function. */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__has_capability</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
                            <param><decl><type><name>svn_boolean_t</name> *</type><name>has</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>capability</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/*** Authentication handler declarations ***/</comment>

<comment type="block">/**
 * For each authentication protocol we need a handler function of type
 * svn_serf__auth_handler_func_t. This function will be called when an
 * authentication challenge is received in a session.
 */</comment>
<typedef>typedef <function_decl><type><name>svn_error_t</name> *</type>
(*<name>svn_serf__auth_handler_func_t</name>)<parameter_list>(<param><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name></decl></param>,
                                 <param><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>conn</name></decl></param>,
                                 <param><decl><type><name>serf_request_t</name> *</type><name>request</name></decl></param>,
                                 <param><decl><type><name>serf_bucket_t</name> *</type><name>response</name></decl></param>,
                                 <param><decl><type><name>char</name> *</type><name>auth_hdr</name></decl></param>,
                                 <param><decl><type><name>char</name> *</type><name>auth_attr</name></decl></param>,
                                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="block">/**
 * For each authentication protocol we need an initialization function of type
 * svn_serf__init_conn_func_t. This function will be called when a new
 * connection is opened.
 */</comment>
<typedef>typedef <function_decl><type><name>svn_error_t</name> *</type>
(*<name>svn_serf__init_conn_func_t</name>)<parameter_list>(<param><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name></decl></param>,
                              <param><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>conn</name></decl></param>,
                              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="block">/**
 * For each authentication protocol we need a setup_request function of type
 * svn_serf__setup_request_func_t. This function will be called when a
 * new serf_request_t object is created and should fill in the correct
 * authentication headers (if needed).
 */</comment>
<typedef>typedef <function_decl><type><name>svn_error_t</name> *</type>
(*<name>svn_serf__setup_request_func_t</name>)<parameter_list>(<param><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>conn</name></decl></param>,
                                  <param><decl><type><name>serf_bucket_t</name> *</type><name>hdrs_bkt</name></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="block">/**
 * svn_ra_serf__auth_protocol_t: vtable for an authn protocol provider.
 * 
 */</comment>
<struct>struct <name>svn_ra_serf__auth_protocol_t</name> <block>{
  <comment type="block">/* The http status code that's handled by this authentication protocol.
     Normal values are 401 for server authentication and 407 for proxy
     authentication */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>

  <comment type="block">/* The name of this authentication protocol. This should be a case
     sensitive match of the string sent in the HTTP authentication header. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>auth_name</name></decl>;</decl_stmt>

  <comment type="block">/* The initialization function if any; otherwise, NULL */</comment>
  <decl_stmt><decl><type><name>svn_serf__init_conn_func_t</name></type> <name>init_conn_func</name></decl>;</decl_stmt>

  <comment type="block">/* The authentication handler function */</comment>
  <decl_stmt><decl><type><name>svn_serf__auth_handler_func_t</name></type> <name>handle_func</name></decl>;</decl_stmt>

  <comment type="block">/* Function to set up the authentication header of a request */</comment>
  <decl_stmt><decl><type><name>svn_serf__setup_request_func_t</name></type> <name>setup_request_func</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/**
 * This function will be called when an authentication challenge is
 * received. Based on the challenge, handle_auth will pick the needed
 * authn implementation and forward the call to its authn handler.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__handle_auth</name><parameter_list>(<param><decl><type><name>int</name></type> <name>code</name></decl></param>,
                         <param><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name></decl></param>,
                         <param><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>conn</name></decl></param>,
                         <param><decl><type><name>serf_request_t</name> *</type><name>request</name></decl></param>,
                         <param><decl><type><name>serf_bucket_t</name> *</type><name>response</name></decl></param>,
                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * encode_auth_header: base64 encodes the authentication data and builds an 
 * authentication header in this format:
 * [PROTOCOL] [BASE64 AUTH DATA]
 */</comment>
<function_decl><type><name>void</name></type>
<name>svn_ra_serf__encode_auth_header</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type> <name>protocol</name></decl></param>,
                                <param><decl><type><name>char</name> **</type><name>header</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>char</name> *</type> <name>data</name></decl></param>,
                                <param><decl><type><name>apr_size_t</name></type> <name>data_len</name></decl></param>,
                                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SVN_LIBSVN_RA_SERF_RA_SERF_H */</comment>
</unit>
