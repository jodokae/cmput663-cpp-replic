<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_ra_serf/getlocations.c"><comment type="block">/*
 * getlocations.c :  entry point for get_locations RA functions for ra_serf
 *
 * ====================================================================
 * Copyright (c) 2006 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>


<escape char="0xc"/>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_uri.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;expat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;serf.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_ra.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_dav.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_xml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libsvn_ra/ra_loader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_delta.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ra_serf.h"</cpp:file></cpp:include>

<escape char="0xc"/>
<comment type="block">/*
 * This enum represents the current state of our XML parsing for a REPORT.
 */</comment>
<typedef>typedef <type><enum>enum <block>{
  <decl><name>REPORT</name></decl>,
  <decl><name>LOCATION</name></decl>,
}</block></enum></type> <name>loc_state_e</name>;</typedef>

<typedef>typedef <type><struct>struct <name>loc_state_list_t</name> <block>{
  <comment type="block">/* The current state that we are in now. */</comment>
  <decl_stmt><decl><type><name>loc_state_e</name></type> <name>state</name></decl>;</decl_stmt>

  <comment type="block">/* The previous state we were in. */</comment>
  <decl_stmt><decl><type>struct <name>loc_state_list_t</name> *</type><name>prev</name></decl>;</decl_stmt>
}</block></struct></type> <name>loc_state_list_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
  <comment type="block">/* pool to allocate memory from */</comment>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>

  <comment type="block">/* Returned location hash */</comment>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>paths</name></decl>;</decl_stmt>

  <comment type="block">/* Current state we're in */</comment>
  <decl_stmt><decl><type><name>loc_state_list_t</name> *</type><name>state</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>loc_state_list_t</name> *</type><name>free_state</name></decl>;</decl_stmt>

  <comment type="block">/* Return error code */</comment>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>error</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>status_code</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>done</name></decl>;</decl_stmt>
}</block></struct></type> <name>loc_context_t</name>;</typedef>

<escape char="0xc"/>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>push_state</name><parameter_list>(<param><decl><type><name>loc_context_t</name> *</type><name>loc_ctx</name></decl></param>, <param><decl><type><name>loc_state_e</name></type> <name>state</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>loc_state_list_t</name> *</type><name>new_state</name></decl>;</decl_stmt>

  <if>if <condition>(<expr>!<name><name>loc_ctx</name>-&gt;<name>free_state</name></name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>new_state</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>loc_ctx</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name><name>loc_ctx</name>-&gt;<name>state</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <expr_stmt><expr><name>new_state</name> = <name><name>loc_ctx</name>-&gt;<name>free_state</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>loc_ctx</name>-&gt;<name>free_state</name></name> = <name><name>loc_ctx</name>-&gt;<name>free_state</name>-&gt;<name>prev</name></name></expr>;</expr_stmt>
    }</block></else></if>
  <expr_stmt><expr><name><name>new_state</name>-&gt;<name>state</name></name> = <name>state</name></expr>;</expr_stmt>

  <comment type="block">/* Add it to the state chain. */</comment>
  <expr_stmt><expr><name><name>new_state</name>-&gt;<name>prev</name></name> = <name><name>loc_ctx</name>-&gt;<name>state</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>loc_ctx</name>-&gt;<name>state</name></name> = <name>new_state</name></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pop_state</name><parameter_list>(<param><decl><type><name>loc_context_t</name> *</type><name>loc_ctx</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>loc_state_list_t</name> *</type><name>free_state</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>free_state</name> = <name><name>loc_ctx</name>-&gt;<name>state</name></name></expr>;</expr_stmt>
  <comment type="block">/* advance the current state */</comment>
  <expr_stmt><expr><name><name>loc_ctx</name>-&gt;<name>state</name></name> = <name><name>loc_ctx</name>-&gt;<name>state</name>-&gt;<name>prev</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>free_state</name>-&gt;<name>prev</name></name> = <name><name>loc_ctx</name>-&gt;<name>free_state</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>loc_ctx</name>-&gt;<name>free_state</name></name> = <name>free_state</name></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>start_getloc</name><parameter_list>(<param><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser</name></decl></param>,
             <param><decl><type><name>void</name> *</type><name>userData</name></decl></param>,
             <param><decl><type><name>svn_ra_serf__dav_props_t</name></type> <name>name</name></decl></param>,
             <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>attrs</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>loc_context_t</name> *</type><name>loc_ctx</name> <init>= <expr><name>userData</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr>!<name><name>loc_ctx</name>-&gt;<name>state</name></name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"get-locations-report"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>push_state</name><argument_list>(<argument><expr><name>loc_ctx</name></expr></argument>, <argument><expr><name>REPORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr><name><name>loc_ctx</name>-&gt;<name>state</name></name> &amp;&amp;
           <name><name>loc_ctx</name>-&gt;<name>state</name>-&gt;<name>state</name></name> == <name>REPORT</name> &amp;&amp;
           <call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"location"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>revstr</name></decl>, *<decl><type ref="prev"/><name>path</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>revstr</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"rev"</expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>revstr</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>rev</name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name>revstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

      <expr_stmt><expr><name>path</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"path"</expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>rev</name></expr></argument>)</argument_list></call> &amp;&amp; <name>path</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>loc_ctx</name>-&gt;<name>paths</name></name></expr></argument>,
                       <argument><expr><call><name>apr_pmemdup</name><argument_list>(<argument><expr><name><name>loc_ctx</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rev</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>,
                       <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rev</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                       <argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>loc_ctx</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if></else></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>end_getloc</name><parameter_list>(<param><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser</name></decl></param>,
           <param><decl><type><name>void</name> *</type><name>userData</name></decl></param>,
           <param><decl><type><name>svn_ra_serf__dav_props_t</name></type> <name>name</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>loc_context_t</name> *</type><name>loc_ctx</name> <init>= <expr><name>userData</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>loc_state_list_t</name> *</type><name>cur_state</name></decl>;</decl_stmt>

  <if>if <condition>(<expr>!<name><name>loc_ctx</name>-&gt;<name>state</name></name></expr>)</condition><then>
    <block>{
      <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
    }</block></then></if>

  <expr_stmt><expr><name>cur_state</name> = <name><name>loc_ctx</name>-&gt;<name>state</name></name></expr>;</expr_stmt>

  <if>if <condition>(<expr><name><name>cur_state</name>-&gt;<name>state</name></name> == <name>REPORT</name> &amp;&amp;
      <call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"get-locations-report"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>pop_state</name><argument_list>(<argument><expr><name>loc_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr><name><name>cur_state</name>-&gt;<name>state</name></name> == <name>LOCATION</name> &amp;&amp;
           <call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"location"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>pop_state</name><argument_list>(<argument><expr><name>loc_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></else></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__get_locations</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
                           <param><decl><type><name>apr_hash_t</name> **</type><name>locations</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                           <param><decl><type><name>svn_revnum_t</name></type> <name>peg_revision</name></decl></param>,
                           <param><decl><type><name>apr_array_header_t</name> *</type><name>location_revisions</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>loc_context_t</name> *</type><name>loc_ctx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name> <init>= <expr><name><name>ra_session</name>-&gt;<name>priv</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra_serf__handler_t</name> *</type><name>handler</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser_ctx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>serf_bucket_t</name> *</type><name>buckets</name></decl>, *<decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>relative_url</name></decl>, *<decl><type ref="prev"/><name>basecoll_url</name></decl>, *<decl><type ref="prev"/><name>req_url</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>loc_ctx</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>loc_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>loc_ctx</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>loc_ctx</name>-&gt;<name>error</name></name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>loc_ctx</name>-&gt;<name>done</name></name> = <name>FALSE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>loc_ctx</name>-&gt;<name>paths</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name><name>loc_ctx</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>locations</name> = <name><name>loc_ctx</name>-&gt;<name>paths</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name>buckets</name> = <call><name>serf_bucket_aggregate_create</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr>"&lt;S:get-locations xmlns:S=\""</expr></argument>,
                                      <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>"&lt;S:get-locations xmlns:S=\""</expr></argument>)</argument_list></sizeof>-1</expr></argument>,
                                      <argument><expr><name><name>session</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name>buckets</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr><name>SVN_XML_NAMESPACE</name></expr></argument>,
                                      <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVN_XML_NAMESPACE</name></expr></argument>)</argument_list></sizeof>-1</expr></argument>,
                                      <argument><expr><name><name>session</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name>buckets</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr>"\"&gt;"</expr></argument>,
                                      <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>"\"&gt;"</expr></argument>)</argument_list></sizeof>-1</expr></argument>,
                                      <argument><expr><name><name>session</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name>buckets</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>svn_ra_serf__add_tag_buckets</name><argument_list>(<argument><expr><name>buckets</name></expr></argument>,
                               <argument><expr>"S:path"</expr></argument>, <argument><expr><name>path</name></expr></argument>,
                               <argument><expr><name><name>session</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>svn_ra_serf__add_tag_buckets</name><argument_list>(<argument><expr><name>buckets</name></expr></argument>,
                               <argument><expr>"S:peg-revision"</expr></argument>, <argument><expr><call><name>apr_ltoa</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>peg_revision</name></expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><name><name>session</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>location_revisions</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>location_revisions</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_revnum_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>svn_ra_serf__add_tag_buckets</name><argument_list>(<argument><expr><name>buckets</name></expr></argument>,
                                   <argument><expr>"S:location-revision"</expr></argument>, <argument><expr><call><name>apr_ltoa</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr></argument>,
                                   <argument><expr><name><name>session</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

  <expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr>"&lt;/S:get-locations&gt;"</expr></argument>,
                                      <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>"&lt;/S:get-locations&gt;"</expr></argument>)</argument_list></sizeof>-1</expr></argument>,
                                      <argument><expr><name><name>session</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name>buckets</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_serf__get_baseline_info</name><argument_list>(<argument><expr>&amp;<name>basecoll_url</name></expr></argument>, <argument><expr>&amp;<name>relative_url</name></expr></argument>,
                                         <argument><expr><name>session</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>peg_revision</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>req_url</name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name>basecoll_url</name></expr></argument>, <argument><expr><name>relative_url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>handler</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>handler</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>handler</name>-&gt;<name>method</name></name> = "REPORT"</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>handler</name>-&gt;<name>path</name></name> = <name>req_url</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>handler</name>-&gt;<name>body_buckets</name></name> = <name>buckets</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>handler</name>-&gt;<name>body_type</name></name> = "text/xml"</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>handler</name>-&gt;<name>conn</name></name> = <name><name>session</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>handler</name>-&gt;<name>session</name></name> = <name>session</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>parser_ctx</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>parser_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>user_data</name></name> = <name>loc_ctx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>start</name></name> = <name>start_getloc</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>end</name></name> = <name>end_getloc</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>status_code</name></name> = &amp;<name><name>loc_ctx</name>-&gt;<name>status_code</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>done</name></name> = &amp;<name><name>loc_ctx</name>-&gt;<name>done</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>handler</name>-&gt;<name>response_handler</name></name> = <name>svn_ra_serf__handle_xml_parser</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>handler</name>-&gt;<name>response_baton</name></name> = <name>parser_ctx</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>svn_ra_serf__request_create</name><argument_list>(<argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>err</name> = <call><name>svn_ra_serf__context_run_wait</name><argument_list>(<argument><expr>&amp;<name><name>loc_ctx</name>-&gt;<name>done</name></name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name><name>loc_ctx</name>-&gt;<name>error</name></name> || <name><name>parser_ctx</name>-&gt;<name>error</name></name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>err</name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><name><name>loc_ctx</name>-&gt;<name>error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><name><name>parser_ctx</name>-&gt;<name>error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <if>if <condition>(<expr><name><name>loc_ctx</name>-&gt;<name>status_code</name></name> == 404</expr>)</condition><then>
    <block>{
      <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_PATH_NOT_FOUND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                              <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s' path not found"</expr></argument>)</argument_list></call></expr></argument>,
                                           <argument><expr><name>req_url</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

  <return>return <expr><name>err</name></expr>;</return>
}</block></function>
</unit>
