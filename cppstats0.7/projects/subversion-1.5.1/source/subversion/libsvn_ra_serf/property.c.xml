<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_ra_serf/property.c"><comment type="block">/*
 * property.c : property routines for ra_serf
 *
 * ====================================================================
 * Copyright (c) 2006-2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>


<escape char="0xc"/>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;serf.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_base64.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_xml.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_dav_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ra_serf.h"</cpp:file></cpp:include>

<escape char="0xc"/>
<comment type="block">/* Our current parsing state we're in for the PROPFIND response. */</comment>
<typedef>typedef <type><enum>enum <block>{
  <decl><name>NONE</name> <init>= <expr>0</expr></init></decl>,
  <decl><name>RESPONSE</name></decl>,
  <decl><name>PROP</name></decl>,
  <decl><name>PROPVAL</name></decl>,
}</block></enum></type> <name>prop_state_e</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>

  <comment type="block">/* Current ns, attribute name, and value of the property we're parsing */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ns</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_size_t</name></type> <name>val_len</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>encoding</name></decl>;</decl_stmt>

}</block></struct></type> <name>prop_info_t</name>;</typedef>

<comment type="block">/*
 * This structure represents a pending PROPFIND response.
 */</comment>
<struct>struct <name>svn_ra_serf__propfind_context_t</name> <block>{
  <comment type="block">/* pool to issue allocations from */</comment>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>svn_ra_serf__handler_t</name> *</type><name>handler</name></decl>;</decl_stmt>

  <comment type="block">/* associated serf session */</comment>
  <decl_stmt><decl><type><name>svn_ra_serf__session_t</name> *</type><name>sess</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>conn</name></decl>;</decl_stmt>

  <comment type="block">/* the requested path */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>

  <comment type="block">/* the requested version (number and string form) */</comment>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>label</name></decl>;</decl_stmt>

  <comment type="block">/* the request depth */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>depth</name></decl>;</decl_stmt>

  <comment type="block">/* the list of requested properties */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_ra_serf__dav_props_t</name> *</type><name>find_props</name></decl>;</decl_stmt>

  <comment type="block">/* should we cache the values of this propfind in our session? */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>cache_props</name></decl>;</decl_stmt>

  <comment type="block">/* hash table that will be updated with the properties
   *
   * This can be shared between multiple svn_ra_serf__propfind_context_t
   * structures
   */</comment>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>ret_props</name></decl>;</decl_stmt>

  <comment type="block">/* If we're dealing with a Depth: 1 response,
   * we may be dealing with multiple paths.
   */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>current_path</name></decl>;</decl_stmt>

  <comment type="block">/* Returned status code. */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>status_code</name></decl>;</decl_stmt>

  <comment type="block">/* Are we done issuing the PROPFIND? */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>done</name></decl>;</decl_stmt>

  <comment type="block">/* Context from XML stream */</comment>
  <decl_stmt><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser_ctx</name></decl>;</decl_stmt>

  <comment type="block">/* If not-NULL, add us to this list when we're done. */</comment>
  <decl_stmt><decl><type><name>svn_ra_serf__list_t</name> **</type><name>done_list</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>svn_ra_serf__list_t</name></type> <name>done_item</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>const</specifier> <name>svn_string_t</name> *</type>
<name>svn_ra_serf__get_ver_prop_string</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                 <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ns</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>ver_props</name></decl>, *<decl><type ref="prev"/><name>path_props</name></decl>, *<decl><type ref="prev"/><name>ns_props</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>val</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>ver_props</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rev</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>ver_props</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>path_props</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>ver_props</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>path_props</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>ns_props</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>path_props</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>ns_props</name></expr>)</condition><then>
            <block>{
              <expr_stmt><expr><name>val</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>ns_props</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></then></if>

  <return>return <expr><name>val</name></expr>;</return>
}</block></function>

<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_ra_serf__get_ver_prop</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                          <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ns</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>val</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>val</name> = <call><name>svn_ra_serf__get_ver_prop_string</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>val</name></expr>)</condition><then>
    <block>{
      <return>return <expr><name><name>val</name>-&gt;<name>data</name></name></expr>;</return>
    }</block></then></if>

  <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_ra_serf__get_prop</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ns</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_ra_serf__get_ver_prop</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name>svn_ra_serf__set_ver_prop</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ns</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>val</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>ver_props</name></decl>, *<decl><type ref="prev"/><name>path_props</name></decl>, *<decl><type ref="prev"/><name>ns_props</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>ver_props</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rev</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>ver_props</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>ver_props</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><call><name>apr_pmemdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rev</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rev</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                   <argument><expr><name>ver_props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <expr_stmt><expr><name>path_props</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>ver_props</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<name>path_props</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>path_props</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>path</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>ver_props</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>path_props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* todo: we know that we'll fail the next check, but fall through
       * for now for simplicity's sake.
       */</comment>
    }</block></then></if>

  <expr_stmt><expr><name>ns_props</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>path_props</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>ns_props</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>ns_props</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>ns</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>path_props</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>ns_props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>ns_props</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type>
<name>svn_ra_serf__set_prop</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ns</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>val</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>svn_ra_serf__set_ver_prop</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
                            <argument><expr><name>val</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>prop_info_t</name> *</type>
<name>push_state</name><parameter_list>(<param><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser</name></decl></param>,
           <param><decl><type><name>svn_ra_serf__propfind_context_t</name> *</type><name>propfind</name></decl></param>,
           <param><decl><type><name>prop_state_e</name></type> <name>state</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>svn_ra_serf__xml_push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>state</name> == <name>PROPVAL</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>prop_info_t</name> *</type><name>info</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>info</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name>-&gt;<name>pool</name></name> = <name><name>parser</name>-&gt;<name>state</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>private</name></name> = <name>info</name></expr>;</expr_stmt>
    }</block></then></if>

  <return>return <expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>private</name></name></expr>;</return>
}</block></function>

<comment type="block">/*
 * Expat callback invoked on a start element tag for a PROPFIND response.
 */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>start_propfind</name><parameter_list>(<param><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser</name></decl></param>,
               <param><decl><type><name>void</name> *</type><name>userData</name></decl></param>,
               <param><decl><type><name>svn_ra_serf__dav_props_t</name></type> <name>name</name></decl></param>,
               <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>attrs</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_ra_serf__propfind_context_t</name> *</type><name>ctx</name> <init>= <expr><name>userData</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>prop_state_e</name></type> <name>state</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>prop_info_t</name> *</type><name>info</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>state</name> = <name><name>parser</name>-&gt;<name>state</name>-&gt;<name>current_state</name></name></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>state</name> == <name>NONE</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"response"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_ra_serf__xml_push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>RESPONSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>state</name> == <name>RESPONSE</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"href"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>info</name> = <call><name>push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>PROPVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name>-&gt;<name>ns</name></name> = <name><name>name</name>.<name>namespace</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name>-&gt;<name>name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>state</name> == <name>RESPONSE</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"prop"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>PROP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>state</name> == <name>PROP</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>info</name> = <call><name>push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>PROPVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name>-&gt;<name>ns</name></name> = <name><name>name</name>.<name>namespace</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name>-&gt;<name>name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>info</name>-&gt;<name>encoding</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>pool</name></name></expr></argument>,
                                   <argument><expr><call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"V:encoding"</expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></else></if></else></if></else></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * Expat callback invoked on an end element tag for a PROPFIND response.
 */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>end_propfind</name><parameter_list>(<param><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser</name></decl></param>,
             <param><decl><type><name>void</name> *</type><name>userData</name></decl></param>,
             <param><decl><type><name>svn_ra_serf__dav_props_t</name></type> <name>name</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_ra_serf__propfind_context_t</name> *</type><name>ctx</name> <init>= <expr><name>userData</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>prop_state_e</name></type> <name>state</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>prop_info_t</name> *</type><name>info</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>state</name> = <name><name>parser</name>-&gt;<name>state</name>-&gt;<name>current_state</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>info</name> = <name><name>parser</name>-&gt;<name>state</name>-&gt;<name>private</name></name></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>state</name> == <name>RESPONSE</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"response"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_ra_serf__xml_pop_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>state</name> == <name>PROP</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"prop"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_ra_serf__xml_pop_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>state</name> == <name>PROPVAL</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ns</name></decl>, *<decl><type ref="prev"/><name>pname</name></decl>, *<decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_string_t</name> *</type><name>val_str</name></decl>;</decl_stmt>

      <comment type="block">/* if we didn't see a CDATA element, we may want the tag name
       * as long as it isn't equivalent to the property name.
       */</comment>
      <if>if <condition>(<expr>!<name><name>info</name>-&gt;<name>val</name></name></expr>)</condition><then>
        <block>{
          <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
            <block>{
              <expr_stmt><expr><name><name>info</name>-&gt;<name>val</name></name> = <name><name>name</name>.<name>name</name></name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>info</name>-&gt;<name>val_len</name></name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
          <else>else
            <block>{
              <expr_stmt><expr><name><name>info</name>-&gt;<name>val</name></name> = ""</expr>;</expr_stmt>
              <expr_stmt><expr><name><name>info</name>-&gt;<name>val_len</name></name> = 0</expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>

      <if>if <condition>(<expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>prev</name>-&gt;<name>current_state</name></name> == <name>RESPONSE</name> &amp;&amp;
          <call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"href"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <block>{
          <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>depth</name></name></expr></argument>, <argument><expr>"1"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
            <block>{
              <expr_stmt><expr><name><name>ctx</name>-&gt;<name>current_path</name></name> = <call><name>svn_path_canonicalize</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>val</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
          <else>else
            <block>{
              <expr_stmt><expr><name><name>ctx</name>-&gt;<name>current_path</name></name> = <name><name>ctx</name>-&gt;<name>path</name></name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then>
      <else>else <if>if <condition>(<expr><name><name>info</name>-&gt;<name>encoding</name></name></expr>)</condition><then>
        <block>{
          <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>encoding</name></name></expr></argument>, <argument><expr>"base64"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
            <block>{
              <decl_stmt><decl><type><name>svn_string_t</name></type> <name>encoded</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>decoded</name></decl>;</decl_stmt>

              <expr_stmt><expr><name><name>encoded</name>.<name>data</name></name> = <name><name>info</name>-&gt;<name>val</name></name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>encoded</name>.<name>len</name></name> = <name><name>info</name>-&gt;<name>val_len</name></name></expr>;</expr_stmt>

              <expr_stmt><expr><name>decoded</name> = <call><name>svn_base64_decode_string</name><argument_list>(<argument><expr>&amp;<name>encoded</name></expr></argument>, <argument><expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>info</name>-&gt;<name>val</name></name> = <name><name>decoded</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>info</name>-&gt;<name>val_len</name></name> = <name><name>decoded</name>-&gt;<name>len</name></name></expr>;</expr_stmt>
            }</block></then>
          <else>else
            <block>{
              <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>,
                                       <argument><expr><name>NULL</name></expr></argument>,
                                       <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Got unrecognized encoding '%s'"</expr></argument>)</argument_list></call></expr></argument>,
                                       <argument><expr><name><name>info</name>-&gt;<name>encoding</name></name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></else></if>
        }</block></then></if></else></if>

      <expr_stmt><expr><name>ns</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>ns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pname</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>val</name> = <call><name>apr_pmemdup</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>val</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>val_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>val_str</name> = <call><name>svn_string_ncreate</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>val_len</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* set the return props and update our cache too. */</comment>
      <expr_stmt><expr><call><name>svn_ra_serf__set_ver_prop</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>ret_props</name></name></expr></argument>,
                                <argument><expr><name><name>ctx</name>-&gt;<name>current_path</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>rev</name></name></expr></argument>,
                                <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>pname</name></expr></argument>, <argument><expr><name>val_str</name></expr></argument>,
                                <argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>cache_props</name></name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>ns</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>sess</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>ns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>pname</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>sess</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>val</name> = <call><name>apr_pmemdup</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>sess</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>val</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>val_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>val_str</name> = <call><name>svn_string_ncreate</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>val_len</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>sess</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>svn_ra_serf__set_ver_prop</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>sess</name>-&gt;<name>cached_props</name></name></expr></argument>,
                                    <argument><expr><name><name>ctx</name>-&gt;<name>current_path</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>rev</name></name></expr></argument>,
                                    <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>pname</name></expr></argument>, <argument><expr><name>val_str</name></expr></argument>,
                                    <argument><expr><name><name>ctx</name>-&gt;<name>sess</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

      <expr_stmt><expr><call><name>svn_ra_serf__xml_pop_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></else></if></else></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * Expat callback invoked on CDATA elements in a PROPFIND response.
 *
 * This callback can be called multiple times.
 */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>cdata_propfind</name><parameter_list>(<param><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser</name></decl></param>,
               <param><decl><type><name>void</name> *</type><name>userData</name></decl></param>,
               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>,
               <param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_ra_serf__propfind_context_t</name> *</type><name>ctx</name> <init>= <expr><name>userData</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>prop_state_e</name></type> <name>state</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>prop_info_t</name> *</type><name>info</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>UNUSED_CTX</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>state</name> = <name><name>parser</name>-&gt;<name>state</name>-&gt;<name>current_state</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>info</name> = <name><name>parser</name>-&gt;<name>state</name>-&gt;<name>private</name></name></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>state</name> == <name>PROPVAL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_ra_serf__expand_string</name><argument_list>(<argument><expr>&amp;<name><name>info</name>-&gt;<name>val</name></name></expr></argument>, <argument><expr>&amp;<name><name>info</name>-&gt;<name>val_len</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
                                 <argument><expr><name><name>info</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type>
<name>setup_propfind</name><parameter_list>(<param><decl><type><name>serf_request_t</name> *</type><name>request</name></decl></param>,
               <param><decl><type><name>void</name> *</type><name>setup_baton</name></decl></param>,
               <param><decl><type><name>serf_bucket_t</name> **</type><name>req_bkt</name></decl></param>,
               <param><decl><type><name>serf_response_acceptor_t</name> *</type><name>acceptor</name></decl></param>,
               <param><decl><type><name>void</name> **</type><name>acceptor_baton</name></decl></param>,
               <param><decl><type><name>serf_response_handler_t</name> *</type><name>handler</name></decl></param>,
               <param><decl><type><name>void</name> **</type><name>handler_baton</name></decl></param>,
               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_ra_serf__propfind_context_t</name> *</type><name>ctx</name> <init>= <expr><name>setup_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser_ctx</name> <init>= <expr><name><name>ctx</name>-&gt;<name>parser_ctx</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>req_bkt</name> =
      <call><name>svn_ra_serf__bucket_propfind_create</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>conn</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>label</name></name></expr></argument>,
                                          <argument><expr><name><name>ctx</name>-&gt;<name>depth</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>find_props</name></name></expr></argument>,
                                          <argument><expr><call><name>serf_request_get_alloc</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>conn</name>-&gt;<name>using_ssl</name></name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr>*<name>req_bkt</name> =
          <call><name>serf_bucket_ssl_encrypt_create</name><argument_list>(<argument><expr>*<name>req_bkt</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>conn</name>-&gt;<name>ssl_context</name></name></expr></argument>,
                                         <argument><expr><call><name>serf_request_get_alloc</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr>!<name><name>ctx</name>-&gt;<name>conn</name>-&gt;<name>ssl_context</name></name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name><name>ctx</name>-&gt;<name>conn</name>-&gt;<name>ssl_context</name></name> =
              <call><name>serf_bucket_ssl_encrypt_context_get</name><argument_list>(<argument><expr>*<name>req_bkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

  <expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>user_data</name></name> = <name>ctx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>start</name></name> = <name>start_propfind</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>end</name></name> = <name>end_propfind</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>cdata</name></name> = <name>cdata_propfind</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>status_code</name></name> = &amp;<name><name>ctx</name>-&gt;<name>status_code</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>done</name></name> = &amp;<name><name>ctx</name>-&gt;<name>done</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>done_list</name></name> = <name><name>ctx</name>-&gt;<name>done_list</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>done_item</name></name> = &amp;<name><name>ctx</name>-&gt;<name>done_item</name></name></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>handler</name> = <name>svn_ra_serf__handle_xml_parser</name></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>handler_baton</name> = <name>parser_ctx</name></expr>;</expr_stmt>

  <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_boolean_t</name></type>
<name>check_cache</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>ret_props</name></decl></param>,
            <param><decl><type><name>svn_ra_serf__session_t</name> *</type><name>sess</name></decl></param>,
            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
            <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
            <param><decl><type><specifier>const</specifier> <name>svn_ra_serf__dav_props_t</name> *</type><name>find_props</name></decl></param>,
            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>cache_hit</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_ra_serf__dav_props_t</name> *</type><name>prop</name></decl>;</decl_stmt>

  <comment type="block">/* check to see if we have any of this information cached */</comment>
  <expr_stmt><expr><name>prop</name> = <name>find_props</name></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>prop</name> &amp;&amp; <name><name>prop</name>-&gt;<name>namespace</name></name></expr>)</condition>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>val</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>val</name> = <call><name>svn_ra_serf__get_ver_prop_string</name><argument_list>(<argument><expr><name><name>sess</name>-&gt;<name>cached_props</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>,
                                             <argument><expr><name><name>prop</name>-&gt;<name>namespace</name></name></expr></argument>, <argument><expr><name><name>prop</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>val</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>svn_ra_serf__set_ver_prop</name><argument_list>(<argument><expr><name>ret_props</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>,
                                    <argument><expr><name><name>prop</name>-&gt;<name>namespace</name></name></expr></argument>, <argument><expr><name><name>prop</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else
        <block>{
          <expr_stmt><expr><name>cache_hit</name> = <name>FALSE</name></expr>;</expr_stmt>
        }</block></else></if>
      <expr_stmt><expr><name>prop</name>++</expr>;</expr_stmt>
    }</block></while>

  <return>return <expr><name>cache_hit</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * This function will deliver a PROP_CTX PROPFIND request in the SESS
 * serf context for the properties listed in LOOKUP_PROPS at URL for
 * DEPTH ("0","1","infinity").
 *
 * This function will not block waiting for the response.  If the
 * request can be satisfied from a local cache, set PROP_CTX to NULL
 * as a signal to callers of that fact.  Otherwise, callers are
 * expected to call svn_ra_serf__wait_for_props().
 */</comment>
<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__deliver_props</name><parameter_list>(<param><decl><type><name>svn_ra_serf__propfind_context_t</name> **</type><name>prop_ctx</name></decl></param>,
                           <param><decl><type><name>apr_hash_t</name> *</type><name>ret_props</name></decl></param>,
                           <param><decl><type><name>svn_ra_serf__session_t</name> *</type><name>sess</name></decl></param>,
                           <param><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>conn</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                           <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>depth</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>svn_ra_serf__dav_props_t</name> *</type><name>find_props</name></decl></param>,
                           <param><decl><type><name>svn_boolean_t</name></type> <name>cache_props</name></decl></param>,
                           <param><decl><type><name>svn_ra_serf__list_t</name> **</type><name>done_list</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_ra_serf__propfind_context_t</name> *</type><name>new_prop_ctx</name></decl>;</decl_stmt>

  <if>if <condition>(<expr>!*<name>prop_ctx</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_ra_serf__handler_t</name> *</type><name>handler</name></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>cache_props</name> == <name>TRUE</name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>cache_satisfy</name></decl>;</decl_stmt>

          <expr_stmt><expr><name>cache_satisfy</name> = <call><name>check_cache</name><argument_list>(<argument><expr><name>ret_props</name></expr></argument>, <argument><expr><name>sess</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>find_props</name></expr></argument>,
                                      <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <if>if <condition>(<expr><name>cache_satisfy</name></expr>)</condition><then>
            <block>{
              <expr_stmt><expr>*<name>prop_ctx</name> = <name>NULL</name></expr>;</expr_stmt>
              <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
            }</block></then></if>
        }</block></then></if>

      <expr_stmt><expr><name>new_prop_ctx</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>new_prop_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>new_prop_ctx</name>-&gt;<name>pool</name></name> = <call><name>apr_hash_pool_get</name><argument_list>(<argument><expr><name>ret_props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>new_prop_ctx</name>-&gt;<name>path</name></name> = <name>path</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>new_prop_ctx</name>-&gt;<name>cache_props</name></name> = <name>cache_props</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>new_prop_ctx</name>-&gt;<name>find_props</name></name> = <name>find_props</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>new_prop_ctx</name>-&gt;<name>ret_props</name></name> = <name>ret_props</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>new_prop_ctx</name>-&gt;<name>depth</name></name> = <name>depth</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>new_prop_ctx</name>-&gt;<name>done</name></name> = <name>FALSE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>new_prop_ctx</name>-&gt;<name>sess</name></name> = <name>sess</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>new_prop_ctx</name>-&gt;<name>conn</name></name> = <name>conn</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>new_prop_ctx</name>-&gt;<name>rev</name></name> = <name>rev</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>new_prop_ctx</name>-&gt;<name>done_list</name></name> = <name>done_list</name></expr>;</expr_stmt>

      <if>if <condition>(<expr><call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name><name>new_prop_ctx</name>-&gt;<name>label</name></name> = <call><name>apr_ltoa</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else
        <block>{
          <expr_stmt><expr><name><name>new_prop_ctx</name>-&gt;<name>label</name></name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></else></if>

      <expr_stmt><expr><name>handler</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>handler</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>handler</name>-&gt;<name>method</name></name> = "PROPFIND"</expr>;</expr_stmt>
      <expr_stmt><expr><name><name>handler</name>-&gt;<name>delegate</name></name> = <name>setup_propfind</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>handler</name>-&gt;<name>delegate_baton</name></name> = <name>new_prop_ctx</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>handler</name>-&gt;<name>session</name></name> = <name><name>new_prop_ctx</name>-&gt;<name>sess</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>handler</name>-&gt;<name>conn</name></name> = <name><name>new_prop_ctx</name>-&gt;<name>conn</name></name></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>new_prop_ctx</name>-&gt;<name>handler</name></name> = <name>handler</name></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>new_prop_ctx</name>-&gt;<name>parser_ctx</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
                                             <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name><name>new_prop_ctx</name>-&gt;<name>parser_ctx</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr>*<name>prop_ctx</name> = <name>new_prop_ctx</name></expr>;</expr_stmt>
    }</block></then></if>

  <comment type="block">/* create request */</comment>
  <expr_stmt><expr><call><name>svn_ra_serf__request_create</name><argument_list>(<argument><expr><name>(*<name>prop_ctx</name>)-&gt;<name>handler</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_boolean_t</name></type>
<name>svn_ra_serf__propfind_is_done</name><parameter_list>(<param><decl><type><name>svn_ra_serf__propfind_context_t</name> *</type><name>ctx</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name><name>ctx</name>-&gt;<name>done</name></name></expr>;</return>
}</block></function>

<function><type><name>int</name></type>
<name>svn_ra_serf__propfind_status_code</name><parameter_list>(<param><decl><type><name>svn_ra_serf__propfind_context_t</name> *</type><name>ctx</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name><name>ctx</name>-&gt;<name>status_code</name></name></expr>;</return>
}</block></function>

<comment type="block">/*
 * This helper function will block until the PROP_CTX indicates that is done
 * or another error is returned.
 */</comment>
<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__wait_for_props</name><parameter_list>(<param><decl><type><name>svn_ra_serf__propfind_context_t</name> *</type><name>prop_ctx</name></decl></param>,
                            <param><decl><type><name>svn_ra_serf__session_t</name> *</type><name>sess</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>err</name> = <call><name>svn_ra_serf__context_run_wait</name><argument_list>(<argument><expr>&amp;<name><name>prop_ctx</name>-&gt;<name>done</name></name></expr></argument>, <argument><expr><name>sess</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name><name>prop_ctx</name>-&gt;<name>parser_ctx</name>-&gt;<name>error</name></name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><name><name>prop_ctx</name>-&gt;<name>parser_ctx</name>-&gt;<name>error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * This is a blocking version of deliver_props.
 */</comment>
<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__retrieve_props</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>prop_vals</name></decl></param>,
                            <param><decl><type><name>svn_ra_serf__session_t</name> *</type><name>sess</name></decl></param>,
                            <param><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>conn</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
                            <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>depth</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>svn_ra_serf__dav_props_t</name> *</type><name>props</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_ra_serf__propfind_context_t</name> *</type><name>prop_ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_serf__deliver_props</name><argument_list>(<argument><expr>&amp;<name>prop_ctx</name></expr></argument>, <argument><expr><name>prop_vals</name></expr></argument>, <argument><expr><name>sess</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>url</name></expr></argument>,
                                     <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>props</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>prop_ctx</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_serf__wait_for_props</name><argument_list>(<argument><expr><name>prop_ctx</name></expr></argument>, <argument><expr><name>sess</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__search_for_base_props</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>remaining_path</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>missing_path</name></decl></param>,
                                   <param><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name></decl></param>,
                                   <param><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>conn</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
                                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name> <init>= <expr><name>url</name></expr></init>, *<name>present_path</name> <init>= <expr>""</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>vcc_url</name></decl>;</decl_stmt>

  <do>do
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_serf__retrieve_props</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>,
                                          <argument><expr><name>path</name></expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
                                          <argument><expr>"0"</expr></argument>, <argument><expr><name>base_props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>vcc_url</name> =
          <call><name>svn_ra_serf__get_ver_prop</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
                                    <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
                                    <argument><expr>"DAV:"</expr></argument>,
                                    <argument><expr>"version-controlled-configuration"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>vcc_url</name></expr>)</condition><then>
        <break>break;</break></then></if>

      <comment type="block">/* This happens when the file is missing in HEAD. */</comment>

      <comment type="block">/* Okay, strip off. */</comment>
      <expr_stmt><expr><name>present_path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><call><name>svn_path_basename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
                                   <argument><expr><name>present_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>path</name> = <call><name>svn_path_dirname</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
  while <condition>(<expr>!<call><name>svn_path_is_empty</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

  <comment type="block">/* Error out if entire URL was bogus (not a single part of it exists
     in the repository!)  */</comment>
  <if>if <condition>(<expr><call><name>svn_path_is_empty</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_ILLEGAL_URL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr><call><name>_</name><argument_list>(<argument><expr>"No part of path '%s' was found in "
                               "repository HEAD"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <expr_stmt><expr>*<name>missing_path</name> = <name>present_path</name></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>remaining_path</name> = <name>path</name></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name>svn_ra_serf__walk_all_props</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                            <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                            <param><decl><type><name>svn_ra_serf__walker_visitor_t</name></type> <name>walker</name></decl></param>,
                            <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>ns_hi</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>ver_props</name></decl>, *<decl><type ref="prev"/><name>path_props</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>ver_props</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rev</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<name>ver_props</name></expr>)</condition><then>
    <block>{
      <return>return;</return>
    }</block></then></if>

  <expr_stmt><expr><name>path_props</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>ver_props</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<name>path_props</name></expr>)</condition><then>
    <block>{
      <return>return;</return>
    }</block></then></if>

  <for>for (<init><expr><name>ns_hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>path_props</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>ns_hi</name></expr>;</condition>
       <incr><expr><name>ns_hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>ns_hi</name></expr></argument>)</argument_list></call></expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>void</name> *</type><name>ns_val</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>ns_name</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_ssize_t</name></type> <name>ns_len</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>name_hi</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>ns_hi</name></expr></argument>, <argument><expr>&amp;<name>ns_name</name></expr></argument>, <argument><expr>&amp;<name>ns_len</name></expr></argument>, <argument><expr>&amp;<name>ns_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for (<init><expr><name>name_hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>ns_val</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>name_hi</name></expr>;</condition>
           <incr><expr><name>name_hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>name_hi</name></expr></argument>)</argument_list></call></expr></incr>)
        <block>{
          <decl_stmt><decl><type><name>void</name> *</type><name>prop_val</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>prop_name</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>apr_ssize_t</name></type> <name>prop_len</name></decl>;</decl_stmt>

          <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>name_hi</name></expr></argument>, <argument><expr>&amp;<name>prop_name</name></expr></argument>, <argument><expr>&amp;<name>prop_len</name></expr></argument>, <argument><expr>&amp;<name>prop_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <comment type="block">/* use a subpool? */</comment>
          <expr_stmt><expr><call><name>walker</name><argument_list>(<argument><expr><name>baton</name></expr></argument>, <argument><expr><name>ns_name</name></expr></argument>, <argument><expr><name>ns_len</name></expr></argument>, <argument><expr><name>prop_name</name></expr></argument>, <argument><expr><name>prop_len</name></expr></argument>, <argument><expr><name>prop_val</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></for>
}</block></function>

<function><type><name>void</name></type>
<name>svn_ra_serf__walk_all_paths</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl></param>,
                            <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                            <param><decl><type><name>svn_ra_serf__path_rev_walker_t</name></type> <name>walker</name></decl></param>,
                            <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>path_hi</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>ver_props</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>ver_props</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rev</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<name>ver_props</name></expr>)</condition><then>
    <block>{
      <return>return;</return>
    }</block></then></if>

  <for>for (<init><expr><name>path_hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>ver_props</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>path_hi</name></expr>;</condition>
       <incr><expr><name>path_hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>path_hi</name></expr></argument>)</argument_list></call></expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>void</name> *</type><name>path_props</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>path_name</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_ssize_t</name></type> <name>path_len</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>ns_hi</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>path_hi</name></expr></argument>, <argument><expr>&amp;<name>path_name</name></expr></argument>, <argument><expr>&amp;<name>path_len</name></expr></argument>, <argument><expr>&amp;<name>path_props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for (<init><expr><name>ns_hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>path_props</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>ns_hi</name></expr>;</condition>
           <incr><expr><name>ns_hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>ns_hi</name></expr></argument>)</argument_list></call></expr></incr>)
        <block>{
          <decl_stmt><decl><type><name>void</name> *</type><name>ns_val</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>ns_name</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>apr_ssize_t</name></type> <name>ns_len</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>name_hi</name></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>ns_hi</name></expr></argument>, <argument><expr>&amp;<name>ns_name</name></expr></argument>, <argument><expr>&amp;<name>ns_len</name></expr></argument>, <argument><expr>&amp;<name>ns_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <for>for (<init><expr><name>name_hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>ns_val</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>name_hi</name></expr>;</condition>
               <incr><expr><name>name_hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>name_hi</name></expr></argument>)</argument_list></call></expr></incr>)
            <block>{
              <decl_stmt><decl><type><name>void</name> *</type><name>prop_val</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>prop_name</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>apr_ssize_t</name></type> <name>prop_len</name></decl>;</decl_stmt>

              <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>name_hi</name></expr></argument>, <argument><expr>&amp;<name>prop_name</name></expr></argument>, <argument><expr>&amp;<name>prop_len</name></expr></argument>, <argument><expr>&amp;<name>prop_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <comment type="block">/* use a subpool? */</comment>
              <expr_stmt><expr><call><name>walker</name><argument_list>(<argument><expr><name>baton</name></expr></argument>, <argument><expr><name>path_name</name></expr></argument>, <argument><expr><name>path_len</name></expr></argument>, <argument><expr><name>ns_name</name></expr></argument>, <argument><expr><name>ns_len</name></expr></argument>,
                     <argument><expr><name>prop_name</name></expr></argument>, <argument><expr><name>prop_len</name></expr></argument>, <argument><expr><name>prop_val</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></for>
    }</block></for>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>set_bare_props</name><parameter_list>(<param><decl><type><name>svn_ra_serf__prop_set_t</name></type> <name>setprop</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ns</name></decl></param>, <param><decl><type><name>apr_ssize_t</name></type> <name>ns_len</name></decl></param>,
               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>apr_ssize_t</name></type> <name>name_len</name></decl></param>,
               <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>val</name></decl></param>,
               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prop_name</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>SVN_DAV_PROP_NS_CUSTOM</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <expr_stmt><expr><name>prop_name</name> = <name>name</name></expr>;</expr_stmt></then>
  <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>SVN_DAV_PROP_NS_SVN</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <expr_stmt><expr><name>prop_name</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>SVN_PROP_PREFIX</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>SVN_PROP_PREFIX</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <expr_stmt><expr><name>prop_name</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>SVN_PROP_PREFIX</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <expr_stmt><expr><name>prop_name</name> = <name>name</name></expr>;</expr_stmt></then>
  <else>else
    <block>{
      <comment type="block">/* do nothing for now? */</comment>
      <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
    }</block></else></if></else></if></else></if></else></if>

  <return>return <expr><call><name>setprop</name><argument_list>(<argument><expr><name>baton</name></expr></argument>, <argument><expr><name>prop_name</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__set_baton_props</name><parameter_list>(<param><decl><type><name>svn_ra_serf__prop_set_t</name></type> <name>setprop</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ns</name></decl></param>, <param><decl><type><name>apr_ssize_t</name></type> <name>ns_len</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>apr_ssize_t</name></type> <name>name_len</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>val</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prop_name</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>SVN_DAV_PROP_NS_CUSTOM</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <expr_stmt><expr><name>prop_name</name> = <name>name</name></expr>;</expr_stmt></then>
  <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>SVN_DAV_PROP_NS_SVN</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <expr_stmt><expr><name>prop_name</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>SVN_PROP_PREFIX</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>SVN_PROP_PREFIX</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <expr_stmt><expr><name>prop_name</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>SVN_PROP_PREFIX</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <expr_stmt><expr><name>prop_name</name> = <name>name</name></expr>;</expr_stmt></then>
  <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_DAV__VERSION_NAME</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <expr_stmt><expr><name>prop_name</name> = <name>SVN_PROP_ENTRY_COMMITTED_REV</name></expr>;</expr_stmt></then>
  <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_DAV__CREATIONDATE</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <expr_stmt><expr><name>prop_name</name> = <name>SVN_PROP_ENTRY_COMMITTED_DATE</name></expr>;</expr_stmt></then>
  <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"creator-displayname"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <expr_stmt><expr><name>prop_name</name> = <name>SVN_PROP_ENTRY_LAST_AUTHOR</name></expr>;</expr_stmt></then>
  <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"repository-uuid"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <expr_stmt><expr><name>prop_name</name> = <name>SVN_PROP_ENTRY_UUID</name></expr>;</expr_stmt></then>
  <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"lock-token"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <expr_stmt><expr><name>prop_name</name> = <name>SVN_PROP_ENTRY_LOCK_TOKEN</name></expr>;</expr_stmt></then>
  <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"checked-in"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <expr_stmt><expr><name>prop_name</name> = <name>SVN_RA_SERF__WC_CHECKED_IN_URL</name></expr>;</expr_stmt></then>
  <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr>"DAV:"</expr></argument>)</argument_list></call> == 0 ||
           <call><name>strcmp</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>SVN_DAV_PROP_NS_DAV</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <block>{
      <comment type="block">/* Here DAV: properties not yet converted to svn: properties should be 
         ignored. */</comment>
      <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
    }</block></then>
  <else>else
    <block>{
      <comment type="block">/* An unknown namespace, must be a custom property. */</comment>
      <expr_stmt><expr><name>prop_name</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>

  <return>return <expr><call><name>setprop</name><argument_list>(<argument><expr><name>baton</name></expr></argument>, <argument><expr><name>prop_name</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>set_hash_props</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
               <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>props</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__set_flat_props</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ns</name></decl></param>, <param><decl><type><name>apr_ssize_t</name></type> <name>ns_len</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>apr_ssize_t</name></type> <name>name_len</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>val</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_ra_serf__set_baton_props</name><argument_list>(<argument><expr><name>set_hash_props</name></expr></argument>, <argument><expr><name>baton</name></expr></argument>,
                                      <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>ns_len</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__set_bare_props</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ns</name></decl></param>, <param><decl><type><name>apr_ssize_t</name></type> <name>ns_len</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>apr_ssize_t</name></type> <name>name_len</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>val</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>set_bare_props</name><argument_list>(<argument><expr><name>set_hash_props</name></expr></argument>, <argument><expr><name>baton</name></expr></argument>,
                        <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>ns_len</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__get_baseline_info</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>bc_url</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>bc_relative</name></decl></param>,
                               <param><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
                               <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>vcc_url</name></decl>, *<decl><type ref="prev"/><name>relative_url</name></decl>, *<decl><type ref="prev"/><name>basecoll_url</name></decl>, *<decl><type ref="prev"/><name>baseline_url</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>props</name> <init>= <expr><call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* No URL?  No sweat.  We'll use the session URL. */</comment>
  <if>if <condition>(<expr>! <name>url</name></expr>)</condition><then>
    <expr_stmt><expr><name>url</name> = <name><name>session</name>-&gt;<name>repos_url</name>.<name>path</name></name></expr>;</expr_stmt></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_serf__discover_root</name><argument_list>(<argument><expr>&amp;<name>vcc_url</name></expr></argument>, <argument><expr>&amp;<name>relative_url</name></expr></argument>,
                                     <argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>revision</name> != <name>SVN_INVALID_REVNUM</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_serf__retrieve_props</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name></expr></argument>,
                                          <argument><expr><name>vcc_url</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr>"0"</expr></argument>,
                                          <argument><expr><name>baseline_props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>basecoll_url</name> = <call><name>svn_ra_serf__get_ver_prop</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>vcc_url</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>,
                                               <argument><expr>"DAV:"</expr></argument>, <argument><expr>"baseline-collection"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_serf__retrieve_props</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name></expr></argument>,
                                          <argument><expr><name>vcc_url</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr>"0"</expr></argument>,
                                          <argument><expr><name>checked_in_props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>baseline_url</name> = <call><name>svn_ra_serf__get_ver_prop</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>vcc_url</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>,
                                               <argument><expr>"DAV:"</expr></argument>, <argument><expr>"checked-in"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr>!<name>baseline_url</name></expr>)</condition><then>
        <block>{
          <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_OPTIONS_REQ_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                  <argument><expr><call><name>_</name><argument_list>(<argument><expr>"The OPTIONS response did not include the "
                                    "requested checked-in value"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_serf__retrieve_props</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name></expr></argument>,
                                          <argument><expr><name>baseline_url</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr>"0"</expr></argument>,
                                          <argument><expr><name>baseline_props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>basecoll_url</name> = <call><name>svn_ra_serf__get_ver_prop</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>baseline_url</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>,
                                               <argument><expr>"DAV:"</expr></argument>, <argument><expr>"baseline-collection"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <if>if <condition>(<expr>!<name>basecoll_url</name></expr>)</condition><then>
    <block>{
      <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_OPTIONS_REQ_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                              <argument><expr><call><name>_</name><argument_list>(<argument><expr>"The OPTIONS response did not include the "
                                "requested baseline-collection value"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>
  <expr_stmt><expr>*<name>bc_url</name> = <name>basecoll_url</name></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>bc_relative</name> = <name>relative_url</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

</unit>
