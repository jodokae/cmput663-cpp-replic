<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_ra_serf/win32_auth_sspi.h"><comment type="block">/*
 * win32_auth_sspi.h : Private declarations for Windows SSPI authentication.
 *
 * ====================================================================
 * Copyright (c) 2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVN_LIBSVN_RA_SERF_WIN32_AUTH_SSPI_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_LIBSVN_RA_SERF_WIN32_AUTH_SSPI_H</name></cpp:macro></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SVN_RA_SERF_SSPI_ENABLED</name></cpp:ifdef>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__SSPI_H__</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECURITY_WIN32</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sspi.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ra_serf.h"</cpp:file></cpp:include>

<typedef>typedef <type><enum>enum
<block>{
  <decl><name>sspi_auth_not_started</name></decl>,
  <decl><name>sspi_auth_in_progress</name></decl>,
  <decl><name>sspi_auth_completed</name></decl>,
}</block></enum></type> <name>sspi_auth_state</name>;</typedef>

<comment type="block">/* Stores the context information related to SSPI. The context is per
   connection, it enables SSPI to go through the challenge/response cycle
   of the authentication protocols. */</comment>
<struct>struct <name>serf_sspi_context_t</name>
<block>{
  <decl_stmt><decl><type><name>CtxtHandle</name></type> <name>ctx</name></decl>;</decl_stmt>

  <comment type="block">/* Current state of the authentication cycle. */</comment>
  <decl_stmt><decl><type><name>sspi_auth_state</name></type> <name>state</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/* SSPI implementation of an ra_serf authentication protocol providor. 
   handle_sspi_auth prepares the authentication headers for a new request 
   based on the response of the server. */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>handle_sspi_auth</name><parameter_list>(<param><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name></decl></param>,
                 <param><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>conn</name></decl></param>,
                 <param><decl><type><name>serf_request_t</name> *</type><name>request</name></decl></param>,
                 <param><decl><type><name>serf_bucket_t</name> *</type><name>response</name></decl></param>,
                 <param><decl><type><name>char</name> *</type><name>auth_hdr</name></decl></param>,
                 <param><decl><type><name>char</name> *</type><name>auth_attr</name></decl></param>,
                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Initializes a new connection based on the info stored in the session 
   object. For SSPI we will not reuse any of the authentication related data
   in the session, as SSPI provides per connection authentication protocols. 
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>init_sspi_connection</name><parameter_list>(<param><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name></decl></param>,
                     <param><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>conn</name></decl></param>,
                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>svn_error_t</name> *</type>
<name>setup_request_sspi_auth</name><parameter_list>(<param><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>conn</name></decl></param>,
                        <param><decl><type><name>serf_bucket_t</name> *</type><name>hdrs_bkt</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Provides the necessary information for the http authentication headers 
   for both the initial request to open an authentication connection, as 
   the response to the server's authentication challenge. 
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>sspi_get_credentials</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>token</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>token_len</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>buf</name></decl></param>, 
                     <param><decl><type><name>apr_size_t</name> *</type><name>buf_len</name></decl></param>, <param><decl><type><name>serf_sspi_context_t</name> *</type><name>sspi_ctx</name></decl></param>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SVN_RA_SERF_SSPI_ENABLED */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SVN_LIBSVN_RA_SERF_WIN32_AUTH_SSPI_H */</comment>
</unit>
