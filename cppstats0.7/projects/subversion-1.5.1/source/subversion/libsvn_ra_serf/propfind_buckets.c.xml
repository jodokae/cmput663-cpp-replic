<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_ra_serf/propfind_buckets.c"><comment type="block">/*
 * propfind_buckets.c :  serf bucket for a PROPFIND request
 *
 * ====================================================================
 * Copyright (c) 2006-2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>


<escape char="0xc"/>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_uri.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;serf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;serf_bucket_util.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_dep_compat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ra_serf.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>conn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>label</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>depth</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>svn_ra_serf__dav_props_t</name> *</type><name>find_props</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>serf_bucket_t</name> *</type><name>request</name></decl>;</decl_stmt>
}</block></struct></type> <name>prop_context_t</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>serf_bucket_type_t</name></type> <name>serf_bucket_type_propfind</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROPFIND_HEADER</name></cpp:macro> <cpp:value>"&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;propfind xmlns=\"DAV:\"&gt;"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROPFIND_TRAILER</name></cpp:macro> <cpp:value>"&lt;/propfind&gt;"</cpp:value></cpp:define>

<function><type><name>serf_bucket_t</name> *</type> <name>svn_ra_serf__bucket_propfind_create</name><parameter_list>(
    <param><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>conn</name></decl></param>,
    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>label</name></decl></param>,
    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>depth</name></decl></param>,
    <param><decl><type><specifier>const</specifier> <name>svn_ra_serf__dav_props_t</name> *</type><name>find_props</name></decl></param>,
    <param><decl><type><name>serf_bucket_alloc_t</name> *</type><name>allocator</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>prop_context_t</name> *</type><name>ctx</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>ctx</name> = <call><name>serf_bucket_mem_alloc</name><argument_list>(<argument><expr><name>allocator</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name>-&gt;<name>conn</name></name> = <name>conn</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name>-&gt;<name>path</name></name> = <name>path</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name>-&gt;<name>label</name></name> = <name>label</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name>-&gt;<name>depth</name></name> = <name>depth</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name>-&gt;<name>find_props</name></name> = <name>find_props</name></expr>;</expr_stmt>

    <return>return <expr><call><name>serf_bucket_create</name><argument_list>(<argument><expr>&amp;<name>serf_bucket_type_propfind</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>serf_bucket_t</name> *</type><name>create_propfind_body</name><parameter_list>(<param><decl><type><name>serf_bucket_t</name> *</type><name>bucket</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>prop_context_t</name> *</type><name>ctx</name> <init>= <expr><name><name>bucket</name>-&gt;<name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>serf_bucket_alloc_t</name> *</type><name>alloc</name> <init>= <expr><name><name>bucket</name>-&gt;<name>allocator</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>serf_bucket_t</name> *</type><name>body_bkt</name></decl>, *<decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_ra_serf__dav_props_t</name> *</type><name>prop</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>requested_allprop</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>body_bkt</name> = <call><name>serf_bucket_aggregate_create</name><argument_list>(<argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>prop</name> = <name><name>ctx</name>-&gt;<name>find_props</name></name></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>prop</name> &amp;&amp; <name><name>prop</name>-&gt;<name>namespace</name></name></expr>)</condition>
    <block>{
      <comment type="block">/* special case the allprop case. */</comment>
      <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>prop</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"allprop"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>requested_allprop</name> = <name>TRUE</name></expr>;</expr_stmt>
        }</block></then></if>

      <comment type="block">/* &lt;*propname* xmlns="*propns*" /&gt; */</comment>
      <expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr>"&lt;"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name>body_bkt</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING</name><argument_list>(<argument><expr><name><name>prop</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name>body_bkt</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr>" xmlns=\""</expr></argument>,
                                          <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>" xmlns=\""</expr></argument>)</argument_list></sizeof>-1</expr></argument>,
                                          <argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name>body_bkt</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING</name><argument_list>(<argument><expr><name><name>prop</name>-&gt;<name>namespace</name></name></expr></argument>, <argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name>body_bkt</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr>"\"/&gt;"</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>"\"/&gt;"</expr></argument>)</argument_list></sizeof>-1</expr></argument>,
                                          <argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name>body_bkt</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>prop</name>++</expr>;</expr_stmt>
    }</block></while>

  <comment type="block">/* If we're not doing an allprop, add &lt;prop&gt; tags. */</comment>
  <if>if <condition>(<expr><name>requested_allprop</name> == <name>FALSE</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr>"&lt;prop&gt;"</expr></argument>,
                                          <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>"&lt;prop&gt;"</expr></argument>)</argument_list></sizeof>-1</expr></argument>,
                                          <argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>serf_bucket_aggregate_prepend</name><argument_list>(<argument><expr><name>body_bkt</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr><name>PROPFIND_HEADER</name></expr></argument>,
                                      <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PROPFIND_HEADER</name></expr></argument>)</argument_list></sizeof>-1</expr></argument>,
                                      <argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>serf_bucket_aggregate_prepend</name><argument_list>(<argument><expr><name>body_bkt</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>requested_allprop</name> == <name>FALSE</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr>"&lt;/prop&gt;"</expr></argument>,
                                          <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>"&lt;/prop&gt;"</expr></argument>)</argument_list></sizeof>-1</expr></argument>,
                                          <argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name>body_bkt</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr><name>PROPFIND_TRAILER</name></expr></argument>,
                                      <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PROPFIND_TRAILER</name></expr></argument>)</argument_list></sizeof>-1</expr></argument>,
                                      <argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name>body_bkt</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>body_bkt</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>become_request</name><parameter_list>(<param><decl><type><name>serf_bucket_t</name> *</type><name>bucket</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>prop_context_t</name> *</type><name>ctx</name> <init>= <expr><name><name>bucket</name>-&gt;<name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>serf_bucket_t</name> *</type><name>hdrs_bkt</name></decl>, *<decl><type ref="prev"/><name>body_bkt</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>body_bkt</name> = <call><name>create_propfind_body</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>serf_bucket_request_become</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>, <argument><expr>"PROPFIND"</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>body_bkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>SERF_VERSION_AT_LEAST</name><argument_list>(<argument><expr>0,1,3</expr></argument>)</argument_list></call></expr></cpp:if>
  <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>conn</name>-&gt;<name>session</name>-&gt;<name>using_proxy</name></name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>char</name> *</type><name>url</name> <init>= <expr><call><name>apr_uri_unparse</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>conn</name>-&gt;<name>session</name>-&gt;<name>pool</name></name></expr></argument>,
                                  <argument><expr>&amp;<name><name>ctx</name>-&gt;<name>conn</name>-&gt;<name>session</name>-&gt;<name>repos_url</name></name></expr></argument>, 
                                  <argument><expr><name>APR_URI_UNP_OMITPATHINFO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>serf_bucket_request_set_root</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><name>hdrs_bkt</name> = <call><name>serf_bucket_request_get_headers</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>serf_bucket_headers_setn</name><argument_list>(<argument><expr><name>hdrs_bkt</name></expr></argument>, <argument><expr>"Host"</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>conn</name>-&gt;<name>hostinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>serf_bucket_headers_setn</name><argument_list>(<argument><expr><name>hdrs_bkt</name></expr></argument>, <argument><expr>"User-Agent"</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>conn</name>-&gt;<name>useragent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>conn</name>-&gt;<name>using_compression</name></name> == <name>TRUE</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>serf_bucket_headers_setn</name><argument_list>(<argument><expr><name>hdrs_bkt</name></expr></argument>, <argument><expr>"Accept-Encoding"</expr></argument>, <argument><expr>"gzip"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  <expr_stmt><expr><call><name>serf_bucket_headers_setn</name><argument_list>(<argument><expr><name>hdrs_bkt</name></expr></argument>, <argument><expr>"Content-Type"</expr></argument>, <argument><expr>"text/xml"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>serf_bucket_headers_setn</name><argument_list>(<argument><expr><name>hdrs_bkt</name></expr></argument>, <argument><expr>"Depth"</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>label</name></name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>serf_bucket_headers_setn</name><argument_list>(<argument><expr><name>hdrs_bkt</name></expr></argument>, <argument><expr>"Label"</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>label</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <comment type="block">/* Setup server authorization headers */</comment>
  <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>conn</name>-&gt;<name>session</name>-&gt;<name>auth_protocol</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name><name>ctx</name>-&gt;<name>conn</name>-&gt;<name>session</name>-&gt;<name>auth_protocol</name>-&gt;<name>setup_request_func</name></name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>conn</name></name></expr></argument>, <argument><expr><name>hdrs_bkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <comment type="block">/* Setup proxy authorization headers */</comment>
  <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>conn</name>-&gt;<name>session</name>-&gt;<name>proxy_auth_protocol</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name><name>ctx</name>-&gt;<name>conn</name>-&gt;<name>session</name>-&gt;<name>proxy_auth_protocol</name>-&gt;<name>setup_request_func</name></name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>conn</name></name></expr></argument>, 
                                                                <argument><expr><name>hdrs_bkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <expr_stmt><expr><call><name>serf_bucket_mem_free</name><argument_list>(<argument><expr><name><name>bucket</name>-&gt;<name>allocator</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>serf_propfind_read</name><parameter_list>(<param><decl><type><name>serf_bucket_t</name> *</type><name>bucket</name></decl></param>,
                                       <param><decl><type><name>apr_size_t</name></type> <name>requested</name></decl></param>,
                                       <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>data</name></decl></param>, <param><decl><type><name>apr_size_t</name> *</type><name>len</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>become_request</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Delegate to the "new" request bucket to do the readline. */</comment>
  <return>return <expr><call><name>serf_bucket_read</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>, <argument><expr><name>requested</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>serf_propfind_readline</name><parameter_list>(<param><decl><type><name>serf_bucket_t</name> *</type><name>bucket</name></decl></param>,
                                           <param><decl><type><name>int</name></type> <name>acceptable</name></decl></param>, <param><decl><type><name>int</name> *</type><name>found</name></decl></param>,
                                           <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>data</name></decl></param>, <param><decl><type><name>apr_size_t</name> *</type><name>len</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>become_request</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Delegate to the "new" request bucket to do the readline. */</comment>
  <return>return <expr><call><name>serf_bucket_readline</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>, <argument><expr><name>acceptable</name></expr></argument>, <argument><expr><name>found</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>serf_propfind_read_iovec</name><parameter_list>(<param><decl><type><name>serf_bucket_t</name> *</type><name>bucket</name></decl></param>,
                                             <param><decl><type><name>apr_size_t</name></type> <name>requested</name></decl></param>,
                                             <param><decl><type><name>int</name></type> <name>vecs_size</name></decl></param>,
                                             <param><decl><type>struct <name>iovec</name> *</type><name>vecs</name></decl></param>,
                                             <param><decl><type><name>int</name> *</type><name>vecs_used</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>become_request</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Delegate to the "new" request bucket to do the peek. */</comment>
  <return>return <expr><call><name>serf_bucket_read_iovec</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>, <argument><expr><name>requested</name></expr></argument>, <argument><expr><name>vecs_size</name></expr></argument>, <argument><expr><name>vecs</name></expr></argument>, <argument><expr><name>vecs_used</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>serf_propfind_peek</name><parameter_list>(<param><decl><type><name>serf_bucket_t</name> *</type><name>bucket</name></decl></param>,
                                      <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>data</name></decl></param>,
                                      <param><decl><type><name>apr_size_t</name> *</type><name>len</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>become_request</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Delegate to the "new" request bucket to do the peek. */</comment>
  <return>return <expr><call><name>serf_bucket_peek</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>SERF_DECLARE_DATA</name> <specifier>const</specifier> <name>serf_bucket_type_t</name></type> <name>serf_bucket_type_propfind</name> <init>= <expr><block>{
  <expr>"PROPFIND"</expr>,
  <expr><name>serf_propfind_read</name></expr>,
  <expr><name>serf_propfind_readline</name></expr>,
  <expr><name>serf_propfind_read_iovec</name></expr>,
  <expr><name>serf_default_read_for_sendfile</name></expr>,
  <expr><name>serf_default_read_bucket</name></expr>,
  <expr><name>serf_propfind_peek</name></expr>,
  <expr><name>serf_default_destroy_and_data</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

</unit>
