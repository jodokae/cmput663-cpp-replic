<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_diff/diff3.c"><comment type="block">/*
 * diff3.c :  routines for doing diffs
 *
 * ====================================================================
 * Copyright (c) 2000-2004 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_general.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_diff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"diff.h"</cpp:file></cpp:include>


<function><type><name>void</name></type>
<name>svn_diff__resolve_conflict</name><parameter_list>(<param><decl><type><name>svn_diff_t</name> *</type><name>hunk</name></decl></param>,
                           <param><decl><type><name>svn_diff__position_t</name> **</type><name>position_list1</name></decl></param>,
                           <param><decl><type><name>svn_diff__position_t</name> **</type><name>position_list2</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_off_t</name></type> <name>modified_start</name> <init>= <expr><name><name>hunk</name>-&gt;<name>modified_start</name></name> + 1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_off_t</name></type> <name>latest_start</name> <init>= <expr><name><name>hunk</name>-&gt;<name>latest_start</name></name> + 1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_off_t</name></type> <name>common_length</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_off_t</name></type> <name>modified_length</name> <init>= <expr><name><name>hunk</name>-&gt;<name>modified_length</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_off_t</name></type> <name>latest_length</name> <init>= <expr><name><name>hunk</name>-&gt;<name>latest_length</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>svn_diff__position_t</name> *</type><name><name>start_position</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>svn_diff__position_t</name> *</type><name><name>position</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>svn_diff__lcs_t</name> *</type><name>lcs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>svn_diff__lcs_t</name> **</type><name>lcs_ref</name> <init>= <expr>&amp;<name>lcs</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>svn_diff_t</name> **</type><name>diff_ref</name> <init>= <expr>&amp;<name><name>hunk</name>-&gt;<name>resolved_diff</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name></decl>;</decl_stmt>

    <comment type="block">/* First find the starting positions for the
     * comparison
     */</comment>

    <expr_stmt><expr><name><name>start_position</name><index>[<expr>0</expr>]</index></name> = *<name>position_list1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>start_position</name><index>[<expr>1</expr>]</index></name> = *<name>position_list2</name></expr>;</expr_stmt>

    <while>while <condition>(<expr><name><name>start_position</name><index>[<expr>0</expr>]</index></name>-&gt;<name>offset</name> &lt; <name>modified_start</name></expr>)</condition>
      <expr_stmt><expr><name><name>start_position</name><index>[<expr>0</expr>]</index></name> = <name><name>start_position</name><index>[<expr>0</expr>]</index></name>-&gt;<name>next</name></expr>;</expr_stmt></while>

    <while>while <condition>(<expr><name><name>start_position</name><index>[<expr>1</expr>]</index></name>-&gt;<name>offset</name> &lt; <name>latest_start</name></expr>)</condition>
      <expr_stmt><expr><name><name>start_position</name><index>[<expr>1</expr>]</index></name> = <name><name>start_position</name><index>[<expr>1</expr>]</index></name>-&gt;<name>next</name></expr>;</expr_stmt></while>

    <expr_stmt><expr><name><name>position</name><index>[<expr>0</expr>]</index></name> = <name><name>start_position</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>position</name><index>[<expr>1</expr>]</index></name> = <name><name>start_position</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>common_length</name> = <name>modified_length</name> &lt; <name>latest_length</name>
                  ? <name>modified_length</name> : <name>latest_length</name></expr>;</expr_stmt>

    <while>while <condition>(<expr><name>common_length</name> &gt; 0
           &amp;&amp; <name><name>position</name><index>[<expr>0</expr>]</index></name>-&gt;<name>node</name> == <name><name>position</name><index>[<expr>1</expr>]</index></name>-&gt;<name>node</name></expr>)</condition>
      <block>{
        <expr_stmt><expr><name><name>position</name><index>[<expr>0</expr>]</index></name> = <name><name>position</name><index>[<expr>0</expr>]</index></name>-&gt;<name>next</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>position</name><index>[<expr>1</expr>]</index></name> = <name><name>position</name><index>[<expr>1</expr>]</index></name>-&gt;<name>next</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>common_length</name>--</expr>;</expr_stmt>
      }</block></while>

    <if>if <condition>(<expr><name>common_length</name> == 0
        &amp;&amp; <name>modified_length</name> == <name>latest_length</name></expr>)</condition><then>
      <block>{
        <expr_stmt><expr><name><name>hunk</name>-&gt;<name>type</name></name> = <name>svn_diff__type_diff_common</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hunk</name>-&gt;<name>resolved_diff</name></name> = <name>NULL</name></expr>;</expr_stmt>

        <expr_stmt><expr>*<name>position_list1</name> = <name><name>position</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr>*<name>position_list2</name> = <name><name>position</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>

        <return>return;</return>
      }</block></then></if>

    <expr_stmt><expr><name><name>hunk</name>-&gt;<name>type</name></name> = <name>svn_diff__type_conflict</name></expr>;</expr_stmt>

    <comment type="block">/* ### If we have a conflict we can try to find the
     * ### common parts in it by getting an lcs between
     * ### modified (start to start + length) and
     * ### latest (start to start + length).
     * ### We use this lcs to create a simple diff.  Only
     * ### where there is a diff between the two, we have
     * ### a conflict.
     * ### This raises a problem; several common diffs and
     * ### conflicts can occur within the same original
     * ### block.  This needs some thought.
     * ###
     * ### NB: We can use the node _pointers_ to identify
     * ###     different tokens
     */</comment>

    <expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Calculate how much of the two sequences was
     * actually the same.
     */</comment>
    <expr_stmt><expr><name>common_length</name> = (<name>modified_length</name> &lt; <name>latest_length</name>
                    ? <name>modified_length</name> : <name>latest_length</name>)
                  - <name>common_length</name></expr>;</expr_stmt>

    <comment type="block">/* If there were matching symbols at the start of
     * both sequences, record that fact.
     */</comment>
    <if>if <condition>(<expr><name>common_length</name> &gt; 0</expr>)</condition><then>
      <block>{
        <expr_stmt><expr><name>lcs</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>lcs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>lcs</name>-&gt;<name>next</name></name> = <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>lcs</name>-&gt;<name>position</name><index>[<expr>0</expr>]</index></name> = <name><name>start_position</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>lcs</name>-&gt;<name>position</name><index>[<expr>1</expr>]</index></name> = <name><name>start_position</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>lcs</name>-&gt;<name>length</name></name> = <name>common_length</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>lcs_ref</name> = &amp;<name><name>lcs</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
      }</block></then></if>

    <expr_stmt><expr><name>modified_length</name> -= <name>common_length</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>latest_length</name> -= <name>common_length</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>modified_start</name> = <name><name>start_position</name><index>[<expr>0</expr>]</index></name>-&gt;<name>offset</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>latest_start</name> = <name><name>start_position</name><index>[<expr>1</expr>]</index></name>-&gt;<name>offset</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>start_position</name><index>[<expr>0</expr>]</index></name> = <name><name>position</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>start_position</name><index>[<expr>1</expr>]</index></name> = <name><name>position</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>

    <comment type="block">/* Create a new ring for svn_diff__lcs to grok.
     * We can safely do this given we don't need the
     * positions we processed anymore.
     */</comment>
    <if>if <condition>(<expr><name>modified_length</name> == 0</expr>)</condition><then>
      <block>{
        <expr_stmt><expr>*<name>position_list1</name> = <name><name>position</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>position</name><index>[<expr>0</expr>]</index></name> = <name>NULL</name></expr>;</expr_stmt>
      }</block></then>
    <else>else
      <block>{
        <while>while <condition>(<expr>--<name>modified_length</name></expr>)</condition>
          <expr_stmt><expr><name><name>position</name><index>[<expr>0</expr>]</index></name> = <name><name>position</name><index>[<expr>0</expr>]</index></name>-&gt;<name>next</name></expr>;</expr_stmt></while>

        <expr_stmt><expr>*<name>position_list1</name> = <name><name>position</name><index>[<expr>0</expr>]</index></name>-&gt;<name>next</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>position</name><index>[<expr>0</expr>]</index></name>-&gt;<name>next</name> = <name><name>start_position</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
      }</block></else></if>

    <if>if <condition>(<expr><name>latest_length</name> == 0</expr>)</condition><then>
      <block>{
        <expr_stmt><expr>*<name>position_list2</name> = <name><name>position</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>position</name><index>[<expr>1</expr>]</index></name> = <name>NULL</name></expr>;</expr_stmt>
      }</block></then>
    <else>else
      <block>{
        <while>while <condition>(<expr>--<name>latest_length</name></expr>)</condition>
          <expr_stmt><expr><name><name>position</name><index>[<expr>1</expr>]</index></name> = <name><name>position</name><index>[<expr>1</expr>]</index></name>-&gt;<name>next</name></expr>;</expr_stmt></while>

        <expr_stmt><expr>*<name>position_list2</name> = <name><name>position</name><index>[<expr>1</expr>]</index></name>-&gt;<name>next</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>position</name><index>[<expr>1</expr>]</index></name>-&gt;<name>next</name> = <name><name>start_position</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
      }</block></else></if>

    <expr_stmt><expr>*<name>lcs_ref</name> = <call><name>svn_diff__lcs</name><argument_list>(<argument><expr><name><name>position</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name><name>position</name><index>[<expr>1</expr>]</index></name></expr></argument>,
                             <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Fix up the EOF lcs element in case one of
     * the two sequences was NULL.
     */</comment>
    <if>if <condition>(<expr><name>(*<name>lcs_ref</name>)-&gt;<name>position</name></name><index>[<expr>0</expr>]</index>-&gt;<name>offset</name> == 1</expr>)</condition><then>
      <expr_stmt><expr><name>(*<name>lcs_ref</name>)-&gt;<name>position</name></name><index>[<expr>0</expr>]</index> = *<name>position_list1</name></expr>;</expr_stmt></then></if>

    <if>if <condition>(<expr><name>(*<name>lcs_ref</name>)-&gt;<name>position</name></name><index>[<expr>1</expr>]</index>-&gt;<name>offset</name> == 1</expr>)</condition><then>
      <expr_stmt><expr><name>(*<name>lcs_ref</name>)-&gt;<name>position</name></name><index>[<expr>1</expr>]</index> = *<name>position_list2</name></expr>;</expr_stmt></then></if>

    <comment type="block">/* Restore modified_length and latest_length */</comment>
    <expr_stmt><expr><name>modified_length</name> = <name><name>hunk</name>-&gt;<name>modified_length</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>latest_length</name> = <name><name>hunk</name>-&gt;<name>latest_length</name></name></expr>;</expr_stmt>

    <comment type="block">/* Produce the resolved diff */</comment>
    <while>while <condition>(<expr>1</expr>)</condition>
      <block>{
        <if>if <condition>(<expr><name>modified_start</name> &lt; <name><name>lcs</name>-&gt;<name>position</name><index>[<expr>0</expr>]</index></name>-&gt;<name>offset</name>
            || <name>latest_start</name> &lt; <name><name>lcs</name>-&gt;<name>position</name><index>[<expr>1</expr>]</index></name>-&gt;<name>offset</name></expr>)</condition><then>
          <block>{
            <expr_stmt><expr>(*<name>diff_ref</name>) = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>**<name>diff_ref</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>(*<name>diff_ref</name>)-&gt;<name>type</name></name> = <name>svn_diff__type_conflict</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>(*<name>diff_ref</name>)-&gt;<name>original_start</name></name> = <name><name>hunk</name>-&gt;<name>original_start</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>(*<name>diff_ref</name>)-&gt;<name>original_length</name></name> = <name><name>hunk</name>-&gt;<name>original_length</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>(*<name>diff_ref</name>)-&gt;<name>modified_start</name></name> = <name>modified_start</name> - 1</expr>;</expr_stmt>
            <expr_stmt><expr><name>(*<name>diff_ref</name>)-&gt;<name>modified_length</name></name> = <name><name>lcs</name>-&gt;<name>position</name><index>[<expr>0</expr>]</index></name>-&gt;<name>offset</name>
                                           - <name>modified_start</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>(*<name>diff_ref</name>)-&gt;<name>latest_start</name></name> = <name>latest_start</name> - 1</expr>;</expr_stmt>
            <expr_stmt><expr><name>(*<name>diff_ref</name>)-&gt;<name>latest_length</name></name> = <name><name>lcs</name>-&gt;<name>position</name><index>[<expr>1</expr>]</index></name>-&gt;<name>offset</name>
                                         - <name>latest_start</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>(*<name>diff_ref</name>)-&gt;<name>resolved_diff</name></name> = <name>NULL</name></expr>;</expr_stmt>

            <expr_stmt><expr><name>diff_ref</name> = &amp;<name>(*<name>diff_ref</name>)-&gt;<name>next</name></name></expr>;</expr_stmt>
          }</block></then></if>

        <comment type="block">/* Detect the EOF */</comment>
        <if>if <condition>(<expr><name><name>lcs</name>-&gt;<name>length</name></name> == 0</expr>)</condition><then>
          <break>break;</break></then></if>

        <expr_stmt><expr><name>modified_start</name> = <name><name>lcs</name>-&gt;<name>position</name><index>[<expr>0</expr>]</index></name>-&gt;<name>offset</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>latest_start</name> = <name><name>lcs</name>-&gt;<name>position</name><index>[<expr>1</expr>]</index></name>-&gt;<name>offset</name></expr>;</expr_stmt>

        <expr_stmt><expr>(*<name>diff_ref</name>) = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>**<name>diff_ref</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>(*<name>diff_ref</name>)-&gt;<name>type</name></name> = <name>svn_diff__type_diff_common</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>(*<name>diff_ref</name>)-&gt;<name>original_start</name></name> = <name><name>hunk</name>-&gt;<name>original_start</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>(*<name>diff_ref</name>)-&gt;<name>original_length</name></name> = <name><name>hunk</name>-&gt;<name>original_length</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>(*<name>diff_ref</name>)-&gt;<name>modified_start</name></name> = <name>modified_start</name> - 1</expr>;</expr_stmt>
        <expr_stmt><expr><name>(*<name>diff_ref</name>)-&gt;<name>modified_length</name></name> = <name><name>lcs</name>-&gt;<name>length</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>(*<name>diff_ref</name>)-&gt;<name>latest_start</name></name> = <name>latest_start</name> - 1</expr>;</expr_stmt>
        <expr_stmt><expr><name>(*<name>diff_ref</name>)-&gt;<name>latest_length</name></name> = <name><name>lcs</name>-&gt;<name>length</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>(*<name>diff_ref</name>)-&gt;<name>resolved_diff</name></name> = <name>NULL</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>diff_ref</name> = &amp;<name>(*<name>diff_ref</name>)-&gt;<name>next</name></name></expr>;</expr_stmt>

        <expr_stmt><expr><name>modified_start</name> += <name><name>lcs</name>-&gt;<name>length</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>latest_start</name> += <name><name>lcs</name>-&gt;<name>length</name></name></expr>;</expr_stmt>

        <expr_stmt><expr><name>lcs</name> = <name><name>lcs</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
      }</block></while>

    <expr_stmt><expr>*<name>diff_ref</name> = <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_diff_diff3</name><parameter_list>(<param><decl><type><name>svn_diff_t</name> **</type><name>diff</name></decl></param>,
               <param><decl><type><name>void</name> *</type><name>diff_baton</name></decl></param>,
               <param><decl><type><specifier>const</specifier> <name>svn_diff_fns_t</name> *</type><name>vtable</name></decl></param>,
               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_diff__tree_t</name> *</type><name>tree</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_diff__position_t</name> *</type><name><name>position_list</name><index>[<expr>3</expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_diff__lcs_t</name> *</type><name>lcs_om</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_diff__lcs_t</name> *</type><name>lcs_ol</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>treepool</name></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>diff</name> = <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>treepool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>svn_diff__tree_create</name><argument_list>(<argument><expr>&amp;<name>tree</name></expr></argument>, <argument><expr><name>treepool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_diff__get_tokens</name><argument_list>(<argument><expr>&amp;<name><name>position_list</name><index>[<expr>0</expr>]</index></name></expr></argument>,
                               <argument><expr><name>tree</name></expr></argument>,
                               <argument><expr><name>diff_baton</name></expr></argument>, <argument><expr><name>vtable</name></expr></argument>,
                               <argument><expr><name>svn_diff_datasource_original</name></expr></argument>,
                               <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_diff__get_tokens</name><argument_list>(<argument><expr>&amp;<name><name>position_list</name><index>[<expr>1</expr>]</index></name></expr></argument>,
                               <argument><expr><name>tree</name></expr></argument>,
                               <argument><expr><name>diff_baton</name></expr></argument>, <argument><expr><name>vtable</name></expr></argument>,
                               <argument><expr><name>svn_diff_datasource_modified</name></expr></argument>,
                               <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_diff__get_tokens</name><argument_list>(<argument><expr>&amp;<name><name>position_list</name><index>[<expr>2</expr>]</index></name></expr></argument>,
                               <argument><expr><name>tree</name></expr></argument>,
                               <argument><expr><name>diff_baton</name></expr></argument>, <argument><expr><name>vtable</name></expr></argument>,
                               <argument><expr><name>svn_diff_datasource_latest</name></expr></argument>,
                               <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get rid of the tokens, we don't need them to calc the diff */</comment>
  <if>if <condition>(<expr><name><name>vtable</name>-&gt;<name>token_discard_all</name></name> != <name>NULL</name></expr>)</condition><then>
    <expr_stmt><expr><call><name><name>vtable</name>-&gt;<name>token_discard_all</name></name><argument_list>(<argument><expr><name>diff_baton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <comment type="block">/* We don't need the nodes in the tree either anymore, nor the tree itself */</comment>
  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>treepool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get the lcs for original-modified and original-latest */</comment>
  <expr_stmt><expr><name>lcs_om</name> = <call><name>svn_diff__lcs</name><argument_list>(<argument><expr><name><name>position_list</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name><name>position_list</name><index>[<expr>1</expr>]</index></name></expr></argument>,
                         <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>lcs_ol</name> = <call><name>svn_diff__lcs</name><argument_list>(<argument><expr><name><name>position_list</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name><name>position_list</name><index>[<expr>2</expr>]</index></name></expr></argument>,
                         <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Produce a merged diff */</comment>
  <block>{
    <decl_stmt><decl><type><name>svn_diff_t</name> **</type><name>diff_ref</name> <init>= <expr><name>diff</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>apr_off_t</name></type> <name>original_start</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_off_t</name></type> <name>modified_start</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_off_t</name></type> <name>latest_start</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_off_t</name></type> <name>original_sync</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_off_t</name></type> <name>modified_sync</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_off_t</name></type> <name>latest_sync</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_off_t</name></type> <name>common_length</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_off_t</name></type> <name>original_length</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_off_t</name></type> <name>modified_length</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_off_t</name></type> <name>latest_length</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>is_modified</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>is_latest</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>svn_diff__position_t</name></type> <name><name>sentinel_position</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>

    <comment type="block">/* Point the position lists to the start of the list
     * so that common_diff/conflict detection actually is
     * able to work.
     */</comment>
    <if>if <condition>(<expr><name><name>position_list</name><index>[<expr>1</expr>]</index></name></expr>)</condition><then>
      <block>{
        <expr_stmt><expr><name><name>sentinel_position</name><index>[<expr>0</expr>]</index></name>.<name>next</name> = <name><name>position_list</name><index>[<expr>1</expr>]</index></name>-&gt;<name>next</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sentinel_position</name><index>[<expr>0</expr>]</index></name>.<name>offset</name> = <name><name>position_list</name><index>[<expr>1</expr>]</index></name>-&gt;<name>offset</name> + 1</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>position_list</name><index>[<expr>1</expr>]</index></name>-&gt;<name>next</name> = &amp;<name><name>sentinel_position</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>position_list</name><index>[<expr>1</expr>]</index></name> = <name><name>sentinel_position</name><index>[<expr>0</expr>]</index></name>.<name>next</name></expr>;</expr_stmt>
      }</block></then>
    <else>else
      <block>{
        <expr_stmt><expr><name><name>sentinel_position</name><index>[<expr>0</expr>]</index></name>.<name>offset</name> = 1</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sentinel_position</name><index>[<expr>0</expr>]</index></name>.<name>next</name> = <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>position_list</name><index>[<expr>1</expr>]</index></name> = &amp;<name><name>sentinel_position</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
      }</block></else></if>

    <if>if <condition>(<expr><name><name>position_list</name><index>[<expr>2</expr>]</index></name></expr>)</condition><then>
      <block>{
        <expr_stmt><expr><name><name>sentinel_position</name><index>[<expr>1</expr>]</index></name>.<name>next</name> = <name><name>position_list</name><index>[<expr>2</expr>]</index></name>-&gt;<name>next</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sentinel_position</name><index>[<expr>1</expr>]</index></name>.<name>offset</name> = <name><name>position_list</name><index>[<expr>2</expr>]</index></name>-&gt;<name>offset</name> + 1</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>position_list</name><index>[<expr>2</expr>]</index></name>-&gt;<name>next</name> = &amp;<name><name>sentinel_position</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>position_list</name><index>[<expr>2</expr>]</index></name> = <name><name>sentinel_position</name><index>[<expr>1</expr>]</index></name>.<name>next</name></expr>;</expr_stmt>
      }</block></then>
    <else>else
      <block>{
        <expr_stmt><expr><name><name>sentinel_position</name><index>[<expr>1</expr>]</index></name>.<name>offset</name> = 1</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sentinel_position</name><index>[<expr>1</expr>]</index></name>.<name>next</name> = <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>position_list</name><index>[<expr>2</expr>]</index></name> = &amp;<name><name>sentinel_position</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
      }</block></else></if>

    <while>while <condition>(<expr>1</expr>)</condition>
      <block>{
        <comment type="block">/* Find the sync points */</comment>
        <while>while <condition>(<expr>1</expr>)</condition>
          <block>{
            <if>if <condition>(<expr><name><name>lcs_om</name>-&gt;<name>position</name><index>[<expr>0</expr>]</index></name>-&gt;<name>offset</name> &gt; <name><name>lcs_ol</name>-&gt;<name>position</name><index>[<expr>0</expr>]</index></name>-&gt;<name>offset</name></expr>)</condition><then>
              <block>{
                <expr_stmt><expr><name>original_sync</name> = <name><name>lcs_om</name>-&gt;<name>position</name><index>[<expr>0</expr>]</index></name>-&gt;<name>offset</name></expr>;</expr_stmt>

                <while>while <condition>(<expr><name><name>lcs_ol</name>-&gt;<name>position</name><index>[<expr>0</expr>]</index></name>-&gt;<name>offset</name> + <name><name>lcs_ol</name>-&gt;<name>length</name></name>
                       &lt; <name>original_sync</name></expr>)</condition>
                  <expr_stmt><expr><name>lcs_ol</name> = <name><name>lcs_ol</name>-&gt;<name>next</name></name></expr>;</expr_stmt></while>

                <comment type="block">/* If the sync point is the EOF, and our current lcs segment
                 * doesn't reach as far as EOF, we need to skip this segment.
                 */</comment>
                <if>if <condition>(<expr><name><name>lcs_om</name>-&gt;<name>length</name></name> == 0 &amp;&amp; <name><name>lcs_ol</name>-&gt;<name>length</name></name> &gt; 0
                    &amp;&amp; <name><name>lcs_ol</name>-&gt;<name>position</name><index>[<expr>0</expr>]</index></name>-&gt;<name>offset</name> + <name><name>lcs_ol</name>-&gt;<name>length</name></name>
                       == <name>original_sync</name>
                    &amp;&amp; <name><name>lcs_ol</name>-&gt;<name>position</name><index>[<expr>1</expr>]</index></name>-&gt;<name>offset</name> + <name><name>lcs_ol</name>-&gt;<name>length</name></name>
                       != <name><name>lcs_ol</name>-&gt;<name>next</name>-&gt;<name>position</name><index>[<expr>1</expr>]</index></name>-&gt;<name>offset</name></expr>)</condition><then>
                  <expr_stmt><expr><name>lcs_ol</name> = <name><name>lcs_ol</name>-&gt;<name>next</name></name></expr>;</expr_stmt></then></if>

                <if>if <condition>(<expr><name><name>lcs_ol</name>-&gt;<name>position</name><index>[<expr>0</expr>]</index></name>-&gt;<name>offset</name> &lt;= <name>original_sync</name></expr>)</condition><then>
                    <break>break;</break></then></if>
              }</block></then>
            <else>else
              <block>{
                <expr_stmt><expr><name>original_sync</name> = <name><name>lcs_ol</name>-&gt;<name>position</name><index>[<expr>0</expr>]</index></name>-&gt;<name>offset</name></expr>;</expr_stmt>

                <while>while <condition>(<expr><name><name>lcs_om</name>-&gt;<name>position</name><index>[<expr>0</expr>]</index></name>-&gt;<name>offset</name> + <name><name>lcs_om</name>-&gt;<name>length</name></name>
                       &lt; <name>original_sync</name></expr>)</condition>
                  <expr_stmt><expr><name>lcs_om</name> = <name><name>lcs_om</name>-&gt;<name>next</name></name></expr>;</expr_stmt></while>

                <comment type="block">/* If the sync point is the EOF, and our current lcs segment
                 * doesn't reach as far as EOF, we need to skip this segment.
                 */</comment>
                <if>if <condition>(<expr><name><name>lcs_ol</name>-&gt;<name>length</name></name> == 0 &amp;&amp; <name><name>lcs_om</name>-&gt;<name>length</name></name> &gt; 0
                    &amp;&amp; <name><name>lcs_om</name>-&gt;<name>position</name><index>[<expr>0</expr>]</index></name>-&gt;<name>offset</name> + <name><name>lcs_om</name>-&gt;<name>length</name></name>
                       == <name>original_sync</name>
                    &amp;&amp; <name><name>lcs_om</name>-&gt;<name>position</name><index>[<expr>1</expr>]</index></name>-&gt;<name>offset</name> + <name><name>lcs_om</name>-&gt;<name>length</name></name>
                       != <name><name>lcs_om</name>-&gt;<name>next</name>-&gt;<name>position</name><index>[<expr>1</expr>]</index></name>-&gt;<name>offset</name></expr>)</condition><then>
                  <expr_stmt><expr><name>lcs_om</name> = <name><name>lcs_om</name>-&gt;<name>next</name></name></expr>;</expr_stmt></then></if>

                <if>if <condition>(<expr><name><name>lcs_om</name>-&gt;<name>position</name><index>[<expr>0</expr>]</index></name>-&gt;<name>offset</name> &lt;= <name>original_sync</name></expr>)</condition><then>
                    <break>break;</break></then></if>
              }</block></else></if>
          }</block></while>

        <expr_stmt><expr><name>modified_sync</name> = <name><name>lcs_om</name>-&gt;<name>position</name><index>[<expr>1</expr>]</index></name>-&gt;<name>offset</name>
                      + (<name>original_sync</name> - <name><name>lcs_om</name>-&gt;<name>position</name><index>[<expr>0</expr>]</index></name>-&gt;<name>offset</name>)</expr>;</expr_stmt>
        <expr_stmt><expr><name>latest_sync</name> = <name><name>lcs_ol</name>-&gt;<name>position</name><index>[<expr>1</expr>]</index></name>-&gt;<name>offset</name>
                    + (<name>original_sync</name> - <name><name>lcs_ol</name>-&gt;<name>position</name><index>[<expr>0</expr>]</index></name>-&gt;<name>offset</name>)</expr>;</expr_stmt>

        <comment type="block">/* Determine what is modified, if anything */</comment>
        <expr_stmt><expr><name>is_modified</name> = <name><name>lcs_om</name>-&gt;<name>position</name><index>[<expr>0</expr>]</index></name>-&gt;<name>offset</name> - <name>original_start</name> &gt; 0
                      || <name><name>lcs_om</name>-&gt;<name>position</name><index>[<expr>1</expr>]</index></name>-&gt;<name>offset</name> - <name>modified_start</name> &gt; 0</expr>;</expr_stmt>

        <expr_stmt><expr><name>is_latest</name> = <name><name>lcs_ol</name>-&gt;<name>position</name><index>[<expr>0</expr>]</index></name>-&gt;<name>offset</name> - <name>original_start</name> &gt; 0
                    || <name><name>lcs_ol</name>-&gt;<name>position</name><index>[<expr>1</expr>]</index></name>-&gt;<name>offset</name> - <name>latest_start</name> &gt; 0</expr>;</expr_stmt>

        <if>if <condition>(<expr><name>is_modified</name> || <name>is_latest</name></expr>)</condition><then>
          <block>{
            <expr_stmt><expr><name>original_length</name> = <name>original_sync</name> - <name>original_start</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>modified_length</name> = <name>modified_sync</name> - <name>modified_start</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>latest_length</name> = <name>latest_sync</name> - <name>latest_start</name></expr>;</expr_stmt>

            <expr_stmt><expr>(*<name>diff_ref</name>) = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>**<name>diff_ref</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>(*<name>diff_ref</name>)-&gt;<name>original_start</name></name> = <name>original_start</name> - 1</expr>;</expr_stmt>
            <expr_stmt><expr><name>(*<name>diff_ref</name>)-&gt;<name>original_length</name></name> = <name>original_sync</name> - <name>original_start</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>(*<name>diff_ref</name>)-&gt;<name>modified_start</name></name> = <name>modified_start</name> - 1</expr>;</expr_stmt>
            <expr_stmt><expr><name>(*<name>diff_ref</name>)-&gt;<name>modified_length</name></name> = <name>modified_length</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>(*<name>diff_ref</name>)-&gt;<name>latest_start</name></name> = <name>latest_start</name> - 1</expr>;</expr_stmt>
            <expr_stmt><expr><name>(*<name>diff_ref</name>)-&gt;<name>latest_length</name></name> = <name>latest_length</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>(*<name>diff_ref</name>)-&gt;<name>resolved_diff</name></name> = <name>NULL</name></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>is_modified</name> &amp;&amp; <name>is_latest</name></expr>)</condition><then>
              <block>{
                <expr_stmt><expr><call><name>svn_diff__resolve_conflict</name><argument_list>(<argument><expr>*<name>diff_ref</name></expr></argument>,
                                           <argument><expr>&amp;<name><name>position_list</name><index>[<expr>1</expr>]</index></name></expr></argument>,
                                           <argument><expr>&amp;<name><name>position_list</name><index>[<expr>2</expr>]</index></name></expr></argument>,
                                           <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              }</block></then>
            <else>else <if>if <condition>(<expr><name>is_modified</name></expr>)</condition><then>
              <block>{
                <expr_stmt><expr><name>(*<name>diff_ref</name>)-&gt;<name>type</name></name> = <name>svn_diff__type_diff_modified</name></expr>;</expr_stmt>
              }</block></then>
            <else>else
              <block>{
                <expr_stmt><expr><name>(*<name>diff_ref</name>)-&gt;<name>type</name></name> = <name>svn_diff__type_diff_latest</name></expr>;</expr_stmt>
              }</block></else></if></else></if>

            <expr_stmt><expr><name>diff_ref</name> = &amp;<name>(*<name>diff_ref</name>)-&gt;<name>next</name></name></expr>;</expr_stmt>
          }</block></then></if>

        <comment type="block">/* Detect EOF */</comment>
        <if>if <condition>(<expr><name><name>lcs_om</name>-&gt;<name>length</name></name> == 0 || <name><name>lcs_ol</name>-&gt;<name>length</name></name> == 0</expr>)</condition><then>
            <break>break;</break></then></if>

        <expr_stmt><expr><name>modified_length</name> = <name><name>lcs_om</name>-&gt;<name>length</name></name>
                          - (<name>original_sync</name> - <name><name>lcs_om</name>-&gt;<name>position</name><index>[<expr>0</expr>]</index></name>-&gt;<name>offset</name>)</expr>;</expr_stmt>
        <expr_stmt><expr><name>latest_length</name> = <name><name>lcs_ol</name>-&gt;<name>length</name></name>
                        - (<name>original_sync</name> - <name><name>lcs_ol</name>-&gt;<name>position</name><index>[<expr>0</expr>]</index></name>-&gt;<name>offset</name>)</expr>;</expr_stmt>
        <expr_stmt><expr><name>common_length</name> = <name>modified_length</name> &lt; <name>latest_length</name>
                        ? <name>modified_length</name> : <name>latest_length</name></expr>;</expr_stmt>

        <expr_stmt><expr>(*<name>diff_ref</name>) = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>**<name>diff_ref</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>(*<name>diff_ref</name>)-&gt;<name>type</name></name> = <name>svn_diff__type_common</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>(*<name>diff_ref</name>)-&gt;<name>original_start</name></name> = <name>original_sync</name> - 1</expr>;</expr_stmt>
        <expr_stmt><expr><name>(*<name>diff_ref</name>)-&gt;<name>original_length</name></name> = <name>common_length</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>(*<name>diff_ref</name>)-&gt;<name>modified_start</name></name> = <name>modified_sync</name> - 1</expr>;</expr_stmt>
        <expr_stmt><expr><name>(*<name>diff_ref</name>)-&gt;<name>modified_length</name></name> = <name>common_length</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>(*<name>diff_ref</name>)-&gt;<name>latest_start</name></name> = <name>latest_sync</name> - 1</expr>;</expr_stmt>
        <expr_stmt><expr><name>(*<name>diff_ref</name>)-&gt;<name>latest_length</name></name> = <name>common_length</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>(*<name>diff_ref</name>)-&gt;<name>resolved_diff</name></name> = <name>NULL</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>diff_ref</name> = &amp;<name>(*<name>diff_ref</name>)-&gt;<name>next</name></name></expr>;</expr_stmt>

        <comment type="block">/* Set the new offsets */</comment>
        <expr_stmt><expr><name>original_start</name> = <name>original_sync</name> + <name>common_length</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>modified_start</name> = <name>modified_sync</name> + <name>common_length</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>latest_start</name> = <name>latest_sync</name> + <name>common_length</name></expr>;</expr_stmt>

        <comment type="block">/* Make it easier for diff_common/conflict detection
           by recording last lcs start positions
         */</comment>
        <if>if <condition>(<expr><name><name>position_list</name><index>[<expr>1</expr>]</index></name>-&gt;<name>offset</name> &lt; <name><name>lcs_om</name>-&gt;<name>position</name><index>[<expr>1</expr>]</index></name>-&gt;<name>offset</name></expr>)</condition><then>
          <expr_stmt><expr><name><name>position_list</name><index>[<expr>1</expr>]</index></name> = <name><name>lcs_om</name>-&gt;<name>position</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt></then></if>

        <if>if <condition>(<expr><name><name>position_list</name><index>[<expr>2</expr>]</index></name>-&gt;<name>offset</name> &lt; <name><name>lcs_ol</name>-&gt;<name>position</name><index>[<expr>1</expr>]</index></name>-&gt;<name>offset</name></expr>)</condition><then>
          <expr_stmt><expr><name><name>position_list</name><index>[<expr>2</expr>]</index></name> = <name><name>lcs_ol</name>-&gt;<name>position</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt></then></if>

        <comment type="block">/* Make sure we are pointing to lcs entries beyond
         * the range we just processed
         */</comment>
        <while>while <condition>(<expr><name>original_start</name> &gt;= <name><name>lcs_om</name>-&gt;<name>position</name><index>[<expr>0</expr>]</index></name>-&gt;<name>offset</name> + <name><name>lcs_om</name>-&gt;<name>length</name></name>
               &amp;&amp; <name><name>lcs_om</name>-&gt;<name>length</name></name> &gt; 0</expr>)</condition>
          <block>{
            <expr_stmt><expr><name>lcs_om</name> = <name><name>lcs_om</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
          }</block></while>

        <while>while <condition>(<expr><name>original_start</name> &gt;= <name><name>lcs_ol</name>-&gt;<name>position</name><index>[<expr>0</expr>]</index></name>-&gt;<name>offset</name> + <name><name>lcs_ol</name>-&gt;<name>length</name></name>
               &amp;&amp; <name><name>lcs_ol</name>-&gt;<name>length</name></name> &gt; 0</expr>)</condition>
          <block>{
            <expr_stmt><expr><name>lcs_ol</name> = <name><name>lcs_ol</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
          }</block></while>
      }</block></while>

    <expr_stmt><expr>*<name>diff_ref</name> = <name>NULL</name></expr>;</expr_stmt>
  }</block>

  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
