<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_diff/diff.h"><comment type="block">/*
 * diff.h :  private header file
 *
 * ====================================================================
 * Copyright (c) 2000-2004 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DIFF_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIFF_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_general.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_diff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_DIFF__UNIFIED_CONTEXT_SIZE</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<typedef>typedef <type>struct <name>svn_diff__node_t</name></type> <name>svn_diff__node_t</name>;</typedef>
<typedef>typedef <type>struct <name>svn_diff__tree_t</name></type> <name>svn_diff__tree_t</name>;</typedef>
<typedef>typedef <type>struct <name>svn_diff__position_t</name></type> <name>svn_diff__position_t</name>;</typedef>
<typedef>typedef <type>struct <name>svn_diff__lcs_t</name></type> <name>svn_diff__lcs_t</name>;</typedef>

<typedef>typedef <type><enum>enum <name>svn_diff__type_e</name>
<block>{
  <decl><name>svn_diff__type_common</name></decl>,
  <decl><name>svn_diff__type_diff_modified</name></decl>,
  <decl><name>svn_diff__type_diff_latest</name></decl>,
  <decl><name>svn_diff__type_diff_common</name></decl>,
  <decl><name>svn_diff__type_conflict</name></decl>
}</block></enum></type> <name>svn_diff__type_e</name>;</typedef>

<struct>struct <name>svn_diff_t</name> <block>{
  <decl_stmt><decl><type><name>svn_diff_t</name> *</type><name>next</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_diff__type_e</name></type> <name>type</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_off_t</name></type> <name>original_start</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_off_t</name></type> <name>original_length</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_off_t</name></type> <name>modified_start</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_off_t</name></type> <name>modified_length</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_off_t</name></type> <name>latest_start</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_off_t</name></type> <name>latest_length</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_diff_t</name> *</type><name>resolved_diff</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>svn_diff__position_t</name>
<block>{
  <decl_stmt><decl><type><name>svn_diff__position_t</name> *</type><name>next</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_diff__node_t</name>     *</type><name>node</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_off_t</name></type>             <name>offset</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>svn_diff__lcs_t</name>
<block>{
  <decl_stmt><decl><type><name>svn_diff__lcs_t</name>      *</type><name>next</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_diff__position_t</name> *</type><name><name>position</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_off_t</name></type>             <name>length</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>                   <name>refcount</name></decl>;</decl_stmt>
}</block>;</struct>


<comment type="block">/* State used when normalizing whitespace and EOL styles. */</comment>
<typedef>typedef <type><enum>enum <name>svn_diff__normalize_state_t</name>
<block>{
  <comment type="block">/* Initial state; not in a sequence of whitespace. */</comment>
  <decl><name>svn_diff__normalize_state_normal</name></decl>,
  <comment type="block">/* We're in a sequence of whitespace characters.  Only entered if
     we ignore whitespace. */</comment>
  <decl><name>svn_diff__normalize_state_whitespace</name></decl>,
  <comment type="block">/* The previous character was CR. */</comment>
  <decl><name>svn_diff__normalize_state_cr</name></decl>
}</block></enum></type> <name>svn_diff__normalize_state_t</name>;</typedef>


<function_decl><type><name>svn_diff__lcs_t</name> *</type>
<name>svn_diff__lcs</name><parameter_list>(<param><decl><type><name>svn_diff__position_t</name> *</type><name>position_list1</name></decl></param>, <comment type="block">/* pointer to tail (ring) */</comment>
              <param><decl><type><name>svn_diff__position_t</name> *</type><name>position_list2</name></decl></param>, <comment type="block">/* pointer to tail (ring) */</comment>
	      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/*
 * Support functions to build a tree of token positions
 */</comment>
<function_decl><type><name>void</name></type>
<name>svn_diff__tree_create</name><parameter_list>(<param><decl><type><name>svn_diff__tree_t</name> **</type><name>tree</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/*
 * Get all tokens from a datasource.  Return the
 * last item in the (circular) list.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_diff__get_tokens</name><parameter_list>(<param><decl><type><name>svn_diff__position_t</name> **</type><name>position_list</name></decl></param>,
                     <param><decl><type><name>svn_diff__tree_t</name> *</type><name>tree</name></decl></param>,
                     <param><decl><type><name>void</name> *</type><name>diff_baton</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>svn_diff_fns_t</name> *</type><name>vtable</name></decl></param>,
                     <param><decl><type><name>svn_diff_datasource_e</name></type> <name>datasource</name></decl></param>,
                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Morph a svn_lcs_t into a svn_diff_t. */</comment>
<function_decl><type><name>svn_diff_t</name> *</type>
<name>svn_diff__diff</name><parameter_list>(<param><decl><type><name>svn_diff__lcs_t</name> *</type><name>lcs</name></decl></param>,
               <param><decl><type><name>apr_off_t</name></type> <name>original_start</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>modified_start</name></decl></param>,
               <param><decl><type><name>svn_boolean_t</name></type> <name>want_common</name></decl></param>,
               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type>
<name>svn_diff__resolve_conflict</name><parameter_list>(<param><decl><type><name>svn_diff_t</name> *</type><name>hunk</name></decl></param>,
                           <param><decl><type><name>svn_diff__position_t</name> **</type><name>position_list1</name></decl></param>,
                           <param><decl><type><name>svn_diff__position_t</name> **</type><name>position_list2</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/*
 * Return an adler32 checksum based on CHECKSUM, updated with
 * DATA of size LEN.
 */</comment>
<function_decl><type><name>apr_uint32_t</name></type>
<name>svn_diff__adler32</name><parameter_list>(<param><decl><type><name>apr_uint32_t</name></type> <name>checksum</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Normalize the characters pointed to by BUF of length *LENGTHP, starting
 * in state *STATEP according to the OPTIONS.
 * Adjust *LENGTHP and *STATEP to be the length of the normalized buffer and
 * the final state, respectively.
 * Normalized data is written to the memory at *TGT. BUF and TGT may point
 * to the same memory area.  The memory area pointed to by *TGT should be
 * large enough to hold *LENGTHP bytes.
 * When on return *TGT is not equal to the value passed in, it points somewhere
 * into the memory region designated by BUF and *LENGTHP.
 */</comment>
<function_decl><type><name>void</name></type>
<name>svn_diff__normalize_buffer</name><parameter_list>(<param><decl><type><name>char</name> **</type><name>tgt</name></decl></param>,
                           <param><decl><type><name>apr_off_t</name> *</type><name>lengthp</name></decl></param>,
                           <param><decl><type><name>svn_diff__normalize_state_t</name> *</type><name>statep</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>buf</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>svn_diff_file_options_t</name> *</type><name>opts</name></decl></param>)</parameter_list>;</function_decl>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* DIFF_H */</comment>
</unit>
