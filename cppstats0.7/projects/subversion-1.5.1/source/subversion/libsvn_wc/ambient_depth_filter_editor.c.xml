<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_wc/ambient_depth_filter_editor.c"><comment type="block">/*
 * ambient_depth_filter_editor.c -- provide a svn_delta_editor_t which wraps
 *                                  another editor and provides
 *                                  *ambient* depth-based filtering
 *
 * ====================================================================
 * Copyright (c) 2000-2004 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_delta.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_wc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wc.h"</cpp:file></cpp:include>

<comment type="block">/*
     Notes on the general depth-filtering strategy.
     ==============================================

     When a depth-aware (&gt;= 1.5) client pulls an update from a
     non-depth-aware server, the server may send back too much data,
     because it doesn't hear what the client tells it about the
     "requested depth" of the update (the "foo" in "--depth=foo"), nor
     about the "ambient depth" of each working copy directory.

     For example, suppose a 1.5 client does this against a 1.4 server:

       $ svn co --depth=empty -rSOME_OLD_REV http://url/repos/blah/ wc
       $ cd wc
       $ svn up

     In the initial checkout, the requested depth is 'empty', so the
     depth-filtering editor (see libsvn_delta/depth_filter_editor.c)
     that wraps the main update editor transparently filters out all
     the unwanted calls.

     In the 'svn up', the requested depth is unspecified, meaning that
     the ambient depth(s) of the working copy should be preserved.
     Since there's only one directory, and its depth is 'empty',
     clearly we should filter out or render no-ops all editor calls
     after open_root(), except maybe for change_dir_prop() on the
     top-level directory.  (Note that the server will have stuff to
     send down, because we checked out at an old revision in the first
     place, to set up this scenario.)

     The depth-filtering editor won't help us here.  It only filters
     based on the requested depth, it never looks in the working copy
     to get ambient depths.  So the update editor itself will have to
     filter out the unwanted calls -- or better yet, it will have to
     be wrapped in a filtering editor that does the job.

     This is that filtering editor.

     Most of the work is done at the moment of baton construction.
     When a file or dir is opened, we create its baton with the
     appropriate ambient depth, either taking the depth directly from
     the corresponding working copy object (if available), or from its
     parent baton.  In the latter case, we don't just copy the parent
     baton's depth, but rather use it to choose the correct depth for
     this child.  The usual depth demotion rules apply, with the
     additional stipulation that as soon as we find a subtree is not
     present at all, due to being omitted for depth reasons, we set the
     ambiently_excluded flag in its baton, which signals that
     all descendant batons should be ignored.
     (In fact, we may just re-use the parent baton, since none of the
     other fields will be used anyway.)

     See issues #2842 and #2897 for more.
*/</comment>

<escape char="0xc"/>
<comment type="block">/*** Batons, and the Toys That Create Them ***/</comment>

<struct>struct <name>edit_baton</name>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>wrapped_editor</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>wrapped_edit_baton</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>anchor</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>file_baton</name>
<block>{
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>ambiently_excluded</name></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>edit_baton</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>wrapped_baton</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>dir_baton</name>
<block>{
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>ambiently_excluded</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_depth_t</name></type> <name>ambient_depth</name></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>edit_baton</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>wrapped_baton</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>make_dir_baton</name><parameter_list>(<param><decl><type>struct <name>dir_baton</name> **</type><name>d_p</name></decl></param>,
               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
               <param><decl><type>struct <name>edit_baton</name> *</type><name>eb</name></decl></param>,
               <param><decl><type>struct <name>dir_baton</name> *</type><name>pb</name></decl></param>,
               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>d</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>pb</name> &amp;&amp; (! <name>path</name>)</expr>)</condition><then>
    <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr><name>pb</name> &amp;&amp; <name><name>pb</name>-&gt;<name>ambiently_excluded</name></name></expr>)</condition><then>
    <block>{
      <comment type="block">/* Just re-use the parent baton, since the only field that
         matters is ambiently_excluded. */</comment>
      <expr_stmt><expr>*<name>d_p</name> = <name>pb</name></expr>;</expr_stmt>
      <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
    }</block></then></if>

  <comment type="block">/* Okay, no easy out, so allocate and initialize a dir baton. */</comment>
  <expr_stmt><expr><name>d</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>d</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>d</name>-&gt;<name>path</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>anchor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>path</name></expr>)</condition><then>
    <expr_stmt><expr><name><name>d</name>-&gt;<name>path</name></name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>d</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr><name>pb</name>
      &amp;&amp; (<name><name>pb</name>-&gt;<name>ambient_depth</name></name> == <name>svn_depth_empty</name>
          || <name><name>pb</name>-&gt;<name>ambient_depth</name></name> == <name>svn_depth_files</name>)</expr>)</condition><then>
    <block>{
      <comment type="block">/* This is not a depth upgrade, and the parent directory is
         depth==empty or depth==files.  So if the parent doesn't
         already have an entry for the new dir, then the parent
         doesn't want the new dir at all, thus we should initialize
         it with ambiently_excluded=TRUE. */</comment>
      <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name><name>d</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>adm_access</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr>! <name>entry</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name><name>d</name>-&gt;<name>ambiently_excluded</name></name> = <name>TRUE</name></expr>;</expr_stmt>
          <expr_stmt><expr>*<name>d_p</name> = <name>d</name></expr>;</expr_stmt>
          <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
        }</block></then></if>
    }</block></then></if>

  <expr_stmt><expr><name><name>d</name>-&gt;<name>edit_baton</name></name> = <name>eb</name></expr>;</expr_stmt>
  <comment type="block">/* We'll initialize this differently in add_directory and
     open_directory. */</comment>
  <expr_stmt><expr><name><name>d</name>-&gt;<name>ambient_depth</name></name> = <name>svn_depth_unknown</name></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>d_p</name> = <name>d</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>make_file_baton</name><parameter_list>(<param><decl><type>struct <name>file_baton</name> **</type><name>f_p</name></decl></param>,
                <param><decl><type>struct <name>dir_baton</name> *</type><name>pb</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>f</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>f</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr>! <name>path</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr><name><name>pb</name>-&gt;<name>ambiently_excluded</name></name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name><name>f</name>-&gt;<name>ambiently_excluded</name></name> = <name>TRUE</name></expr>;</expr_stmt>
      <expr_stmt><expr>*<name>f_p</name> = <name>f</name></expr>;</expr_stmt>
      <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
    }</block></then></if>

  <if>if <condition>(<expr><name><name>pb</name>-&gt;<name>ambient_depth</name></name> == <name>svn_depth_empty</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* This is not a depth upgrade, and the parent directory is
         depth==empty.  So if the parent doesn't
         already have an entry for the file, then the parent
         doesn't want to hear about the file at all. */</comment>
      <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>,
                           <argument><expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>pb</name>-&gt;<name>edit_baton</name>-&gt;<name>anchor</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
                           <argument><expr><name><name>pb</name>-&gt;<name>edit_baton</name>-&gt;<name>adm_access</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr>! <name>entry</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name><name>f</name>-&gt;<name>ambiently_excluded</name></name> = <name>TRUE</name></expr>;</expr_stmt>
          <expr_stmt><expr>*<name>f_p</name> = <name>f</name></expr>;</expr_stmt>
          <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
        }</block></then></if>
    }</block></then></if>

  <expr_stmt><expr><name><name>f</name>-&gt;<name>edit_baton</name></name> = <name><name>pb</name>-&gt;<name>edit_baton</name></name></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>f_p</name> = <name>f</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<escape char="0xc"/>
<comment type="block">/*** Editor Functions ***/</comment>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>set_target_revision</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
                    <param><decl><type><name>svn_revnum_t</name></type> <name>target_revision</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Nothing depth-y to filter here. */</comment>
 <return>return <expr><call><name><name>eb</name>-&gt;<name>wrapped_editor</name>-&gt;<name>set_target_revision</name></name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>wrapped_edit_baton</name></name></expr></argument>,
                                                <argument><expr><name>target_revision</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>open_root</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
          <param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
          <param><decl><type><name>void</name> **</type><name>root_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>b</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>make_dir_baton</name><argument_list>(<argument><expr>&amp;<name>b</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>eb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>root_baton</name> = <name>b</name></expr>;</expr_stmt>

  <if>if <condition>(<expr><name><name>b</name>-&gt;<name>ambiently_excluded</name></name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <if>if <condition>(<expr>! *<name><name>eb</name>-&gt;<name>target</name></name></expr>)</condition><then>
    <block>{
      <comment type="block">/* For an update with a NULL target, this is equivalent to open_dir(): */</comment>
      <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>

      <comment type="block">/* Read the depth from the entry. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>adm_access</name></name></expr></argument>,
                           <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>entry</name></expr>)</condition><then>
        <expr_stmt><expr><name><name>b</name>-&gt;<name>ambient_depth</name></name> = <name><name>entry</name>-&gt;<name>depth</name></name></expr>;</expr_stmt></then></if>
    }</block></then></if>

  <return>return <expr><call><name><name>eb</name>-&gt;<name>wrapped_editor</name>-&gt;<name>open_root</name></name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>wrapped_edit_baton</name></name></expr></argument>, <argument><expr><name>base_revision</name></expr></argument>,
                                       <argument><expr><name>pool</name></expr></argument>, <argument><expr>&amp;<name><name>b</name>-&gt;<name>wrapped_baton</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>delete_entry</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
             <param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
             <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>pb</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>pb</name>-&gt;<name>ambiently_excluded</name></name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <if>if <condition>(<expr><name><name>pb</name>-&gt;<name>ambient_depth</name></name> &lt; <name>svn_depth_immediates</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* If the entry we want to delete doesn't exist, that's OK.
         It's probably an old server that doesn't understand
         depths. */</comment>
      <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>full_path</name> <init>= <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>anchor</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
                                            <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name>full_path</name></expr></argument>,
                           <argument><expr><name><name>eb</name>-&gt;<name>adm_access</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr>! <name>entry</name></expr>)</condition><then>
        <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
    }</block></then></if>

  <return>return <expr><call><name><name>eb</name>-&gt;<name>wrapped_editor</name>-&gt;<name>delete_entry</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>base_revision</name></expr></argument>,
                                          <argument><expr><name><name>pb</name>-&gt;<name>wrapped_baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>add_directory</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
              <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl></param>,
              <param><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_revision</name></decl></param>,
              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
              <param><decl><type><name>void</name> **</type><name>child_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>pb</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>b</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>make_dir_baton</name><argument_list>(<argument><expr>&amp;<name>b</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>eb</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>child_baton</name> = <name>b</name></expr>;</expr_stmt>

  <if>if <condition>(<expr><name><name>b</name>-&gt;<name>ambiently_excluded</name></name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* It's not excluded, so what should we treat the ambient depth as
     being? */</comment>
  <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>target</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <block>{
      <comment type="block">/* The target of the edit is being added, so make it
         infinity. */</comment>
      <expr_stmt><expr><name><name>b</name>-&gt;<name>ambient_depth</name></name> = <name>svn_depth_infinity</name></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr><name><name>pb</name>-&gt;<name>ambient_depth</name></name> == <name>svn_depth_immediates</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name><name>b</name>-&gt;<name>ambient_depth</name></name> = <name>svn_depth_empty</name></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <comment type="block">/* There may be a requested depth &lt; svn_depth_infinity, but
         that's okay, libsvn_delta/depth_filter_editor.c will filter
         further calls out for us anyway, and the update_editor will
         do the right thing when it creates the directory. */</comment>
      <expr_stmt><expr><name><name>b</name>-&gt;<name>ambient_depth</name></name> = <name>svn_depth_infinity</name></expr>;</expr_stmt>
    }</block></else></if></else></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>eb</name>-&gt;<name>wrapped_editor</name>-&gt;<name>add_directory</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>pb</name>-&gt;<name>wrapped_baton</name></name></expr></argument>,
                                            <argument><expr><name>copyfrom_path</name></expr></argument>,
                                            <argument><expr><name>copyfrom_revision</name></expr></argument>,
                                            <argument><expr><name>pool</name></expr></argument>, <argument><expr>&amp;<name><name>b</name>-&gt;<name>wrapped_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>open_directory</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
               <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
               <param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
               <param><decl><type><name>void</name> **</type><name>child_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>pb</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>b</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>make_dir_baton</name><argument_list>(<argument><expr>&amp;<name>b</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>eb</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>child_baton</name> = <name>b</name></expr>;</expr_stmt>

  <if>if <condition>(<expr><name><name>b</name>-&gt;<name>ambiently_excluded</name></name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>eb</name>-&gt;<name>wrapped_editor</name>-&gt;<name>open_directory</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>pb</name>-&gt;<name>wrapped_baton</name></name></expr></argument>,
                                             <argument><expr><name>base_revision</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>,
                                             <argument><expr>&amp;<name><name>b</name>-&gt;<name>wrapped_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* Note that for the update editor, the open_directory above will
     flush the logs of pb's directory, which might be important for
     this svn_wc_entry call. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>adm_access</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>entry</name></expr>)</condition><then>
    <expr_stmt><expr><name><name>b</name>-&gt;<name>ambient_depth</name></name> = <name><name>entry</name>-&gt;<name>depth</name></name></expr>;</expr_stmt></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>add_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
         <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl></param>,
         <param><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_revision</name></decl></param>,
         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
         <param><decl><type><name>void</name> **</type><name>child_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>pb</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>b</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>make_file_baton</name><argument_list>(<argument><expr>&amp;<name>b</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>child_baton</name> = <name>b</name></expr>;</expr_stmt>

  <if>if <condition>(<expr><name><name>b</name>-&gt;<name>ambiently_excluded</name></name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>eb</name>-&gt;<name>wrapped_editor</name>-&gt;<name>add_file</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>pb</name>-&gt;<name>wrapped_baton</name></name></expr></argument>,
                                       <argument><expr><name>copyfrom_path</name></expr></argument>, <argument><expr><name>copyfrom_revision</name></expr></argument>,
                                       <argument><expr><name>pool</name></expr></argument>, <argument><expr>&amp;<name><name>b</name>-&gt;<name>wrapped_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>open_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
          <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
          <param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
          <param><decl><type><name>void</name> **</type><name>child_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>pb</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>b</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>make_file_baton</name><argument_list>(<argument><expr>&amp;<name>b</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>child_baton</name> = <name>b</name></expr>;</expr_stmt>
  <if>if <condition>(<expr><name><name>b</name>-&gt;<name>ambiently_excluded</name></name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>eb</name>-&gt;<name>wrapped_editor</name>-&gt;<name>open_file</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>pb</name>-&gt;<name>wrapped_baton</name></name></expr></argument>,
                                        <argument><expr><name>base_revision</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>,
                                        <argument><expr>&amp;<name><name>b</name>-&gt;<name>wrapped_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>apply_textdelta</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_checksum</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                <param><decl><type><name>svn_txdelta_window_handler_t</name> *</type><name>handler</name></decl></param>,
                <param><decl><type><name>void</name> **</type><name>handler_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>fb</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>fb</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* For filtered files, we just consume the textdelta. */</comment>
  <if>if <condition>(<expr><name><name>fb</name>-&gt;<name>ambiently_excluded</name></name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr>*<name>handler</name> = <name>svn_delta_noop_window_handler</name></expr>;</expr_stmt>
      <expr_stmt><expr>*<name>handler_baton</name> = <name>NULL</name></expr>;</expr_stmt>
      <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
    }</block></then></if>

  <return>return <expr><call><name><name>eb</name>-&gt;<name>wrapped_editor</name>-&gt;<name>apply_textdelta</name></name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>wrapped_baton</name></name></expr></argument>,
                                             <argument><expr><name>base_checksum</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>,
                                             <argument><expr><name>handler</name></expr></argument>, <argument><expr><name>handler_baton</name></expr></argument>)</argument_list></call></expr>;</return><empty_stmt>;</empty_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>close_file</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>text_checksum</name></decl></param>,
           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>fb</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>fb</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>fb</name>-&gt;<name>ambiently_excluded</name></name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <return>return <expr><call><name><name>eb</name>-&gt;<name>wrapped_editor</name>-&gt;<name>close_file</name></name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>wrapped_baton</name></name></expr></argument>,
                                        <argument><expr><name>text_checksum</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>absent_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
            <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>pb</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>pb</name>-&gt;<name>ambiently_excluded</name></name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <return>return <expr><call><name><name>eb</name>-&gt;<name>wrapped_editor</name>-&gt;<name>absent_file</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>pb</name>-&gt;<name>wrapped_baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>close_directory</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>dir_baton</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>db</name> <init>= <expr><name>dir_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>db</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>db</name>-&gt;<name>ambiently_excluded</name></name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <return>return <expr><call><name><name>eb</name>-&gt;<name>wrapped_editor</name>-&gt;<name>close_directory</name></name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>wrapped_baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>absent_directory</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                 <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>pb</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Don't report absent items in filtered directories. */</comment>
  <if>if <condition>(<expr><name><name>pb</name>-&gt;<name>ambiently_excluded</name></name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <return>return <expr><call><name><name>eb</name>-&gt;<name>wrapped_editor</name>-&gt;<name>absent_directory</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>pb</name>-&gt;<name>wrapped_baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>change_file_prop</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>fb</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>fb</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>fb</name>-&gt;<name>ambiently_excluded</name></name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <return>return <expr><call><name><name>eb</name>-&gt;<name>wrapped_editor</name>-&gt;<name>change_file_prop</name></name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>wrapped_baton</name></name></expr></argument>,
                                              <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>change_dir_prop</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>dir_baton</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>db</name> <init>= <expr><name>dir_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>db</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>db</name>-&gt;<name>ambiently_excluded</name></name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <return>return <expr><call><name><name>eb</name>-&gt;<name>wrapped_editor</name>-&gt;<name>change_dir_prop</name></name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>wrapped_baton</name></name></expr></argument>,
                                             <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>close_edit</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>eb</name>-&gt;<name>wrapped_editor</name>-&gt;<name>close_edit</name></name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>wrapped_edit_baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__ambient_depth_filter_editor</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
                                    <param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>wrapped_editor</name></decl></param>,
                                    <param><decl><type><name>void</name> *</type><name>wrapped_edit_baton</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>anchor</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
                                    <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_delta_editor_t</name> *</type><name>depth_filter_editor</name></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>depth_filter_editor</name> = <call><name>svn_delta_default_editor</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>depth_filter_editor</name>-&gt;<name>set_target_revision</name></name> = <name>set_target_revision</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>depth_filter_editor</name>-&gt;<name>open_root</name></name> = <name>open_root</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>depth_filter_editor</name>-&gt;<name>delete_entry</name></name> = <name>delete_entry</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>depth_filter_editor</name>-&gt;<name>add_directory</name></name> = <name>add_directory</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>depth_filter_editor</name>-&gt;<name>open_directory</name></name> = <name>open_directory</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>depth_filter_editor</name>-&gt;<name>change_dir_prop</name></name> = <name>change_dir_prop</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>depth_filter_editor</name>-&gt;<name>close_directory</name></name> = <name>close_directory</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>depth_filter_editor</name>-&gt;<name>absent_directory</name></name> = <name>absent_directory</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>depth_filter_editor</name>-&gt;<name>add_file</name></name> = <name>add_file</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>depth_filter_editor</name>-&gt;<name>open_file</name></name> = <name>open_file</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>depth_filter_editor</name>-&gt;<name>apply_textdelta</name></name> = <name>apply_textdelta</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>depth_filter_editor</name>-&gt;<name>change_file_prop</name></name> = <name>change_file_prop</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>depth_filter_editor</name>-&gt;<name>close_file</name></name> = <name>close_file</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>depth_filter_editor</name>-&gt;<name>absent_file</name></name> = <name>absent_file</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>depth_filter_editor</name>-&gt;<name>close_edit</name></name> = <name>close_edit</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>eb</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>eb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>wrapped_editor</name></name> = <name>wrapped_editor</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>wrapped_edit_baton</name></name> = <name>wrapped_edit_baton</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>anchor</name></name> = <name>anchor</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>target</name></name> = <name>target</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>adm_access</name></name> = <name>adm_access</name></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>editor</name> = <name>depth_filter_editor</name></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>edit_baton</name> = <name>eb</name></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
