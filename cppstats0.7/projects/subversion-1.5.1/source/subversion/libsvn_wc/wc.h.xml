<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_wc/wc.h"><comment type="block">/*
 * wc.h :  shared stuff internal to the svn_wc library.
 *
 * ====================================================================
 * Copyright (c) 2000-2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<escape char="0xc"/>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVN_LIBSVN_WC_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_LIBSVN_WC_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_hash.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_wc.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<escape char="0xc"/>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__TMP_EXT</name></cpp:macro>       <cpp:value>".tmp"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__PROP_REJ_EXT</name></cpp:macro>  <cpp:value>".prej"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__BASE_EXT</name></cpp:macro>      <cpp:value>".svn-base"</cpp:value></cpp:define> <comment type="block">/* for text and prop bases */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__WORK_EXT</name></cpp:macro>      <cpp:value>".svn-work"</cpp:value></cpp:define> <comment type="block">/* for working propfiles */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__REVERT_EXT</name></cpp:macro>    <cpp:value>".svn-revert"</cpp:value></cpp:define> <comment type="block">/* for reverting a replaced
                                               file */</comment>



<escape char="0xc"/>
<comment type="block">/* We can handle this format or anything lower, and we (should) error
 * on anything higher.
 *
 * There is no format version 0; we started with 1.
 *
 * The change from 1 to 2 was the introduction of SVN_WC__WORK_EXT.
 * For example, ".svn/props/foo" became ".svn/props/foo.svn-work".
 *
 * The change from 2 to 3 was the introduction of the entry attribute
 * SVN_WC__ENTRY_ATTR_ABSENT.
 *
 * The change from 3 to 4 was the renaming of the magic "svn:this_dir"
 * entry name to "".
 *
 * The change from 4 to 5 was the addition of support for replacing files
 * with history.
 *
 * The change from 5 to 6 was the introduction of caching of property
 * modification state and certain properties in the entries file.
 *
 * The change from 6 to 7 was changing the entries file format from XML.
 *
 * The change from 7 to 8 was putting wcprops in one file per directory.
 *
 * The change from 8 to 9 was the addition of changelists, keep-local,
 * and sticky depth (for selective/sparse checkouts).
 *
 * Please document any further format changes here.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__VERSION</name></cpp:macro>       <cpp:value>9</cpp:value></cpp:define>

<comment type="block">/* A version &lt;= this doesn't have property caching in the entries file. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__NO_PROPCACHING_VERSION</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<comment type="block">/* A version &lt;= this has the entries file in XML format. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__XML_ENTRIES_VERSION</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<comment type="block">/* A version &lt;= this has wcprops stored in one file per entry. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__WCPROPS_MANY_FILES_VERSION</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<escape char="0xc"/>
<comment type="block">/*** Update traversals. ***/</comment>

<struct>struct <name>svn_wc_traversal_info_t</name>
<block>{
  <comment type="block">/* The pool in which this structure and everything inside it is
     allocated. */</comment>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>

  <comment type="block">/* The before and after values of the SVN_PROP_EXTERNALS property,
   * for each directory on which that property changed.  These have
   * the same layout as those returned by svn_wc_edited_externals().
   *
   * The hashes, their keys, and their values are allocated in the
   * above pool.
   */</comment>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>externals_old</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>externals_new</name></decl>;</decl_stmt>

  <comment type="block">/* The ambient depths of the working copy directories.  The keys are
     working copy paths (as for svn_wc_edited_externals()), the values
     are the result of svn_depth_to_word(depth_of_each_dir). */</comment>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>depths</name></decl>;</decl_stmt>
}</block>;</struct>


<escape char="0xc"/>
<comment type="block">/*** Timestamps. ***/</comment>

<comment type="block">/* A special timestamp value which means "use the timestamp from the
   working copy".  This is sometimes used in a log entry like:

   &lt;modify-entry name="foo.c" revision="5" timestamp="working"/&gt;
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__TIMESTAMP_WC</name></cpp:macro>   <cpp:value>"working"</cpp:value></cpp:define>


<escape char="0xc"/>
<comment type="block">/*** Filesizes. ***/</comment>

<comment type="block">/* A special filesize value which means "use the filesize from the
   working copy".  This is sometimes used in a log entry like:

   &lt;modify-entry name="foo.c" revision="5" working-size="working"/&gt;
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__WORKING_SIZE_WC</name></cpp:macro>   <cpp:value>"working"</cpp:value></cpp:define>


<escape char="0xc"/>
<comment type="block">/*** Names and file/dir operations in the administrative area. ***/</comment>

<comment type="block">/** The files within the administrative subdir. **/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ADM_FORMAT</name></cpp:macro>              <cpp:value>"format"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ADM_ENTRIES</name></cpp:macro>             <cpp:value>"entries"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ADM_LOCK</name></cpp:macro>                <cpp:value>"lock"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ADM_TMP</name></cpp:macro>                 <cpp:value>"tmp"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ADM_TEXT_BASE</name></cpp:macro>           <cpp:value>"text-base"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ADM_PROPS</name></cpp:macro>               <cpp:value>"props"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ADM_PROP_BASE</name></cpp:macro>           <cpp:value>"prop-base"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ADM_DIR_PROPS</name></cpp:macro>           <cpp:value>"dir-props"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ADM_DIR_PROP_BASE</name></cpp:macro>       <cpp:value>"dir-prop-base"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ADM_DIR_PROP_REVERT</name></cpp:macro>     <cpp:value>"dir-prop-revert"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ADM_WCPROPS</name></cpp:macro>             <cpp:value>"wcprops"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ADM_DIR_WCPROPS</name></cpp:macro>         <cpp:value>"dir-wcprops"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ADM_ALL_WCPROPS</name></cpp:macro>         <cpp:value>"all-wcprops"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ADM_LOG</name></cpp:macro>                 <cpp:value>"log"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ADM_KILLME</name></cpp:macro>              <cpp:value>"KILLME"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ADM_README</name></cpp:macro>              <cpp:value>"README.txt"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ADM_EMPTY_FILE</name></cpp:macro>          <cpp:value>"empty-file"</cpp:value></cpp:define>

<comment type="block">/* The basename of the ".prej" file, if a directory ever has property
   conflicts.  This .prej file will appear *within* the conflicted
   directory.  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__THIS_DIR_PREJ</name></cpp:macro>           <cpp:value>"dir_conflicts"</cpp:value></cpp:define>

<comment type="block">/* Possible contents of the killme file.  If present, signals that the
   administrative area only should be deleted. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__KILL_ADM_ONLY</name></cpp:macro>           <cpp:value>"adm-only"</cpp:value></cpp:define>

<escape char="0xc"/>
<comment type="block">/* A space separated list of properties that we cache presence/absence of.
 *
 * Note that each entry contains information about which properties are cached
 * in that particular entry.  This constant is only used when writing entries.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__CACHABLE_PROPS</name></cpp:macro>                                         \
<cpp:value>SVN_PROP_SPECIAL " " SVN_PROP_EXTERNALS " " SVN_PROP_NEEDS_LOCK</cpp:value></cpp:define>

<escape char="0xc"/>
<comment type="block">/* A few declarations for stuff in util.c.
 * If this section gets big, move it all out into a new util.h file. */</comment>

<comment type="block">/* Ensure that DIR exists. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_wc__ensure_directory</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Baton for svn_wc__compat_call_notify_func below. */</comment>
<typedef>typedef <type><struct>struct <name>svn_wc__compat_notify_baton_t</name> <block>{
  <comment type="block">/* Wrapped func/baton. */</comment>
  <decl_stmt><decl><type><name>svn_wc_notify_func_t</name></type> <name>func</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>baton</name></decl>;</decl_stmt>
}</block></struct></type> <name>svn_wc__compat_notify_baton_t</name>;</typedef>

<comment type="block">/* Implements svn_wc_notify_func2_t.  Call BATON-&gt;func (BATON is of type
   svn_wc__compat_notify_baton_t), passing BATON-&gt;baton and the appropriate
   arguments from NOTIFY. */</comment>
<function_decl><type><name>void</name></type> <name>svn_wc__compat_call_notify_func</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>svn_wc_notify_t</name> *</type><name>notify</name></decl></param>,
                                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Set *MODIFIED_P to non-zero if FILENAME's text is modified with
 * regard to the base revision, else set *MODIFIED_P to zero.
 * FILENAME is a path to the file, not just a basename. ADM_ACCESS
 * must be an access baton for @a FILENAME.
 *
 * If FORCE_COMPARISON is true, this function will not allow early
 * return mechanisms that avoid actual content comparison.  Instead,
 * if there is a text base, a full byte-by-byte comparison will be
 * done, and the entry checksum verified as well.  (This means that if
 * the text base is much longer than the working file, every byte of
 * the text base will still be examined.)
 *
 * If COMPARE_TEXTBASES is true, the comparison will be between a
 * detranslated version of *FILENAME and the text base, otherwise, a
 * translated version of the text base and *FILENAME will be compared.
 *
 * If FILENAME does not exist, consider it unmodified.  If it exists
 * but is not under revision control (not even scheduled for
 * addition), return the error SVN_ERR_ENTRY_NOT_FOUND.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc__text_modified_internal_p</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>modified_p</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename</name></decl></param>,
                                 <param><decl><type><name>svn_boolean_t</name></type> <name>force_comparison</name></decl></param>,
                                 <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                                 <param><decl><type><name>svn_boolean_t</name></type> <name>compare_textbases</name></decl></param>,
                                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>



<comment type="block">/* Merge the difference between LEFT and RIGHT into MERGE_TARGET,
   accumulating instructions to update the working copy into LOG_ACCUM.

   If COPYFROM_TEXT is not NULL, the "local mods" text should be taken
   from the path named their instead of MERGE_TARGET (but the merge
   should still be installed into MERGE_TARGET).

   The merge result is stored in *MERGE_OUTCOME and merge conflicts
   are marked in MERGE_RESULT using LEFT_LABEL, RIGHT_LABEL and
   TARGET_LABEL.

   When DRY_RUN is true, no actual changes are made to the working copy.

   If DIFF3_CMD is specified, the given external diff3 tool will
   be used instead of our built in diff3 routines.

   When MERGE_OPTIONS are specified, they are used by the internal
   diff3 routines, or passed to the external diff3 tool.

   If CONFLICT_FUNC is non-NULL, then call it with CONFLICT_BATON if a
   conflict is encountered, giving the callback a chance to resolve
   the conflict (before marking the file 'conflicted').

   For a complete description, see svn_wc_merge2() for which this is
   the (loggy) implementation.

*/</comment>
<decl_stmt><decl><type><name>svn_error_t</name> *</type>
<name>svn_wc__merge_internal</name><argument_list>(<argument><expr><name>svn_stringbuf_t</name> **<name>log_accum</name></expr></argument>,
                       <argument>enum <expr><name>svn_wc_merge_outcome_t</name> *<name>merge_outcome</name></expr></argument>,
                       <argument><expr>const <name>char</name> *<name>left</name></expr></argument>,
                       <argument><expr>const <name>char</name> *<name>right</name></expr></argument>,
                       <argument><expr>const <name>char</name> *<name>merge_target</name></expr></argument>,
                       <argument><expr>const <name>char</name> *<name>copyfrom_text</name></expr></argument>,
                       <argument><expr><name>svn_wc_adm_access_t</name> *<name>adm_access</name></expr></argument>,
                       <argument><expr>const <name>char</name> *<name>left_label</name></expr></argument>,
                       <argument><expr>const <name>char</name> *<name>right_label</name></expr></argument>,
                       <argument><expr>const <name>char</name> *<name>target_label</name></expr></argument>,
                       <argument><expr><name>svn_boolean_t</name> <name>dry_run</name></expr></argument>,
                       <argument><expr>const <name>char</name> *<name>diff3_cmd</name></expr></argument>,
                       <argument><expr>const <name>apr_array_header_t</name> *<name>merge_options</name></expr></argument>,
                       <argument><expr>const <name>apr_array_header_t</name> *<name>prop_diff</name></expr></argument>,
                       <argument><expr><name>svn_wc_conflict_resolver_func_t</name> <name>conflict_func</name></expr></argument>,
                       <argument><expr><name>void</name> *<name>conflict_baton</name></expr></argument>,
                       <argument><expr><name>apr_pool_t</name> *<name>pool</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<comment type="block">/* A default error handler for svn_wc_walk_entries3().  Returns ERR in
   all cases. */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc__walker_default_error_handler</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                     <param><decl><type><name>svn_error_t</name> *</type><name>err</name></decl></param>,
                                     <param><decl><type><name>void</name> *</type><name>walk_baton</name></decl></param>,
                                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Set *EDITOR and *EDIT_BATON to an ambient-depth-based filtering
 * editor that wraps WRAPPED_EDITOR and WRAPPED_BATON.  This is only
 * required for operations where the requested depth is @c
 * svn_depth_unknown and the server's editor driver doesn't understand
 * depth.  It is safe for *EDITOR and *EDIT_BATON to start as
 * WRAPPED_EDITOR and WRAPPED_BATON.
 *
 * ANCHOR, TARGET, and ADM_ACCESS are as in svn_wc_get_update_editor3.
 *
 * @a requested_depth must be one of the following depth values:
 * @c svn_depth_infinity, @c svn_depth_empty, @c svn_depth_files,
 * @c svn_depth_immediates, or @c svn_depth_unknown.
 *
 * Allocations are done in POOL.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc__ambient_depth_filter_editor</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
                                    <param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>wrapped_editor</name></decl></param>,
                                    <param><decl><type><name>void</name> *</type><name>wrapped_edit_baton</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>anchor</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
                                    <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SVN_LIBSVN_WC_H */</comment>
</unit>
