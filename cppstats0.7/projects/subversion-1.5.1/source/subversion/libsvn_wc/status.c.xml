<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_wc/status.c"><comment type="block">/*
 * status.c: construct a status structure from an entry structure
 *
 * ====================================================================
 * Copyright (c) 2000-2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>


<escape char="0xc"/>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_file_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_hash.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_delta.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"props.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"translate.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_wc_private.h"</cpp:file></cpp:include>

<escape char="0xc"/>
<comment type="block">/*** Editor batons ***/</comment>

<struct>struct <name>edit_baton</name>
<block>{
  <comment type="block">/* For status, the "destination" of the edit.  */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>anchor</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>

  <comment type="block">/* The overall depth of this edit (a dir baton may override this).
   *
   * If this is svn_depth_unknown, the depths found in the working
   * copy will govern the edit; or if the edit depth indicates a
   * descent deeper than the found depths are capable of, the found
   * depths also govern, of course (there's no point descending into
   * something that's not there).
   */</comment>
  <decl_stmt><decl><type><name>svn_depth_t</name></type> <name>default_depth</name></decl>;</decl_stmt>

  <comment type="block">/* Do we want all statuses (instead of just the interesting ones) ? */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>get_all</name></decl>;</decl_stmt>

  <comment type="block">/* Ignore the svn:ignores. */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>no_ignore</name></decl>;</decl_stmt>

  <comment type="block">/* The comparison revision in the repository.  This is a reference
     because this editor returns this rev to the driver directly, as
     well as in each statushash entry. */</comment>
  <decl_stmt><decl><type><name>svn_revnum_t</name> *</type><name>target_revision</name></decl>;</decl_stmt>

  <comment type="block">/* Status function/baton. */</comment>
  <decl_stmt><decl><type><name>svn_wc_status_func2_t</name></type> <name>status_func</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>status_baton</name></decl>;</decl_stmt>

  <comment type="block">/* Cancellation function/baton. */</comment>
  <decl_stmt><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>cancel_baton</name></decl>;</decl_stmt>

  <comment type="block">/* The configured set of default ignores. */</comment>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>ignores</name></decl>;</decl_stmt>

  <comment type="block">/* Externals info harvested during the status run. */</comment>
  <decl_stmt><decl><type><name>svn_wc_traversal_info_t</name> *</type><name>traversal_info</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>externals</name></decl>;</decl_stmt>

  <comment type="block">/* Status item for the path represented by the anchor of the edit. */</comment>
  <decl_stmt><decl><type><name>svn_wc_status2_t</name> *</type><name>anchor_status</name></decl>;</decl_stmt>

  <comment type="block">/* Was open_root() called for this edit drive? */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>root_opened</name></decl>;</decl_stmt>

  <comment type="block">/* The repository root URL, if set. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_root</name></decl>;</decl_stmt>

  <comment type="block">/* Repository locks, if set. */</comment>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>repos_locks</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>dir_baton</name>
<block>{
  <comment type="block">/* The path to this directory. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>

  <comment type="block">/* Basename of this directory. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>

  <comment type="block">/* The global edit baton. */</comment>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>edit_baton</name></decl>;</decl_stmt>

  <comment type="block">/* Baton for this directory's parent, or NULL if this is the root
     directory. */</comment>
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>parent_baton</name></decl>;</decl_stmt>

  <comment type="block">/* The ambient requested depth below this point in the edit.  This
     can differ from the parent baton's depth (with the edit baton
     considered the ultimate parent baton).  For example, if the
     parent baton has svn_depth_immediates, then here we should have
     svn_depth_empty, because there would be no further recursion, not
     even to file children. */</comment>
  <decl_stmt><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl>;</decl_stmt>

  <comment type="block">/* Is this directory filtered out due to depth?  (Note that if this
     is TRUE, the depth field is undefined.) */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>excluded</name></decl>;</decl_stmt>

  <comment type="block">/* 'svn status' shouldn't print status lines for things that are
     added;  we're only interest in asking if objects that the user
     *already* has are up-to-date or not.  Thus if this flag is set,
     the next two will be ignored.  :-)  */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>added</name></decl>;</decl_stmt>

  <comment type="block">/* Gets set iff there's a change to this directory's properties, to
     guide us when syncing adm files later. */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>prop_changed</name></decl>;</decl_stmt>

  <comment type="block">/* This means (in terms of 'svn status') that some child was deleted
     or added to the directory */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>text_changed</name></decl>;</decl_stmt>

  <comment type="block">/* Working copy status structures for children of this directory.
     This hash maps const char * paths (relative to the root of the
     edit) to svn_wc_status2_t * status items. */</comment>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>statii</name></decl>;</decl_stmt>

  <comment type="block">/* The pool in which this baton itself is allocated. */</comment>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>

  <comment type="block">/* The URI to this item in the repository. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl>;</decl_stmt>

  <comment type="block">/* out-of-date info corresponding to ood_* fields in svn_wc_status2_t. */</comment>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>ood_last_cmt_rev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_time_t</name></type> <name>ood_last_cmt_date</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>ood_kind</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ood_last_cmt_author</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>file_baton</name>
<block>{
  <comment type="block">/* The global edit baton. */</comment>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>edit_baton</name></decl>;</decl_stmt>

  <comment type="block">/* Baton for this file's parent directory. */</comment>
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>dir_baton</name></decl>;</decl_stmt>

  <comment type="block">/* Pool specific to this file_baton. */</comment>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>

  <comment type="block">/* Name of this file (its entry in the directory). */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>

  <comment type="block">/* Path to this file, either abs or relative to the change-root. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>

  <comment type="block">/* 'svn status' shouldn't print status lines for things that are
     added;  we're only interest in asking if objects that the user
     *already* has are up-to-date or not.  Thus if this flag is set,
     the next two will be ignored.  :-)  */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>added</name></decl>;</decl_stmt>

  <comment type="block">/* This gets set if the file underwent a text change, which guides
     the code that syncs up the adm dir and working copy. */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>text_changed</name></decl>;</decl_stmt>

  <comment type="block">/* This gets set if the file underwent a prop change, which guides
     the code that syncs up the adm dir and working copy. */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>prop_changed</name></decl>;</decl_stmt>

  <comment type="block">/* The URI to this item in the repository. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl>;</decl_stmt>

  <comment type="block">/* out-of-date info corresponding to ood_* fields in svn_wc_status2_t. */</comment>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>ood_last_cmt_rev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_time_t</name></type> <name>ood_last_cmt_date</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>ood_kind</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ood_last_cmt_author</name></decl>;</decl_stmt>
}</block>;</struct>


<comment type="block">/** Code **/</comment>

<comment type="block">/* Fill in *STATUS for PATH, whose entry data is in ENTRY.  Allocate
   *STATUS in POOL.

   ENTRY may be null, for non-versioned entities.  In this case, we
   will assemble a special status structure item which implies a
   non-versioned thing.

   PARENT_ENTRY is the entry for the parent directory of PATH, it may be
   NULL if ENTRY is NULL or if PATH is a working copy root.  The lifetime
   of PARENT_ENTRY's pool is not important.

   PATH_KIND is the node kind of PATH as determined by the caller.
   NOTE: this may be svn_node_unknown if the caller has made no such
   determination.

   If PATH_KIND is not svn_node_unknown, PATH_SPECIAL indicates whether
   the entry is a special file.

   If GET_ALL is zero, and ENTRY is not locally modified, then *STATUS
   will be set to NULL.  If GET_ALL is non-zero, then *STATUS will be
   allocated and returned no matter what.

   If IS_IGNORED is non-zero and this is a non-versioned entity, set
   the text_status to svn_wc_status_none.  Otherwise set the
   text_status to svn_wc_status_unversioned.

   If non-NULL, look up a repository lock in REPOS_LOCKS and set the repos_lock
   field of the status struct to that lock if it exists.  If REPOS_LOCKS is
   non-NULL, REPOS_ROOT must contain the repository root URL of the entry.
*/</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>assemble_status</name><parameter_list>(<param><decl><type><name>svn_wc_status2_t</name> **</type><name>status</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>parent_entry</name></decl></param>,
                <param><decl><type><name>svn_node_kind_t</name></type> <name>path_kind</name></decl></param>, <param><decl><type><name>svn_boolean_t</name></type> <name>path_special</name></decl></param>,
                <param><decl><type><name>svn_boolean_t</name></type> <name>get_all</name></decl></param>,
                <param><decl><type><name>svn_boolean_t</name></type> <name>is_ignored</name></decl></param>,
                <param><decl><type><name>apr_hash_t</name> *</type><name>repos_locks</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_root</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_wc_status2_t</name> *</type><name>stat</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>has_props</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>text_modified_p</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>prop_modified_p</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>locked_p</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>switched_p</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SYMLINK</name></cpp:ifdef>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>wc_special</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_SYMLINK */</comment>

  <comment type="block">/* Defaults for two main variables. */</comment>
  <enum>enum <name>svn_wc_status_kind</name> <name>final_text_status</name> <expr_stmt><expr>= <name>svn_wc_status_normal</name></expr>;</expr_stmt></enum>
  <enum>enum <name>svn_wc_status_kind</name> <name>final_prop_status</name> <expr_stmt><expr>= <name>svn_wc_status_none</name></expr>;</expr_stmt></enum>

  <decl_stmt><decl><type><name>svn_lock_t</name> *</type><name>repos_lock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Check for a repository lock. */</comment>
  <if>if <condition>(<expr><name>repos_locks</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>abs_path</name></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>entry</name> &amp;&amp; <name><name>entry</name>-&gt;<name>url</name></name></expr>)</condition><then>
        <expr_stmt><expr><name>abs_path</name> = <name><name>entry</name>-&gt;<name>url</name></name> + <call><name>strlen</name><argument_list>(<argument><expr><name>repos_root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
      <else>else <if>if <condition>(<expr><name>parent_entry</name> &amp;&amp; <name><name>parent_entry</name>-&gt;<name>url</name></name></expr>)</condition><then>
        <expr_stmt><expr><name>abs_path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>parent_entry</name>-&gt;<name>url</name></name> + <call><name>strlen</name><argument_list>(<argument><expr><name>repos_root</name></expr></argument>)</argument_list></call></expr></argument>,
                                 <argument><expr><call><name>svn_path_basename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
      <else>else
        <expr_stmt><expr><name>abs_path</name> = <name>NULL</name></expr>;</expr_stmt></else></if></else></if>

      <if>if <condition>(<expr><name>abs_path</name></expr>)</condition><then>
        <expr_stmt><expr><name>repos_lock</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>repos_locks</name></expr></argument>,
                                  <argument><expr><call><name>svn_path_uri_decode</name><argument_list>(<argument><expr><name>abs_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
                                  <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></then></if>

  <comment type="block">/* Check the path kind for PATH. */</comment>
  <if>if <condition>(<expr><name>path_kind</name> == <name>svn_node_unknown</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_check_special_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>&amp;<name>path_kind</name></expr></argument>, <argument><expr>&amp;<name>path_special</name></expr></argument>,
                                      <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr>! <name>entry</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* return a blank structure. */</comment>
      <expr_stmt><expr><name>stat</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>stat</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>stat</name>-&gt;<name>entry</name></name> = <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>stat</name>-&gt;<name>text_status</name></name> = <name>svn_wc_status_none</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>stat</name>-&gt;<name>prop_status</name></name> = <name>svn_wc_status_none</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>stat</name>-&gt;<name>repos_text_status</name></name> = <name>svn_wc_status_none</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>stat</name>-&gt;<name>repos_prop_status</name></name> = <name>svn_wc_status_none</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>stat</name>-&gt;<name>locked</name></name> = <name>FALSE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>stat</name>-&gt;<name>copied</name></name> = <name>FALSE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>stat</name>-&gt;<name>switched</name></name> = <name>FALSE</name></expr>;</expr_stmt>

      <comment type="block">/* If this path has no entry, but IS present on disk, it's
         unversioned.  If this file is being explicitly ignored (due
         to matching an ignore-pattern), the text_status is set to
         svn_wc_status_ignored.  Otherwise the text_status is set to
         svn_wc_status_unversioned. */</comment>
      <if>if <condition>(<expr><name>path_kind</name> != <name>svn_node_none</name></expr>)</condition><then>
        <block>{
          <if>if <condition>(<expr><name>is_ignored</name></expr>)</condition><then>
            <expr_stmt><expr><name><name>stat</name>-&gt;<name>text_status</name></name> = <name>svn_wc_status_ignored</name></expr>;</expr_stmt></then>
          <else>else
            <expr_stmt><expr><name><name>stat</name>-&gt;<name>text_status</name></name> = <name>svn_wc_status_unversioned</name></expr>;</expr_stmt></else></if>
        }</block></then></if>

      <expr_stmt><expr><name><name>stat</name>-&gt;<name>repos_lock</name></name> = <name>repos_lock</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>stat</name>-&gt;<name>url</name></name> = <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>stat</name>-&gt;<name>ood_last_cmt_rev</name></name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>stat</name>-&gt;<name>ood_last_cmt_date</name></name> = 0</expr>;</expr_stmt>
      <expr_stmt><expr><name><name>stat</name>-&gt;<name>ood_kind</name></name> = <name>svn_node_none</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>stat</name>-&gt;<name>ood_last_cmt_author</name></name> = <name>NULL</name></expr>;</expr_stmt>

      <expr_stmt><expr>*<name>status</name> = <name>stat</name></expr>;</expr_stmt>
      <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
    }</block></then></if>

  <comment type="block">/* Someone either deleted the administrative directory in the versioned
     subdir, or deleted the directory altogether and created a new one.
     In any case, what is currently there is in the way.
   */</comment>
  <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><name>path_kind</name> == <name>svn_node_dir</name></expr>)</condition><then>
        <block>{
          <if>if <condition>(<expr><call><name>svn_wc__adm_missing</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><name>final_text_status</name> = <name>svn_wc_status_obstructed</name></expr>;</expr_stmt></then></if>
        }</block></then>
      <else>else <if>if <condition>(<expr><name>path_kind</name> != <name>svn_node_none</name></expr>)</condition><then>
        <expr_stmt><expr><name>final_text_status</name> = <name>svn_wc_status_obstructed</name></expr>;</expr_stmt></then></if></else></if>
    }</block></then></if>

  <comment type="block">/* Is this item switched?  Well, to be switched it must have both an URL
     and a parent with an URL, at the very least.
     If this is the root folder on the (virtual) disk, entry and parent_entry
     will be equal. */</comment>
  <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>url</name></name> &amp;&amp; <name>parent_entry</name> &amp;&amp; <name><name>parent_entry</name>-&gt;<name>url</name></name> &amp;&amp;
      <name>entry</name> != <name>parent_entry</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* An item is switched if its working copy basename differs from the
         basename of its URL. */</comment>
      <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>svn_path_uri_encode</name><argument_list>(<argument><expr><call><name>svn_path_basename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
                 <argument><expr><call><name>svn_path_basename</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><name>switched_p</name> = <name>TRUE</name></expr>;</expr_stmt></then></if>

      <comment type="block">/* An item is switched if its URL, without the basename, does not
         equal its parent's URL. */</comment>
      <if>if <condition>(<expr>! <name>switched_p</name>
          &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><call><name>svn_path_dirname</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><name><name>parent_entry</name>-&gt;<name>url</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><name>switched_p</name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
    }</block></then></if>

  <if>if <condition>(<expr><name>final_text_status</name> != <name>svn_wc_status_obstructed</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* Implement predecence rules: */</comment>

      <comment type="block">/* 1. Set the two main variables to "discovered" values first (M, C).
            Together, these two stati are of lowest precedence, and C has
            precedence over M. */</comment>

      <comment type="block">/* Does the entry have props? */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__has_props</name><argument_list>(<argument><expr>&amp;<name>has_props</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>has_props</name></expr>)</condition><then>
        <expr_stmt><expr><name>final_prop_status</name> = <name>svn_wc_status_normal</name></expr>;</expr_stmt></then></if>

      <comment type="block">/* If the entry has a property file, see if it has local changes. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_props_modified_p</name><argument_list>(<argument><expr>&amp;<name>prop_modified_p</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
                                      <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SYMLINK</name></cpp:ifdef>
      <if>if <condition>(<expr><name>has_props</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__get_special</name><argument_list>(<argument><expr>&amp;<name>wc_special</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
      <else>else
        <expr_stmt><expr><name>wc_special</name> = <name>FALSE</name></expr>;</expr_stmt></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_SYMLINK */</comment>

      <comment type="block">/* If the entry is a file, check for textual modifications */</comment>
      <if>if <condition>(<expr>(<name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_file</name>)
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SYMLINK</name></cpp:ifdef>
          &amp;&amp; (<name>wc_special</name> == <name>path_special</name>)</expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_SYMLINK */</comment>
          )</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_text_modified_p</name><argument_list>(<argument><expr>&amp;<name>text_modified_p</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                                       <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <if>if <condition>(<expr><name>text_modified_p</name></expr>)</condition><then>
        <expr_stmt><expr><name>final_text_status</name> = <name>svn_wc_status_modified</name></expr>;</expr_stmt></then></if>

      <if>if <condition>(<expr><name>prop_modified_p</name></expr>)</condition><then>
        <expr_stmt><expr><name>final_prop_status</name> = <name>svn_wc_status_modified</name></expr>;</expr_stmt></then></if>

      <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>prejfile</name></name> || <name><name>entry</name>-&gt;<name>conflict_old</name></name> ||
          <name><name>entry</name>-&gt;<name>conflict_new</name></name> || <name><name>entry</name>-&gt;<name>conflict_wrk</name></name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>text_conflict_p</name></decl>, <decl><type ref="prev"/><name>prop_conflict_p</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>parent_dir</name></decl>;</decl_stmt>

          <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name></expr>)</condition><then>
            <expr_stmt><expr><name>parent_dir</name> = <name>path</name></expr>;</expr_stmt></then>
          <else>else  <comment type="block">/* non-directory, that's all we need to know */</comment>
            <expr_stmt><expr><name>parent_dir</name> = <call><name>svn_path_dirname</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_conflicted_p</name><argument_list>(<argument><expr>&amp;<name>text_conflict_p</name></expr></argument>, <argument><expr>&amp;<name>prop_conflict_p</name></expr></argument>,
                                      <argument><expr><name>parent_dir</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <if>if <condition>(<expr><name>text_conflict_p</name></expr>)</condition><then>
            <expr_stmt><expr><name>final_text_status</name> = <name>svn_wc_status_conflicted</name></expr>;</expr_stmt></then></if>
          <if>if <condition>(<expr><name>prop_conflict_p</name></expr>)</condition><then>
            <expr_stmt><expr><name>final_prop_status</name> = <name>svn_wc_status_conflicted</name></expr>;</expr_stmt></then></if>
        }</block></then></if>

      <comment type="block">/* 2. Possibly overwrite the text_status variable with "scheduled"
            states from the entry (A, D, R).  As a group, these states are
            of medium precedence.  They also override any C or M that may
            be in the prop_status field at this point, although they do not
            override a C text status.*/</comment>

      <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>schedule</name></name> == <name>svn_wc_schedule_add</name>
          &amp;&amp; <name>final_text_status</name> != <name>svn_wc_status_conflicted</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>final_text_status</name> = <name>svn_wc_status_added</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>final_prop_status</name> = <name>svn_wc_status_none</name></expr>;</expr_stmt>
        }</block></then>

      <else>else <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>schedule</name></name> == <name>svn_wc_schedule_replace</name>
               &amp;&amp; <name>final_text_status</name> != <name>svn_wc_status_conflicted</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>final_text_status</name> = <name>svn_wc_status_replaced</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>final_prop_status</name> = <name>svn_wc_status_none</name></expr>;</expr_stmt>
        }</block></then>

      <else>else <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>schedule</name></name> == <name>svn_wc_schedule_delete</name>
               &amp;&amp; <name>final_text_status</name> != <name>svn_wc_status_conflicted</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>final_text_status</name> = <name>svn_wc_status_deleted</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>final_prop_status</name> = <name>svn_wc_status_none</name></expr>;</expr_stmt>
        }</block></then></if></else></if></else></if>


      <comment type="block">/* 3. Highest precedence:

            a. check to see if file or dir is just missing, or
               incomplete.  This overrides every possible state
               *except* deletion.  (If something is deleted or
               scheduled for it, we don't care if the working file
               exists.)

            b. check to see if the file or dir is present in the
               file system as the same kind it was versioned as.

         4. Check for locked directory (only for directories). */</comment>

      <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>incomplete</name></name>
          &amp;&amp; (<name>final_text_status</name> != <name>svn_wc_status_deleted</name>)
          &amp;&amp; (<name>final_text_status</name> != <name>svn_wc_status_added</name>)</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>final_text_status</name> = <name>svn_wc_status_incomplete</name></expr>;</expr_stmt>
        }</block></then>
      <else>else <if>if <condition>(<expr><name>path_kind</name> == <name>svn_node_none</name></expr>)</condition><then>
        <block>{
          <if>if <condition>(<expr><name>final_text_status</name> != <name>svn_wc_status_deleted</name></expr>)</condition><then>
            <expr_stmt><expr><name>final_text_status</name> = <name>svn_wc_status_missing</name></expr>;</expr_stmt></then></if>
        }</block></then>
      <else>else <if>if <condition>(<expr><name>path_kind</name> != <name><name>entry</name>-&gt;<name>kind</name></name></expr>)</condition><then>
        <expr_stmt><expr><name>final_text_status</name> = <name>svn_wc_status_obstructed</name></expr>;</expr_stmt></then>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SYMLINK</name></cpp:ifdef>
      <else>else <if>if <condition>(<expr>((! <name>wc_special</name>) &amp;&amp; (<name>path_special</name>))
               || (<name>wc_special</name> &amp;&amp; (! <name>path_special</name>))</expr>
               )</condition><then>
        <expr_stmt><expr><name>final_text_status</name> = <name>svn_wc_status_obstructed</name></expr>;</expr_stmt></then></if></else></if></else></if></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_SYMLINK */</comment>

      <if>if <condition>(<expr><name>path_kind</name> == <name>svn_node_dir</name> &amp;&amp; <name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_locked</name><argument_list>(<argument><expr>&amp;<name>locked_p</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></then></if>

  <comment type="block">/* 5. Easy out:  unless we're fetching -every- entry, don't bother
     to allocate a struct for an uninteresting entry. */</comment>

  <if>if <condition>(<expr>! <name>get_all</name></expr>)</condition><then>
    <if>if <condition>(<expr>((<name>final_text_status</name> == <name>svn_wc_status_none</name>)
         || (<name>final_text_status</name> == <name>svn_wc_status_normal</name>))
        &amp;&amp; ((<name>final_prop_status</name> == <name>svn_wc_status_none</name>)
            || (<name>final_prop_status</name> == <name>svn_wc_status_normal</name>))
        &amp;&amp; (! <name>locked_p</name>) &amp;&amp; (! <name>switched_p</name>) &amp;&amp; (! <name><name>entry</name>-&gt;<name>lock_token</name></name>)
        &amp;&amp; (! <name>repos_lock</name>) &amp;&amp; (! <name><name>entry</name>-&gt;<name>changelist</name></name>)</expr>)</condition><then>
      <block>{
        <expr_stmt><expr>*<name>status</name> = <name>NULL</name></expr>;</expr_stmt>
        <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
      }</block></then></if></then></if>


  <comment type="block">/* 6. Build and return a status structure. */</comment>

  <expr_stmt><expr><name>stat</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>**<name>status</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>stat</name>-&gt;<name>entry</name></name> = <call><name>svn_wc_entry_dup</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>stat</name>-&gt;<name>text_status</name></name> = <name>final_text_status</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>stat</name>-&gt;<name>prop_status</name></name> = <name>final_prop_status</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>stat</name>-&gt;<name>repos_text_status</name></name> = <name>svn_wc_status_none</name></expr>;</expr_stmt>   <comment type="block">/* default */</comment>
  <expr_stmt><expr><name><name>stat</name>-&gt;<name>repos_prop_status</name></name> = <name>svn_wc_status_none</name></expr>;</expr_stmt>   <comment type="block">/* default */</comment>
  <expr_stmt><expr><name><name>stat</name>-&gt;<name>locked</name></name> = <name>locked_p</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>stat</name>-&gt;<name>switched</name></name> = <name>switched_p</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>stat</name>-&gt;<name>copied</name></name> = <name><name>entry</name>-&gt;<name>copied</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>stat</name>-&gt;<name>repos_lock</name></name> = <name>repos_lock</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>stat</name>-&gt;<name>url</name></name> = (<name><name>entry</name>-&gt;<name>url</name></name> ? <name><name>entry</name>-&gt;<name>url</name></name> : <name>NULL</name>)</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>stat</name>-&gt;<name>ood_last_cmt_rev</name></name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>stat</name>-&gt;<name>ood_last_cmt_date</name></name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>stat</name>-&gt;<name>ood_kind</name></name> = <name>svn_node_none</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>stat</name>-&gt;<name>ood_last_cmt_author</name></name> = <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>status</name> = <name>stat</name></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>




<comment type="block">/* Given an ENTRY object representing PATH, build a status structure
   and pass it off to the STATUS_FUNC/STATUS_BATON.  All other
   arguments are the same as those passed to assemble_status().  */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>send_status_structure</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                      <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>parent_entry</name></decl></param>,
                      <param><decl><type><name>svn_node_kind_t</name></type> <name>path_kind</name></decl></param>,
                      <param><decl><type><name>svn_boolean_t</name></type> <name>path_special</name></decl></param>,
                      <param><decl><type><name>svn_boolean_t</name></type> <name>get_all</name></decl></param>,
                      <param><decl><type><name>svn_boolean_t</name></type> <name>is_ignored</name></decl></param>,
                      <param><decl><type><name>apr_hash_t</name> *</type><name>repos_locks</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_root</name></decl></param>,
                      <param><decl><type><name>svn_wc_status_func2_t</name></type> <name>status_func</name></decl></param>,
                      <param><decl><type><name>void</name> *</type><name>status_baton</name></decl></param>,
                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_wc_status2_t</name> *</type><name>statstruct</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>assemble_status</name><argument_list>(<argument><expr>&amp;<name>statstruct</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>parent_entry</name></expr></argument>,
                          <argument><expr><name>path_kind</name></expr></argument>, <argument><expr><name>path_special</name></expr></argument>, <argument><expr><name>get_all</name></expr></argument>, <argument><expr><name>is_ignored</name></expr></argument>,
                          <argument><expr><name>repos_locks</name></expr></argument>, <argument><expr><name>repos_root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>statstruct</name> &amp;&amp; (<name>status_func</name>)</expr>)</condition><then>
    <expr_stmt><expr><call>(*<name>status_func</name>)<argument_list>(<argument><expr><name>status_baton</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>statstruct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Store in PATTERNS a list of all svn:ignore properties from
   the working copy directory, including the default ignores
   passed in as IGNORES.

   Upon return, *PATTERNS will contain zero or more (const char *)
   patterns from the value of the SVN_PROP_IGNORE property set on
   the working directory path.

   IGNORES is a list of patterns to include; typically this will
   be the default ignores as, for example, specified in a config file.

   ADM_ACCESS is an access baton for the working copy path.

   Allocate everything in POOL.

   None of the arguments may be NULL.
*/</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>collect_ignore_patterns</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>patterns</name></decl></param>,
                        <param><decl><type><name>apr_array_header_t</name> *</type><name>ignores</name></decl></param>,
                        <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>patterns</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Copy default ignores into the local PATTERNS array. */</comment>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>ignores</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ignore</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>ignores</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr>*<name>patterns</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>ignore</name></expr>;</expr_stmt>
    }</block></for>

  <comment type="block">/* Then add any svn:ignore globs to the PATTERNS array. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_prop_get</name><argument_list>(<argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>SVN_PROP_IGNORE</name></expr></argument>,
                          <argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
                          <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>value</name> != <name>NULL</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>svn_cstring_split_append</name><argument_list>(<argument><expr>*<name>patterns</name></expr></argument>, <argument><expr><name><name>value</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr>"\n\r"</expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Compare PATH with items in the EXTERNALS hash to see if PATH is the
   drop location for, or an intermediate directory of the drop
   location for, an externals definition.  Use POOL for
   scratchwork. */</comment>
<function><type><specifier>static</specifier> <name>svn_boolean_t</name></type>
<name>is_external_path</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>externals</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>

  <comment type="block">/* First try: does the path exist as a key in the hash? */</comment>
  <if>if <condition>(<expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>externals</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>TRUE</name></expr>;</return></then></if>

  <comment type="block">/* Failing that, we need to check if any external is a child of
     PATH. */</comment>
  <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>externals</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><call><name>svn_path_is_child</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>TRUE</name></expr>;</return></then></if>
    }</block></for>

  <return>return <expr><name>FALSE</name></expr>;</return>
}</block></function>


<comment type="block">/* Assuming that NAME is unversioned, send a status structure
   for it through STATUS_FUNC/STATUS_BATON unless this path is being
   ignored.  This function should never be called on a versioned entry.

   NAME is the basename of the unversioned file whose status is being
   requested.  PATH_KIND is the node kind of NAME as determined by the
   caller.  PATH_SPECIAL is the special status of the path, also determined
   by the caller.  ADM_ACCESS is an access baton for the working copy path.
   PATTERNS points to a list of filename patterns which are marked as
   ignored.  None of these parameter may be NULL.  EXTERNALS is a hash
   of known externals definitions for this status run.

   If NO_IGNORE is non-zero, the item will be added regardless of
   whether it is ignored; otherwise we will only add the item if it
   does not match any of the patterns in PATTERNS.

   Allocate everything in POOL.
*/</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>send_unversioned_item</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                      <param><decl><type><name>svn_node_kind_t</name></type> <name>path_kind</name></decl></param>, <param><decl><type><name>svn_boolean_t</name></type> <name>path_special</name></decl></param>,
                      <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                      <param><decl><type><name>apr_array_header_t</name> *</type><name>patterns</name></decl></param>,
                      <param><decl><type><name>apr_hash_t</name> *</type><name>externals</name></decl></param>,
                      <param><decl><type><name>svn_boolean_t</name></type> <name>no_ignore</name></decl></param>,
                      <param><decl><type><name>apr_hash_t</name> *</type><name>repos_locks</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_root</name></decl></param>,
                      <param><decl><type><name>svn_wc_status_func2_t</name></type> <name>status_func</name></decl></param>,
                      <param><decl><type><name>void</name> *</type><name>status_baton</name></decl></param>,
                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>ignore_me</name> <init>= <expr><call><name>svn_wc_match_ignore_list</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>patterns</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name> <init>= <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>,
                                   <argument><expr><name>name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>is_external</name> <init>= <expr><call><name>is_external_path</name><argument_list>(<argument><expr><name>externals</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_status2_t</name> *</type><name>status</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>assemble_status</name><argument_list>(<argument><expr>&amp;<name>status</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                          <argument><expr><name>path_kind</name></expr></argument>, <argument><expr><name>path_special</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>ignore_me</name></expr></argument>,
                          <argument><expr><name>repos_locks</name></expr></argument>, <argument><expr><name>repos_root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>is_external</name></expr>)</condition><then>
    <expr_stmt><expr><name><name>status</name>-&gt;<name>text_status</name></name> = <name>svn_wc_status_external</name></expr>;</expr_stmt></then></if>

  <comment type="block">/* If we aren't ignoring it, or if it's an externals path, or it has a lock
     in the repository, pass this entry to the status func. */</comment>
  <if>if <condition>(<expr><name>no_ignore</name> || (! <name>ignore_me</name>) || <name>is_external</name> || <name><name>status</name>-&gt;<name>repos_lock</name></name></expr>)</condition><then>
    <expr_stmt><expr><call>(<name>status_func</name>)<argument_list>(<argument><expr><name>status_baton</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Prototype for untangling a tango-ing two-some. */</comment>
<function_decl><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>get_dir_status</name><parameter_list>(<param><decl><type>struct <name>edit_baton</name> *</type><name>eb</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>parent_entry</name></decl></param>,
                                   <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>entry</name></decl></param>,
                                   <param><decl><type><name>apr_array_header_t</name> *</type><name>ignores</name></decl></param>,
                                   <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                                   <param><decl><type><name>svn_boolean_t</name></type> <name>get_all</name></decl></param>,
                                   <param><decl><type><name>svn_boolean_t</name></type> <name>no_ignore</name></decl></param>,
                                   <param><decl><type><name>svn_boolean_t</name></type> <name>skip_this_dir</name></decl></param>,
                                   <param><decl><type><name>svn_wc_status_func2_t</name></type> <name>status_func</name></decl></param>,
                                   <param><decl><type><name>void</name> *</type><name>status_baton</name></decl></param>,
                                   <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
                                   <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
                                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Handle NAME (whose entry is ENTRY) as a directory entry of the
   directory represented by ADM_ACCESS (and whose entry is
   DIR_ENTRY).  All other arguments are the same as those passed to
   get_dir_status(), the function for which this one is a helper.  */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>handle_dir_entry</name><parameter_list>(<param><decl><type>struct <name>edit_baton</name> *</type><name>eb</name></decl></param>,
                 <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>dir_entry</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl></param>,
                 <param><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl></param>,
                 <param><decl><type><name>svn_boolean_t</name></type> <name>special</name></decl></param>,
                 <param><decl><type><name>apr_array_header_t</name> *</type><name>ignores</name></decl></param>,
                 <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                 <param><decl><type><name>svn_boolean_t</name></type> <name>get_all</name></decl></param>,
                 <param><decl><type><name>svn_boolean_t</name></type> <name>no_ignore</name></decl></param>,
                 <param><decl><type><name>svn_wc_status_func2_t</name></type> <name>status_func</name></decl></param>,
                 <param><decl><type><name>void</name> *</type><name>status_baton</name></decl></param>,
                 <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
                 <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dirname</name> <init>= <expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name> <init>= <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name>dirname</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>kind</name> == <name>svn_node_dir</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* Directory entries are incomplete.  We must get their full
         entry from their own THIS_DIR entry.  svn_wc_entry does this
         for us if it can.

         Of course, if there has been a kind-changing replacement (for
         example, there is an entry for a file 'foo', but 'foo' exists
         as a *directory* on disk), we don't want to reach down into
         that subdir to try to flesh out a "complete entry".  */</comment>
      <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>full_entry</name> <init>= <expr><name>entry</name></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>kind</name></name> == <name>kind</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_versioned</name><argument_list>(<argument><expr>&amp;<name>full_entry</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                                       <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <comment type="block">/* Descend only if the subdirectory is a working copy directory
         (and DEPTH permits it, of course)  */</comment>
      <if>if <condition>(<expr><name>full_entry</name> != <name>entry</name>
          &amp;&amp; (<name>depth</name> == <name>svn_depth_unknown</name>
              || <name>depth</name> == <name>svn_depth_immediates</name>
              || <name>depth</name> == <name>svn_depth_infinity</name>)</expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>dir_access</name></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr>&amp;<name>dir_access</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_dir_status</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name>dir_entry</name></expr></argument>, <argument><expr><name>dir_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ignores</name></expr></argument>,
                                 <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>get_all</name></expr></argument>, <argument><expr><name>no_ignore</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                                 <argument><expr><name>status_func</name></expr></argument>, <argument><expr><name>status_baton</name></expr></argument>, <argument><expr><name>cancel_func</name></expr></argument>,
                                 <argument><expr><name>cancel_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else
        <block>{
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>send_status_structure</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>full_entry</name></expr></argument>,
                                        <argument><expr><name>dir_entry</name></expr></argument>, <argument><expr><name>kind</name></expr></argument>, <argument><expr><name>special</name></expr></argument>, <argument><expr><name>get_all</name></expr></argument>,
                                        <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>repos_locks</name></name></expr></argument>,
                                        <argument><expr><name><name>eb</name>-&gt;<name>repos_root</name></name></expr></argument>,
                                        <argument><expr><name>status_func</name></expr></argument>, <argument><expr><name>status_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then>
  <else>else
    <block>{
      <comment type="block">/* File entries are ... just fine! */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>send_status_structure</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>dir_entry</name></expr></argument>,
                                    <argument><expr><name>kind</name></expr></argument>, <argument><expr><name>special</name></expr></argument>, <argument><expr><name>get_all</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                                    <argument><expr><name><name>eb</name>-&gt;<name>repos_locks</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>repos_root</name></name></expr></argument>,
                                    <argument><expr><name>status_func</name></expr></argument>, <argument><expr><name>status_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Send svn_wc_status2_t * structures for the directory ADM_ACCESS and
   for all its entries through STATUS_FUNC/STATUS_BATON, or, if ENTRY
   is non-NULL, only for that directory entry.

   PARENT_ENTRY is the entry for the parent of the directory or NULL
   if that directory is a working copy root.

   If SKIP_THIS_DIR is TRUE (and ENTRY is NULL), the directory's own
   status will not be reported.  However, upon recursing, all subdirs
   *will* be reported, regardless of this parameter's value.

   Other arguments are the same as those passed to
   svn_wc_get_status_editor3().  */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>get_dir_status</name><parameter_list>(<param><decl><type>struct <name>edit_baton</name> *</type><name>eb</name></decl></param>,
               <param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>parent_entry</name></decl></param>,
               <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>entry</name></decl></param>,
               <param><decl><type><name>apr_array_header_t</name> *</type><name>ignore_patterns</name></decl></param>,
               <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
               <param><decl><type><name>svn_boolean_t</name></type> <name>get_all</name></decl></param>,
               <param><decl><type><name>svn_boolean_t</name></type> <name>no_ignore</name></decl></param>,
               <param><decl><type><name>svn_boolean_t</name></type> <name>skip_this_dir</name></decl></param>,
               <param><decl><type><name>svn_wc_status_func2_t</name></type> <name>status_func</name></decl></param>,
               <param><decl><type><name>void</name> *</type><name>status_baton</name></decl></param>,
               <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
               <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>entries</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>dir_entry</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name> <init>= <expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>dirents</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>patterns</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iterpool</name></decl>, *<decl><type ref="prev"/><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* See if someone wants to cancel this operation. */</comment>
  <if>if <condition>(<expr><name>cancel_func</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>cancel_func</name><argument_list>(<argument><expr><name>cancel_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr><name>depth</name> == <name>svn_depth_unknown</name></expr>)</condition><then>
    <expr_stmt><expr><name>depth</name> = <name>svn_depth_infinity</name></expr>;</expr_stmt></then></if>

  <comment type="block">/* Load entries file for the directory into the requested pool. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entries_read</name><argument_list>(<argument><expr>&amp;<name>entries</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Read PATH's dirents. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_get_dirents2</name><argument_list>(<argument><expr>&amp;<name>dirents</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get this directory's entry. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>dir_entry</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If "this dir" has "svn:externals" property set on it, store the
     name and value in traversal_info, along with this directory's depth.
     (Also, we want to track the externals internally so we can report
     status more accurately.) */</comment>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>prop_val</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_prop_get</name><argument_list>(<argument><expr>&amp;<name>prop_val</name></expr></argument>, <argument><expr><name>SVN_PROP_EXTERNALS</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
                              <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>prop_val</name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>ext_items</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

          <if>if <condition>(<expr><name><name>eb</name>-&gt;<name>traversal_info</name></name></expr>)</condition><then>
            <block>{
              <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>dup_pool</name> <init>= <expr><name><name>eb</name>-&gt;<name>traversal_info</name>-&gt;<name>pool</name></name></expr></init></decl>;</decl_stmt>
              <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dup_path</name> <init>= <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>dup_pool</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dup_val</name> <init>= <expr><call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name>dup_pool</name></expr></argument>, <argument><expr><name><name>prop_val</name>-&gt;<name>data</name></name></expr></argument>,
                                                   <argument><expr><name><name>prop_val</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

              <comment type="block">/* First things first -- we put the externals information
                 into the "global" traversal info structure. */</comment>
              <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>traversal_info</name>-&gt;<name>externals_old</name></name></expr></argument>,
                           <argument><expr><name>dup_path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>dup_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>traversal_info</name>-&gt;<name>externals_new</name></name></expr></argument>,
                           <argument><expr><name>dup_path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>dup_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>traversal_info</name>-&gt;<name>depths</name></name></expr></argument>,
                           <argument><expr><name>dup_path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                           <argument><expr><call><name>svn_depth_to_word</name><argument_list>(<argument><expr><name><name>dir_entry</name>-&gt;<name>depth</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

          <comment type="block">/* Now, parse the thing, and copy the parsed results into
             our "global" externals hash. */</comment>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_parse_externals_description3</name><argument_list>(<argument><expr>&amp;<name>ext_items</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
                                                      <argument><expr><name><name>prop_val</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                                                      <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>ext_items</name> &amp;&amp; <name>i</name> &lt; <name><name>ext_items</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
            <block>{
              <decl_stmt><decl><type><name>svn_wc_external_item2_t</name> *</type><name>item</name></decl>;</decl_stmt>

              <expr_stmt><expr><name>item</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>ext_items</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_wc_external_item2_t</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>externals</name></name></expr></argument>, <argument><expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name>path</name></expr></argument>,
                                                        <argument><expr><name><name>item</name>-&gt;<name>target_dir</name></name></expr></argument>,
                                                        <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
                           <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>
    }</block>

  <comment type="block">/* Early out -- our caller only cares about a single ENTRY in this
     directory.  */</comment>
  <if>if <condition>(<expr><name>entry</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry_entry</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_io_dirent_t</name>*</type> <name>dirent_p</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>dirents</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>,
                                               <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>entry_entry</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* If ENTRY is versioned, send its versioned status. */</comment>
      <if>if <condition>(<expr><name>entry_entry</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>handle_dir_entry</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>dir_entry</name></expr></argument>,
                                   <argument><expr><name>entry_entry</name></expr></argument>,
                                   <argument><expr><name>dirent_p</name> ? <name><name>dirent_p</name>-&gt;<name>kind</name></name> : <name>svn_node_none</name></expr></argument>,
                                   <argument><expr><name>dirent_p</name> ? <name><name>dirent_p</name>-&gt;<name>special</name></name> : <name>FALSE</name></expr></argument>,
                                   <argument><expr><name>ignore_patterns</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>get_all</name></expr></argument>,
                                   <argument><expr><name>no_ignore</name></expr></argument>, <argument><expr><name>status_func</name></expr></argument>, <argument><expr><name>status_baton</name></expr></argument>,
                                   <argument><expr><name>cancel_func</name></expr></argument>, <argument><expr><name>cancel_baton</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <comment type="block">/* Otherwise, if it exists, send its unversioned status. */</comment>
      <else>else <if>if <condition>(<expr><name>dirent_p</name></expr>)</condition><then>
        <block>{
          <if>if <condition>(<expr><name>ignore_patterns</name> &amp;&amp; ! <name>patterns</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>collect_ignore_patterns</name><argument_list>(<argument><expr>&amp;<name>patterns</name></expr></argument>, <argument><expr><name>ignore_patterns</name></expr></argument>,
                                            <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>send_unversioned_item</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>dirent_p</name>-&gt;<name>kind</name></name></expr></argument>,
                                        <argument><expr><name><name>dirent_p</name>-&gt;<name>special</name></name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
                                        <argument><expr><name>patterns</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>externals</name></name></expr></argument>, <argument><expr><name>no_ignore</name></expr></argument>,
                                        <argument><expr><name><name>eb</name>-&gt;<name>repos_locks</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>repos_root</name></name></expr></argument>,
                                        <argument><expr><name>status_func</name></expr></argument>, <argument><expr><name>status_baton</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>

      <comment type="block">/* Regardless, we're done here.  Let's go home. */</comment>
      <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
    }</block></then></if>

  <comment type="block">/** If we get here, ENTRY is NULL and we are handling all the
      directory entries (depending on specified depth). */</comment>

  <comment type="block">/* Handle "this-dir" first. */</comment>
  <if>if <condition>(<expr>! <name>skip_this_dir</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>send_status_structure</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>dir_entry</name></expr></argument>,
                                  <argument><expr><name>parent_entry</name></expr></argument>, <argument><expr><name>svn_node_dir</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                                  <argument><expr><name>get_all</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>repos_locks</name></name></expr></argument>,
                                  <argument><expr><name><name>eb</name>-&gt;<name>repos_root</name></name></expr></argument>, <argument><expr><name>status_func</name></expr></argument>, <argument><expr><name>status_baton</name></expr></argument>,
                                  <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <comment type="block">/* If the requested depth is empty, we only need status on this-dir. */</comment>
  <if>if <condition>(<expr><name>depth</name> == <name>svn_depth_empty</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* Make our iteration pool. */</comment>
  <expr_stmt><expr><name>iterpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Add empty status structures for each of the unversioned things.
     This also catches externals; not sure whether that's good or bad,
     but it's what's happening right now. */</comment>
  <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><name>dirents</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_ssize_t</name></type> <name>klen</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_io_dirent_t</name> *</type><name>dirent_p</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>klen</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Skip versioned, non-external things, and skip the
         administrative directory. */</comment>
      <if>if <condition>(<expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>)</argument_list></call>
          || <call><name>svn_wc_is_adm_dir</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <continue>continue;</continue></then></if>

      <expr_stmt><expr><name>dirent_p</name> = <name>val</name></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>depth</name> == <name>svn_depth_files</name> &amp;&amp; <name><name>dirent_p</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name></expr>)</condition><then>
        <continue>continue;</continue></then></if>

      <if>if <condition>(<expr><name>ignore_patterns</name> &amp;&amp; ! <name>patterns</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>collect_ignore_patterns</name><argument_list>(<argument><expr>&amp;<name>patterns</name></expr></argument>, <argument><expr><name>ignore_patterns</name></expr></argument>,
                                        <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>send_unversioned_item</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>dirent_p</name>-&gt;<name>kind</name></name></expr></argument>, <argument><expr><name><name>dirent_p</name>-&gt;<name>special</name></name></expr></argument>,
                                    <argument><expr><name>adm_access</name></expr></argument>,
                                    <argument><expr><name>patterns</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>externals</name></name></expr></argument>, <argument><expr><name>no_ignore</name></expr></argument>,
                                    <argument><expr><name><name>eb</name>-&gt;<name>repos_locks</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>repos_root</name></name></expr></argument>,
                                    <argument><expr><name>status_func</name></expr></argument>, <argument><expr><name>status_baton</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

  <comment type="block">/* Loop over entries hash */</comment>
  <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_io_dirent_t</name> *</type><name>dirent_p</name></decl>;</decl_stmt>

      <comment type="block">/* Get the next entry */</comment>
      <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>dirent_p</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>dirents</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* ### todo: What if the subdir is from another repository? */</comment>

      <comment type="block">/* Skip "this-dir". */</comment>
      <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>SVN_WC_ENTRY_THIS_DIR</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <continue>continue;</continue></then></if>

      <comment type="block">/* Skip directories if user is only interested in files */</comment>
      <if>if <condition>(<expr><name>depth</name> == <name>svn_depth_files</name>
          &amp;&amp; <name>dirent_p</name> &amp;&amp; <name><name>dirent_p</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name></expr>)</condition><then>
        <continue>continue;</continue></then></if>

      <comment type="block">/* Clear the iteration subpool. */</comment>
      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Handle this directory entry (possibly recursing). */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>handle_dir_entry</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>dir_entry</name></expr></argument>, <argument><expr><name>val</name></expr></argument>,
                               <argument><expr><name>dirent_p</name> ? <name><name>dirent_p</name>-&gt;<name>kind</name></name> : <name>svn_node_none</name></expr></argument>,
                               <argument><expr><name>dirent_p</name> ? <name><name>dirent_p</name>-&gt;<name>special</name></name> : <name>FALSE</name></expr></argument>,
                               <argument><expr><name>ignore_patterns</name></expr></argument>,
                               <argument><expr><name>depth</name> == <name>svn_depth_infinity</name> ? <name>depth</name>
                                                           : <name>svn_depth_empty</name></expr></argument>,
                               <argument><expr><name>get_all</name></expr></argument>, <argument><expr><name>no_ignore</name></expr></argument>,
                               <argument><expr><name>status_func</name></expr></argument>, <argument><expr><name>status_baton</name></expr></argument>, <argument><expr><name>cancel_func</name></expr></argument>,
                               <argument><expr><name>cancel_baton</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

  <comment type="block">/* Destroy our subpools. */</comment>
  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<escape char="0xc"/>
<comment type="block">/*** Helpers ***/</comment>

<comment type="block">/* A faux status callback function for stashing STATUS item in an hash
   (which is the BATON), keyed on PATH.  This implements the
   svn_wc_status_func2_t interface. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>hash_stash</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
           <param><decl><type><name>svn_wc_status2_t</name> *</type><name>status</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>stat_hash</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>hash_pool</name> <init>= <expr><call><name>apr_hash_pool_get</name><argument_list>(<argument><expr><name>stat_hash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>! <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>stat_hash</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>stat_hash</name></expr></argument>, <argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>hash_pool</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>,
               <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><call><name>svn_wc_dup_status2</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>hash_pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<comment type="block">/* Look up the key PATH in BATON-&gt;STATII.  IS_DIR_BATON indicates whether
   baton is a struct *dir_baton or struct *file_baton.  If the value doesn't
   yet exist, and the REPOS_TEXT_STATUS indicates that this is an
   addition, create a new status struct using the hash's pool.

   If IS_DIR_BATON is true, THIS_DIR_BATON is a *dir_baton cotaining the out
   of date (ood) information we want to set in BATON.  This is necessary
   because this function tweaks the status of out-of-date directories
   (BATON == THIS_DIR_BATON) and out-of-date directories' parents
   (BATON == THIS_DIR_BATON-&gt;parent_baton).  In the latter case THIS_DIR_BATON
   contains the ood info we want to bubble up to ancestor directories so these
   accurately reflect the fact they have an ood descendant.

   Merge REPOS_TEXT_STATUS and REPOS_PROP_STATUS into the status structure's
   "network" fields.

   Iff IS_DIR_BATON is true, DELETED_REV is used as follows, otherwise it
   is ignored:

       If REPOS_TEXT_STATUS is svn_wc_status_deleted then DELETED_REV is
       optionally the revision path was deleted, in all other cases it must
       be set to SVN_INVALID_REVNUM.  If DELETED_REV is not
       SVN_INVALID_REVNUM and REPOS_TEXT_STATUS is svn_wc_status_deleted,
       then use DELETED_REV to set PATH's ood_last_cmt_rev field in BATON.
       If DELETED_REV is SVN_INVALID_REVNUM and REPOS_TEXT_STATUS is
       svn_wc_status_deleted, set PATH's ood_last_cmt_rev to its parent's
       ood_last_cmt_rev value - see comment below.

   If a new struct was added, set the repos_lock to REPOS_LOCK. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>tweak_statushash</name><argument_list>(<argument><expr><name>void</name> *<name>baton</name></expr></argument>,
                 <argument><expr><name>void</name> *<name>this_dir_baton</name></expr></argument>,
                 <argument><expr><name>svn_boolean_t</name> <name>is_dir_baton</name></expr></argument>,
                 <argument><expr><name>svn_wc_adm_access_t</name> *<name>adm_access</name></expr></argument>,
                 <argument><expr>const <name>char</name> *<name>path</name></expr></argument>,
                 <argument><expr><name>svn_boolean_t</name> <name>is_dir</name></expr></argument>,
                 <argument>enum <expr><name>svn_wc_status_kind</name> <name>repos_text_status</name></expr></argument>,
                 <argument>enum <expr><name>svn_wc_status_kind</name> <name>repos_prop_status</name></expr></argument>,
                 <argument><expr><name>svn_revnum_t</name> <name>deleted_rev</name></expr></argument>,
                 <argument><expr><name>svn_lock_t</name> *<name>repos_lock</name></expr></argument>)</argument_list>
<block>{
  <decl_stmt><decl><type><name>svn_wc_status2_t</name> *</type><name>statstruct</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>statushash</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>is_dir_baton</name></expr>)</condition><then>
    <expr_stmt><expr><name>statushash</name> = ((struct <name>dir_baton</name> *) <name>baton</name>)-&gt;<name>statii</name></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><name>statushash</name> = ((struct <name>file_baton</name> *) <name>baton</name>)-&gt;<name><name>dir_baton</name>-&gt;<name>statii</name></name></expr>;</expr_stmt></else></if>
  <expr_stmt><expr><name>pool</name> = <call><name>apr_hash_pool_get</name><argument_list>(<argument><expr><name>statushash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Is PATH already a hash-key? */</comment>
  <expr_stmt><expr><name>statstruct</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>statushash</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If not, make it so. */</comment>
  <if>if <condition>(<expr>! <name>statstruct</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* If this item isn't being added, then we're most likely
         dealing with a non-recursive (or at least partially
         non-recursive) working copy.  Due to bugs in how the client
         reports the state of non-recursive working copies, the
         repository can send back responses about paths that don't
         even exist locally.  Our best course here is just to ignore
         those responses.  After all, if the client had reported
         correctly in the first, that path would either be mentioned
         as an 'add' or not mentioned at all, depending on how we
         eventually fix the bugs in non-recursivity.  See issue
         #2122 for details. */</comment>
      <if>if <condition>(<expr><name>repos_text_status</name> != <name>svn_wc_status_added</name></expr>)</condition><then>
        <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

      <comment type="block">/* Use the public API to get a statstruct, and put it into the hash. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_status2</name><argument_list>(<argument><expr>&amp;<name>statstruct</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>statstruct</name>-&gt;<name>repos_lock</name></name> = <name>repos_lock</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>statushash</name></expr></argument>, <argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>,
                   <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>statstruct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <comment type="block">/* Merge a repos "delete" + "add" into a single "replace". */</comment>
  <if>if <condition>(<expr>(<name>repos_text_status</name> == <name>svn_wc_status_added</name>)
      &amp;&amp; (<name><name>statstruct</name>-&gt;<name>repos_text_status</name></name> == <name>svn_wc_status_deleted</name>)</expr>)</condition><then>
    <expr_stmt><expr><name>repos_text_status</name> = <name>svn_wc_status_replaced</name></expr>;</expr_stmt></then></if>

  <comment type="block">/* Tweak the structure's repos fields. */</comment>
  <if>if <condition>(<expr><name>repos_text_status</name></expr>)</condition><then>
    <expr_stmt><expr><name><name>statstruct</name>-&gt;<name>repos_text_status</name></name> = <name>repos_text_status</name></expr>;</expr_stmt></then></if>
  <if>if <condition>(<expr><name>repos_prop_status</name></expr>)</condition><then>
    <expr_stmt><expr><name><name>statstruct</name>-&gt;<name>repos_prop_status</name></name> = <name>repos_prop_status</name></expr>;</expr_stmt></then></if>

  <comment type="block">/* Copy out-of-date info. */</comment>
  <if>if <condition>(<expr><name>is_dir_baton</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>b</name> <init>= <expr><name>this_dir_baton</name></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name><name>b</name>-&gt;<name>url</name></name></expr>)</condition><then>
        <block>{
          <if>if <condition>(<expr><name><name>statstruct</name>-&gt;<name>repos_text_status</name></name> == <name>svn_wc_status_deleted</name></expr>)</condition><then>
            <block>{
              <comment type="block">/* When deleting PATH, BATON is for PATH's parent,
                 so we must construct PATH's real statstruct-&gt;url. */</comment>
              <expr_stmt><expr><name><name>statstruct</name>-&gt;<name>url</name></name> =
                <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>url</name></name></expr></argument>,
                                           <argument><expr><call><name>svn_path_basename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
                                           <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
          <else>else
            <expr_stmt><expr><name><name>statstruct</name>-&gt;<name>url</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
        }</block></then></if>

      <comment type="block">/* The last committed date, and author for deleted items
         isn't available. */</comment>
      <if>if <condition>(<expr><name><name>statstruct</name>-&gt;<name>repos_text_status</name></name> == <name>svn_wc_status_deleted</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name><name>statstruct</name>-&gt;<name>ood_kind</name></name> = <name>is_dir</name> ? <name>svn_node_dir</name> : <name>svn_node_file</name></expr>;</expr_stmt>

          <comment type="block">/* Pre 1.5 servers don't provide the revision a path was deleted.
             So we punt and use the last committed revision of the path's
             parent, which has some chance of being correct.  At worse it
             is a higher revision than the path was deleted, but this is
             better than nothing... */</comment>
          <if>if <condition>(<expr><name>deleted_rev</name> == <name>SVN_INVALID_REVNUM</name></expr>)</condition><then>
            <expr_stmt><expr><name><name>statstruct</name>-&gt;<name>ood_last_cmt_rev</name></name> =
              ((struct <name>dir_baton</name> *) <name>baton</name>)-&gt;<name>ood_last_cmt_rev</name></expr>;</expr_stmt></then>
          <else>else
            <expr_stmt><expr><name><name>statstruct</name>-&gt;<name>ood_last_cmt_rev</name></name> = <name>deleted_rev</name></expr>;</expr_stmt></else></if>
        }</block></then>
      <else>else
        <block>{
          <expr_stmt><expr><name><name>statstruct</name>-&gt;<name>ood_kind</name></name> = <name><name>b</name>-&gt;<name>ood_kind</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>statstruct</name>-&gt;<name>ood_last_cmt_rev</name></name> = <name><name>b</name>-&gt;<name>ood_last_cmt_rev</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>statstruct</name>-&gt;<name>ood_last_cmt_date</name></name> = <name><name>b</name>-&gt;<name>ood_last_cmt_date</name></name></expr>;</expr_stmt>
          <if>if <condition>(<expr><name><name>b</name>-&gt;<name>ood_last_cmt_author</name></name></expr>)</condition><then>
            <expr_stmt><expr><name><name>statstruct</name>-&gt;<name>ood_last_cmt_author</name></name> =
              <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>ood_last_cmt_author</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></else></if>

    }</block></then>
  <else>else
    <block>{
      <decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>b</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name><name>b</name>-&gt;<name>url</name></name></expr>)</condition><then>
        <expr_stmt><expr><name><name>statstruct</name>-&gt;<name>url</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
      <expr_stmt><expr><name><name>statstruct</name>-&gt;<name>ood_last_cmt_rev</name></name> = <name><name>b</name>-&gt;<name>ood_last_cmt_rev</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>statstruct</name>-&gt;<name>ood_last_cmt_date</name></name> = <name><name>b</name>-&gt;<name>ood_last_cmt_date</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>statstruct</name>-&gt;<name>ood_kind</name></name> = <name><name>b</name>-&gt;<name>ood_kind</name></name></expr>;</expr_stmt>
      <if>if <condition>(<expr><name><name>b</name>-&gt;<name>ood_last_cmt_author</name></name></expr>)</condition><then>
        <expr_stmt><expr><name><name>statstruct</name>-&gt;<name>ood_last_cmt_author</name></name> =
          <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>ood_last_cmt_author</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></else></if>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></decl></decl_stmt>

<comment type="block">/* Returns the URL for DB, or NULL: */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>find_dir_url</name><parameter_list>(<param><decl><type><specifier>const</specifier> struct <name>dir_baton</name> *</type><name>db</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <comment type="block">/* If we have no name, we're the root, return the anchor URL. */</comment>
  <if>if <condition>(<expr>! <name><name>db</name>-&gt;<name>name</name></name></expr>)</condition><then>
    <return>return <expr><name><name>db</name>-&gt;<name>edit_baton</name>-&gt;<name>anchor_status</name>-&gt;<name>entry</name>-&gt;<name>url</name></name></expr>;</return></then>
  <else>else
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl>;</decl_stmt>
      <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>pb</name> <init>= <expr><name><name>db</name>-&gt;<name>parent_baton</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_wc_status2_t</name> *</type><name>status</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>pb</name>-&gt;<name>statii</name></name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>name</name></name></expr></argument>,
                                              <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <comment type="block">/* Note that status-&gt;entry-&gt;url is NULL in the case of a missing
       * directory, which means we need to recurse up another level to
       * get a useful URL. */</comment>
      <if>if <condition>(<expr><name>status</name> &amp;&amp; <name><name>status</name>-&gt;<name>entry</name></name> &amp;&amp; <name><name>status</name>-&gt;<name>entry</name>-&gt;<name>url</name></name></expr>)</condition><then>
        <return>return <expr><name><name>status</name>-&gt;<name>entry</name>-&gt;<name>url</name></name></expr>;</return></then></if>

      <expr_stmt><expr><name>url</name> = <call><name>find_dir_url</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>url</name></expr>)</condition><then>
        <return>return <expr><call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return></then>
      <else>else
        <return>return <expr><name>NULL</name></expr>;</return></else></if>
    }</block></else></if>
}</block></function>


<escape char="0xc"/>
<comment type="block">/* Create a new dir_baton for subdir PATH. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>make_dir_baton</name><parameter_list>(<param><decl><type><name>void</name> **</type><name>dir_baton</name></decl></param>,
               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
               <param><decl><type>struct <name>edit_baton</name> *</type><name>edit_baton</name></decl></param>,
               <param><decl><type>struct <name>dir_baton</name> *</type><name>parent_baton</name></decl></param>,
               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>d</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>d</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>full_path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_status2_t</name> *</type><name>status_in_parent</name></decl>;</decl_stmt>

  <comment type="block">/* Don't do this.  Just do NOT do this to me. */</comment>
  <if>if <condition>(<expr><name>pb</name> &amp;&amp; (! <name>path</name>)</expr>)</condition><then>
    <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>

  <comment type="block">/* Construct the full path of this directory. */</comment>
  <if>if <condition>(<expr><name>pb</name></expr>)</condition><then>
    <expr_stmt><expr><name>full_path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>anchor</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><name>full_path</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>anchor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

  <comment type="block">/* Finish populating the baton members. */</comment>
  <expr_stmt><expr><name><name>d</name>-&gt;<name>path</name></name> = <name>full_path</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>d</name>-&gt;<name>name</name></name> = <name>path</name> ? (<call><name>svn_path_basename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>) : <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>d</name>-&gt;<name>edit_baton</name></name> = <name>edit_baton</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>d</name>-&gt;<name>parent_baton</name></name> = <name>parent_baton</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>d</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>d</name>-&gt;<name>statii</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>d</name>-&gt;<name>url</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>find_dir_url</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>d</name>-&gt;<name>ood_last_cmt_rev</name></name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>d</name>-&gt;<name>ood_last_cmt_date</name></name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>d</name>-&gt;<name>ood_kind</name></name> = <name>svn_node_dir</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>d</name>-&gt;<name>ood_last_cmt_author</name></name> = <name>NULL</name></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>pb</name></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><name><name>pb</name>-&gt;<name>excluded</name></name></expr>)</condition><then>
        <expr_stmt><expr><name><name>d</name>-&gt;<name>excluded</name></name> = <name>TRUE</name></expr>;</expr_stmt></then>
      <else>else <if>if <condition>(<expr><name><name>pb</name>-&gt;<name>depth</name></name> == <name>svn_depth_immediates</name></expr>)</condition><then>
        <expr_stmt><expr><name><name>d</name>-&gt;<name>depth</name></name> = <name>svn_depth_empty</name></expr>;</expr_stmt></then>
      <else>else <if>if <condition>(<expr><name><name>pb</name>-&gt;<name>depth</name></name> == <name>svn_depth_files</name> || <name><name>pb</name>-&gt;<name>depth</name></name> == <name>svn_depth_empty</name></expr>)</condition><then>
        <expr_stmt><expr><name><name>d</name>-&gt;<name>excluded</name></name> = <name>TRUE</name></expr>;</expr_stmt></then>
      <else>else <if>if <condition>(<expr><name><name>pb</name>-&gt;<name>depth</name></name> == <name>svn_depth_unknown</name></expr>)</condition><then>
        <comment type="block">/* This is only tentative, it can be overridden from d's entry
           later. */</comment>
        <expr_stmt><expr><name><name>d</name>-&gt;<name>depth</name></name> = <name>svn_depth_unknown</name></expr>;</expr_stmt></then>
      <else>else
        <expr_stmt><expr><name><name>d</name>-&gt;<name>depth</name></name> = <name>svn_depth_infinity</name></expr>;</expr_stmt></else></if></else></if></else></if></else></if>
    }</block></then>
  <else>else
    <block>{
      <expr_stmt><expr><name><name>d</name>-&gt;<name>depth</name></name> = <name><name>eb</name>-&gt;<name>default_depth</name></name></expr>;</expr_stmt>
    }</block></else></if>

  <comment type="block">/* Get the status for this path's children.  Of course, we only want
     to do this if the path is versioned as a directory. */</comment>
  <if>if <condition>(<expr><name>pb</name></expr>)</condition><then>
    <expr_stmt><expr><name>status_in_parent</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>pb</name>-&gt;<name>statii</name></name></expr></argument>, <argument><expr><name><name>d</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><name>status_in_parent</name> = <name><name>eb</name>-&gt;<name>anchor_status</name></name></expr>;</expr_stmt></else></if>

  <comment type="block">/* Order is important here.  We can't depend on status_in_parent-&gt;entry
     being non-NULL until after we've checked all the conditions that
     might indicate that the parent is unversioned ("unversioned" for
     our purposes includes being an external or ignored item). */</comment>
  <if>if <condition>(<expr><name>status_in_parent</name>
      &amp;&amp; (<name><name>status_in_parent</name>-&gt;<name>text_status</name></name> != <name>svn_wc_status_unversioned</name>)
      &amp;&amp; (<name><name>status_in_parent</name>-&gt;<name>text_status</name></name> != <name>svn_wc_status_missing</name>)
      &amp;&amp; (<name><name>status_in_parent</name>-&gt;<name>text_status</name></name> != <name>svn_wc_status_obstructed</name>)
      &amp;&amp; (<name><name>status_in_parent</name>-&gt;<name>text_status</name></name> != <name>svn_wc_status_external</name>)
      &amp;&amp; (<name><name>status_in_parent</name>-&gt;<name>text_status</name></name> != <name>svn_wc_status_ignored</name>)
      &amp;&amp; (<name><name>status_in_parent</name>-&gt;<name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name>)
      &amp;&amp; (! <name><name>d</name>-&gt;<name>excluded</name></name>)
      &amp;&amp; (<name><name>d</name>-&gt;<name>depth</name></name> == <name>svn_depth_unknown</name>
          || <name><name>d</name>-&gt;<name>depth</name></name> == <name>svn_depth_infinity</name>
          || <name><name>d</name>-&gt;<name>depth</name></name> == <name>svn_depth_files</name>
          || <name><name>d</name>-&gt;<name>depth</name></name> == <name>svn_depth_immediates</name>)</expr>
          )</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>dir_access</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_wc_status2_t</name> *</type><name>this_dir_status</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>ignores</name> <init>= <expr><name><name>eb</name>-&gt;<name>ignores</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr>&amp;<name>dir_access</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>adm_access</name></name></expr></argument>,
                                  <argument><expr><name><name>d</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_dir_status</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name><name>status_in_parent</name>-&gt;<name>entry</name></name></expr></argument>, <argument><expr><name>dir_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr><name>ignores</name></expr></argument>, <argument><expr><name><name>d</name>-&gt;<name>depth</name></name> == <name>svn_depth_files</name> ?
                             <name>svn_depth_files</name> : <name>svn_depth_immediates</name></expr></argument>,
                             <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>hash_stash</name></expr></argument>, <argument><expr><name><name>d</name>-&gt;<name>statii</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* If we found a depth here, it should govern. */</comment>
      <expr_stmt><expr><name>this_dir_status</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>d</name>-&gt;<name>statii</name></name></expr></argument>, <argument><expr><name><name>d</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>this_dir_status</name> &amp;&amp; <name><name>this_dir_status</name>-&gt;<name>entry</name></name>
          &amp;&amp; (<name><name>d</name>-&gt;<name>depth</name></name> == <name>svn_depth_unknown</name>
              || <name><name>d</name>-&gt;<name>depth</name></name> &gt; <name><name>status_in_parent</name>-&gt;<name>entry</name>-&gt;<name>depth</name></name>)</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name><name>d</name>-&gt;<name>depth</name></name> = <name><name>this_dir_status</name>-&gt;<name>entry</name>-&gt;<name>depth</name></name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

  <expr_stmt><expr>*<name>dir_baton</name> = <name>d</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Make a file baton, using a new subpool of PARENT_DIR_BATON's pool.
   NAME is just one component, not a path. */</comment>
<function><type><specifier>static</specifier> struct <name>file_baton</name> *</type>
<name>make_file_baton</name><parameter_list>(<param><decl><type>struct <name>dir_baton</name> *</type><name>parent_dir_baton</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>pb</name> <init>= <expr><name>parent_dir_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>pb</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>f</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>f</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>full_path</name></decl>;</decl_stmt>

  <comment type="block">/* Construct the full path of this file. */</comment>
  <expr_stmt><expr><name>full_path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>anchor</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Finish populating the baton members. */</comment>
  <expr_stmt><expr><name><name>f</name>-&gt;<name>path</name></name> = <name>full_path</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name>-&gt;<name>name</name></name> = <call><name>svn_path_basename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name>-&gt;<name>dir_baton</name></name> = <name>pb</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name>-&gt;<name>edit_baton</name></name> = <name>eb</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name>-&gt;<name>url</name></name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><call><name>find_dir_url</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
                                      <argument><expr><call><name>svn_path_basename</name><argument_list>(<argument><expr><name>full_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
                                      <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name>-&gt;<name>ood_last_cmt_rev</name></name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name>-&gt;<name>ood_last_cmt_date</name></name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name>-&gt;<name>ood_kind</name></name> = <name>svn_node_file</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>f</name>-&gt;<name>ood_last_cmt_author</name></name> = <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><name>f</name></expr>;</return>
}</block></function>

<comment type="block">/* Return a boolean answer to the question "Is STATUS something that
   should be reported?".  EB is the edit baton. */</comment>
<function><type><specifier>static</specifier> <name>svn_boolean_t</name></type>
<name>is_sendable_status</name><parameter_list>(<param><decl><type><name>svn_wc_status2_t</name> *</type><name>status</name></decl></param>,
                   <param><decl><type>struct <name>edit_baton</name> *</type><name>eb</name></decl></param>)</parameter_list>
<block>{
  <comment type="block">/* If the repository status was touched at all, it's interesting. */</comment>
  <if>if <condition>(<expr><name><name>status</name>-&gt;<name>repos_text_status</name></name> != <name>svn_wc_status_none</name></expr>)</condition><then>
    <return>return <expr><name>TRUE</name></expr>;</return></then></if>
  <if>if <condition>(<expr><name><name>status</name>-&gt;<name>repos_prop_status</name></name> != <name>svn_wc_status_none</name></expr>)</condition><then>
    <return>return <expr><name>TRUE</name></expr>;</return></then></if>

  <comment type="block">/* If there is a lock in the repository, send it. */</comment>
  <if>if <condition>(<expr><name><name>status</name>-&gt;<name>repos_lock</name></name></expr>)</condition><then>
    <return>return <expr><name>TRUE</name></expr>;</return></then></if>

  <comment type="block">/* If the item is ignored, and we don't want ignores, skip it. */</comment>
  <if>if <condition>(<expr>(<name><name>status</name>-&gt;<name>text_status</name></name> == <name>svn_wc_status_ignored</name>) &amp;&amp; (! <name><name>eb</name>-&gt;<name>no_ignore</name></name>)</expr>)</condition><then>
    <return>return <expr><name>FALSE</name></expr>;</return></then></if>

  <comment type="block">/* If we want everything, we obviously want this single-item subset
     of everything. */</comment>
  <if>if <condition>(<expr><name><name>eb</name>-&gt;<name>get_all</name></name></expr>)</condition><then>
    <return>return <expr><name>TRUE</name></expr>;</return></then></if>

  <comment type="block">/* If the item is unversioned, display it. */</comment>
  <if>if <condition>(<expr><name><name>status</name>-&gt;<name>text_status</name></name> == <name>svn_wc_status_unversioned</name></expr>)</condition><then>
    <return>return <expr><name>TRUE</name></expr>;</return></then></if>

  <comment type="block">/* If the text or property states are interesting, send it. */</comment>
  <if>if <condition>(<expr>(<name><name>status</name>-&gt;<name>text_status</name></name> != <name>svn_wc_status_none</name>)
      &amp;&amp; (<name><name>status</name>-&gt;<name>text_status</name></name> != <name>svn_wc_status_normal</name>)</expr>)</condition><then>
    <return>return <expr><name>TRUE</name></expr>;</return></then></if>
  <if>if <condition>(<expr>(<name><name>status</name>-&gt;<name>prop_status</name></name> != <name>svn_wc_status_none</name>)
      &amp;&amp; (<name><name>status</name>-&gt;<name>prop_status</name></name> != <name>svn_wc_status_normal</name>)</expr>)</condition><then>
    <return>return <expr><name>TRUE</name></expr>;</return></then></if>

  <comment type="block">/* If it's locked or switched, send it. */</comment>
  <if>if <condition>(<expr><name><name>status</name>-&gt;<name>locked</name></name></expr>)</condition><then>
    <return>return <expr><name>TRUE</name></expr>;</return></then></if>
  <if>if <condition>(<expr><name><name>status</name>-&gt;<name>switched</name></name></expr>)</condition><then>
    <return>return <expr><name>TRUE</name></expr>;</return></then></if>

  <comment type="block">/* If there is a lock token, send it. */</comment>
  <if>if <condition>(<expr><name><name>status</name>-&gt;<name>entry</name></name> &amp;&amp; <name><name>status</name>-&gt;<name>entry</name>-&gt;<name>lock_token</name></name></expr>)</condition><then>
    <return>return <expr><name>TRUE</name></expr>;</return></then></if>

  <comment type="block">/* If the entry is associated with a changelist, send it. */</comment>
  <if>if <condition>(<expr><name><name>status</name>-&gt;<name>entry</name></name> &amp;&amp; <name><name>status</name>-&gt;<name>entry</name>-&gt;<name>changelist</name></name></expr>)</condition><then>
    <return>return <expr><name>TRUE</name></expr>;</return></then></if>

  <comment type="block">/* Otherwise, don't send it. */</comment>
  <return>return <expr><name>FALSE</name></expr>;</return>
}</block></function>


<comment type="block">/* Baton for mark_status. */</comment>
<struct>struct <name>status_baton</name>
<block>{
  <decl_stmt><decl><type><name>svn_wc_status_func2_t</name></type> <name>real_status_func</name></decl>;</decl_stmt>   <comment type="block">/* real status function */</comment>
  <decl_stmt><decl><type><name>void</name> *</type><name>real_status_baton</name></decl>;</decl_stmt>                 <comment type="block">/* real status baton */</comment>
}</block>;</struct>

<comment type="block">/* A status callback function which wraps the *real* status
   function/baton.   It simply sets the "repos_text_status" field of the
   STATUS to svn_wc_status_deleted and passes it off to the real
   status func/baton. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>mark_deleted</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
             <param><decl><type><name>svn_wc_status2_t</name> *</type><name>status</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>status_baton</name> *</type><name>sb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>status</name>-&gt;<name>repos_text_status</name></name> = <name>svn_wc_status_deleted</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>sb</name>-&gt;<name>real_status_func</name></name><argument_list>(<argument><expr><name><name>sb</name>-&gt;<name>real_status_baton</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<comment type="block">/* Handle a directory's STATII hash.  EB is the edit baton.  DIR_PATH
   and DIR_ENTRY are the on-disk path and entry, respectively, for the
   directory itself.  Descend into subdirectories according to DEPTH.
   Also, if DIR_WAS_DELETED is set, each status that is reported
   through this function will have its repos_text_status field showing
   a deletion.  Use POOL for all allocations. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>handle_statii</name><parameter_list>(<param><decl><type>struct <name>edit_baton</name> *</type><name>eb</name></decl></param>,
              <param><decl><type><name>svn_wc_entry_t</name> *</type><name>dir_entry</name></decl></param>,
              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dir_path</name></decl></param>,
              <param><decl><type><name>apr_hash_t</name> *</type><name>statii</name></decl></param>,
              <param><decl><type><name>svn_boolean_t</name></type> <name>dir_was_deleted</name></decl></param>,
              <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>ignores</name> <init>= <expr><name><name>eb</name>-&gt;<name>ignores</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_status_func2_t</name></type> <name>status_func</name> <init>= <expr><name><name>eb</name>-&gt;<name>status_func</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>status_baton</name> <init>= <expr><name><name>eb</name>-&gt;<name>status_baton</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>status_baton</name></type> <name>sb</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>dir_was_deleted</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name><name>sb</name>.<name>real_status_func</name></name> = <name><name>eb</name>-&gt;<name>status_func</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>sb</name>.<name>real_status_baton</name></name> = <name><name>eb</name>-&gt;<name>status_baton</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>status_func</name> = <name>mark_deleted</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>status_baton</name> = &amp;<name>sb</name></expr>;</expr_stmt>
    }</block></then></if>

  <comment type="block">/* Loop over all the statuses still in our hash, handling each one. */</comment>
  <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>statii</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_wc_status2_t</name> *</type><name>status</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>status</name> = <name>val</name></expr>;</expr_stmt>

      <comment type="block">/* Clear the subpool. */</comment>
      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Now, handle the status.  We don't recurse for svn_depth_immediates
         because we already have the subdirectories' statii. */</comment>
      <if>if <condition>(<expr><name><name>status</name>-&gt;<name>text_status</name></name> != <name>svn_wc_status_obstructed</name>
          &amp;&amp; <name><name>status</name>-&gt;<name>text_status</name></name> != <name>svn_wc_status_missing</name>
          &amp;&amp; <name><name>status</name>-&gt;<name>entry</name></name> &amp;&amp; <name><name>status</name>-&gt;<name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name>
          &amp;&amp; (<name>depth</name> == <name>svn_depth_unknown</name>
              || <name>depth</name> == <name>svn_depth_infinity</name>)</expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>dir_access</name></decl>;</decl_stmt>

          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr>&amp;<name>dir_access</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>adm_access</name></name></expr></argument>,
                                      <argument><expr><name>key</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_dir_status</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name>dir_entry</name></expr></argument>, <argument><expr><name>dir_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                 <argument><expr><name>ignores</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>get_all</name></name></expr></argument>,
                                 <argument><expr><name><name>eb</name>-&gt;<name>no_ignore</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>status_func</name></expr></argument>,
                                 <argument><expr><name>status_baton</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>cancel_func</name></name></expr></argument>,
                                 <argument><expr><name><name>eb</name>-&gt;<name>cancel_baton</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      <if>if <condition>(<expr><name>dir_was_deleted</name></expr>)</condition><then>
        <expr_stmt><expr><name><name>status</name>-&gt;<name>repos_text_status</name></name> = <name>svn_wc_status_deleted</name></expr>;</expr_stmt></then></if>
      <if>if <condition>(<expr><call><name>is_sendable_status</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><call>(<name><name>eb</name>-&gt;<name>status_func</name></name>)<argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>status_baton</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></for>

  <comment type="block">/* Destroy the subpool. */</comment>
  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/*----------------------------------------------------------------------*/</comment>
<escape char="0xc"/>
<comment type="block">/*** The callbacks we'll plug into an svn_delta_editor_t structure. ***/</comment>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>set_target_revision</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
                    <param><decl><type><name>svn_revnum_t</name></type> <name>target_revision</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr>*(<name><name>eb</name>-&gt;<name>target_revision</name></name>) = <name>target_revision</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>open_root</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
          <param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
          <param><decl><type><name>void</name> **</type><name>dir_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>root_opened</name></name> = <name>TRUE</name></expr>;</expr_stmt>
  <return>return <expr><call><name>make_dir_baton</name><argument_list>(<argument><expr><name>dir_baton</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>eb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>delete_entry</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
             <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
             <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>db</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>db</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>entries</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name> <init>= <expr><call><name>svn_path_basename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>full_path</name> <init>= <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>anchor</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dir_path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>hash_key</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

  <comment type="block">/* Note:  when something is deleted, it's okay to tweak the
     statushash immediately.  No need to wait until close_file or
     close_dir, because there's no risk of having to honor the 'added'
     flag.  We already know this item exists in the working copy. */</comment>

  <comment type="block">/* Read the parent's entries file.  If the deleted thing is not
     versioned in this working copy, it was probably deleted via this
     working copy.  No need to report such a thing. */</comment>
  <comment type="block">/* ### use svn_wc_entry() instead? */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_versioned</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name>full_path</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>adm_access</name></name></expr></argument>,
                                  <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>dir_path</name> = <name>full_path</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>hash_key</name> = <name>SVN_WC_ENTRY_THIS_DIR</name></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <expr_stmt><expr><name>dir_path</name> = <call><name>svn_path_dirname</name><argument_list>(<argument><expr><name>full_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>hash_key</name> = <name>name</name></expr>;</expr_stmt>
    }</block></else></if>

  <expr_stmt><expr><name>err</name> = <call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>adm_access</name></name></expr></argument>, <argument><expr><name>dir_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_check_path</name><argument_list>(<argument><expr><name>full_path</name></expr></argument>, <argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr>(<name>kind</name> == <name>svn_node_none</name>) &amp;&amp; (<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_WC_NOT_LOCKED</name>)</expr>)</condition><then>
        <block>{
          <comment type="block">/* We're probably dealing with a non-recursive, (or
             partially non-recursive, working copy.  Due to deep bugs
             in how the client reports the state of non-recursive
             working copies, the repository can report that a path is
             deleted in an area where we not only don't have the path
             in question, we don't even have its parent(s).  A
             complete fix would require a serious revamp of how
             non-recursive working copies store and report themselves,
             plus some thinking about the UI behavior we want when
             someone runs 'svn st -u' in a [partially] non-recursive
             working copy.

             For now, we just do our best to detect the condition and
             not report an error if it holds.  See issue #2122. */</comment>
          <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
        }</block></then>
      <else>else
        <return>return <expr><name>err</name></expr>;</return></else></if>
    }</block></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entries_read</name><argument_list>(<argument><expr>&amp;<name>entries</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>hash_key</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>tweak_statushash</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>adm_access</name></name></expr></argument>,
                             <argument><expr><name>full_path</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name></expr></argument>,
                             <argument><expr><name>svn_wc_status_deleted</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <comment type="block">/* Mark the parent dir -- it lost an entry (unless that parent dir
     is the root node and we're not supposed to report on the root
     node).  */</comment>
  <if>if <condition>(<expr><name><name>db</name>-&gt;<name>parent_baton</name></name> &amp;&amp; (! *<name><name>eb</name>-&gt;<name>target</name></name>)</expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>tweak_statushash</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>parent_baton</name></name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>adm_access</name></name></expr></argument>,
                             <argument><expr><name><name>db</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name></expr></argument>,
                             <argument><expr><name>svn_wc_status_modified</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
                             <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>add_directory</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
              <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl></param>,
              <param><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_revision</name></decl></param>,
              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
              <param><decl><type><name>void</name> **</type><name>child_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>pb</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>new_db</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>make_dir_baton</name><argument_list>(<argument><expr><name>child_baton</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>eb</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Make this dir as added. */</comment>
  <expr_stmt><expr><name>new_db</name> = *<name>child_baton</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>new_db</name>-&gt;<name>added</name></name> = <name>TRUE</name></expr>;</expr_stmt>

  <comment type="block">/* Mark the parent as changed;  it gained an entry. */</comment>
  <expr_stmt><expr><name><name>pb</name>-&gt;<name>text_changed</name></name> = <name>TRUE</name></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>open_directory</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
               <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
               <param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
               <param><decl><type><name>void</name> **</type><name>child_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>make_dir_baton</name><argument_list>(<argument><expr><name>child_baton</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>pb</name>-&gt;<name>edit_baton</name></name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>change_dir_prop</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>dir_baton</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>db</name> <init>= <expr><name>dir_baton</name></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>svn_wc_is_normal_prop</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <expr_stmt><expr><name><name>db</name>-&gt;<name>prop_changed</name></name> = <name>TRUE</name></expr>;</expr_stmt></then></if>

  <comment type="block">/* Note any changes to the repository. */</comment>
  <if>if <condition>(<expr><name>value</name> != <name>NULL</name></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_PROP_ENTRY_COMMITTED_REV</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <expr_stmt><expr><name><name>db</name>-&gt;<name>ood_last_cmt_rev</name></name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name><name>value</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
      <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_PROP_ENTRY_LAST_AUTHOR</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <expr_stmt><expr><name><name>db</name>-&gt;<name>ood_last_cmt_author</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>value</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
      <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_PROP_ENTRY_COMMITTED_DATE</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>apr_time_t</name></type> <name>tm</name></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_time_from_cstring</name><argument_list>(<argument><expr>&amp;<name>tm</name></expr></argument>, <argument><expr><name><name>value</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>db</name>-&gt;<name>ood_last_cmt_date</name></name> = <name>tm</name></expr>;</expr_stmt>
        }</block></then></if></else></if></else></if>
    }</block></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>



<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>close_directory</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>dir_baton</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>db</name> <init>= <expr><name>dir_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>pb</name> <init>= <expr><name><name>db</name>-&gt;<name>parent_baton</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>db</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_status2_t</name> *</type><name>dir_status</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* If nothing has changed and directory has no out of
     date descendants, return. */</comment>
  <if>if <condition>(<expr><name><name>db</name>-&gt;<name>added</name></name> || <name><name>db</name>-&gt;<name>prop_changed</name></name> || <name><name>db</name>-&gt;<name>text_changed</name></name>
      || <name><name>db</name>-&gt;<name>ood_last_cmt_rev</name></name> != <name>SVN_INVALID_REVNUM</name></expr>)</condition><then>
    <block>{
      <enum>enum <name>svn_wc_status_kind</name> <name>repos_text_status</name>;</enum>
      <enum>enum <name>svn_wc_status_kind</name> <name>repos_prop_status</name>;</enum>

      <comment type="block">/* If this is a new directory, add it to the statushash. */</comment>
      <if>if <condition>(<expr><name><name>db</name>-&gt;<name>added</name></name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>repos_text_status</name> = <name>svn_wc_status_added</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>repos_prop_status</name> = <name><name>db</name>-&gt;<name>prop_changed</name></name> ? <name>svn_wc_status_added</name>
                              : <name>svn_wc_status_none</name></expr>;</expr_stmt>
        }</block></then>
      <else>else
        <block>{
          <expr_stmt><expr><name>repos_text_status</name> = <name><name>db</name>-&gt;<name>text_changed</name></name> ? <name>svn_wc_status_modified</name>
                              : <name>svn_wc_status_none</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>repos_prop_status</name> = <name><name>db</name>-&gt;<name>prop_changed</name></name> ? <name>svn_wc_status_modified</name>
                              : <name>svn_wc_status_none</name></expr>;</expr_stmt>
        }</block></else></if>

      <comment type="block">/* Maybe add this directory to its parent's status hash.  Note
         that tweak_statushash won't do anything if repos_text_status
         is not svn_wc_status_added. */</comment>
      <if>if <condition>(<expr><name>pb</name></expr>)</condition><then>
        <block>{
          <comment type="block">/* ### When we add directory locking, we need to find a
             ### directory lock here. */</comment>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>tweak_statushash</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
                                   <argument><expr><name><name>eb</name>-&gt;<name>adm_access</name></name></expr></argument>,
                                   <argument><expr><name><name>db</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
                                   <argument><expr><name>repos_text_status</name></expr></argument>,
                                   <argument><expr><name>repos_prop_status</name></expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
                                   <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else
        <block>{
          <comment type="block">/* We're editing the root dir of the WC.  As its repos
             status info isn't otherwise set, set it directly to
             trigger invocation of the status callback below. */</comment>
          <expr_stmt><expr><name><name>eb</name>-&gt;<name>anchor_status</name>-&gt;<name>repos_prop_status</name></name> = <name>repos_prop_status</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>eb</name>-&gt;<name>anchor_status</name>-&gt;<name>repos_text_status</name></name> = <name>repos_text_status</name></expr>;</expr_stmt>

          <comment type="block">/* If the root dir is out of date set the ood info directly too. */</comment>
          <if>if <condition>(<expr><name><name>db</name>-&gt;<name>ood_last_cmt_rev</name></name> != <name><name>eb</name>-&gt;<name>anchor_status</name>-&gt;<name>entry</name>-&gt;<name>revision</name></name></expr>)</condition><then>
            <block>{
              <expr_stmt><expr><name><name>eb</name>-&gt;<name>anchor_status</name>-&gt;<name>ood_last_cmt_rev</name></name> = <name><name>db</name>-&gt;<name>ood_last_cmt_rev</name></name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>eb</name>-&gt;<name>anchor_status</name>-&gt;<name>ood_last_cmt_date</name></name> = <name><name>db</name>-&gt;<name>ood_last_cmt_date</name></name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>eb</name>-&gt;<name>anchor_status</name>-&gt;<name>ood_kind</name></name> = <name><name>db</name>-&gt;<name>ood_kind</name></name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>eb</name>-&gt;<name>anchor_status</name>-&gt;<name>ood_last_cmt_author</name></name> =
                <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>ood_last_cmt_author</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></else></if>
    }</block></then></if>

  <comment type="block">/* Handle this directory's statuses, and then note in the parent
     that this has been done. */</comment>
  <if>if <condition>(<expr><name>pb</name> &amp;&amp; ! <name><name>db</name>-&gt;<name>excluded</name></name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>was_deleted</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

      <comment type="block">/* See if the directory was deleted or replaced. */</comment>
      <expr_stmt><expr><name>dir_status</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>pb</name>-&gt;<name>statii</name></name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>dir_status</name> &amp;&amp;
          ((<name><name>dir_status</name>-&gt;<name>repos_text_status</name></name> == <name>svn_wc_status_deleted</name>)
           || (<name><name>dir_status</name>-&gt;<name>repos_text_status</name></name> == <name>svn_wc_status_replaced</name>))</expr>)</condition><then>
        <expr_stmt><expr><name>was_deleted</name> = <name>TRUE</name></expr>;</expr_stmt></then></if>

      <comment type="block">/* Now do the status reporting. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>handle_statii</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name>dir_status</name> ? <name><name>dir_status</name>-&gt;<name>entry</name></name> : <name>NULL</name></expr></argument>,
                            <argument><expr><name><name>db</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>statii</name></name></expr></argument>, <argument><expr><name>was_deleted</name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>depth</name></name></expr></argument>,
                            <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>dir_status</name> &amp;&amp; <call><name>is_sendable_status</name><argument_list>(<argument><expr><name>dir_status</name></expr></argument>, <argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><call>(<name><name>eb</name>-&gt;<name>status_func</name></name>)<argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>status_baton</name></name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>dir_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
      <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>pb</name>-&gt;<name>statii</name></name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr>! <name>pb</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* If this is the top-most directory, and the operation had a
         target, we should only report the target. */</comment>
      <if>if <condition>(<expr>*<name><name>eb</name>-&gt;<name>target</name></name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>svn_wc_status2_t</name> *</type><name>tgt_status</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name> <init>= <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>anchor</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>target</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>dir_status</name> = <name><name>eb</name>-&gt;<name>anchor_status</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name>tgt_status</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>statii</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>tgt_status</name></expr>)</condition><then>
            <block>{
              <if>if <condition>(<expr><name><name>tgt_status</name>-&gt;<name>entry</name></name>
                  &amp;&amp; <name><name>tgt_status</name>-&gt;<name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name></expr>)</condition><then>
                <block>{
                  <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>dir_access</name></decl>;</decl_stmt>
                  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr>&amp;<name>dir_access</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>adm_access</name></name></expr></argument>,
                                              <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_dir_status</name>
                          <argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name><name>tgt_status</name>-&gt;<name>entry</name></name></expr></argument>, <argument><expr><name>dir_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                           <argument><expr><name><name>eb</name>-&gt;<name>ignores</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>default_depth</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>get_all</name></name></expr></argument>,
                           <argument><expr><name><name>eb</name>-&gt;<name>no_ignore</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
                           <argument><expr><name><name>eb</name>-&gt;<name>status_func</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>status_baton</name></name></expr></argument>,
                           <argument><expr><name><name>eb</name>-&gt;<name>cancel_func</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>cancel_baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
              <if>if <condition>(<expr><call><name>is_sendable_status</name><argument_list>(<argument><expr><name>tgt_status</name></expr></argument>, <argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><call>(<name><name>eb</name>-&gt;<name>status_func</name></name>)<argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>status_baton</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>tgt_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></then></if>
        }</block></then>
      <else>else
        <block>{
          <comment type="block">/* Otherwise, we report on all our children and ourself.
             Note that our directory couldn't have been deleted,
             because it is the root of the edit drive. */</comment>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>handle_statii</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>anchor_status</name>-&gt;<name>entry</name></name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>path</name></name></expr></argument>,
                                <argument><expr><name><name>db</name>-&gt;<name>statii</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>default_depth</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><call><name>is_sendable_status</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>anchor_status</name></name></expr></argument>, <argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call>(<name><name>eb</name>-&gt;<name>status_func</name></name>)<argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>status_baton</name></name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>anchor_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
          <expr_stmt><expr><name><name>eb</name>-&gt;<name>anchor_status</name></name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then></if></else></if>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>



<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>add_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
         <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl></param>,
         <param><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_revision</name></decl></param>,
         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
         <param><decl><type><name>void</name> **</type><name>file_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>new_fb</name> <init>= <expr><call><name>make_file_baton</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Mark parent dir as changed */</comment>
  <expr_stmt><expr><name><name>pb</name>-&gt;<name>text_changed</name></name> = <name>TRUE</name></expr>;</expr_stmt>

  <comment type="block">/* Make this file as added. */</comment>
  <expr_stmt><expr><name><name>new_fb</name>-&gt;<name>added</name></name> = <name>TRUE</name></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>file_baton</name> = <name>new_fb</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>open_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
          <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
          <param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
          <param><decl><type><name>void</name> **</type><name>file_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>new_fb</name> <init>= <expr><call><name>make_file_baton</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>file_baton</name> = <name>new_fb</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>apply_textdelta</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_checksum</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                <param><decl><type><name>svn_txdelta_window_handler_t</name> *</type><name>handler</name></decl></param>,
                <param><decl><type><name>void</name> **</type><name>handler_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>fb</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Mark file as having textual mods. */</comment>
  <expr_stmt><expr><name><name>fb</name>-&gt;<name>text_changed</name></name> = <name>TRUE</name></expr>;</expr_stmt>

  <comment type="block">/* Send back a NULL window handler -- we don't need the actual diffs. */</comment>
  <expr_stmt><expr>*<name>handler_baton</name> = <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>handler</name> = <name>svn_delta_noop_window_handler</name></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>change_file_prop</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>fb</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><call><name>svn_wc_is_normal_prop</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <expr_stmt><expr><name><name>fb</name>-&gt;<name>prop_changed</name></name> = <name>TRUE</name></expr>;</expr_stmt></then></if>

  <comment type="block">/* Note any changes to the repository. */</comment>
  <if>if <condition>(<expr><name>value</name> != <name>NULL</name></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_PROP_ENTRY_COMMITTED_REV</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <expr_stmt><expr><name><name>fb</name>-&gt;<name>ood_last_cmt_rev</name></name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name><name>value</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
      <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_PROP_ENTRY_LAST_AUTHOR</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <expr_stmt><expr><name><name>fb</name>-&gt;<name>ood_last_cmt_author</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>dir_baton</name>-&gt;<name>pool</name></name></expr></argument>,
                                              <argument><expr><name><name>value</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
      <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_PROP_ENTRY_COMMITTED_DATE</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>apr_time_t</name></type> <name>tm</name></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_time_from_cstring</name><argument_list>(<argument><expr>&amp;<name>tm</name></expr></argument>, <argument><expr><name><name>value</name>-&gt;<name>data</name></name></expr></argument>,
                                        <argument><expr><name><name>fb</name>-&gt;<name>dir_baton</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>fb</name>-&gt;<name>ood_last_cmt_date</name></name> = <name>tm</name></expr>;</expr_stmt>
        }</block></then></if></else></if></else></if>
    }</block></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>close_file</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>text_checksum</name></decl></param>,  <comment type="block">/* ignored, as we receive no data */</comment>
           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>fb</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>
  <enum>enum <name>svn_wc_status_kind</name> <name>repos_text_status</name>;</enum>
  <enum>enum <name>svn_wc_status_kind</name> <name>repos_prop_status</name>;</enum>
  <decl_stmt><decl><type><name>svn_lock_t</name> *</type><name>repos_lock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* If nothing has changed, return. */</comment>
  <if>if <condition>(<expr>! (<name><name>fb</name>-&gt;<name>added</name></name> || <name><name>fb</name>-&gt;<name>prop_changed</name></name> || <name><name>fb</name>-&gt;<name>text_changed</name></name>)</expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* If this is a new file, add it to the statushash. */</comment>
  <if>if <condition>(<expr><name><name>fb</name>-&gt;<name>added</name></name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>repos_text_status</name> = <name>svn_wc_status_added</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>repos_prop_status</name> = <name><name>fb</name>-&gt;<name>prop_changed</name></name> ? <name>svn_wc_status_added</name> : 0</expr>;</expr_stmt>

      <if>if <condition>(<expr><name><name>fb</name>-&gt;<name>edit_baton</name>-&gt;<name>repos_locks</name></name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>url</name> = <call><name>find_dir_url</name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>dir_baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>url</name></expr>)</condition><then>
            <block>{
              <expr_stmt><expr><name>url</name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>repos_lock</name> = <call><name>apr_hash_get</name>
                <argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>edit_baton</name>-&gt;<name>repos_locks</name></name></expr></argument>,
                 <argument><expr><call><name>svn_path_uri_decode</name><argument_list>(<argument><expr><name>url</name> +
                                     <call><name>strlen</name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>edit_baton</name>-&gt;<name>repos_root</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                     <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></then>
  <else>else
    <block>{
      <expr_stmt><expr><name>repos_text_status</name> = <name><name>fb</name>-&gt;<name>text_changed</name></name> ? <name>svn_wc_status_modified</name> : 0</expr>;</expr_stmt>
      <expr_stmt><expr><name>repos_prop_status</name> = <name><name>fb</name>-&gt;<name>prop_changed</name></name> ? <name>svn_wc_status_modified</name> : 0</expr>;</expr_stmt>
    }</block></else></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>tweak_statushash</name><argument_list>(<argument><expr><name>fb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                           <argument><expr><name><name>fb</name>-&gt;<name>edit_baton</name>-&gt;<name>adm_access</name></name></expr></argument>,
                           <argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                           <argument><expr><name>repos_text_status</name></expr></argument>,
                           <argument><expr><name>repos_prop_status</name></expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
                           <argument><expr><name>repos_lock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>close_edit</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>ignores</name> <init>= <expr><name><name>eb</name>-&gt;<name>ignores</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* If we get here and the root was not opened as part of the edit,
     we need to transmit statuses for everything.  Otherwise, we
     should be done. */</comment>
  <if>if <condition>(<expr><name><name>eb</name>-&gt;<name>root_opened</name></name></expr>)</condition><then>
    <goto>goto <name>cleanup</name>;</goto></then></if>

  <comment type="block">/* If we have a target, that's the thing we're sending, otherwise
     we're sending the anchor. */</comment>

  <if>if <condition>(<expr>*<name><name>eb</name>-&gt;<name>target</name></name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>full_path</name> <init>= <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>anchor</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>target</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name>err</name> = <call><name>svn_io_check_path</name><argument_list>(<argument><expr><name>full_path</name></expr></argument>, <argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>err</name></expr>)</condition><then> <goto>goto <name>cleanup</name>;</goto></then></if>

      <if>if <condition>(<expr><name>kind</name> == <name>svn_node_dir</name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>tgt_access</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>tgt_entry</name></decl>;</decl_stmt>

          <expr_stmt><expr><name>err</name> = <call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>tgt_entry</name></expr></argument>, <argument><expr><name>full_path</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>adm_access</name></name></expr></argument>,
                             <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>err</name></expr>)</condition><then> <goto>goto <name>cleanup</name>;</goto></then></if>

          <if>if <condition>(<expr>! <name>tgt_entry</name></expr>)</condition><then>
            <block>{
              <expr_stmt><expr><name>err</name> = <call><name>get_dir_status</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>adm_access</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>target</name></name></expr></argument>,
                                   <argument><expr><name>ignores</name></expr></argument>, <argument><expr><name>svn_depth_empty</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>get_all</name></name></expr></argument>,
                                   <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
                                   <argument><expr><name><name>eb</name>-&gt;<name>status_func</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>status_baton</name></name></expr></argument>,
                                   <argument><expr><name><name>eb</name>-&gt;<name>cancel_func</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>cancel_baton</name></name></expr></argument>,
                                   <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <if>if <condition>(<expr><name>err</name></expr>)</condition><then> <goto>goto <name>cleanup</name>;</goto></then></if>
            }</block></then>
          <else>else
            <block>{
              <expr_stmt><expr><name>err</name> = <call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr>&amp;<name>tgt_access</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>adm_access</name></name></expr></argument>,
                                        <argument><expr><name>full_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <if>if <condition>(<expr><name>err</name></expr>)</condition><then> <goto>goto <name>cleanup</name>;</goto></then></if>

              <expr_stmt><expr><name>err</name> = <call><name>get_dir_status</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tgt_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ignores</name></expr></argument>,
                                   <argument><expr><name><name>eb</name>-&gt;<name>default_depth</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>get_all</name></name></expr></argument>,
                                   <argument><expr><name><name>eb</name>-&gt;<name>no_ignore</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                                   <argument><expr><name><name>eb</name>-&gt;<name>status_func</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>status_baton</name></name></expr></argument>,
                                   <argument><expr><name><name>eb</name>-&gt;<name>cancel_func</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>cancel_baton</name></name></expr></argument>,
                                   <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <if>if <condition>(<expr><name>err</name></expr>)</condition><then> <goto>goto <name>cleanup</name>;</goto></then></if>
            }</block></else></if>
        }</block></then>
      <else>else
        <block>{
          <expr_stmt><expr><name>err</name> = <call><name>get_dir_status</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>adm_access</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>target</name></name></expr></argument>,
                               <argument><expr><name>ignores</name></expr></argument>, <argument><expr><name>svn_depth_empty</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>get_all</name></name></expr></argument>,
                               <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>status_func</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>status_baton</name></name></expr></argument>,
                               <argument><expr><name><name>eb</name>-&gt;<name>cancel_func</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>cancel_baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>err</name></expr>)</condition><then> <goto>goto <name>cleanup</name>;</goto></then></if>
        }</block></else></if>
    }</block></then>
  <else>else
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>get_dir_status</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>adm_access</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ignores</name></expr></argument>,
                           <argument><expr><name><name>eb</name>-&gt;<name>default_depth</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>get_all</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>no_ignore</name></name></expr></argument>,
                           <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>status_func</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>status_baton</name></name></expr></argument>,
                           <argument><expr><name><name>eb</name>-&gt;<name>cancel_func</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>cancel_baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>err</name></expr>)</condition><then> <goto>goto <name>cleanup</name>;</goto></then></if>
    }</block></else></if>

 <label><name>cleanup</name>:</label>
  <comment type="block">/* Let's make sure that we didn't harvest any traversal info for the
     anchor if we had a target. */</comment>
  <if>if <condition>(<expr><name><name>eb</name>-&gt;<name>traversal_info</name></name> &amp;&amp; *<name><name>eb</name>-&gt;<name>target</name></name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>traversal_info</name>-&gt;<name>externals_old</name></name></expr></argument>,
                   <argument><expr><name><name>eb</name>-&gt;<name>anchor</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>traversal_info</name>-&gt;<name>externals_new</name></name></expr></argument>,
                   <argument><expr><name><name>eb</name>-&gt;<name>anchor</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>traversal_info</name>-&gt;<name>depths</name></name></expr></argument>,
                   <argument><expr><name><name>eb</name>-&gt;<name>anchor</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <return>return <expr><name>err</name></expr>;</return>
}</block></function>


<escape char="0xc"/>
<comment type="block">/*** Public API ***/</comment>

<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_get_status_editor3</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
                          <param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
                          <param><decl><type><name>void</name> **</type><name>set_locks_baton</name></decl></param>,
                          <param><decl><type><name>svn_revnum_t</name> *</type><name>edit_revision</name></decl></param>,
                          <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>anchor</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
                          <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                          <param><decl><type><name>svn_boolean_t</name></type> <name>get_all</name></decl></param>,
                          <param><decl><type><name>svn_boolean_t</name></type> <name>no_ignore</name></decl></param>,
                          <param><decl><type><name>apr_array_header_t</name> *</type><name>ignore_patterns</name></decl></param>,
                          <param><decl><type><name>svn_wc_status_func2_t</name></type> <name>status_func</name></decl></param>,
                          <param><decl><type><name>void</name> *</type><name>status_baton</name></decl></param>,
                          <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
                          <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
                          <param><decl><type><name>svn_wc_traversal_info_t</name> *</type><name>traversal_info</name></decl></param>,
                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_delta_editor_t</name> *</type><name>tree_editor</name> <init>= <expr><call><name>svn_delta_default_editor</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Construct an edit baton. */</comment>
  <expr_stmt><expr><name>eb</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>eb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>default_depth</name></name>     = <name>depth</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>target_revision</name></name>   = <name>edit_revision</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>adm_access</name></name>        = <name>anchor</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>get_all</name></name>           = <name>get_all</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>no_ignore</name></name>         = <name>no_ignore</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>status_func</name></name>       = <name>status_func</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>status_baton</name></name>      = <name>status_baton</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>cancel_func</name></name>       = <name>cancel_func</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>cancel_baton</name></name>      = <name>cancel_baton</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>traversal_info</name></name>    = <name>traversal_info</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>externals</name></name>         = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>anchor</name></name>            = <call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>target</name></name>            = <name>target</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>root_opened</name></name>       = <name>FALSE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>repos_locks</name></name>       = <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>repos_root</name></name>        = <name>NULL</name></expr>;</expr_stmt>

  <comment type="block">/* Use the caller-provided ignore patterns if provided; the build-time
     configured defaults otherwise. */</comment>
  <if>if <condition>(<expr><name>ignore_patterns</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name><name>eb</name>-&gt;<name>ignores</name></name> = <name>ignore_patterns</name></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <expr_stmt><expr><name><name>eb</name>-&gt;<name>ignores</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>16</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>svn_cstring_split_append</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>ignores</name></name></expr></argument>, <argument><expr><name>SVN_CONFIG_DEFAULT_GLOBAL_IGNORES</name></expr></argument>,
                               <argument><expr>"\n\r\t\v "</expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <comment type="block">/* The edit baton's status structure maps to PATH, and the editor
     have to be aware of whether that is the anchor or the target. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_status2</name><argument_list>(<argument><expr>&amp;(<name><name>eb</name>-&gt;<name>anchor_status</name></name>)</expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>anchor</name></name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Construct an editor. */</comment>
  <expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>set_target_revision</name></name> = <name>set_target_revision</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>open_root</name></name> = <name>open_root</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>delete_entry</name></name> = <name>delete_entry</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>add_directory</name></name> = <name>add_directory</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>open_directory</name></name> = <name>open_directory</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>change_dir_prop</name></name> = <name>change_dir_prop</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>close_directory</name></name> = <name>close_directory</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>add_file</name></name> = <name>add_file</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>open_file</name></name> = <name>open_file</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>apply_textdelta</name></name> = <name>apply_textdelta</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>change_file_prop</name></name> = <name>change_file_prop</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>close_file</name></name> = <name>close_file</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>close_edit</name></name> = <name>close_edit</name></expr>;</expr_stmt>

  <comment type="block">/* Conjoin a cancellation editor with our status editor. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_delta_get_cancellation_editor</name><argument_list>(<argument><expr><name>cancel_func</name></expr></argument>, <argument><expr><name>cancel_baton</name></expr></argument>,
                                            <argument><expr><name>tree_editor</name></expr></argument>, <argument><expr><name>eb</name></expr></argument>, <argument><expr><name>editor</name></expr></argument>,
                                            <argument><expr><name>edit_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>set_locks_baton</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>set_locks_baton</name> = <name>eb</name></expr>;</expr_stmt></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_get_status_editor2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
                          <param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
                          <param><decl><type><name>void</name> **</type><name>set_locks_baton</name></decl></param>,
                          <param><decl><type><name>svn_revnum_t</name> *</type><name>edit_revision</name></decl></param>,
                          <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>anchor</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
                          <param><decl><type><name>apr_hash_t</name> *</type><name>config</name></decl></param>,
                          <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                          <param><decl><type><name>svn_boolean_t</name></type> <name>get_all</name></decl></param>,
                          <param><decl><type><name>svn_boolean_t</name></type> <name>no_ignore</name></decl></param>,
                          <param><decl><type><name>svn_wc_status_func2_t</name></type> <name>status_func</name></decl></param>,
                          <param><decl><type><name>void</name> *</type><name>status_baton</name></decl></param>,
                          <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
                          <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
                          <param><decl><type><name>svn_wc_traversal_info_t</name> *</type><name>traversal_info</name></decl></param>,
                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>ignores</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_get_default_ignores</name><argument_list>(<argument><expr>&amp;<name>ignores</name></expr></argument>, <argument><expr><name>config</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>svn_wc_get_status_editor3</name><argument_list>(<argument><expr><name>editor</name></expr></argument>,
                                   <argument><expr><name>edit_baton</name></expr></argument>,
                                   <argument><expr><name>set_locks_baton</name></expr></argument>,
                                   <argument><expr><name>edit_revision</name></expr></argument>,
                                   <argument><expr><name>anchor</name></expr></argument>,
                                   <argument><expr><name>target</name></expr></argument>,
                                   <argument><expr><call><name>SVN_DEPTH_INFINITY_OR_IMMEDIATES</name><argument_list>(<argument><expr><name>recurse</name></expr></argument>)</argument_list></call></expr></argument>,
                                   <argument><expr><name>get_all</name></expr></argument>,
                                   <argument><expr><name>no_ignore</name></expr></argument>,
                                   <argument><expr><name>ignores</name></expr></argument>,
                                   <argument><expr><name>status_func</name></expr></argument>,
                                   <argument><expr><name>status_baton</name></expr></argument>,
                                   <argument><expr><name>cancel_func</name></expr></argument>,
                                   <argument><expr><name>cancel_baton</name></expr></argument>,
                                   <argument><expr><name>traversal_info</name></expr></argument>,
                                   <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<comment type="block">/* Helpers for deprecated svn_wc_status_editor(), of type
   svn_wc_status_func2_t. */</comment>
<struct>struct <name>old_status_func_cb_baton</name>
<block>{
  <decl_stmt><decl><type><name>svn_wc_status_func_t</name></type> <name>original_func</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>original_baton</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>old_status_func_cb</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                               <param><decl><type><name>svn_wc_status2_t</name> *</type><name>status</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>old_status_func_cb_baton</name> *</type><name>b</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_status_t</name> *</type><name>stat</name> <init>= <expr>(<name>svn_wc_status_t</name> *) <name>status</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name><name>b</name>-&gt;<name>original_func</name></name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>original_baton</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_get_status_editor</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
                         <param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
                         <param><decl><type><name>svn_revnum_t</name> *</type><name>edit_revision</name></decl></param>,
                         <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>anchor</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
                         <param><decl><type><name>apr_hash_t</name> *</type><name>config</name></decl></param>,
                         <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                         <param><decl><type><name>svn_boolean_t</name></type> <name>get_all</name></decl></param>,
                         <param><decl><type><name>svn_boolean_t</name></type> <name>no_ignore</name></decl></param>,
                         <param><decl><type><name>svn_wc_status_func_t</name></type> <name>status_func</name></decl></param>,
                         <param><decl><type><name>void</name> *</type><name>status_baton</name></decl></param>,
                         <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
                         <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
                         <param><decl><type><name>svn_wc_traversal_info_t</name> *</type><name>traversal_info</name></decl></param>,
                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>old_status_func_cb_baton</name> *</type><name>b</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>ignores</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>b</name>-&gt;<name>original_func</name></name> = <name>status_func</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>b</name>-&gt;<name>original_baton</name></name> = <name>status_baton</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_get_default_ignores</name><argument_list>(<argument><expr>&amp;<name>ignores</name></expr></argument>, <argument><expr><name>config</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>svn_wc_get_status_editor3</name><argument_list>(<argument><expr><name>editor</name></expr></argument>, <argument><expr><name>edit_baton</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>edit_revision</name></expr></argument>,
                                   <argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>target</name></expr></argument>,
                                   <argument><expr><call><name>SVN_DEPTH_INFINITY_OR_IMMEDIATES</name><argument_list>(<argument><expr><name>recurse</name></expr></argument>)</argument_list></call></expr></argument>,
                                   <argument><expr><name>get_all</name></expr></argument>, <argument><expr><name>no_ignore</name></expr></argument>, <argument><expr><name>ignores</name></expr></argument>,
                                   <argument><expr><name>old_status_func_cb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>,
                                   <argument><expr><name>cancel_func</name></expr></argument>, <argument><expr><name>cancel_baton</name></expr></argument>,
                                   <argument><expr><name>traversal_info</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_status_set_repos_locks</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
                              <param><decl><type><name>apr_hash_t</name> *</type><name>locks</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_root</name></decl></param>,
                              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>eb</name>-&gt;<name>repos_locks</name></name> = <name>locks</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>repos_root</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>repos_root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_get_default_ignores</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>patterns</name></decl></param>,
                           <param><decl><type><name>apr_hash_t</name> *</type><name>config</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_config_t</name> *</type><name>cfg</name> <init>= <expr><name>config</name> ? <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>config</name></expr></argument>,
                                            <argument><expr><name>SVN_CONFIG_CATEGORY_CONFIG</name></expr></argument>,
                                            <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call> : <name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl>;</decl_stmt>

  <comment type="block">/* Check the Subversion run-time configuration for global ignores.
     If no configuration value exists, we fall back to our defaults. */</comment>
  <expr_stmt><expr><call><name>svn_config_get</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>, <argument><expr><name>SVN_CONFIG_SECTION_MISCELLANY</name></expr></argument>,
                 <argument><expr><name>SVN_CONFIG_OPTION_GLOBAL_IGNORES</name></expr></argument>,
                 <argument><expr><name>SVN_CONFIG_DEFAULT_GLOBAL_IGNORES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>patterns</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>16</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Split the patterns on whitespace, and stuff them into *PATTERNS. */</comment>
  <expr_stmt><expr><call><name>svn_cstring_split_append</name><argument_list>(<argument><expr>*<name>patterns</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr>"\n\r\t\v "</expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_status2</name><parameter_list>(<param><decl><type><name>svn_wc_status2_t</name> **</type><name>status</name></decl></param>,
               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
               <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>parent_entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>adm_access</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr><name>entry</name> &amp;&amp; ! <call><name>svn_path_is_empty</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>parent_path</name> <init>= <expr><call><name>svn_path_dirname</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>parent_access</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__adm_retrieve_internal</name><argument_list>(<argument><expr>&amp;<name>parent_access</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
                                            <argument><expr><name>parent_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>parent_access</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>parent_entry</name></expr></argument>, <argument><expr><name>parent_path</name></expr></argument>, <argument><expr><name>parent_access</name></expr></argument>,
                             <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>assemble_status</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>parent_entry</name></expr></argument>,
                          <argument><expr><name>svn_node_unknown</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <comment type="block">/* bogus */</comment>
                          <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_status</name><parameter_list>(<param><decl><type><name>svn_wc_status_t</name> **</type><name>status</name></decl></param>,
              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
              <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_wc_status2_t</name> *</type><name>stat2</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_status2</name><argument_list>(<argument><expr>&amp;<name>stat2</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>status</name> = (<name>svn_wc_status_t</name> *) <name>stat2</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>



<function><type><name>svn_wc_status2_t</name> *</type>
<name>svn_wc_dup_status2</name><parameter_list>(<param><decl><type><name>svn_wc_status2_t</name> *</type><name>orig_stat</name></decl></param>,
                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_wc_status2_t</name> *</type><name>new_stat</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>new_stat</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Shallow copy all members. */</comment>
  <expr_stmt><expr>*<name>new_stat</name> = *<name>orig_stat</name></expr>;</expr_stmt>

  <comment type="block">/* No go back and dup the deep item. */</comment>
  <if>if <condition>(<expr><name><name>orig_stat</name>-&gt;<name>entry</name></name></expr>)</condition><then>
    <expr_stmt><expr><name><name>new_stat</name>-&gt;<name>entry</name></name> = <call><name>svn_wc_entry_dup</name><argument_list>(<argument><expr><name><name>orig_stat</name>-&gt;<name>entry</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr><name><name>orig_stat</name>-&gt;<name>repos_lock</name></name></expr>)</condition><then>
    <expr_stmt><expr><name><name>new_stat</name>-&gt;<name>repos_lock</name></name> = <call><name>svn_lock_dup</name><argument_list>(<argument><expr><name><name>orig_stat</name>-&gt;<name>repos_lock</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr><name><name>orig_stat</name>-&gt;<name>url</name></name></expr>)</condition><then>
    <expr_stmt><expr><name><name>new_stat</name>-&gt;<name>url</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>orig_stat</name>-&gt;<name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr><name><name>orig_stat</name>-&gt;<name>ood_last_cmt_author</name></name></expr>)</condition><then>
    <expr_stmt><expr><name><name>new_stat</name>-&gt;<name>ood_last_cmt_author</name></name>
      = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>orig_stat</name>-&gt;<name>ood_last_cmt_author</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <comment type="block">/* Return the new hotness. */</comment>
  <return>return <expr><name>new_stat</name></expr>;</return>
}</block></function>


<function><type><name>svn_wc_status_t</name> *</type>
<name>svn_wc_dup_status</name><parameter_list>(<param><decl><type><name>svn_wc_status_t</name> *</type><name>orig_stat</name></decl></param>,
                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_wc_status_t</name> *</type><name>new_stat</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>new_stat</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Shallow copy all members. */</comment>
  <expr_stmt><expr>*<name>new_stat</name> = *<name>orig_stat</name></expr>;</expr_stmt>

  <comment type="block">/* No go back and dup the deep item. */</comment>
  <if>if <condition>(<expr><name><name>orig_stat</name>-&gt;<name>entry</name></name></expr>)</condition><then>
    <expr_stmt><expr><name><name>new_stat</name>-&gt;<name>entry</name></name> = <call><name>svn_wc_entry_dup</name><argument_list>(<argument><expr><name><name>orig_stat</name>-&gt;<name>entry</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <comment type="block">/* Return the new hotness. */</comment>
  <return>return <expr><name>new_stat</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_get_ignores</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>patterns</name></decl></param>,
                   <param><decl><type><name>apr_hash_t</name> *</type><name>config</name></decl></param>,
                   <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>default_ignores</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_get_default_ignores</name><argument_list>(<argument><expr>&amp;<name>default_ignores</name></expr></argument>, <argument><expr><name>config</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>collect_ignore_patterns</name><argument_list>(<argument><expr><name>patterns</name></expr></argument>, <argument><expr><name>default_ignores</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
                                  <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
