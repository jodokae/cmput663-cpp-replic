<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_wc/util.c"><comment type="block">/*
 * util.c:  general routines defying categorization; eventually I
 *          suspect they'll end up in libsvn_subr, but don't want to
 *          pollute that right now.  Note that nothing in here is
 *          specific to working copies.
 *
 * ====================================================================
 * Copyright (c) 2000-2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>


<escape char="0xc"/>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_file_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wc.h"</cpp:file></cpp:include>   <comment type="block">/* just for prototypes of things in this .c file */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_wc_private.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>

<escape char="0xc"/>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__ensure_directory</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><call><name>svn_io_check_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
    <return>return <expr><name>err</name></expr>;</return></then></if>

  <if>if <condition>(<expr><name>kind</name> != <name>svn_node_none</name> &amp;&amp; <name>kind</name> != <name>svn_node_dir</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* If got an error other than dir non-existence, then we can't
         ensure this directory's existence, so just return the error.
         Might happen if there's a file in the way, for example. */</comment>
      <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>APR_ENOTDIR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                               <argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s' is not a directory"</expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>kind</name> == <name>svn_node_none</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* The dir doesn't exist, and it's our job to change that. */</comment>

      <expr_stmt><expr><name>err</name> = <call><name>svn_io_dir_make</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>err</name> &amp;&amp; !<call><name>APR_STATUS_IS_ENOENT</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>apr_err</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
          <comment type="block">/* Tried to create the dir, and encountered some problem
             other than non-existence of intermediate dirs.  We can't
             ensure the desired directory's existence, so just return
             the error. */</comment>
          <return>return <expr><name>err</name></expr>;</return>
        }</block></then>
      <else>else <if>if <condition>(<expr><name>err</name> &amp;&amp; <call><name>APR_STATUS_IS_ENOENT</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>apr_err</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <comment type="block">/* (redundant conditional and comment) */</comment>
        <block>{
          <comment type="block">/* Okay, so the problem is a missing intermediate
             directory.  We don't know which one, so we recursively
             back up one level and try again. */</comment>
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>shorter</name> <init>= <expr><call><name>svn_path_dirname</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <comment type="block">/* Clear the error. */</comment>
          <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <if>if <condition>(<expr><name><name>shorter</name><index>[<expr>0</expr>]</index></name> == '\0'</expr>)</condition><then>
            <block>{
              <comment type="block">/* A weird and probably rare situation. */</comment>
              <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                      <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Unable to make any directories"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then>
          <else>else  <comment type="block">/* We have a valid path, so recursively ensure it. */</comment>
            <block>{
              <expr_stmt><expr><name>err</name> = <call><name>svn_wc__ensure_directory</name><argument_list>(<argument><expr><name>shorter</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

              <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
                <return>return <expr>(<name>err</name>)</expr>;</return></then>
              <else>else
                <return>return <expr><call><name>svn_wc__ensure_directory</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
            }</block></else></if>
        }</block></then></if></else></if>

      <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
        <return>return <expr><name>err</name></expr>;</return></then></if>
    }</block></then>
  <else>else  <comment type="block">/* No problem, the dir already existed, so just leave. */</comment>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>kind</name> == <name>svn_node_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Return the library version number. */</comment>
<function><type><specifier>const</specifier> <name>svn_version_t</name> *</type>
<name>svn_wc_version</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name>SVN_VERSION_BODY</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>svn_wc_notify_t</name> *</type>
<name>svn_wc_create_notify</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                     <param><decl><type><name>svn_wc_notify_action_t</name></type> <name>action</name></decl></param>,
                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_wc_notify_t</name> *</type><name>ret</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ret</name>-&gt;<name>path</name></name> = <name>path</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ret</name>-&gt;<name>action</name></name> = <name>action</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ret</name>-&gt;<name>kind</name></name> = <name>svn_node_unknown</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ret</name>-&gt;<name>mime_type</name></name> = <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ret</name>-&gt;<name>lock</name></name> = <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ret</name>-&gt;<name>err</name></name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ret</name>-&gt;<name>content_state</name></name> = <name><name>ret</name>-&gt;<name>prop_state</name></name> = <name>svn_wc_notify_state_unknown</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ret</name>-&gt;<name>lock_state</name></name> = <name>svn_wc_notify_lock_state_unknown</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ret</name>-&gt;<name>revision</name></name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ret</name>-&gt;<name>changelist_name</name></name> = <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ret</name>-&gt;<name>merge_range</name></name> = <name>NULL</name></expr>;</expr_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
}</block></function>

<comment type="block">/* Pool cleanup function to clear an svn_error_t *. */</comment>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>err_cleanup</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<function><type><name>svn_wc_notify_t</name> *</type>
<name>svn_wc_dup_notify</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_wc_notify_t</name> *</type><name>notify</name></decl></param>,
                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_wc_notify_t</name> *</type><name>ret</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>ret</name> = *<name>notify</name></expr>;</expr_stmt>

  <if>if <condition>(<expr><name><name>ret</name>-&gt;<name>path</name></name></expr>)</condition><then>
    <expr_stmt><expr><name><name>ret</name>-&gt;<name>path</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>ret</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <if>if <condition>(<expr><name><name>ret</name>-&gt;<name>mime_type</name></name></expr>)</condition><then>
    <expr_stmt><expr><name><name>ret</name>-&gt;<name>mime_type</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>ret</name>-&gt;<name>mime_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <if>if <condition>(<expr><name><name>ret</name>-&gt;<name>lock</name></name></expr>)</condition><then>
    <expr_stmt><expr><name><name>ret</name>-&gt;<name>lock</name></name> = <call><name>svn_lock_dup</name><argument_list>(<argument><expr><name><name>ret</name>-&gt;<name>lock</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <if>if <condition>(<expr><name><name>ret</name>-&gt;<name>err</name></name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name><name>ret</name>-&gt;<name>err</name></name> = <call><name>svn_error_dup</name><argument_list>(<argument><expr><name><name>ret</name>-&gt;<name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>ret</name>-&gt;<name>err</name></name></expr></argument>, <argument><expr><name>err_cleanup</name></expr></argument>,
                                <argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  <if>if <condition>(<expr><name><name>ret</name>-&gt;<name>changelist_name</name></name></expr>)</condition><then>
    <expr_stmt><expr><name><name>ret</name>-&gt;<name>changelist_name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>ret</name>-&gt;<name>changelist_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <if>if <condition>(<expr><name><name>ret</name>-&gt;<name>merge_range</name></name></expr>)</condition><then>
    <expr_stmt><expr><name><name>ret</name>-&gt;<name>merge_range</name></name> = <call><name>svn_merge_range_dup</name><argument_list>(<argument><expr><name><name>ret</name>-&gt;<name>merge_range</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <return>return <expr><name>ret</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_external_item_create</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_wc_external_item2_t</name> **</type><name>item</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>item</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_wc_external_item2_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_wc_external_item_t</name> *</type>
<name>svn_wc_external_item_dup</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_wc_external_item_t</name> *</type><name>item</name></decl></param>,
                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_wc_external_item_t</name> *</type><name>new_item</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>new_item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>new_item</name> = *<name>item</name></expr>;</expr_stmt>

  <if>if <condition>(<expr><name><name>new_item</name>-&gt;<name>target_dir</name></name></expr>)</condition><then>
    <expr_stmt><expr><name><name>new_item</name>-&gt;<name>target_dir</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>new_item</name>-&gt;<name>target_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr><name><name>new_item</name>-&gt;<name>url</name></name></expr>)</condition><then>
    <expr_stmt><expr><name><name>new_item</name>-&gt;<name>url</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>new_item</name>-&gt;<name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <return>return <expr><name>new_item</name></expr>;</return>
}</block></function>

<function><type><name>svn_wc_external_item2_t</name> *</type>
<name>svn_wc_external_item2_dup</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_wc_external_item2_t</name> *</type><name>item</name></decl></param>,
                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_wc_external_item2_t</name> *</type><name>new_item</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>new_item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>new_item</name> = *<name>item</name></expr>;</expr_stmt>

  <if>if <condition>(<expr><name><name>new_item</name>-&gt;<name>target_dir</name></name></expr>)</condition><then>
    <expr_stmt><expr><name><name>new_item</name>-&gt;<name>target_dir</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>new_item</name>-&gt;<name>target_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr><name><name>new_item</name>-&gt;<name>url</name></name></expr>)</condition><then>
    <expr_stmt><expr><name><name>new_item</name>-&gt;<name>url</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>new_item</name>-&gt;<name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <return>return <expr><name>new_item</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>svn_wc__compat_call_notify_func</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>svn_wc_notify_t</name> *</type><name>n</name></decl></param>,
                                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_wc__compat_notify_baton_t</name> *</type><name>nb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>nb</name>-&gt;<name>func</name></name></expr>)</condition><then>
    <expr_stmt><expr><call>(*<name><name>nb</name>-&gt;<name>func</name></name>)<argument_list>(<argument><expr><name><name>nb</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name><name>n</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name><name>n</name>-&gt;<name>action</name></name></expr></argument>, <argument><expr><name><name>n</name>-&gt;<name>kind</name></name></expr></argument>, <argument><expr><name><name>n</name>-&gt;<name>mime_type</name></name></expr></argument>,
                <argument><expr><name><name>n</name>-&gt;<name>content_state</name></name></expr></argument>, <argument><expr><name><name>n</name>-&gt;<name>prop_state</name></name></expr></argument>, <argument><expr><name><name>n</name>-&gt;<name>revision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>

<function><type><name>svn_boolean_t</name></type>
<name>svn_wc_match_ignore_list</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>str</name></decl></param>, <param><decl><type><name>apr_array_header_t</name> *</type><name>list</name></decl></param>,
                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <comment type="block">/* For now, we simply forward to svn_cstring_match_glob_list. In the
     future, if we support more complex ignore patterns, we would iterate
     over 'list' ourselves, and decide for each pattern how to handle
     it. */</comment>

  <return>return <expr><call><name>svn_cstring_match_glob_list</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__path_switched</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>wc_path</name></decl></param>,
                      <param><decl><type><name>svn_boolean_t</name> *</type><name>switched</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl></param>,
                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>wc_parent_path</name></decl>, *<decl><type ref="prev"/><name>parent_child_url</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>parent_entry</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>parent_adm_access</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_path_get_absolute</name><argument_list>(<argument><expr>&amp;<name>wc_path</name></expr></argument>, <argument><expr><name>wc_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><call><name>svn_dirent_is_root</name><argument_list>(<argument><expr><name>wc_path</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>wc_path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <expr_stmt><expr>*<name>switched</name> = <name>FALSE</name></expr>;</expr_stmt>
      <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
    }</block></then></if>

  <expr_stmt><expr><name>wc_parent_path</name> = <call><name>svn_path_dirname</name><argument_list>(<argument><expr><name>wc_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>err</name> = <call><name>svn_wc_adm_open3</name><argument_list>(<argument><expr>&amp;<name>parent_adm_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>wc_parent_path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr>0</expr></argument>,
                         <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_WC_NOT_DIRECTORY</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>err</name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt>
          <expr_stmt><expr>*<name>switched</name> = <name>FALSE</name></expr>;</expr_stmt>
        }</block></then></if>

      <return>return <expr><name>err</name></expr>;</return>
    }</block></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_versioned</name><argument_list>(<argument><expr>&amp;<name>parent_entry</name></expr></argument>, <argument><expr><name>wc_parent_path</name></expr></argument>,
                                  <argument><expr><name>parent_adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_close</name><argument_list>(<argument><expr><name>parent_adm_access</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Without complete entries (and URLs) for WC_PATH and it's parent
     we return SVN_ERR_ENTRY_MISSING_URL. */</comment>
  <if>if <condition>(<expr>!<name><name>parent_entry</name>-&gt;<name>url</name></name> || !<name><name>entry</name>-&gt;<name>url</name></name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>no_url_path</name> <init>= <expr><name><name>parent_entry</name>-&gt;<name>url</name></name> ? <name>wc_path</name> : <name>wc_parent_path</name></expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_ENTRY_MISSING_URL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                               <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Cannot find a URL for '%s'"</expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>no_url_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

  <expr_stmt><expr><name>parent_child_url</name>
    = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>parent_entry</name>-&gt;<name>url</name></name></expr></argument>,
                                 <argument><expr><call><name>svn_path_basename</name><argument_list>(<argument><expr><name>wc_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>switched</name> = <call><name>strcmp</name><argument_list>(<argument><expr><name>parent_child_url</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>url</name></name></expr></argument>)</argument_list></call> != 0</expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
