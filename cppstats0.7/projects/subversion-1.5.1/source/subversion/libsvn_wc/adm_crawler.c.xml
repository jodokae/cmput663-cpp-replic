<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_wc/adm_crawler.c"><comment type="block">/*
 * adm_crawler.c:  report local WC mods to an Editor.
 *
 * ====================================================================
 * Copyright (c) 2000-2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<comment type="block">/* ==================================================================== */</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_file_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_hash.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_md5.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_wc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_md5.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_base64.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_delta.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_wc_private.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"adm_files.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"props.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"translate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"entries.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lock.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>


<comment type="block">/* Helper for report_revisions_and_depths().

   Perform an atomic restoration of the file FILE_PATH; that is, copy
   the file's text-base to the administrative tmp area, and then move
   that file to FILE_PATH with possible translations/expansions.  If
   USE_COMMIT_TIMES is set, then set working file's timestamp to
   last-commit-time.  Either way, set entry-timestamp to match that of
   the working file when all is finished. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>restore_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file_path</name></decl></param>,
             <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
             <param><decl><type><name>svn_boolean_t</name></type> <name>use_commit_times</name></decl></param>,
             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmp_file</name></decl>, *<decl><type ref="prev"/><name>text_base_path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_entry_t</name></type> <name>newentry</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>bname</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>special</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>text_base_path</name> = <call><name>svn_wc__text_base_path</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>bname</name> = <call><name>svn_path_basename</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Copy / translate into a temporary file, which afterwards can
     be atomically moved over the original working copy file. */</comment>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_translated_file2</name><argument_list>(<argument><expr>&amp;<name>tmp_file</name></expr></argument>,
                                  <argument><expr><name>text_base_path</name></expr></argument>, <argument><expr><name>file_path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
                                  <argument><expr><name>SVN_WC_TRANSLATE_FROM_NF</name>
                                  | <name>SVN_WC_TRANSLATE_FORCE_COPY</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_rename</name><argument_list>(<argument><expr><name>tmp_file</name></expr></argument>, <argument><expr><name>file_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__maybe_set_read_only</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>file_path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If necessary, tweak the new working file's executable bit. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__maybe_set_executable</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>file_path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Remove any text conflict */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_resolved_conflict3</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                                    <argument><expr><name>svn_depth_empty</name></expr></argument>,
                                    <argument><expr><name>svn_wc_conflict_choose_merged</name></expr></argument>,
                                    <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>use_commit_times</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__get_special</name><argument_list>(<argument><expr>&amp;<name>special</name></expr></argument>, <argument><expr><name>file_path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <comment type="block">/* Possibly set timestamp to last-commit-time. */</comment>
  <if>if <condition>(<expr><name>use_commit_times</name> &amp;&amp; (! <name>special</name>)</expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name>file_path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>entry</name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_set_file_affected_time</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>cmt_date</name></name></expr></argument>,
                                            <argument><expr><name>file_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>newentry</name>.<name>text_time</name></name> = <name><name>entry</name>-&gt;<name>cmt_date</name></name></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_affected_time</name><argument_list>(<argument><expr>&amp;<name><name>newentry</name>.<name>text_time</name></name></expr></argument>,
                                        <argument><expr><name>file_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <comment type="block">/* Modify our entry's text-timestamp to match the working file. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_modify</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>bname</name></expr></argument>,
                               <argument><expr>&amp;<name>newentry</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_MODIFY_TEXT_TIME</name></expr></argument>,
                               <argument><expr><name>TRUE</name></expr></argument> <comment type="block">/* do_sync now */</comment>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* The recursive crawler that describes a mixed-revision working
   copy to an RA layer.  Used to initiate updates.

   This is a depth-first recursive walk of DIR_PATH under ADM_ACCESS.
   Look at each entry and check if its revision is different than
   DIR_REV.  If so, report this fact to REPORTER.  If an entry is
   missing from disk, report its absence to REPORTER.  If an entry has
   a different URL than expected, report that to REPORTER.  If an
   entry has a different depth than its parent, report that to
   REPORTER.

   Alternatively, if REPORT_EVERYTHING is set, then report all
   children unconditionally.

   DEPTH is actually the *requested* depth for the update-like
   operation for which we are reporting working copy state.  However,
   certain requested depths affect the depth of the report crawl.  For
   example, if the requested depth is svn_depth_empty, there's no
   point descending into subdirs, no matter what their depths.  So:

   If DEPTH is svn_depth_empty, don't report any files and don't
   descend into any subdirs.  If svn_depth_files, report files but
   still don't descend into subdirs.  If svn_depth_immediates, report
   files, and report subdirs themselves but not their entries.  If
   svn_depth_infinity or svn_depth_unknown, report everything all the
   way down.  (That last sentence might sound counterintuitive, but
   since you can't go deeper than the local ambient depth anyway,
   requesting svn_depth_infinity really means "as deep as the various
   parts of this working copy go".  Of course, the information that
   comes back from the server will be different for svn_depth_unknown
   than for svn_depth_infinity.)

   DEPTH_COMPATIBILITY_TRICK means the same thing here as it does
   in svn_wc_crawl_revisions3().

   If TRAVERSAL_INFO is non-null, record this directory's
   value of svn:externals in both TRAVERSAL_INFO-&gt;externals_old and
   TRAVERSAL_INFO-&gt;externals_new, using wc_path + dir_path as the key,
   and the raw (unparsed) value of the property as the value; store
   this directory's depth in TRAVERSAL_INFO-&gt;depths, using the same
   key and svn_depth_to_word(depth) as the value.  (Note: We set the
   property value in both places, because its absence in just one or
   the other place signals that the property was added or deleted;
   thus, storing it in both places signals that it is present and, by
   default, unchanged.)

   If RESTORE_FILES is set, then unexpectedly missing working files
   will be restored from text-base and NOTIFY_FUNC/NOTIFY_BATON
   will be called to report the restoration.  USE_COMMIT_TIMES is
   passed to restore_file() helper. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>report_revisions_and_depths</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dir_path</name></decl></param>,
                            <param><decl><type><name>svn_revnum_t</name></type> <name>dir_rev</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>svn_ra_reporter3_t</name> *</type><name>reporter</name></decl></param>,
                            <param><decl><type><name>void</name> *</type><name>report_baton</name></decl></param>,
                            <param><decl><type><name>svn_wc_notify_func2_t</name></type> <name>notify_func</name></decl></param>,
                            <param><decl><type><name>void</name> *</type><name>notify_baton</name></decl></param>,
                            <param><decl><type><name>svn_boolean_t</name></type> <name>restore_files</name></decl></param>,
                            <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                            <param><decl><type><name>svn_boolean_t</name></type> <name>depth_compatibility_trick</name></decl></param>,
                            <param><decl><type><name>svn_boolean_t</name></type> <name>report_everything</name></decl></param>,
                            <param><decl><type><name>svn_boolean_t</name></type> <name>use_commit_times</name></decl></param>,
                            <param><decl><type><name>svn_wc_traversal_info_t</name> *</type><name>traversal_info</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>entries</name></decl>, *<decl><type ref="prev"/><name>dirents</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init>, *<name>iterpool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>dot_entry</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>this_url</name></decl>, *<decl><type ref="prev"/><name>this_path</name></decl>, *<decl><type ref="prev"/><name>full_path</name></decl>, *<decl><type ref="prev"/><name>this_full_path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>dir_access</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_notify_t</name> *</type><name>notify</name></decl>;</decl_stmt>

  <comment type="block">/* Get both the SVN Entries and the actual on-disk entries.   Also
     notice that we're picking up hidden entries too. */</comment>
  <expr_stmt><expr><name>full_path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><name>dir_path</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr>&amp;<name>dir_access</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>full_path</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entries_read</name><argument_list>(<argument><expr>&amp;<name>entries</name></expr></argument>, <argument><expr><name>dir_access</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_get_dir_filenames</name><argument_list>(<argument><expr>&amp;<name>dirents</name></expr></argument>, <argument><expr><name>full_path</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*** Do the real reporting and recursing. ***/</comment>

  <comment type="block">/* First, look at "this dir" to see what its URL is. */</comment>
  <expr_stmt><expr><name>dot_entry</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>SVN_WC_ENTRY_THIS_DIR</name></expr></argument>,
                           <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If "this dir" has "svn:externals" property set on it, store its name
     and depth in traversal_info. */</comment>
  <if>if <condition>(<expr><name>traversal_info</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>val</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_prop_get</name><argument_list>(<argument><expr>&amp;<name>val</name></expr></argument>, <argument><expr><name>SVN_PROP_EXTERNALS</name></expr></argument>, <argument><expr><name>full_path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
                              <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>val</name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>dup_pool</name> <init>= <expr><name><name>traversal_info</name>-&gt;<name>pool</name></name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dup_path</name> <init>= <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>dup_pool</name></expr></argument>, <argument><expr><name>full_path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dup_val</name> <init>= <expr><call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name>dup_pool</name></expr></argument>, <argument><expr><name><name>val</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>val</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>traversal_info</name>-&gt;<name>externals_old</name></name></expr></argument>,
                       <argument><expr><name>dup_path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>dup_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>traversal_info</name>-&gt;<name>externals_new</name></name></expr></argument>,
                       <argument><expr><name>dup_path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>dup_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>traversal_info</name>-&gt;<name>depths</name></name></expr></argument>,
                       <argument><expr><name>dup_path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                       <argument><expr><call><name>svn_depth_to_word</name><argument_list>(<argument><expr><name><name>dot_entry</name>-&gt;<name>depth</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

  <comment type="block">/* Looping over current directory's SVN entries: */</comment>
  <expr_stmt><expr><name>iterpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_ssize_t</name></type> <name>klen</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>current_entry</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_io_dirent_t</name> *</type><name>dirent</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>dirent_kind</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>missing</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

      <comment type="block">/* Clear the iteration subpool here because the loop has a bunch
         of 'continue' jump statements. */</comment>
      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Get the next entry */</comment>
      <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>klen</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>current_entry</name> = <name>val</name></expr>;</expr_stmt>

      <comment type="block">/* Compute the name of the entry.  Skip THIS_DIR altogether. */</comment>
      <if>if <condition>(<expr>! <call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>SVN_WC_ENTRY_THIS_DIR</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <continue>continue;</continue></then></if>

      <comment type="block">/* Compute the paths and URLs we need. */</comment>
      <expr_stmt><expr><name>this_url</name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>dot_entry</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>this_path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>dir_path</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>this_full_path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>full_path</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/*** The Big Tests: ***/</comment>

      <comment type="block">/* If the entry is 'deleted' or 'absent', make sure the server
         knows it's gone... */</comment>
      <if>if <condition>(<expr><name><name>current_entry</name>-&gt;<name>deleted</name></name> || <name><name>current_entry</name>-&gt;<name>absent</name></name></expr>)</condition><then>
        <block>{
          <comment type="block">/* ...unless we're reporting everything, in which case we're
             going to report it missing later anyway. */</comment>
          <if>if <condition>(<expr>! <name>report_everything</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>reporter</name>-&gt;<name>delete_path</name></name><argument_list>(<argument><expr><name>report_baton</name></expr></argument>, <argument><expr><name>this_path</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
          <continue>continue;</continue>
        }</block></then></if>

      <comment type="block">/* Is the entry on disk?  Set a flag if not. */</comment>
      <expr_stmt><expr><name>dirent</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>dirents</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr>! <name>dirent</name></expr>)</condition><then>
        <block>{
          <comment type="block">/* It is possible on a case insensitive system that the
             entry is not really missing, so we call our trusty but
             expensive friend svn_io_check_path to be sure. */</comment>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_check_path</name><argument_list>(<argument><expr><name>this_full_path</name></expr></argument>, <argument><expr>&amp;<name>dirent_kind</name></expr></argument>,
                                    <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>dirent_kind</name> == <name>svn_node_none</name></expr>)</condition><then>
            <expr_stmt><expr><name>missing</name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
        }</block></then></if>

      <comment type="block">/* From here on out, ignore any entry scheduled for addition */</comment>
      <if>if <condition>(<expr><name><name>current_entry</name>-&gt;<name>schedule</name></name> == <name>svn_wc_schedule_add</name></expr>)</condition><then>
        <continue>continue;</continue></then></if>

      <comment type="block">/*** Files ***/</comment>
      <if>if <condition>(<expr><name><name>current_entry</name>-&gt;<name>kind</name></name> == <name>svn_node_file</name></expr>)</condition><then>
        <block>{
          <comment type="block">/* If the item is missing from disk, and we're supposed to
             restore missing things, and it isn't missing as a result
             of a scheduling operation, then ... */</comment>
          <if>if <condition>(<expr><name>missing</name>
              &amp;&amp; <name>restore_files</name>
              &amp;&amp; (<name><name>current_entry</name>-&gt;<name>schedule</name></name> != <name>svn_wc_schedule_delete</name>)
              &amp;&amp; (<name><name>current_entry</name>-&gt;<name>schedule</name></name> != <name>svn_wc_schedule_replace</name>)</expr>)</condition><then>
            <block>{
              <comment type="block">/* ... recreate file from text-base, and ... */</comment>
              <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>restore_file</name><argument_list>(<argument><expr><name>this_full_path</name></expr></argument>, <argument><expr><name>dir_access</name></expr></argument>,
                                   <argument><expr><name>use_commit_times</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

              <comment type="block">/* ... report the restoration to the caller.  */</comment>
              <if>if <condition>(<expr><name>notify_func</name> != <name>NULL</name></expr>)</condition><then>
                <block>{
                  <expr_stmt><expr><name>notify</name> = <call><name>svn_wc_create_notify</name><argument_list>(<argument><expr><name>this_full_path</name></expr></argument>,
                                                <argument><expr><name>svn_wc_notify_restore</name></expr></argument>,
                                                <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><name><name>notify</name>-&gt;<name>kind</name></name> = <name>svn_node_file</name></expr>;</expr_stmt>
                  <expr_stmt><expr><call>(*<name>notify_func</name>)<argument_list>(<argument><expr><name>notify_baton</name></expr></argument>, <argument><expr><name>notify</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>

          <if>if <condition>(<expr><name>report_everything</name></expr>)</condition><then>
            <block>{
              <comment type="block">/* Report the file unconditionally, one way or another. */</comment>
              <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>current_entry</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name>this_url</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
                <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>reporter</name>-&gt;<name>link_path</name></name><argument_list>(<argument><expr><name>report_baton</name></expr></argument>, <argument><expr><name>this_path</name></expr></argument>,
                                            <argument><expr><name><name>current_entry</name>-&gt;<name>url</name></name></expr></argument>,
                                            <argument><expr><name><name>current_entry</name>-&gt;<name>revision</name></name></expr></argument>,
                                            <argument><expr><name><name>current_entry</name>-&gt;<name>depth</name></name></expr></argument>,
                                            <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>current_entry</name>-&gt;<name>lock_token</name></name></expr></argument>,
                                            <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
              <else>else
                <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>reporter</name>-&gt;<name>set_path</name></name><argument_list>(<argument><expr><name>report_baton</name></expr></argument>, <argument><expr><name>this_path</name></expr></argument>,
                                           <argument><expr><name><name>current_entry</name>-&gt;<name>revision</name></name></expr></argument>,
                                           <argument><expr><name><name>current_entry</name>-&gt;<name>depth</name></name></expr></argument>,
                                           <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>current_entry</name>-&gt;<name>lock_token</name></name></expr></argument>,
                                           <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
            }</block></then>

          <comment type="block">/* Possibly report a disjoint URL ... */</comment>
          <else>else <if>if <condition>(<expr>(<name><name>current_entry</name>-&gt;<name>schedule</name></name> != <name>svn_wc_schedule_add</name>)
                   &amp;&amp; (<name><name>current_entry</name>-&gt;<name>schedule</name></name> != <name>svn_wc_schedule_replace</name>)
                   &amp;&amp; (<call><name>strcmp</name><argument_list>(<argument><expr><name><name>current_entry</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name>this_url</name></expr></argument>)</argument_list></call> != 0)</expr>)</condition><then>
            <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>reporter</name>-&gt;<name>link_path</name></name><argument_list>(<argument><expr><name>report_baton</name></expr></argument>,
                                        <argument><expr><name>this_path</name></expr></argument>,
                                        <argument><expr><name><name>current_entry</name>-&gt;<name>url</name></name></expr></argument>,
                                        <argument><expr><name><name>current_entry</name>-&gt;<name>revision</name></name></expr></argument>,
                                        <argument><expr><name><name>current_entry</name>-&gt;<name>depth</name></name></expr></argument>,
                                        <argument><expr><name>FALSE</name></expr></argument>,
                                        <argument><expr><name><name>current_entry</name>-&gt;<name>lock_token</name></name></expr></argument>,
                                        <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
          <comment type="block">/* ... or perhaps just a differing revision or lock token,
             or the mere presence of the file in a depth-empty dir. */</comment>
          <else>else <if>if <condition>(<expr><name><name>current_entry</name>-&gt;<name>revision</name></name> != <name>dir_rev</name>
                   || <name><name>current_entry</name>-&gt;<name>lock_token</name></name>
                   || <name><name>dot_entry</name>-&gt;<name>depth</name></name> == <name>svn_depth_empty</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>reporter</name>-&gt;<name>set_path</name></name><argument_list>(<argument><expr><name>report_baton</name></expr></argument>,
                                       <argument><expr><name>this_path</name></expr></argument>,
                                       <argument><expr><name><name>current_entry</name>-&gt;<name>revision</name></name></expr></argument>,
                                       <argument><expr><name><name>current_entry</name>-&gt;<name>depth</name></name></expr></argument>,
                                       <argument><expr><name>FALSE</name></expr></argument>,
                                       <argument><expr><name><name>current_entry</name>-&gt;<name>lock_token</name></name></expr></argument>,
                                       <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></else></if></else></if>
        }</block></then> <comment type="block">/* end file case */</comment>

      <comment type="block">/*** Directories (in recursive mode) ***/</comment>
      <else>else <if>if <condition>(<expr><name><name>current_entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name>
               &amp;&amp; (<name>depth</name> &gt; <name>svn_depth_files</name>
                   || <name>depth</name> == <name>svn_depth_unknown</name>)</expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>subdir_access</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>subdir_entry</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>start_empty</name></decl>;</decl_stmt>

          <comment type="block">/* If a directory is missing from disk, we have no way to
             recreate it locally, so report as missing and move
             along.  Again, don't bother if we're reporting
             everything, because the dir is already missing on the server. */</comment>
          <if>if <condition>(<expr><name>missing</name></expr>)</condition><then>
            <block>{
              <if>if <condition>(<expr>! <name>report_everything</name></expr>)</condition><then>
                <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>reporter</name>-&gt;<name>delete_path</name></name><argument_list>(<argument><expr><name>report_baton</name></expr></argument>, <argument><expr><name>this_path</name></expr></argument>,
                                              <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
              <continue>continue;</continue>
            }</block></then></if>

          <comment type="block">/* We need to read the full entry of the directory from its
             own "this dir", if available. */</comment>
          <if>if <condition>(<expr><call><name>svn_wc__adm_missing</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>this_full_path</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <continue>continue;</continue></then></if>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr>&amp;<name>subdir_access</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
                                      <argument><expr><name>this_full_path</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>subdir_entry</name></expr></argument>, <argument><expr><name>this_full_path</name></expr></argument>, <argument><expr><name>subdir_access</name></expr></argument>,
                               <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><name>start_empty</name> = <name><name>subdir_entry</name>-&gt;<name>incomplete</name></name></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>depth_compatibility_trick</name>
              &amp;&amp; <name><name>subdir_entry</name>-&gt;<name>depth</name></name> &lt;= <name>svn_depth_files</name>
              &amp;&amp; <name>depth</name> &gt; <name><name>subdir_entry</name>-&gt;<name>depth</name></name></expr>)</condition><then>
            <block>{
              <expr_stmt><expr><name>start_empty</name> = <name>TRUE</name></expr>;</expr_stmt>
            }</block></then></if>

          <if>if <condition>(<expr><name>report_everything</name></expr>)</condition><then>
            <block>{
              <comment type="block">/* Report the dir unconditionally, one way or another. */</comment>
              <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>subdir_entry</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name>this_url</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
                <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>reporter</name>-&gt;<name>link_path</name></name><argument_list>(<argument><expr><name>report_baton</name></expr></argument>, <argument><expr><name>this_path</name></expr></argument>,
                                            <argument><expr><name><name>subdir_entry</name>-&gt;<name>url</name></name></expr></argument>,
                                            <argument><expr><name><name>subdir_entry</name>-&gt;<name>revision</name></name></expr></argument>,
                                            <argument><expr><name><name>subdir_entry</name>-&gt;<name>depth</name></name></expr></argument>,
                                            <argument><expr><name>start_empty</name></expr></argument>,
                                            <argument><expr><name><name>subdir_entry</name>-&gt;<name>lock_token</name></name></expr></argument>,
                                            <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
              <else>else
                <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>reporter</name>-&gt;<name>set_path</name></name><argument_list>(<argument><expr><name>report_baton</name></expr></argument>, <argument><expr><name>this_path</name></expr></argument>,
                                           <argument><expr><name><name>subdir_entry</name>-&gt;<name>revision</name></name></expr></argument>,
                                           <argument><expr><name><name>subdir_entry</name>-&gt;<name>depth</name></name></expr></argument>,
                                           <argument><expr><name>start_empty</name></expr></argument>,
                                           <argument><expr><name><name>subdir_entry</name>-&gt;<name>lock_token</name></name></expr></argument>,
                                           <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
            }</block></then>

          <comment type="block">/* Possibly report a disjoint URL ... */</comment>
          <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>subdir_entry</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name>this_url</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
            <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>reporter</name>-&gt;<name>link_path</name></name><argument_list>(<argument><expr><name>report_baton</name></expr></argument>,
                                        <argument><expr><name>this_path</name></expr></argument>,
                                        <argument><expr><name><name>subdir_entry</name>-&gt;<name>url</name></name></expr></argument>,
                                        <argument><expr><name><name>subdir_entry</name>-&gt;<name>revision</name></name></expr></argument>,
                                        <argument><expr><name><name>subdir_entry</name>-&gt;<name>depth</name></name></expr></argument>,
                                        <argument><expr><name>start_empty</name></expr></argument>,
                                        <argument><expr><name><name>subdir_entry</name>-&gt;<name>lock_token</name></name></expr></argument>,
                                        <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
          <comment type="block">/* ... or perhaps just a differing revision, lock token, incomplete
             subdir, the mere presence of the directory in a depth-empty or
             depth-files dir, or if the parent dir is at depth-immediates but
             the child is not at depth-empty. */</comment>
          <else>else <if>if <condition>(<expr><name><name>subdir_entry</name>-&gt;<name>revision</name></name> != <name>dir_rev</name>
                   || <name><name>subdir_entry</name>-&gt;<name>lock_token</name></name>
                   || <name><name>subdir_entry</name>-&gt;<name>incomplete</name></name>
                   || <name><name>dot_entry</name>-&gt;<name>depth</name></name> == <name>svn_depth_empty</name>
                   || <name><name>dot_entry</name>-&gt;<name>depth</name></name> == <name>svn_depth_files</name>
                   || (<name><name>dot_entry</name>-&gt;<name>depth</name></name> == <name>svn_depth_immediates</name>
                       &amp;&amp; <name><name>subdir_entry</name>-&gt;<name>depth</name></name> != <name>svn_depth_empty</name>)</expr>)</condition><then>
            <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>reporter</name>-&gt;<name>set_path</name></name><argument_list>(<argument><expr><name>report_baton</name></expr></argument>,
                                       <argument><expr><name>this_path</name></expr></argument>,
                                       <argument><expr><name><name>subdir_entry</name>-&gt;<name>revision</name></name></expr></argument>,
                                       <argument><expr><name><name>subdir_entry</name>-&gt;<name>depth</name></name></expr></argument>,
                                       <argument><expr><name>start_empty</name></expr></argument>,
                                       <argument><expr><name><name>subdir_entry</name>-&gt;<name>lock_token</name></name></expr></argument>,
                                       <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></else></if></else></if>

          <if>if <condition>(<expr><call><name>SVN_DEPTH_IS_RECURSIVE</name><argument_list>(<argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>report_revisions_and_depths</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>this_path</name></expr></argument>,
                                                <argument><expr><name><name>subdir_entry</name>-&gt;<name>revision</name></name></expr></argument>,
                                                <argument><expr><name>reporter</name></expr></argument>, <argument><expr><name>report_baton</name></expr></argument>,
                                                <argument><expr><name>notify_func</name></expr></argument>, <argument><expr><name>notify_baton</name></expr></argument>,
                                                <argument><expr><name>restore_files</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>,
                                                <argument><expr><name>depth_compatibility_trick</name></expr></argument>,
                                                <argument><expr><name>start_empty</name></expr></argument>,
                                                <argument><expr><name>use_commit_times</name></expr></argument>,
                                                <argument><expr><name>traversal_info</name></expr></argument>,
                                                <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></then></if></else></if> <comment type="block">/* end directory case */</comment>
    }</block></for> <comment type="block">/* end main entries loop */</comment>

  <comment type="block">/* We're done examining this dir's entries, so free everything. */</comment>
  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<escape char="0xc"/>
<comment type="block">/*------------------------------------------------------------------*/</comment>
<comment type="block">/*** Public Interfaces ***/</comment>


<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_crawl_revisions3</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                        <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>svn_ra_reporter3_t</name> *</type><name>reporter</name></decl></param>,
                        <param><decl><type><name>void</name> *</type><name>report_baton</name></decl></param>,
                        <param><decl><type><name>svn_boolean_t</name></type> <name>restore_files</name></decl></param>,
                        <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                        <param><decl><type><name>svn_boolean_t</name></type> <name>depth_compatibility_trick</name></decl></param>,
                        <param><decl><type><name>svn_boolean_t</name></type> <name>use_commit_times</name></decl></param>,
                        <param><decl><type><name>svn_wc_notify_func2_t</name></type> <name>notify_func</name></decl></param>,
                        <param><decl><type><name>void</name> *</type><name>notify_baton</name></decl></param>,
                        <param><decl><type><name>svn_wc_traversal_info_t</name> *</type><name>traversal_info</name></decl></param>,
                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>fserr</name></decl>, *<decl><type ref="prev"/><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>base_rev</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>missing</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>parent_entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_notify_t</name> *</type><name>notify</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>start_empty</name></decl>;</decl_stmt>

  <comment type="block">/* The first thing we do is get the base_rev from the working copy's
     ROOT_DIRECTORY.  This is the first revnum that entries will be
     compared to. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>(! <name>entry</name>) || ((<name><name>entry</name>-&gt;<name>schedule</name></name> == <name>svn_wc_schedule_add</name>)
                    &amp;&amp; (<name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name>))</expr>)</condition><then>
    <block>{
      <comment type="block">/* There aren't any versioned paths to crawl which are known to
         the repository. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_versioned</name><argument_list>(<argument><expr>&amp;<name>parent_entry</name></expr></argument>,
                                      <argument><expr><call><name>svn_path_dirname</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
                                      <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>base_rev</name> = <name><name>parent_entry</name>-&gt;<name>revision</name></name></expr>;</expr_stmt>

      <comment type="block">/* If no versioned path exists, we use the requested depth, which
         is the depth at which the new path should be brought in.  Default
         to infinity if no explicit depth was given. */</comment>
      <if>if <condition>(<expr><name>depth</name> == <name>svn_depth_unknown</name></expr>)</condition><then>
        <expr_stmt><expr><name>depth</name> = <name>svn_depth_infinity</name></expr>;</expr_stmt></then></if>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>reporter</name>-&gt;<name>set_path</name></name><argument_list>(<argument><expr><name>report_baton</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>base_rev</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>,
                                 <argument><expr><name>entry</name> ? <name><name>entry</name>-&gt;<name>incomplete</name></name> : <name>TRUE</name></expr></argument>,
                                 <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>reporter</name>-&gt;<name>delete_path</name></name><argument_list>(<argument><expr><name>report_baton</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Finish the report, which causes the update editor to be
         driven. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>reporter</name>-&gt;<name>finish_report</name></name><argument_list>(<argument><expr><name>report_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
    }</block></then></if>

  <expr_stmt><expr><name>base_rev</name> = <name><name>entry</name>-&gt;<name>revision</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name>start_empty</name> = <name><name>entry</name>-&gt;<name>incomplete</name></name></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>depth_compatibility_trick</name>
      &amp;&amp; <name><name>entry</name>-&gt;<name>depth</name></name> &lt;= <name>svn_depth_immediates</name>
      &amp;&amp; <name>depth</name> &gt; <name><name>entry</name>-&gt;<name>depth</name></name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>start_empty</name> = <name>TRUE</name></expr>;</expr_stmt>
    }</block></then></if>

  <if>if <condition>(<expr><name>base_rev</name> == <name>SVN_INVALID_REVNUM</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dirname</name> <init>= <expr><call><name>svn_path_dirname</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_versioned</name><argument_list>(<argument><expr>&amp;<name>parent_entry</name></expr></argument>, <argument><expr><name>dirname</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
                                      <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>base_rev</name> = <name><name>parent_entry</name>-&gt;<name>revision</name></name></expr>;</expr_stmt>
    }</block></then></if>

  <comment type="block">/* The first call to the reporter merely informs it that the
     top-level directory being updated is at BASE_REV.  Its PATH
     argument is ignored. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>reporter</name>-&gt;<name>set_path</name></name><argument_list>(<argument><expr><name>report_baton</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>base_rev</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>depth</name></name></expr></argument>,
                             <argument><expr><name>start_empty</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>schedule</name></name> != <name>svn_wc_schedule_delete</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>info</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>err</name> = <call><name>svn_io_stat</name><argument_list>(<argument><expr>&amp;<name>info</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_FINFO_MIN</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
        <block>{
          <if>if <condition>(<expr><call><name>APR_STATUS_IS_ENOENT</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>apr_err</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><name>missing</name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
          <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>err</name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

  <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><name>missing</name></expr>)</condition><then>
        <block>{
          <comment type="block">/* Always report directories as missing;  we can't recreate
             them locally. */</comment>
          <expr_stmt><expr><name>err</name> = <call><name><name>reporter</name>-&gt;<name>delete_path</name></name><argument_list>(<argument><expr><name>report_baton</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
            <goto>goto <name>abort_report</name>;</goto></then></if>
        }</block></then>
      <else>else <if>if <condition>(<expr><name>depth</name> != <name>svn_depth_empty</name></expr>)</condition><then>
        <block>{
          <comment type="block">/* Recursively crawl ROOT_DIRECTORY and report differing
             revisions. */</comment>
          <expr_stmt><expr><name>err</name> = <call><name>report_revisions_and_depths</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>,
                                            <argument><expr>""</expr></argument>,
                                            <argument><expr><name>base_rev</name></expr></argument>,
                                            <argument><expr><name>reporter</name></expr></argument>, <argument><expr><name>report_baton</name></expr></argument>,
                                            <argument><expr><name>notify_func</name></expr></argument>, <argument><expr><name>notify_baton</name></expr></argument>,
                                            <argument><expr><name>restore_files</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>,
                                            <argument><expr><name>depth_compatibility_trick</name></expr></argument>,
                                            <argument><expr><name>start_empty</name></expr></argument>,
                                            <argument><expr><name>use_commit_times</name></expr></argument>,
                                            <argument><expr><name>traversal_info</name></expr></argument>,
                                            <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
            <goto>goto <name>abort_report</name>;</goto></then></if>
        }</block></then></if></else></if>
    }</block></then>

  <else>else <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_file</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pdir</name></decl>, *<decl><type ref="prev"/><name>bname</name></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>missing</name> &amp;&amp; <name>restore_files</name></expr>)</condition><then>
        <block>{
          <comment type="block">/* Recreate file from text-base. */</comment>
          <expr_stmt><expr><name>err</name> = <call><name>restore_file</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>use_commit_times</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
            <goto>goto <name>abort_report</name>;</goto></then></if>

          <comment type="block">/* Report the restoration to the caller. */</comment>
          <if>if <condition>(<expr><name>notify_func</name> != <name>NULL</name></expr>)</condition><then>
            <block>{
              <expr_stmt><expr><name>notify</name> = <call><name>svn_wc_create_notify</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>svn_wc_notify_restore</name></expr></argument>,
                                            <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>notify</name>-&gt;<name>kind</name></name> = <name>svn_node_file</name></expr>;</expr_stmt>
              <expr_stmt><expr><call>(*<name>notify_func</name>)<argument_list>(<argument><expr><name>notify_baton</name></expr></argument>, <argument><expr><name>notify</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>

      <comment type="block">/* Split PATH into parent PDIR and basename BNAME. */</comment>
      <expr_stmt><expr><call><name>svn_path_split</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>&amp;<name>pdir</name></expr></argument>, <argument><expr>&amp;<name>bname</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr>! <name>parent_entry</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>err</name> = <call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>parent_entry</name></expr></argument>, <argument><expr><name>pdir</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
            <goto>goto <name>abort_report</name>;</goto></then></if>
        }</block></then></if>

      <if>if <condition>(<expr><name>parent_entry</name>
          &amp;&amp; <name><name>parent_entry</name>-&gt;<name>url</name></name>
          &amp;&amp; <name><name>entry</name>-&gt;<name>url</name></name>
          &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>url</name></name></expr></argument>,
                    <argument><expr><call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>parent_entry</name>-&gt;<name>url</name></name></expr></argument>,
                                               <argument><expr><name>bname</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
          <comment type="block">/* This file is disjoint with respect to its parent
             directory.  Since we are looking at the actual target of
             the report (not some file in a subdirectory of a target
             directory), and that target is a file, we need to pass an
             empty string to link_path. */</comment>
          <expr_stmt><expr><name>err</name> = <call><name><name>reporter</name>-&gt;<name>link_path</name></name><argument_list>(<argument><expr><name>report_baton</name></expr></argument>,
                                    <argument><expr>""</expr></argument>,
                                    <argument><expr><name><name>entry</name>-&gt;<name>url</name></name></expr></argument>,
                                    <argument><expr><name><name>entry</name>-&gt;<name>revision</name></name></expr></argument>,
                                    <argument><expr><name><name>entry</name>-&gt;<name>depth</name></name></expr></argument>,
                                    <argument><expr><name>FALSE</name></expr></argument>,
                                    <argument><expr><name><name>entry</name>-&gt;<name>lock_token</name></name></expr></argument>,
                                    <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
            <goto>goto <name>abort_report</name>;</goto></then></if>
        }</block></then>
      <else>else <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>revision</name></name> != <name>base_rev</name> || <name><name>entry</name>-&gt;<name>lock_token</name></name></expr>)</condition><then>
        <block>{
          <comment type="block">/* If this entry is a file node, we just want to report that
             node's revision.  Since we are looking at the actual target
             of the report (not some file in a subdirectory of a target
             directory), and that target is a file, we need to pass an
             empty string to set_path. */</comment>
          <expr_stmt><expr><name>err</name> = <call><name><name>reporter</name>-&gt;<name>set_path</name></name><argument_list>(<argument><expr><name>report_baton</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>base_rev</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>depth</name></name></expr></argument>,
                                   <argument><expr><name>FALSE</name></expr></argument>,
                                   <argument><expr><name><name>entry</name>-&gt;<name>lock_token</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
            <goto>goto <name>abort_report</name>;</goto></then></if>
        }</block></then></if></else></if>
    }</block></then></if></else></if>

  <comment type="block">/* Finish the report, which causes the update editor to be driven. */</comment>
  <return>return <expr><call><name><name>reporter</name>-&gt;<name>finish_report</name></name><argument_list>(<argument><expr><name>report_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>

 <label><name>abort_report</name>:</label>
  <comment type="block">/* Clean up the fs transaction. */</comment>
  <if>if <condition>(<expr>(<name>fserr</name> = <call><name><name>reporter</name>-&gt;<name>abort_report</name></name><argument_list>(<argument><expr><name>report_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>fserr</name> = <call><name>svn_error_quick_wrap</name><argument_list>(<argument><expr><name>fserr</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Error aborting report"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>svn_error_compose</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>fserr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>


<comment type="block">/*** Compatibility wrapper: turns an svn_ra_reporter2_t into an
     svn_ra_reporter3_t.

     This code looks like it duplicates code in libsvn_ra/ra_loader.c,
     but it does not.  That code makes an new thing look like an old
     thing; this code makes an old thing look like a new thing. ***/</comment>

<struct>struct <name>wrap_3to2_report_baton</name> <block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_ra_reporter2_t</name> *</type><name>reporter</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>baton</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>wrap_3to2_set_path</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>report_baton</name></decl></param>,
                                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                       <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                                       <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                                       <param><decl><type><name>svn_boolean_t</name></type> <name>start_empty</name></decl></param>,
                                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lock_token</name></decl></param>,
                                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>wrap_3to2_report_baton</name> *</type><name>wrb</name> <init>= <expr><name>report_baton</name></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name><name>wrb</name>-&gt;<name>reporter</name>-&gt;<name>set_path</name></name><argument_list>(<argument><expr><name><name>wrb</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>start_empty</name></expr></argument>,
                                 <argument><expr><name>lock_token</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>wrap_3to2_delete_path</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>report_baton</name></decl></param>,
                                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>wrap_3to2_report_baton</name> *</type><name>wrb</name> <init>= <expr><name>report_baton</name></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name><name>wrb</name>-&gt;<name>reporter</name>-&gt;<name>delete_path</name></name><argument_list>(<argument><expr><name><name>wrb</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>wrap_3to2_link_path</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>report_baton</name></decl></param>,
                                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
                                        <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                                        <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                                        <param><decl><type><name>svn_boolean_t</name></type> <name>start_empty</name></decl></param>,
                                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lock_token</name></decl></param>,
                                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>wrap_3to2_report_baton</name> *</type><name>wrb</name> <init>= <expr><name>report_baton</name></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name><name>wrb</name>-&gt;<name>reporter</name>-&gt;<name>link_path</name></name><argument_list>(<argument><expr><name><name>wrb</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>,
                                  <argument><expr><name>start_empty</name></expr></argument>, <argument><expr><name>lock_token</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>wrap_3to2_finish_report</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>report_baton</name></decl></param>,
                                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>wrap_3to2_report_baton</name> *</type><name>wrb</name> <init>= <expr><name>report_baton</name></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name><name>wrb</name>-&gt;<name>reporter</name>-&gt;<name>finish_report</name></name><argument_list>(<argument><expr><name><name>wrb</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>wrap_3to2_abort_report</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>report_baton</name></decl></param>,
                                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>wrap_3to2_report_baton</name> *</type><name>wrb</name> <init>= <expr><name>report_baton</name></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name><name>wrb</name>-&gt;<name>reporter</name>-&gt;<name>abort_report</name></name><argument_list>(<argument><expr><name><name>wrb</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_ra_reporter3_t</name></type> <name>wrap_3to2_reporter</name> <init>= <expr><block>{
  <expr><name>wrap_3to2_set_path</name></expr>,
  <expr><name>wrap_3to2_delete_path</name></expr>,
  <expr><name>wrap_3to2_link_path</name></expr>,
  <expr><name>wrap_3to2_finish_report</name></expr>,
  <expr><name>wrap_3to2_abort_report</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_crawl_revisions2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                        <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>svn_ra_reporter2_t</name> *</type><name>reporter</name></decl></param>,
                        <param><decl><type><name>void</name> *</type><name>report_baton</name></decl></param>,
                        <param><decl><type><name>svn_boolean_t</name></type> <name>restore_files</name></decl></param>,
                        <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                        <param><decl><type><name>svn_boolean_t</name></type> <name>use_commit_times</name></decl></param>,
                        <param><decl><type><name>svn_wc_notify_func2_t</name></type> <name>notify_func</name></decl></param>,
                        <param><decl><type><name>void</name> *</type><name>notify_baton</name></decl></param>,
                        <param><decl><type><name>svn_wc_traversal_info_t</name> *</type><name>traversal_info</name></decl></param>,
                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>wrap_3to2_report_baton</name></type> <name>wrb</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>wrb</name>.<name>reporter</name></name> = <name>reporter</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>wrb</name>.<name>baton</name></name> = <name>report_baton</name></expr>;</expr_stmt>

  <return>return <expr><call><name>svn_wc_crawl_revisions3</name><argument_list>(<argument><expr><name>path</name></expr></argument>,
                                 <argument><expr><name>adm_access</name></expr></argument>,
                                 <argument><expr>&amp;<name>wrap_3to2_reporter</name></expr></argument>, <argument><expr>&amp;<name>wrb</name></expr></argument>,
                                 <argument><expr><name>restore_files</name></expr></argument>,
                                 <argument><expr><call><name>SVN_DEPTH_INFINITY_OR_FILES</name><argument_list>(<argument><expr><name>recurse</name></expr></argument>)</argument_list></call></expr></argument>,
                                 <argument><expr><name>FALSE</name></expr></argument>,
                                 <argument><expr><name>use_commit_times</name></expr></argument>,
                                 <argument><expr><name>notify_func</name></expr></argument>,
                                 <argument><expr><name>notify_baton</name></expr></argument>,
                                 <argument><expr><name>traversal_info</name></expr></argument>,
                                 <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<comment type="block">/*** Compatibility wrapper: turns an svn_ra_reporter_t into an
     svn_ra_reporter2_t.

     This code looks like it duplicates code in libsvn_ra/ra_loader.c,
     but it does not.  That code makes an new thing look like an old
     thing; this code makes an old thing look like a new thing. ***/</comment>

<struct>struct <name>wrap_2to1_report_baton</name> <block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_ra_reporter_t</name> *</type><name>reporter</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>baton</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>wrap_2to1_set_path</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>report_baton</name></decl></param>,
                                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                       <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                                       <param><decl><type><name>svn_boolean_t</name></type> <name>start_empty</name></decl></param>,
                                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lock_token</name></decl></param>,
                                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>wrap_2to1_report_baton</name> *</type><name>wrb</name> <init>= <expr><name>report_baton</name></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name><name>wrb</name>-&gt;<name>reporter</name>-&gt;<name>set_path</name></name><argument_list>(<argument><expr><name><name>wrb</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>start_empty</name></expr></argument>,
                                 <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>wrap_2to1_delete_path</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>report_baton</name></decl></param>,
                                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>wrap_2to1_report_baton</name> *</type><name>wrb</name> <init>= <expr><name>report_baton</name></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name><name>wrb</name>-&gt;<name>reporter</name>-&gt;<name>delete_path</name></name><argument_list>(<argument><expr><name><name>wrb</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>wrap_2to1_link_path</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>report_baton</name></decl></param>,
                                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
                                        <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                                        <param><decl><type><name>svn_boolean_t</name></type> <name>start_empty</name></decl></param>,
                                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lock_token</name></decl></param>,
                                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>wrap_2to1_report_baton</name> *</type><name>wrb</name> <init>= <expr><name>report_baton</name></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name><name>wrb</name>-&gt;<name>reporter</name>-&gt;<name>link_path</name></name><argument_list>(<argument><expr><name><name>wrb</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>,
                                  <argument><expr><name>start_empty</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>wrap_2to1_finish_report</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>report_baton</name></decl></param>,
                                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>wrap_2to1_report_baton</name> *</type><name>wrb</name> <init>= <expr><name>report_baton</name></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name><name>wrb</name>-&gt;<name>reporter</name>-&gt;<name>finish_report</name></name><argument_list>(<argument><expr><name><name>wrb</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>wrap_2to1_abort_report</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>report_baton</name></decl></param>,
                                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>wrap_2to1_report_baton</name> *</type><name>wrb</name> <init>= <expr><name>report_baton</name></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name><name>wrb</name>-&gt;<name>reporter</name>-&gt;<name>abort_report</name></name><argument_list>(<argument><expr><name><name>wrb</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_ra_reporter2_t</name></type> <name>wrap_2to1_reporter</name> <init>= <expr><block>{
  <expr><name>wrap_2to1_set_path</name></expr>,
  <expr><name>wrap_2to1_delete_path</name></expr>,
  <expr><name>wrap_2to1_link_path</name></expr>,
  <expr><name>wrap_2to1_finish_report</name></expr>,
  <expr><name>wrap_2to1_abort_report</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_crawl_revisions</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                       <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>svn_ra_reporter_t</name> *</type><name>reporter</name></decl></param>,
                       <param><decl><type><name>void</name> *</type><name>report_baton</name></decl></param>,
                       <param><decl><type><name>svn_boolean_t</name></type> <name>restore_files</name></decl></param>,
                       <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                       <param><decl><type><name>svn_boolean_t</name></type> <name>use_commit_times</name></decl></param>,
                       <param><decl><type><name>svn_wc_notify_func_t</name></type> <name>notify_func</name></decl></param>,
                       <param><decl><type><name>void</name> *</type><name>notify_baton</name></decl></param>,
                       <param><decl><type><name>svn_wc_traversal_info_t</name> *</type><name>traversal_info</name></decl></param>,
                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>wrap_2to1_report_baton</name></type> <name>wrb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc__compat_notify_baton_t</name></type> <name>nb</name></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>wrb</name>.<name>reporter</name></name> = <name>reporter</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>wrb</name>.<name>baton</name></name> = <name>report_baton</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>nb</name>.<name>func</name></name> = <name>notify_func</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>nb</name>.<name>baton</name></name> = <name>notify_baton</name></expr>;</expr_stmt>

  <return>return <expr><call><name>svn_wc_crawl_revisions2</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr>&amp;<name>wrap_2to1_reporter</name></expr></argument>, <argument><expr>&amp;<name>wrb</name></expr></argument>,
                                 <argument><expr><name>restore_files</name></expr></argument>, <argument><expr><name>recurse</name></expr></argument>, <argument><expr><name>use_commit_times</name></expr></argument>,
                                 <argument><expr><name>svn_wc__compat_call_notify_func</name></expr></argument>, <argument><expr>&amp;<name>nb</name></expr></argument>,
                                 <argument><expr><name>traversal_info</name></expr></argument>,
                                 <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<comment type="block">/*** Copying stream ***/</comment>

<comment type="block">/* A copying stream is a bit like the unix tee utility:
 *
 * It reads the SOURCE when asked for data and while returning it,
 * also writes the same data to TARGET.
 */</comment>
<struct>struct <name>copying_stream_baton</name>
<block>{
  <comment type="block">/* Stream to read input from. */</comment>
  <decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>source</name></decl>;</decl_stmt>

  <comment type="block">/* Stream to write all data read to. */</comment>
  <decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>target</name></decl>;</decl_stmt>
}</block>;</struct>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>read_handler_copy</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>char</name> *</type><name>buffer</name></decl></param>, <param><decl><type><name>apr_size_t</name> *</type><name>len</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>copying_stream_baton</name> *</type><name>btn</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_read</name><argument_list>(<argument><expr><name><name>btn</name>-&gt;<name>source</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>svn_stream_write</name><argument_list>(<argument><expr><name><name>btn</name>-&gt;<name>target</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>close_handler_copy</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>copying_stream_baton</name> *</type><name>btn</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_close</name><argument_list>(<argument><expr><name><name>btn</name>-&gt;<name>target</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>svn_stream_close</name><argument_list>(<argument><expr><name><name>btn</name>-&gt;<name>source</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<comment type="block">/* Return a stream - allocated in POOL - which reads its input
 * from SOURCE and, while returning that to the caller, at the
 * same time writes that to TARGET.
 */</comment>
<function><type><specifier>static</specifier> <name>svn_stream_t</name> *</type>
<name>copying_stream</name><parameter_list>(<param><decl><type><name>svn_stream_t</name> *</type><name>source</name></decl></param>,
               <param><decl><type><name>svn_stream_t</name> *</type><name>target</name></decl></param>,
               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>copying_stream_baton</name> *</type><name>baton</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>stream</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>baton</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>*<name>baton</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>baton</name>-&gt;<name>source</name></name> = <name>source</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>baton</name>-&gt;<name>target</name></name> = <name>target</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>stream</name> = <call><name>svn_stream_create</name><argument_list>(<argument><expr><name>baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_stream_set_read</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>read_handler_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_stream_set_close</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>close_handler_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>stream</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_transmit_text_deltas2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>tempfile</name></decl></param>,
                             <param><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[]</index></name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                             <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                             <param><decl><type><name>svn_boolean_t</name></type> <name>fulltext</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>editor</name></decl></param>,
                             <param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmp_base</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_txdelta_window_handler_t</name></type> <name>handler</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>wh_baton</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_txdelta_stream_t</name> *</type><name>txdelta_stream</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_file_t</name> *</type><name>basefile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_file_t</name> *</type><name>tempbasefile</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_digest_hex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type><name>base_digest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type><name>local_digest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>ent</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>base_stream</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>local_stream</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_time_t</name></type> <name>wf_time</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>ent</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get timestamp of working file, to check for modifications during
     commit. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_affected_time</name><argument_list>(<argument><expr>&amp;<name>wf_time</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Translated input */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_translated_stream</name><argument_list>(<argument><expr>&amp;<name>local_stream</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
                                   <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>SVN_WC_TRANSLATE_TO_NF</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



  <expr_stmt><expr><name>tmp_base</name> = <call><name>svn_wc__text_base_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* Alert the caller that we have created a temporary file that might
     need to be cleaned up, if he asked for one. */</comment>
  <if>if <condition>(<expr><name>tempfile</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr>*<name>tempfile</name> = <name>tmp_base</name></expr>;</expr_stmt>

      <comment type="block">/* Make an untranslated copy of the working file in the
         administrative tmp area because a) we need to detranslate eol
         and keywords anyway, and b) after the commit, we're going to
         copy the tmp file to become the new text base anyway. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_open</name><argument_list>(<argument><expr>&amp;<name>tempbasefile</name></expr></argument>, <argument><expr><name>tmp_base</name></expr></argument>,
                               <argument><expr><name>APR_WRITE</name> | <name>APR_CREATE</name></expr></argument>, <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Wrap the translated stream with a new stream that writes the
         translated contents into the new text base file as we read from it.
         Note that the new text base file will be closed when the new stream
         is closed. */</comment>
      <expr_stmt><expr><name>local_stream</name>
        = <call><name>copying_stream</name><argument_list>(<argument><expr><name>local_stream</name></expr></argument>,
                         <argument><expr><call><name>svn_stream_from_aprfile2</name><argument_list>(<argument><expr><name>tempbasefile</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
                         <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <if>if <condition>(<expr>! <name>fulltext</name></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr>! <name><name>ent</name>-&gt;<name>checksum</name></name></expr>)</condition><then>
        <block>{
          <comment type="block">/*### FIXME: The entries file should hold a checksum */</comment>
          <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>tmp_digest</name><index>[<expr><name>APR_MD5_DIGESTSIZE</name></expr>]</index></name></decl>;</decl_stmt>

          <comment type="block">/* If there's no checksum in this entry, calculate one */</comment>
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tb</name> <init>= <expr><call><name>svn_wc__text_base_path</name> <argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <expr_stmt><expr><call><name>SVN_ERR</name> <argument_list>(<argument><expr><call><name>svn_io_file_checksum</name> <argument_list>(<argument><expr><name>tmp_digest</name></expr></argument>, <argument><expr><name>tb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>base_digest_hex</name> = <call><name>svn_md5_digest_to_cstring_display</name><argument_list>(<argument><expr><name>tmp_digest</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else
        <expr_stmt><expr><name>base_digest_hex</name> = <name><name>ent</name>-&gt;<name>checksum</name></name></expr>;</expr_stmt></else></if>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__open_text_base</name><argument_list>(<argument><expr>&amp;<name>basefile</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_READ</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <comment type="block">/* Tell the editor that we're about to apply a textdelta to the
     file baton; the editor returns to us a window consumer and baton.  */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>editor</name>-&gt;<name>apply_textdelta</name></name>
          <argument_list>(<argument><expr><name>file_baton</name></expr></argument>, <argument><expr><name>base_digest_hex</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>&amp;<name>handler</name></expr></argument>, <argument><expr>&amp;<name>wh_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Create a text-delta stream object that pulls
     data out of the two files. */</comment>
  <expr_stmt><expr><name>base_stream</name> = <call><name>svn_stream_from_aprfile2</name><argument_list>(<argument><expr><name>basefile</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>! <name>fulltext</name></expr>)</condition><then>
    <expr_stmt><expr><name>base_stream</name>
      = <call><name>svn_stream_checksummed</name><argument_list>(<argument><expr><name>base_stream</name></expr></argument>, <argument><expr>&amp;<name>base_digest</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <expr_stmt><expr><call><name>svn_txdelta</name><argument_list>(<argument><expr>&amp;<name>txdelta_stream</name></expr></argument>, <argument><expr><name>base_stream</name></expr></argument>, <argument><expr><name>local_stream</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Pull windows from the delta stream and feed to the consumer. */</comment>
  <expr_stmt><expr><name>err</name> = <call><name>svn_txdelta_send_txstream</name><argument_list>(<argument><expr><name>txdelta_stream</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>, <argument><expr><name>wh_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Close the two streams to force writing the digest,
     if we already have an error, ignore this one. */</comment>
  <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name>svn_stream_close</name><argument_list>(<argument><expr><name>base_stream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name>svn_stream_close</name><argument_list>(<argument><expr><name>local_stream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_close</name><argument_list>(<argument><expr><name>base_stream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_close</name><argument_list>(<argument><expr><name>local_stream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <comment type="block">/* If we have an error, it may be caused by a corrupt text base.
     Check the checksum and discard `err' if they don't match. */</comment>
  <if>if <condition>(<expr>! <name>fulltext</name> &amp;&amp; <name><name>ent</name>-&gt;<name>checksum</name></name> &amp;&amp; <name>base_digest</name></expr>)</condition><then>
    <block>{
      <comment type="block">/*### FIXME: The entries file should hold a checksum,
        meaning the above condition should not include ent-&gt;checksum */</comment>

      <expr_stmt><expr><name>base_digest_hex</name> = <call><name>svn_md5_digest_to_cstring_display</name><argument_list>(<argument><expr><name>base_digest</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>base_digest_hex</name></expr></argument>, <argument><expr><name><name>ent</name>-&gt;<name>checksum</name></name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
        <block>{
          <comment type="block">/* The entry checksum does not match the actual text
             base checksum.  Extreme badness. Of course,
             theoretically we could just switch to
             fulltext transmission here, and everything would
             work fine; after all, we're going to replace the
             text base with a new one in a moment anyway, and
             we'd fix the checksum then.  But it's better to
             error out.  People should know that their text
             bases are getting corrupted, so they can
             investigate.  Other commands could be affected,
             too, such as `svn diff'.  */</comment>

          <comment type="block">/* Deliberately ignore errors; the error about the
             checksum mismatch is more important to return. */</comment>
          <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name>svn_io_remove_file</name><argument_list>(<argument><expr><name>tmp_base</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <return>return <expr><call><name>svn_error_createf</name>
            <argument_list>(<argument><expr><name>SVN_ERR_WC_CORRUPT_TEXT_BASE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
             <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Checksum mismatch for '%s'; "
               "expected: '%s', actual: '%s'"</expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><call><name>svn_wc__text_base_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
                                   <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><name><name>ent</name>-&gt;<name>checksum</name></name></expr></argument>, <argument><expr><name>base_digest_hex</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
   }</block></then></if>

  <comment type="block">/* Now, handle that delta transmission error if any, so we can stop
     thinking about it after this point. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR_W</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
                              <argument><expr><call><name>_</name><argument_list>(<argument><expr>"While preparing '%s' for commit"</expr></argument>)</argument_list></call></expr></argument>,
                              <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Close base file, if it was opened. */</comment>
  <if>if <condition>(<expr><name>basefile</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__close_text_base</name><argument_list>(<argument><expr><name>basefile</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <expr_stmt><expr><name>local_digest</name> = <call><name>svn_txdelta_md5_digest</name><argument_list>(<argument><expr><name>txdelta_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>digest</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name>local_digest</name></expr></argument>, <argument><expr><name>APR_MD5_DIGESTSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <comment type="block">/* Close the file baton, and get outta here. */</comment>
  <return>return <expr><call><name><name>editor</name>-&gt;<name>close_file</name></name>
    <argument_list>(<argument><expr><name>file_baton</name></expr></argument>, <argument><expr><call><name>svn_md5_digest_to_cstring</name><argument_list>(<argument><expr><name>local_digest</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_transmit_text_deltas</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                            <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                            <param><decl><type><name>svn_boolean_t</name></type> <name>fulltext</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>editor</name></decl></param>,
                            <param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>tempfile</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_wc_transmit_text_deltas2</name><argument_list>(<argument><expr><name>tempfile</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
                                      <argument><expr><name>fulltext</name></expr></argument>, <argument><expr><name>editor</name></expr></argument>, <argument><expr><name>file_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_transmit_prop_deltas</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                            <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>editor</name></decl></param>,
                            <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>tempfile</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>propmods</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>tempfile</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>tempfile</name> = <name>NULL</name></expr>;</expr_stmt></then></if>

  <comment type="block">/* Get an array of local changes by comparing the hashes. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_get_prop_diffs</name><argument_list>(<argument><expr>&amp;<name>propmods</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Apply each local change to the baton */</comment>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>propmods</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>svn_prop_t</name> *</type><name>p</name> <init>= <expr>&amp;<call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>propmods</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_prop_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_file</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>editor</name>-&gt;<name>change_file_prop</name></name><argument_list>(<argument><expr><name>baton</name></expr></argument>, <argument><expr><name><name>p</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>p</name>-&gt;<name>value</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
      <else>else
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>editor</name>-&gt;<name>change_dir_prop</name></name><argument_list>(<argument><expr><name>baton</name></expr></argument>, <argument><expr><name><name>p</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>p</name>-&gt;<name>value</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    }</block></for>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
