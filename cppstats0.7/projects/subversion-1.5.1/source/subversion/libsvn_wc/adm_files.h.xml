<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_wc/adm_files.h"><comment type="block">/*
 * adm_files.h :  handles locations inside the wc adm area
 *                (This should be the only code that actually knows
 *                *where* things are in .svn/.  If you can't get to
 *                something via these interfaces, something's wrong.)
 *
 * ====================================================================
 * Copyright (c) 2000-2004 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<escape char="0xc"/>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVN_LIBSVN_WC_ADM_FILES_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_LIBSVN_WC_ADM_FILES_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"props.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<escape char="0xc"/>

<comment type="block">/* Return a path to something in PATH's administrative area.
 * Return path to the thing in the tmp area if TMP is non-zero.
 * Varargs are (const char *)'s, the final one must be NULL.
 */</comment>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type> <name>svn_wc__adm_path</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                              <param><decl><type><name>svn_boolean_t</name></type> <name>tmp</name></decl></param>,
                              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                              <param><decl><type>...</type></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Return TRUE if a thing in the administrative area exists, FALSE
   otherwise. */</comment>
<function_decl><type><name>svn_boolean_t</name></type> <name>svn_wc__adm_path_exists</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                      <param><decl><type><name>svn_boolean_t</name></type> <name>tmp</name></decl></param>,
                                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                      <param><decl><type>...</type></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Make `PATH/&lt;adminstrative_subdir&gt;/THING'. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_wc__make_adm_thing</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>thing</name></decl></param>,
                                    <param><decl><type><name>svn_node_kind_t</name></type> <name>type</name></decl></param>,
                                    <param><decl><type><name>apr_fileperms_t</name></type> <name>perms</name></decl></param>,
                                    <param><decl><type><name>svn_boolean_t</name></type> <name>tmp</name></decl></param>,
                                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Create a killme file in the administrative area, indicating that the
   directory containing the administrative area should be removed.

   If ADM_ONLY is true then remove only the administrative areas for the
   directory and subdirectories. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_wc__make_killme</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                                 <param><decl><type><name>svn_boolean_t</name></type> <name>adm_only</name></decl></param>,
                                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Set EXISTS to TRUE if a killme file exists in the administrative area,
   FALSE otherwise.

   If EXISTS is true, set KILL_ADM_ONLY to the value passed to
   svn_wc__make_killme() above. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_wc__check_killme</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                                  <param><decl><type><name>svn_boolean_t</name> *</type><name>exists</name></decl></param>,
                                  <param><decl><type><name>svn_boolean_t</name> *</type><name>kill_adm_only</name></decl></param>,
                                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Atomically rename a temporary text-base file to its canonical
   location.  The tmp file should be closed already. */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc__sync_text_base</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Return a path to PATH's text-base file.
   If TMP is set, return a path to the tmp text-base file. */</comment>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>svn_wc__text_base_path</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                   <param><decl><type><name>svn_boolean_t</name></type> <name>tmp</name></decl></param>,
                                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Return a path to PATH's revert file.
   If TMP is set, return a path to the tmp revert file. */</comment>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_wc__text_revert_path</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                         <param><decl><type><name>svn_boolean_t</name></type> <name>tmp</name></decl></param>,
                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Set *PROP_PATH to PATH's PROPS_KIND properties file.
   If TMP is set, return a path to the tmp working property file.
   PATH can be a directory or file, and even have changed w.r.t. the
   working copy's adm knowledge. Valid values for NODE_KIND are svn_node_dir
   and svn_node_file. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_wc__prop_path</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>prop_path</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                               <param><decl><type><name>svn_node_kind_t</name></type> <name>node_kind</name></decl></param>,
                               <param><decl><type><name>svn_wc__props_kind_t</name></type> <name>props_kind</name></decl></param>,
                               <param><decl><type><name>svn_boolean_t</name></type> <name>tmp</name></decl></param>,
                               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<escape char="0xc"/>
<comment type="block">/*** Opening all kinds of adm files ***/</comment>

<comment type="block">/* Yo, read this if you open and close files in the adm area:
 *
 * When you open a file for writing with svn_wc__open_foo(), the file
 * is actually opened in the corresponding location in the tmp/
 * directory.  Opening with APR_APPEND is not supported.  You are
 * guaranteed to be the owner of the new file.
 *
 * Somehow, this tmp file must eventually get renamed to its real
 * destination in the adm area.  You can do it either by passing the
 * SYNC flag to svn_wc__close_foo(), or by calling
 * svn_wc__sync_foo() (though of course you should still have
 * called svn_wc__close_foo() first, just without the SYNC flag).
 *
 * In other words, the adm area is only capable of modifying files
 * atomically, but you get some control over when the rename happens.
 */</comment>

<comment type="block">/* Open `PATH/&lt;adminstrative_subdir&gt;/FNAME'. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_wc__open_adm_file</name><parameter_list>(<param><decl><type><name>apr_file_t</name> **</type><name>handle</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fname</name></decl></param>,
                                   <param><decl><type><name>apr_int32_t</name></type> <name>flags</name></decl></param>,
                                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Close `PATH/&lt;adminstrative_subdir&gt;/FNAME'. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_wc__close_adm_file</name><parameter_list>(<param><decl><type><name>apr_file_t</name> *</type><name>fp</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fname</name></decl></param>,
                                    <param><decl><type><name>int</name></type> <name>sync</name></decl></param>,
                                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Remove `PATH/&lt;adminstrative_subdir&gt;/THING'. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_wc__remove_adm_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                     <param><decl><type>...</type></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Open the text-base for FILE.
 * FILE can be any kind of path ending with a filename.
 * Behaves like svn_wc__open_adm_file(), which see.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_wc__open_text_base</name><parameter_list>(<param><decl><type><name>apr_file_t</name> **</type><name>handle</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl></param>,
                                    <param><decl><type><name>apr_int32_t</name></type> <name>flags</name></decl></param>,
                                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Open the revert-base for FILE.
 * FILE can be any kind of path ending with a filename.
 * Behaves like svn_wc__open_adm_file(), which see.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_wc__open_revert_base</name><parameter_list>(<param><decl><type><name>apr_file_t</name> **</type><name>handle</name></decl></param>,
                                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl></param>,
                                      <param><decl><type><name>apr_int32_t</name></type> <name>flags</name></decl></param>,
                                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Close the text-base for FILE.
 * FP was obtained from svn_wc__open_text_base().
 * Behaves like svn_wc__close_adm_file(), which see.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_wc__close_text_base</name><parameter_list>(<param><decl><type><name>apr_file_t</name> *</type><name>fp</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl></param>,
                                     <param><decl><type><name>int</name></type> <name>sync</name></decl></param>,
                                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Close the revert-base for FILE.
 * FP was obtained from svn_wc__open_revert_base().
 * Behaves like svn_wc__close_adm_file(), which see.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_wc__close_revert_base</name><parameter_list>(<param><decl><type><name>apr_file_t</name> *</type><name>fp</name></decl></param>,
                                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl></param>,
                                       <param><decl><type><name>int</name></type> <name>sync</name></decl></param>,
                                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Open the property file for PATH.
 * PATH can be any kind of path, either file or dir.
 *
 * If BASE is set, then the "pristine" property file will be opened.
 * If WCPROPS is set, then the "wc" property file will be opened.
 *
 * (Don't set BASE and WCPROPS at the same time; this is meaningless.)
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_wc__open_props</name><parameter_list>(<param><decl><type><name>apr_file_t</name> **</type><name>handle</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                <param><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl></param>,
                                <param><decl><type><name>apr_int32_t</name></type> <name>flags</name></decl></param>,
                                <param><decl><type><name>svn_boolean_t</name></type> <name>base</name></decl></param>,
                                <param><decl><type><name>svn_boolean_t</name></type> <name>wcprops</name></decl></param>,
                                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Close the property file for PATH.
 * FP was obtained from svn_wc__open_props().
 *
 * The BASE and WCPROPS must have the same state used to open the file!
 *
 * Like svn_wc__close_adm_file(), SYNC indicates the file should be
 * atomically written.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_wc__close_props</name><parameter_list>(<param><decl><type><name>apr_file_t</name> *</type><name>fp</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                 <param><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl></param>,
                                 <param><decl><type><name>svn_boolean_t</name></type> <name>base</name></decl></param>,
                                 <param><decl><type><name>svn_boolean_t</name></type> <name>wcprops</name></decl></param>,
                                 <param><decl><type><name>int</name></type> <name>sync</name></decl></param>,
                                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Blow away the admistrative directory associated with the access baton
   ADM_ACCESS. This closes ADM_ACCESS, but it is safe to close ADM_ACCESS
   again, after calling this function. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_wc__adm_destroy</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Cleanup the temporary storage area of the administrative
   directory. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_wc__adm_cleanup_tmp_area</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SVN_LIBSVN_WC_ADM_FILES_H */</comment>
</unit>
