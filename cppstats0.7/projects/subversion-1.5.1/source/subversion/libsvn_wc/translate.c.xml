<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_wc/translate.c"><comment type="block">/*
 * translate.c :  wc-specific eol/keyword substitution
 *
 * ====================================================================
 * Copyright (c) 2000-2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>


<escape char="0xc"/>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_file_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_subst.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_props.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"adm_files.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"translate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"props.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_wc_private.h"</cpp:file></cpp:include>



<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>read_handler_unsupported</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>char</name> *</type><name>buffer</name></decl></param>, <param><decl><type><name>apr_size_t</name> *</type><name>len</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>write_handler_unsupported</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>buffer</name></decl></param>, <param><decl><type><name>apr_size_t</name> *</type><name>len</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_translated_stream</name><parameter_list>(<param><decl><type><name>svn_stream_t</name> **</type><name>stream</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>versioned_file</name></decl></param>,
                         <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                         <param><decl><type><name>apr_uint32_t</name></type> <name>flags</name></decl></param>,
                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_subst_eol_style_t</name></type> <name>style</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>eol</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>keywords</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>special</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>to_nf</name> <init>= <expr><name>flags</name> &amp; <name>SVN_WC_TRANSLATE_TO_NF</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__get_eol_style</name><argument_list>(<argument><expr>&amp;<name>style</name></expr></argument>, <argument><expr>&amp;<name>eol</name></expr></argument>, <argument><expr><name>versioned_file</name></expr></argument>,
                                <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__get_keywords</name><argument_list>(<argument><expr>&amp;<name>keywords</name></expr></argument>, <argument><expr><name>versioned_file</name></expr></argument>,
                               <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__get_special</name><argument_list>(<argument><expr>&amp;<name>special</name></expr></argument>, <argument><expr><name>versioned_file</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>special</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_subst_stream_from_specialfile</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <block>{
      <decl_stmt><decl><type><name>apr_file_t</name> *</type><name>file</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>repair_forced</name> <init>= <expr><name>flags</name> &amp; <name>SVN_WC_TRANSLATE_FORCE_EOL_REPAIR</name></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_open</name><argument_list>(<argument><expr>&amp;<name>file</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
                               <argument><expr><name>to_nf</name> ? (<name>APR_READ</name> | <name>APR_BUFFERED</name>)
                               : (<name>APR_CREATE</name> | <name>APR_WRITE</name> | <name>APR_BUFFERED</name>)</expr></argument>,
                               <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr>*<name>stream</name> = <call><name>svn_stream_from_aprfile2</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><call><name>svn_subst_translation_required</name><argument_list>(<argument><expr><name>style</name></expr></argument>, <argument><expr><name>eol</name></expr></argument>, <argument><expr><name>keywords</name></expr></argument>, <argument><expr><name>special</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
          <if>if <condition>(<expr><name>to_nf</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_subst_stream_translated_to_normal_form</name>
                    <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>*<name>stream</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>eol</name></expr></argument>, <argument><expr><name>repair_forced</name></expr></argument>,
                     <argument><expr><name>keywords</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
          <else>else
            <expr_stmt><expr>*<name>stream</name> = <call><name>svn_subst_stream_translated</name>
              <argument_list>(<argument><expr>*<name>stream</name></expr></argument>, <argument><expr><name>eol</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>keywords</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
        }</block></then></if>
    }</block></else></if>

  <comment type="block">/* Enfore our contract, because a specialfile stream won't */</comment>
  <if>if <condition>(<expr><name>to_nf</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>svn_stream_set_write</name><argument_list>(<argument><expr>*<name>stream</name></expr></argument>, <argument><expr><name>write_handler_unsupported</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><call><name>svn_stream_set_read</name><argument_list>(<argument><expr>*<name>stream</name></expr></argument>, <argument><expr><name>read_handler_unsupported</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_translated_file2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>xlated_path</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>versioned_file</name></decl></param>,
                        <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                        <param><decl><type><name>apr_uint32_t</name></type> <name>flags</name></decl></param>,
                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_subst_eol_style_t</name></type> <name>style</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>eol</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>keywords</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>special</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__get_eol_style</name><argument_list>(<argument><expr>&amp;<name>style</name></expr></argument>, <argument><expr>&amp;<name>eol</name></expr></argument>, <argument><expr><name>versioned_file</name></expr></argument>,
                                <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__get_keywords</name><argument_list>(<argument><expr>&amp;<name>keywords</name></expr></argument>, <argument><expr><name>versioned_file</name></expr></argument>,
                               <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__get_special</name><argument_list>(<argument><expr>&amp;<name>special</name></expr></argument>, <argument><expr><name>versioned_file</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <if>if <condition>(<expr>! <call><name>svn_subst_translation_required</name><argument_list>(<argument><expr><name>style</name></expr></argument>, <argument><expr><name>eol</name></expr></argument>, <argument><expr><name>keywords</name></expr></argument>, <argument><expr><name>special</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call>
      &amp;&amp; (! (<name>flags</name> &amp; <name>SVN_WC_TRANSLATE_FORCE_COPY</name>))</expr>)</condition><then>
    <block>{
      <comment type="block">/* Translation would be a no-op, so return the original file. */</comment>
      <expr_stmt><expr>*<name>xlated_path</name> = <name>src</name></expr>;</expr_stmt>

    }</block></then>
  <else>else  <comment type="block">/* some translation (or copying) is necessary */</comment>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmp_dir</name></decl>, *<decl><type ref="prev"/><name>tmp_vfile</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>repair_forced</name> <init>= <expr><name>flags</name> &amp; <name>SVN_WC_TRANSLATE_FORCE_EOL_REPAIR</name></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>svn_path_split</name><argument_list>(<argument><expr><name>versioned_file</name></expr></argument>, <argument><expr>&amp;<name>tmp_dir</name></expr></argument>, <argument><expr>&amp;<name>tmp_vfile</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>flags</name> &amp; <name>SVN_WC_TRANSLATE_USE_GLOBAL_TMP</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_temp_dir</name><argument_list>(<argument><expr>&amp;<name>tmp_dir</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>tmp_vfile</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>tmp_dir</name></expr></argument>, <argument><expr>"svndiff"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else
        <expr_stmt><expr><name>tmp_vfile</name> = <call><name>svn_wc__adm_path</name><argument_list>(<argument><expr><name>tmp_dir</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>tmp_vfile</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_open_unique_file2</name>
              <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>tmp_vfile</name></expr></argument>,
               <argument><expr><name>tmp_vfile</name></expr></argument>,
               <argument><expr><name>SVN_WC__TMP_EXT</name></expr></argument>,
               <argument><expr>(<name>flags</name> &amp; <name>SVN_WC_TRANSLATE_NO_OUTPUT_CLEANUP</name>)
               ? <name>svn_io_file_del_none</name> : <name>svn_io_file_del_on_pool_cleanup</name></expr></argument>,
               <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>flags</name> &amp; <name>SVN_WC_TRANSLATE_TO_NF</name></expr>)</condition><then>
        <comment type="block">/* to normal form */</comment>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_subst_translate_to_normal_form</name>
                <argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>tmp_vfile</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>eol</name></expr></argument>,
                 <argument><expr><name>repair_forced</name></expr></argument>,
                 <argument><expr><name>keywords</name></expr></argument>, <argument><expr><name>special</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
      <else>else <comment type="block">/* from normal form */</comment>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_subst_copy_and_translate3</name>
                <argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>tmp_vfile</name></expr></argument>,
                 <argument><expr><name>eol</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
                 <argument><expr><name>keywords</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
                 <argument><expr><name>special</name></expr></argument>,
                 <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

      <expr_stmt><expr>*<name>xlated_path</name> = <name>tmp_vfile</name></expr>;</expr_stmt>
    }</block></else></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_translated_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>xlated_p</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>vfile</name></decl></param>,
                       <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                       <param><decl><type><name>svn_boolean_t</name></type> <name>force_repair</name></decl></param>,
                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_wc_translated_file2</name><argument_list>(<argument><expr><name>xlated_p</name></expr></argument>, <argument><expr><name>vfile</name></expr></argument>, <argument><expr><name>vfile</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
                                 <argument><expr><name>SVN_WC_TRANSLATE_TO_NF</name>
                                 | (<name>force_repair</name> ?
                                    <name>SVN_WC_TRANSLATE_FORCE_EOL_REPAIR</name> : 0)</expr></argument>,
                                 <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__get_eol_style</name><parameter_list>(<param><decl><type><name>svn_subst_eol_style_t</name> *</type><name>style</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>eol</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                      <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>propval</name></decl>;</decl_stmt>

  <comment type="block">/* Get the property value. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_prop_get</name><argument_list>(<argument><expr>&amp;<name>propval</name></expr></argument>, <argument><expr><name>SVN_PROP_EOL_STYLE</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
                          <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Convert it. */</comment>
  <expr_stmt><expr><call><name>svn_subst_eol_style_from_value</name><argument_list>(<argument><expr><name>style</name></expr></argument>, <argument><expr><name>eol</name></expr></argument>, <argument><expr><name>propval</name> ? <name><name>propval</name>-&gt;<name>data</name></name> : <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><name>void</name></type>
<name>svn_wc__eol_value_from_string</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>value</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>eol</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>eol</name> == <name>NULL</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>value</name> = <name>NULL</name></expr>;</expr_stmt></then>
  <else>else <if>if <condition>(<expr>! <call><name>strcmp</name><argument_list>(<argument><expr>"\n"</expr></argument>, <argument><expr><name>eol</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <expr_stmt><expr>*<name>value</name> = "LF"</expr>;</expr_stmt></then>
  <else>else <if>if <condition>(<expr>! <call><name>strcmp</name><argument_list>(<argument><expr>"\r"</expr></argument>, <argument><expr><name>eol</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <expr_stmt><expr>*<name>value</name> = "CR"</expr>;</expr_stmt></then>
  <else>else <if>if <condition>(<expr>! <call><name>strcmp</name><argument_list>(<argument><expr>"\r\n"</expr></argument>, <argument><expr><name>eol</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <expr_stmt><expr>*<name>value</name> = "CRLF"</expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr>*<name>value</name> = <name>NULL</name></expr>;</expr_stmt></else></if></else></if></else></if></else></if>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__get_keywords</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>keywords</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                     <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>force_list</name></decl></param>,
                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>list</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Choose a property list to parse:  either the one that came into
     this function, or the one attached to PATH. */</comment>
  <if>if <condition>(<expr><name>force_list</name> == <name>NULL</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>propval</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_prop_get</name><argument_list>(<argument><expr>&amp;<name>propval</name></expr></argument>, <argument><expr><name>SVN_PROP_KEYWORDS</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
                              <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>list</name> = <name>propval</name> ? <name><name>propval</name>-&gt;<name>data</name></name> : <name>NULL</name></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <expr_stmt><expr><name>list</name> = <name>force_list</name></expr>;</expr_stmt></else></if>

  <comment type="block">/* The easy answer. */</comment>
  <if>if <condition>(<expr><name>list</name> == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr>*<name>keywords</name> = <name>NULL</name></expr>;</expr_stmt>
      <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
    }</block></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_versioned</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_subst_build_keywords2</name><argument_list>(<argument><expr><name>keywords</name></expr></argument>,
                                    <argument><expr><name>list</name></expr></argument>,
                                    <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%ld"</expr></argument>,
                                                 <argument><expr><name><name>entry</name>-&gt;<name>cmt_rev</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><name><name>entry</name>-&gt;<name>url</name></name></expr></argument>,
                                    <argument><expr><name><name>entry</name>-&gt;<name>cmt_date</name></name></expr></argument>,
                                    <argument><expr><name><name>entry</name>-&gt;<name>cmt_author</name></name></expr></argument>,
                                    <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><call><name>apr_hash_count</name><argument_list>(<argument><expr>*<name>keywords</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <expr_stmt><expr>*<name>keywords</name> = <name>NULL</name></expr>;</expr_stmt></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__get_special</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>special</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                    <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>propval</name></decl>;</decl_stmt>

  <comment type="block">/* Get the property value. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_prop_get</name><argument_list>(<argument><expr>&amp;<name>propval</name></expr></argument>, <argument><expr><name>SVN_PROP_SPECIAL</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
                          <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>special</name> = <name>propval</name> != <name>NULL</name></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__maybe_set_executable</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>did_set</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                             <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>propval</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_prop_get</name><argument_list>(<argument><expr>&amp;<name>propval</name></expr></argument>, <argument><expr><name>SVN_PROP_EXECUTABLE</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
                          <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>propval</name> != <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_set_file_executable</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>did_set</name></expr>)</condition><then>
        <expr_stmt><expr>*<name>did_set</name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>did_set</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>did_set</name> = <name>FALSE</name></expr>;</expr_stmt></then></if></else></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__maybe_set_read_only</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>did_set</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                            <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>needs_lock</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name>*</type> <name>entry</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>did_set</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>did_set</name> = <name>FALSE</name></expr>;</expr_stmt></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>entry</name> &amp;&amp; <name><name>entry</name>-&gt;<name>lock_token</name></name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_prop_get</name><argument_list>(<argument><expr>&amp;<name>needs_lock</name></expr></argument>, <argument><expr><name>SVN_PROP_NEEDS_LOCK</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
                          <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>needs_lock</name> != <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_set_file_read_only</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>did_set</name></expr>)</condition><then>
        <expr_stmt><expr>*<name>did_set</name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
    }</block></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
