<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_wc/lock.c"><comment type="block">/*
 * lock.c:  routines for locking working copy subdirectories.
 *
 * ====================================================================
 * Copyright (c) 2000-2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_sorts.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"adm_files.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"questions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"props.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"entries.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_wc_private.h"</cpp:file></cpp:include>

<escape char="0xc"/>

<struct>struct <name>svn_wc_adm_access_t</name>
<block>{
  <comment type="block">/* PATH to directory which contains the administrative area */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>

  <enum>enum <name>svn_wc__adm_access_type</name> <block>{

    <comment type="block">/* SVN_WC__ADM_ACCESS_UNLOCKED indicates no lock is held allowing
       read-only access */</comment>
    <decl><name>svn_wc__adm_access_unlocked</name></decl>,

    <comment type="block">/* SVN_WC__ADM_ACCESS_WRITE_LOCK indicates that a write lock is held
       allowing read-write access */</comment>
    <decl><name>svn_wc__adm_access_write_lock</name></decl>,

    <comment type="block">/* SVN_WC__ADM_ACCESS_CLOSED indicates that the baton has been
       closed. */</comment>
    <decl><name>svn_wc__adm_access_closed</name></decl>

  }</block> <decl><name>type</name></decl>;</enum>

  <comment type="block">/* LOCK_EXISTS is set TRUE when the write lock exists */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>lock_exists</name></decl>;</decl_stmt>

  <comment type="block">/* SET_OWNER is TRUE if SET is allocated from this access baton */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>set_owner</name></decl>;</decl_stmt>

  <comment type="block">/* The working copy format version number for the directory */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>wc_format</name></decl>;</decl_stmt>

  <comment type="block">/* SET is a hash of svn_wc_adm_access_t* keyed on char* representing the
     path to directories that are open. */</comment>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>set</name></decl>;</decl_stmt>

  <comment type="block">/* ENTRIES is the cached entries for PATH, without those in state
     deleted. ENTRIES_HIDDEN is the cached entries including those in
     state deleted or state absent. Either may be NULL. */</comment>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>entries</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>entries_hidden</name></decl>;</decl_stmt>

  <comment type="block">/* A hash mapping const char * entry names to hashes of wcprops.
     These hashes map const char * names to svn_string_t * values.
     NULL of the wcprops hasn't been read into memory.
     ### Since there are typically just one or two wcprops per entry,
     ### we could use a more compact way of storing them. */</comment>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>wcprops</name></decl>;</decl_stmt>

  <comment type="block">/* POOL is used to allocate cached items, they need to persist for the
     lifetime of this access baton */</comment>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>

}</block>;</struct>

<comment type="block">/* This is a placeholder used in the set hash to represent missing
   directories.  Only its address is important, it contains no useful
   data. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_wc_adm_access_t</name></type> <name>missing</name></decl>;</decl_stmt>

<escape char="0xc"/>
<function_decl><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>do_close</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>, <param><decl><type><name>svn_boolean_t</name></type> <name>preserve_lock</name></decl></param>,
         <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Defining this conditional will result in a client that will refuse to
   upgrade working copies.  This can be useful if you want to avoid
   problems caused by accidentally running a development version of SVN
   on a working copy that you typically use with an older version. */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVN_DISABLE_WC_UPGRADE</name></cpp:ifndef>

<comment type="block">/* Write, to LOG_ACCUM, log entries to convert an old WC that did not have
   propcaching into a WC that uses propcaching.  Do this conversion for
   the directory of ADM_ACCESS and its file children.  Use POOL for
   temporary allocations.  */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>introduce_propcaching</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> *</type><name>log_accum</name></decl></param>,
                      <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>entries</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>adm_path</name> <init>= <expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entries_read</name><argument_list>(<argument><expr>&amp;<name>entries</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Reinstall the properties for each file and this dir; subdirs are handled
     when they're opened. */</comment>
  <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>entrypath</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_wc_entry_t</name></type> <name>tmpentry</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>base_props</name></decl>, *<decl><type ref="prev"/><name>props</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>entry</name> = <name>val</name></expr>;</expr_stmt>

      <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>kind</name></name> != <name>svn_node_file</name>
          &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>SVN_WC_ENTRY_THIS_DIR</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
        <continue>continue;</continue></then></if>

      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>entrypath</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>adm_path</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__load_props</name><argument_list>(<argument><expr>&amp;<name>base_props</name></expr></argument>, <argument><expr>&amp;<name>props</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
                                 <argument><expr><name>entrypath</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__install_props</name><argument_list>(<argument><expr>&amp;<name>log_accum</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>entrypath</name></expr></argument>,
                                    <argument><expr><name>base_props</name></expr></argument>, <argument><expr><name>props</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* Make sure we get rid of that prop-time field.
         It only wastes space in new WCs. */</comment>
      <expr_stmt><expr><name><name>tmpentry</name>.<name>prop_time</name></name> = 0</expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__loggy_entry_modify</name>
              <argument_list>(<argument><expr>&amp;<name>log_accum</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
               <argument><expr><name>entrypath</name></expr></argument>,
               <argument><expr>&amp;<name>tmpentry</name></expr></argument>,
               <argument><expr><name>SVN_WC__ENTRY_MODIFY_PROP_TIME</name></expr></argument>,
               <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Write, to LOG_ACCUM, commands to convert a WC that has wcprops in individual
   files to use one wcprops file per directory.
   Do this for ADM_ACCESS and its file children, using POOL for temporary
   allocations. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>convert_wcprops</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> *</type><name>log_accum</name></decl></param>,
                <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>entries</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entries_read</name><argument_list>(<argument><expr>&amp;<name>entries</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Walk over the entries, adding a modify-wcprop command for each wcprop.
     Note that the modifications happen in memory and are just written once
     at the end of the log execution, so this isn't as inefficient as it
     might sound. */</comment>
  <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>wcprops</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hj</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>full_path</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>entry</name> = <name>val</name></expr>;</expr_stmt>

      <expr_stmt><expr><name>full_path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><name><name>entry</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>kind</name></name> != <name>svn_node_file</name>
          &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>SVN_WC_ENTRY_THIS_DIR</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
        <continue>continue;</continue></then></if>

      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__wcprop_list</name><argument_list>(<argument><expr>&amp;<name>wcprops</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Create a subsubpool for the inner loop...
         No, just kidding.  There are typically just one or two wcprops
         per entry... */</comment>
      <for>for (<init><expr><name>hj</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><name>wcprops</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hj</name></expr>;</condition> <incr><expr><name>hj</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hj</name></expr></argument>)</argument_list></call></expr></incr>)
        <block>{
          <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key2</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>void</name> *</type><name>val2</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>propname</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>svn_string_t</name> *</type><name>propval</name></decl>;</decl_stmt>

          <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hj</name></expr></argument>, <argument><expr>&amp;<name>key2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>propname</name> = <name>key2</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>propval</name> = <name>val2</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__loggy_modify_wcprop</name><argument_list>(<argument><expr>&amp;<name>log_accum</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
                                              <argument><expr><name>full_path</name></expr></argument>, <argument><expr><name>propname</name></expr></argument>,
                                              <argument><expr><name><name>propval</name>-&gt;<name>data</name></name></expr></argument>,
                                              <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></for>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Maybe upgrade the working copy directory represented by ADM_ACCESS
   to the latest 'SVN_WC__VERSION'.  ADM_ACCESS must contain a write
   lock.  Use POOL for all temporary allocation.

   Not all upgrade paths are necessarily supported.  For example,
   upgrading a version 1 working copy results in an error.

   Sometimes the format file can contain "0" while the administrative
   directory is being constructed; calling this on a format 0 working
   copy has no effect and returns no error. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>maybe_upgrade_format</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__check_format</name><argument_list>(<argument><expr><name><name>adm_access</name>-&gt;<name>wc_format</name></name></expr></argument>,
                               <argument><expr><name><name>adm_access</name>-&gt;<name>path</name></name></expr></argument>,
                               <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* We can upgrade all formats that are accepted by
     svn_wc__check_format. */</comment>
  <if>if <condition>(<expr><name><name>adm_access</name>-&gt;<name>wc_format</name></name> != <name>SVN_WC__VERSION</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>cleanup_required</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>log_accum</name> <init>= <expr><call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <comment type="block">/* Don't try to mess with the WC if there are old log files left. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__adm_is_cleanup_required</name><argument_list>(<argument><expr>&amp;<name>cleanup_required</name></expr></argument>,
                                              <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>cleanup_required</name></expr>)</condition><then>
        <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

      <comment type="block">/* First, loggily upgrade the format file. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__loggy_upgrade_format</name><argument_list>(<argument><expr>&amp;<name>log_accum</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
                                           <argument><expr><name>SVN_WC__VERSION</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Possibly convert an old WC that doesn't use propcaching. */</comment>
      <if>if <condition>(<expr><name><name>adm_access</name>-&gt;<name>wc_format</name></name> &lt;= <name>SVN_WC__NO_PROPCACHING_VERSION</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>introduce_propcaching</name><argument_list>(<argument><expr><name>log_accum</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <comment type="block">/* If the WC uses one file per entry for wcprops, give back some inodes
         to the poor user. */</comment>
      <if>if <condition>(<expr><name><name>adm_access</name>-&gt;<name>wc_format</name></name> &lt;= <name>SVN_WC__WCPROPS_MANY_FILES_VERSION</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>convert_wcprops</name><argument_list>(<argument><expr><name>log_accum</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__write_log</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>log_accum</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name><name>adm_access</name>-&gt;<name>wc_format</name></name> &lt;= <name>SVN_WC__WCPROPS_MANY_FILES_VERSION</name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>access_path</name> <init>= <expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <comment type="block">/* Remove wcprops directory, dir-props, README.txt and empty-file
             files.
             We just silently ignore errors, because keeping these files is
             not catastrophic. */</comment>

          <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name>svn_io_remove_dir2</name>
            <argument_list>(<argument><expr><call><name>svn_wc__adm_path</name><argument_list>(<argument><expr><name>access_path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>SVN_WC__ADM_WCPROPS</name></expr></argument>,
                              <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name>svn_io_remove_file</name>
            <argument_list>(<argument><expr><call><name>svn_wc__adm_path</name><argument_list>(<argument><expr><name>access_path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>,
                              <argument><expr><name>SVN_WC__ADM_DIR_WCPROPS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name>svn_io_remove_file</name>
            <argument_list>(<argument><expr><call><name>svn_wc__adm_path</name><argument_list>(<argument><expr><name>access_path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>,
                              <argument><expr><name>SVN_WC__ADM_EMPTY_FILE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name>svn_io_remove_file</name>
            <argument_list>(<argument><expr><call><name>svn_wc__adm_path</name><argument_list>(<argument><expr><name>access_path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>,
                              <argument><expr><name>SVN_WC__ADM_README</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__run_log</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<comment type="block">/* Alternate version of the above for use when working copy upgrades
   are disabled.  Return an error if the working copy described by
   ADM_ACCESS is not at the latest 'SVN_WC__VERSION'.  Use POOL for all
   temporary allocation.  */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>maybe_upgrade_format</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__check_format</name><argument_list>(<argument><expr><name><name>adm_access</name>-&gt;<name>wc_format</name></name></expr></argument>,
                               <argument><expr><name><name>adm_access</name>-&gt;<name>path</name></name></expr></argument>,
                               <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name><name>adm_access</name>-&gt;<name>wc_format</name></name> != <name>SVN_WC__VERSION</name></expr>)</condition><then>
    <block>{
      <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_WC_UNSUPPORTED_FORMAT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                               <argument><expr>"Would upgrade working copy '%s' from old "
                               "format (%d) to current format (%d), "
                               "but automatic upgrade has been disabled"</expr></argument>,
                               <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name><name>adm_access</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><name><name>adm_access</name>-&gt;<name>wc_format</name></name></expr></argument>, <argument><expr><name>SVN_WC__VERSION</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/* Create a physical lock file in the admin directory for ADM_ACCESS. Wait
   up to WAIT_FOR seconds if the lock already exists retrying every
   second.

   Note: most callers of this function determine the wc_format for the
   lock soon afterwards.  We recommend calling maybe_upgrade_format()
   as soon as you have the wc_format for a lock, since that's a good
   opportunity to drag old working directories into the modern era. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>create_lock</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>, <param><decl><type><name>int</name></type> <name>wait_for</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

  <for>for (<init>;</init><condition>;</condition><incr/>)
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>svn_wc__make_adm_thing</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>SVN_WC__ADM_LOCK</name></expr></argument>,
                                   <argument><expr><name>svn_node_file</name></expr></argument>, <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
        <block>{
          <if>if <condition>(<expr><call><name>APR_STATUS_IS_EEXIST</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>apr_err</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
              <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <if>if <condition>(<expr><name>wait_for</name> &lt;= 0</expr>)</condition><then>
                <break>break;</break></then></if>
              <expr_stmt><expr><name>wait_for</name>--</expr>;</expr_stmt>
              <expr_stmt><expr><call><name>apr_sleep</name><argument_list>(<argument><expr><call><name>apr_time_from_sec</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* micro-seconds */</comment>
            }</block></then>
          <else>else
            <return>return <expr><name>err</name></expr>;</return></else></if>
        }</block></then>
      <else>else
        <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></else></if>
    }</block></for>

  <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_WC_LOCKED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                           <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Working copy '%s' locked"</expr></argument>)</argument_list></call></expr></argument>,
                           <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name><name>adm_access</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<comment type="block">/* Remove the physical lock in the admin directory for PATH. It is
   acceptable for the administrative area to have disappeared, such as when
   the directory is removed from the working copy.  It is an error for the
   lock to have disappeared if the administrative area still exists. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>remove_lock</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><call><name>svn_wc__remove_adm_file</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>SVN_WC__ADM_LOCK</name></expr></argument>,
                                             <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><call><name>svn_wc__adm_path_exists</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>err</name></expr>;</return></then></if>
      <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* An APR pool cleanup handler.  This handles access batons that have not
   been closed when their pool gets destroyed.  The physical locks
   associated with such batons remain in the working copy if they are
   protecting a log file. */</comment>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type>
<name>pool_cleanup</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>p</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>lock</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>cleanup</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>lock</name>-&gt;<name>type</name></name> == <name>svn_wc__adm_access_closed</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><name>err</name> = <call><name>svn_wc__adm_is_cleanup_required</name><argument_list>(<argument><expr>&amp;<name>cleanup</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><name><name>lock</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>err</name></expr>)</condition><then>
    <expr_stmt><expr><name>err</name> = <call><name>do_close</name><argument_list>(<argument><expr><name>lock</name></expr></argument>, <argument><expr><name>cleanup</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <comment type="block">/* ### Is this the correct way to handle the error? */</comment>
  <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>apr_status_t</name></type> <name>apr_err</name> <init>= <expr><name><name>err</name>-&gt;<name>apr_err</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>apr_err</name></expr>;</return>
    }</block></then>
  <else>else
    <return>return <expr><name>APR_SUCCESS</name></expr>;</return></else></if>
}</block></function>

<comment type="block">/* An APR pool cleanup handler.  This is a child handler, it removes the
   main pool handler. */</comment>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type>
<name>pool_cleanup_child</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>p</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>lock</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>apr_pool_cleanup_kill</name><argument_list>(<argument><expr><name><name>lock</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><name>pool_cleanup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<comment type="block">/* Allocate from POOL, intialise and return an access baton. TYPE and PATH
   are used to initialise the baton.  */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_wc_adm_access_t</name> *</type>
<name>adm_access_alloc</name><argument_list>(<argument>enum <expr><name>svn_wc__adm_access_type</name> <name>type</name></expr></argument>,
                 <argument><expr>const <name>char</name> *<name>path</name></expr></argument>,
                 <argument><expr><name>apr_pool_t</name> *<name>pool</name></expr></argument>)</argument_list>
<block>{
  <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>lock</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>lock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>lock</name>-&gt;<name>type</name></name> = <name>type</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lock</name>-&gt;<name>entries</name></name> = <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lock</name>-&gt;<name>entries_hidden</name></name> = <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lock</name>-&gt;<name>wcprops</name></name> = <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lock</name>-&gt;<name>wc_format</name></name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lock</name>-&gt;<name>set</name></name> = <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lock</name>-&gt;<name>lock_exists</name></name> = <name>FALSE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lock</name>-&gt;<name>set_owner</name></name> = <name>FALSE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lock</name>-&gt;<name>path</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lock</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>

  <return>return <expr><name>lock</name></expr>;</return>
}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>adm_ensure_set</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>! <name><name>adm_access</name>-&gt;<name>set</name></name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name><name>adm_access</name>-&gt;<name>set_owner</name></name> = <name>TRUE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>adm_access</name>-&gt;<name>set</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name><name>adm_access</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>adm_access</name>-&gt;<name>set</name></name></expr></argument>, <argument><expr><name><name>adm_access</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                   <argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>probe</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>dir</name></decl></param>,
      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
      <param><decl><type><name>int</name> *</type><name>wc_format</name></decl></param>,
      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_check_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>kind</name> == <name>svn_node_dir</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_check_wc</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>wc_format</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr>*<name>wc_format</name> = 0</expr>;</expr_stmt></else></if>

  <comment type="block">/* a "version" of 0 means a non-wc directory */</comment>
  <if>if <condition>(<expr><name>kind</name> != <name>svn_node_dir</name> || *<name>wc_format</name> == 0</expr>)</condition><then>
    <block>{
      <comment type="block">/* Passing a path ending in "." or ".." to svn_path_dirname() is
         probably always a bad idea; certainly it is in this case.
         Unfortunately, svn_path_dirname()'s current signature can't
         return an error, so we have to insert the protection in this
         caller, as making the larger API change would be very
         destabilizing right now (just before 1.0).  See issue #1617. */</comment>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_name</name> <init>= <expr><call><name>svn_path_basename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr>(<call><name>strcmp</name><argument_list>(<argument><expr><name>base_name</name></expr></argument>, <argument><expr>".."</expr></argument>)</argument_list></call> == 0)
          || (<call><name>strcmp</name><argument_list>(<argument><expr><name>base_name</name></expr></argument>, <argument><expr>"."</expr></argument>)</argument_list></call> == 0)</expr>)</condition><then>
        <block>{
          <return>return <expr><call><name>svn_error_createf</name>
            <argument_list>(<argument><expr><name>SVN_ERR_WC_BAD_PATH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
             <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Path '%s' ends in '%s', "
               "which is unsupported for this operation"</expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>base_name</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

      <expr_stmt><expr>*<name>dir</name> = <call><name>svn_path_dirname</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <expr_stmt><expr>*<name>dir</name> = <name>path</name></expr>;</expr_stmt></else></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__adm_steal_write_lock</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> **</type><name>adm_access</name></decl></param>,
                             <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>associated</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>lock</name> <init>= <expr><call><name>adm_access_alloc</name><argument_list>(<argument><expr><name>svn_wc__adm_access_write_lock</name></expr></argument>,
                                               <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>err</name> = <call><name>create_lock</name><argument_list>(<argument><expr><name>lock</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_WC_LOCKED</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>  <comment type="block">/* Steal existing lock */</comment>
      <else>else
        <return>return <expr><name>err</name></expr>;</return></else></if>
    }</block></then></if>

  <if>if <condition>(<expr><name>associated</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>adm_ensure_set</name><argument_list>(<argument><expr><name>associated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>lock</name>-&gt;<name>set</name></name> = <name><name>associated</name>-&gt;<name>set</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>lock</name>-&gt;<name>set</name></name></expr></argument>, <argument><expr><name><name>lock</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <comment type="block">/* We have a write lock.  If the working copy has an old
     format, this is the time to upgrade it. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_check_wc</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>&amp;<name><name>lock</name>-&gt;<name>wc_format</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>maybe_upgrade_format</name><argument_list>(<argument><expr><name>lock</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>lock</name>-&gt;<name>lock_exists</name></name> = <name>TRUE</name></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>adm_access</name> = <name>lock</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* This is essentially the guts of svn_wc_adm_open3, with the additional
 * parameter UNDER_CONSTRUCTION that gets set TRUE only when locking the
 * admin directory during initial creation.
 *
 * If the working copy is already locked, return SVN_ERR_WC_LOCKED; if 
 * it is not a versioned directory, return SVN_ERR_WC_NOT_DIRECTORY.
 */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>do_open</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> **</type><name>adm_access</name></decl></param>,
        <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>associated</name></decl></param>,
        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
        <param><decl><type><name>svn_boolean_t</name></type> <name>write_lock</name></decl></param>,
        <param><decl><type><name>int</name></type> <name>levels_to_lock</name></decl></param>,
        <param><decl><type><name>svn_boolean_t</name></type> <name>under_construction</name></decl></param>,
        <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
        <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>lock</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>wc_format</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>associated</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>adm_ensure_set</name><argument_list>(<argument><expr><name>associated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>lock</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>associated</name>-&gt;<name>set</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>lock</name> &amp;&amp; <name>lock</name> != &amp;<name>missing</name></expr>)</condition><then>
        <comment type="block">/* Already locked.  The reason we don't return the existing baton
           here is that the user is supposed to know whether a directory is
           locked: if it's not locked call svn_wc_adm_open, if it is locked
           call svn_wc_adm_retrieve.  */</comment>
        <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_WC_LOCKED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                 <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Working copy '%s' locked"</expr></argument>)</argument_list></call></expr></argument>,
                                 <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
    }</block></then></if>

  <if>if <condition>(<expr>! <name>under_construction</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* By reading the format file we check both that PATH is a directory
         and that it is a working copy. */</comment>
      <comment type="block">/* ### We will read the entries file later.  Maybe read the whole
         file here instead to avoid reopening it. */</comment>
      <expr_stmt><expr><name>err</name> = <call><name>svn_io_read_version_file</name><argument_list>(<argument><expr>&amp;<name>wc_format</name></expr></argument>,
                                     <argument><expr><call><name>svn_wc__adm_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>,
                                                      <argument><expr><name>SVN_WC__ADM_ENTRIES</name></expr></argument>,
                                                      <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
                                     <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* If the entries file doesn't start with a version number, we're dealing
         with a pre-format 7 working copy, so we need to get the format from
         the format file instead. */</comment>
      <if>if <condition>(<expr><name>err</name> &amp;&amp; <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_BAD_VERSION_FILE_FORMAT</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>err</name> = <call><name>svn_io_read_version_file</name><argument_list>(<argument><expr>&amp;<name>wc_format</name></expr></argument>,
                                         <argument><expr><call><name>svn_wc__adm_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>,
                                                          <argument><expr><name>SVN_WC__ADM_FORMAT</name></expr></argument>,
                                                          <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
                                         <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
        <block>{
          <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_WC_NOT_DIRECTORY</name></expr></argument>, <argument><expr><name>err</name></expr></argument>,
                                   <argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s' is not a working copy"</expr></argument>)</argument_list></call></expr></argument>,
                                   <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__check_format</name><argument_list>(<argument><expr><name>wc_format</name></expr></argument>,
                                   <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>,
                                   <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <comment type="block">/* Need to create a new lock */</comment>
  <if>if <condition>(<expr><name>write_lock</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>lock</name> = <call><name>adm_access_alloc</name><argument_list>(<argument><expr><name>svn_wc__adm_access_write_lock</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>create_lock</name><argument_list>(<argument><expr><name>lock</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>lock</name>-&gt;<name>lock_exists</name></name> = <name>TRUE</name></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <expr_stmt><expr><name>lock</name> = <call><name>adm_access_alloc</name><argument_list>(<argument><expr><name>svn_wc__adm_access_unlocked</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <if>if <condition>(<expr>! <name>under_construction</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name><name>lock</name>-&gt;<name>wc_format</name></name> = <name>wc_format</name></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>write_lock</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>maybe_upgrade_format</name><argument_list>(<argument><expr><name>lock</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></then></if>

  <if>if <condition>(<expr><name>levels_to_lock</name> != 0</expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>entries</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>

      <comment type="block">/* Reduce levels_to_lock since we are about to recurse */</comment>
      <if>if <condition>(<expr><name>levels_to_lock</name> &gt; 0</expr>)</condition><then>
        <expr_stmt><expr><name>levels_to_lock</name>--</expr>;</expr_stmt></then></if>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entries_read</name><argument_list>(<argument><expr>&amp;<name>entries</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Use a temporary hash until all children have been opened. */</comment>
      <if>if <condition>(<expr><name>associated</name></expr>)</condition><then>
        <expr_stmt><expr><name><name>lock</name>-&gt;<name>set</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <comment type="block">/* Open the tree */</comment>
      <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
        <block>{
          <decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>entry_access</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>entry_path</name></decl>;</decl_stmt>

          <comment type="block">/* See if someone wants to cancel this operation. */</comment>
          <if>if <condition>(<expr><name>cancel_func</name></expr>)</condition><then>
            <block>{
              <expr_stmt><expr><name>err</name> =  <call><name>cancel_func</name><argument_list>(<argument><expr><name>cancel_baton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
                <block>{
                  <comment type="block">/* This closes all the children in temporary hash as well */</comment>
                  <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name>svn_wc_adm_close</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><name><name>lock</name>-&gt;<name>set</name></name> = <name>NULL</name></expr>;</expr_stmt>
                  <return>return <expr><name>err</name></expr>;</return>
                }</block></then></if>
            }</block></then></if>

          <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>entry</name> = <name>val</name></expr>;</expr_stmt>
          <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>kind</name></name> != <name>svn_node_dir</name>
              || ! <call><name>strcmp</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>SVN_WC_ENTRY_THIS_DIR</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <continue>continue;</continue></then></if>
          <expr_stmt><expr><name>entry_path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>lock</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="block">/* Don't use the subpool pool here, the lock needs to persist */</comment>
          <expr_stmt><expr><name>err</name> = <call><name>do_open</name><argument_list>(<argument><expr>&amp;<name>entry_access</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><name>entry_path</name></expr></argument>, <argument><expr><name>write_lock</name></expr></argument>,
                        <argument><expr><name>levels_to_lock</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>cancel_func</name></expr></argument>, <argument><expr><name>cancel_baton</name></expr></argument>,
                        <argument><expr><name><name>lock</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
            <block>{
              <if>if <condition>(<expr><name><name>err</name>-&gt;<name>apr_err</name></name> != <name>SVN_ERR_WC_NOT_DIRECTORY</name></expr>)</condition><then>
                <block>{
                  <comment type="block">/* This closes all the children in temporary hash as well */</comment>
                  <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name>svn_wc_adm_close</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><name><name>lock</name>-&gt;<name>set</name></name> = <name>NULL</name></expr>;</expr_stmt>
                  <return>return <expr><name>err</name></expr>;</return>
                }</block></then></if>

              <comment type="block">/* It's missing or obstructed, so store a placeholder */</comment>
              <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>adm_ensure_set</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>lock</name>-&gt;<name>set</name></name></expr></argument>, <argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>lock</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>entry_path</name></expr></argument>)</argument_list></call></expr></argument>,
                           <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr>&amp;<name>missing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

              <continue>continue;</continue>
            }</block></then></if>

          <comment type="block">/* ### Perhaps we should verify that the parent and child agree
             ### about the URL of the child? */</comment>
        }</block></for>

      <comment type="block">/* Switch from temporary hash to permanent hash */</comment>
      <if>if <condition>(<expr><name>associated</name></expr>)</condition><then>
        <block>{
          <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><name><name>lock</name>-&gt;<name>set</name></name></expr></argument>)</argument_list></call></expr>;</init>
               <condition><expr><name>hi</name></expr>;</condition>
               <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
            <block>{
              <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>entry_path</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>entry_access</name></decl>;</decl_stmt>

              <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>entry_path</name> = <name>key</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>entry_access</name> = <name>val</name></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>associated</name>-&gt;<name>set</name></name></expr></argument>, <argument><expr><name>entry_path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                           <argument><expr><name>entry_access</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>entry_access</name>-&gt;<name>set</name></name> = <name><name>associated</name>-&gt;<name>set</name></name></expr>;</expr_stmt>
            }</block></for>
          <expr_stmt><expr><name><name>lock</name>-&gt;<name>set</name></name> = <name><name>associated</name>-&gt;<name>set</name></name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

  <if>if <condition>(<expr><name>associated</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name><name>lock</name>-&gt;<name>set</name></name> = <name><name>associated</name>-&gt;<name>set</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>lock</name>-&gt;<name>set</name></name></expr></argument>, <argument><expr><name><name>lock</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <comment type="block">/* It's important that the cleanup handler is registered *after* at least
     one UTF8 conversion has been done, since such a conversion may create
     the apr_xlate_t object in the pool, and that object must be around
     when the cleanup handler runs.  If the apr_xlate_t cleanup handler
     were to run *before* the access baton cleanup handler, then the access
     baton's handler won't work. */</comment>
  <expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name><name>lock</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><name>pool_cleanup</name></expr></argument>,
                            <argument><expr><name>pool_cleanup_child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>adm_access</name> = <name>lock</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* To preserve API compatibility with Subversion 1.0.0 */</comment>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_adm_open</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> **</type><name>adm_access</name></decl></param>,
                <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>associated</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                <param><decl><type><name>svn_boolean_t</name></type> <name>write_lock</name></decl></param>,
                <param><decl><type><name>svn_boolean_t</name></type> <name>tree_lock</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_wc_adm_open3</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>associated</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>write_lock</name></expr></argument>,
                          <argument><expr>(<name>tree_lock</name> ? -1 : 0)</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_adm_open2</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> **</type><name>adm_access</name></decl></param>,
                 <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>associated</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                 <param><decl><type><name>svn_boolean_t</name></type> <name>write_lock</name></decl></param>,
                 <param><decl><type><name>int</name></type> <name>levels_to_lock</name></decl></param>,
                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_wc_adm_open3</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>associated</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>write_lock</name></expr></argument>,
                          <argument><expr><name>levels_to_lock</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_adm_open3</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> **</type><name>adm_access</name></decl></param>,
                 <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>associated</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                 <param><decl><type><name>svn_boolean_t</name></type> <name>write_lock</name></decl></param>,
                 <param><decl><type><name>int</name></type> <name>levels_to_lock</name></decl></param>,
                 <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
                 <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>do_open</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>associated</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>write_lock</name></expr></argument>, <argument><expr><name>levels_to_lock</name></expr></argument>,
                 <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>cancel_func</name></expr></argument>, <argument><expr><name>cancel_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__adm_pre_open</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> **</type><name>adm_access</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>do_open</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<comment type="block">/* To preserve API compatibility with Subversion 1.0.0 */</comment>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_adm_probe_open</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> **</type><name>adm_access</name></decl></param>,
                      <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>associated</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                      <param><decl><type><name>svn_boolean_t</name></type> <name>write_lock</name></decl></param>,
                      <param><decl><type><name>svn_boolean_t</name></type> <name>tree_lock</name></decl></param>,
                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_wc_adm_probe_open3</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>associated</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
                                <argument><expr><name>write_lock</name></expr></argument>, <argument><expr>(<name>tree_lock</name> ? -1 : 0)</expr></argument>,
                                <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_adm_probe_open2</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> **</type><name>adm_access</name></decl></param>,
                       <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>associated</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                       <param><decl><type><name>svn_boolean_t</name></type> <name>write_lock</name></decl></param>,
                       <param><decl><type><name>int</name></type> <name>levels_to_lock</name></decl></param>,
                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_wc_adm_probe_open3</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>associated</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>write_lock</name></expr></argument>,
                                <argument><expr><name>levels_to_lock</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_adm_probe_open3</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> **</type><name>adm_access</name></decl></param>,
                       <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>associated</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                       <param><decl><type><name>svn_boolean_t</name></type> <name>write_lock</name></decl></param>,
                       <param><decl><type><name>int</name></type> <name>levels_to_lock</name></decl></param>,
                       <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
                       <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dir</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>wc_format</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>probe</name><argument_list>(<argument><expr>&amp;<name>dir</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr>&amp;<name>wc_format</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If we moved up a directory, then the path is not a directory, or it
     is not under version control. In either case, the notion of
     levels_to_lock does not apply to the provided path.  Disable it so
     that we don't end up trying to lock more than we need.  */</comment>
  <if>if <condition>(<expr><name>dir</name> != <name>path</name></expr>)</condition><then>
    <expr_stmt><expr><name>levels_to_lock</name> = 0</expr>;</expr_stmt></then></if>

  <expr_stmt><expr><name>err</name> = <call><name>svn_wc_adm_open3</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>associated</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>write_lock</name></expr></argument>,
                         <argument><expr><name>levels_to_lock</name></expr></argument>, <argument><expr><name>cancel_func</name></expr></argument>, <argument><expr><name>cancel_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err2</name></decl>;</decl_stmt>

      <comment type="block">/* If we got an error on the parent dir, that means we failed to
         get an access baton for the child in the first place.  And if
         the reason we couldn't get the child access baton is that the
         child is not a versioned directory, then return an error
         about the child, not the parent. */</comment>
      <decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>child_kind</name></decl>;</decl_stmt>
      <if>if <condition>(<expr>(<name>err2</name> = <call><name>svn_io_check_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>&amp;<name>child_kind</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>svn_error_compose</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>err2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>err</name></expr>;</return>
        }</block></then></if>

      <if>if <condition>(<expr>(<name>dir</name> != <name>path</name>)
          &amp;&amp; (<name>child_kind</name> == <name>svn_node_dir</name>)
          &amp;&amp; (<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_WC_NOT_DIRECTORY</name>)</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_WC_NOT_DIRECTORY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                   <argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s' is not a working copy"</expr></argument>)</argument_list></call></expr></argument>,
                                   <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then>
      <else>else
        <block>{
          <return>return <expr><name>err</name></expr>;</return>
        }</block></else></if>
    }</block></then></if>

  <if>if <condition>(<expr><name>wc_format</name> &amp;&amp; ! <name>(*<name>adm_access</name>)-&gt;<name>wc_format</name></name></expr>)</condition><then>
    <expr_stmt><expr><name>(*<name>adm_access</name>)-&gt;<name>wc_format</name></name> = <name>wc_format</name></expr>;</expr_stmt></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__adm_retrieve_internal</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> **</type><name>adm_access</name></decl></param>,
                              <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>associated</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name><name>associated</name>-&gt;<name>set</name></name></expr>)</condition><then>
    <expr_stmt><expr>*<name>adm_access</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>associated</name>-&gt;<name>set</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else <if>if <condition>(<expr>! <call><name>strcmp</name><argument_list>(<argument><expr><name><name>associated</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <expr_stmt><expr>*<name>adm_access</name> = <name>associated</name></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr>*<name>adm_access</name> = <name>NULL</name></expr>;</expr_stmt></else></if></else></if>

  <if>if <condition>(<expr>*<name>adm_access</name> == &amp;<name>missing</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>adm_access</name> = <name>NULL</name></expr>;</expr_stmt></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_adm_retrieve</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> **</type><name>adm_access</name></decl></param>,
                    <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>associated</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__adm_retrieve_internal</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>associated</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Most of the code expects access batons to exist, so returning an error
     generally makes the calling code simpler as it doesn't need to check
     for NULL batons. */</comment>
  <if>if <condition>(<expr>! *<name>adm_access</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>wcpath</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>subdir_entry</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>wckind</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>err</name> = <call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>subdir_entry</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>associated</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* If we can't get an entry here, we are in pretty bad shape,
         and will have to fall back to using just regular old paths to
         see what's going on.  */</comment>
      <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>subdir_entry</name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></then></if>

      <expr_stmt><expr><name>err</name> = <call><name>svn_io_check_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* If we can't check the path, we can't make a good error
         message.  */</comment>
      <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
        <block>{
          <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_WC_NOT_LOCKED</name></expr></argument>, <argument><expr><name>err</name></expr></argument>,
                                   <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Unable to check path existence for '%s'"</expr></argument>)</argument_list></call></expr></argument>,
                                   <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

      <if>if <condition>(<expr><name>subdir_entry</name></expr>)</condition><then>
        <block>{
          <if>if <condition>(<expr><name><name>subdir_entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name>
              &amp;&amp; <name>kind</name> == <name>svn_node_file</name></expr>)</condition><then>
            <block>{
              <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err_msg</name> <init>= <expr><call><name>apr_psprintf</name>
                <argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Expected '%s' to be a directory but found a file"</expr></argument>)</argument_list></call></expr></argument>,
                 <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_WC_NOT_LOCKED</name></expr></argument>,
                                      <argument><expr><call><name>svn_error_create</name>
                                        <argument_list>(<argument><expr><name>SVN_ERR_WC_NOT_DIRECTORY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                         <argument><expr><name>err_msg</name></expr></argument>)</argument_list></call></expr></argument>,
                                      <argument><expr><name>err_msg</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then>
          <else>else <if>if <condition>(<expr><name><name>subdir_entry</name>-&gt;<name>kind</name></name> == <name>svn_node_file</name>
                   &amp;&amp; <name>kind</name> == <name>svn_node_dir</name></expr>)</condition><then>
            <block>{
              <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err_msg</name> <init>= <expr><call><name>apr_psprintf</name>
                <argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Expected '%s' to be a file but found a directory"</expr></argument>)</argument_list></call></expr></argument>,
                 <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_WC_NOT_LOCKED</name></expr></argument>,
                                      <argument><expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_WC_NOT_FILE</name></expr></argument>,
                                                       <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>err_msg</name></expr></argument>)</argument_list></call></expr></argument>,
                                      <argument><expr><name>err_msg</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if></else></if>
        }</block></then></if>

      <expr_stmt><expr><name>wcpath</name> = <call><name>svn_wc__adm_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>err</name> = <call><name>svn_io_check_path</name><argument_list>(<argument><expr><name>wcpath</name></expr></argument>, <argument><expr>&amp;<name>wckind</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* If we can't check the path, we can't make a good error
         message.  */</comment>
      <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
        <block>{
          <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_WC_NOT_LOCKED</name></expr></argument>, <argument><expr><name>err</name></expr></argument>,
                                   <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Unable to check path existence for '%s'"</expr></argument>)</argument_list></call></expr></argument>,
                                   <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>wcpath</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

      <if>if <condition>(<expr><name>kind</name> == <name>svn_node_none</name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err_msg</name> <init>= <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
                                             <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Directory '%s' is missing"</expr></argument>)</argument_list></call></expr></argument>,
                                             <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_WC_NOT_LOCKED</name></expr></argument>,
                                  <argument><expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_WC_PATH_NOT_FOUND</name></expr></argument>,
                                                   <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>err_msg</name></expr></argument>)</argument_list></call></expr></argument>,
                                  <argument><expr><name>err_msg</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then>

      <else>else <if>if <condition>(<expr><name>kind</name> == <name>svn_node_dir</name> &amp;&amp; <name>wckind</name> == <name>svn_node_none</name></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_WC_NOT_LOCKED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                 <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Directory '%s' containing working copy admin area is missing"</expr></argument>)</argument_list></call></expr></argument>,
                                 <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>wcpath</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then>

      <else>else <if>if <condition>(<expr><name>kind</name> == <name>svn_node_dir</name> &amp;&amp; <name>wckind</name> == <name>svn_node_dir</name></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_WC_NOT_LOCKED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                 <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Unable to lock '%s'"</expr></argument>)</argument_list></call></expr></argument>,
                                 <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if></else></if></else></if>

      <comment type="block">/* If all else fails, return our useless generic error.  */</comment>
      <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_WC_NOT_LOCKED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                               <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Working copy '%s' is not locked"</expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_adm_probe_retrieve</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> **</type><name>adm_access</name></decl></param>,
                          <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>associated</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dir</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>wc_format</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>associated</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>! <name>entry</name></expr>)</condition><then>
    <comment type="block">/* Not a versioned item, probe it */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>probe</name><argument_list>(<argument><expr>&amp;<name>dir</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr>&amp;<name>wc_format</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>kind</name></name> != <name>svn_node_dir</name></expr>)</condition><then>
    <expr_stmt><expr><name>dir</name> = <call><name>svn_path_dirname</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><name>dir</name> = <name>path</name></expr>;</expr_stmt></else></if></else></if>

  <expr_stmt><expr><name>err</name> = <call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>associated</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>err</name> &amp;&amp; <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_WC_NOT_LOCKED</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* We'll receive a NOT LOCKED error for various reasons,
         including the reason we'll actually want to test for:
         The path is a versioned directory, but missing, in which case
         we want its parent's adm_access (which holds minimal data
         on the child) */</comment>
      <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>probe</name><argument_list>(<argument><expr>&amp;<name>dir</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr>&amp;<name>wc_format</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>associated</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <return>return <expr><name>err</name></expr>;</return></else></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* To preserve API compatibility with Subversion 1.0.0 */</comment>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_adm_probe_try</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> **</type><name>adm_access</name></decl></param>,
                     <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>associated</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                     <param><decl><type><name>svn_boolean_t</name></type> <name>write_lock</name></decl></param>,
                     <param><decl><type><name>svn_boolean_t</name></type> <name>tree_lock</name></decl></param>,
                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_wc_adm_probe_try3</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>associated</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>write_lock</name></expr></argument>,
                               <argument><expr>(<name>tree_lock</name> ? -1 : 0)</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_adm_probe_try2</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> **</type><name>adm_access</name></decl></param>,
                      <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>associated</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                      <param><decl><type><name>svn_boolean_t</name></type> <name>write_lock</name></decl></param>,
                      <param><decl><type><name>int</name></type> <name>levels_to_lock</name></decl></param>,
                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_wc_adm_probe_try3</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>associated</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>write_lock</name></expr></argument>,
                               <argument><expr><name>levels_to_lock</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_adm_probe_try3</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> **</type><name>adm_access</name></decl></param>,
                      <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>associated</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                      <param><decl><type><name>svn_boolean_t</name></type> <name>write_lock</name></decl></param>,
                      <param><decl><type><name>int</name></type> <name>levels_to_lock</name></decl></param>,
                      <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
                      <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>err</name> = <call><name>svn_wc_adm_probe_retrieve</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>associated</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* SVN_ERR_WC_NOT_LOCKED would mean there was no access baton for
     path in associated, in which case we want to open an access
     baton and add it to associated. */</comment>
  <if>if <condition>(<expr><name>err</name> &amp;&amp; (<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_WC_NOT_LOCKED</name>)</expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>err</name> = <call><name>svn_wc_adm_probe_open3</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>associated</name></expr></argument>,
                                   <argument><expr><name>path</name></expr></argument>, <argument><expr><name>write_lock</name></expr></argument>, <argument><expr><name>levels_to_lock</name></expr></argument>,
                                   <argument><expr><name>cancel_func</name></expr></argument>, <argument><expr><name>cancel_baton</name></expr></argument>,
                                   <argument><expr><call><name>svn_wc_adm_access_pool</name><argument_list>(<argument><expr><name>associated</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* If the path is not a versioned directory, we just return a
         null access baton with no error.  Note that of the errors we
         do report, the most important (and probably most likely) is
         SVN_ERR_WC_LOCKED.  That error would mean that someone else
         has this area locked, and we definitely want to bail in that
         case. */</comment>
      <if>if <condition>(<expr><name>err</name> &amp;&amp; (<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_WC_NOT_DIRECTORY</name>)</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr>*<name>adm_access</name> = <name>NULL</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>err</name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<comment type="block">/* A helper for svn_wc_adm_open_anchor.  Add all the access batons in the
   T_ACCESS set, including T_ACCESS, to the P_ACCESS set. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>join_batons</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>p_access</name></decl></param>,
                        <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>t_access</name></decl></param>,
                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>adm_ensure_set</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>! <name><name>t_access</name>-&gt;<name>set</name></name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name><name>t_access</name>-&gt;<name>set</name></name> = <name><name>p_access</name>-&gt;<name>set</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>p_access</name>-&gt;<name>set</name></name></expr></argument>, <argument><expr><name><name>t_access</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                   <argument><expr><name>t_access</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    }</block></then></if>

  <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>t_access</name>-&gt;<name>set</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>adm_access</name> = <name>val</name></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>adm_access</name> != &amp;<name>missing</name></expr>)</condition><then>
        <expr_stmt><expr><name><name>adm_access</name>-&gt;<name>set</name></name> = <name><name>p_access</name>-&gt;<name>set</name></name></expr>;</expr_stmt></then></if>
      <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>p_access</name>-&gt;<name>set</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
  <expr_stmt><expr><name><name>t_access</name>-&gt;<name>set_owner</name></name> = <name>FALSE</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_adm_open_anchor</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> **</type><name>anchor_access</name></decl></param>,
                       <param><decl><type><name>svn_wc_adm_access_t</name> **</type><name>target_access</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>target</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                       <param><decl><type><name>svn_boolean_t</name></type> <name>write_lock</name></decl></param>,
                       <param><decl><type><name>int</name></type> <name>levels_to_lock</name></decl></param>,
                       <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
                       <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_name</name> <init>= <expr><call><name>svn_path_basename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><call><name>svn_path_is_empty</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call>
      || <call><name>svn_dirent_is_root</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
      || ! <call><name>strcmp</name><argument_list>(<argument><expr><name>base_name</name></expr></argument>, <argument><expr>".."</expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>do_open</name><argument_list>(<argument><expr><name>anchor_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>write_lock</name></expr></argument>, <argument><expr><name>levels_to_lock</name></expr></argument>,
                      <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>cancel_func</name></expr></argument>, <argument><expr><name>cancel_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr>*<name>target_access</name> = *<name>anchor_access</name></expr>;</expr_stmt>
      <expr_stmt><expr>*<name>target</name> = ""</expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>p_access</name></decl>, *<decl><type ref="prev"/><name>t_access</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>parent</name> <init>= <expr><call><name>svn_path_dirname</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>p_access_err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>

      <comment type="block">/* Try to open parent of PATH to setup P_ACCESS */</comment>
      <expr_stmt><expr><name>err</name> = <call><name>do_open</name><argument_list>(<argument><expr>&amp;<name>p_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>write_lock</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                    <argument><expr><name>cancel_func</name></expr></argument>, <argument><expr><name>cancel_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
        <block>{
          <if>if <condition>(<expr><name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_WC_NOT_DIRECTORY</name></expr>)</condition><then>
            <block>{
              <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>p_access</name> = <name>NULL</name></expr>;</expr_stmt>
            }</block></then>
          <else>else <if>if <condition>(<expr><name>write_lock</name> &amp;&amp; (<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_WC_LOCKED</name>
                                  || <call><name>APR_STATUS_IS_EACCES</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>apr_err</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
            <block>{
              <comment type="block">/* If P_ACCESS isn't to be returned then a read-only baton
                 will do for now, but keep the error in case we need it. */</comment>
              <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err2</name> <init>= <expr><call><name>do_open</name><argument_list>(<argument><expr>&amp;<name>p_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr>0</expr></argument>,
                                          <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>cancel_func</name></expr></argument>, <argument><expr><name>cancel_baton</name></expr></argument>,
                                          <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <if>if <condition>(<expr><name>err2</name></expr>)</condition><then>
                <block>{
                  <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <return>return <expr><name>err</name></expr>;</return>
                }</block></then></if>
              <expr_stmt><expr><name>p_access_err</name> = <name>err</name></expr>;</expr_stmt>
            }</block></then>
          <else>else
            <return>return <expr><name>err</name></expr>;</return></else></if></else></if>
        }</block></then></if>

      <comment type="block">/* Try to open PATH to setup T_ACCESS */</comment>
      <expr_stmt><expr><name>err</name> = <call><name>do_open</name><argument_list>(<argument><expr>&amp;<name>t_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>write_lock</name></expr></argument>, <argument><expr><name>levels_to_lock</name></expr></argument>,
                    <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>cancel_func</name></expr></argument>, <argument><expr><name>cancel_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
        <block>{
          <if>if <condition>(<expr>! <name>p_access</name> || <name><name>err</name>-&gt;<name>apr_err</name></name> != <name>SVN_ERR_WC_NOT_DIRECTORY</name></expr>)</condition><then>
            <block>{
              <if>if <condition>(<expr><name>p_access</name></expr>)</condition><then>
                <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name>do_close</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
              <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>p_access_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <return>return <expr><name>err</name></expr>;</return>
            }</block></then></if>

          <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>t_access</name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></then></if>

      <comment type="block">/* At this stage might have P_ACCESS, T_ACCESS or both */</comment>

      <comment type="block">/* Check for switched or disjoint P_ACCESS and T_ACCESS */</comment>
      <if>if <condition>(<expr><name>p_access</name> &amp;&amp; <name>t_access</name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>t_entry</name></decl>, *<decl><type ref="prev"/><name>p_entry</name></decl>, *<decl><type ref="prev"/><name>t_entry_in_p</name></decl>;</decl_stmt>

          <expr_stmt><expr><name>err</name> = <call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>t_entry_in_p</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr>! <name>err</name></expr>)</condition><then>
            <expr_stmt><expr><name>err</name> = <call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>t_entry</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>t_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
          <if>if <condition>(<expr>! <name>err</name></expr>)</condition><then>
            <expr_stmt><expr><name>err</name> = <call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>p_entry</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
          <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
            <block>{
              <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>p_access_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name>do_close</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name>do_close</name><argument_list>(<argument><expr><name>t_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <return>return <expr><name>err</name></expr>;</return>
            }</block></then></if>

          <comment type="block">/* Disjoint won't have PATH in P_ACCESS, switched will have
             incompatible URLs */</comment>
          <if>if <condition>(<expr>! <name>t_entry_in_p</name>
              ||
              (<name><name>p_entry</name>-&gt;<name>url</name></name> &amp;&amp; <name><name>t_entry</name>-&gt;<name>url</name></name>
               &amp;&amp; (<call><name>strcmp</name><argument_list>(<argument><expr><call><name>svn_path_dirname</name><argument_list>(<argument><expr><name><name>t_entry</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>p_entry</name>-&gt;<name>url</name></name></expr></argument>)</argument_list></call>
                   || <call><name>strcmp</name><argument_list>(<argument><expr><call><name>svn_path_uri_encode</name><argument_list>(<argument><expr><name>base_name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><call><name>svn_path_basename</name><argument_list>(<argument><expr><name><name>t_entry</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>))</expr>)</condition><then>
            <block>{
              <comment type="block">/* Switched or disjoint, so drop P_ACCESS */</comment>
              <expr_stmt><expr><name>err</name> = <call><name>do_close</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
                <block>{
                  <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>p_access_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name>do_close</name><argument_list>(<argument><expr><name>t_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <return>return <expr><name>err</name></expr>;</return>
                }</block></then></if>
              <expr_stmt><expr><name>p_access</name> = <name>NULL</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>

      <if>if <condition>(<expr><name>p_access</name></expr>)</condition><then>
        <block>{
          <if>if <condition>(<expr><name>p_access_err</name></expr>)</condition><then>
            <block>{
              <comment type="block">/* Need P_ACCESS, so the read-only temporary won't do */</comment>
              <if>if <condition>(<expr><name>t_access</name></expr>)</condition><then>
                <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name>do_close</name><argument_list>(<argument><expr><name>t_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
              <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name>do_close</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <return>return <expr><name>p_access_err</name></expr>;</return>
            }</block></then>
          <else>else <if>if <condition>(<expr><name>t_access</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>join_batons</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>t_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></else></if>
        }</block></then></if>
      <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>p_access_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr>! <name>t_access</name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>t_entry</name></decl>;</decl_stmt>
          <expr_stmt><expr><name>err</name> = <call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>t_entry</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
            <block>{
              <if>if <condition>(<expr><name>p_access</name></expr>)</condition><then>
                <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name>do_close</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
              <return>return <expr><name>err</name></expr>;</return>
            }</block></then></if>
          <if>if <condition>(<expr><name>t_entry</name> &amp;&amp; <name><name>t_entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name></expr>)</condition><then>
            <block>{
              <expr_stmt><expr><call><name>adm_ensure_set</name><argument_list>(<argument><expr><name>p_access</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>p_access</name>-&gt;<name>set</name></name></expr></argument>, <argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>p_access</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>,
                           <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr>&amp;<name>missing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>

      <expr_stmt><expr>*<name>anchor_access</name> = <name>p_access</name> ? <name>p_access</name> : <name>t_access</name></expr>;</expr_stmt>
      <expr_stmt><expr>*<name>target_access</name> = <name>t_access</name> ? <name>t_access</name> : <name>p_access</name></expr>;</expr_stmt>

      <if>if <condition>(<expr>! <name>p_access</name></expr>)</condition><then>
        <expr_stmt><expr>*<name>target</name> = ""</expr>;</expr_stmt></then>
      <else>else
        <expr_stmt><expr>*<name>target</name> = <name>base_name</name></expr>;</expr_stmt></else></if>
    }</block></else></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Does the work of closing the access baton ADM_ACCESS.  Any physical
   locks are removed from the working copy if PRESERVE_LOCK is FALSE, or
   are left if PRESERVE_LOCK is TRUE.  Any associated access batons that
   are direct descendants will also be closed.

   ### FIXME: If the set has a "hole", say it contains locks for the
   ### directories A, A/B, A/B/C/X but not A/B/C then closing A/B will not
   ### reach A/B/C/X .
 */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>do_close</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
         <param><decl><type><name>svn_boolean_t</name></type> <name>preserve_lock</name></decl></param>,
         <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>)</parameter_list>
<block>{

  <if>if <condition>(<expr><name><name>adm_access</name>-&gt;<name>type</name></name> == <name>svn_wc__adm_access_closed</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* Close descendant batons */</comment>
  <if>if <condition>(<expr><name>recurse</name> &amp;&amp; <name><name>adm_access</name>-&gt;<name>set</name></name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>children</name>
        <init>= <expr><call><name>svn_sort__hash</name><argument_list>(<argument><expr><name><name>adm_access</name>-&gt;<name>set</name></name></expr></argument>, <argument><expr><name>svn_sort_compare_items_as_paths</name></expr></argument>,
                         <argument><expr><name><name>adm_access</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <comment type="block">/* Go backwards through the list to close children before their
         parents. */</comment>
      <for>for (<init><expr><name>i</name> = <name><name>children</name>-&gt;<name>nelts</name></name> - 1</expr>;</init> <condition><expr><name>i</name> &gt;= 0</expr>;</condition> <incr><expr>--<name>i</name></expr></incr>)
        <block>{
          <decl_stmt><decl><type><name>svn_sort__item_t</name> *</type><name>item</name> <init>= <expr>&amp;<call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>children</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
                                                  <argument><expr><name>svn_sort__item_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name> <init>= <expr><name><name>item</name>-&gt;<name>key</name></name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>child</name> <init>= <expr><name><name>item</name>-&gt;<name>value</name></name></expr></init></decl>;</decl_stmt>

          <if>if <condition>(<expr><name>child</name> == &amp;<name>missing</name></expr>)</condition><then>
            <block>{
              <comment type="block">/* We don't close the missing entry, but get rid of it from
                 the set. */</comment>
              <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>adm_access</name>-&gt;<name>set</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <continue>continue;</continue>
            }</block></then></if>

          <if>if <condition>(<expr>! <call><name>svn_path_is_ancestor</name><argument_list>(<argument><expr><name><name>adm_access</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call>
              || <call><name>strcmp</name><argument_list>(<argument><expr><name><name>adm_access</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
            <continue>continue;</continue></then></if>

          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>do_close</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>preserve_lock</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></then></if>

  <comment type="block">/* Physically unlock if required */</comment>
  <if>if <condition>(<expr><name><name>adm_access</name>-&gt;<name>type</name></name> == <name>svn_wc__adm_access_write_lock</name></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><name><name>adm_access</name>-&gt;<name>lock_exists</name></name> &amp;&amp; ! <name>preserve_lock</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>remove_lock</name><argument_list>(<argument><expr><name><name>adm_access</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name><name>adm_access</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>adm_access</name>-&gt;<name>lock_exists</name></name> = <name>FALSE</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

  <comment type="block">/* Reset to prevent further use of the lock. */</comment>
  <expr_stmt><expr><name><name>adm_access</name>-&gt;<name>type</name></name> = <name>svn_wc__adm_access_closed</name></expr>;</expr_stmt>

  <comment type="block">/* Detach from set */</comment>
  <if>if <condition>(<expr><name><name>adm_access</name>-&gt;<name>set</name></name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>adm_access</name>-&gt;<name>set</name></name></expr></argument>, <argument><expr><name><name>adm_access</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                   <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>! <name><name>adm_access</name>-&gt;<name>set_owner</name></name> || <call><name>apr_hash_count</name><argument_list>(<argument><expr><name><name>adm_access</name>-&gt;<name>set</name></name></expr></argument>)</argument_list></call> == 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_adm_close</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>do_close</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_boolean_t</name></type>
<name>svn_wc_adm_locked</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name><name>adm_access</name>-&gt;<name>type</name></name> == <name>svn_wc__adm_access_write_lock</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__adm_write_check</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name><name>adm_access</name>-&gt;<name>type</name></name> == <name>svn_wc__adm_access_write_lock</name></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><name><name>adm_access</name>-&gt;<name>lock_exists</name></name></expr>)</condition><then>
        <block>{
          <comment type="block">/* Check physical lock still exists and hasn't been stolen.  This
             really is paranoia, I have only ever seen one report of this
             triggering (from someone using the 0.25 release) and that was
             never reproduced.  The check accesses the physical filesystem
             so it is expensive, but it only runs when we are going to
             modify the admin area.  If it ever proves to be a bottleneck
             the physical check could be removed, just leaving the logical
             check. */</comment>
          <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>locked</name></decl>;</decl_stmt>

          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_locked</name><argument_list>(<argument><expr>&amp;<name>locked</name></expr></argument>, <argument><expr><name><name>adm_access</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name><name>adm_access</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr>! <name>locked</name></expr>)</condition><then>
            <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_WC_NOT_LOCKED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                     <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Write-lock stolen in '%s'"</expr></argument>)</argument_list></call></expr></argument>,
                                     <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name><name>adm_access</name>-&gt;<name>path</name></name></expr></argument>,
                                                          <argument><expr><name><name>adm_access</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
        }</block></then></if>
    }</block></then>
  <else>else
    <block>{
      <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_WC_NOT_LOCKED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                               <argument><expr><call><name>_</name><argument_list>(<argument><expr>"No write-lock in '%s'"</expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name><name>adm_access</name>-&gt;<name>path</name></name></expr></argument>,
                                                    <argument><expr><name><name>adm_access</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></else></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_locked</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>locked</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lockfile</name>
    <init>= <expr><call><name>svn_wc__adm_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>SVN_WC__ADM_LOCK</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_check_path</name><argument_list>(<argument><expr><name>lockfile</name></expr></argument>, <argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>kind</name> == <name>svn_node_file</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>locked</name> = <name>TRUE</name></expr>;</expr_stmt></then>
  <else>else <if>if <condition>(<expr><name>kind</name> == <name>svn_node_none</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>locked</name> = <name>FALSE</name></expr>;</expr_stmt></then>
  <else>else
    <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_WC_LOCKED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Lock file '%s' is not a regular file"</expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>lockfile</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></else></if></else></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_wc_adm_access_path</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name><name>adm_access</name>-&gt;<name>path</name></name></expr>;</return>
}</block></function>


<function><type><name>apr_pool_t</name> *</type>
<name>svn_wc_adm_access_pool</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name><name>adm_access</name>-&gt;<name>pool</name></name></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__adm_is_cleanup_required</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>cleanup</name></decl></param>,
                                <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name><name>adm_access</name>-&gt;<name>type</name></name> == <name>svn_wc__adm_access_write_lock</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>log_path</name>
        <init>= <expr><call><name>svn_wc__adm_path</name><argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>,
                           <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>SVN_WC__ADM_LOG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <comment type="block">/* The presence of a log file demands cleanup */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_check_path</name><argument_list>(<argument><expr><name>log_path</name></expr></argument>, <argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr>*<name>cleanup</name> = (<name>kind</name> == <name>svn_node_file</name>)</expr>;</expr_stmt>
    }</block></then>
  <else>else
    <expr_stmt><expr>*<name>cleanup</name> = <name>FALSE</name></expr>;</expr_stmt></else></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Ensure that the cache for the pruned hash (no deleted entries) in
   ADM_ACCESS is valid if the full hash is cached.  POOL is used for
   local, short term, memory allocation.

   ### Should this sort of processing be in entries.c? */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>prune_deleted</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>! <name><name>adm_access</name>-&gt;<name>entries</name></name> &amp;&amp; <name><name>adm_access</name>-&gt;<name>entries_hidden</name></name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>

      <comment type="block">/* I think it will be common for there to be no deleted entries, so
         it is worth checking for that case as we can optimise it. */</comment>
      <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>adm_access</name>-&gt;<name>entries_hidden</name></name></expr></argument>)</argument_list></call></expr>;</init>
           <condition><expr><name>hi</name></expr>;</condition>
           <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
        <block>{
          <decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>entry</name> = <name>val</name></expr>;</expr_stmt>
          <if>if <condition>(<expr>(<name><name>entry</name>-&gt;<name>deleted</name></name>
               &amp;&amp; (<name><name>entry</name>-&gt;<name>schedule</name></name> != <name>svn_wc_schedule_add</name>)
               &amp;&amp; (<name><name>entry</name>-&gt;<name>schedule</name></name> != <name>svn_wc_schedule_replace</name>))
              || <name><name>entry</name>-&gt;<name>absent</name></name></expr>)</condition><then>
            <break>break;</break></then></if>
        }</block></for>

      <if>if <condition>(<expr>! <name>hi</name></expr>)</condition><then>
        <block>{
          <comment type="block">/* There are no deleted entries, so we can use the full hash */</comment>
          <expr_stmt><expr><name><name>adm_access</name>-&gt;<name>entries</name></name> = <name><name>adm_access</name>-&gt;<name>entries_hidden</name></name></expr>;</expr_stmt>
          <return>return;</return>
        }</block></then></if>

      <comment type="block">/* Construct pruned hash without deleted entries */</comment>
      <expr_stmt><expr><name><name>adm_access</name>-&gt;<name>entries</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name><name>adm_access</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>adm_access</name>-&gt;<name>entries_hidden</name></name></expr></argument>)</argument_list></call></expr>;</init>
           <condition><expr><name>hi</name></expr>;</condition>
           <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
        <block>{
          <decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>

          <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>entry</name> = <name>val</name></expr>;</expr_stmt>
          <if>if <condition>(<expr>((<name><name>entry</name>-&gt;<name>deleted</name></name> == <name>FALSE</name>) &amp;&amp; (<name><name>entry</name>-&gt;<name>absent</name></name> == <name>FALSE</name>))
              || (<name><name>entry</name>-&gt;<name>schedule</name></name> == <name>svn_wc_schedule_add</name>)
              || (<name><name>entry</name>-&gt;<name>schedule</name></name> == <name>svn_wc_schedule_replace</name>)</expr>)</condition><then>
            <block>{
              <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>adm_access</name>-&gt;<name>entries</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>,
                           <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></then></if>
}</block></function>


<function><type><name>void</name></type>
<name>svn_wc__adm_access_set_entries</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                               <param><decl><type><name>svn_boolean_t</name></type> <name>show_hidden</name></decl></param>,
                               <param><decl><type><name>apr_hash_t</name> *</type><name>entries</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>show_hidden</name></expr>)</condition><then>
    <expr_stmt><expr><name><name>adm_access</name>-&gt;<name>entries_hidden</name></name> = <name>entries</name></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><name><name>adm_access</name>-&gt;<name>entries</name></name> = <name>entries</name></expr>;</expr_stmt></else></if>
}</block></function>


<function><type><name>apr_hash_t</name> *</type>
<name>svn_wc__adm_access_entries</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                           <param><decl><type><name>svn_boolean_t</name></type> <name>show_hidden</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>! <name>show_hidden</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>prune_deleted</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name><name>adm_access</name>-&gt;<name>entries</name></name></expr>;</return>
    }</block></then>
  <else>else
    <return>return <expr><name><name>adm_access</name>-&gt;<name>entries_hidden</name></name></expr>;</return></else></if>
}</block></function>

<function><type><name>void</name></type>
<name>svn_wc__adm_access_set_wcprops</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                        <param><decl><type><name>apr_hash_t</name> *</type><name>wcprops</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name><name>adm_access</name>-&gt;<name>wcprops</name></name> = <name>wcprops</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>apr_hash_t</name> *</type>
<name>svn_wc__adm_access_wcprops</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name><name>adm_access</name>-&gt;<name>wcprops</name></name></expr>;</return>
}</block></function>


<function><type><name>int</name></type>
<name>svn_wc__adm_wc_format</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name><name>adm_access</name>-&gt;<name>wc_format</name></name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name>svn_wc__adm_set_wc_format</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                          <param><decl><type><name>int</name></type> <name>format</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name><name>adm_access</name>-&gt;<name>wc_format</name></name> = <name>format</name></expr>;</expr_stmt>
}</block></function>


<function><type><name>svn_boolean_t</name></type>
<name>svn_wc__adm_missing</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name><name>adm_access</name>-&gt;<name>set</name></name>
      &amp;&amp; <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>adm_access</name>-&gt;<name>set</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call> == &amp;<name>missing</name></expr>)</condition><then>
    <return>return <expr><name>TRUE</name></expr>;</return></then></if>

  <return>return <expr><name>FALSE</name></expr>;</return>
}</block></function>


<comment type="block">/* Extend the scope of the svn_adm_access_t * passed in as WALK_BATON
   for its entire WC tree.  An implementation of
   svn_wc_entry_callbacks2_t's found_entry() API. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>extend_lock_found_entry</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl></param>,
                        <param><decl><type><name>void</name> *</type><name>walk_baton</name></decl></param>,
                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <comment type="block">/* If PATH is a directory, and it's not already locked, lock it all
     the way down to its leaf nodes. */</comment>
  <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name> &amp;&amp;
      <call><name>strcmp</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>SVN_WC_ENTRY_THIS_DIR</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>anchor_access</name> <init>= <expr><name>walk_baton</name></expr></init>, *<name>adm_access</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>write_lock</name> <init>=
        <expr>(<name><name>anchor_access</name>-&gt;<name>type</name></name> == <name>svn_wc__adm_access_write_lock</name>)</expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><call><name>svn_wc_adm_probe_try3</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name>anchor_access</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
                                               <argument><expr><name>write_lock</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
        <block>{
          <if>if <condition>(<expr><name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_WC_LOCKED</name></expr>)</condition><then>
            <comment type="block">/* Good!  The directory is *already* locked... */</comment>
            <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
          <else>else
            <return>return <expr><name>err</name></expr>;</return></else></if>
        }</block></then></if>
    }</block></then></if>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* WC entry walker callbacks for svn_wc__adm_extend_lock_to_tree(). */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_wc_entry_callbacks2_t</name></type> <name>extend_lock_walker</name> <init>=
  <expr><block>{
    <expr><name>extend_lock_found_entry</name></expr>,
    <expr><name>svn_wc__walker_default_error_handler</name></expr>
  }</block></expr></init></decl>;</decl_stmt>


<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__adm_extend_lock_to_tree</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_wc_walk_entries3</name><argument_list>(<argument><expr><name><name>adm_access</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
                              <argument><expr>&amp;<name>extend_lock_walker</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
                              <argument><expr><name>svn_depth_infinity</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
</unit>
