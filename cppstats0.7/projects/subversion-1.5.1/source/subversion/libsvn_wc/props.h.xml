<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_wc/props.h"><comment type="block">/*
 * props.h :  properties
 *
 * ====================================================================
 * Copyright (c) 2000-2006 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<escape char="0xc"/>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVN_LIBSVN_WC_PROPS_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_LIBSVN_WC_PROPS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_props.h"</cpp:file></cpp:include>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<typedef>typedef <type><enum>enum <name>svn_wc__props_kind_t</name>
<block>{
  <decl><name>svn_wc__props_base</name> <init>= <expr>0</expr></init></decl>,
  <decl><name>svn_wc__props_revert</name></decl>,
  <decl><name>svn_wc__props_wcprop</name></decl>,
  <decl><name>svn_wc__props_working</name></decl>
}</block></enum></type> <name>svn_wc__props_kind_t</name>;</typedef>

<escape char="0xc"/>
<comment type="block">/* If the working item at PATH has properties attached, set HAS_PROPS.
   ADM_ACCESS is an access baton set that contains PATH. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_wc__has_props</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>has_props</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                               <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Given ADM_ACCESS/PATH and an array of PROPCHANGES based on
   SERVER_BASEPROPS, merge the changes into the working copy.
   Append all necessary log entries to ENTRY_ACCUM.

   If BASE_PROPS or WORKING_PROPS is NULL, use the props from the
   working copy.

   If SERVER_BASEPROPS is NULL then use base props as PROPCHANGES
   base.

   If BASE_MERGE is FALSE then only change working properties;
   if TRUE, change both the base and working properties.

   If conflicts are found when merging, place them into a temporary
   .prej file within SVN, and write log commands to move this file
   into PATH, or append the conflicts to the file's already-existing
   .prej file in ADM_ACCESS.  Modify base properties unconditionally,
   if BASE_MERGE is TRUE, they do not generate conficts.

   If STATE is non-null, set *STATE to the state of the local properties
   after the merge.  */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_wc__merge_props</name><parameter_list>(<param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>state</name></decl></param>,
                                 <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                 <param><decl><type><name>apr_hash_t</name> *</type><name>server_baseprops</name></decl></param>,
                                 <param><decl><type><name>apr_hash_t</name> *</type><name>base_props</name></decl></param>,
                                 <param><decl><type><name>apr_hash_t</name> *</type><name>working_props</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>propchanges</name></decl></param>,
                                 <param><decl><type><name>svn_boolean_t</name></type> <name>base_merge</name></decl></param>,
                                 <param><decl><type><name>svn_boolean_t</name></type> <name>dry_run</name></decl></param>,
                                 <param><decl><type><name>svn_wc_conflict_resolver_func_t</name></type> <name>conflict_func</name></decl></param>,
                                 <param><decl><type><name>void</name> *</type><name>conflict_baton</name></decl></param>,
                                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                 <param><decl><type><name>svn_stringbuf_t</name> **</type><name>entry_accum</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Return a list of wc props for ENTRYNAME in ADM_ACCESS.
   ENTRYNAME must be the name of a file or SVN_WC_ENTRY_THIS_DIR.

   The returned WCPROPS may be allocated in POOL, or may be the props
   cached in ADM_ACCESS.  */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc__wcprop_list</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>wcprops</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>entryname</name></decl></param>,
                    <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Set a single 'wcprop' NAME to VALUE for versioned object PATH.
   If VALUE is null, remove property NAME.  ADM_ACCESS is an access
   baton set that contains PATH.

   If FORCE_WRITE is true, then the change will be written to disk
   immediately.  Else, only the in-memory cache (if that is used) will
   be updated and the caller is expected to use
   svn_wc__wcprops_write() later, on the correct access baton, to store
   the change persistently. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_wc__wcprop_set</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                                <param><decl><type><name>svn_boolean_t</name></type> <name>force_write</name></decl></param>,
                                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Returns TRUE if PROPS contains the svn:special property */</comment>
<function_decl><type><name>svn_boolean_t</name></type> <name>svn_wc__has_special_property</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Given PROPERTIES is array of @c svn_prop_t structures. Returns TRUE if any
   of the PROPERTIES are the known "magic" ones that might require
   changing the working file. */</comment>
<function_decl><type><name>svn_boolean_t</name></type> <name>svn_wc__has_magic_property</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>properties</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Extend LOG_ACCUM with log entries to install PROPS and, if WRITE_BASE_PROPS
   is true, BASE_PROPS for the PATH in ADM_ACCESS, updating the wc entry
   to reflect the changes.  Use POOL for temporary allocations. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_wc__install_props</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> **</type><name>log_accum</name></decl></param>,
                                   <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                   <param><decl><type><name>apr_hash_t</name> *</type><name>base_props</name></decl></param>,
                                   <param><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl></param>,
                                   <param><decl><type><name>svn_boolean_t</name></type> <name>write_base_props</name></decl></param>,
                                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Extend LOG_ACCUM with log entries to save the current baseprops of PATH
   as revert props.

   Makes sure the baseprops are destroyed if DESTROY_BASEPROPS is TRUE,
   the baseprops are preserved otherwise.
*/</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc__loggy_revert_props_create</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> **</type><name>log_accum</name></decl></param>,
                                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                  <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                                  <param><decl><type><name>svn_boolean_t</name></type> <name>destroy_baseprops</name></decl></param>,
                                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Extends LOG_ACCUM to make the revert props back into base props,
   deleting the revert props. */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc__loggy_revert_props_restore</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> **</type><name>log_accum</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                   <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Extends LOG_ACCUM to delete PROPS_KIND props installed for PATH. */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc__loggy_props_delete</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> **</type><name>log_accum</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                           <param><decl><type><name>svn_wc__props_kind_t</name></type> <name>props_kind</name></decl></param>,
                           <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Delete PROPS_KIND props for PATH */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc__props_delete</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                     <param><decl><type><name>svn_wc__props_kind_t</name></type> <name>props_kind</name></decl></param>,
                     <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Flushes props for PATH of PROPS_KIND cached in ADM_ACCESS to disk
   using POOL for temporary allocations. */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc__props_flush</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                    <param><decl><type><name>svn_wc__props_kind_t</name></type> <name>props_kind</name></decl></param>,
                    <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Install PATHs working props as base props, clearing the
   has_prop_mods cache value in the entries file.

   Updates the on-disk entries file if SYNC_ENTRIES is TRUE.*/</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc__working_props_committed</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                                <param><decl><type><name>svn_boolean_t</name></type> <name>sync_entries</name></decl></param>,
                                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Return in *MOD_TIME the time at which PROPS_KIND props of PATH
   were last modified, or 0 (zero) if unknown. */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc__props_last_modified</name><parameter_list>(<param><decl><type><name>apr_time_t</name> *</type><name>mod_time</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                            <param><decl><type><name>svn_wc__props_kind_t</name></type> <name>props_kind</name></decl></param>,
                            <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Check PATH for prop mods, returning the result in *PROP_MODS.

   This function takes into account that some working copy versions
   don't have a has_prop_mods cache laying around */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc__has_prop_mods</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>prop_mods</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                      <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Load the base, working and revert props for PATH in ADM_ACCESS returning
   them in *BASE_PROPS_P, *PROPS_P and *REVERT_PROPS_P respectively.
   Any of BASE_PROPS, PROPS and REVERT_PROPS may be null.
   Do all allocations in POOL.  */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc__load_props</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>base_props_p</name></decl></param>,
                   <param><decl><type><name>apr_hash_t</name> **</type><name>props_p</name></decl></param>,
                   <param><decl><type><name>apr_hash_t</name> **</type><name>revert_props_p</name></decl></param>,
                   <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SVN_LIBSVN_WC_PROPS_H */</comment>
</unit>
