<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_wc/translate.h"><comment type="block">/*
 * translate.h :  eol and keyword translation
 *
 * ====================================================================
 * Copyright (c) 2000-2004 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<escape char="0xc"/>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVN_LIBSVN_WC_TRANSLATE_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_LIBSVN_WC_TRANSLATE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_subst.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<escape char="0xc"/>
<comment type="block">/* Newline and keyword translation properties */</comment>

<comment type="block">/* Query the SVN_PROP_EOL_STYLE property on file PATH.  If STYLE is
   non-null, set *STYLE to PATH's eol style.  Set *EOL to

      - NULL for svn_subst_eol_style_none, or

      - a null-terminated C string containing the native eol marker
        for this platform, for svn_subst_eol_style_native, or

      - a null-terminated C string containing the eol marker indicated
        by the property value, for svn_subst_eol_style_fixed.

   If STYLE is null on entry, ignore it.  If *EOL is non-null on exit,
   it is a static string not allocated in POOL.

   ADM_ACCESS is an access baton set that contains PATH.

   Use POOL for temporary allocation.
*/</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_wc__get_eol_style</name><parameter_list>(<param><decl><type><name>svn_subst_eol_style_t</name> *</type><name>style</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>eol</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                   <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Reverse parser.  Given a real EOL string ("\n", "\r", or "\r\n"),
   return an encoded *VALUE ("LF", "CR", "CRLF") that one might see in
   the property value. */</comment>
<function_decl><type><name>void</name></type> <name>svn_wc__eol_value_from_string</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>value</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>eol</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Expand keywords for the file at PATH, by parsing a
   whitespace-delimited list of keywords.  If any keywords are found
   in the list, allocate *KEYWORDS from POOL and populate it with
   mappings from (const char *) keywords to their (svn_string_t *)
   values (also allocated in POOL).

   If a keyword is in the list, but no corresponding value is
   available, do not create a hash entry for it.  If no keywords are
   found in the list, or if there is no list, set *KEYWORDS to NULL.

   ADM_ACCESS must be an access baton for PATH.

   If FORCE_LIST is non-null, use it as the list; else use the
   SVN_PROP_KEYWORDS property for PATH.  In either case, use PATH to
   expand keyword values.
*/</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_wc__get_keywords</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>keywords</name></decl></param>,
                                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                  <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>force_list</name></decl></param>,
                                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Determine if the svn:special flag is set on PATH.  If so, set
   SPECIAL to TRUE, if not, set it to FALSE.  ADM_ACCESS must be an
   access baton for PATH.  Perform any temporary allocations in
   POOL. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_wc__get_special</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>special</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                 <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* If the SVN_PROP_EXECUTABLE property is present at all, then set
   PATH executable.  If DID_SET is non-null, then set *DID_SET to
   TRUE if did set PATH executable, or to FALSE if not.  ADM_ACCESS
   is an access baton set that contains PATH. */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc__maybe_set_executable</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>did_set</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                             <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* If the SVN_PROP_NEEDS_LOCK property is present and there is no
   lock token for the file in the working copy, set PATH to
   read-only. If DID_SET is non-null, then set *DID_SET to TRUE if
   did set PATH read-write, or to FALSE if not.  ADM_ACCESS is an
   access baton set that contains PATH. */</comment>
<function_decl><type><name>svn_error_t</name> *</type> <name>svn_wc__maybe_set_read_only</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>did_set</name></decl></param>,
                                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                          <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SVN_LIBSVN_WC_TRANSLATE_H */</comment>
</unit>
