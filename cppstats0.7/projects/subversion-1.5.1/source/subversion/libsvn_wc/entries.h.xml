<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_wc/entries.h"><comment type="block">/*
 * entries.h :  manipulating entries
 *
 * ====================================================================
 * Copyright (c) 2000-2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<escape char="0xc"/>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVN_LIBSVN_WC_ENTRIES_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_LIBSVN_WC_ENTRIES_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<escape char="0xc"/>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRIES_TOPLEVEL</name></cpp:macro>       <cpp:value>"wc-entries"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRIES_ENTRY</name></cpp:macro>          <cpp:value>"entry"</cpp:value></cpp:define>

<comment type="block">/* String representations for svn_node_kind.  This maybe should be
   abstracted farther out? */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRIES_ATTR_FILE_STR</name></cpp:macro>   <cpp:value>"file"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRIES_ATTR_DIR_STR</name></cpp:macro>    <cpp:value>"dir"</cpp:value></cpp:define>


<comment type="block">/* The names of the fields used for storing entries' information.
   Used for the names of the XML attributes in XML entries files
   (format 6 and below), for the names of attributes in wc logs,
   and for error reporting when reading a non-XML entries file.
   ### If you add or remove items here, you probably want to make sure
   to do the same for the SVN_WC__ENTRY_MODIFY_* #defines as well. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_ATTR_NAME</name></cpp:macro>               <cpp:value>"name"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_ATTR_REVISION</name></cpp:macro>           <cpp:value>"revision"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_ATTR_URL</name></cpp:macro>                <cpp:value>"url"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_ATTR_REPOS</name></cpp:macro>              <cpp:value>"repos"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_ATTR_KIND</name></cpp:macro>               <cpp:value>"kind"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_ATTR_TEXT_TIME</name></cpp:macro>          <cpp:value>"text-time"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_ATTR_PROP_TIME</name></cpp:macro>          <cpp:value>"prop-time"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_ATTR_CHECKSUM</name></cpp:macro>           <cpp:value>"checksum"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_ATTR_SCHEDULE</name></cpp:macro>           <cpp:value>"schedule"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_ATTR_COPIED</name></cpp:macro>             <cpp:value>"copied"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_ATTR_DELETED</name></cpp:macro>            <cpp:value>"deleted"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_ATTR_ABSENT</name></cpp:macro>             <cpp:value>"absent"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_ATTR_COPYFROM_URL</name></cpp:macro>       <cpp:value>"copyfrom-url"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_ATTR_COPYFROM_REV</name></cpp:macro>       <cpp:value>"copyfrom-rev"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_ATTR_CONFLICT_OLD</name></cpp:macro>       <cpp:value>"conflict-old"</cpp:value></cpp:define> <comment type="block">/* saved old file */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_ATTR_CONFLICT_NEW</name></cpp:macro>       <cpp:value>"conflict-new"</cpp:value></cpp:define> <comment type="block">/* saved new file */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_ATTR_CONFLICT_WRK</name></cpp:macro>       <cpp:value>"conflict-wrk"</cpp:value></cpp:define> <comment type="block">/* saved wrk file */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_ATTR_PREJFILE</name></cpp:macro>           <cpp:value>"prop-reject-file"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_ATTR_CMT_REV</name></cpp:macro>            <cpp:value>"committed-rev"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_ATTR_CMT_DATE</name></cpp:macro>           <cpp:value>"committed-date"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_ATTR_CMT_AUTHOR</name></cpp:macro>         <cpp:value>"last-author"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_ATTR_UUID</name></cpp:macro>               <cpp:value>"uuid"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_ATTR_INCOMPLETE</name></cpp:macro>         <cpp:value>"incomplete"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_ATTR_LOCK_TOKEN</name></cpp:macro>         <cpp:value>"lock-token"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_ATTR_LOCK_OWNER</name></cpp:macro>         <cpp:value>"lock-owner"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_ATTR_LOCK_COMMENT</name></cpp:macro>       <cpp:value>"lock-comment"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_ATTR_LOCK_CREATION_DATE</name></cpp:macro> <cpp:value>"lock-creation-date"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_ATTR_HAS_PROPS</name></cpp:macro>          <cpp:value>"has-props"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_ATTR_HAS_PROP_MODS</name></cpp:macro>      <cpp:value>"has-prop-mods"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_ATTR_CACHABLE_PROPS</name></cpp:macro>     <cpp:value>"cachable-props"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_ATTR_PRESENT_PROPS</name></cpp:macro>      <cpp:value>"present-props"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_ATTR_CHANGELIST</name></cpp:macro>         <cpp:value>"changelist"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_ATTR_KEEP_LOCAL</name></cpp:macro>         <cpp:value>"keep-local"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_ATTR_WORKING_SIZE</name></cpp:macro>       <cpp:value>"working-size"</cpp:value></cpp:define>

<comment type="block">/* Attribute values for 'schedule' */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_VALUE_ADD</name></cpp:macro>        <cpp:value>"add"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_VALUE_DELETE</name></cpp:macro>     <cpp:value>"delete"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_VALUE_REPLACE</name></cpp:macro>    <cpp:value>"replace"</cpp:value></cpp:define>


<escape char="0xc"/>
<comment type="block">/* Initialize an entries file based on URL at INITIAL_REV, in the adm
   area for PATH.  The adm area must not already have an entries
   file.  UUID is the repository UUID, and may be NULL.  REPOS is the
   repository root URL and, if not NULL, must be a prefix of URL.
   DEPTH is the initial depth of the working copy, it must be a
   definite depth, not svn_depth_unknown.

   If initial rev is valid and non-zero, then mark the 'this_dir'
   entry as being incomplete.
*/</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_wc__entries_init</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>uuid</name></decl></param>,
                                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
                                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos</name></decl></param>,
                                  <param><decl><type><name>svn_revnum_t</name></type> <name>initial_rev</name></decl></param>,
                                  <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Create or overwrite an `entries' file for ADM_ACCESS using the contents
   of ENTRIES.  See also svn_wc_entries_read() in the public api. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_wc__entries_write</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>entries</name></decl></param>,
                                   <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Set *NEW_ENTRY to a new entry, taking attributes from ATTS, whose
   keys and values are both char *.  Allocate the entry and copy
   attributes into POOL as needed.

   Set MODIFY_FLAGS to reflect the fields that were present in ATTS. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_wc__atts_to_entry</name><parameter_list>(<param><decl><type><name>svn_wc_entry_t</name> **</type><name>new_entry</name></decl></param>,
                                   <param><decl><type><name>apr_uint64_t</name> *</type><name>modify_flags</name></decl></param>,
                                   <param><decl><type><name>apr_hash_t</name> *</type><name>atts</name></decl></param>,
                                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* The MODIFY_FLAGS that tell svn_wc__entry_modify which parameters to
   pay attention to.  ### These should track the changes made to the
   SVN_WC__ENTRY_ATTR_* #defines! */</comment>
<comment type="block">/* Note: we use APR_INT64_C because APR 0.9 lacks APR_UINT64_C */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_MODIFY_REVISION</name></cpp:macro>           <cpp:value>APR_INT64_C(0x0000000000000001)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_MODIFY_URL</name></cpp:macro>                <cpp:value>APR_INT64_C(0x0000000000000002)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_MODIFY_REPOS</name></cpp:macro>              <cpp:value>APR_INT64_C(0x0000000000000004)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_MODIFY_KIND</name></cpp:macro>               <cpp:value>APR_INT64_C(0x0000000000000008)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_MODIFY_TEXT_TIME</name></cpp:macro>          <cpp:value>APR_INT64_C(0x0000000000000010)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_MODIFY_PROP_TIME</name></cpp:macro>          <cpp:value>APR_INT64_C(0x0000000000000020)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_MODIFY_CHECKSUM</name></cpp:macro>           <cpp:value>APR_INT64_C(0x0000000000000040)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_MODIFY_SCHEDULE</name></cpp:macro>           <cpp:value>APR_INT64_C(0x0000000000000080)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_MODIFY_COPIED</name></cpp:macro>             <cpp:value>APR_INT64_C(0x0000000000000100)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_MODIFY_DELETED</name></cpp:macro>            <cpp:value>APR_INT64_C(0x0000000000000200)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_MODIFY_COPYFROM_URL</name></cpp:macro>       <cpp:value>APR_INT64_C(0x0000000000000400)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_MODIFY_COPYFROM_REV</name></cpp:macro>       <cpp:value>APR_INT64_C(0x0000000000000800)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_MODIFY_CONFLICT_OLD</name></cpp:macro>       <cpp:value>APR_INT64_C(0x0000000000001000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_MODIFY_CONFLICT_NEW</name></cpp:macro>       <cpp:value>APR_INT64_C(0x0000000000002000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_MODIFY_CONFLICT_WRK</name></cpp:macro>       <cpp:value>APR_INT64_C(0x0000000000004000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_MODIFY_PREJFILE</name></cpp:macro>           <cpp:value>APR_INT64_C(0x0000000000008000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_MODIFY_CMT_REV</name></cpp:macro>            <cpp:value>APR_INT64_C(0x0000000000010000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_MODIFY_CMT_DATE</name></cpp:macro>           <cpp:value>APR_INT64_C(0x0000000000020000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_MODIFY_CMT_AUTHOR</name></cpp:macro>         <cpp:value>APR_INT64_C(0x0000000000040000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_MODIFY_UUID</name></cpp:macro>               <cpp:value>APR_INT64_C(0x0000000000080000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_MODIFY_INCOMPLETE</name></cpp:macro>         <cpp:value>APR_INT64_C(0x0000000000100000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_MODIFY_ABSENT</name></cpp:macro>             <cpp:value>APR_INT64_C(0x0000000000200000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_MODIFY_LOCK_TOKEN</name></cpp:macro>         <cpp:value>APR_INT64_C(0x0000000000400000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_MODIFY_LOCK_OWNER</name></cpp:macro>         <cpp:value>APR_INT64_C(0x0000000000800000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_MODIFY_LOCK_COMMENT</name></cpp:macro>       <cpp:value>APR_INT64_C(0x0000000001000000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_MODIFY_LOCK_CREATION_DATE</name></cpp:macro> <cpp:value>APR_INT64_C(0x0000000002000000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_MODIFY_HAS_PROPS</name></cpp:macro>          <cpp:value>APR_INT64_C(0x0000000004000000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_MODIFY_HAS_PROP_MODS</name></cpp:macro>      <cpp:value>APR_INT64_C(0x0000000008000000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_MODIFY_CACHABLE_PROPS</name></cpp:macro>     <cpp:value>APR_INT64_C(0x0000000010000000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_MODIFY_PRESENT_PROPS</name></cpp:macro>      <cpp:value>APR_INT64_C(0x0000000020000000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_MODIFY_CHANGELIST</name></cpp:macro>         <cpp:value>APR_INT64_C(0x0000000040000000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_MODIFY_KEEP_LOCAL</name></cpp:macro>         <cpp:value>APR_INT64_C(0x0000000080000000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_MODIFY_WORKING_SIZE</name></cpp:macro>       <cpp:value>APR_INT64_C(0x0000000100000000)</cpp:value></cpp:define>
<comment type="block">/* No #define for DEPTH, because it's only meaningful on this-dir anyway. */</comment>

<comment type="block">/* ...ORed together with this to mean "I really mean this, don't be
   trying to protect me from myself on this one." */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ENTRY_MODIFY_FORCE</name></cpp:macro>              <cpp:value>APR_INT64_C(0x4000000000000000)</cpp:value></cpp:define>


<comment type="block">/* Modify an entry for NAME in access baton ADM_ACCESS by folding in
   ("merging") changes, and sync those changes to disk.  New values
   for the entry are pulled from their respective fields in ENTRY, and
   MODIFY_FLAGS is a bitmask to specify which of those field to pay
   attention to.  ADM_ACCESS must hold a write lock.

   NAME can be NULL to specify that the caller wishes to modify the
   "this dir" entry in ADM_ACCESS.

   If DO_SYNC is FALSE then the modification will be entirely local to the
   access baton, if DO_SYNC is TRUE the modification will be written to
   the entries file.  Be careful when setting DO_SYNC to FALSE: if there
   is no subsequent svn_wc__entries_write call the modifications will be
   lost when the access baton is closed.

   Perform all allocations in POOL.

   NOTE: when you call this function, the entries file will be read,
   tweaked and finally, if DO_SYNC is TRUE, written back out.  */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_wc__entry_modify</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                                  <param><decl><type><name>svn_wc_entry_t</name> *</type><name>entry</name></decl></param>,
                                  <param><decl><type><name>apr_uint64_t</name></type> <name>modify_flags</name></decl></param>,
                                  <param><decl><type><name>svn_boolean_t</name></type> <name>do_sync</name></decl></param>,
                                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Remove entry NAME from ENTRIES, unconditionally. */</comment>
<function_decl><type><name>void</name></type> <name>svn_wc__entry_remove</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>entries</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Tweak the entry NAME within hash ENTRIES.  If NEW_URL is non-null,
 * make this the entry's new url.  If NEW_REV is valid, make this the
 * entry's working revision.  (This is purely an in-memory operation.)
 * If REPOS is non-NULL, set the repository root on the entry to REPOS,
 * provided it is a prefix of the entry's URL (and if it is the THIS_DIR
 * entry, all child URLs also match.)
 * If ALLOW_REMOVAL is TRUE the tweaks might cause the entry NAME to
 * be removed from the hash, if ALLOW_REMOVAL is FALSE this will not
 * happen.
 *
 * *WRITE_REQUIRED will be set to TRUE if the tweaks make changes that
 * require the entries to be written to disk, otherwise *WRITE_REQUIRED
 * will not be altered.
 *
 * (Intended as a helper to svn_wc__do_update_cleanup, which see.)
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc__tweak_entry</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>entries</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>new_url</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos</name></decl></param>,
                    <param><decl><type><name>svn_revnum_t</name></type> <name>new_rev</name></decl></param>,
                    <param><decl><type><name>svn_boolean_t</name></type> <name>allow_removal</name></decl></param>,
                    <param><decl><type><name>svn_boolean_t</name> *</type><name>write_required</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SVN_LIBSVN_WC_ENTRIES_H */</comment>
</unit>
