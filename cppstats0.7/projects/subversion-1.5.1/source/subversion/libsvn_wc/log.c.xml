<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_wc/log.c"><comment type="block">/*
 * log.c:  handle the adm area's log file.
 *
 * ====================================================================
 * Copyright (c) 2000-2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>


<escape char="0xc"/>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_wc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_xml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_iter.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"props.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"adm_files.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"entries.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"translate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"questions.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>

<escape char="0xc"/>
<comment type="block">/*** Constant definitions for xml generation/parsing ***/</comment>

<comment type="block">/* Note: every entry in the logfile is either idempotent or atomic.
 * This allows us to remove the entire logfile when every entry in it
 * has been completed -- if you crash in the middle of running a
 * logfile, and then later are running over it again as part of the
 * recovery, a given entry is "safe" in the sense that you can either
 * tell it has already been done (in which case, ignore it) or you can
 * do it again without ill effect.
 *
 * All log commands are self-closing tags with attributes.
 */</comment>


<comment type="block">/** Log actions. **/</comment>

<comment type="block">/* Set some attributes on SVN_WC__LOG_ATTR_NAME's entry.  Unmentioned
   attributes are unaffected. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__LOG_MODIFY_ENTRY</name></cpp:macro>        <cpp:value>"modify-entry"</cpp:value></cpp:define>

<comment type="block">/* Delete lock related fields from the entry SVN_WC__LOG_ATTR_NAME. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__LOG_DELETE_LOCK</name></cpp:macro>         <cpp:value>"delete-lock"</cpp:value></cpp:define>

<comment type="block">/* Delete changelist field from the entry SVN_WC__LOG_ATTR_NAME. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__LOG_DELETE_CHANGELIST</name></cpp:macro>   <cpp:value>"delete-changelist"</cpp:value></cpp:define>

<comment type="block">/* Delete the entry SVN_WC__LOG_ATTR_NAME. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__LOG_DELETE_ENTRY</name></cpp:macro>        <cpp:value>"delete-entry"</cpp:value></cpp:define>

<comment type="block">/* Move file SVN_WC__LOG_ATTR_NAME to SVN_WC__LOG_ATTR_DEST. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__LOG_MV</name></cpp:macro>                  <cpp:value>"mv"</cpp:value></cpp:define>

<comment type="block">/* Copy file SVN_WC__LOG_ATTR_NAME to SVN_WC__LOG_ATTR_DEST. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__LOG_CP</name></cpp:macro>                  <cpp:value>"cp"</cpp:value></cpp:define>

<comment type="block">/* Copy file SVN_WC__LOG_ATTR_NAME to SVN_WC__LOG_ATTR_DEST, but
   expand any keywords and use any eol-style defined by properties of
   the DEST. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__LOG_CP_AND_TRANSLATE</name></cpp:macro>    <cpp:value>"cp-and-translate"</cpp:value></cpp:define>

<comment type="block">/* Copy file SVN_WC__LOG_ATTR_NAME to SVN_WC__LOG_ATTR_DEST, but
   contract any keywords and convert to LF eol, according to
   properties of NAME. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__LOG_CP_AND_DETRANSLATE</name></cpp:macro>    <cpp:value>"cp-and-detranslate"</cpp:value></cpp:define>

<comment type="block">/* Remove file SVN_WC__LOG_ATTR_NAME. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__LOG_RM</name></cpp:macro>                  <cpp:value>"rm"</cpp:value></cpp:define>

<comment type="block">/* Append file from SVN_WC__LOG_ATTR_NAME to SVN_WC__LOG_ATTR_DEST. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__LOG_APPEND</name></cpp:macro>              <cpp:value>"append"</cpp:value></cpp:define>

<comment type="block">/* Make file SVN_WC__LOG_ATTR_NAME readonly */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__LOG_READONLY</name></cpp:macro>            <cpp:value>"readonly"</cpp:value></cpp:define>

<comment type="block">/* Make file SVN_WC__LOG_ATTR_NAME readonly if needs-lock property is set
   and there is no lock token for the file in the working copy. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__LOG_MAYBE_READONLY</name></cpp:macro> <cpp:value>"maybe-readonly"</cpp:value></cpp:define>

<comment type="block">/* Make file SVN_WC__LOG_ATTR_NAME executable if the
   executable property is set. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__LOG_MAYBE_EXECUTABLE</name></cpp:macro> <cpp:value>"maybe-executable"</cpp:value></cpp:define>

<comment type="block">/* Set SVN_WC__LOG_ATTR_NAME to have timestamp SVN_WC__LOG_ATTR_TIMESTAMP. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__LOG_SET_TIMESTAMP</name></cpp:macro>       <cpp:value>"set-timestamp"</cpp:value></cpp:define>


<comment type="block">/* Handle closure after a commit completes successfully:
 *
 *   If SVN/tmp/text-base/SVN_WC__LOG_ATTR_NAME exists, then
 *      compare SVN/tmp/text-base/SVN_WC__LOG_ATTR_NAME with working file
 *         if they're the same, use working file's timestamp
 *         else use SVN/tmp/text-base/SVN_WC__LOG_ATTR_NAME's timestamp
 *      set SVN_WC__LOG_ATTR_NAME's revision to N
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__LOG_COMMITTED</name></cpp:macro>           <cpp:value>"committed"</cpp:value></cpp:define>

<comment type="block">/* On target SVN_WC__LOG_ATTR_NAME, set wc property
   SVN_WC__LOG_ATTR_PROPNAME to value SVN_WC__LOG_ATTR_PROPVAL.  If
   SVN_WC__LOG_ATTR_PROPVAL is absent, then remove the property. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__LOG_MODIFY_WCPROP</name></cpp:macro>        <cpp:value>"modify-wcprop"</cpp:value></cpp:define>


<comment type="block">/* DEPRECATED, left for compat with pre-v8 format working copies

   A log command which runs svn_wc_merge2().
   See its documentation for details.

   Here is a map of entry-attributes to svn_wc_merge arguments:

         SVN_WC__LOG_NAME         : MERGE_TARGET
         SVN_WC__LOG_ATTR_ARG_1   : LEFT
         SVN_WC__LOG_ATTR_ARG_2   : RIGHT
         SVN_WC__LOG_ATTR_ARG_3   : LEFT_LABEL
         SVN_WC__LOG_ATTR_ARG_4   : RIGHT_LABEL
         SVN_WC__LOG_ATTR_ARG_5   : TARGET_LABEL

   Of course, the three paths should be *relative* to the directory in
   which the log is running, as with all other log commands.  (Usually
   they're just basenames within loggy-&gt;path.)
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__LOG_MERGE</name></cpp:macro>        <cpp:value>"merge"</cpp:value></cpp:define>

<comment type="block">/* Upgrade the WC format, both .svn/format and the format number in the
   entries file to SVN_WC__LOG_ATTR_FORMAT. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__LOG_UPGRADE_FORMAT</name></cpp:macro> <cpp:value>"upgrade-format"</cpp:value></cpp:define>

<comment type="block">/** Log attributes.  See the documentation above for log actions for
    how these are used. **/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__LOG_ATTR_NAME</name></cpp:macro>           <cpp:value>"name"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__LOG_ATTR_DEST</name></cpp:macro>           <cpp:value>"dest"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__LOG_ATTR_REVISION</name></cpp:macro>       <cpp:value>"revision"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__LOG_ATTR_TIMESTAMP</name></cpp:macro>      <cpp:value>"timestamp"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__LOG_ATTR_PROPNAME</name></cpp:macro>       <cpp:value>"propname"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__LOG_ATTR_PROPVAL</name></cpp:macro>        <cpp:value>"propval"</cpp:value></cpp:define>

<comment type="block">/* This one is for SVN_WC__LOG_MERGE
   and optionally SVN_WC__LOG_CP_AND_(DE)TRANSLATE to indicate special-only */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__LOG_ATTR_ARG_1</name></cpp:macro>          <cpp:value>"arg1"</cpp:value></cpp:define>
<comment type="block">/* This one is for SVN_WC__LOG_MERGE
   and optionally SVN_WC__LOG_CP_AND_(DE)TRANSLATE to indicate a versioned
   path to take its translation properties from */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__LOG_ATTR_ARG_2</name></cpp:macro>          <cpp:value>"arg2"</cpp:value></cpp:define>
<comment type="block">/* The rest are for SVN_WC__LOG_MERGE.  Extend as necessary. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__LOG_ATTR_ARG_3</name></cpp:macro>          <cpp:value>"arg3"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__LOG_ATTR_ARG_4</name></cpp:macro>          <cpp:value>"arg4"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__LOG_ATTR_ARG_5</name></cpp:macro>          <cpp:value>"arg5"</cpp:value></cpp:define>
<comment type="block">/* For upgrade-format. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__LOG_ATTR_FORMAT</name></cpp:macro>         <cpp:value>"format"</cpp:value></cpp:define>
<comment type="block">/* For modify-entry */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__LOG_ATTR_FORCE</name></cpp:macro>          <cpp:value>"force"</cpp:value></cpp:define>




<escape char="0xc"/>
<comment type="block">/*** Userdata for the callbacks. ***/</comment>
<struct>struct <name>log_runner</name>
<block>{
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_xml_parser_t</name> *</type><name>parser</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>entries_modified</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>wcprops_modified</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>rerun</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>  <comment type="block">/* the dir in which all this happens */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>diff3_cmd</name></decl>;</decl_stmt>            <comment type="block">/* external diff3 cmd, or null if none */</comment>

  <comment type="block">/* Which top-level log element we're on for this logfile.  Some
     callers care whether a failure happened on the first element or
     on some later element (e.g., 'svn cleanup').

     This is initialized to 0 when the log_runner is created, and
     incremented every time start_handler() is called. */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
}</block>;</struct>


<escape char="0xc"/>
<comment type="block">/*** Forward declarations ***/</comment>

<comment type="block">/* log runner forward declaration used in log_do_merge */</comment>
<function_decl><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>run_log_from_memory</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>buf</name></decl></param>,
                    <param><decl><type><name>apr_size_t</name></type> <name>buf_len</name></decl></param>,
                    <param><decl><type><name>svn_boolean_t</name></type> <name>rerun</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>diff3_cmd</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>




<escape char="0xc"/>
<comment type="block">/*** The XML handlers. ***/</comment>

<comment type="block">/* Used by file_xfer_under_path(). */</comment>
<enum>enum <name>svn_wc__xfer_action</name> <block>{
  <decl><name>svn_wc__xfer_cp</name></decl>,
  <decl><name>svn_wc__xfer_mv</name></decl>,
  <decl><name>svn_wc__xfer_append</name></decl>,
  <decl><name>svn_wc__xfer_cp_and_translate</name></decl>,
  <decl><name>svn_wc__xfer_cp_and_detranslate</name></decl>
}</block>;</enum>


<comment type="block">/* Perform some sort of copy-related ACTION on NAME and DEST:

      svn_wc__xfer_cp:                 just do a copy of NAME to DEST.
      svn_wc__xfer_mv:                 do a copy, then remove NAME.
      svn_wc__xfer_append:             append contents of NAME to DEST
      svn_wc__xfer_cp_and_translate:   copy NAME to DEST, doing any eol
                                       and keyword expansion according to
                                       the current property vals of VERSIONED
                                       or, if that's NULL, those of DEST.
      svn_wc__xfer_cp_and_detranslate: copy NAME to DEST, converting to LF
                                       and contracting keywords according to
                                       the current property vals of VERSIONED
                                       or, if that's NULL, those of NAME.

      When SPECIAL_ONLY is TRUE, only translate special,
      not keywords and eol-style.

*/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>file_xfer_under_path</name><argument_list>(<argument><expr><name>svn_wc_adm_access_t</name> *<name>adm_access</name></expr></argument>,
                     <argument><expr>const <name>char</name> *<name>name</name></expr></argument>,
                     <argument><expr>const <name>char</name> *<name>dest</name></expr></argument>,
                     <argument><expr>const <name>char</name> *<name>versioned</name></expr></argument>,
                     <argument>enum <expr><name>svn_wc__xfer_action</name> <name>action</name></expr></argument>,
                     <argument><expr><name>svn_boolean_t</name> <name>special_only</name></expr></argument>,
                     <argument><expr><name>svn_boolean_t</name> <name>rerun</name></expr></argument>,
                     <argument><expr><name>apr_pool_t</name> *<name>pool</name></expr></argument>)</argument_list>
<block>{
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>full_from_path</name></decl>, *<decl><type ref="prev"/><name>full_dest_path</name></decl>, *<decl><type ref="prev"/><name>full_versioned_path</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>full_from_path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>,
                                 <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>full_dest_path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dest</name></expr></argument>,
                                 <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>versioned</name></expr>)</condition><then>
    <expr_stmt><expr><name>full_versioned_path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>,
                                        <argument><expr><name>versioned</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><name>full_versioned_path</name> = <name>NULL</name></expr>;</expr_stmt></else></if> <comment type="block">/* Silence GCC uninitialised warning */</comment>

  <switch>switch <condition>(<expr><name>action</name></expr>)</condition>
    <block>{
    <case>case <expr><name>svn_wc__xfer_append</name></expr>:
      <expr_stmt><expr><name>err</name> = <call><name>svn_io_append_file</name><argument_list>(<argument><expr><name>full_from_path</name></expr></argument>, <argument><expr><name>full_dest_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
        <block>{
          <if>if <condition>(<expr>! <name>rerun</name> || ! <call><name>APR_STATUS_IS_ENOENT</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>apr_err</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><name>err</name></expr>;</return></then></if>
          <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      <break>break;</break>

    </case><case>case <expr><name>svn_wc__xfer_cp</name></expr>:
      <return>return <expr><call><name>svn_io_copy_file</name><argument_list>(<argument><expr><name>full_from_path</name></expr></argument>, <argument><expr><name>full_dest_path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>

    </case><case>case <expr><name>svn_wc__xfer_cp_and_translate</name></expr>:
      <block>{
        <decl_stmt><decl><type><name>svn_subst_eol_style_t</name></type> <name>style</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>eol</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>keywords</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>special</name></decl>;</decl_stmt>

        <if>if <condition>(<expr>! <name>full_versioned_path</name></expr>)</condition><then>
          <expr_stmt><expr><name>full_versioned_path</name> = <name>full_dest_path</name></expr>;</expr_stmt></then></if>

        <expr_stmt><expr><name>err</name> = <call><name>svn_wc__get_eol_style</name><argument_list>(<argument><expr>&amp;<name>style</name></expr></argument>, <argument><expr>&amp;<name>eol</name></expr></argument>, <argument><expr><name>full_versioned_path</name></expr></argument>,
                                    <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>! <name>err</name></expr>)</condition><then>
          <expr_stmt><expr><name>err</name> = <call><name>svn_wc__get_keywords</name><argument_list>(<argument><expr>&amp;<name>keywords</name></expr></argument>, <argument><expr><name>full_versioned_path</name></expr></argument>,
                                     <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <if>if <condition>(<expr>! <name>err</name></expr>)</condition><then>
          <expr_stmt><expr><name>err</name> = <call><name>svn_wc__get_special</name><argument_list>(<argument><expr>&amp;<name>special</name></expr></argument>, <argument><expr><name>full_versioned_path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
                                    <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <if>if <condition>(<expr>! <name>err</name></expr>)</condition><then>
          <expr_stmt><expr><name>err</name> = <call><name>svn_subst_copy_and_translate3</name>
                <argument_list>(<argument><expr><name>full_from_path</name></expr></argument>, <argument><expr><name>full_dest_path</name></expr></argument>,
                 <argument><expr><name>eol</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
                 <argument><expr><name>keywords</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
                 <argument><expr><name>special</name></expr></argument>,
                 <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
          <block>{
            <if>if <condition>(<expr>! <name>rerun</name> || ! <call><name>APR_STATUS_IS_ENOENT</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>apr_err</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
              <return>return <expr><name>err</name></expr>;</return></then></if>
            <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>

        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__maybe_set_read_only</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>full_dest_path</name></expr></argument>,
                                            <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__maybe_set_executable</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>full_dest_path</name></expr></argument>,
                                             <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
      }</block>
    </case><case>case <expr><name>svn_wc__xfer_cp_and_detranslate</name></expr>:
      <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmp_file</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_translated_file2</name>
                <argument_list>(<argument><expr>&amp;<name>tmp_file</name></expr></argument>,
                 <argument><expr><name>full_from_path</name></expr></argument>,
                 <argument><expr><name>versioned</name> ? <name>full_versioned_path</name> : <name>full_from_path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
                 <argument><expr><name>SVN_WC_TRANSLATE_TO_NF</name>
                 | <name>SVN_WC_TRANSLATE_FORCE_COPY</name></expr></argument>,
                 <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_rename</name><argument_list>(<argument><expr><name>tmp_file</name></expr></argument>, <argument><expr><name>full_dest_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
      }</block>

    </case><case>case <expr><name>svn_wc__xfer_mv</name></expr>:
      <expr_stmt><expr><name>err</name> = <call><name>svn_io_file_rename</name><argument_list>(<argument><expr><name>full_from_path</name></expr></argument>,
                               <argument><expr><name>full_dest_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* If we got an ENOENT, that's ok;  the move has probably
         already completed in an earlier run of this log.  */</comment>
      <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
        <block>{
          <if>if <condition>(<expr>! <name>rerun</name> || ! <call><name>APR_STATUS_IS_ENOENT</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>apr_err</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><call><name>svn_error_quick_wrap</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Can't move source to dest"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
          <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    </case>}</block></switch>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></decl></decl_stmt>


<comment type="block">/* If new text was committed, then replace the text base for
 * newly-committed file NAME in directory PATH with the new
 * post-commit text base, which is waiting in the adm tmp area in
 * detranslated form.
 *
 * If eol and/or keyword translation would cause the working file to
 * change, then overwrite the working file with a translated copy of
 * the new text base (but only if the translated copy differs from the
 * current working file -- if they are the same, do nothing, to avoid
 * clobbering timestamps unnecessarily).
 *
 * If the executable property is set, the set working file's
 * executable.
 *
 * If the working file was re-translated or had executability set,
 * then set OVERWROTE_WORKING to TRUE.  If the working file isn't
 * touched at all, then set to FALSE.
 *
 * Use POOL for any temporary allocation.
 */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>install_committed_file</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>overwrote_working</name></decl></param>,
                       <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                       <param><decl><type><name>svn_boolean_t</name></type> <name>remove_executable</name></decl></param>,
                       <param><decl><type><name>svn_boolean_t</name></type> <name>remove_read_only</name></decl></param>,
                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filepath</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmp_text_base</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>same</name></decl>, <decl><type ref="prev"/><name>did_set</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmp_wfile</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>special</name></decl>;</decl_stmt>

  <comment type="block">/* start off assuming that the working file isn't touched. */</comment>
  <expr_stmt><expr>*<name>overwrote_working</name> = <name>FALSE</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>filepath</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* In the commit, newlines and keywords may have been
   * canonicalized and/or contracted... Or they may not have
   * been.  It's kind of hard to know.  Here's how we find out:
   *
   *    1. Make a translated tmp copy of the committed text base.
   *       Or, if no committed text base exists (the commit must have
   *       been a propchange only), make a translated tmp copy of the
   *       working file.
   *    2. Compare the translated tmpfile to the working file.
   *    3. If different, copy the tmpfile over working file.
   *
   * This means we only rewrite the working file if we absolutely
   * have to, which is good because it avoids changing the file's
   * timestamp unless necessary, so editors aren't tempted to
   * reread the file if they don't really need to.
   */</comment>

  <comment type="block">/* Is there a tmp_text_base that needs to be installed?  */</comment>
  <expr_stmt><expr><name>tmp_text_base</name> = <call><name>svn_wc__text_base_path</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_check_path</name><argument_list>(<argument><expr><name>tmp_text_base</name></expr></argument>, <argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmp</name> <init>= <expr>(<name>kind</name> == <name>svn_node_file</name>) ? <name>tmp_text_base</name> : <name>filepath</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_translated_file2</name><argument_list>(<argument><expr>&amp;<name>tmp_wfile</name></expr></argument>,
                                    <argument><expr><name>tmp</name></expr></argument>,
                                    <argument><expr><name>filepath</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
                                    <argument><expr><name>SVN_WC_TRANSLATE_FROM_NF</name></expr></argument>,
                                    <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* If the translation is a no-op, the text base and the working copy
     * file contain the same content, because we use the same props here
     * as were used to detranslate from working file to text base.
     *
     * In that case: don't replace the working file, but make sure
     * it has the right executable and read_write attributes set.
     */</comment>

    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__get_special</name><argument_list>(<argument><expr>&amp;<name>special</name></expr></argument>, <argument><expr><name>filepath</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>! <name>special</name> &amp;&amp; <name>tmp</name> != <name>tmp_wfile</name></expr>)</condition><then>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_files_contents_same_p</name><argument_list>(<argument><expr>&amp;<name>same</name></expr></argument>, <argument><expr><name>tmp_wfile</name></expr></argument>,
                                           <argument><expr><name>filepath</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else
      <expr_stmt><expr><name>same</name> = <name>TRUE</name></expr>;</expr_stmt></else></if>
  }</block>

  <if>if <condition>(<expr>! <name>same</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_rename</name><argument_list>(<argument><expr><name>tmp_wfile</name></expr></argument>, <argument><expr><name>filepath</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr>*<name>overwrote_working</name> = <name>TRUE</name></expr>;</expr_stmt>
    }</block></then></if>

  <if>if <condition>(<expr><name>remove_executable</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* No need to chmod -x on a new file: new files don't have it. */</comment>
      <if>if <condition>(<expr><name>same</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_set_file_executable</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>,
                                           <argument><expr><name>FALSE</name></expr></argument>, <comment type="block">/* chmod -x */</comment>
                                           <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
      <expr_stmt><expr>*<name>overwrote_working</name> = <name>TRUE</name></expr>;</expr_stmt> <comment type="block">/* entry needs wc-file's timestamp  */</comment>
    }</block></then>
  <else>else
    <block>{
      <comment type="block">/* Set the working file's execute bit if props dictate. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__maybe_set_executable</name><argument_list>(<argument><expr>&amp;<name>did_set</name></expr></argument>, <argument><expr><name>filepath</name></expr></argument>,
                                           <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>did_set</name></expr>)</condition><then>
        <comment type="block">/* okay, so we didn't -overwrite- the working file, but we changed
           its timestamp, which is the point of returning this flag. :-) */</comment>
        <expr_stmt><expr>*<name>overwrote_working</name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
    }</block></else></if>

  <if>if <condition>(<expr><name>remove_read_only</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* No need to make a new file read_write: new files already are. */</comment>
      <if>if <condition>(<expr><name>same</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_set_file_read_write</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
      <expr_stmt><expr>*<name>overwrote_working</name> = <name>TRUE</name></expr>;</expr_stmt> <comment type="block">/* entry needs wc-file's timestamp  */</comment>
    }</block></then>
  <else>else
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__maybe_set_read_only</name><argument_list>(<argument><expr>&amp;<name>did_set</name></expr></argument>, <argument><expr><name>filepath</name></expr></argument>,
                                          <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>did_set</name></expr>)</condition><then>
        <comment type="block">/* okay, so we didn't -overwrite- the working file, but we changed
           its timestamp, which is the point of returning this flag. :-) */</comment>
        <expr_stmt><expr>*<name>overwrote_working</name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
    }</block></else></if>

  <comment type="block">/* Install the new text base if one is waiting. */</comment>
  <if>if <condition>(<expr><name>kind</name> == <name>svn_node_file</name></expr>)</condition><then>  <comment type="block">/* tmp_text_base exists */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__sync_text_base</name><argument_list>(<argument><expr><name>filepath</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Sometimes, documentation would only confuse matters. */</comment>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type>
<name>pick_error_code</name><parameter_list>(<param><decl><type>struct <name>log_runner</name> *</type><name>loggy</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name><name>loggy</name>-&gt;<name>count</name></name> &lt;= 1</expr>)</condition><then>
    <return>return <expr><name>SVN_ERR_WC_BAD_ADM_LOG_START</name></expr>;</return></then>
  <else>else
    <return>return <expr><name>SVN_ERR_WC_BAD_ADM_LOG</name></expr>;</return></else></if>
}</block></function>

<comment type="block">/* Helper macro for erroring out while running a logfile.

   This is implemented as a macro so that the error created has a useful
   line number associated with it. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGNAL_ERROR</name><parameter_list>(<param><type><name>loggy</name></type></param>, <param><type><name>err</name></type></param>)</parameter_list></cpp:macro>                                   \
  <cpp:value>svn_xml_signal_bailout                                           \
    (svn_error_createf(pick_error_code(loggy), err,                \
                       _("In directory '%s'"),                     \
                       svn_path_local_style(svn_wc_adm_access_path \
                                            (loggy-&gt;adm_access),   \
                                            loggy-&gt;pool)),         \
     loggy-&gt;parser)</cpp:value></cpp:define>


<escape char="0xc"/>
<comment type="block">/*** Dispatch on the xml opening tag. ***/</comment>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>log_do_merge</name><parameter_list>(<param><decl><type>struct <name>log_runner</name> *</type><name>loggy</name></decl></param>,
             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
             <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>atts</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>left</name></decl>, *<decl><type ref="prev"/><name>right</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>left_label</name></decl>, *<decl><type ref="prev"/><name>right_label</name></decl>, *<decl><type ref="prev"/><name>target_label</name></decl>;</decl_stmt>
  <enum>enum <name>svn_wc_merge_outcome_t</name> <name>merge_outcome</name>;</enum>
  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>log_accum</name> <init>= <expr><call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

  <comment type="block">/* NAME is the basename of our merge_target.  Pull out LEFT and RIGHT. */</comment>
  <expr_stmt><expr><name>left</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr><name>SVN_WC__LOG_ATTR_ARG_1</name></expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>! <name>left</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><call><name>pick_error_code</name><argument_list>(<argument><expr><name>loggy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Missing 'left' attribute in '%s'"</expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><call><name>svn_path_local_style</name>
                             <argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>)</argument_list></call></expr></argument>,
                              <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
  <expr_stmt><expr><name>right</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr><name>SVN_WC__LOG_ATTR_ARG_2</name></expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>! <name>right</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><call><name>pick_error_code</name><argument_list>(<argument><expr><name>loggy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Missing 'right' attribute in '%s'"</expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><call><name>svn_path_local_style</name>
                             <argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>)</argument_list></call></expr></argument>,
                              <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <comment type="block">/* Grab all three labels too.  If non-existent, we'll end up passing
     NULLs to svn_wc_merge, which is fine -- it will use default
     labels. */</comment>
  <expr_stmt><expr><name>left_label</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr><name>SVN_WC__LOG_ATTR_ARG_3</name></expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>right_label</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr><name>SVN_WC__LOG_ATTR_ARG_4</name></expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>target_label</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr><name>SVN_WC__LOG_ATTR_ARG_5</name></expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Convert the 3 basenames into full paths. */</comment>
  <expr_stmt><expr><name>left</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>left</name></expr></argument>,
                       <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>right</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>right</name></expr></argument>,
                        <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>name</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>,
                       <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Now do the merge with our full paths. */</comment>
  <expr_stmt><expr><name>err</name> = <call><name>svn_wc__merge_internal</name><argument_list>(<argument><expr>&amp;<name>log_accum</name></expr></argument>, <argument><expr>&amp;<name>merge_outcome</name></expr></argument>,
                               <argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>,
                               <argument><expr><name>left_label</name></expr></argument>, <argument><expr><name>right_label</name></expr></argument>, <argument><expr><name>target_label</name></expr></argument>,
                               <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>loggy</name>-&gt;<name>diff3_cmd</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                               <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>err</name> &amp;&amp; <name><name>loggy</name>-&gt;<name>rerun</name></name> &amp;&amp; <call><name>APR_STATUS_IS_ENOENT</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>apr_err</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
    }</block></then>
  <else>else
    <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
      <return>return <expr><name>err</name></expr>;</return></then></if></else></if>

  <expr_stmt><expr><name>err</name> = <call><name>run_log_from_memory</name><argument_list>(<argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>,
                            <argument><expr><name><name>log_accum</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>log_accum</name>-&gt;<name>len</name></name></expr></argument>,
                            <argument><expr><name><name>loggy</name>-&gt;<name>rerun</name></name></expr></argument>, <argument><expr><name><name>loggy</name>-&gt;<name>diff3_cmd</name></name></expr></argument>, <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>err</name> &amp;&amp; <name><name>loggy</name>-&gt;<name>rerun</name></name> &amp;&amp; <call><name>APR_STATUS_IS_ENOENT</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>apr_err</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
    }</block></then>
  <else>else
    <return>return <expr><name>err</name></expr>;</return></else></if>
}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>log_do_file_xfer</name><argument_list>(<argument>struct <expr><name>log_runner</name> *<name>loggy</name></expr></argument>,
                 <argument><expr>const <name>char</name> *<name>name</name></expr></argument>,
                 <argument>enum <expr><name>svn_wc__xfer_action</name> <name>action</name></expr></argument>,
                 <argument><expr>const <name>char</name> **<name>atts</name></expr></argument>)</argument_list>
<block>{
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>versioned</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>special_only</name></decl>;</decl_stmt>

  <comment type="block">/* We have the name (src), and the destination is absolutely required. */</comment>
  <expr_stmt><expr><name>dest</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr><name>SVN_WC__LOG_ATTR_DEST</name></expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>special_only</name> =
    <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr><name>SVN_WC__LOG_ATTR_ARG_1</name></expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call> != <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>versioned</name> =
    <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr><name>SVN_WC__LOG_ATTR_ARG_2</name></expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>! <name>dest</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><call><name>pick_error_code</name><argument_list>(<argument><expr><name>loggy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Missing 'dest' attribute in '%s'"</expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><call><name>svn_path_local_style</name>
                             <argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>)</argument_list></call></expr></argument>,
                              <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <expr_stmt><expr><name>err</name> = <call><name>file_xfer_under_path</name><argument_list>(<argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>versioned</name></expr></argument>,
                             <argument><expr><name>action</name></expr></argument>, <argument><expr><name>special_only</name></expr></argument>, <argument><expr><name><name>loggy</name>-&gt;<name>rerun</name></name></expr></argument>, <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SIGNAL_ERROR</name><argument_list>(<argument><expr><name>loggy</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></decl></decl_stmt>

<comment type="block">/* Make file NAME in log's CWD readonly */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>log_do_file_readonly</name><parameter_list>(<param><decl><type>struct <name>log_runner</name> *</type><name>loggy</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>full_path</name>
    <init>= <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>,
                    <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>err</name> = <call><name>svn_io_set_file_read_only</name><argument_list>(<argument><expr><name>full_path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>err</name> &amp;&amp; <name><name>loggy</name>-&gt;<name>rerun</name></name> &amp;&amp; <call><name>APR_STATUS_IS_ENOENT</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>apr_err</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
    }</block></then>
  <else>else
    <return>return <expr><name>err</name></expr>;</return></else></if>
}</block></function>

<comment type="block">/* Maybe make file NAME in log's CWD executable */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>log_do_file_maybe_executable</name><parameter_list>(<param><decl><type>struct <name>log_runner</name> *</type><name>loggy</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>full_path</name>
    <init>= <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>,
                    <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__maybe_set_executable</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>full_path</name></expr></argument>, <argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>,
                                      <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Maybe make file NAME in log's CWD readonly */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>log_do_file_maybe_readonly</name><parameter_list>(<param><decl><type>struct <name>log_runner</name> *</type><name>loggy</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>full_path</name>
    <init>= <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>,
                    <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__maybe_set_read_only</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>full_path</name></expr></argument>, <argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>,
                                      <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Set file NAME in log's CWD to timestamp value in ATTS. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>log_do_file_timestamp</name><parameter_list>(<param><decl><type>struct <name>log_runner</name> *</type><name>loggy</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>atts</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_time_t</name></type> <name>timestamp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>full_path</name>
    <init>= <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>,
                    <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>timestamp_string</name>
    <init>= <expr><call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr><name>SVN_WC__LOG_ATTR_TIMESTAMP</name></expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>is_special</name></decl>;</decl_stmt>

  <if>if <condition>(<expr>! <name>timestamp_string</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><call><name>pick_error_code</name><argument_list>(<argument><expr><name>loggy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Missing 'timestamp' attribute in '%s'"</expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><call><name>svn_path_local_style</name>
                             <argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>)</argument_list></call></expr></argument>,
                              <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <comment type="block">/* Do not set the timestamp on special files. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_check_special_path</name><argument_list>(<argument><expr><name>full_path</name></expr></argument>, <argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr>&amp;<name>is_special</name></expr></argument>,
                                    <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>! <name>is_special</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_time_from_cstring</name><argument_list>(<argument><expr>&amp;<name>timestamp</name></expr></argument>, <argument><expr><name>timestamp_string</name></expr></argument>,
                                    <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_set_file_affected_time</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>full_path</name></expr></argument>,
                                            <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Remove file NAME in log's CWD. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>log_do_rm</name><parameter_list>(<param><decl><type>struct <name>log_runner</name> *</type><name>loggy</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>full_path</name>
    <init>= <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>=
    <expr><call><name>svn_io_remove_file</name><argument_list>(<argument><expr><name>full_path</name></expr></argument>, <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>err</name> &amp;&amp; <call><name>APR_STATUS_IS_ENOENT</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>apr_err</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
    }</block></then>
  <else>else
    <return>return <expr><name>err</name></expr>;</return></else></if>
}</block></function>




<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>log_do_modify_entry</name><parameter_list>(<param><decl><type>struct <name>log_runner</name> *</type><name>loggy</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>atts</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>ah</name> <init>= <expr><call><name>svn_xml_make_att_hash</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tfile</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_uint64_t</name></type> <name>modify_flags</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>valuestr</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>loggy</name>-&gt;<name>rerun</name></name></expr>)</condition><then>
    <block>{
      <comment type="block">/* When committing a delete the entry might get removed, in
         which case we don't want to reincarnate it.  */</comment>
      <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>existing</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name>
        <init>= <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>,
                        <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>existing</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
                           <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr>! <name>existing</name></expr>)</condition><then>
        <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
    }</block></then></if>

  <comment type="block">/* Convert the attributes into an entry structure. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__atts_to_entry</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr>&amp;<name>modify_flags</name></expr></argument>, <argument><expr><name>ah</name></expr></argument>, <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Make TFILE the path of the thing being modified.  */</comment>
  <expr_stmt><expr><name>tfile</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_WC_ENTRY_THIS_DIR</name></expr></argument>)</argument_list></call> ? <name>name</name> : ""</expr></argument>,
                        <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Did the log command give us any timestamps?  There are three
     possible scenarios here.  We must check both text_time
     and prop_time for each of the three scenarios.  */</comment>

  <comment type="block">/* TEXT_TIME: */</comment>
  <expr_stmt><expr><name>valuestr</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>ah</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_TEXT_TIME</name></expr></argument>,
                          <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>(<name>modify_flags</name> &amp; <name>SVN_WC__ENTRY_MODIFY_TEXT_TIME</name>)
      &amp;&amp; (! <call><name>strcmp</name><argument_list>(<argument><expr><name>valuestr</name></expr></argument>, <argument><expr><name>SVN_WC__TIMESTAMP_WC</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>apr_time_t</name></type> <name>text_time</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>err</name> = <call><name>svn_io_file_affected_time</name><argument_list>(<argument><expr>&amp;<name>text_time</name></expr></argument>, <argument><expr><name>tfile</name></expr></argument>, <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_createf</name>
          <argument_list>(<argument><expr><call><name>pick_error_code</name><argument_list>(<argument><expr><name>loggy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>err</name></expr></argument>,
           <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Error getting 'affected time' on '%s'"</expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>tfile</name></expr></argument>, <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>

      <expr_stmt><expr><name><name>entry</name>-&gt;<name>text_time</name></name> = <name>text_time</name></expr>;</expr_stmt>
    }</block></then></if>

  <comment type="block">/* PROP_TIME: */</comment>
  <expr_stmt><expr><name>valuestr</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>ah</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_PROP_TIME</name></expr></argument>,
                          <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>(<name>modify_flags</name> &amp; <name>SVN_WC__ENTRY_MODIFY_PROP_TIME</name>)
      &amp;&amp; (! <call><name>strcmp</name><argument_list>(<argument><expr><name>valuestr</name></expr></argument>, <argument><expr><name>SVN_WC__TIMESTAMP_WC</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>apr_time_t</name></type> <name>prop_time</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__props_last_modified</name><argument_list>(<argument><expr>&amp;<name>prop_time</name></expr></argument>,
                                          <argument><expr><name>tfile</name></expr></argument>, <argument><expr><name>svn_wc__props_working</name></expr></argument>,
                                          <argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>, <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>entry</name>-&gt;<name>prop_time</name></name> = <name>prop_time</name></expr>;</expr_stmt>
    }</block></then></if>

  <expr_stmt><expr><name>valuestr</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>ah</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_WORKING_SIZE</name></expr></argument>,
                          <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>(<name>modify_flags</name> &amp; <name>SVN_WC__ENTRY_MODIFY_WORKING_SIZE</name>)
      &amp;&amp; (! <call><name>strcmp</name><argument_list>(<argument><expr><name>valuestr</name></expr></argument>, <argument><expr><name>SVN_WC__WORKING_SIZE_WC</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>finfo</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>tfile_entry</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>err</name> = <call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>tfile_entry</name></expr></argument>, <argument><expr><name>tfile</name></expr></argument>, <argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>,
                         <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SIGNAL_ERROR</name><argument_list>(<argument><expr><name>loggy</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <if>if <condition>(<expr>! <name>tfile_entry</name></expr>)</condition><then>
        <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

      <expr_stmt><expr><name>err</name> = <call><name>svn_io_stat</name><argument_list>(<argument><expr>&amp;<name>finfo</name></expr></argument>, <argument><expr><name>tfile</name></expr></argument>, <argument><expr><name>APR_FINFO_MIN</name> | <name>APR_FINFO_LINK</name></expr></argument>,
                        <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>err</name> &amp;&amp; <call><name>APR_STATUS_IS_ENOENT</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>apr_err</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>finfo</name>.<name>size</name></name> = 0</expr>;</expr_stmt>
        }</block></then>
      <else>else <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_createf</name>
          <argument_list>(<argument><expr><call><name>pick_error_code</name><argument_list>(<argument><expr><name>loggy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
            <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Error getting file size on '%s'"</expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>tfile</name></expr></argument>, <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if></else></if>

      <expr_stmt><expr><name><name>entry</name>-&gt;<name>working_size</name></name> = <name><name>finfo</name>.<name>size</name></name></expr>;</expr_stmt>
    }</block></then></if>


  <comment type="block">/* Handle force flag. */</comment>
  <expr_stmt><expr><name>valuestr</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>ah</name></expr></argument>, <argument><expr><name>SVN_WC__LOG_ATTR_FORCE</name></expr></argument>,
                          <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>valuestr</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name>valuestr</name></expr></argument>, <argument><expr>"true"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <expr_stmt><expr><name>modify_flags</name> |= <name>SVN_WC__ENTRY_MODIFY_FORCE</name></expr>;</expr_stmt></then></if>

  <comment type="block">/* Now write the new entry out */</comment>
  <expr_stmt><expr><name>err</name> = <call><name>svn_wc__entry_modify</name><argument_list>(<argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
                             <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>modify_flags</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><call><name>pick_error_code</name><argument_list>(<argument><expr><name>loggy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>err</name></expr></argument>,
                             <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Error modifying entry for '%s'"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
  <expr_stmt><expr><name><name>loggy</name>-&gt;<name>entries_modified</name></name> = <name>TRUE</name></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>log_do_delete_lock</name><parameter_list>(<param><decl><type>struct <name>log_runner</name> *</type><name>loggy</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_entry_t</name></type> <name>entry</name></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>entry</name>.<name>lock_token</name></name> = <name><name>entry</name>.<name>lock_comment</name></name> = <name><name>entry</name>.<name>lock_owner</name></name> = <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>entry</name>.<name>lock_creation_date</name></name> = 0</expr>;</expr_stmt>

  <comment type="block">/* Now write the new entry out */</comment>
  <expr_stmt><expr><name>err</name> = <call><name>svn_wc__entry_modify</name><argument_list>(<argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
                             <argument><expr>&amp;<name>entry</name></expr></argument>,
                             <argument><expr><name>SVN_WC__ENTRY_MODIFY_LOCK_TOKEN</name>
                             | <name>SVN_WC__ENTRY_MODIFY_LOCK_OWNER</name>
                             | <name>SVN_WC__ENTRY_MODIFY_LOCK_COMMENT</name>
                             | <name>SVN_WC__ENTRY_MODIFY_LOCK_CREATION_DATE</name></expr></argument>,
                             <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><call><name>pick_error_code</name><argument_list>(<argument><expr><name>loggy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>err</name></expr></argument>,
                             <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Error removing lock from entry for '%s'"</expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
  <expr_stmt><expr><name><name>loggy</name>-&gt;<name>entries_modified</name></name> = <name>TRUE</name></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>log_do_delete_changelist</name><parameter_list>(<param><decl><type>struct <name>log_runner</name> *</type><name>loggy</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_entry_t</name></type> <name>entry</name></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>entry</name>.<name>changelist</name></name> = <name>NULL</name></expr>;</expr_stmt>

  <comment type="block">/* Now write the new entry out */</comment>
  <expr_stmt><expr><name>err</name> = <call><name>svn_wc__entry_modify</name><argument_list>(<argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
                             <argument><expr>&amp;<name>entry</name></expr></argument>,
                             <argument><expr><name>SVN_WC__ENTRY_MODIFY_CHANGELIST</name></expr></argument>,
                             <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><call><name>pick_error_code</name><argument_list>(<argument><expr><name>loggy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>err</name></expr></argument>,
                             <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Error removing changelist from entry '%s'"</expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
  <expr_stmt><expr><name><name>loggy</name>-&gt;<name>entries_modified</name></name> = <name>TRUE</name></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Ben sez:  this log command is (at the moment) only executed by the
   update editor.  It attempts to forcefully remove working data. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>log_do_delete_entry</name><parameter_list>(<param><decl><type>struct <name>log_runner</name> *</type><name>loggy</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>full_path</name>
    <init>= <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>,
                    <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Figure out if 'name' is a dir or a file */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_probe_retrieve</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>, <argument><expr><name>full_path</name></expr></argument>,
                                    <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name>full_path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>! <name>entry</name></expr>)</condition><then>
    <comment type="block">/* Hmm....this entry is already absent from the revision control
       system.  Chances are good that this item was removed via a
       commit from this working copy.  */</comment>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* Remove the object from revision control -- whether it's a
     single file or recursive directory removal.  Attempt
     attempt to destroy all working files &amp; dirs too.

     ### We pass NULL, NULL for cancel_func and cancel_baton below.
     ### If they were available, it would be nice to use them. */</comment>
  <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>ignored</name></decl>;</decl_stmt>

      <comment type="block">/* If we get the right kind of error, it means the directory is
         already missing, so all we need to do is delete its entry in
         the parent directory. */</comment>
      <expr_stmt><expr><name>err</name> = <call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr>&amp;<name>ignored</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>full_path</name></expr></argument>, <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
        <block>{
          <if>if <condition>(<expr><name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_WC_NOT_LOCKED</name></expr>)</condition><then>
            <block>{
              <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>entries</name></decl>;</decl_stmt>

              <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>err</name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt>

              <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>schedule</name></name> != <name>svn_wc_schedule_add</name></expr>)</condition><then>
                <block>{
                  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entries_read</name><argument_list>(<argument><expr>&amp;<name>entries</name></expr></argument>, <argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>,
                                              <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name>svn_wc__entry_remove</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entries_write</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>,
                                                <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then>
          <else>else
            <block>{
              <return>return <expr><name>err</name></expr>;</return>
            }</block></else></if>
        }</block></then>
      <else>else
        <block>{
          <comment type="block">/* Deleting full_path requires that any children it has are
             also locked (issue #3039). */</comment>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__adm_extend_lock_to_tree</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>err</name> = <call><name>svn_wc_remove_from_revision_control</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>,
                                                    <argument><expr><name>SVN_WC_ENTRY_THIS_DIR</name></expr></argument>,
                                                    <argument><expr><name>TRUE</name></expr></argument>, <comment type="block">/* destroy */</comment>
                                                    <argument><expr><name>FALSE</name></expr></argument>, <comment type="block">/* instant_error */</comment>
                                                    <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                                    <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then>
  <else>else <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_file</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>svn_wc_remove_from_revision_control</name><argument_list>(<argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
                                                <argument><expr><name>TRUE</name></expr></argument>, <comment type="block">/* destroy */</comment>
                                                <argument><expr><name>FALSE</name></expr></argument>, <comment type="block">/* instant_error */</comment>
                                                <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                                <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></else></if>

  <if>if <condition>(<expr><name>err</name> &amp;&amp; <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_WC_LEFT_LOCAL_MOD</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
    }</block></then>
  <else>else
    <block>{
      <return>return <expr><name>err</name></expr>;</return>
    }</block></else></if>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>remove_deleted_entry</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl></param>,
                     <param><decl><type><name>apr_ssize_t</name></type> <name>klen</name></decl></param>, <param><decl><type><name>void</name> *</type><name>val</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>log_runner</name> *</type><name>loggy</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_name</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pdir</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>cur_entry</name> <init>= <expr><name>val</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>entry_access</name></decl>;</decl_stmt>

  <comment type="block">/* Skip each entry that isn't scheduled for deletion. */</comment>
  <if>if <condition>(<expr><name><name>cur_entry</name>-&gt;<name>schedule</name></name> != <name>svn_wc_schedule_delete</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* Determine what arguments to hand to our removal function,
     and let BASE_NAME double as an "ok" flag to run that function. */</comment>
  <expr_stmt><expr><name>base_name</name> = <name>NULL</name></expr>;</expr_stmt>
  <if>if <condition>(<expr><name><name>cur_entry</name>-&gt;<name>kind</name></name> == <name>svn_node_file</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>pdir</name> = <call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>base_name</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>entry_access</name> = <name><name>loggy</name>-&gt;<name>adm_access</name></name></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr><name><name>cur_entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>pdir</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>)</argument_list></call></expr></argument>,
                           <argument><expr><name>key</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>base_name</name> = <name>SVN_WC_ENTRY_THIS_DIR</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr>&amp;<name>entry_access</name></expr></argument>, <argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>,
                                  <argument><expr><name>pdir</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></else></if>

  <comment type="block">/* ### We pass NULL, NULL for cancel_func and cancel_baton below.
     ### If they were available, it would be nice to use them. */</comment>
  <if>if <condition>(<expr><name>base_name</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_remove_from_revision_control</name>
            <argument_list>(<argument><expr><name>entry_access</name></expr></argument>, <argument><expr><name>base_name</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
             <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Note:  assuming that svn_wc__log_commit() is what created all of
   the &lt;committed...&gt; commands, the `name' attribute will either be a
   file or SVN_WC_ENTRY_THIS_DIR. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>log_do_committed</name><parameter_list>(<param><decl><type>struct <name>log_runner</name> *</type><name>loggy</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>atts</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name> <init>= <expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>is_this_dir</name> <init>= <expr>(<call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_WC_ENTRY_THIS_DIR</name></expr></argument>)</argument_list></call> == 0)</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rev</name> <init>= <expr><call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr><name>SVN_WC__LOG_ATTR_REVISION</name></expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>wc_root</name></decl>, <decl><type ref="prev"/><name>overwrote_working</name> <init>= <expr><name>FALSE</name></expr></init>, <name>remove_executable</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>set_read_write</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>full_path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pdir</name></decl>, *<decl><type ref="prev"/><name>base_name</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>entries</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>orig_entry</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_time_t</name></type> <name>text_time</name> <init>= <expr>0</expr></init></decl>;</decl_stmt> <comment type="block">/* By default, don't override old stamp. */</comment>
  <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>finfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>prop_mods</name></decl>;</decl_stmt>

  <comment type="block">/* Determine the actual full path of the affected item. */</comment>
  <if>if <condition>(<expr>! <name>is_this_dir</name></expr>)</condition><then>
    <expr_stmt><expr><name>full_path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>)</argument_list></call></expr></argument>,
                              <argument><expr><name>name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><name>full_path</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

  <comment type="block">/*** Perform sanity checking operations ***/</comment>

  <comment type="block">/* If no new post-commit revision was given us, bail with an error. */</comment>
  <if>if <condition>(<expr>! <name>rev</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><call><name>pick_error_code</name><argument_list>(<argument><expr><name>loggy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Missing 'revision' attribute for '%s'"</expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <comment type="block">/* Read the entry for the affected item.  If we can't find the
     entry, or if the entry states that our item is not either "this
     dir" or a file kind, perhaps this isn't really the entry our log
     creator was expecting.  */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_probe_retrieve</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>, <argument><expr><name>full_path</name></expr></argument>,
                                    <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>orig_entry</name></expr></argument>, <argument><expr><name>full_path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Cannot rerun a commit of a delete since the entry gets changed
     too much; if it's got as far as being in state deleted=true, or
     if it has been removed, then the all the processing has been
     done. */</comment>
  <if>if <condition>(<expr><name><name>loggy</name>-&gt;<name>rerun</name></name> &amp;&amp; (! <name>orig_entry</name>
                       || (<name><name>orig_entry</name>-&gt;<name>schedule</name></name> == <name>svn_wc_schedule_normal</name>
                           &amp;&amp; <name><name>orig_entry</name>-&gt;<name>deleted</name></name>))</expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <if>if <condition>(<expr>(! <name>orig_entry</name>)
      || ((! <name>is_this_dir</name>) &amp;&amp; (<name><name>orig_entry</name>-&gt;<name>kind</name></name> != <name>svn_node_file</name>))</expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name>
      <argument_list>(<argument><expr><call><name>pick_error_code</name><argument_list>(<argument><expr><name>loggy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
       <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Log command for directory '%s' is mislocated"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <expr_stmt><expr><name>entry</name> = <call><name>svn_wc_entry_dup</name><argument_list>(<argument><expr><name>orig_entry</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*** Handle the committed deletion case ***/</comment>

  <comment type="block">/* If the committed item was scheduled for deletion, it needs to
     now be removed from revision control.  Once that is accomplished,
     we are finished handling this item.  */</comment>
  <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>schedule</name></name> == <name>svn_wc_schedule_delete</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>new_rev</name> <init>= <expr><call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <comment type="block">/* If we are suppose to delete "this dir", drop a 'killme' file
         into my own administrative dir as a signal for svn_wc__run_log()
         to blow away the administrative area after it is finished
         processing this logfile.  */</comment>
      <if>if <condition>(<expr><name>is_this_dir</name></expr>)</condition><then>
        <block>{
          <comment type="block">/* Bump the revision number of this_dir anyway, so that it
             might be higher than its parent's revnum.  If it's
             higher, then the process that sees KILLME and destroys
             the directory can also place a 'deleted' dir entry in the
             parent. */</comment>
          <decl_stmt><decl><type><name>svn_wc_entry_t</name></type> <name>tmpentry</name></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>tmpentry</name>.<name>revision</name></name> = <name>new_rev</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>tmpentry</name>.<name>kind</name></name> = <name>svn_node_dir</name></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_modify</name>
                  <argument_list>(<argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>tmpentry</name></expr></argument>,
                   <argument><expr><name>SVN_WC__ENTRY_MODIFY_REVISION</name> | <name>SVN_WC__ENTRY_MODIFY_KIND</name></expr></argument>,
                   <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>loggy</name>-&gt;<name>entries_modified</name></name> = <name>TRUE</name></expr>;</expr_stmt>

          <comment type="block">/* Drop the 'killme' file. */</comment>
          <expr_stmt><expr><name>err</name> = <call><name>svn_wc__make_killme</name><argument_list>(<argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>keep_local</name></name></expr></argument>,
                                    <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
            <block>{
              <if>if <condition>(<expr><name><name>loggy</name>-&gt;<name>rerun</name></name> &amp;&amp; <call><name>APR_STATUS_IS_EEXIST</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>apr_err</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
              <else>else
                <return>return <expr><name>err</name></expr>;</return></else></if>
            }</block></then></if>

          <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
        }</block></then>

      <comment type="block">/* Else, we're deleting a file, and we can safely remove files
         from revision control without screwing something else up.

         ### We pass NULL, NULL for cancel_func and cancel_baton below.
         ### If they were available, it would be nice to use them. */</comment>
      <else>else
        <block>{
          <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>parentry</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>svn_wc_entry_t</name></type> <name>tmp_entry</name></decl>;</decl_stmt>

          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_remove_from_revision_control</name><argument_list>(<argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>,
                                                      <argument><expr><name>name</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                                                      <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                                      <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="block">/* If the parent entry's working rev 'lags' behind new_rev... */</comment>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>parentry</name></expr></argument>,
                               <argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>,
                               <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>new_rev</name> &gt; <name><name>parentry</name>-&gt;<name>revision</name></name></expr>)</condition><then>
            <block>{
              <comment type="block">/* ...then the parent's revision is now officially a
                 lie;  therefore, it must remember the file as being
                 'deleted' for a while.  Create a new, uninteresting
                 ghost entry:  */</comment>
              <expr_stmt><expr><name><name>tmp_entry</name>.<name>kind</name></name> = <name>svn_node_file</name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>tmp_entry</name>.<name>deleted</name></name> = <name>TRUE</name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>tmp_entry</name>.<name>revision</name></name> = <name>new_rev</name></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_modify</name>
                      <argument_list>(<argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>&amp;<name>tmp_entry</name></expr></argument>,
                       <argument><expr><name>SVN_WC__ENTRY_MODIFY_REVISION</name>
                       | <name>SVN_WC__ENTRY_MODIFY_KIND</name>
                       | <name>SVN_WC__ENTRY_MODIFY_DELETED</name></expr></argument>,
                       <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>loggy</name>-&gt;<name>entries_modified</name></name> = <name>TRUE</name></expr>;</expr_stmt>
            }</block></then></if>

          <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
        }</block></else></if>
    }</block></then></if>


  <comment type="block">/*** Mark the committed item committed-to-date ***/</comment>


  <comment type="block">/* If "this dir" has been replaced (delete + add), all its
     immmediate children *must* be either scheduled for deletion (they
     were children of "this dir" during the "delete" phase of its
     replacement), added (they are new children of the replaced dir),
     or replaced (they are new children of the replace dir that have
     the same names as children that were present during the "delete"
     phase of the replacement).

     Children which are added or replaced will have been reported as
     individual commit targets, and thus will be re-visited by
     log_do_committed().  Children which were marked for deletion,
     however, need to be outright removed from revision control.  */</comment>
  <if>if <condition>(<expr>(<name><name>entry</name>-&gt;<name>schedule</name></name> == <name>svn_wc_schedule_replace</name>) &amp;&amp; <name>is_this_dir</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* Loop over all children entries, look for items scheduled for
         deletion. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entries_read</name><argument_list>(<argument><expr>&amp;<name>entries</name></expr></argument>, <argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_iter_apr_hash</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>,
                                <argument><expr><name>remove_deleted_entry</name></expr></argument>, <argument><expr><name>loggy</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__has_prop_mods</name><argument_list>(<argument><expr>&amp;<name>prop_mods</name></expr></argument>,
                                <argument><expr><name>full_path</name></expr></argument>, <argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>prop_mods</name></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_file</name></expr>)</condition><then>
        <block>{
          <comment type="block">/* Examine propchanges here before installing the new
             propbase.  If the executable prop was -deleted-, then
             tell install_committed_file() so.

             The same applies to the needs-lock property. */</comment>
          <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>propchanges</name></decl>;</decl_stmt>


          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_get_prop_diffs</name><argument_list>(<argument><expr>&amp;<name>propchanges</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                        <argument><expr><name>full_path</name></expr></argument>, <argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>propchanges</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
            <block>{
              <decl_stmt><decl><type><name>svn_prop_t</name> *</type><name>propchange</name>
                <init>= <expr>&amp;<call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>propchanges</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_prop_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

              <if>if <condition>(<expr>(! <call><name>strcmp</name><argument_list>(<argument><expr><name><name>propchange</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>SVN_PROP_EXECUTABLE</name></expr></argument>)</argument_list></call>)
                  &amp;&amp; (<name><name>propchange</name>-&gt;<name>value</name></name> == <name>NULL</name>)</expr>)</condition><then>
                <expr_stmt><expr><name>remove_executable</name> = <name>TRUE</name></expr>;</expr_stmt></then>
              <else>else <if>if <condition>(<expr>(! <call><name>strcmp</name><argument_list>(<argument><expr><name><name>propchange</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>SVN_PROP_NEEDS_LOCK</name></expr></argument>)</argument_list></call>)
                       &amp;&amp; (<name><name>propchange</name>-&gt;<name>value</name></name> == <name>NULL</name>)</expr>)</condition><then>
                <expr_stmt><expr><name>set_read_write</name> = <name>TRUE</name></expr>;</expr_stmt></then></if></else></if>
            }</block></for>
        }</block></then></if>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__working_props_committed</name><argument_list>(<argument><expr><name>full_path</name></expr></argument>, <argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>,
                                              <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_file</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* Install the new file, which may involve expanding keywords.
         A copy of this file should have been dropped into our `tmp/text-base'
         directory during the commit process.  Part of this process
         involves setting the textual timestamp for this entry.  We'd like
         to just use the timestamp of the working file, but it is possible
         that at some point during the commit, the real working file might
         have changed again.  If that has happened, we'll use the
         timestamp of the copy of this file in `tmp/text-base' (which
         by then will have moved to `text-base'. */</comment>

      <if>if <condition>(<expr>(<name>err</name> = <call><name>install_committed_file</name>
           <argument_list>(<argument><expr>&amp;<name>overwrote_working</name></expr></argument>, <argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
            <argument><expr><name>remove_executable</name></expr></argument>, <argument><expr><name>set_read_write</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
        <return>return <expr><call><name>svn_error_createf</name>
          <argument_list>(<argument><expr><call><name>pick_error_code</name><argument_list>(<argument><expr><name>loggy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>err</name></expr></argument>,
           <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Error replacing text-base of '%s'"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

      <if>if <condition>(<expr>(<name>err</name> = <call><name>svn_io_stat</name><argument_list>(<argument><expr>&amp;<name>finfo</name></expr></argument>, <argument><expr><name>full_path</name></expr></argument>,
                             <argument><expr><name>APR_FINFO_MIN</name> | <name>APR_FINFO_LINK</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
        <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><call><name>pick_error_code</name><argument_list>(<argument><expr><name>loggy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>err</name></expr></argument>,
                                 <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Error getting 'affected time' of '%s'"</expr></argument>)</argument_list></call></expr></argument>,
                                 <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>full_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>

      <if>if <condition>(<expr><name>overwrote_working</name></expr>)</condition><then>
        <expr_stmt><expr><name>text_time</name> = <name><name>finfo</name>.<name>mtime</name></name></expr>;</expr_stmt></then>
      <else>else
        <block>{
          <comment type="block">/* The working copy file hasn't been overwritten, meaning
             we need to decide which timestamp to use. */</comment>

          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>basef</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>modified</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>basef_finfo</name></decl>;</decl_stmt>

          <comment type="block">/* If the working file was overwritten (due to re-translation)
             or touched (due to +x / -x), then use *that* textual
             timestamp instead. */</comment>
          <expr_stmt><expr><name>basef</name> = <call><name>svn_wc__text_base_path</name><argument_list>(<argument><expr><name>full_path</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>err</name> = <call><name>svn_io_stat</name><argument_list>(<argument><expr>&amp;<name>basef_finfo</name></expr></argument>, <argument><expr><name>basef</name></expr></argument>, <argument><expr><name>APR_FINFO_MIN</name> | <name>APR_FINFO_LINK</name></expr></argument>,
                            <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
            <return>return <expr><call><name>svn_error_createf</name>
              <argument_list>(<argument><expr><call><name>pick_error_code</name><argument_list>(<argument><expr><name>loggy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>err</name></expr></argument>,
               <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Error getting 'affected time' for '%s'"</expr></argument>)</argument_list></call></expr></argument>,
               <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>basef</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then>
          <else>else
            <block>{
              <comment type="block">/* Verify that the working file is the same as the base file
                 by comparing file sizes, then timestamps and the contents
                 after that. */</comment>

              <comment type="block">/*###FIXME: if the file needs translation, don't compare
                file-sizes, just compare timestamps and do the rest of the
                hokey pokey. */</comment>
              <expr_stmt><expr><name>modified</name> = <name><name>finfo</name>.<name>size</name></name> != <name><name>basef_finfo</name>.<name>size</name></name></expr>;</expr_stmt>
              <if>if <condition>(<expr><name><name>finfo</name>.<name>mtime</name></name> != <name><name>basef_finfo</name>.<name>mtime</name></name> &amp;&amp; ! <name>modified</name></expr>)</condition><then>
                <block>{
                  <expr_stmt><expr><name>err</name> = <call><name>svn_wc__versioned_file_modcheck</name><argument_list>(<argument><expr>&amp;<name>modified</name></expr></argument>, <argument><expr><name>full_path</name></expr></argument>,
                                                        <argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>,
                                                        <argument><expr><name>basef</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
                    <return>return <expr><call><name>svn_error_createf</name>
                      <argument_list>(<argument><expr><call><name>pick_error_code</name><argument_list>(<argument><expr><name>loggy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>err</name></expr></argument>,
                       <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Error comparing '%s' and '%s'"</expr></argument>)</argument_list></call></expr></argument>,
                       <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>full_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
                       <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>basef</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
                }</block></then></if>
              <comment type="block">/* If they are the same, use the working file's timestamp,
                 else use the base file's timestamp. */</comment>
              <expr_stmt><expr><name>text_time</name> = <name>modified</name> ? <name><name>basef_finfo</name>.<name>mtime</name></name> : <name><name>finfo</name>.<name>mtime</name></name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></else></if>
    }</block></then>
  <else>else
    <expr_stmt><expr><name><name>finfo</name>.<name>size</name></name> = 0</expr>;</expr_stmt></else></if>

  <comment type="block">/* Files have been moved, and timestamps have been found.  It is now
     time for The Big Entry Modification. */</comment>
  <expr_stmt><expr><name><name>entry</name>-&gt;<name>revision</name></name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>entry</name>-&gt;<name>kind</name></name> = <name>is_this_dir</name> ? <name>svn_node_dir</name> : <name>svn_node_file</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>entry</name>-&gt;<name>schedule</name></name> = <name>svn_wc_schedule_normal</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>entry</name>-&gt;<name>copied</name></name> = <name>FALSE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>entry</name>-&gt;<name>deleted</name></name> = <name>FALSE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>entry</name>-&gt;<name>text_time</name></name> = <name>text_time</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>entry</name>-&gt;<name>conflict_old</name></name> = <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>entry</name>-&gt;<name>conflict_new</name></name> = <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>entry</name>-&gt;<name>conflict_wrk</name></name> = <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>entry</name>-&gt;<name>prejfile</name></name> = <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>entry</name>-&gt;<name>copyfrom_url</name></name> = <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>entry</name>-&gt;<name>copyfrom_rev</name></name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>entry</name>-&gt;<name>has_prop_mods</name></name> = <name>FALSE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>entry</name>-&gt;<name>working_size</name></name> = <name><name>finfo</name>.<name>size</name></name></expr>;</expr_stmt>
  <if>if <condition>(<expr>(<name>err</name> = <call><name>svn_wc__entry_modify</name><argument_list>(<argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>,
                                  <argument><expr>(<name>SVN_WC__ENTRY_MODIFY_REVISION</name>
                                   | <name>SVN_WC__ENTRY_MODIFY_SCHEDULE</name>
                                   | <name>SVN_WC__ENTRY_MODIFY_COPIED</name>
                                   | <name>SVN_WC__ENTRY_MODIFY_DELETED</name>
                                   | <name>SVN_WC__ENTRY_MODIFY_COPYFROM_URL</name>
                                   | <name>SVN_WC__ENTRY_MODIFY_COPYFROM_REV</name>
                                   | <name>SVN_WC__ENTRY_MODIFY_CONFLICT_OLD</name>
                                   | <name>SVN_WC__ENTRY_MODIFY_CONFLICT_NEW</name>
                                   | <name>SVN_WC__ENTRY_MODIFY_CONFLICT_WRK</name>
                                   | <name>SVN_WC__ENTRY_MODIFY_PREJFILE</name>
                                   | (<name>text_time</name>
                                      ? <name>SVN_WC__ENTRY_MODIFY_TEXT_TIME</name>
                                      : 0)
                                   | <name>SVN_WC__ENTRY_MODIFY_HAS_PROP_MODS</name>
                                   | <name>SVN_WC__ENTRY_MODIFY_WORKING_SIZE</name>
                                   | <name>SVN_WC__ENTRY_MODIFY_FORCE</name>)</expr></argument>,
                                  <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name>
      <argument_list>(<argument><expr><call><name>pick_error_code</name><argument_list>(<argument><expr><name>loggy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>err</name></expr></argument>,
       <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Error modifying entry of '%s'"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
  <expr_stmt><expr><name><name>loggy</name>-&gt;<name>entries_modified</name></name> = <name>TRUE</name></expr>;</expr_stmt>

  <comment type="block">/* If we aren't looking at "this dir" (meaning we are looking at a
     file), we are finished.  From here on out, it's all about a
     directory's entry in its parent.  */</comment>
  <if>if <condition>(<expr>! <name>is_this_dir</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* For directories, we also have to reset the state in the parent's
     entry for this directory, unless the current directory is a `WC
     root' (meaning, our parent directory on disk is not our parent in
     Version Control Land), in which case we're all finished here. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_is_wc_root</name><argument_list>(<argument><expr>&amp;<name>wc_root</name></expr></argument>,
                            <argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>,
                            <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>wc_root</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* Make sure our entry exists in the parent. */</comment>
  <block>{
    <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>paccess</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>unassociated</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>svn_path_split</name><argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>pdir</name></expr></argument>,
                   <argument><expr>&amp;<name>base_name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>err</name> = <call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr>&amp;<name>paccess</name></expr></argument>, <argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>, <argument><expr><name>pdir</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>err</name> &amp;&amp; (<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_WC_NOT_LOCKED</name>)</expr>)</condition><then>
      <block>{
        <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_open3</name><argument_list>(<argument><expr>&amp;<name>paccess</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pdir</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr>0</expr></argument>,
                                 <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>unassociated</name> = <name>TRUE</name></expr>;</expr_stmt>
      }</block></then>
    <else>else <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
      <return>return <expr><name>err</name></expr>;</return></then></if></else></if>

    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entries_read</name><argument_list>(<argument><expr>&amp;<name>entries</name></expr></argument>, <argument><expr><name>paccess</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>base_name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>)</condition><then>
      <block>{
        <if>if <condition>(<expr>(<name>err</name> = <call><name>svn_wc__entry_modify</name><argument_list>(<argument><expr><name>paccess</name></expr></argument>, <argument><expr><name>base_name</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>,
                                        <argument><expr>(<name>SVN_WC__ENTRY_MODIFY_SCHEDULE</name>
                                         | <name>SVN_WC__ENTRY_MODIFY_COPIED</name>
                                         | <name>SVN_WC__ENTRY_MODIFY_DELETED</name>
                                         | <name>SVN_WC__ENTRY_MODIFY_FORCE</name>)</expr></argument>,
                                        <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
          <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><call><name>pick_error_code</name><argument_list>(<argument><expr><name>loggy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>err</name></expr></argument>,
                                   <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Error modifying entry of '%s'"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
      }</block></then></if>

    <if>if <condition>(<expr><name>unassociated</name></expr>)</condition><then>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_close</name><argument_list>(<argument><expr><name>paccess</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  }</block>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* See documentation for SVN_WC__LOG_MODIFY_WCPROP. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>log_do_modify_wcprop</name><parameter_list>(<param><decl><type>struct <name>log_runner</name> *</type><name>loggy</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>atts</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_string_t</name></type> <name>value</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>propname</name></decl>, *<decl><type ref="prev"/><name>propval</name></decl>, *<decl><type ref="prev"/><name>path</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_WC_ENTRY_THIS_DIR</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <expr_stmt><expr><name>path</name> = <call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><name>path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>)</argument_list></call></expr></argument>,
                         <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

  <expr_stmt><expr><name>propname</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr><name>SVN_WC__LOG_ATTR_PROPNAME</name></expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>propval</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr><name>SVN_WC__LOG_ATTR_PROPVAL</name></expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>propval</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name><name>value</name>.<name>data</name></name> = <name>propval</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>value</name>.<name>len</name></name> = <call><name>strlen</name><argument_list>(<argument><expr><name>propval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__wcprop_set</name><argument_list>(<argument><expr><name>propname</name></expr></argument>, <argument><expr><name>propval</name> ? &amp;<name>value</name> : <name>NULL</name></expr></argument>,
                             <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>loggy</name>-&gt;<name>wcprops_modified</name></name> = <name>TRUE</name></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>log_do_upgrade_format</name><parameter_list>(<param><decl><type>struct <name>log_runner</name> *</type><name>loggy</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>atts</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fmtstr</name> <init>= <expr><call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr><name>SVN_WC__LOG_ATTR_FORMAT</name></expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>fmt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name> <init>= <expr><call><name>svn_wc__adm_path</name><argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                      <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>,
                                      <argument><expr><name>SVN_WC__ADM_FORMAT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr>! <name>fmtstr</name> || (<name>fmt</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>fmtstr</name></expr></argument>)</argument_list></call>) == 0</expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><call><name>pick_error_code</name><argument_list>(<argument><expr><name>loggy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                            <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Invalid 'format' attribute"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <comment type="block">/* Update the .svn/format file right away. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_write_version_file</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* The nice thing is that, just by setting this flag, the entries file will
     be rewritten in the desired format. */</comment>
  <expr_stmt><expr><name><name>loggy</name>-&gt;<name>entries_modified</name></name> = <name>TRUE</name></expr>;</expr_stmt>
  <comment type="block">/* Reading the entries file will support old formats, even if this number
     is updated. */</comment>
  <expr_stmt><expr><call><name>svn_wc__adm_set_wc_format</name><argument_list>(<argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>start_handler</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>userData</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>eltname</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>atts</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>log_runner</name> *</type><name>loggy</name> <init>= <expr><name>userData</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Most elements use the `name' attribute, so grab it now. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name> <init>= <expr><call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr><name>SVN_WC__LOG_ATTR_NAME</name></expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Clear the per-log-item pool. */</comment>
  <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>eltname</name></expr></argument>, <argument><expr>"wc-log"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>   <comment type="block">/* ignore expat pacifier */</comment>
    <return>return;</return></then>
  <else>else <if>if <condition>(<expr>! <name>name</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name>eltname</name></expr></argument>, <argument><expr><name>SVN_WC__LOG_UPGRADE_FORMAT</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>SIGNAL_ERROR</name>
        <argument_list>(<argument><expr><name>loggy</name></expr></argument>, <argument><expr><call><name>svn_error_createf</name>
         <argument_list>(<argument><expr><call><name>pick_error_code</name><argument_list>(<argument><expr><name>loggy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
          <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Log entry missing 'name' attribute (entry '%s' "
            "for directory '%s')"</expr></argument>)</argument_list></call></expr></argument>,
          <argument><expr><name>eltname</name></expr></argument>,
          <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    }</block></then></if></else></if>

  <comment type="block">/* Increment the top-level element count before processing any commands. */</comment>
  <expr_stmt><expr><name><name>loggy</name>-&gt;<name>count</name></name> += 1</expr>;</expr_stmt>

  <comment type="block">/* Dispatch. */</comment>
  <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>eltname</name></expr></argument>, <argument><expr><name>SVN_WC__LOG_MODIFY_ENTRY</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
    <expr_stmt><expr><name>err</name> = <call><name>log_do_modify_entry</name><argument_list>(<argument><expr><name>loggy</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then>
  <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>eltname</name></expr></argument>, <argument><expr><name>SVN_WC__LOG_DELETE_LOCK</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
    <expr_stmt><expr><name>err</name> = <call><name>log_do_delete_lock</name><argument_list>(<argument><expr><name>loggy</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then>
  <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>eltname</name></expr></argument>, <argument><expr><name>SVN_WC__LOG_DELETE_CHANGELIST</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
    <expr_stmt><expr><name>err</name> = <call><name>log_do_delete_changelist</name><argument_list>(<argument><expr><name>loggy</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then>
  <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>eltname</name></expr></argument>, <argument><expr><name>SVN_WC__LOG_DELETE_ENTRY</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
    <expr_stmt><expr><name>err</name> = <call><name>log_do_delete_entry</name><argument_list>(<argument><expr><name>loggy</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then>
  <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>eltname</name></expr></argument>, <argument><expr><name>SVN_WC__LOG_COMMITTED</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
    <expr_stmt><expr><name>err</name> = <call><name>log_do_committed</name><argument_list>(<argument><expr><name>loggy</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then>
  <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>eltname</name></expr></argument>, <argument><expr><name>SVN_WC__LOG_MODIFY_WCPROP</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
    <expr_stmt><expr><name>err</name> = <call><name>log_do_modify_wcprop</name><argument_list>(<argument><expr><name>loggy</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then>
  <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>eltname</name></expr></argument>, <argument><expr><name>SVN_WC__LOG_RM</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
    <expr_stmt><expr><name>err</name> = <call><name>log_do_rm</name><argument_list>(<argument><expr><name>loggy</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then>
  <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>eltname</name></expr></argument>, <argument><expr><name>SVN_WC__LOG_MERGE</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
    <expr_stmt><expr><name>err</name> = <call><name>log_do_merge</name><argument_list>(<argument><expr><name>loggy</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then>
  <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>eltname</name></expr></argument>, <argument><expr><name>SVN_WC__LOG_MV</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
    <expr_stmt><expr><name>err</name> = <call><name>log_do_file_xfer</name><argument_list>(<argument><expr><name>loggy</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>svn_wc__xfer_mv</name></expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then>
  <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>eltname</name></expr></argument>, <argument><expr><name>SVN_WC__LOG_CP</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
    <expr_stmt><expr><name>err</name> = <call><name>log_do_file_xfer</name><argument_list>(<argument><expr><name>loggy</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>svn_wc__xfer_cp</name></expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then>
  <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>eltname</name></expr></argument>, <argument><expr><name>SVN_WC__LOG_CP_AND_TRANSLATE</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
    <expr_stmt><expr><name>err</name> = <call><name>log_do_file_xfer</name><argument_list>(<argument><expr><name>loggy</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,<argument><expr><name>svn_wc__xfer_cp_and_translate</name></expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then>
  <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>eltname</name></expr></argument>, <argument><expr><name>SVN_WC__LOG_CP_AND_DETRANSLATE</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
    <expr_stmt><expr><name>err</name> = <call><name>log_do_file_xfer</name><argument_list>(<argument><expr><name>loggy</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,<argument><expr><name>svn_wc__xfer_cp_and_detranslate</name></expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then>
  <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>eltname</name></expr></argument>, <argument><expr><name>SVN_WC__LOG_APPEND</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
    <expr_stmt><expr><name>err</name> = <call><name>log_do_file_xfer</name><argument_list>(<argument><expr><name>loggy</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>svn_wc__xfer_append</name></expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then>
  <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>eltname</name></expr></argument>, <argument><expr><name>SVN_WC__LOG_READONLY</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
    <expr_stmt><expr><name>err</name> = <call><name>log_do_file_readonly</name><argument_list>(<argument><expr><name>loggy</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then>
  <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>eltname</name></expr></argument>, <argument><expr><name>SVN_WC__LOG_MAYBE_READONLY</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
    <expr_stmt><expr><name>err</name> = <call><name>log_do_file_maybe_readonly</name><argument_list>(<argument><expr><name>loggy</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then>
  <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>eltname</name></expr></argument>, <argument><expr><name>SVN_WC__LOG_MAYBE_EXECUTABLE</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
    <expr_stmt><expr><name>err</name> = <call><name>log_do_file_maybe_executable</name><argument_list>(<argument><expr><name>loggy</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then>
  <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>eltname</name></expr></argument>, <argument><expr><name>SVN_WC__LOG_SET_TIMESTAMP</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
    <expr_stmt><expr><name>err</name> = <call><name>log_do_file_timestamp</name><argument_list>(<argument><expr><name>loggy</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then>
  <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>eltname</name></expr></argument>, <argument><expr><name>SVN_WC__LOG_UPGRADE_FORMAT</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
    <expr_stmt><expr><name>err</name> = <call><name>log_do_upgrade_format</name><argument_list>(<argument><expr><name>loggy</name></expr></argument>, <argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then>
  <else>else
    <block>{
      <expr_stmt><expr><call><name>SIGNAL_ERROR</name>
        <argument_list>(<argument><expr><name>loggy</name></expr></argument>, <argument><expr><call><name>svn_error_createf</name>
         <argument_list>(<argument><expr><call><name>pick_error_code</name><argument_list>(<argument><expr><name>loggy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
          <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Unrecognized logfile element '%s' in '%s'"</expr></argument>)</argument_list></call></expr></argument>,
          <argument><expr><name>eltname</name></expr></argument>,
          <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    }</block></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>

  <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SIGNAL_ERROR</name>
      <argument_list>(<argument><expr><name>loggy</name></expr></argument>, <argument><expr><call><name>svn_error_createf</name>
       <argument_list>(<argument><expr><call><name>pick_error_code</name><argument_list>(<argument><expr><name>loggy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>err</name></expr></argument>,
        <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Error processing command '%s' in '%s'"</expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><name>eltname</name></expr></argument>,
        <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><name><name>loggy</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <return>return;</return>
}</block></function>

<comment type="block">/* Process the "KILLME" file in ADM_ACCESS: remove the administrative area
   for ADM_ACCESS and its children, and, if ADM_ONLY is false, also remove
   the contents of the working copy (leaving only locally-modified files). */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>handle_killme</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
              <param><decl><type><name>svn_boolean_t</name></type> <name>adm_only</name></decl></param>,
              <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
              <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>thisdir_entry</name></decl>, *<decl><type ref="prev"/><name>parent_entry</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_entry_t</name></type> <name>tmp_entry</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>thisdir_entry</name></expr></argument>,
                       <argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
                       <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Blow away the administrative directories, and possibly the working
     copy tree too. */</comment>
  <expr_stmt><expr><name>err</name> = <call><name>svn_wc_remove_from_revision_control</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>,
                                            <argument><expr><name>SVN_WC_ENTRY_THIS_DIR</name></expr></argument>,
                                            <argument><expr>!<name>adm_only</name></expr></argument>, <comment type="block">/* destroy */</comment>
                                            <argument><expr><name>FALSE</name></expr></argument>, <comment type="block">/* no instant err */</comment>
                                            <argument><expr><name>cancel_func</name></expr></argument>, <argument><expr><name>cancel_baton</name></expr></argument>,
                                            <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>err</name> &amp;&amp; <name><name>err</name>-&gt;<name>apr_err</name></name> != <name>SVN_ERR_WC_LEFT_LOCAL_MOD</name></expr>)</condition><then>
    <return>return <expr><name>err</name></expr>;</return></then></if>
  <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If revnum of this dir is greater than parent's revnum, then
     recreate 'deleted' entry in parent. */</comment>
  <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>parent</name></decl>, *<decl><type ref="prev"/><name>bname</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>parent_access</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>svn_path_split</name><argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>parent</name></expr></argument>, <argument><expr>&amp;<name>bname</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr>&amp;<name>parent_access</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>parent_entry</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>parent_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>thisdir_entry</name>-&gt;<name>revision</name></name> &gt; <name><name>parent_entry</name>-&gt;<name>revision</name></name></expr>)</condition><then>
      <block>{
        <expr_stmt><expr><name><name>tmp_entry</name>.<name>kind</name></name> = <name>svn_node_dir</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>tmp_entry</name>.<name>deleted</name></name> = <name>TRUE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>tmp_entry</name>.<name>revision</name></name> = <name><name>thisdir_entry</name>-&gt;<name>revision</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_modify</name><argument_list>(<argument><expr><name>parent_access</name></expr></argument>, <argument><expr><name>bname</name></expr></argument>, <argument><expr>&amp;<name>tmp_entry</name></expr></argument>,
                                     <argument><expr><name>SVN_WC__ENTRY_MODIFY_REVISION</name>
                                     | <name>SVN_WC__ENTRY_MODIFY_KIND</name>
                                     | <name>SVN_WC__ENTRY_MODIFY_DELETED</name></expr></argument>,
                                     <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
  }</block>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<escape char="0xc"/>
<comment type="block">/*** Using the parser to run the log file. ***/</comment>

<comment type="block">/* Determine the log file that should be used for a given number. */</comment>
<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_wc__logfile_path</name><parameter_list>(<param><decl><type><name>int</name></type> <name>log_number</name></decl></param>,
                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>SVN_WC__ADM_LOG</name> "%s"</expr></argument>,
                      <argument><expr>(<name>log_number</name> == 0) ? ""
                      : <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>".%d"</expr></argument>, <argument><expr><name>log_number</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* Run a series of log-instructions from a memory block of length BUF_LEN
   at BUF. RERUN and DIFF3_CMD are passed in the log baton to the
   log runner callbacks.

   Allocations are done in POOL.
*/</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>run_log_from_memory</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>buf</name></decl></param>,
                    <param><decl><type><name>apr_size_t</name></type> <name>buf_len</name></decl></param>,
                    <param><decl><type><name>svn_boolean_t</name></type> <name>rerun</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>diff3_cmd</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>log_runner</name> *</type><name>loggy</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_xml_parser_t</name> *</type><name>parser</name></decl>;</decl_stmt>
  <comment type="block">/* kff todo: use the tag-making functions here, now. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>log_start</name>
    <init>= <expr>"&lt;wc-log xmlns=\"http://subversion.tigris.org/xmlns\"&gt;\n"</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>log_end</name>
    <init>= <expr>"&lt;/wc-log&gt;\n"</expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>loggy</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>loggy</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name> = <name>adm_access</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>loggy</name>-&gt;<name>pool</name></name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>loggy</name>-&gt;<name>parser</name></name> = <call><name>svn_xml_make_parser</name><argument_list>(<argument><expr><name>loggy</name></expr></argument>, <argument><expr><name>start_handler</name></expr></argument>,
                                      <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>loggy</name>-&gt;<name>entries_modified</name></name> = <name>FALSE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>loggy</name>-&gt;<name>wcprops_modified</name></name> = <name>FALSE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>loggy</name>-&gt;<name>rerun</name></name> = <name>rerun</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>loggy</name>-&gt;<name>diff3_cmd</name></name> = <name>diff3_cmd</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>loggy</name>-&gt;<name>count</name></name> = 0</expr>;</expr_stmt>

  <expr_stmt><expr><name>parser</name> = <name><name>loggy</name>-&gt;<name>parser</name></name></expr>;</expr_stmt>
  <comment type="block">/* Expat wants everything wrapped in a top-level form, so start with
     a ghost open tag. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_xml_parse</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>log_start</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>log_start</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_xml_parse</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Pacify Expat with a pointless closing element tag. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_xml_parse</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>log_end</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>log_end</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Run a sequence of log files. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>run_log</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
        <param><decl><type><name>svn_boolean_t</name></type> <name>rerun</name></decl></param>,
        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>diff3_cmd</name></decl></param>,
        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>, *<decl><type ref="prev"/><name>err2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_xml_parser_t</name> *</type><name>parser</name></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>log_runner</name> *</type><name>loggy</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>loggy</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>buf</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>SVN__STREAM_CHUNK_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_size_t</name></type> <name>buf_len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_file_t</name> *</type><name>f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>logfile_path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>log_number</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iterpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>killme</name></decl>, <decl><type ref="prev"/><name>kill_adm_only</name></decl>;</decl_stmt>

  <comment type="block">/* kff todo: use the tag-making functions here, now. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>log_start</name>
    <init>= <expr>"&lt;wc-log xmlns=\"http://subversion.tigris.org/xmlns\"&gt;\n"</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>log_end</name>
    <init>= <expr>"&lt;/wc-log&gt;\n"</expr></init></decl>;</decl_stmt>

  <comment type="block">/* #define RERUN_LOG_FILES to test that rerunning log files works */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>RERUN_LOG_FILES</name></cpp:ifdef>
  <decl_stmt><decl><type><name>int</name></type> <name>rerun_counter</name> <init>= <expr>2</expr></init></decl>;</decl_stmt>
 <label><name>rerun</name>:</label>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><name>parser</name> = <call><name>svn_xml_make_parser</name><argument_list>(<argument><expr><name>loggy</name></expr></argument>, <argument><expr><name>start_handler</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name> = <name>adm_access</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>loggy</name>-&gt;<name>pool</name></name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>loggy</name>-&gt;<name>parser</name></name> = <name>parser</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>loggy</name>-&gt;<name>entries_modified</name></name> = <name>FALSE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>loggy</name>-&gt;<name>wcprops_modified</name></name> = <name>FALSE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>loggy</name>-&gt;<name>rerun</name></name> = <name>rerun</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>loggy</name>-&gt;<name>diff3_cmd</name></name> = <name>diff3_cmd</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>loggy</name>-&gt;<name>count</name></name> = 0</expr>;</expr_stmt>

  <comment type="block">/* Expat wants everything wrapped in a top-level form, so start with
     a ghost open tag. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_xml_parse</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>log_start</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>log_start</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for (<init><expr><name>log_number</name> = 0</expr>;</init> <condition>;</condition> <incr><expr><name>log_number</name>++</expr></incr>)
    <block>{
      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>logfile_path</name> = <call><name>svn_wc__logfile_path</name><argument_list>(<argument><expr><name>log_number</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* Parse the log file's contents. */</comment>
      <expr_stmt><expr><name>err</name> = <call><name>svn_wc__open_adm_file</name><argument_list>(<argument><expr>&amp;<name>f</name></expr></argument>, <argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>,
                                  <argument><expr><name>logfile_path</name></expr></argument>, <argument><expr><name>APR_READ</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
        <block>{
          <if>if <condition>(<expr><call><name>APR_STATUS_IS_ENOENT</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>apr_err</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
              <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
            }</block></then>
          <else>else
            <block>{
              <expr_stmt><expr><call><name>SVN_ERR_W</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Couldn't open log"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>

      <do>do <block>{
        <expr_stmt><expr><name>buf_len</name> = <name>SVN__STREAM_CHUNK_SIZE</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>err</name> = <call><name>svn_io_file_read</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>&amp;<name>buf_len</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>err</name> &amp;&amp; !<call><name>APR_STATUS_IS_EOF</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>apr_err</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
          <return>return <expr><call><name>svn_error_createf</name>
            <argument_list>(<argument><expr><name><name>err</name>-&gt;<name>apr_err</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>,
             <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Error reading administrative log file in '%s'"</expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>,
                                  <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>

        <expr_stmt><expr><name>err2</name> = <call><name>svn_xml_parse</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_len</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>err2</name></expr>)</condition><then>
          <block>{
            <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><name>err2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
      }</block> while <condition>(<expr>! <name>err</name></expr>)</condition>;</do>

      <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_close</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>


  <comment type="block">/* Pacify Expat with a pointless closing element tag. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_xml_parse</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>log_end</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>log_end</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>svn_xml_free_parser</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>RERUN_LOG_FILES</name></cpp:ifdef>
  <expr_stmt><expr><name>rerun</name> = <name>TRUE</name></expr>;</expr_stmt>
  <if>if <condition>(<expr>--<name>rerun_counter</name></expr>)</condition><then>
    <goto>goto <name>rerun</name>;</goto></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if>if <condition>(<expr><name><name>loggy</name>-&gt;<name>entries_modified</name></name> == <name>TRUE</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>entries</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entries_read</name><argument_list>(<argument><expr>&amp;<name>entries</name></expr></argument>, <argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entries_write</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  <if>if <condition>(<expr><name><name>loggy</name>-&gt;<name>wcprops_modified</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__props_flush</name><argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><name>svn_wc__props_wcprop</name></expr></argument>, <argument><expr><name><name>loggy</name>-&gt;<name>adm_access</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <comment type="block">/* Check for a 'killme' file in the administrative area. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__check_killme</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr>&amp;<name>killme</name></expr></argument>, <argument><expr>&amp;<name>kill_adm_only</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>killme</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>handle_killme</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>kill_adm_only</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <for>for (<init><expr><name>log_number</name>--</expr>;</init> <condition><expr><name>log_number</name> &gt;= 0</expr>;</condition> <incr><expr><name>log_number</name>--</expr></incr>)
        <block>{
          <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>logfile_path</name> = <call><name>svn_wc__logfile_path</name><argument_list>(<argument><expr><name>log_number</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="block">/* No 'killme'?  Remove the logfile; its commands have been
             executed. */</comment>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__remove_adm_file</name><argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>,
                                          <argument><expr><name>iterpool</name></expr></argument>, <argument><expr><name>logfile_path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></else></if>

  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__run_log</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>diff3_cmd</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>run_log</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>diff3_cmd</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__rerun_log</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>diff3_cmd</name></decl></param>,
                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>run_log</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>diff3_cmd</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<escape char="0xc"/>
<comment type="block">/*** Log file generation helpers ***/</comment>

<comment type="block">/* Extend log_accum with log operations to do MOVE_COPY_OP to SRC_PATH and
 * DST_PATH, removing DST_PATH if no SRC_PATH exists when
 * REMOVE_DST_IF_NO_SRC is true.
 *
 * Sets *DST_MODIFIED (if DST_MODIFIED isn't NULL) to indicate that the
 * destination path has been modified after running the log:
 * either MOVE_COPY_OP has been executed, or DST_PATH was removed.
 *
 * SRC_PATH and DST_PATH are relative to ADM_ACCESS.
 */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>loggy_move_copy_internal</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> **</type><name>log_accum</name></decl></param>,
                         <param><decl><type><name>svn_boolean_t</name> *</type><name>dst_modified</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>move_copy_op</name></decl></param>,
                         <param><decl><type><name>svn_boolean_t</name></type> <name>special_only</name></decl></param>,
                         <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_path</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_path</name></decl></param>,
                         <param><decl><type><name>svn_boolean_t</name></type> <name>remove_dst_if_no_src</name></decl></param>,
                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>full_src</name> <init>= <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>,
                                       <argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>full_dst</name> <init>= <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>,
                                       <argument><expr><name>dst_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_check_path</name><argument_list>(<argument><expr><name>full_src</name></expr></argument>, <argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>dst_modified</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>dst_modified</name> = <name>FALSE</name></expr>;</expr_stmt></then></if>

  <comment type="block">/* Does this file exist? */</comment>
  <if>if <condition>(<expr><name>kind</name> != <name>svn_node_none</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_xml_make_open_tag</name><argument_list>(<argument><expr><name>log_accum</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>,
                            <argument><expr><name>svn_xml_self_closing</name></expr></argument>,
                            <argument><expr><name>move_copy_op</name></expr></argument>,
                            <argument><expr><name>SVN_WC__LOG_ATTR_NAME</name></expr></argument>,
                            <argument><expr><name>src_path</name></expr></argument>,
                            <argument><expr><name>SVN_WC__LOG_ATTR_DEST</name></expr></argument>,
                            <argument><expr><name>dst_path</name></expr></argument>,
                            <argument><expr><name>SVN_WC__LOG_ATTR_ARG_1</name></expr></argument>,
                            <argument><expr><name>special_only</name> ? "true" : <name>NULL</name></expr></argument>,
                            <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>dst_modified</name></expr>)</condition><then>
        <expr_stmt><expr>*<name>dst_modified</name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
    }</block></then>
  <comment type="block">/* File doesn't exists, the caller wants dst_path to be removed. */</comment>
  <else>else <if>if <condition>(<expr><name>kind</name> == <name>svn_node_none</name> &amp;&amp; <name>remove_dst_if_no_src</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__loggy_remove</name><argument_list>(<argument><expr><name>log_accum</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>full_dst</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>dst_modified</name></expr>)</condition><then>
        <expr_stmt><expr>*<name>dst_modified</name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
    }</block></then></if></else></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>



<escape char="0xc"/>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>loggy_path</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
           <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>adm_path</name> <init>= <expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>local_path</name> <init>= <expr><call><name>svn_path_is_child</name><argument_list>(<argument><expr><name>adm_path</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr>! <name>local_path</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_path</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <expr_stmt><expr><name>local_path</name> = <name>SVN_WC_ENTRY_THIS_DIR</name></expr>;</expr_stmt></then></if>

  <return>return <expr><name>local_path</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__loggy_append</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> **</type><name>log_accum</name></decl></param>,
                     <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst</name></decl></param>,
                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>svn_xml_make_open_tag</name><argument_list>(<argument><expr><name>log_accum</name></expr></argument>,
                        <argument><expr><name>pool</name></expr></argument>,
                        <argument><expr><name>svn_xml_self_closing</name></expr></argument>,
                        <argument><expr><name>SVN_WC__LOG_APPEND</name></expr></argument>,
                        <argument><expr><name>SVN_WC__LOG_ATTR_NAME</name></expr></argument>,
                        <argument><expr><call><name>loggy_path</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name>SVN_WC__LOG_ATTR_DEST</name></expr></argument>,
                        <argument><expr><call><name>loggy_path</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__loggy_committed</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> **</type><name>log_accum</name></decl></param>,
                        <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>svn_revnum_t</name></type> <name>revnum</name></decl></param>,
                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>svn_xml_make_open_tag</name><argument_list>(<argument><expr><name>log_accum</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>svn_xml_self_closing</name></expr></argument>,
                        <argument><expr><name>SVN_WC__LOG_COMMITTED</name></expr></argument>,
                        <argument><expr><name>SVN_WC__LOG_ATTR_NAME</name></expr></argument>, <argument><expr><call><name>loggy_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name>SVN_WC__LOG_ATTR_REVISION</name></expr></argument>,
                        <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%ld"</expr></argument>, <argument><expr><name>revnum</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__loggy_copy</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> **</type><name>log_accum</name></decl></param>,
                   <param><decl><type><name>svn_boolean_t</name> *</type><name>dst_modified</name></decl></param>,
                   <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                   <param><decl><type><name>svn_wc__copy_t</name></type> <name>copy_type</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_path</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_path</name></decl></param>,
                   <param><decl><type><name>svn_boolean_t</name></type> <name>remove_dst_if_no_src</name></decl></param>,
                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name><name>copy_op</name><index>[]</index></name> <init>=
    <expr><block>{
      <expr><name>SVN_WC__LOG_CP</name></expr>,
      <expr><name>SVN_WC__LOG_CP_AND_TRANSLATE</name></expr>,
      <expr><name>SVN_WC__LOG_CP_AND_TRANSLATE</name></expr>,
      <expr><name>SVN_WC__LOG_CP_AND_DETRANSLATE</name></expr>
    }</block></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name>loggy_move_copy_internal</name>
    <argument_list>(<argument><expr><name>log_accum</name></expr></argument>, <argument><expr><name>dst_modified</name></expr></argument>,
     <argument><expr><name><name>copy_op</name><index>[<expr><name>copy_type</name></expr>]</index></name></expr></argument>, <argument><expr><name>copy_type</name> == <name>svn_wc__copy_translate_special_only</name></expr></argument>,
     <argument><expr><name>adm_access</name></expr></argument>,
     <argument><expr><call><name>loggy_path</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>,
     <argument><expr><call><name>loggy_path</name><argument_list>(<argument><expr><name>dst_path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>remove_dst_if_no_src</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__loggy_translated_file</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> **</type><name>log_accum</name></decl></param>,
                              <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>versioned</name></decl></param>,
                              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>svn_xml_make_open_tag</name>
    <argument_list>(<argument><expr><name>log_accum</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>svn_xml_self_closing</name></expr></argument>,
     <argument><expr><name>SVN_WC__LOG_CP_AND_TRANSLATE</name></expr></argument>,
     <argument><expr><name>SVN_WC__LOG_ATTR_NAME</name></expr></argument>, <argument><expr><call><name>loggy_path</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>,
     <argument><expr><name>SVN_WC__LOG_ATTR_DEST</name></expr></argument>, <argument><expr><call><name>loggy_path</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>,
     <argument><expr><name>SVN_WC__LOG_ATTR_ARG_2</name></expr></argument>, <argument><expr><call><name>loggy_path</name><argument_list>(<argument><expr><name>versioned</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>,
     <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__loggy_delete_entry</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> **</type><name>log_accum</name></decl></param>,
                           <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>svn_xml_make_open_tag</name><argument_list>(<argument><expr><name>log_accum</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>svn_xml_self_closing</name></expr></argument>,
                        <argument><expr><name>SVN_WC__LOG_DELETE_ENTRY</name></expr></argument>,
                        <argument><expr><name>SVN_WC__LOG_ATTR_NAME</name></expr></argument>, <argument><expr><call><name>loggy_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__loggy_delete_lock</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> **</type><name>log_accum</name></decl></param>,
                          <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>svn_xml_make_open_tag</name><argument_list>(<argument><expr><name>log_accum</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>svn_xml_self_closing</name></expr></argument>,
                        <argument><expr><name>SVN_WC__LOG_DELETE_LOCK</name></expr></argument>,
                        <argument><expr><name>SVN_WC__LOG_ATTR_NAME</name></expr></argument>, <argument><expr><call><name>loggy_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__loggy_delete_changelist</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> **</type><name>log_accum</name></decl></param>,
                                <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>svn_xml_make_open_tag</name><argument_list>(<argument><expr><name>log_accum</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>svn_xml_self_closing</name></expr></argument>,
                        <argument><expr><name>SVN_WC__LOG_DELETE_CHANGELIST</name></expr></argument>,
                        <argument><expr><name>SVN_WC__LOG_ATTR_NAME</name></expr></argument>, <argument><expr><call><name>loggy_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__loggy_entry_modify</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> **</type><name>log_accum</name></decl></param>,
                           <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                           <param><decl><type><name>svn_wc_entry_t</name> *</type><name>entry</name></decl></param>,
                           <param><decl><type><name>apr_uint64_t</name></type> <name>modify_flags</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>prop_hash</name> <init>= <expr><call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name><name>kind_str</name><index>[]</index></name> <init>=
    <expr><block>{ <expr>"none"</expr>,
      <expr><name>SVN_WC__ENTRIES_ATTR_FILE_STR</name></expr>,
      <expr><name>SVN_WC__ENTRIES_ATTR_DIR_STR</name></expr>,
      <expr>"unknown"</expr>,
    }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name><name>schedule_str</name><index>[]</index></name> <init>=
    <expr><block>{
      <expr>""</expr>, <comment type="block">/* svn_wc_schedule_normal */</comment>
      <expr><name>SVN_WC__ENTRY_VALUE_ADD</name></expr>,
      <expr><name>SVN_WC__ENTRY_VALUE_DELETE</name></expr>,
      <expr><name>SVN_WC__ENTRY_VALUE_REPLACE</name></expr>,
    }</block></expr></init></decl>;</decl_stmt>


  <if>if <condition>(<expr>! <name>modify_flags</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_ENTRY_ATTR</name><parameter_list>(<param><type><name>attr_flag</name></type></param>, <param><type><name>attr_name</name></type></param>, <param><type><name>value</name></type></param>)</parameter_list></cpp:macro> \
   <cpp:value>if (modify_flags &amp; (attr_flag)) \
     apr_hash_set(prop_hash, (attr_name), APR_HASH_KEY_STRING, value)</cpp:value></cpp:define>

  <expr_stmt><expr><call><name>ADD_ENTRY_ATTR</name><argument_list>(<argument><expr><name>SVN_WC__ENTRY_MODIFY_REVISION</name></expr></argument>,
                 <argument><expr><name>SVN_WC__ENTRY_ATTR_REVISION</name></expr></argument>,
                 <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%ld"</expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>revision</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ADD_ENTRY_ATTR</name><argument_list>(<argument><expr><name>SVN_WC__ENTRY_MODIFY_URL</name></expr></argument>,
                 <argument><expr><name>SVN_WC__ENTRY_ATTR_URL</name></expr></argument>,
                 <argument><expr><name><name>entry</name>-&gt;<name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ADD_ENTRY_ATTR</name><argument_list>(<argument><expr><name>SVN_WC__ENTRY_MODIFY_REPOS</name></expr></argument>,
                 <argument><expr><name>SVN_WC__ENTRY_ATTR_REPOS</name></expr></argument>,
                 <argument><expr><name><name>entry</name>-&gt;<name>repos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ADD_ENTRY_ATTR</name><argument_list>(<argument><expr><name>SVN_WC__ENTRY_MODIFY_UUID</name></expr></argument>,
                 <argument><expr><name>SVN_WC__ENTRY_ATTR_UUID</name></expr></argument>,
                 <argument><expr><name><name>entry</name>-&gt;<name>uuid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ADD_ENTRY_ATTR</name><argument_list>(<argument><expr><name>SVN_WC__ENTRY_MODIFY_KIND</name></expr></argument>,
                 <argument><expr><name>SVN_WC__ENTRY_ATTR_KIND</name></expr></argument>,
                 <argument><expr><name><name>kind_str</name><index>[<expr><name><name>entry</name>-&gt;<name>kind</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ADD_ENTRY_ATTR</name><argument_list>(<argument><expr><name>SVN_WC__ENTRY_MODIFY_SCHEDULE</name></expr></argument>,
                 <argument><expr><name>SVN_WC__ENTRY_ATTR_SCHEDULE</name></expr></argument>,
                 <argument><expr><name><name>schedule_str</name><index>[<expr><name><name>entry</name>-&gt;<name>schedule</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ADD_ENTRY_ATTR</name><argument_list>(<argument><expr><name>SVN_WC__ENTRY_MODIFY_COPIED</name></expr></argument>,
                 <argument><expr><name>SVN_WC__ENTRY_ATTR_COPIED</name></expr></argument>,
                 <argument><expr><name><name>entry</name>-&gt;<name>copied</name></name> ? "true" : "false"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ADD_ENTRY_ATTR</name><argument_list>(<argument><expr><name>SVN_WC__ENTRY_MODIFY_DELETED</name></expr></argument>,
                 <argument><expr><name>SVN_WC__ENTRY_ATTR_DELETED</name></expr></argument>,
                 <argument><expr><name><name>entry</name>-&gt;<name>deleted</name></name> ? "true" : "false"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ADD_ENTRY_ATTR</name><argument_list>(<argument><expr><name>SVN_WC__ENTRY_MODIFY_ABSENT</name></expr></argument>,
                 <argument><expr><name>SVN_WC__ENTRY_ATTR_ABSENT</name></expr></argument>,
                 <argument><expr><name><name>entry</name>-&gt;<name>absent</name></name> ? "true" : "false"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ADD_ENTRY_ATTR</name><argument_list>(<argument><expr><name>SVN_WC__ENTRY_MODIFY_INCOMPLETE</name></expr></argument>,
                 <argument><expr><name>SVN_WC__ENTRY_ATTR_INCOMPLETE</name></expr></argument>,
                 <argument><expr><name><name>entry</name>-&gt;<name>incomplete</name></name> ? "true" : "false"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ADD_ENTRY_ATTR</name><argument_list>(<argument><expr><name>SVN_WC__ENTRY_MODIFY_COPYFROM_URL</name></expr></argument>,
                 <argument><expr><name>SVN_WC__ENTRY_ATTR_COPYFROM_URL</name></expr></argument>,
                 <argument><expr><name><name>entry</name>-&gt;<name>copyfrom_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ADD_ENTRY_ATTR</name><argument_list>(<argument><expr><name>SVN_WC__ENTRY_MODIFY_COPYFROM_REV</name></expr></argument>,
                 <argument><expr><name>SVN_WC__ENTRY_ATTR_COPYFROM_REV</name></expr></argument>,
                 <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%ld"</expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>copyfrom_rev</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ADD_ENTRY_ATTR</name><argument_list>(<argument><expr><name>SVN_WC__ENTRY_MODIFY_CONFLICT_OLD</name></expr></argument>,
                 <argument><expr><name>SVN_WC__ENTRY_ATTR_CONFLICT_OLD</name></expr></argument>,
                 <argument><expr><name><name>entry</name>-&gt;<name>conflict_old</name></name> ? <name><name>entry</name>-&gt;<name>conflict_old</name></name> : ""</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ADD_ENTRY_ATTR</name><argument_list>(<argument><expr><name>SVN_WC__ENTRY_MODIFY_CONFLICT_NEW</name></expr></argument>,
                 <argument><expr><name>SVN_WC__ENTRY_ATTR_CONFLICT_NEW</name></expr></argument>,
                 <argument><expr><name><name>entry</name>-&gt;<name>conflict_new</name></name> ? <name><name>entry</name>-&gt;<name>conflict_new</name></name> : ""</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ADD_ENTRY_ATTR</name><argument_list>(<argument><expr><name>SVN_WC__ENTRY_MODIFY_CONFLICT_WRK</name></expr></argument>,
                 <argument><expr><name>SVN_WC__ENTRY_ATTR_CONFLICT_WRK</name></expr></argument>,
                 <argument><expr><name><name>entry</name>-&gt;<name>conflict_wrk</name></name> ? <name><name>entry</name>-&gt;<name>conflict_wrk</name></name> : ""</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ADD_ENTRY_ATTR</name><argument_list>(<argument><expr><name>SVN_WC__ENTRY_MODIFY_PREJFILE</name></expr></argument>,
                 <argument><expr><name>SVN_WC__ENTRY_ATTR_PREJFILE</name></expr></argument>,
                 <argument><expr><name><name>entry</name>-&gt;<name>prejfile</name></name> ? <name><name>entry</name>-&gt;<name>prejfile</name></name> : ""</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ADD_ENTRY_ATTR</name><argument_list>(<argument><expr><name>SVN_WC__ENTRY_MODIFY_TEXT_TIME</name></expr></argument>,
                 <argument><expr><name>SVN_WC__ENTRY_ATTR_TEXT_TIME</name></expr></argument>,
                 <argument><expr><call><name>svn_time_to_cstring</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>text_time</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ADD_ENTRY_ATTR</name><argument_list>(<argument><expr><name>SVN_WC__ENTRY_MODIFY_PROP_TIME</name></expr></argument>,
                 <argument><expr><name>SVN_WC__ENTRY_ATTR_PROP_TIME</name></expr></argument>,
                 <argument><expr><call><name>svn_time_to_cstring</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>prop_time</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ADD_ENTRY_ATTR</name><argument_list>(<argument><expr><name>SVN_WC__ENTRY_MODIFY_CHECKSUM</name></expr></argument>,
                 <argument><expr><name>SVN_WC__ENTRY_ATTR_CHECKSUM</name></expr></argument>,
                 <argument><expr><name><name>entry</name>-&gt;<name>checksum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ADD_ENTRY_ATTR</name><argument_list>(<argument><expr><name>SVN_WC__ENTRY_MODIFY_CMT_REV</name></expr></argument>,
                 <argument><expr><name>SVN_WC__ENTRY_ATTR_CMT_REV</name></expr></argument>,
                 <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%ld"</expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>cmt_rev</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ADD_ENTRY_ATTR</name><argument_list>(<argument><expr><name>SVN_WC__ENTRY_MODIFY_CMT_DATE</name></expr></argument>,
                 <argument><expr><name>SVN_WC__ENTRY_ATTR_CMT_DATE</name></expr></argument>,
                 <argument><expr><call><name>svn_time_to_cstring</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>cmt_date</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ADD_ENTRY_ATTR</name><argument_list>(<argument><expr><name>SVN_WC__ENTRY_MODIFY_CMT_AUTHOR</name></expr></argument>,
                 <argument><expr><name>SVN_WC__ENTRY_ATTR_CMT_AUTHOR</name></expr></argument>,
                 <argument><expr><name><name>entry</name>-&gt;<name>cmt_author</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ADD_ENTRY_ATTR</name><argument_list>(<argument><expr><name>SVN_WC__ENTRY_MODIFY_LOCK_TOKEN</name></expr></argument>,
                 <argument><expr><name>SVN_WC__ENTRY_ATTR_LOCK_TOKEN</name></expr></argument>,
                 <argument><expr><name><name>entry</name>-&gt;<name>lock_token</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ADD_ENTRY_ATTR</name><argument_list>(<argument><expr><name>SVN_WC__ENTRY_MODIFY_LOCK_OWNER</name></expr></argument>,
                 <argument><expr><name>SVN_WC__ENTRY_ATTR_LOCK_OWNER</name></expr></argument>,
                 <argument><expr><name><name>entry</name>-&gt;<name>lock_owner</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ADD_ENTRY_ATTR</name><argument_list>(<argument><expr><name>SVN_WC__ENTRY_MODIFY_LOCK_COMMENT</name></expr></argument>,
                 <argument><expr><name>SVN_WC__ENTRY_ATTR_LOCK_COMMENT</name></expr></argument>,
                 <argument><expr><name><name>entry</name>-&gt;<name>lock_comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ADD_ENTRY_ATTR</name><argument_list>(<argument><expr><name>SVN_WC__ENTRY_MODIFY_LOCK_CREATION_DATE</name></expr></argument>,
                 <argument><expr><name>SVN_WC__ENTRY_ATTR_LOCK_CREATION_DATE</name></expr></argument>,
                 <argument><expr><call><name>svn_time_to_cstring</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>lock_creation_date</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ADD_ENTRY_ATTR</name><argument_list>(<argument><expr><name>SVN_WC__ENTRY_MODIFY_HAS_PROPS</name></expr></argument>,
                 <argument><expr><name>SVN_WC__ENTRY_ATTR_HAS_PROPS</name></expr></argument>,
                 <argument><expr><name><name>entry</name>-&gt;<name>has_props</name></name> ? "true" : "false"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ADD_ENTRY_ATTR</name><argument_list>(<argument><expr><name>SVN_WC__ENTRY_MODIFY_HAS_PROP_MODS</name></expr></argument>,
                 <argument><expr><name>SVN_WC__ENTRY_ATTR_HAS_PROP_MODS</name></expr></argument>,
                 <argument><expr><name><name>entry</name>-&gt;<name>has_prop_mods</name></name> ? "true" : "false"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ADD_ENTRY_ATTR</name><argument_list>(<argument><expr><name>SVN_WC__ENTRY_MODIFY_CACHABLE_PROPS</name></expr></argument>,
                 <argument><expr><name>SVN_WC__ENTRY_ATTR_CACHABLE_PROPS</name></expr></argument>,
                 <argument><expr><name><name>entry</name>-&gt;<name>cachable_props</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ADD_ENTRY_ATTR</name><argument_list>(<argument><expr><name>SVN_WC__ENTRY_MODIFY_PRESENT_PROPS</name></expr></argument>,
                 <argument><expr><name>SVN_WC__ENTRY_ATTR_PRESENT_PROPS</name></expr></argument>,
                 <argument><expr><name><name>entry</name>-&gt;<name>present_props</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ADD_ENTRY_ATTR</name><argument_list>(<argument><expr><name>SVN_WC__ENTRY_MODIFY_WORKING_SIZE</name></expr></argument>,
                 <argument><expr><name>SVN_WC__ENTRY_ATTR_WORKING_SIZE</name></expr></argument>,
                 <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%" <name>APR_OFF_T_FMT</name></expr></argument>,
                              <argument><expr><name><name>entry</name>-&gt;<name>working_size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ADD_ENTRY_ATTR</name><argument_list>(<argument><expr><name>SVN_WC__ENTRY_MODIFY_FORCE</name></expr></argument>,
                 <argument><expr><name>SVN_WC__LOG_ATTR_FORCE</name></expr></argument>,
                 <argument><expr>"true"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ADD_ENTRY_ATTR</name></cpp:undef>

  <if>if <condition>(<expr><call><name>apr_hash_count</name><argument_list>(<argument><expr><name>prop_hash</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>prop_hash</name></expr></argument>, <argument><expr><name>SVN_WC__LOG_ATTR_NAME</name></expr></argument>,
               <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><call><name>loggy_path</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>svn_xml_make_open_tag_hash</name><argument_list>(<argument><expr><name>log_accum</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>,
                             <argument><expr><name>svn_xml_self_closing</name></expr></argument>,
                             <argument><expr><name>SVN_WC__LOG_MODIFY_ENTRY</name></expr></argument>,
                             <argument><expr><name>prop_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__loggy_modify_wcprop</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> **</type><name>log_accum</name></decl></param>,
                            <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>propname</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>propval</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>svn_xml_make_open_tag</name><argument_list>(<argument><expr><name>log_accum</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>svn_xml_self_closing</name></expr></argument>,
                        <argument><expr><name>SVN_WC__LOG_MODIFY_WCPROP</name></expr></argument>,
                        <argument><expr><name>SVN_WC__LOG_ATTR_NAME</name></expr></argument>,
                        <argument><expr><call><name>loggy_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name>SVN_WC__LOG_ATTR_PROPNAME</name></expr></argument>,
                        <argument><expr><name>propname</name></expr></argument>,
                        <argument><expr><name>SVN_WC__LOG_ATTR_PROPVAL</name></expr></argument>,
                        <argument><expr><name>propval</name></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__loggy_move</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> **</type><name>log_accum</name></decl></param>,
                   <param><decl><type><name>svn_boolean_t</name> *</type><name>dst_modified</name></decl></param>,
                   <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_path</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_path</name></decl></param>,
                   <param><decl><type><name>svn_boolean_t</name></type> <name>remove_dst_if_no_src</name></decl></param>,
                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>loggy_move_copy_internal</name><argument_list>(<argument><expr><name>log_accum</name></expr></argument>, <argument><expr><name>dst_modified</name></expr></argument>,
                                  <argument><expr><name>SVN_WC__LOG_MV</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
                                  <argument><expr><call><name>loggy_path</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>,
                                  <argument><expr><call><name>loggy_path</name><argument_list>(<argument><expr><name>dst_path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>,
                                  <argument><expr><name>remove_dst_if_no_src</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__loggy_maybe_set_executable</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> **</type><name>log_accum</name></decl></param>,
                                   <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>svn_xml_make_open_tag</name><argument_list>(<argument><expr><name>log_accum</name></expr></argument>,
                        <argument><expr><name>pool</name></expr></argument>,
                        <argument><expr><name>svn_xml_self_closing</name></expr></argument>,
                        <argument><expr><name>SVN_WC__LOG_MAYBE_EXECUTABLE</name></expr></argument>,
                        <argument><expr><name>SVN_WC__LOG_ATTR_NAME</name></expr></argument>, <argument><expr><call><name>loggy_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__loggy_maybe_set_readonly</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> **</type><name>log_accum</name></decl></param>,
                                 <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>svn_xml_make_open_tag</name><argument_list>(<argument><expr><name>log_accum</name></expr></argument>,
                        <argument><expr><name>pool</name></expr></argument>,
                        <argument><expr><name>svn_xml_self_closing</name></expr></argument>,
                        <argument><expr><name>SVN_WC__LOG_MAYBE_READONLY</name></expr></argument>,
                        <argument><expr><name>SVN_WC__LOG_ATTR_NAME</name></expr></argument>,
                        <argument><expr><call><name>loggy_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__loggy_set_entry_timestamp_from_wc</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> **</type><name>log_accum</name></decl></param>,
                                          <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>time_prop</name></decl></param>,
                                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>svn_xml_make_open_tag</name><argument_list>(<argument><expr><name>log_accum</name></expr></argument>,
                        <argument><expr><name>pool</name></expr></argument>,
                        <argument><expr><name>svn_xml_self_closing</name></expr></argument>,
                        <argument><expr><name>SVN_WC__LOG_MODIFY_ENTRY</name></expr></argument>,
                        <argument><expr><name>SVN_WC__LOG_ATTR_NAME</name></expr></argument>,
                        <argument><expr><call><name>loggy_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name>time_prop</name></expr></argument>,
                        <argument><expr><name>SVN_WC__TIMESTAMP_WC</name></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__loggy_set_entry_working_size_from_wc</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> **</type><name>log_accum</name></decl></param>,
                                                <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                                                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>svn_xml_make_open_tag</name><argument_list>(<argument><expr><name>log_accum</name></expr></argument>,
                        <argument><expr><name>pool</name></expr></argument>,
                        <argument><expr><name>svn_xml_self_closing</name></expr></argument>,
                        <argument><expr><name>SVN_WC__LOG_MODIFY_ENTRY</name></expr></argument>,
                        <argument><expr><name>SVN_WC__LOG_ATTR_NAME</name></expr></argument>,
                        <argument><expr><call><name>loggy_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name>SVN_WC__ENTRY_ATTR_WORKING_SIZE</name></expr></argument>,
                        <argument><expr><name>SVN_WC__TIMESTAMP_WC</name></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__loggy_set_readonly</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> **</type><name>log_accum</name></decl></param>,
                           <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>svn_xml_make_open_tag</name><argument_list>(<argument><expr><name>log_accum</name></expr></argument>,
                        <argument><expr><name>pool</name></expr></argument>,
                        <argument><expr><name>svn_xml_self_closing</name></expr></argument>,
                        <argument><expr><name>SVN_WC__LOG_READONLY</name></expr></argument>,
                        <argument><expr><name>SVN_WC__LOG_ATTR_NAME</name></expr></argument>,
                        <argument><expr><call><name>loggy_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__loggy_set_timestamp</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> **</type><name>log_accum</name></decl></param>,
                            <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>timestr</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>svn_xml_make_open_tag</name><argument_list>(<argument><expr><name>log_accum</name></expr></argument>,
                        <argument><expr><name>pool</name></expr></argument>,
                        <argument><expr><name>svn_xml_self_closing</name></expr></argument>,
                        <argument><expr><name>SVN_WC__LOG_SET_TIMESTAMP</name></expr></argument>,
                        <argument><expr><name>SVN_WC__LOG_ATTR_NAME</name></expr></argument>,
                        <argument><expr><call><name>loggy_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name>SVN_WC__LOG_ATTR_TIMESTAMP</name></expr></argument>,
                        <argument><expr><name>timestr</name></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__loggy_remove</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> **</type><name>log_accum</name></decl></param>,
                     <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <comment type="block">/* No need to check whether BASE_NAME exists: ENOENT is ignored
     by the log-runner */</comment>
  <expr_stmt><expr><call><name>svn_xml_make_open_tag</name><argument_list>(<argument><expr><name>log_accum</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>,
                        <argument><expr><name>svn_xml_self_closing</name></expr></argument>,
                        <argument><expr><name>SVN_WC__LOG_RM</name></expr></argument>,
                        <argument><expr><name>SVN_WC__LOG_ATTR_NAME</name></expr></argument>,
                        <argument><expr><call><name>loggy_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__loggy_upgrade_format</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> **</type><name>log_accum</name></decl></param>,
                             <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                             <param><decl><type><name>int</name></type> <name>format</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>svn_xml_make_open_tag</name><argument_list>(<argument><expr><name>log_accum</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>,
                        <argument><expr><name>svn_xml_self_closing</name></expr></argument>,
                        <argument><expr><name>SVN_WC__LOG_UPGRADE_FORMAT</name></expr></argument>,
                        <argument><expr><name>SVN_WC__LOG_ATTR_FORMAT</name></expr></argument>,
                        <argument><expr><call><name>apr_itoa</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<escape char="0xc"/>
<comment type="block">/*** Helper to write log files ***/</comment>

<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__write_log</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                  <param><decl><type><name>int</name></type> <name>log_number</name></decl></param>, <param><decl><type><name>svn_stringbuf_t</name> *</type><name>log_content</name></decl></param>,
                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_file_t</name> *</type><name>log_file</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>logfile_name</name> <init>= <expr><call><name>svn_wc__logfile_path</name><argument_list>(<argument><expr><name>log_number</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>adm_path</name> <init>= <expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__open_adm_file</name><argument_list>(<argument><expr>&amp;<name>log_file</name></expr></argument>, <argument><expr><name>adm_path</name></expr></argument>, <argument><expr><name>logfile_name</name></expr></argument>,
                                <argument><expr>(<name>APR_WRITE</name> | <name>APR_CREATE</name>)</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR_W</name><argument_list>(<argument><expr><call><name>svn_io_file_write_full</name><argument_list>(<argument><expr><name>log_file</name></expr></argument>, <argument><expr><name><name>log_content</name>-&gt;<name>data</name></name></expr></argument>,
                                   <argument><expr><name><name>log_content</name>-&gt;<name>len</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Error writing log for '%s'"</expr></argument>)</argument_list></call></expr></argument>,
                         <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>logfile_name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__close_adm_file</name><argument_list>(<argument><expr><name>log_file</name></expr></argument>, <argument><expr><name>adm_path</name></expr></argument>, <argument><expr><name>logfile_name</name></expr></argument>,
                                 <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<escape char="0xc"/>
<comment type="block">/*** Recursively do log things. ***/</comment>

<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_cleanup</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
               <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>optional_adm_access</name></decl></param>,
               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>diff3_cmd</name></decl></param>,
               <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
               <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_wc_cleanup2</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>diff3_cmd</name></expr></argument>, <argument><expr><name>cancel_func</name></expr></argument>, <argument><expr><name>cancel_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_cleanup2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>diff3_cmd</name></decl></param>,
                <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
                <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>entries</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>cleanup</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>wc_format_version</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>killme</name></decl>, <decl><type ref="prev"/><name>kill_adm_only</name></decl>;</decl_stmt>

  <comment type="block">/* Check cancellation; note that this catches recursive calls too. */</comment>
  <if>if <condition>(<expr><name>cancel_func</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>cancel_func</name><argument_list>(<argument><expr><name>cancel_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_check_wc</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>&amp;<name>wc_format_version</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* a "version" of 0 means a non-wc directory */</comment>
  <if>if <condition>(<expr><name>wc_format_version</name> == 0</expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name>
      <argument_list>(<argument><expr><name>SVN_ERR_WC_NOT_DIRECTORY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
       <argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s' is not a working copy directory"</expr></argument>)</argument_list></call></expr></argument>,
       <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <comment type="block">/* Lock this working copy directory, or steal an existing lock */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__adm_steal_write_lock</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Recurse on versioned elements first, oddly enough. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entries_read</name><argument_list>(<argument><expr>&amp;<name>entries</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>entry_path</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>entry</name> = <name>val</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>entry_path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name>
          &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>SVN_WC_ENTRY_THIS_DIR</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
        <block>{
          <comment type="block">/* Sub-directories */</comment>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_check_path</name><argument_list>(<argument><expr><name>entry_path</name></expr></argument>, <argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>kind</name> == <name>svn_node_dir</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_cleanup2</name><argument_list>(<argument><expr><name>entry_path</name></expr></argument>, <argument><expr><name>diff3_cmd</name></expr></argument>,
                                    <argument><expr><name>cancel_func</name></expr></argument>, <argument><expr><name>cancel_baton</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></then>
      <else>else
        <block>{
          <comment type="block">/* "." and things that are not directories, check for mods to
             trigger the timestamp repair mechanism.  Since this rewrites
             the entries file for each timestamp fixed it has the potential
             to be slow, perhaps we need something more sophisticated? */</comment>
          <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>modified</name></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_props_modified_p</name><argument_list>(<argument><expr>&amp;<name>modified</name></expr></argument>, <argument><expr><name>entry_path</name></expr></argument>,
                                          <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_file</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_text_modified_p</name><argument_list>(<argument><expr>&amp;<name>modified</name></expr></argument>, <argument><expr><name>entry_path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                                           <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></else></if>
    }</block></for>
  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__check_killme</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr>&amp;<name>killme</name></expr></argument>, <argument><expr>&amp;<name>kill_adm_only</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>killme</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* A KILLME indicates that the log has already been run */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>handle_killme</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>kill_adm_only</name></expr></argument>, <argument><expr><name>cancel_func</name></expr></argument>,
                            <argument><expr><name>cancel_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <comment type="block">/* In an attempt to maintain consistency between the decisions made in
         this function, and those made in the access baton lock-removal code,
         we use the same test as the lock-removal code. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__adm_is_cleanup_required</name><argument_list>(<argument><expr>&amp;<name>cleanup</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>cleanup</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__rerun_log</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>diff3_cmd</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></else></if>

  <comment type="block">/* Cleanup the tmp area of the admin subdir, if running the log has not
     removed it!  The logs have been run, so anything left here has no hope
     of being useful. */</comment>
  <if>if <condition>(<expr><call><name>svn_wc__adm_path_exists</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__adm_cleanup_tmp_area</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_close</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
