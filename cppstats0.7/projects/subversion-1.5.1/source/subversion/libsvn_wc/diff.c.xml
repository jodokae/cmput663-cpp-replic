<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_wc/diff.c"><comment type="block">/*
 * diff.c -- The diff editor for comparing the working copy against the
 *           repository.
 *
 * ====================================================================
 * Copyright (c) 2000-2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<comment type="block">/*
 * This code uses an svn_delta_editor_t editor driven by
 * svn_wc_crawl_revisions (like the update command) to retrieve the
 * differences between the working copy and the requested repository
 * version. Rather than updating the working copy, this new editor creates
 * temporary files that contain the pristine repository versions. When the
 * crawler closes the files the editor calls back to a client layer
 * function to compare the working copy and the temporary file. There is
 * only ever one temporary file in existence at any time.
 *
 * When the crawler closes a directory, the editor then calls back to the
 * client layer to compare any remaining files that may have been modified
 * locally. Added directories do not have corresponding temporary
 * directories created, as they are not needed.
 *
 * ### TODO: Replacements where the node kind changes needs support. It
 * mostly works when the change is in the repository, but not when it is
 * in the working copy.
 *
 * ### TODO: Do we need to support copyfrom?
 *
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_hash.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_hash.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_wc_private.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"props.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"adm_files.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>

<escape char="0xc"/>
<comment type="block">/*-------------------------------------------------------------------------*/</comment>
<comment type="block">/* A little helper function.

   You see, when we ask the server to update us to a certain revision,
   we construct the new fulltext, and then run

         'diff &lt;repos_fulltext&gt; &lt;working_fulltext&gt;'

   which is, of course, actually backwards from the repository's point
   of view.  It thinks we want to move from working-&gt;repos.

   So when the server sends property changes, they're effectively
   backwards from what we want.  We don't want working-&gt;repos, but
   repos-&gt;working.  So this little helper "reverses" the value in
   BASEPROPS and PROPCHANGES before we pass them off to the
   prop_changed() diff-callback.  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>reverse_propchanges</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>baseprops</name></decl></param>,
                    <param><decl><type><name>apr_array_header_t</name> *</type><name>propchanges</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <comment type="block">/* ### todo: research lifetimes for property values below */</comment>

  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>propchanges</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>svn_prop_t</name> *</type><name>propchange</name>
        <init>= <expr>&amp;<call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>propchanges</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_prop_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>original_value</name> <init>=
        <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>baseprops</name></expr></argument>, <argument><expr><name><name>propchange</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr>(<name>original_value</name> == <name>NULL</name>) &amp;&amp; (<name><name>propchange</name>-&gt;<name>value</name></name> != <name>NULL</name>)</expr>)</condition><then>
        <block>{
          <comment type="block">/* found an addition.  make it look like a deletion. */</comment>
          <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>baseprops</name></expr></argument>, <argument><expr><name><name>propchange</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                       <argument><expr><call><name>svn_string_dup</name><argument_list>(<argument><expr><name><name>propchange</name>-&gt;<name>value</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>propchange</name>-&gt;<name>value</name></name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></then>

      <else>else <if>if <condition>(<expr>(<name>original_value</name> != <name>NULL</name>) &amp;&amp; (<name><name>propchange</name>-&gt;<name>value</name></name> == <name>NULL</name>)</expr>)</condition><then>
        <block>{
          <comment type="block">/* found a deletion.  make it look like an addition. */</comment>
          <expr_stmt><expr><name><name>propchange</name>-&gt;<name>value</name></name> = <call><name>svn_string_dup</name><argument_list>(<argument><expr><name>original_value</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>baseprops</name></expr></argument>, <argument><expr><name><name>propchange</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                       <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>

      <else>else <if>if <condition>(<expr>(<name>original_value</name> != <name>NULL</name>) &amp;&amp; (<name><name>propchange</name>-&gt;<name>value</name></name> != <name>NULL</name>)</expr>)</condition><then>
        <block>{
          <comment type="block">/* found a change.  just swap the values.  */</comment>
          <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>str</name> <init>= <expr><call><name>svn_string_dup</name><argument_list>(<argument><expr><name><name>propchange</name>-&gt;<name>value</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>propchange</name>-&gt;<name>value</name></name> = <call><name>svn_string_dup</name><argument_list>(<argument><expr><name>original_value</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>baseprops</name></expr></argument>, <argument><expr><name><name>propchange</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if></else></if>
    }</block></for>
}</block></function>


<comment type="block">/*-------------------------------------------------------------------------*/</comment>

<escape char="0xc"/>
<comment type="block">/* Overall crawler editor baton.
 */</comment>
<struct>struct <name>edit_baton</name> <block>{
  <comment type="block">/* ANCHOR/TARGET represent the base of the hierarchy to be compared. */</comment>
  <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>anchor</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>anchor_path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl>;</decl_stmt>

  <comment type="block">/* Target revision */</comment>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>revnum</name></decl>;</decl_stmt>

  <comment type="block">/* Was the root opened? */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>root_opened</name></decl>;</decl_stmt>

  <comment type="block">/* The callbacks and callback argument that implement the file comparison
     functions */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_diff_callbacks2_t</name> *</type><name>callbacks</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>callback_baton</name></decl>;</decl_stmt>

  <comment type="block">/* How does this diff descend? */</comment>
  <decl_stmt><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl>;</decl_stmt>

  <comment type="block">/* Should this diff ignore node ancestry. */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl>;</decl_stmt>

  <comment type="block">/* Possibly diff repos against text-bases instead of working files. */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>use_text_base</name></decl>;</decl_stmt>

  <comment type="block">/* Possibly show the diffs backwards. */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>reverse_order</name></decl>;</decl_stmt>

  <comment type="block">/* Empty file used to diff adds / deletes */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>empty_file</name></decl>;</decl_stmt>

  <comment type="block">/* Hash whose keys are const char * changelist names. */</comment>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>changelist_hash</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/* Directory level baton.
 */</comment>
<struct>struct <name>dir_baton</name> <block>{
  <comment type="block">/* Gets set if the directory is added rather than replaced/unchanged. */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>added</name></decl>;</decl_stmt>

  <comment type="block">/* The depth at which this directory should be diffed. */</comment>
  <decl_stmt><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl>;</decl_stmt>

  <comment type="block">/* The "correct" path of the directory, but it may not exist in the
     working copy. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>

  <comment type="block">/* Identifies those directory elements that get compared while running
     the crawler.  These elements should not be compared again when
     recursively looking for local modifications.

     This hash maps the full path of the entry to an unimportant value
     (presence in the hash is the important factor here, not the value
     itself).

     If the directory's properties have been compared, an item with hash
     key of "" (an empty string) will be present in the hash. */</comment>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>compared</name></decl>;</decl_stmt>

  <comment type="block">/* The baton for the parent directory, or null if this is the root of the
     hierarchy to be compared. */</comment>
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>dir_baton</name></decl>;</decl_stmt>

  <comment type="block">/* The list of incoming BASE-&gt;repos propchanges. */</comment>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>propchanges</name></decl>;</decl_stmt>

  <comment type="block">/* The overall crawler editor baton. */</comment>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>edit_baton</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/* File level baton.
 */</comment>
<struct>struct <name>file_baton</name> <block>{
  <comment type="block">/* Gets set if the file is added rather than replaced. */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>added</name></decl>;</decl_stmt>

  <comment type="block">/* PATH is the "correct" path of the file, but it may not exist in the
     working copy.  WC_PATH is a path we can use to make temporary files
     or open empty files; it doesn't necessarily exist either, but the
     directory part of it does. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>wc_path</name></decl>;</decl_stmt>

 <comment type="block">/* When constructing the requested repository version of the file,
    ORIGINAL_FILE is version of the file in the working copy. TEMP_FILE is
    the pristine repository file obtained by applying the repository diffs
    to ORIGINAL_FILE. */</comment>
  <decl_stmt><decl><type><name>apr_file_t</name> *</type><name>original_file</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_file_t</name> *</type><name>temp_file</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>temp_file_path</name></decl>;</decl_stmt>

  <comment type="block">/* The list of incoming BASE-&gt;repos propchanges. */</comment>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>propchanges</name></decl>;</decl_stmt>

  <comment type="block">/* APPLY_HANDLER/APPLY_BATON represent the delta applcation baton. */</comment>
  <decl_stmt><decl><type><name>svn_txdelta_window_handler_t</name></type> <name>apply_handler</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>apply_baton</name></decl>;</decl_stmt>

  <comment type="block">/* The overall crawler editor baton. */</comment>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>edit_baton</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/* Used to wrap svn_wc_diff_callbacks_t. */</comment>
<struct>struct <name>callbacks_wrapper_baton</name> <block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_diff_callbacks_t</name> *</type><name>callbacks</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>baton</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/* Create a new edit baton. TARGET/ANCHOR are working copy paths that
 * describe the root of the comparison. CALLBACKS/CALLBACK_BATON
 * define the callbacks to compare files. DEPTH defines if and how to
 * descend into subdirectories; see public doc string for exactly how.
 * IGNORE_ANCESTRY defines whether to utilize node ancestry when
 * calculating diffs.  USE_TEXT_BASE defines whether to compare
 * against working files or text-bases.  REVERSE_ORDER defines which
 * direction to perform the diff.
 * 
 * CHANGELISTS is a list of const char * changelist names, used to
 * filter diff output responses to only those items in one of the
 * specified changelists, empty (or NULL altogether) if no changelist
 * filtering is requested.
 */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>make_editor_baton</name><parameter_list>(<param><decl><type>struct <name>edit_baton</name> **</type><name>edit_baton</name></decl></param>,
                  <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>anchor</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>svn_wc_diff_callbacks2_t</name> *</type><name>callbacks</name></decl></param>,
                  <param><decl><type><name>void</name> *</type><name>callback_baton</name></decl></param>,
                  <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                  <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl></param>,
                  <param><decl><type><name>svn_boolean_t</name></type> <name>use_text_base</name></decl></param>,
                  <param><decl><type><name>svn_boolean_t</name></type> <name>reverse_order</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>changelists</name></decl></param>,
                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>changelist_hash</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>changelists</name> &amp;&amp; <name><name>changelists</name>-&gt;<name>nelts</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_hash_from_cstring_keys</name><argument_list>(<argument><expr>&amp;<name>changelist_hash</name></expr></argument>, <argument><expr><name>changelists</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <expr_stmt><expr><name>eb</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>eb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>anchor</name></name> = <name>anchor</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>anchor_path</name></name> = <call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>target</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>callbacks</name></name> = <name>callbacks</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>callback_baton</name></name> = <name>callback_baton</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>depth</name></name> = <name>depth</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>ignore_ancestry</name></name> = <name>ignore_ancestry</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>use_text_base</name></name> = <name>use_text_base</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>reverse_order</name></name> = <name>reverse_order</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>changelist_hash</name></name> = <name>changelist_hash</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>edit_baton</name> = <name>eb</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Create a new directory baton.  PATH is the directory path,
 * including anchor_path.  ADDED is set if this directory is being
 * added rather than replaced.  PARENT_BATON is the baton of the
 * parent directory, it will be null if this is the root of the
 * comparison hierarchy.  The directory and its parent may or may not
 * exist in the working copy.  EDIT_BATON is the overall crawler
 * editor baton.
 */</comment>
<function><type><specifier>static</specifier> struct <name>dir_baton</name> *</type>
<name>make_dir_baton</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
               <param><decl><type>struct <name>dir_baton</name> *</type><name>parent_baton</name></decl></param>,
               <param><decl><type>struct <name>edit_baton</name> *</type><name>edit_baton</name></decl></param>,
               <param><decl><type><name>svn_boolean_t</name></type> <name>added</name></decl></param>,
               <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>dir_baton</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>dir_baton</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>dir_baton</name>-&gt;<name>dir_baton</name></name> = <name>parent_baton</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dir_baton</name>-&gt;<name>edit_baton</name></name> = <name>edit_baton</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dir_baton</name>-&gt;<name>added</name></name> = <name>added</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dir_baton</name>-&gt;<name>depth</name></name> = <name>depth</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dir_baton</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dir_baton</name>-&gt;<name>propchanges</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_prop_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dir_baton</name>-&gt;<name>compared</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name><name>dir_baton</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dir_baton</name>-&gt;<name>path</name></name> = <name>path</name></expr>;</expr_stmt>

  <return>return <expr><name>dir_baton</name></expr>;</return>
}</block></function>

<comment type="block">/* Create a new file baton.  PATH is the file path, including
 * anchor_path.  ADDED is set if this file is being added rather than
 * replaced.  PARENT_BATON is the baton of the parent directory.  The
 * directory and its parent may or may not exist in the working copy.
 */</comment>
<function><type><specifier>static</specifier> struct <name>file_baton</name> *</type>
<name>make_file_baton</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                <param><decl><type><name>svn_boolean_t</name></type> <name>added</name></decl></param>,
                <param><decl><type>struct <name>dir_baton</name> *</type><name>parent_baton</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>file_baton</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>file_baton</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>edit_baton</name> <init>= <expr><name><name>parent_baton</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>file_baton</name>-&gt;<name>edit_baton</name></name> = <name>edit_baton</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>file_baton</name>-&gt;<name>added</name></name> = <name>added</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>file_baton</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>file_baton</name>-&gt;<name>propchanges</name></name>  = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_prop_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>file_baton</name>-&gt;<name>path</name></name> = <name>path</name></expr>;</expr_stmt>

  <comment type="block">/* If the parent directory is added rather than replaced it does not
     exist in the working copy.  Determine a working copy path whose
     directory part does exist; we can use that to create temporary
     files.  It doesn't matter whether the file part exists in the
     directory. */</comment>
  <if>if <condition>(<expr><name><name>parent_baton</name>-&gt;<name>added</name></name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>wc_dir_baton</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>

      <comment type="block">/* Ascend until a directory is not being added, this will be a
         directory that does exist. This must terminate since the root of
         the comparison cannot be added. */</comment>
      <while>while <condition>(<expr><name><name>wc_dir_baton</name>-&gt;<name>added</name></name></expr>)</condition>
        <expr_stmt><expr><name>wc_dir_baton</name> = <name><name>wc_dir_baton</name>-&gt;<name>dir_baton</name></name></expr>;</expr_stmt></while>

      <expr_stmt><expr><name><name>file_baton</name>-&gt;<name>wc_path</name></name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>wc_dir_baton</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr>"unimportant"</expr></argument>,
                                          <argument><expr><name><name>file_baton</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <expr_stmt><expr><name><name>file_baton</name>-&gt;<name>wc_path</name></name> = <name><name>file_baton</name>-&gt;<name>path</name></name></expr>;</expr_stmt>
    }</block></else></if>

  <return>return <expr><name>file_baton</name></expr>;</return>
}</block></function>

<comment type="block">/* Get the empty file associated with the edit baton. This is cached so
 * that it can be reused, all empty files are the same.
 */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>get_empty_file</name><parameter_list>(<param><decl><type>struct <name>edit_baton</name> *</type><name>b</name></decl></param>,
               <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>empty_file</name></decl></param>)</parameter_list>
<block>{
  <comment type="block">/* Create the file if it does not exist */</comment>
  <comment type="block">/* Note that we tried to use /dev/null in r17220, but
     that won't work on Windows: it's impossible to stat NUL */</comment>
  <if>if <condition>(<expr>!<name><name>b</name>-&gt;<name>empty_file</name></name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>temp_dir</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_temp_dir</name><argument_list>(<argument><expr>&amp;<name>temp_dir</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_open_unique_file2</name>
              <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;(<name><name>b</name>-&gt;<name>empty_file</name></name>)</expr></argument>,
               <argument><expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name>temp_dir</name></expr></argument>, <argument><expr>"tmp"</expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>,
               <argument><expr>""</expr></argument>, <argument><expr><name>svn_io_file_del_on_pool_cleanup</name></expr></argument>,
               <argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <expr_stmt><expr>*<name>empty_file</name> = <name><name>b</name>-&gt;<name>empty_file</name></name></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Return the value of the svn:mime-type property held in PROPS, or NULL
   if no such property exists. */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>get_prop_mimetype</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>mimetype_val</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>mimetype_val</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>props</name></expr></argument>,
                              <argument><expr><name>SVN_PROP_MIME_TYPE</name></expr></argument>,
                              <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>SVN_PROP_MIME_TYPE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr>(<name>mimetype_val</name>) ? <name><name>mimetype_val</name>-&gt;<name>data</name></name> : <name>NULL</name></expr>;</return>
}</block></function>


<comment type="block">/* Set *MIMETYPE to the BASE version of the svn:mime-type property of
   file PATH, using ADM_ACCESS, or to NULL if no such property exists.
   BASEPROPS is optional: if present, use it to cache the BASE properties
   of the file.

   Return the property value and property hash allocated in POOL.
*/</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>get_base_mimetype</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>mimetype</name></decl></param>,
                  <param><decl><type><name>apr_hash_t</name> **</type><name>baseprops</name></decl></param>,
                  <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>props</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>baseprops</name> == <name>NULL</name></expr>)</condition><then>
    <expr_stmt><expr><name>baseprops</name> = &amp;<name>props</name></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr>*<name>baseprops</name> == <name>NULL</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_get_prop_diffs</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>baseprops</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <expr_stmt><expr>*<name>mimetype</name> = <call><name>get_prop_mimetype</name><argument_list>(<argument><expr>*<name>baseprops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Set *MIMETYPE to the WORKING version of the svn:mime-type property
   of file PATH, using ADM_ACCESS, or to NULL if no such property exists.
   WORKINGPROPS is optional: if present, use it to cache the WORKING
   properties of the file.

   Return the property value and property hash allocated in POOL.
*/</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>get_working_mimetype</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>mimetype</name></decl></param>,
                     <param><decl><type><name>apr_hash_t</name> **</type><name>workingprops</name></decl></param>,
                     <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>props</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>workingprops</name> == <name>NULL</name></expr>)</condition><then>
    <expr_stmt><expr><name>workingprops</name> = &amp;<name>props</name></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr>*<name>workingprops</name> == <name>NULL</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_prop_list</name><argument_list>(<argument><expr><name>workingprops</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <expr_stmt><expr>*<name>mimetype</name> = <call><name>get_prop_mimetype</name><argument_list>(<argument><expr>*<name>workingprops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Return the property hash resulting from combining PROPS and PROPCHANGES.
 *
 * A note on pool usage: The returned hash and hash keys are allocated in
 * the same pool as PROPS, but the hash values will be taken directly from
 * either PROPS or PROPCHANGES, as appropriate.  Caller must therefore
 * ensure that the returned hash is only used for as long as PROPS and
 * PROPCHANGES remain valid.
 */</comment>
<function><type><specifier>static</specifier> <name>apr_hash_t</name> *</type>
<name>apply_propchanges</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl></param>,
                  <param><decl><type><name>apr_array_header_t</name> *</type><name>propchanges</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>newprops</name> <init>= <expr><call><name>apr_hash_copy</name><argument_list>(<argument><expr><call><name>apr_hash_pool_get</name><argument_list>(<argument><expr><name>props</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>props</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>propchanges</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>svn_prop_t</name> *</type><name>prop</name> <init>= <expr>&amp;<call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>propchanges</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_prop_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>newprops</name></expr></argument>, <argument><expr><name><name>prop</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name><name>prop</name>-&gt;<name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

  <return>return <expr><name>newprops</name></expr>;</return>
}</block></function>


<comment type="block">/* Called by directory_elements_diff when a file is to be compared. At this
 * stage we are dealing with a file that does exist in the working copy.
 *
 * DIR_BATON is the parent directory baton, PATH is the path to the file to
 * be compared. ENTRY is the working copy entry for the file.
 *
 * Do all allocation in POOL.
 *
 * ### TODO: Need to work on replace if the new filename used to be a
 * directory.
 */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>file_diff</name><parameter_list>(<param><decl><type>struct <name>dir_baton</name> *</type><name>dir_baton</name></decl></param>,
          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
          <param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl></param>,
          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>dir_baton</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>textbase</name></decl>, *<decl><type ref="prev"/><name>empty_file</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>modified</name></decl>;</decl_stmt>
  <enum>enum <name>svn_wc_schedule_t</name> <name>schedule</name> <expr_stmt><expr>= <name><name>entry</name>-&gt;<name>schedule</name></name></expr>;</expr_stmt></enum>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>copied</name> <init>= <expr><name><name>entry</name>-&gt;<name>copied</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_mimetype</name></decl>, *<decl><type ref="prev"/><name>working_mimetype</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>translated</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>propchanges</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>baseprops</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>! <name><name>eb</name>-&gt;<name>use_text_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name><name>dir_baton</name>-&gt;<name>edit_baton</name>-&gt;<name>anchor</name></name></expr></argument>,
                              <argument><expr><name><name>dir_baton</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If the item is not a member of a specified changelist (and there are
     some specified changelists), skip it. */</comment>
  <if>if <condition>(<expr>! <call><name>SVN_WC__CL_MATCH</name><argument_list>(<argument><expr><name><name>dir_baton</name>-&gt;<name>edit_baton</name>-&gt;<name>changelist_hash</name></name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* If the item is schedule-add *with history*, then we don't want to
     see a comparison to the empty file;  we want the usual working
     vs. text-base comparision. */</comment>
  <if>if <condition>(<expr><name>copied</name></expr>)</condition><then>
    <expr_stmt><expr><name>schedule</name> = <name>svn_wc_schedule_normal</name></expr>;</expr_stmt></then></if>

  <comment type="block">/* If this was scheduled replace and we are ignoring ancestry,
     report it as a normal file modification. */</comment>
  <if>if <condition>(<expr><name><name>eb</name>-&gt;<name>ignore_ancestry</name></name> &amp;&amp; (<name>schedule</name> == <name>svn_wc_schedule_replace</name>)</expr>)</condition><then>
    <expr_stmt><expr><name>schedule</name> = <name>svn_wc_schedule_normal</name></expr>;</expr_stmt></then></if>

  <comment type="block">/* Prep these two paths early. */</comment>
  <expr_stmt><expr><name>textbase</name> = <call><name>svn_wc__text_base_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_empty_file</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr>&amp;<name>empty_file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get property diffs if this is not schedule delete. */</comment>
  <if>if <condition>(<expr><name>schedule</name> != <name>svn_wc_schedule_delete</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_props_modified_p</name><argument_list>(<argument><expr>&amp;<name>modified</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>modified</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_get_prop_diffs</name><argument_list>(<argument><expr>&amp;<name>propchanges</name></expr></argument>, <argument><expr>&amp;<name>baseprops</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
                                      <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
      <else>else
        <expr_stmt><expr><name>propchanges</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_prop_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    }</block></then>
  <else>else
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_get_prop_diffs</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>baseprops</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
                                    <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <switch>switch <condition>(<expr><name>schedule</name></expr>)</condition>
    <block>{
      <comment type="block">/* Replace is treated like a delete plus an add: two
         comparisons are generated, first one for the delete and
         then one for the add. */</comment>
    <case>case <expr><name>svn_wc_schedule_replace</name></expr>:
    </case><case>case <expr><name>svn_wc_schedule_delete</name></expr>:
      <comment type="block">/* Delete compares text-base against empty file, modifications to the
         working-copy version of the deleted file are not wanted. */</comment>

      <comment type="block">/* Get svn:mime-type from BASE props of PATH. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_base_mimetype</name><argument_list>(<argument><expr>&amp;<name>base_mimetype</name></expr></argument>, <argument><expr>&amp;<name>baseprops</name></expr></argument>,
                                <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>dir_baton</name>-&gt;<name>edit_baton</name>-&gt;<name>callbacks</name>-&gt;<name>file_deleted</name></name>
              <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
               <argument><expr><name>textbase</name></expr></argument>,
               <argument><expr><name>empty_file</name></expr></argument>,
               <argument><expr><name>base_mimetype</name></expr></argument>,
               <argument><expr><name>NULL</name></expr></argument>,
               <argument><expr><name>baseprops</name></expr></argument>,
               <argument><expr><name><name>dir_baton</name>-&gt;<name>edit_baton</name>-&gt;<name>callback_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Replace will fallthrough! */</comment>
      <if>if <condition>(<expr><name>schedule</name> == <name>svn_wc_schedule_delete</name></expr>)</condition><then>
        <break>break;</break></then></if>

    </case><case>case <expr><name>svn_wc_schedule_add</name></expr>:
      <comment type="block">/* Get svn:mime-type from working props of PATH. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_working_mimetype</name><argument_list>(<argument><expr>&amp;<name>working_mimetype</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                   <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_translated_file2</name>
              <argument_list>(<argument><expr>&amp;<name>translated</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
               <argument><expr><name>SVN_WC_TRANSLATE_TO_NF</name>
               | <name>SVN_WC_TRANSLATE_USE_GLOBAL_TMP</name></expr></argument>,
               <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>dir_baton</name>-&gt;<name>edit_baton</name>-&gt;<name>callbacks</name>-&gt;<name>file_added</name></name>
              <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
               <argument><expr><name>empty_file</name></expr></argument>,
               <argument><expr><name>translated</name></expr></argument>,
               <argument><expr>0</expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>revision</name></name></expr></argument>,
               <argument><expr><name>NULL</name></expr></argument>,
               <argument><expr><name>working_mimetype</name></expr></argument>,
               <argument><expr><name>propchanges</name></expr></argument>, <argument><expr><name>baseprops</name></expr></argument>,
               <argument><expr><name><name>dir_baton</name>-&gt;<name>edit_baton</name>-&gt;<name>callback_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <break>break;</break>

    </case><default>default:
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_text_modified_p</name><argument_list>(<argument><expr>&amp;<name>modified</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                                     <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>modified</name></expr>)</condition><then>
        <block>{
          <comment type="block">/* Note that this might be the _second_ time we translate
             the file, as svn_wc_text_modified_p() might have used a
             tmp translated copy too.  But what the heck, diff is
             already expensive, translating twice for the sake of code
             modularity is liveable. */</comment>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_translated_file2</name>
                  <argument_list>(<argument><expr>&amp;<name>translated</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
                   <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
                   <argument><expr><name>SVN_WC_TRANSLATE_TO_NF</name>
                   | <name>SVN_WC_TRANSLATE_USE_GLOBAL_TMP</name></expr></argument>,
                   <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

      <if>if <condition>(<expr><name>modified</name> || <name><name>propchanges</name>-&gt;<name>nelts</name></name> &gt; 0</expr>)</condition><then>
        <block>{
          <comment type="block">/* Get svn:mime-type for both base and working file. */</comment>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_base_mimetype</name><argument_list>(<argument><expr>&amp;<name>base_mimetype</name></expr></argument>, <argument><expr>&amp;<name>baseprops</name></expr></argument>,
                                    <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_working_mimetype</name><argument_list>(<argument><expr>&amp;<name>working_mimetype</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                       <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>dir_baton</name>-&gt;<name>edit_baton</name>-&gt;<name>callbacks</name>-&gt;<name>file_changed</name></name>
                  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                   <argument><expr><name>path</name></expr></argument>,
                   <argument><expr><name>modified</name> ? <name>textbase</name> : <name>NULL</name></expr></argument>,
                   <argument><expr><name>translated</name></expr></argument>,
                   <argument><expr><name><name>entry</name>-&gt;<name>revision</name></name></expr></argument>,
                   <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
                   <argument><expr><name>base_mimetype</name></expr></argument>,
                   <argument><expr><name>working_mimetype</name></expr></argument>,
                   <argument><expr><name>propchanges</name></expr></argument>, <argument><expr><name>baseprops</name></expr></argument>,
                   <argument><expr><name><name>dir_baton</name>-&gt;<name>edit_baton</name>-&gt;<name>callback_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    </default>}</block></switch>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Called when the directory is closed to compare any elements that have
 * not yet been compared.  This identifies local, working copy only
 * changes.  At this stage we are dealing with files/directories that do
 * exist in the working copy.
 *
 * DIR_BATON is the baton for the directory.
 */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>directory_elements_diff</name><parameter_list>(<param><decl><type>struct <name>dir_baton</name> *</type><name>dir_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>entries</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>this_dir_entry</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>in_anchor_not_target</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>

  <comment type="block">/* This directory should have been unchanged or replaced, not added,
     since an added directory can only contain added files and these will
     already have been compared. */</comment>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>!<name><name>dir_baton</name>-&gt;<name>added</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Everything we do below is useless if we are comparing to BASE. */</comment>
  <if>if <condition>(<expr><name><name>dir_baton</name>-&gt;<name>edit_baton</name>-&gt;<name>use_text_base</name></name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* Determine if this is the anchor directory if the anchor is different
     to the target. When the target is a file, the anchor is the parent
     directory and if this is that directory the non-target entries must be
     skipped. */</comment>
  <expr_stmt><expr><name>in_anchor_not_target</name> =
    (*<name><name>dir_baton</name>-&gt;<name>edit_baton</name>-&gt;<name>target</name></name>
     &amp;&amp; (! <call><name>svn_path_compare_paths</name>
         <argument_list>(<argument><expr><name><name>dir_baton</name>-&gt;<name>path</name></name></expr></argument>,
          <argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name><name>dir_baton</name>-&gt;<name>edit_baton</name>-&gt;<name>anchor</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>))</expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name><name>dir_baton</name>-&gt;<name>edit_baton</name>-&gt;<name>anchor</name></name></expr></argument>,
                              <argument><expr><name><name>dir_baton</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name><name>dir_baton</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entries_read</name><argument_list>(<argument><expr>&amp;<name>entries</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>dir_baton</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>this_dir_entry</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>SVN_WC_ENTRY_THIS_DIR</name></expr></argument>, 
                                <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check for local property mods on this directory, if we haven't
     already reported them and we aren't changelist-filted. */</comment>
  <if>if <condition>(<expr><call><name>SVN_WC__CL_MATCH</name><argument_list>(<argument><expr><name><name>dir_baton</name>-&gt;<name>edit_baton</name>-&gt;<name>changelist_hash</name></name></expr></argument>, <argument><expr><name>this_dir_entry</name></expr></argument>)</argument_list></call>
      &amp;&amp; (! <name>in_anchor_not_target</name>)
      &amp;&amp; (! <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>dir_baton</name>-&gt;<name>compared</name></name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>)</expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>modified</name></decl>;</decl_stmt>
      
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_props_modified_p</name><argument_list>(<argument><expr>&amp;<name>modified</name></expr></argument>,
                                      <argument><expr><name><name>dir_baton</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
                                      <argument><expr><name><name>dir_baton</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>modified</name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>propchanges</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>baseprops</name></decl>;</decl_stmt>

          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_get_prop_diffs</name><argument_list>(<argument><expr>&amp;<name>propchanges</name></expr></argument>, <argument><expr>&amp;<name>baseprops</name></expr></argument>,
                                        <argument><expr><name><name>dir_baton</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
                                        <argument><expr><name><name>dir_baton</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>dir_baton</name>-&gt;<name>edit_baton</name>-&gt;<name>callbacks</name>-&gt;<name>dir_props_changed</name></name>
                  <argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                   <argument><expr><name><name>dir_baton</name>-&gt;<name>path</name></name></expr></argument>,
                   <argument><expr><name>propchanges</name></expr></argument>, <argument><expr><name>baseprops</name></expr></argument>,
                   <argument><expr><name><name>dir_baton</name>-&gt;<name>edit_baton</name>-&gt;<name>callback_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

  <if>if <condition>(<expr><name><name>dir_baton</name>-&gt;<name>depth</name></name> == <name>svn_depth_empty</name> &amp;&amp; !<name>in_anchor_not_target</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name><name>dir_baton</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name><name>dir_baton</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition>
       <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
      <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>subdir_baton</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>, *<decl><type ref="prev"/><name>path</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>name</name> = <name>key</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>entry</name> = <name>val</name></expr>;</expr_stmt>

      <comment type="block">/* Skip entry for the directory itself. */</comment>
      <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>SVN_WC_ENTRY_THIS_DIR</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <continue>continue;</continue></then></if>

      <comment type="block">/* In the anchor directory, if the anchor is not the target then all
         entries other than the target should not be diff'd. Running diff
         on one file in a directory should not diff other files in that
         directory. */</comment>
      <if>if <condition>(<expr><name>in_anchor_not_target</name>
          &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>dir_baton</name>-&gt;<name>edit_baton</name>-&gt;<name>target</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <continue>continue;</continue></then></if>

      <expr_stmt><expr><name>path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>dir_baton</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Skip entry if it is in the list of entries already diff'd. */</comment>
      <if>if <condition>(<expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>dir_baton</name>-&gt;<name>compared</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <continue>continue;</continue></then></if>

      <switch>switch <condition>(<expr><name><name>entry</name>-&gt;<name>kind</name></name></expr>)</condition>
        <block>{
        <case>case <expr><name>svn_node_file</name></expr>:
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>file_diff</name><argument_list>(<argument><expr><name>dir_baton</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>

        </case><case>case <expr><name>svn_node_dir</name></expr>:
          <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>schedule</name></name> == <name>svn_wc_schedule_replace</name></expr>)</condition><then>
            <block>{
              <comment type="block">/* ### TODO: Don't know how to do this bit. How do I get
                 information about what is being replaced? If it was a
                 directory then the directory elements are also going to be
                 deleted. We need to show deletion diffs for these
                 files. If it was a file we need to show a deletion diff
                 for that file. */</comment>
            }</block></then></if>

          <comment type="block">/* Check the subdir if in the anchor (the subdir is the target), or
             if recursive */</comment>
          <if>if <condition>(<expr><name>in_anchor_not_target</name>
              || (<name><name>dir_baton</name>-&gt;<name>depth</name></name> &gt; <name>svn_depth_files</name>)
              || (<name><name>dir_baton</name>-&gt;<name>depth</name></name> == <name>svn_depth_unknown</name>)</expr>)</condition><then>
            <block>{
              <decl_stmt><decl><type><name>svn_depth_t</name></type> <name>depth_below_here</name> <init>= <expr><name><name>dir_baton</name>-&gt;<name>depth</name></name></expr></init></decl>;</decl_stmt>

              <if>if <condition>(<expr><name>depth_below_here</name> == <name>svn_depth_immediates</name></expr>)</condition><then>
                <expr_stmt><expr><name>depth_below_here</name> = <name>svn_depth_empty</name></expr>;</expr_stmt></then></if>

              <expr_stmt><expr><name>subdir_baton</name> = <call><name>make_dir_baton</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>dir_baton</name></expr></argument>,
                                            <argument><expr><name><name>dir_baton</name>-&gt;<name>edit_baton</name></name></expr></argument>,
                                            <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>depth_below_here</name></expr></argument>,
                                            <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

              <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>directory_elements_diff</name><argument_list>(<argument><expr><name>subdir_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
          <break>break;</break>

        </case><default>default:
          <break>break;</break>
        </default>}</block></switch>
    }</block></for>

  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Report an existing file in the working copy (either in BASE or WORKING)
 * as having been added.
 *
 * DIR_BATON is the parent directory baton, ADM_ACCESS/PATH is the path
 * to the file to be compared. ENTRY is the working copy entry for
 * the file.
 *
 * Do all allocation in POOL.
 */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>report_wc_file_as_added</name><parameter_list>(<param><decl><type>struct <name>dir_baton</name> *</type><name>dir_baton</name></decl></param>,
                        <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl></param>,
                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>dir_baton</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>emptyprops</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>wcprops</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>propchanges</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>empty_file</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>source_file</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>translated_file</name></decl>;</decl_stmt>

  <comment type="block">/* If this entry is filtered by changelist specification, do nothing. */</comment>
  <if>if <condition>(<expr>! <call><name>SVN_WC__CL_MATCH</name><argument_list>(<argument><expr><name><name>dir_baton</name>-&gt;<name>edit_baton</name>-&gt;<name>changelist_hash</name></name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_empty_file</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr>&amp;<name>empty_file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* We can't show additions for files that don't exist. */</comment>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>!(<name><name>entry</name>-&gt;<name>schedule</name></name> == <name>svn_wc_schedule_delete</name> &amp;&amp; !<name><name>eb</name>-&gt;<name>use_text_base</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If the file was added *with history*, then we don't want to
     see a comparison to the empty file;  we want the usual working
     vs. text-base comparision. */</comment>
  <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>copied</name></name></expr>)</condition><then>
    <block>{
      <comment type="block">/* Don't show anything if we're comparing to BASE, since by
         definition there can't be any local modifications. */</comment>
      <if>if <condition>(<expr><name><name>eb</name>-&gt;<name>use_text_base</name></name></expr>)</condition><then>
        <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

      <comment type="block">/* Otherwise show just the local modifications. */</comment>
      <return>return <expr><call><name>file_diff</name><argument_list>(<argument><expr><name>dir_baton</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

  <expr_stmt><expr><name>emptyprops</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name><name>eb</name>-&gt;<name>use_text_base</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_base_mimetype</name><argument_list>(<argument><expr>&amp;<name>mimetype</name></expr></argument>, <argument><expr>&amp;<name>wcprops</name></expr></argument>,
                              <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_working_mimetype</name><argument_list>(<argument><expr>&amp;<name>mimetype</name></expr></argument>, <argument><expr>&amp;<name>wcprops</name></expr></argument>,
                                 <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_prop_diffs</name><argument_list>(<argument><expr>&amp;<name>propchanges</name></expr></argument>,
                         <argument><expr><name>wcprops</name></expr></argument>, <argument><expr><name>emptyprops</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <if>if <condition>(<expr><name><name>eb</name>-&gt;<name>use_text_base</name></name></expr>)</condition><then>
    <expr_stmt><expr><name>source_file</name> = <call><name>svn_wc__text_base_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><name>source_file</name> = <name>path</name></expr>;</expr_stmt></else></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_translated_file2</name>
          <argument_list>(<argument><expr>&amp;<name>translated_file</name></expr></argument>,
           <argument><expr><name>source_file</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
           <argument><expr><name>SVN_WC_TRANSLATE_TO_NF</name>
           | <name>SVN_WC_TRANSLATE_USE_GLOBAL_TMP</name></expr></argument>,
           <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>eb</name>-&gt;<name>callbacks</name>-&gt;<name>file_added</name></name>
          <argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
           <argument><expr><name>path</name></expr></argument>,
           <argument><expr><name>empty_file</name></expr></argument>, <argument><expr><name>translated_file</name></expr></argument>,
           <argument><expr>0</expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>revision</name></name></expr></argument>,
           <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>mimetype</name></expr></argument>,
           <argument><expr><name>propchanges</name></expr></argument>, <argument><expr><name>emptyprops</name></expr></argument>,
           <argument><expr><name><name>eb</name>-&gt;<name>callback_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Report an existing directory in the working copy (either in BASE
 * or WORKING) as having been added.  If recursing, also report any
 * subdirectories as added.
 *
 * DIR_BATON is the baton for the directory.
 *
 * Do all allocation in POOL.
 */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>report_wc_directory_as_added</name><parameter_list>(<param><decl><type>struct <name>dir_baton</name> *</type><name>dir_baton</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>dir_baton</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>emptyprops</name> <init>= <expr><call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init>, *<name>wcprops</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>this_dir_entry</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>propchanges</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>entries</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>anchor</name></name></expr></argument>,
                              <argument><expr><name><name>dir_baton</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entries_read</name><argument_list>(<argument><expr>&amp;<name>entries</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>this_dir_entry</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>SVN_WC_ENTRY_THIS_DIR</name></expr></argument>, 
                                <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If this directory passes changelist filtering, get its BASE or
     WORKING properties, as appropriate, and simulate their
     addition. */</comment>
  <if>if <condition>(<expr><call><name>SVN_WC__CL_MATCH</name><argument_list>(<argument><expr><name><name>dir_baton</name>-&gt;<name>edit_baton</name>-&gt;<name>changelist_hash</name></name></expr></argument>, <argument><expr><name>this_dir_entry</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><name><name>eb</name>-&gt;<name>use_text_base</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_get_prop_diffs</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>wcprops</name></expr></argument>,
                                      <argument><expr><name><name>dir_baton</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
      <else>else
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_prop_list</name><argument_list>(<argument><expr>&amp;<name>wcprops</name></expr></argument>,
                                 <argument><expr><name><name>dir_baton</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
      
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_prop_diffs</name><argument_list>(<argument><expr>&amp;<name>propchanges</name></expr></argument>,
                             <argument><expr><name>wcprops</name></expr></argument>, <argument><expr><name>emptyprops</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <if>if <condition>(<expr><name><name>propchanges</name>-&gt;<name>nelts</name></name> &gt; 0</expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>eb</name>-&gt;<name>callbacks</name>-&gt;<name>dir_props_changed</name></name>
                <argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                 <argument><expr><name><name>dir_baton</name>-&gt;<name>path</name></name></expr></argument>,
                 <argument><expr><name>propchanges</name></expr></argument>, <argument><expr><name>emptyprops</name></expr></argument>,
                 <argument><expr><name><name>eb</name>-&gt;<name>callback_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></then></if>

  <comment type="block">/* Report the addition of the directory's contents. */</comment>
  <expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition>
       <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>, *<decl><type ref="prev"/><name>path</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>name</name> = <name>key</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>entry</name> = <name>val</name></expr>;</expr_stmt>

      <comment type="block">/* Skip entry for the directory itself. */</comment>
      <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>SVN_WC_ENTRY_THIS_DIR</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <continue>continue;</continue></then></if>

      <comment type="block">/* If comparing against WORKING, skip entries that are
         schedule-deleted - they don't really exist. */</comment>
      <if>if <condition>(<expr>!<name><name>eb</name>-&gt;<name>use_text_base</name></name> &amp;&amp; <name><name>entry</name>-&gt;<name>schedule</name></name> == <name>svn_wc_schedule_delete</name></expr>)</condition><then>
        <continue>continue;</continue></then></if>

      <expr_stmt><expr><name>path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>dir_baton</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <switch>switch <condition>(<expr><name><name>entry</name>-&gt;<name>kind</name></name></expr>)</condition>
        <block>{
        <case>case <expr><name>svn_node_file</name></expr>:
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>report_wc_file_as_added</name><argument_list>(<argument><expr><name>dir_baton</name></expr></argument>,
                                          <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>

        </case><case>case <expr><name>svn_node_dir</name></expr>:
          <if>if <condition>(<expr><name><name>dir_baton</name>-&gt;<name>depth</name></name> &gt; <name>svn_depth_files</name>
              || <name><name>dir_baton</name>-&gt;<name>depth</name></name> == <name>svn_depth_unknown</name></expr>)</condition><then>
            <block>{
              <decl_stmt><decl><type><name>svn_depth_t</name></type> <name>depth_below_here</name> <init>= <expr><name><name>dir_baton</name>-&gt;<name>depth</name></name></expr></init></decl>;</decl_stmt>
              <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>subdir_baton</name></decl>;</decl_stmt>

              <if>if <condition>(<expr><name>depth_below_here</name> == <name>svn_depth_immediates</name></expr>)</condition><then>
                <expr_stmt><expr><name>depth_below_here</name> = <name>svn_depth_empty</name></expr>;</expr_stmt></then></if>

              <expr_stmt><expr><name>subdir_baton</name> = <call><name>make_dir_baton</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>dir_baton</name></expr></argument>, <argument><expr><name>eb</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                                            <argument><expr><name>depth_below_here</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

              <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>report_wc_directory_as_added</name><argument_list>(<argument><expr><name>subdir_baton</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
          <break>break;</break>

        </case><default>default:
          <break>break;</break>
        </default>}</block></switch>
    }</block></for>

  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* An editor function. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>set_target_revision</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
                    <param><decl><type><name>svn_revnum_t</name></type> <name>target_revision</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>eb</name>-&gt;<name>revnum</name></name> = <name>target_revision</name></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* An editor function. The root of the comparison hierarchy */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>open_root</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
          <param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
          <param><decl><type><name>apr_pool_t</name> *</type><name>dir_pool</name></decl></param>,
          <param><decl><type><name>void</name> **</type><name>root_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>b</name></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>eb</name>-&gt;<name>root_opened</name></name> = <name>TRUE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>b</name> = <call><name>make_dir_baton</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>anchor_path</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>eb</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>depth</name></name></expr></argument>, <argument><expr><name>dir_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>root_baton</name> = <name>b</name></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* An editor function. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>delete_entry</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
             <param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
             <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>pb</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>b</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>empty_file</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>full_path</name> <init>= <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>pb</name>-&gt;<name>edit_baton</name>-&gt;<name>anchor_path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
                                        <argument><expr><name><name>pb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_probe_retrieve</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name><name>pb</name>-&gt;<name>edit_baton</name>-&gt;<name>anchor</name></name></expr></argument>,
                                    <argument><expr><name>full_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name>full_path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* So, it turns out that this can be NULL in at least one actual case,
     if you do a nonrecursive checkout and the diff involves the addition
     of one of the directories that is not present due to the fact that
     your checkout is nonrecursive.  There isn't really a good way to be
     sure though, since nonrecursive checkouts suck, and don't leave any
     indication in .svn/entries that the directories in question are just
     missing. */</comment>
  <if>if <condition>(<expr>! <name>entry</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* Mark this entry as compared in the parent directory's baton. */</comment>
  <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>pb</name>-&gt;<name>compared</name></name></expr></argument>, <argument><expr><name>full_path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If comparing against WORKING, skip entries that are schedule-deleted
     - they don't really exist. */</comment>
  <if>if <condition>(<expr>!<name><name>eb</name>-&gt;<name>use_text_base</name></name> &amp;&amp; <name><name>entry</name>-&gt;<name>schedule</name></name> == <name>svn_wc_schedule_delete</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_empty_file</name><argument_list>(<argument><expr><name><name>pb</name>-&gt;<name>edit_baton</name></name></expr></argument>, <argument><expr>&amp;<name>empty_file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <switch>switch <condition>(<expr><name><name>entry</name>-&gt;<name>kind</name></name></expr>)</condition>
    <block>{
    <case>case <expr><name>svn_node_file</name></expr>:
      <comment type="block">/* A delete is required to change working-copy into requested
         revision, so diff should show this as an add. Thus compare
         the empty file against the current working copy.  If
         'reverse_order' is set, then show a deletion. */</comment>

      <if>if <condition>(<expr><name><name>eb</name>-&gt;<name>reverse_order</name></name></expr>)</condition><then>
        <block>{
          <comment type="block">/* Whenever showing a deletion, we show the text-base vanishing. */</comment>
          <comment type="block">/* ### This is wrong if we're diffing WORKING-&gt;repos. */</comment>
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>textbase</name> <init>= <expr><call><name>svn_wc__text_base_path</name><argument_list>(<argument><expr><name>full_path</name></expr></argument>,
                                                        <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>baseprops</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_mimetype</name></decl>;</decl_stmt>

          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_base_mimetype</name><argument_list>(<argument><expr>&amp;<name>base_mimetype</name></expr></argument>, <argument><expr>&amp;<name>baseprops</name></expr></argument>,
                                    <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>full_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>pb</name>-&gt;<name>edit_baton</name>-&gt;<name>callbacks</name>-&gt;<name>file_deleted</name></name>
                  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>full_path</name></expr></argument>,
                   <argument><expr><name>textbase</name></expr></argument>,
                   <argument><expr><name>empty_file</name></expr></argument>,
                   <argument><expr><name>base_mimetype</name></expr></argument>,
                   <argument><expr><name>NULL</name></expr></argument>,
                   <argument><expr><name>baseprops</name></expr></argument>,
                   <argument><expr><name><name>pb</name>-&gt;<name>edit_baton</name>-&gt;<name>callback_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else
        <block>{
          <comment type="block">/* Or normally, show the working file being added. */</comment>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>report_wc_file_as_added</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>full_path</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>,
                                          <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
      <break>break;</break>

    </case><case>case <expr><name>svn_node_dir</name></expr>:
      <expr_stmt><expr><name>b</name> = <call><name>make_dir_baton</name><argument_list>(<argument><expr><name>full_path</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>pb</name>-&gt;<name>edit_baton</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                         <argument><expr><name>svn_depth_infinity</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* A delete is required to change working-copy into requested
         revision, so diff should show this as an add. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>report_wc_directory_as_added</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    </case><default>default:
      <break>break;</break>
    </default>}</block></switch>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* An editor function. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>add_directory</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
              <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl></param>,
              <param><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_revision</name></decl></param>,
              <param><decl><type><name>apr_pool_t</name> *</type><name>dir_pool</name></decl></param>,
              <param><decl><type><name>void</name> **</type><name>child_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>b</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>full_path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_depth_t</name></type> <name>subdir_depth</name> <init>= <expr>(<name><name>pb</name>-&gt;<name>depth</name></name> == <name>svn_depth_immediates</name>)
                              ? <name>svn_depth_empty</name> : <name><name>pb</name>-&gt;<name>depth</name></name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* ### TODO: support copyfrom? */</comment>

  <expr_stmt><expr><name>full_path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>pb</name>-&gt;<name>edit_baton</name>-&gt;<name>anchor_path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>dir_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>b</name> = <call><name>make_dir_baton</name><argument_list>(<argument><expr><name>full_path</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>pb</name>-&gt;<name>edit_baton</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
                     <argument><expr><name>subdir_depth</name></expr></argument>, <argument><expr><name>dir_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>child_baton</name> = <name>b</name></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* An editor function. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>open_directory</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
               <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
               <param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
               <param><decl><type><name>apr_pool_t</name> *</type><name>dir_pool</name></decl></param>,
               <param><decl><type><name>void</name> **</type><name>child_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>b</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>full_path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_depth_t</name></type> <name>subdir_depth</name> <init>= <expr>(<name><name>pb</name>-&gt;<name>depth</name></name> == <name>svn_depth_immediates</name>)
                              ? <name>svn_depth_empty</name> : <name><name>pb</name>-&gt;<name>depth</name></name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Allocate path from the parent pool since the memory is used in the
     parent's compared hash */</comment>
  <expr_stmt><expr><name>full_path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>pb</name>-&gt;<name>edit_baton</name>-&gt;<name>anchor_path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>pb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>b</name> = <call><name>make_dir_baton</name><argument_list>(<argument><expr><name>full_path</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>pb</name>-&gt;<name>edit_baton</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                     <argument><expr><name>subdir_depth</name></expr></argument>, <argument><expr><name>dir_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>child_baton</name> = <name>b</name></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* An editor function.  When a directory is closed, all the directory
 * elements that have been added or replaced will already have been
 * diff'd. However there may be other elements in the working copy
 * that have not yet been considered.  */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>close_directory</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>dir_baton</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>b</name> <init>= <expr><name>dir_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>pb</name> <init>= <expr><name><name>b</name>-&gt;<name>dir_baton</name></name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Report the property changes on the directory itself, if necessary. */</comment>
  <if>if <condition>(<expr><name><name>b</name>-&gt;<name>propchanges</name>-&gt;<name>nelts</name></name> &gt; 0</expr>)</condition><then>
    <block>{
      <comment type="block">/* The working copy properties at the base of the wc-&gt;repos comparison:
         either BASE or WORKING. */</comment>
      <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>originalprops</name></decl>;</decl_stmt>

      <if>if <condition>(<expr><name><name>b</name>-&gt;<name>added</name></name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>originalprops</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else
        <block>{
          <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>

          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>,
                                      <argument><expr><name><name>b</name>-&gt;<name>edit_baton</name>-&gt;<name>anchor</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>path</name></name></expr></argument>,
                                      <argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <if>if <condition>(<expr><name><name>b</name>-&gt;<name>edit_baton</name>-&gt;<name>use_text_base</name></name></expr>)</condition><then>
            <block>{
              <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_get_prop_diffs</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>originalprops</name></expr></argument>,
                                            <argument><expr><name><name>b</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
          <else>else
            <block>{
              <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>base_props</name></decl>, *<decl><type ref="prev"/><name>repos_props</name></decl>;</decl_stmt>

              <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_prop_list</name><argument_list>(<argument><expr>&amp;<name>originalprops</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>path</name></name></expr></argument>,
                                       <argument><expr><name><name>b</name>-&gt;<name>edit_baton</name>-&gt;<name>anchor</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

              <comment type="block">/* Load the BASE and repository directory properties. */</comment>
              <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_get_prop_diffs</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>base_props</name></expr></argument>,
                                            <argument><expr><name><name>b</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

              <expr_stmt><expr><name>repos_props</name> = <call><name>apply_propchanges</name><argument_list>(<argument><expr><name>base_props</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>propchanges</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

              <comment type="block">/* Recalculate b-&gt;propchanges as the change between WORKING
                 and repos. */</comment>
              <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_prop_diffs</name><argument_list>(<argument><expr>&amp;<name><name>b</name>-&gt;<name>propchanges</name></name></expr></argument>,
                                     <argument><expr><name>repos_props</name></expr></argument>, <argument><expr><name>originalprops</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></else></if>

      <if>if <condition>(<expr>! <name><name>b</name>-&gt;<name>edit_baton</name>-&gt;<name>reverse_order</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>reverse_propchanges</name><argument_list>(<argument><expr><name>originalprops</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>propchanges</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>b</name>-&gt;<name>edit_baton</name>-&gt;<name>callbacks</name>-&gt;<name>dir_props_changed</name></name>
              <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
               <argument><expr><name><name>b</name>-&gt;<name>path</name></name></expr></argument>,
               <argument><expr><name><name>b</name>-&gt;<name>propchanges</name></name></expr></argument>,
               <argument><expr><name>originalprops</name></expr></argument>,
               <argument><expr><name><name>b</name>-&gt;<name>edit_baton</name>-&gt;<name>callback_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Mark the properties of this directory as having already been
         compared so that we know not to show any local modifications
         later on. */</comment>
      <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>compared</name></name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <comment type="block">/* Report local modifications for this directory.  Skip added
     directories since they can only contain added elements, all of
     which have already been diff'd. */</comment>
  <if>if <condition>(<expr>!<name><name>b</name>-&gt;<name>added</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>directory_elements_diff</name><argument_list>(<argument><expr><name>dir_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <comment type="block">/* Mark this directory as compared in the parent directory's baton,
     unless this is the root of the comparison. */</comment>
  <if>if <condition>(<expr><name>pb</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>pb</name>-&gt;<name>compared</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* An editor function. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>add_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
         <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl></param>,
         <param><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_revision</name></decl></param>,
         <param><decl><type><name>apr_pool_t</name> *</type><name>file_pool</name></decl></param>,
         <param><decl><type><name>void</name> **</type><name>file_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>b</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>full_path</name></decl>;</decl_stmt>

  <comment type="block">/* ### TODO: support copyfrom? */</comment>

  <expr_stmt><expr><name>full_path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>pb</name>-&gt;<name>edit_baton</name>-&gt;<name>anchor_path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>file_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>b</name> = <call><name>make_file_baton</name><argument_list>(<argument><expr><name>full_path</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>file_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>file_baton</name> = <name>b</name></expr>;</expr_stmt>

  <comment type="block">/* Add this filename to the parent directory's list of elements that
     have been compared. */</comment>
  <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>pb</name>-&gt;<name>compared</name></name></expr></argument>, <argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>pb</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>full_path</name></expr></argument>)</argument_list></call></expr></argument>,
               <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* An editor function. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>open_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
          <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
          <param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
          <param><decl><type><name>apr_pool_t</name> *</type><name>file_pool</name></decl></param>,
          <param><decl><type><name>void</name> **</type><name>file_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>b</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>full_path</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>full_path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>pb</name>-&gt;<name>edit_baton</name>-&gt;<name>anchor_path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>file_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>b</name> = <call><name>make_file_baton</name><argument_list>(<argument><expr><name>full_path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>file_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>file_baton</name> = <name>b</name></expr>;</expr_stmt>

  <comment type="block">/* Add this filename to the parent directory's list of elements that
     have been compared. */</comment>
  <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>pb</name>-&gt;<name>compared</name></name></expr></argument>, <argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>pb</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>full_path</name></expr></argument>)</argument_list></call></expr></argument>,
               <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Do the work of applying the text delta. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>window_handler</name><parameter_list>(<param><decl><type><name>svn_txdelta_window_t</name> *</type><name>window</name></decl></param>,
               <param><decl><type><name>void</name> *</type><name>window_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>b</name> <init>= <expr><name>window_baton</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>b</name>-&gt;<name>apply_handler</name></name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>apply_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>!<name>window</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_close</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>temp_file</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name><name>b</name>-&gt;<name>added</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_close</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>original_file</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
      <else>else
        <block>{
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__close_text_base</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>original_file</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr>0</expr></argument>,
                                          <argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* An editor function. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>apply_textdelta</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_checksum</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                <param><decl><type><name>svn_txdelta_window_handler_t</name> *</type><name>handler</name></decl></param>,
                <param><decl><type><name>void</name> **</type><name>handler_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>b</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>b</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>parent</name></decl>, *<decl><type ref="prev"/><name>base_name</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>wc_path</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>anchor</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>svn_path_split</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>wc_path</name></name></expr></argument>, <argument><expr>&amp;<name>parent</name></expr></argument>, <argument><expr>&amp;<name>base_name</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check to see if there is a schedule-add with history entry in
     the current working copy.  If so, then this is not actually
     an add, but instead a modification.*/</comment>
  <if>if <condition>(<expr><name>entry</name> &amp;&amp; <name><name>entry</name>-&gt;<name>copyfrom_url</name></name></expr>)</condition><then>
    <expr_stmt><expr><name><name>b</name>-&gt;<name>added</name></name> = <name>FALSE</name></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr><name><name>b</name>-&gt;<name>added</name></name></expr>)</condition><then>
    <block>{
      <comment type="block">/* An empty file is the starting point if the file is being added */</comment>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>empty_file</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_empty_file</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr>&amp;<name>empty_file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_open</name><argument_list>(<argument><expr>&amp;<name><name>b</name>-&gt;<name>original_file</name></name></expr></argument>, <argument><expr><name>empty_file</name></expr></argument>,
                               <argument><expr><name>APR_READ</name></expr></argument>, <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <comment type="block">/* The current text-base is the starting point if replacing */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__open_text_base</name><argument_list>(<argument><expr>&amp;<name><name>b</name>-&gt;<name>original_file</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>path</name></name></expr></argument>,
                                     <argument><expr><name>APR_READ</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <comment type="block">/* This is the file that will contain the pristine repository version. It
     is created in the admin temporary area. This file continues to exists
     until after the diff callback is run, at which point it is deleted. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_create_tmp_file2</name><argument_list>(<argument><expr>&amp;<name><name>b</name>-&gt;<name>temp_file</name></name></expr></argument>, <argument><expr>&amp;<name><name>b</name>-&gt;<name>temp_file_path</name></name></expr></argument>,
                                  <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>svn_io_file_del_on_pool_cleanup</name></expr></argument>,
                                  <argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>svn_txdelta_apply</name><argument_list>(<argument><expr><call><name>svn_stream_from_aprfile</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>original_file</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name>svn_stream_from_aprfile</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>temp_file</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><name>NULL</name></expr></argument>,
                    <argument><expr><name><name>b</name>-&gt;<name>temp_file_path</name></name></expr></argument>,
                    <argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>,
                    <argument><expr>&amp;<name><name>b</name>-&gt;<name>apply_handler</name></name></expr></argument>, <argument><expr>&amp;<name><name>b</name>-&gt;<name>apply_baton</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>handler</name> = <name>window_handler</name></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>handler_baton</name> = <name>file_baton</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* An editor function.  When the file is closed we have a temporary
 * file containing a pristine version of the repository file. This can
 * be compared against the working copy.
 *
 * Ignore TEXT_CHECKSUM.
 */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>close_file</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>text_checksum</name></decl></param>,
           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>b</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>b</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_mimetype</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>empty_file</name></decl>;</decl_stmt>

  <comment type="block">/* The BASE and repository properties of the file. */</comment>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>base_props</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>repos_props</name></decl>;</decl_stmt>

  <comment type="block">/* The path to the wc file: either BASE or WORKING. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>localfile</name></decl>;</decl_stmt>
  <comment type="block">/* The path to the temporary copy of the pristine repository version. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>temp_file_path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>modified</name></decl>;</decl_stmt>
  <comment type="block">/* The working copy properties at the base of the wc-&gt;repos
     comparison: either BASE or WORKING. */</comment>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>originalprops</name></decl>;</decl_stmt>


  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_probe_retrieve</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>edit_baton</name>-&gt;<name>anchor</name></name></expr></argument>,
                                    <argument><expr><name><name>b</name>-&gt;<name>wc_path</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>wc_path</name></name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_empty_file</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>edit_baton</name></name></expr></argument>, <argument><expr>&amp;<name>empty_file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="block">/* Load the BASE and repository file properties. */</comment>
  <if>if <condition>(<expr><name><name>b</name>-&gt;<name>added</name></name></expr>)</condition><then>
    <expr_stmt><expr><name>base_props</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_get_prop_diffs</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>base_props</name></expr></argument>,
                                  <argument><expr><name><name>b</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

  <expr_stmt><expr><name>repos_props</name> = <call><name>apply_propchanges</name><argument_list>(<argument><expr><name>base_props</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>propchanges</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>repos_mimetype</name> = <call><name>get_prop_mimetype</name><argument_list>(<argument><expr><name>repos_props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="block">/* The repository version of the file is in the temp file we applied
     the BASE-&gt;repos delta to.  If we haven't seen any changes, it's
     the same as BASE. */</comment>
  <expr_stmt><expr><name>temp_file_path</name> = <name><name>b</name>-&gt;<name>temp_file_path</name></name></expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>temp_file_path</name></expr>)</condition><then>
    <expr_stmt><expr><name>temp_file_path</name> = <call><name>svn_wc__text_base_path</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>


  <comment type="block">/* If the file isn't in the working copy (either because it was added
     in the BASE-&gt;repos diff or because we're diffing against WORKING
     and it was marked as schedule-deleted), we show either an addition
     or a deletion of the complete contents of the repository file,
     depending upon the direction of the diff. */</comment>
  <if>if <condition>(<expr><name><name>b</name>-&gt;<name>added</name></name> ||
      (!<name><name>eb</name>-&gt;<name>use_text_base</name></name> &amp;&amp; <name><name>entry</name>-&gt;<name>schedule</name></name> == <name>svn_wc_schedule_delete</name>)</expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><name><name>eb</name>-&gt;<name>reverse_order</name></name></expr>)</condition><then>
        <return>return <expr><call><name><name>b</name>-&gt;<name>edit_baton</name>-&gt;<name>callbacks</name>-&gt;<name>file_added</name></name>
                <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>path</name></name></expr></argument>,
                 <argument><expr><name>empty_file</name></expr></argument>,
                 <argument><expr><name>temp_file_path</name></expr></argument>,
                 <argument><expr>0</expr></argument>,
                 <argument><expr><name><name>eb</name>-&gt;<name>revnum</name></name></expr></argument>,
                 <argument><expr><name>NULL</name></expr></argument>,
                 <argument><expr><name>repos_mimetype</name></expr></argument>,
                 <argument><expr><name><name>b</name>-&gt;<name>propchanges</name></name></expr></argument>,
                 <argument><expr><call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
                 <argument><expr><name><name>b</name>-&gt;<name>edit_baton</name>-&gt;<name>callback_baton</name></name></expr></argument>)</argument_list></call></expr>;</return></then>
      <else>else
          <return>return <expr><call><name><name>b</name>-&gt;<name>edit_baton</name>-&gt;<name>callbacks</name>-&gt;<name>file_deleted</name></name>
                  <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>path</name></name></expr></argument>,
                   <argument><expr><name>temp_file_path</name></expr></argument>,
                   <argument><expr><name>empty_file</name></expr></argument>,
                   <argument><expr><name>repos_mimetype</name></expr></argument>,
                   <argument><expr><name>NULL</name></expr></argument>,
                   <argument><expr><name>repos_props</name></expr></argument>,
                   <argument><expr><name><name>b</name>-&gt;<name>edit_baton</name>-&gt;<name>callback_baton</name></name></expr></argument>)</argument_list></call></expr>;</return></else></if>
    }</block></then></if>

  <comment type="block">/* If we didn't see any content changes between the BASE and repository
     versions (i.e. we only saw property changes), then, if we're diffing
     against WORKING, we also need to check whether there are any local
     (BASE:WORKING) modifications. */</comment>
  <expr_stmt><expr><name>modified</name> = (<name><name>b</name>-&gt;<name>temp_file_path</name></name> != <name>NULL</name>)</expr>;</expr_stmt>
  <if>if <condition>(<expr>!<name>modified</name> &amp;&amp; !<name><name>eb</name>-&gt;<name>use_text_base</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_text_modified_p</name><argument_list>(<argument><expr>&amp;<name>modified</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                                   <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr><name>modified</name></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><name><name>eb</name>-&gt;<name>use_text_base</name></name></expr>)</condition><then>
        <expr_stmt><expr><name>localfile</name> = <call><name>svn_wc__text_base_path</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
      <else>else
        <comment type="block">/* a detranslated version of the working file */</comment>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_translated_file2</name>
                <argument_list>(<argument><expr>&amp;<name>localfile</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>path</name></name></expr></argument>,
                 <argument><expr><name><name>b</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
                 <argument><expr><name>SVN_WC_TRANSLATE_TO_NF</name>
                 | <name>SVN_WC_TRANSLATE_USE_GLOBAL_TMP</name></expr></argument>,
                 <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    }</block></then>
  <else>else
    <expr_stmt><expr><name>localfile</name> = <name>temp_file_path</name> = <name>NULL</name></expr>;</expr_stmt></else></if>

  <if>if <condition>(<expr><name><name>eb</name>-&gt;<name>use_text_base</name></name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>originalprops</name> = <name>base_props</name></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_prop_list</name><argument_list>(<argument><expr>&amp;<name>originalprops</name></expr></argument>,
                               <argument><expr><name><name>b</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* We have the repository properties in repos_props, and the
         WORKING properties in originalprops.  Recalculate
         b-&gt;propchanges as the change between WORKING and repos. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_prop_diffs</name><argument_list>(<argument><expr>&amp;<name><name>b</name>-&gt;<name>propchanges</name></name></expr></argument>,
                             <argument><expr><name>repos_props</name></expr></argument>, <argument><expr><name>originalprops</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <if>if <condition>(<expr><name>localfile</name> || <name><name>b</name>-&gt;<name>propchanges</name>-&gt;<name>nelts</name></name> &gt; 0</expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>original_mimetype</name> <init>= <expr><call><name>get_prop_mimetype</name><argument_list>(<argument><expr><name>originalprops</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name><name>b</name>-&gt;<name>propchanges</name>-&gt;<name>nelts</name></name> &gt; 0
          &amp;&amp; ! <name><name>eb</name>-&gt;<name>reverse_order</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>reverse_propchanges</name><argument_list>(<argument><expr><name>originalprops</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>propchanges</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>b</name>-&gt;<name>edit_baton</name>-&gt;<name>callbacks</name>-&gt;<name>file_changed</name></name>
              <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
               <argument><expr><name><name>b</name>-&gt;<name>path</name></name></expr></argument>,
               <argument><expr><name><name>eb</name>-&gt;<name>reverse_order</name></name> ? <name>localfile</name> : <name>temp_file_path</name></expr></argument>,
               <argument><expr><name><name>eb</name>-&gt;<name>reverse_order</name></name> ? <name>temp_file_path</name> : <name>localfile</name></expr></argument>,
               <argument><expr><name><name>eb</name>-&gt;<name>reverse_order</name></name> ? <name>SVN_INVALID_REVNUM</name> : <name><name>b</name>-&gt;<name>edit_baton</name>-&gt;<name>revnum</name></name></expr></argument>,
               <argument><expr><name><name>eb</name>-&gt;<name>reverse_order</name></name> ? <name><name>b</name>-&gt;<name>edit_baton</name>-&gt;<name>revnum</name></name> : <name>SVN_INVALID_REVNUM</name></expr></argument>,
               <argument><expr><name><name>eb</name>-&gt;<name>reverse_order</name></name> ? <name>original_mimetype</name> : <name>repos_mimetype</name></expr></argument>,
               <argument><expr><name><name>eb</name>-&gt;<name>reverse_order</name></name> ? <name>repos_mimetype</name> : <name>original_mimetype</name></expr></argument>,
               <argument><expr><name><name>b</name>-&gt;<name>propchanges</name></name></expr></argument>, <argument><expr><name>originalprops</name></expr></argument>,
               <argument><expr><name><name>b</name>-&gt;<name>edit_baton</name>-&gt;<name>callback_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* An editor function. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>change_file_prop</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>b</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_prop_t</name> *</type><name>propchange</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>propchange</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>propchanges</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>propchange</name>-&gt;<name>name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>propchange</name>-&gt;<name>value</name></name> = <name>value</name> ? <call><name>svn_string_dup</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* An editor function. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>change_dir_prop</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>dir_baton</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>db</name> <init>= <expr><name>dir_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_prop_t</name> *</type><name>propchange</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>propchange</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>propchanges</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>propchange</name>-&gt;<name>name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>propchange</name>-&gt;<name>value</name></name> = <name>value</name> ? <call><name>svn_string_dup</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* An editor function. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>close_edit</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr>!<name><name>eb</name>-&gt;<name>root_opened</name></name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>b</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>b</name> = <call><name>make_dir_baton</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>anchor_path</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>eb</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                         <argument><expr><name><name>eb</name>-&gt;<name>depth</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>directory_elements_diff</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* An svn_wc_diff_callbacks2_t function. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>file_changed</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
             <param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>contentstate</name></decl></param>,
             <param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>propstate</name></decl></param>,
             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmpfile1</name></decl></param>,
             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmpfile2</name></decl></param>,
             <param><decl><type><name>svn_revnum_t</name></type> <name>rev1</name></decl></param>,
             <param><decl><type><name>svn_revnum_t</name></type> <name>rev2</name></decl></param>,
             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype1</name></decl></param>,
             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype2</name></decl></param>,
             <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>propchanges</name></decl></param>,
             <param><decl><type><name>apr_hash_t</name> *</type><name>originalprops</name></decl></param>,
             <param><decl><type><name>void</name> *</type><name>diff_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>callbacks_wrapper_baton</name> *</type><name>b</name> <init>= <expr><name>diff_baton</name></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>tmpfile2</name> != <name>NULL</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>b</name>-&gt;<name>callbacks</name>-&gt;<name>file_changed</name></name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>contentstate</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
                                       <argument><expr><name>tmpfile1</name></expr></argument>, <argument><expr><name>tmpfile2</name></expr></argument>,
                                       <argument><expr><name>rev1</name></expr></argument>, <argument><expr><name>rev2</name></expr></argument>, <argument><expr><name>mimetype1</name></expr></argument>, <argument><expr><name>mimetype2</name></expr></argument>,
                                       <argument><expr><name><name>b</name>-&gt;<name>baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <if>if <condition>(<expr><name><name>propchanges</name>-&gt;<name>nelts</name></name> &gt; 0</expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>b</name>-&gt;<name>callbacks</name>-&gt;<name>props_changed</name></name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>propstate</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
                                        <argument><expr><name>propchanges</name></expr></argument>, <argument><expr><name>originalprops</name></expr></argument>,
                                        <argument><expr><name><name>b</name>-&gt;<name>baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* An svn_wc_diff_callbacks2_t function. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>file_added</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
           <param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>contentstate</name></decl></param>,
           <param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>propstate</name></decl></param>,
           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmpfile1</name></decl></param>,
           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmpfile2</name></decl></param>,
           <param><decl><type><name>svn_revnum_t</name></type> <name>rev1</name></decl></param>,
           <param><decl><type><name>svn_revnum_t</name></type> <name>rev2</name></decl></param>,
           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype1</name></decl></param>,
           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype2</name></decl></param>,
           <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>propchanges</name></decl></param>,
           <param><decl><type><name>apr_hash_t</name> *</type><name>originalprops</name></decl></param>,
           <param><decl><type><name>void</name> *</type><name>diff_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>callbacks_wrapper_baton</name> *</type><name>b</name> <init>= <expr><name>diff_baton</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>b</name>-&gt;<name>callbacks</name>-&gt;<name>file_added</name></name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>contentstate</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
                                   <argument><expr><name>tmpfile1</name></expr></argument>, <argument><expr><name>tmpfile2</name></expr></argument>, <argument><expr><name>rev1</name></expr></argument>, <argument><expr><name>rev2</name></expr></argument>,
                                   <argument><expr><name>mimetype1</name></expr></argument>, <argument><expr><name>mimetype2</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name><name>propchanges</name>-&gt;<name>nelts</name></name> &gt; 0</expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>b</name>-&gt;<name>callbacks</name>-&gt;<name>props_changed</name></name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>propstate</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
                                        <argument><expr><name>propchanges</name></expr></argument>, <argument><expr><name>originalprops</name></expr></argument>,
                                        <argument><expr><name><name>b</name>-&gt;<name>baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* An svn_wc_diff_callbacks2_t function. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>file_deleted</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
             <param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>state</name></decl></param>,
             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmpfile1</name></decl></param>,
             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmpfile2</name></decl></param>,
             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype1</name></decl></param>,
             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype2</name></decl></param>,
             <param><decl><type><name>apr_hash_t</name> *</type><name>originalprops</name></decl></param>,
             <param><decl><type><name>void</name> *</type><name>diff_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>callbacks_wrapper_baton</name> *</type><name>b</name> <init>= <expr><name>diff_baton</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>originalprops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name><name>b</name>-&gt;<name>callbacks</name>-&gt;<name>file_deleted</name></name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
                                    <argument><expr><name>tmpfile1</name></expr></argument>, <argument><expr><name>tmpfile2</name></expr></argument>, <argument><expr><name>mimetype1</name></expr></argument>, <argument><expr><name>mimetype2</name></expr></argument>,
                                    <argument><expr><name><name>b</name>-&gt;<name>baton</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* An svn_wc_diff_callbacks2_t function. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>dir_added</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
          <param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>state</name></decl></param>,
          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
          <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
          <param><decl><type><name>void</name> *</type><name>diff_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>callbacks_wrapper_baton</name> *</type><name>b</name> <init>= <expr><name>diff_baton</name></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name><name>b</name>-&gt;<name>callbacks</name>-&gt;<name>dir_added</name></name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>baton</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* An svn_wc_diff_callbacks2_t function. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>dir_deleted</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
            <param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>state</name></decl></param>,
            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
            <param><decl><type><name>void</name> *</type><name>diff_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>callbacks_wrapper_baton</name> *</type><name>b</name> <init>= <expr><name>diff_baton</name></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name><name>b</name>-&gt;<name>callbacks</name>-&gt;<name>dir_deleted</name></name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>baton</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* An svn_wc_diff_callbacks2_t function. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>dir_props_changed</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                  <param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>state</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>propchanges</name></decl></param>,
                  <param><decl><type><name>apr_hash_t</name> *</type><name>originalprops</name></decl></param>,
                  <param><decl><type><name>void</name> *</type><name>diff_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>callbacks_wrapper_baton</name> *</type><name>b</name> <init>= <expr><name>diff_baton</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>b</name>-&gt;<name>callbacks</name>-&gt;<name>props_changed</name></name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>propchanges</name></expr></argument>,
                                     <argument><expr><name>originalprops</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>baton</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* Used to wrap svn_diff_callbacks_t as an svn_wc_diff_callbacks2_t. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> struct <name>svn_wc_diff_callbacks2_t</name></type> <name>callbacks_wrapper</name> <init>= <expr><block>{
  <expr><name>file_changed</name></expr>,
  <expr><name>file_added</name></expr>,
  <expr><name>file_deleted</name></expr>,
  <expr><name>dir_added</name></expr>,
  <expr><name>dir_deleted</name></expr>,
  <expr><name>dir_props_changed</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Public Interface */</comment>
<escape char="0xc"/>

<comment type="block">/* Create a diff editor and baton. */</comment>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_get_diff_editor4</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>anchor</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>svn_wc_diff_callbacks2_t</name> *</type><name>callbacks</name></decl></param>,
                        <param><decl><type><name>void</name> *</type><name>callback_baton</name></decl></param>,
                        <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                        <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl></param>,
                        <param><decl><type><name>svn_boolean_t</name></type> <name>use_text_base</name></decl></param>,
                        <param><decl><type><name>svn_boolean_t</name></type> <name>reverse_order</name></decl></param>,
                        <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
                        <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>changelists</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
                        <param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>inner_baton</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_delta_editor_t</name> *</type><name>tree_editor</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>inner_editor</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>make_editor_baton</name><argument_list>(<argument><expr>&amp;<name>eb</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>callbacks</name></expr></argument>, <argument><expr><name>callback_baton</name></expr></argument>,
                            <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>ignore_ancestry</name></expr></argument>, <argument><expr><name>use_text_base</name></expr></argument>,
                            <argument><expr><name>reverse_order</name></expr></argument>, <argument><expr><name>changelists</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tree_editor</name> = <call><name>svn_delta_default_editor</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>set_target_revision</name></name> = <name>set_target_revision</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>open_root</name></name> = <name>open_root</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>delete_entry</name></name> = <name>delete_entry</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>add_directory</name></name> = <name>add_directory</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>open_directory</name></name> = <name>open_directory</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>close_directory</name></name> = <name>close_directory</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>add_file</name></name> = <name>add_file</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>open_file</name></name> = <name>open_file</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>apply_textdelta</name></name> = <name>apply_textdelta</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>change_file_prop</name></name> = <name>change_file_prop</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>change_dir_prop</name></name> = <name>change_dir_prop</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>close_file</name></name> = <name>close_file</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>close_edit</name></name> = <name>close_edit</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>inner_editor</name> = <name>tree_editor</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>inner_baton</name> = <name>eb</name></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>depth</name> == <name>svn_depth_unknown</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__ambient_depth_filter_editor</name><argument_list>(<argument><expr>&amp;<name>inner_editor</name></expr></argument>,
                                                <argument><expr>&amp;<name>inner_baton</name></expr></argument>,
                                                <argument><expr><name>inner_editor</name></expr></argument>,
                                                <argument><expr><name>inner_baton</name></expr></argument>,
                                                <argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>)</argument_list></call></expr></argument>,
                                                <argument><expr><name>target</name></expr></argument>,
                                                <argument><expr><name>anchor</name></expr></argument>,
                                                <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_delta_get_cancellation_editor</name><argument_list>(<argument><expr><name>cancel_func</name></expr></argument>,
                                            <argument><expr><name>cancel_baton</name></expr></argument>,
                                            <argument><expr><name>inner_editor</name></expr></argument>,
                                            <argument><expr><name>inner_baton</name></expr></argument>,
                                            <argument><expr><name>editor</name></expr></argument>,
                                            <argument><expr><name>edit_baton</name></expr></argument>,
                                            <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_get_diff_editor3</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>anchor</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>svn_wc_diff_callbacks2_t</name> *</type><name>callbacks</name></decl></param>,
                        <param><decl><type><name>void</name> *</type><name>callback_baton</name></decl></param>,
                        <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                        <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl></param>,
                        <param><decl><type><name>svn_boolean_t</name></type> <name>use_text_base</name></decl></param>,
                        <param><decl><type><name>svn_boolean_t</name></type> <name>reverse_order</name></decl></param>,
                        <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
                        <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
                        <param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_wc_get_diff_editor4</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>,
                                 <argument><expr><name>target</name></expr></argument>,
                                 <argument><expr><name>callbacks</name></expr></argument>,
                                 <argument><expr><name>callback_baton</name></expr></argument>,
                                 <argument><expr><call><name>SVN_DEPTH_INFINITY_OR_FILES</name><argument_list>(<argument><expr><name>recurse</name></expr></argument>)</argument_list></call></expr></argument>,
                                 <argument><expr><name>ignore_ancestry</name></expr></argument>,
                                 <argument><expr><name>use_text_base</name></expr></argument>,
                                 <argument><expr><name>reverse_order</name></expr></argument>,
                                 <argument><expr><name>cancel_func</name></expr></argument>,
                                 <argument><expr><name>cancel_baton</name></expr></argument>,
                                 <argument><expr><name>NULL</name></expr></argument>,
                                 <argument><expr><name>editor</name></expr></argument>,
                                 <argument><expr><name>edit_baton</name></expr></argument>,
                                 <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_get_diff_editor2</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>anchor</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>svn_wc_diff_callbacks_t</name> *</type><name>callbacks</name></decl></param>,
                        <param><decl><type><name>void</name> *</type><name>callback_baton</name></decl></param>,
                        <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                        <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl></param>,
                        <param><decl><type><name>svn_boolean_t</name></type> <name>use_text_base</name></decl></param>,
                        <param><decl><type><name>svn_boolean_t</name></type> <name>reverse_order</name></decl></param>,
                        <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
                        <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
                        <param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>callbacks_wrapper_baton</name> *</type><name>b</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>b</name>-&gt;<name>callbacks</name></name> = <name>callbacks</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>b</name>-&gt;<name>baton</name></name> = <name>callback_baton</name></expr>;</expr_stmt>
  <return>return <expr><call><name>svn_wc_get_diff_editor3</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr>&amp;<name>callbacks_wrapper</name></expr></argument>, <argument><expr><name>b</name></expr></argument>,
                                 <argument><expr><name>recurse</name></expr></argument>, <argument><expr><name>ignore_ancestry</name></expr></argument>, <argument><expr><name>use_text_base</name></expr></argument>,
                                 <argument><expr><name>reverse_order</name></expr></argument>, <argument><expr><name>cancel_func</name></expr></argument>, <argument><expr><name>cancel_baton</name></expr></argument>,
                                 <argument><expr><name>editor</name></expr></argument>, <argument><expr><name>edit_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_get_diff_editor</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>anchor</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>svn_wc_diff_callbacks_t</name> *</type><name>callbacks</name></decl></param>,
                       <param><decl><type><name>void</name> *</type><name>callback_baton</name></decl></param>,
                       <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                       <param><decl><type><name>svn_boolean_t</name></type> <name>use_text_base</name></decl></param>,
                       <param><decl><type><name>svn_boolean_t</name></type> <name>reverse_order</name></decl></param>,
                       <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
                       <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
                       <param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_wc_get_diff_editor2</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>callbacks</name></expr></argument>, <argument><expr><name>callback_baton</name></expr></argument>,
                                 <argument><expr><name>recurse</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>use_text_base</name></expr></argument>, <argument><expr><name>reverse_order</name></expr></argument>,
                                 <argument><expr><name>cancel_func</name></expr></argument>, <argument><expr><name>cancel_baton</name></expr></argument>,
                                 <argument><expr><name>editor</name></expr></argument>, <argument><expr><name>edit_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<comment type="block">/* Compare working copy against the text-base. */</comment>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_diff4</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>anchor</name></decl></param>,
             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
             <param><decl><type><specifier>const</specifier> <name>svn_wc_diff_callbacks2_t</name> *</type><name>callbacks</name></decl></param>,
             <param><decl><type><name>void</name> *</type><name>callback_baton</name></decl></param>,
             <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
             <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl></param>,
             <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>changelists</name></decl></param>,
             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>b</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target_path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>make_editor_baton</name><argument_list>(<argument><expr>&amp;<name>eb</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>callbacks</name></expr></argument>, <argument><expr><name>callback_baton</name></expr></argument>, 
                            <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>ignore_ancestry</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, 
                            <argument><expr><name>changelists</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>target_path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>target</name></expr></argument>,
                              <argument><expr><name><name>eb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_probe_retrieve</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>target_path</name></expr></argument>,
                                    <argument><expr><name><name>eb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_versioned</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name>target_path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                                  <argument><expr><name><name>eb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name></expr>)</condition><then>
    <expr_stmt><expr><name>b</name> = <call><name>make_dir_baton</name><argument_list>(<argument><expr><name>target_path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>eb</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><name>b</name> = <call><name>make_dir_baton</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>anchor_path</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>eb</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>directory_elements_diff</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_diff3</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>anchor</name></decl></param>,
             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
             <param><decl><type><specifier>const</specifier> <name>svn_wc_diff_callbacks2_t</name> *</type><name>callbacks</name></decl></param>,
             <param><decl><type><name>void</name> *</type><name>callback_baton</name></decl></param>,
             <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
             <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl></param>,
             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_wc_diff4</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>callbacks</name></expr></argument>, <argument><expr><name>callback_baton</name></expr></argument>,
                      <argument><expr><call><name>SVN_DEPTH_INFINITY_OR_FILES</name><argument_list>(<argument><expr><name>recurse</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ignore_ancestry</name></expr></argument>,
                      <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_diff2</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>anchor</name></decl></param>,
             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
             <param><decl><type><specifier>const</specifier> <name>svn_wc_diff_callbacks_t</name> *</type><name>callbacks</name></decl></param>,
             <param><decl><type><name>void</name> *</type><name>callback_baton</name></decl></param>,
             <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
             <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl></param>,
             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>callbacks_wrapper_baton</name> *</type><name>b</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>b</name>-&gt;<name>callbacks</name></name> = <name>callbacks</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>b</name>-&gt;<name>baton</name></name> = <name>callback_baton</name></expr>;</expr_stmt>
  <return>return <expr><call><name>svn_wc_diff3</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr>&amp;<name>callbacks_wrapper</name></expr></argument>, <argument><expr><name>b</name></expr></argument>,
                      <argument><expr><name>recurse</name></expr></argument>, <argument><expr><name>ignore_ancestry</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_diff</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>anchor</name></decl></param>,
            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
            <param><decl><type><specifier>const</specifier> <name>svn_wc_diff_callbacks_t</name> *</type><name>callbacks</name></decl></param>,
            <param><decl><type><name>void</name> *</type><name>callback_baton</name></decl></param>,
            <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_wc_diff2</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>callbacks</name></expr></argument>, <argument><expr><name>callback_baton</name></expr></argument>,
                      <argument><expr><name>recurse</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
</unit>
