<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_wc/copy.c"><comment type="block">/*
 * copy.c:  wc 'copy' functionality.
 *
 * ====================================================================
 * Copyright (c) 2000-2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<comment type="block">/* ==================================================================== */</comment>


<escape char="0xc"/>
<comment type="block">/*** Includes. ***/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"adm_files.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"entries.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"props.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"translate.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_wc_private.h"</cpp:file></cpp:include>

<escape char="0xc"/>
<comment type="block">/*** Code. ***/</comment>

<comment type="block">/* Helper function for svn_wc_copy2() which handles WC-&gt;WC copying of
   files which are scheduled for addition or unversioned.

   Copy file SRC_PATH to DST_BASENAME in DST_PARENT_ACCESS.

   DST_PARENT_ACCESS is a 0 depth locked access for a versioned directory
   in the same WC as SRC_PATH.

   If SRC_IS_ADDED is true then SRC_PATH is scheduled for addition and
   DST_BASENAME will also be scheduled for addition.

   If SRC_IS_ADDED is false then SRC_PATH is the unversioned child
   file of a versioned or added parent and DST_BASENAME is simply copied.

   Use POOL for all necessary allocations.
*/</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>copy_added_file_administratively</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_path</name></decl></param>,
                                 <param><decl><type><name>svn_boolean_t</name></type> <name>src_is_added</name></decl></param>,
                                 <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>dst_parent_access</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_basename</name></decl></param>,
                                 <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
                                 <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
                                 <param><decl><type><name>svn_wc_notify_func2_t</name></type> <name>notify_func</name></decl></param>,
                                 <param><decl><type><name>void</name> *</type><name>notify_baton</name></decl></param>,
                                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_path</name>
    <init>= <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>dst_parent_access</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><name>dst_basename</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Copy this file and possibly put it under version control. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_copy_file</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>dst_path</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>src_is_added</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_add2</name><argument_list>(<argument><expr><name>dst_path</name></expr></argument>, <argument><expr><name>dst_parent_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                          <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>, <argument><expr><name>cancel_func</name></expr></argument>,
                          <argument><expr><name>cancel_baton</name></expr></argument>, <argument><expr><name>notify_func</name></expr></argument>,
                          <argument><expr><name>notify_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Helper function for svn_wc_copy2() which handles WC-&gt;WC copying of
   directories which are scheduled for addition or unversioned.

   Recursively copy directory SRC_PATH and its children, excluding
   administrative directories, to DST_BASENAME in DST_PARENT_ACCESS.

   DST_PARENT_ACCESS is a 0 depth locked access for a versioned directory
   in the same WC as SRC_PATH.

   SRC_ACCESS is a -1 depth access for SRC_PATH

   If SRC_IS_ADDED is true then SRC_PATH is scheduled for addition and
   DST_BASENAME will also be scheduled for addition.

   If SRC_IS_ADDED is false then SRC_PATH is the unversioned child
   directory of a versioned or added parent and DST_BASENAME is simply
   copied.

   Use POOL for all necessary allocations.
*/</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>copy_added_dir_administratively</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_path</name></decl></param>,
                                <param><decl><type><name>svn_boolean_t</name></type> <name>src_is_added</name></decl></param>,
                                <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>dst_parent_access</name></decl></param>,
                                <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>src_access</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_basename</name></decl></param>,
                                <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
                                <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
                                <param><decl><type><name>svn_wc_notify_func2_t</name></type> <name>notify_func</name></decl></param>,
                                <param><decl><type><name>void</name> *</type><name>notify_baton</name></decl></param>,
                                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_parent</name> <init>= <expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>dst_parent_access</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr>! <name>src_is_added</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* src_path is the top of an unversioned tree, just copy
         the whole thing and we are done. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_copy_dir_recursively</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>dst_parent</name></expr></argument>, <argument><expr><name>dst_basename</name></expr></argument>,
                                          <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>cancel_func</name></expr></argument>, <argument><expr><name>cancel_baton</name></expr></argument>,
                                          <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>dst_child_dir_access</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>src_child_dir_access</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_dir_t</name> *</type><name>dir</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>this_entry</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_int32_t</name></type> <name>flags</name> <init>= <expr><name>APR_FINFO_TYPE</name> | <name>APR_FINFO_NAME</name></expr></init></decl>;</decl_stmt>
      <comment type="block">/* The 'dst_path' is simply dst_parent/dst_basename */</comment>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_path</name> <init>= <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name>dst_parent</name></expr></argument>, <argument><expr><name>dst_basename</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <comment type="block">/* Check cancellation; note that this catches recursive calls too. */</comment>
      <if>if <condition>(<expr><name>cancel_func</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>cancel_func</name><argument_list>(<argument><expr><name>cancel_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <comment type="block">/* "Copy" the dir dst_path and schedule it, and possibly
         its children, for addition. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_dir_make</name><argument_list>(<argument><expr><name>dst_path</name></expr></argument>, <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Add the directory, adding locking access for dst_path
         to dst_parent_access at the same time. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_add2</name><argument_list>(<argument><expr><name>dst_path</name></expr></argument>, <argument><expr><name>dst_parent_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                          <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>, <argument><expr><name>cancel_func</name></expr></argument>, <argument><expr><name>cancel_baton</name></expr></argument>,
                          <argument><expr><name>notify_func</name></expr></argument>, <argument><expr><name>notify_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Get the accesses for the newly added dir and its source, we'll
         need both to process any of SRC_PATHS's children below. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr>&amp;<name>dst_child_dir_access</name></expr></argument>, <argument><expr><name>dst_parent_access</name></expr></argument>,
                                  <argument><expr><name>dst_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr>&amp;<name>src_child_dir_access</name></expr></argument>, <argument><expr><name>src_access</name></expr></argument>,
                                  <argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_dir_open</name><argument_list>(<argument><expr>&amp;<name>dir</name></expr></argument>, <argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Read src_path's entries one by one. */</comment>
      <while>while <condition>(<expr>1</expr>)</condition>
        <block>{
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_fullpath</name></decl>;</decl_stmt>

          <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><name>err</name> = <call><name>svn_io_dir_read</name><argument_list>(<argument><expr>&amp;<name>this_entry</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
            <block>{
              <comment type="block">/* Check if we're done reading the dir's entries. */</comment>
              <if>if <condition>(<expr><call><name>APR_STATUS_IS_ENOENT</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>apr_err</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <block>{
                  <decl_stmt><decl><type><name>apr_status_t</name></type> <name>apr_err</name></decl>;</decl_stmt>

                  <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><name>apr_err</name> = <call><name>apr_dir_close</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <if>if <condition>(<expr><name>apr_err</name></expr>)</condition><then>
                    <return>return <expr><call><name>svn_error_wrap_apr</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>,
                                              <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Can't close "
                                                "directory '%s'"</expr></argument>)</argument_list></call></expr></argument>,
                                              <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>,
                                                                   <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
                  <break>break;</break>
                }</block></then>
              <else>else
                <block>{
                  <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>apr_err</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>,
                                           <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Error during recursive copy "
                                             "of '%s'"</expr></argument>)</argument_list></call></expr></argument>,
                                           <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>,
                                                            <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
                }</block></else></if>
            }</block></then></if>

          <comment type="block">/* Skip entries for this dir and its parent.  */</comment>
          <if>if <condition>(<expr><name><name>this_entry</name>.<name>name</name><index>[<expr>0</expr>]</index></name> == '.'
              &amp;&amp; (<name><name>this_entry</name>.<name>name</name><index>[<expr>1</expr>]</index></name> == '\0'
                  || (<name><name>this_entry</name>.<name>name</name><index>[<expr>1</expr>]</index></name> == '.'
                      &amp;&amp; <name><name>this_entry</name>.<name>name</name><index>[<expr>2</expr>]</index></name> == '\0'))</expr>)</condition><then>
            <continue>continue;</continue></then></if>

          <comment type="block">/* Check cancellation so you can cancel during an
           * add of a directory with lots of files. */</comment>
          <if>if <condition>(<expr><name>cancel_func</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>cancel_func</name><argument_list>(<argument><expr><name>cancel_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

          <comment type="block">/* Skip over SVN admin directories. */</comment>
          <if>if <condition>(<expr><call><name>svn_wc_is_adm_dir</name><argument_list>(<argument><expr><name><name>this_entry</name>.<name>name</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <continue>continue;</continue></then></if>

          <comment type="block">/* Construct the full path of the entry. */</comment>
          <expr_stmt><expr><name>src_fullpath</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr><name><name>this_entry</name>.<name>name</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name>src_fullpath</name></expr></argument>, <argument><expr><name>src_child_dir_access</name></expr></argument>,
                               <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="block">/* Recurse on directories; add files; ignore the rest. */</comment>
          <if>if <condition>(<expr><name><name>this_entry</name>.<name>filetype</name></name> == <name>APR_DIR</name></expr>)</condition><then>
            <block>{
              <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>copy_added_dir_administratively</name><argument_list>(<argument><expr><name>src_fullpath</name></expr></argument>,
                                                      <argument><expr><name>entry</name> ? <name>TRUE</name> : <name>FALSE</name></expr></argument>,
                                                      <argument><expr><name>dst_child_dir_access</name></expr></argument>,
                                                      <argument><expr><name>src_child_dir_access</name></expr></argument>,
                                                      <argument><expr><name><name>this_entry</name>.<name>name</name></name></expr></argument>,
                                                      <argument><expr><name>cancel_func</name></expr></argument>,
                                                      <argument><expr><name>cancel_baton</name></expr></argument>,
                                                      <argument><expr><name>notify_func</name></expr></argument>,
                                                      <argument><expr><name>notify_baton</name></expr></argument>,
                                                      <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
          <else>else <if>if <condition>(<expr><name><name>this_entry</name>.<name>filetype</name></name> != <name>APR_UNKFILE</name></expr>)</condition><then>
            <block>{
              <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>copy_added_file_administratively</name><argument_list>(<argument><expr><name>src_fullpath</name></expr></argument>,
                                                       <argument><expr><name>entry</name> ? <name>TRUE</name> : <name>FALSE</name></expr></argument>,
                                                       <argument><expr><name>dst_child_dir_access</name></expr></argument>,
                                                       <argument><expr><name><name>this_entry</name>.<name>name</name></name></expr></argument>,
                                                       <argument><expr><name>cancel_func</name></expr></argument>,
                                                       <argument><expr><name>cancel_baton</name></expr></argument>,
                                                       <argument><expr><name>notify_func</name></expr></argument>,
                                                       <argument><expr><name>notify_baton</name></expr></argument>,
                                                       <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></else></if>

        }</block></while> <comment type="block">/* End while(1) loop */</comment>

    <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  }</block></else></if> <comment type="block">/* End else src_is_added. */</comment>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Helper function for copy_file_administratively() and
   copy_dir_administratively().  Determines the COPYFROM_URL and
   COPYFROM_REV of a file or directory SRC_PATH which is the descendant
   of an explicitly moved or copied directory that has not been committed.
*/</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>get_copyfrom_url_rev_via_parent</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_path</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>copyfrom_url</name></decl></param>,
                                <param><decl><type><name>svn_revnum_t</name> *</type><name>copyfrom_rev</name></decl></param>,
                                <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>src_access</name></decl></param>,
                                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>parent_path</name> <init>= <expr><call><name>svn_path_dirname</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rest</name> <init>= <expr><call><name>svn_path_basename</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr>*<name>copyfrom_url</name> = <name>NULL</name></expr>;</expr_stmt>

  <while>while <condition>(<expr>! *<name>copyfrom_url</name></expr>)</condition>
    <block>{
      <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>parent_access</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>

      <comment type="block">/* Don't look for parent_path in src_access if it can't be
         there... */</comment>
      <if>if <condition>(<expr><call><name>svn_path_is_ancestor</name><argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>src_access</name></expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><name>parent_path</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr>&amp;<name>parent_access</name></expr></argument>, <argument><expr><name>src_access</name></expr></argument>,
                                      <argument><expr><name>parent_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_versioned</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name>parent_path</name></expr></argument>, <argument><expr><name>parent_access</name></expr></argument>,
                                         <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else <comment type="block">/* ...get access for parent_path instead. */</comment>
        <block>{
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_probe_open3</name><argument_list>(<argument><expr>&amp;<name>parent_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                         <argument><expr><name>parent_path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr>-1</expr></argument>,
                                         <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_versioned</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name>parent_path</name></expr></argument>, <argument><expr><name>parent_access</name></expr></argument>,
                                         <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_close</name><argument_list>(<argument><expr><name>parent_access</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

      <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>copyfrom_url</name></name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr>*<name>copyfrom_url</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>copyfrom_url</name></name></expr></argument>, <argument><expr><name>rest</name></expr></argument>,
                                        <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr>*<name>copyfrom_rev</name> = <name><name>entry</name>-&gt;<name>copyfrom_rev</name></name></expr>;</expr_stmt>
        }</block></then>
      <else>else
        <block>{
          <expr_stmt><expr><name>rest</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><call><name>svn_path_basename</name><argument_list>(<argument><expr><name>parent_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><name>rest</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>parent_path</name> = <call><name>svn_path_dirname</name><argument_list>(<argument><expr><name>parent_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></while>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* A helper for copy_file_administratively() which sets *COPYFROM_URL
   and *COPYFROM_REV appropriately (possibly to NULL/SVN_INVALID_REVNUM).
   DST_ENTRY may be NULL. */</comment>
<function><type><specifier>static</specifier> <name>APR_INLINE</name> <name>svn_error_t</name> *</type>
<name>determine_copyfrom_info</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>copyfrom_url</name></decl></param>, <param><decl><type><name>svn_revnum_t</name> *</type><name>copyfrom_rev</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_path</name></decl></param>, <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>src_access</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>src_entry</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>dst_entry</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>src_entry</name>-&gt;<name>copyfrom_url</name></name></expr>)</condition><then>
    <block>{
      <comment type="block">/* When copying/moving a file that was already explicitly
         copied/moved then we know the URL it was copied from... */</comment>
      <expr_stmt><expr><name>url</name> = <name><name>src_entry</name>-&gt;<name>copyfrom_url</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>rev</name> = <name><name>src_entry</name>-&gt;<name>copyfrom_rev</name></name></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <comment type="block">/* ...But if this file is merely the descendant of an explicitly
         copied/moved directory, we need to do a bit more work to
         determine copyfrom_url and copyfrom_rev. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_copyfrom_url_rev_via_parent</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr>&amp;<name>url</name></expr></argument>, <argument><expr>&amp;<name>rev</name></expr></argument>,
                                              <argument><expr><name>src_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <if>if <condition>(<expr><name>dst_entry</name> &amp;&amp; <name>rev</name> == <name><name>dst_entry</name>-&gt;<name>revision</name></name> &amp;&amp;
      <call><name>strcmp</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name><name>dst_entry</name>-&gt;<name>url</name></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
    <block>{
      <comment type="block">/* Suppress copyfrom info when the copy source is the same as
         for the destination. */</comment>
      <expr_stmt><expr><name>url</name> = <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>rev</name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr><name><name>src_entry</name>-&gt;<name>copyfrom_url</name></name></expr>)</condition><then>
    <block>{
      <comment type="block">/* As the URL was allocated for src_entry, make a copy. */</comment>
      <expr_stmt><expr><name>url</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></else></if>

  <expr_stmt><expr>*<name>copyfrom_url</name> = <name>url</name></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>copyfrom_rev</name> = <name>rev</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* This function effectively creates and schedules a file for
   addition, but does extra administrative things to allow it to
   function as a 'copy'.

   ASSUMPTIONS:

     - src_path points to a file under version control
     - dst_parent points to a dir under version control, in the same
                  working copy.
     - dst_basename will be the 'new' name of the copied file in dst_parent
 */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>copy_file_administratively</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_path</name></decl></param>,
                           <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>src_access</name></decl></param>,
                           <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>dst_parent</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_basename</name></decl></param>,
                           <param><decl><type><name>svn_wc_notify_func2_t</name></type> <name>notify_copied</name></decl></param>,
                           <param><decl><type><name>void</name> *</type><name>notify_baton</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>dst_kind</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>src_entry</name></decl>, *<decl><type ref="prev"/><name>dst_entry</name></decl>;</decl_stmt>

  <comment type="block">/* The 'dst_path' is simply dst_parent/dst_basename */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_path</name>
    <init>= <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>dst_parent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dst_basename</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Discover the paths to the two text-base files */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_txtb</name> <init>= <expr><call><name>svn_wc__text_base_path</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmp_txtb</name> <init>= <expr><call><name>svn_wc__text_base_path</name><argument_list>(<argument><expr><name>dst_path</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Sanity check:  if dst file exists already, don't allow overwrite. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_check_path</name><argument_list>(<argument><expr><name>dst_path</name></expr></argument>, <argument><expr>&amp;<name>dst_kind</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>dst_kind</name> != <name>svn_node_none</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_ENTRY_EXISTS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s' already exists and is in the way"</expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>dst_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <comment type="block">/* Even if DST_PATH doesn't exist it may still be a versioned file; it
     may be scheduled for deletion, or the user may simply have removed the
     working copy.  Since we are going to write to DST_PATH text-base and
     prop-base we need to detect such cases and abort. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>dst_entry</name></expr></argument>, <argument><expr><name>dst_path</name></expr></argument>, <argument><expr><name>dst_parent</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>dst_entry</name> &amp;&amp; <name><name>dst_entry</name>-&gt;<name>kind</name></name> == <name>svn_node_file</name></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><name><name>dst_entry</name>-&gt;<name>schedule</name></name> != <name>svn_wc_schedule_delete</name></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_ENTRY_EXISTS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                 <argument><expr><call><name>_</name><argument_list>(<argument><expr>"There is already a versioned item '%s'"</expr></argument>)</argument_list></call></expr></argument>,
                                 <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>dst_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
    }</block></then></if>

  <comment type="block">/* Sanity check 1: You cannot make a copy of something that's not
     under version control. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_versioned</name><argument_list>(<argument><expr>&amp;<name>src_entry</name></expr></argument>, <argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>src_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                                 <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Sanity check 2: You cannot make a copy of something that's not
     in the repository unless it's a copy of an uncommitted copy. */</comment>
  <if>if <condition>(<expr>(<name><name>src_entry</name>-&gt;<name>schedule</name></name> == <name>svn_wc_schedule_add</name> &amp;&amp; (! <name><name>src_entry</name>-&gt;<name>copied</name></name>))
      || (! <name><name>src_entry</name>-&gt;<name>url</name></name>)</expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name>
      <argument_list>(<argument><expr><name>SVN_ERR_UNSUPPORTED_FEATURE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
       <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Cannot copy or move '%s': it is not in the repository yet; "
         "try committing first"</expr></argument>)</argument_list></call></expr></argument>,
       <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>


  <comment type="block">/* Schedule the new file for addition in its parent, WITH HISTORY. */</comment>
  <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_url</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmp_wc_text</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_rev</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl>, *<decl><type ref="prev"/><name>base_props</name></decl>;</decl_stmt>

    <comment type="block">/* Are we moving or copying a file that is already moved or copied
       but not committed? */</comment>
    <if>if <condition>(<expr><name><name>src_entry</name>-&gt;<name>copied</name></name></expr>)</condition><then>
      <block>{
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>determine_copyfrom_info</name><argument_list>(<argument><expr>&amp;<name>copyfrom_url</name></expr></argument>, <argument><expr>&amp;<name>copyfrom_rev</name></expr></argument>, <argument><expr><name>src_path</name></expr></argument>,
                                        <argument><expr><name>src_access</name></expr></argument>, <argument><expr><name>src_entry</name></expr></argument>, <argument><expr><name>dst_entry</name></expr></argument>,
                                        <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then>
    <else>else
      <block>{
        <comment type="block">/* Grrr.  Why isn't the first arg to svn_wc_get_ancestry const? */</comment>
        <decl_stmt><decl><type><name>char</name> *</type><name>tmp</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_get_ancestry</name><argument_list>(<argument><expr>&amp;<name>tmp</name></expr></argument>, <argument><expr>&amp;<name>copyfrom_rev</name></expr></argument>, <argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>src_access</name></expr></argument>,
                                    <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>copyfrom_url</name> = <name>tmp</name></expr>;</expr_stmt>
      }</block></else></if>

    <comment type="block">/* Load source base and working props. */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__load_props</name><argument_list>(<argument><expr>&amp;<name>base_props</name></expr></argument>, <argument><expr>&amp;<name>props</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>src_access</name></expr></argument>,
                               <argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Copy pristine text-base to temporary location. */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_copy_file</name><argument_list>(<argument><expr><name>src_txtb</name></expr></argument>, <argument><expr><name>tmp_txtb</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Copy working copy file to temporary location */</comment>
    <block>{
      <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>special</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_create_tmp_file2</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>tmp_wc_text</name></expr></argument>,
                                      <argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>dst_parent</name></expr></argument>)</argument_list></call></expr></argument>,
                                      <argument><expr><name>svn_io_file_del_none</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__get_special</name><argument_list>(<argument><expr>&amp;<name>special</name></expr></argument>, <argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>src_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>special</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_subst_copy_and_translate3</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>tmp_wc_text</name></expr></argument>,
                                                <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                                <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>special</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_copy_file</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>tmp_wc_text</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    }</block>

    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_add_repos_file2</name><argument_list>(<argument><expr><name>dst_path</name></expr></argument>, <argument><expr><name>dst_parent</name></expr></argument>,
                                   <argument><expr><name>tmp_txtb</name></expr></argument>, <argument><expr><name>tmp_wc_text</name></expr></argument>,
                                   <argument><expr><name>base_props</name></expr></argument>, <argument><expr><name>props</name></expr></argument>,
                                   <argument><expr><name>copyfrom_url</name></expr></argument>, <argument><expr><name>copyfrom_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>

  <comment type="block">/* Report the addition to the caller. */</comment>
  <if>if <condition>(<expr><name>notify_copied</name> != <name>NULL</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_wc_notify_t</name> *</type><name>notify</name> <init>= <expr><call><name>svn_wc_create_notify</name><argument_list>(<argument><expr><name>dst_path</name></expr></argument>,
                                                     <argument><expr><name>svn_wc_notify_add</name></expr></argument>,
                                                     <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>notify</name>-&gt;<name>kind</name></name> = <name>svn_node_file</name></expr>;</expr_stmt>
      <expr_stmt><expr><call>(*<name>notify_copied</name>)<argument_list>(<argument><expr><name>notify_baton</name></expr></argument>, <argument><expr><name>notify</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Recursively crawl over a directory PATH and do a number of things:
     - Remove lock tokens
     - Remove WC props
     - Convert deleted items to schedule-delete items
     - Set .svn directories to be hidden
*/</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>post_copy_cleanup</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>entries</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name> <init>= <expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Remove wcprops. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__props_delete</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>svn_wc__props_wcprop</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Read this directory's entries file. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entries_read</name><argument_list>(<argument><expr>&amp;<name>entries</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Because svn_io_copy_dir_recursively() doesn't copy directory
     permissions, we'll patch up our tree's .svn subdirs to be
     hidden. */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>APR_FILE_ATTR_HIDDEN</name></cpp:ifdef>
  <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>adm_dir</name> <init>= <expr><call><name>svn_wc__adm_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path_apr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_path_cstring_from_utf8</name><argument_list>(<argument><expr>&amp;<name>path_apr</name></expr></argument>, <argument><expr><name>adm_dir</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>status</name> = <call><name>apr_file_attrs_set</name><argument_list>(<argument><expr><name>path_apr</name></expr></argument>,
                                <argument><expr><name>APR_FILE_ATTR_HIDDEN</name></expr></argument>,
                                <argument><expr><name>APR_FILE_ATTR_HIDDEN</name></expr></argument>,
                                <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>status</name></expr>)</condition><then>
      <return>return <expr><call><name>svn_error_wrap_apr</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Can't hide directory '%s'"</expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>adm_dir</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
  }</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/* Loop over all children, removing lock tokens and recursing into
     directories. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entries_read</name><argument_list>(<argument><expr>&amp;<name>entries</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>deleted</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_uint64_t</name></type> <name>flags</name> <init>= <expr><name>SVN_WC__ENTRY_MODIFY_FORCE</name></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>entry</name> = <name>val</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>kind</name> = <name><name>entry</name>-&gt;<name>kind</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>deleted</name> = <name><name>entry</name>-&gt;<name>deleted</name></name></expr>;</expr_stmt>

      <comment type="block">/* Convert deleted="true" into schedule="delete" for all
         children (and grandchildren, if RECURSE is set) of the path
         represented by ADM_ACCESS.  The result of this is that when
         the copy is committed the items in question get deleted and
         the result is a directory in the repository that matches the
         original source directory for copy.  If this were not done
         the deleted="true" items would simply vanish from the entries
         file as the copy is added to the working copy.  The new
         schedule="delete" files do not have a text-base and so their
         scheduled deletion cannot be reverted.  For directories a
         placeholder with an svn_node_kind_t of svn_node_file and
         schedule="delete" is used to avoid the problems associated
         with creating a directory.  See Issue #2101 for details. */</comment>
      <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>deleted</name></name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name><name>entry</name>-&gt;<name>schedule</name></name> = <name>svn_wc_schedule_delete</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>flags</name> |= <name>SVN_WC__ENTRY_MODIFY_SCHEDULE</name></expr>;</expr_stmt>

          <expr_stmt><expr><name><name>entry</name>-&gt;<name>deleted</name></name> = <name>FALSE</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>flags</name> |= <name>SVN_WC__ENTRY_MODIFY_DELETED</name></expr>;</expr_stmt>

          <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name></expr>)</condition><then>
            <block>{
              <comment type="block">/* ### WARNING: Very dodgy stuff here! ###

              Directories are a problem since a schedule delete directory
              needs an admin directory to be present.  It's possible to
              create a dummy admin directory and that sort of works, it's
              good enough if the user commits the copy.  Where it falls
              down is if the user *reverts* the dummy directory since the
              now schedule normal, copied, directory doesn't have the
              correct contents.

              The dodgy solution is to cheat and use a schedule delete file
              as a placeholder!  This is sufficient to provide a delete
              when the copy is committed.  Attempts to revert any such
              "fake" files will fail due to a missing text-base. This
              effectively means that the schedule deletes have to remain
              schedule delete until the copy is committed, when they become
              state deleted and everything works! */</comment>
              <expr_stmt><expr><name><name>entry</name>-&gt;<name>kind</name></name> = <name>svn_node_file</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>flags</name> |= <name>SVN_WC__ENTRY_MODIFY_KIND</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>

      <comment type="block">/* Remove lock stuffs. */</comment>
      <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>lock_token</name></name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name><name>entry</name>-&gt;<name>lock_token</name></name> = <name>NULL</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>entry</name>-&gt;<name>lock_owner</name></name> = <name>NULL</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>entry</name>-&gt;<name>lock_comment</name></name> = <name>NULL</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>entry</name>-&gt;<name>lock_creation_date</name></name> = 0</expr>;</expr_stmt>
          <expr_stmt><expr><name>flags</name> |= (<name>SVN_WC__ENTRY_MODIFY_LOCK_TOKEN</name>
                    | <name>SVN_WC__ENTRY_MODIFY_LOCK_OWNER</name>
                    | <name>SVN_WC__ENTRY_MODIFY_LOCK_COMMENT</name>
                    | <name>SVN_WC__ENTRY_MODIFY_LOCK_CREATION_DATE</name>)</expr>;</expr_stmt>
        }</block></then></if>

      <comment type="block">/* If we meaningfully modified the flags, we must be wanting to
         change the entry. */</comment>
      <if>if <condition>(<expr><name>flags</name> != <name>SVN_WC__ENTRY_MODIFY_FORCE</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_modify</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>,
                                     <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <comment type="block">/* If a dir, not deleted, and not "this dir", recurse. */</comment>
      <if>if <condition>(<expr>(! <name>deleted</name>)
          &amp;&amp; (<name>kind</name> == <name>svn_node_dir</name>)
          &amp;&amp; (<call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>SVN_WC_ENTRY_THIS_DIR</name></expr></argument>)</argument_list></call> != 0)</expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>child_access</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>child_path</name></decl>;</decl_stmt>
          <expr_stmt><expr><name>child_path</name> = <call><name>svn_path_join</name>
            <argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr>&amp;<name>child_access</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
                                      <argument><expr><name>child_path</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>post_copy_cleanup</name><argument_list>(<argument><expr><name>child_access</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>

  <comment type="block">/* Cleanup */</comment>
  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* This function effectively creates and schedules a dir for
   addition, but does extra administrative things to allow it to
   function as a 'copy'.

   ASSUMPTIONS:

     - src_path points to a dir under version control
     - dst_parent points to a dir under version control, in the same
                  working copy.
     - dst_basename will be the 'new' name of the copied dir in dst_parent
 */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>copy_dir_administratively</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_path</name></decl></param>,
                          <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>src_access</name></decl></param>,
                          <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>dst_parent</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_basename</name></decl></param>,
                          <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
                          <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
                          <param><decl><type><name>svn_wc_notify_func2_t</name></type> <name>notify_copied</name></decl></param>,
                          <param><decl><type><name>void</name> *</type><name>notify_baton</name></decl></param>,
                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>src_entry</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>

  <comment type="block">/* The 'dst_path' is simply dst_parent/dst_basename */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_path</name> <init>= <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>dst_parent</name></expr></argument>)</argument_list></call></expr></argument>,
                                       <argument><expr><name>dst_basename</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Sanity check 1: You cannot make a copy of something that's not
     under version control. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_versioned</name><argument_list>(<argument><expr>&amp;<name>src_entry</name></expr></argument>, <argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>src_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                                 <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Sanity check 2: You cannot make a copy of something that's not
     in the repository unless it's a copy of an uncommitted copy. */</comment>
  <if>if <condition>(<expr>(<name><name>src_entry</name>-&gt;<name>schedule</name></name> == <name>svn_wc_schedule_add</name> &amp;&amp; (! <name><name>src_entry</name>-&gt;<name>copied</name></name>))
      || (! <name><name>src_entry</name>-&gt;<name>url</name></name>)</expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name>
      <argument_list>(<argument><expr><name>SVN_ERR_UNSUPPORTED_FEATURE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
       <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Cannot copy or move '%s': it is not in the repository yet; "
         "try committing first"</expr></argument>)</argument_list></call></expr></argument>,
       <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <comment type="block">/* Recursively copy the whole directory over.  This gets us all
     text-base, props, base-props, as well as entries, local mods,
     schedulings, existences, etc.

      ### Should we be copying unversioned items within the directory? */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_copy_dir_recursively</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>,
                                      <argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>dst_parent</name></expr></argument>)</argument_list></call></expr></argument>,
                                      <argument><expr><name>dst_basename</name></expr></argument>,
                                      <argument><expr><name>TRUE</name></expr></argument>,
                                      <argument><expr><name>cancel_func</name></expr></argument>, <argument><expr><name>cancel_baton</name></expr></argument>,
                                      <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If this is part of a move, the copied directory will be locked,
     because the source directory was locked.  Running cleanup will remove
     the locks, even though this directory has not yet been added to the
     parent. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_cleanup2</name><argument_list>(<argument><expr><name>dst_path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>cancel_func</name></expr></argument>, <argument><expr><name>cancel_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* We've got some post-copy cleanup to do now. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_open3</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>dst_path</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr>-1</expr></argument>,
                           <argument><expr><name>cancel_func</name></expr></argument>, <argument><expr><name>cancel_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>post_copy_cleanup</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Schedule the directory for addition in both its parent and itself
     (this_dir) -- WITH HISTORY.  This function should leave the
     existing administrative dir untouched.  */</comment>
  <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_url</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_rev</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>svn_wc_entry_t</name></type> <name>tmp_entry</name></decl>;</decl_stmt>

    <comment type="block">/* Are we copying a dir that is already copied but not committed? */</comment>
    <if>if <condition>(<expr><name><name>src_entry</name>-&gt;<name>copied</name></name></expr>)</condition><then>
      <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>dst_entry</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>dst_entry</name></expr></argument>, <argument><expr><name>dst_path</name></expr></argument>, <argument><expr><name>dst_parent</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>determine_copyfrom_info</name><argument_list>(<argument><expr>&amp;<name>copyfrom_url</name></expr></argument>, <argument><expr>&amp;<name>copyfrom_rev</name></expr></argument>, <argument><expr><name>src_path</name></expr></argument>,
                                        <argument><expr><name>src_access</name></expr></argument>, <argument><expr><name>src_entry</name></expr></argument>, <argument><expr><name>dst_entry</name></expr></argument>,
                                        <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* The URL for a copied dir won't exist in the repository, which
           will cause  svn_wc_add2() below to fail.  Set the URL to the
           URL of the first copy for now to prevent this. */</comment>
        <expr_stmt><expr><name><name>tmp_entry</name>.<name>url</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>copyfrom_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_modify</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <comment type="block">/* This Dir */</comment>
                                     <argument><expr>&amp;<name>tmp_entry</name></expr></argument>,
                                     <argument><expr><name>SVN_WC__ENTRY_MODIFY_URL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
                                     <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then>
    <else>else
      <block>{
        <comment type="block">/* Grrr.  Why isn't the first arg to svn_wc_get_ancestry const? */</comment>
        <decl_stmt><decl><type><name>char</name> *</type><name>tmp</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_get_ancestry</name><argument_list>(<argument><expr>&amp;<name>tmp</name></expr></argument>, <argument><expr>&amp;<name>copyfrom_rev</name></expr></argument>, <argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>src_access</name></expr></argument>,
                                    <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>copyfrom_url</name> = <name>tmp</name></expr>;</expr_stmt>
      }</block></else></if>

    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_close</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_add2</name><argument_list>(<argument><expr><name>dst_path</name></expr></argument>, <argument><expr><name>dst_parent</name></expr></argument>,
                        <argument><expr><name>copyfrom_url</name></expr></argument>, <argument><expr><name>copyfrom_rev</name></expr></argument>,
                        <argument><expr><name>cancel_func</name></expr></argument>, <argument><expr><name>cancel_baton</name></expr></argument>,
                        <argument><expr><name>notify_copied</name></expr></argument>, <argument><expr><name>notify_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>



<comment type="block">/* Public Interface */</comment>

<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_copy2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_path</name></decl></param>,
             <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>dst_parent</name></decl></param>,
             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_basename</name></decl></param>,
             <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
             <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
             <param><decl><type><name>svn_wc_notify_func2_t</name></type> <name>notify_func</name></decl></param>,
             <param><decl><type><name>void</name> *</type><name>notify_baton</name></decl></param>,
             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>src_kind</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>dst_entry</name></decl>, *<decl><type ref="prev"/><name>src_entry</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_probe_open3</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr>-1</expr></argument>,
                                 <argument><expr><name>cancel_func</name></expr></argument>, <argument><expr><name>cancel_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>dst_path</name> =  <call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>dst_parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_versioned</name><argument_list>(<argument><expr>&amp;<name>dst_entry</name></expr></argument>, <argument><expr><name>dst_path</name></expr></argument>, <argument><expr><name>dst_parent</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                                 <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_versioned</name><argument_list>(<argument><expr>&amp;<name>src_entry</name></expr></argument>, <argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                                 <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>(<name><name>src_entry</name>-&gt;<name>repos</name></name> != <name>NULL</name> &amp;&amp; <name><name>dst_entry</name>-&gt;<name>repos</name></name> != <name>NULL</name>) &amp;&amp;
      <call><name>strcmp</name><argument_list>(<argument><expr><name><name>src_entry</name>-&gt;<name>repos</name></name></expr></argument>, <argument><expr><name><name>dst_entry</name>-&gt;<name>repos</name></name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name>
      <argument_list>(<argument><expr><name>SVN_ERR_WC_INVALID_SCHEDULE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
       <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Cannot copy to '%s', as it is not from repository '%s'; "
         "it is from '%s'"</expr></argument>)</argument_list></call></expr></argument>,
       <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>dst_parent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
       <argument><expr><name><name>src_entry</name>-&gt;<name>repos</name></name></expr></argument>, <argument><expr><name><name>dst_entry</name>-&gt;<name>repos</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
  <if>if <condition>(<expr><name><name>dst_entry</name>-&gt;<name>schedule</name></name> == <name>svn_wc_schedule_delete</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name>
      <argument_list>(<argument><expr><name>SVN_ERR_WC_INVALID_SCHEDULE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
       <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Cannot copy to '%s' as it is scheduled for deletion"</expr></argument>)</argument_list></call></expr></argument>,
       <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>dst_parent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_check_path</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr>&amp;<name>src_kind</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>src_kind</name> == <name>svn_node_file</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* Check if we are copying a file scheduled for addition,
         these require special handling. */</comment>
      <if>if <condition>(<expr><name><name>src_entry</name>-&gt;<name>schedule</name></name> == <name>svn_wc_schedule_add</name>
          &amp;&amp; (! <name><name>src_entry</name>-&gt;<name>copied</name></name>)</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>copy_added_file_administratively</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
                                                   <argument><expr><name>dst_parent</name></expr></argument>, <argument><expr><name>dst_basename</name></expr></argument>,
                                                   <argument><expr><name>cancel_func</name></expr></argument>, <argument><expr><name>cancel_baton</name></expr></argument>,
                                                   <argument><expr><name>notify_func</name></expr></argument>, <argument><expr><name>notify_baton</name></expr></argument>,
                                                   <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else
        <block>{
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>copy_file_administratively</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
                                             <argument><expr><name>dst_parent</name></expr></argument>, <argument><expr><name>dst_basename</name></expr></argument>,
                                             <argument><expr><name>notify_func</name></expr></argument>, <argument><expr><name>notify_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>src_kind</name> == <name>svn_node_dir</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* Check if we are copying a directory scheduled for addition,
         these require special handling. */</comment>
      <if>if <condition>(<expr><name><name>src_entry</name>-&gt;<name>schedule</name></name> == <name>svn_wc_schedule_add</name>
          &amp;&amp; (! <name><name>src_entry</name>-&gt;<name>copied</name></name>)</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>copy_added_dir_administratively</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
                                                  <argument><expr><name>dst_parent</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
                                                  <argument><expr><name>dst_basename</name></expr></argument>, <argument><expr><name>cancel_func</name></expr></argument>,
                                                  <argument><expr><name>cancel_baton</name></expr></argument>, <argument><expr><name>notify_func</name></expr></argument>,
                                                  <argument><expr><name>notify_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else
        <block>{
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>copy_dir_administratively</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
                                            <argument><expr><name>dst_parent</name></expr></argument>, <argument><expr><name>dst_basename</name></expr></argument>,
                                            <argument><expr><name>cancel_func</name></expr></argument>, <argument><expr><name>cancel_baton</name></expr></argument>,
                                            <argument><expr><name>notify_func</name></expr></argument>, <argument><expr><name>notify_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then></if></else></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_close</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_copy</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_path</name></decl></param>,
            <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>dst_parent</name></decl></param>,
            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_basename</name></decl></param>,
            <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
            <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
            <param><decl><type><name>svn_wc_notify_func_t</name></type> <name>notify_func</name></decl></param>,
            <param><decl><type><name>void</name> *</type><name>notify_baton</name></decl></param>,
            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_wc__compat_notify_baton_t</name></type> <name>nb</name></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>nb</name>.<name>func</name></name> = <name>notify_func</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>nb</name>.<name>baton</name></name> = <name>notify_baton</name></expr>;</expr_stmt>

  <return>return <expr><call><name>svn_wc_copy2</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>dst_parent</name></expr></argument>, <argument><expr><name>dst_basename</name></expr></argument>, <argument><expr><name>cancel_func</name></expr></argument>,
                      <argument><expr><name>cancel_baton</name></expr></argument>, <argument><expr><name>svn_wc__compat_call_notify_func</name></expr></argument>,
                      <argument><expr>&amp;<name>nb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<escape char="0xc"/>
</unit>
