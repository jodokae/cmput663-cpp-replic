<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_wc/questions.h"><comment type="block">/*
 * questions.h :  asking questions about working copies
 *
 * ====================================================================
 * Copyright (c) 2000-2004 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<escape char="0xc"/>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVN_LIBSVN_WC_QUESTIONS_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_LIBSVN_WC_QUESTIONS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<escape char="0xc"/>
<comment type="block">/* Indicates which kind of timestamp to pay attention to.
   See svn_wc__timestamps_equal_p(). */</comment>
<enum>enum <name>svn_wc__timestamp_kind</name>
<block>{
  <decl><name>svn_wc__text_time</name> <init>= <expr>1</expr></init></decl>,
  <decl><name>svn_wc__prop_time</name></decl>
}</block>;</enum>


<comment type="block">/* Return an SVN_ERR_WC_UNSUPPORTED_FORMAT error if the working copy
 * format WC_FORMAT is unsupported.  PATH is only used in the error
 * message.
 *
 * Use POOL for any temporary allocation.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc__check_format</name><parameter_list>(<param><decl><type><name>int</name></type> <name>wc_format</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Set *EQUAL_P to true if PATH's TIMESTAMP_KIND timestamp is the same as
 * the one recorded in its `entries' file, else to set to false. ADM_ACCESS
 * must be an access baton for PATH.
 *
 * Use POOL for any temporary allocation.
 */</comment>
<decl_stmt><decl><type><name>svn_error_t</name> *</type>
<name>svn_wc__timestamps_equal_p</name><argument_list>(<argument><expr><name>svn_boolean_t</name> *<name>equal_p</name></expr></argument>,
                           <argument><expr>const <name>char</name> *<name>path</name></expr></argument>,
                           <argument><expr><name>svn_wc_adm_access_t</name> *<name>adm_access</name></expr></argument>,
                           <argument>enum <expr><name>svn_wc__timestamp_kind</name> <name>timestamp_kind</name></expr></argument>,
                           <argument><expr><name>apr_pool_t</name> *<name>pool</name></expr></argument>)</argument_list></decl>;</decl_stmt>


<comment type="block">/* Set *MODIFIED_P to true if VERSIONED_FILE is modified with respect
 * to BASE_FILE, or false if it is not.  The comparison compensates
 * for VERSIONED_FILE's eol and keyword properties, but leaves
 * BASE_FILE alone (as though BASE_FILE were a text-base file, which
 * it usually is, only sometimes we're calling this on incoming
 * temporary text-bases).  ADM_ACCESS must be an access baton for
 * VERSIONED_FILE.  If COMPARE_TEXTBASES is false, a clean copy of the
 * versioned file is compared to VERSIONED_FILE.
 *
 * If an error is returned, the effect on *MODIFIED_P is undefined.
 *
 * Use POOL for temporary allocation.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_wc__versioned_file_modcheck</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>modified_p</name></decl></param>,
                                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>versioned_file</name></decl></param>,
                                             <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_file</name></decl></param>,
                                             <param><decl><type><name>svn_boolean_t</name></type> <name>compare_textbases</name></decl></param>,
                                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SVN_LIBSVN_WC_QUESTIONS_H */</comment>
</unit>
