<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/bindings/javahl/native/StringArray.h"><comment type="block">/**
 * @copyright
 * ====================================================================
 * Copyright (c) 2008 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 * @endcopyright
 *
 * @file StringArray.h
 * @brief Interface of the class StringArray
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>STRINGARRAY_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRINGARRAY_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;jni.h&gt;</cpp:file></cpp:include>

<struct_decl>struct <name>apr_array_header_t</name>;</struct_decl>
<struct_decl>struct <name>svn_error_t</name>;</struct_decl>
<decl_stmt><decl><type><name>class</name></type> <name>Pool</name></decl>;</decl_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>StringArray</name>
<block>{
 <label><name>private</name>:</label>
  <expr_stmt><expr><name>std</name>::<name>vector</name>&lt;<name>std</name>::<name>string</name>&gt; <name>m_strings</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>jobjectArray</name></type> <name>m_stringArray</name></decl>;</decl_stmt>
 <label><name>public</name>:</label>
  <macro><name>StringArray</name><argument_list>(<argument>jobjectArray jstrings</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
  <expr_stmt><expr>~<call><name>StringArray</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <function_decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>array</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>Pool</name> &amp;</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// STRINGARRAY_H</comment>
</unit>
