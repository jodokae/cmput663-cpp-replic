<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/bindings/javahl/native/ConflictResolverCallback.h"><comment type="block">/**
 * @copyright
 * ====================================================================
 * Copyright (c) 2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 * @endcopyright
 *
 * @file ConflictResolverCallback.h
 * @brief Interface of the class ConflictResolverCallback
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CONFLICTRESOLVERCALLBACK_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFLICTRESOLVERCALLBACK_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;jni.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_wc.h"</cpp:file></cpp:include>

<comment type="block">/**
 * This class passes conflict resolution events from Subversion to a
 * Java object.
 * @since 1.5
 */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>ConflictResolverCallback</name>
<block>{
 <label><name>private</name>:</label>
  <comment type="block">/**
   * The Java object which handles the conflict resolution
   * events. This is a global reference, because it has to live longer
   * than the SVNClient.onProgress() call.
   */</comment>
  <decl_stmt><decl><type><name>jobject</name></type> <name>m_conflictResolver</name></decl>;</decl_stmt>

  <comment type="block">/**
   * Create a new instance, storing a global reference to the
   * corresponding Java object.
   *
   * @param jconflictResolver Reference to the Java peer.
   */</comment>
  <macro><name>ConflictResolverCallback</name><argument_list>(<argument>jobject jconflictResolver</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

 <label><name>public</name>:</label>
  <comment type="block">/**
   * Destroy the instance, and delete the global reference to the
   * Java object.
   */</comment>
  <expr_stmt><expr>~<call><name>ConflictResolverCallback</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/** Constructor function called from C JNI glue code. */</comment>
  <function_decl><type><specifier>static</specifier> <name>ConflictResolverCallback</name> *</type>
  <name>makeCConflictResolverCallback</name><parameter_list>(<param><decl><type><name>jobject</name></type> <name>jconflictResolver</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="block">/**
   * Implementation of the svn_wc_conflict_resolver_func_t API.
   */</comment>
  <function_decl><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
  <name>resolveConflict</name><parameter_list>(<param><decl><type><name>svn_wc_conflict_result_t</name> **</type><name>result</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>svn_wc_conflict_description_t</name> *</type><name>desc</name></decl></param>,
                  <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

 <label><name>protected</name>:</label>
  <comment type="block">/**
   * Delegate to m_conflictResolver.resolve(), which provides the
   * logic for the implementation of the svn_wc_conflict_resolver_func_t
   * API.
   */</comment>
  <function_decl><type><name>svn_error_t</name> *</type> <name>resolve</name><parameter_list>(<param><decl><type><name>svn_wc_conflict_result_t</name> **</type><name>result</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>svn_wc_conflict_description_t</name> *</type><name>desc</name></decl></param>,
                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

 <label><name>private</name>:</label>
  <comment type="block">/**
   * Convert the Java conflict resolution @a result into the
   * appropriate C representation.
   */</comment>
  <function_decl><type><specifier>static</specifier> <name>svn_wc_conflict_result_t</name> *</type> <name>javaResultToC</name><parameter_list>(<param><decl><type><name>jobject</name></type> <name>result</name></decl></param>,
                                                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="block">/**
   * Convert the Java conflict resolution @a choice into the
   * appropriate C enum value.
   */</comment>
  <function_decl><type><specifier>static</specifier> <name>svn_wc_conflict_choice_t</name></type> <name>javaChoiceToC</name><parameter_list>(<param><decl><type><name>jint</name></type> <name>choice</name></decl></param>)</parameter_list>;</function_decl>
}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// CONFLICTRESOLVERCALLBACK_H</comment>
</unit>
