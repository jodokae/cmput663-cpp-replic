<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/bindings/javahl/native/Pool.h"><comment type="block">/**
 * @copyright
 * ====================================================================
 * Copyright (c) 2003-2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 * @endcopyright
 *
 * @file Pool.h
 * @brief Interface of the class Pool
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>POOL_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POOL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>

<comment type="block">/**
 * This class manages one APR pool.  Objects of this class are
 * allocated on the stack of the SVNClient and SVNAdmin methods as the
 * request pool.  Leaving the methods will destroy the pool.
 */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>Pool</name>
<block>{
 <label><name>public</name>:</label>
  <expr_stmt><expr><call><name>Pool</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>~<call><name>Pool</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>apr_pool_t</name> *<macro><name>pool</name><argument_list>()</argument_list></macro> const</expr>;</expr_stmt>
  <expr_stmt><expr><name>void</name> <macro><name>clear</name><argument_list>()</argument_list></macro> const</expr>;</expr_stmt>

 <label><name>private</name>:</label>
  <comment type="block">/**
   * The apr pool request pool.
   */</comment>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>m_pool</name></decl>;</decl_stmt>

  <comment type="block">/**
   * We declare the copy constructor and assignment operator private
   * here, so that the compiler won't inadvertently use them for us.
   * The default copy constructor just copies all the data members,
   * which would create two pointers to the same pool, one of which
   * would get destroyed while the other thought it was still
   * valid...and BOOM!  Hence the private declaration.
   */</comment>
  <expr_stmt><expr><call><name>Pool</name><argument_list>(<argument><expr><name>Pool</name> &amp;<name>that</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>Pool</name> &amp;</type><name>operator</name><init>= <expr>(<name>Pool</name> &amp;<name>that</name>)</expr></init></decl>;</decl_stmt>
}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="line">// The following one-line functions are best inlined by the compiler, and</comment>
<comment type="line">// need to be implemented in the header file for that to happen.</comment>

<expr_stmt><expr><name>APR_INLINE</name>
<name>apr_pool_t</name> *<name>Pool</name>::<macro><name>pool</name> <argument_list>()</argument_list></macro> const
<block>{
  <return>return <expr><name>m_pool</name></expr>;</return>
}</block></expr></expr_stmt>

<expr_stmt><expr><name>APR_INLINE</name>
<name>void</name> <name>Pool</name>::<macro><name>clear</name><argument_list>()</argument_list></macro> const
<block>{
  <expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>m_pool</name></expr></argument>)</argument_list></call></expr>;
}</block></expr></expr_stmt>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// POOL_H</comment>
</unit>
