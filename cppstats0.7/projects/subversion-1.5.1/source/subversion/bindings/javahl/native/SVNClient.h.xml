<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/bindings/javahl/native/SVNClient.h"><comment type="block">/**
 * @copyright
 * ====================================================================
 * Copyright (c) 2003-2008 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 * @endcopyright
 *
 * @file SVNClient.h
 * @brief Interface for the SVNClient class
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVNCLIENT_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVNCLIENT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;jni.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Path.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>Revision</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>RevisionRange</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Notify</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Notify2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ConflictResolverCallback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ProgressListener</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Targets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>JNIByteArray</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Prompter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CopySources</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>DiffSummaryReceiver</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>BlameCallback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ProplistCallback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>LogMessageCallback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>InfoCallback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ListCallback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>StatusCallback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>ChangelistCallback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>CommitMessage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>StringArray</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>RevpropTable</name></decl>;</decl_stmt>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"SVNBase.h"</cpp:file></cpp:include>

<expr_stmt><expr><name>class</name> <name>SVNClient</name> :<name>public</name> <name>SVNBase</name>
<block>{
 <expr><name>public</name>:
  <name>void</name> <macro><name>info2</name><argument_list>(<argument>const char *path</argument>, <argument>Revision &amp;revision</argument>, <argument>Revision &amp;pegRevision</argument>,
             <argument>svn_depth_t depth</argument>, <argument>StringArray &amp;changelists</argument>,
             <argument>InfoCallback *callback</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <macro><name>unlock</name><argument_list>(<argument>Targets &amp;targets</argument>, <argument>bool force</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <macro><name>lock</name><argument_list>(<argument>Targets &amp;targets</argument>, <argument>const char *comment</argument>, <argument>bool force</argument>)</argument_list></macro></expr>;
  <expr><name>jobjectArray</name> <macro><name>revProperties</name><argument_list>(<argument>jobject jthis</argument>, <argument>const char *path</argument>,
                             <argument>Revision &amp;revision</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <call><name>cancelOperation</name><argument_list>()</argument_list></call></expr>;
  <expr><name>void</name> <call><name>commitMessageHandler</name><argument_list>(<argument><expr><name>CommitMessage</name> *<name>commitMessage</name></expr></argument>)</argument_list></call></expr>;
  <expr>const <name>char</name> *<call><name>getConfigDirectory</name><argument_list>()</argument_list></call></expr>;

  <comment type="block">/**
   * Set the configuration directory, taking the usual steps to
   * ensure that Subversion's config file templates exist in the
   * specified location.
   */</comment>
  <expr><name>void</name> <call><name>setConfigDirectory</name><argument_list>(<argument><expr>const <name>char</name> *<name>configDir</name></expr></argument>)</argument_list></call></expr>;

  <expr><name>void</name> <macro><name>blame</name><argument_list>(<argument>const char *path</argument>, <argument>Revision &amp;pegRevision</argument>,
             <argument>Revision &amp;revisionStart</argument>, <argument>Revision &amp;revisionEnd</argument>,
             <argument>bool ignoreMimeType</argument>, <argument>bool includeMergedRevisions</argument>,
             <argument>BlameCallback *callback</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <macro><name>relocate</name><argument_list>(<argument>const char *from</argument>, <argument>const char *to</argument>, <argument>const char *path</argument>,
                <argument>bool recurse</argument>)</argument_list></macro></expr>;
  <expr><name>jbyteArray</name> <call><name>fileContent</name><argument_list>(<argument><expr>const <name>char</name> *<name>path</name></expr></argument>, <argument><expr><name>Revision</name> &amp;<name>revision</name></expr></argument>,
                         <argument><expr><name>Revision</name> &amp;<name>pegRevision</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>void</name> <macro><name>streamFileContent</name><argument_list>(<argument>const char *path</argument>, <argument>Revision &amp;revision</argument>,
                         <argument>Revision &amp;pegRevision</argument>, <argument>jobject outputStream</argument>,
                         <argument>size_t bufSize</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <macro><name>propertySet</name><argument_list>(<argument>const char *path</argument>, <argument>const char *name</argument>, <argument>const char *value</argument>,
                   <argument>svn_depth_t depth</argument>, <argument>StringArray &amp;changelists</argument>, <argument>bool force</argument>,
                   <argument>RevpropTable &amp;revprops</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <macro><name>properties</name><argument_list>(<argument>const char *path</argument>, <argument>Revision &amp;revision</argument>,
                  <argument>Revision &amp;pegRevision</argument>, <argument>svn_depth_t depth</argument>,
                  <argument>StringArray &amp;changelists</argument>, <argument>ProplistCallback *callback</argument>)</argument_list></macro></expr>;
  <expr><name>jobject</name> <call><name>getMergeinfo</name><argument_list>(<argument><expr>const <name>char</name> *<name>target</name></expr></argument>, <argument><expr><name>Revision</name> &amp;<name>pegRevision</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>void</name> <macro><name>getMergeinfoLog</name><argument_list>(<argument>int type</argument>, <argument>const char *pathOrURL</argument>,
                       <argument>Revision &amp;pegRevision</argument>, <argument>const char *mergeSourceURL</argument>,
                       <argument>Revision &amp;srcPegREvision</argument>, <argument>bool discoverChangedPaths</argument>,
                       <argument>StringArray &amp;revProps</argument>, <argument>LogMessageCallback *callback</argument>)</argument_list></macro></expr>;
  <expr><name>jobjectArray</name> <call><name>suggestMergeSources</name><argument_list>(<argument><expr>const <name>char</name> *<name>path</name></expr></argument>, <argument><expr><name>Revision</name> &amp;<name>pegRevision</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>void</name> <macro><name>merge</name><argument_list>(<argument>const char *path1</argument>, <argument>Revision &amp;revision1</argument>, <argument>const char *path2</argument>,
             <argument>Revision &amp;revision2</argument>, <argument>const char *localPath</argument>, <argument>bool force</argument>,
             <argument>svn_depth_t depth</argument>, <argument>bool ignoreAncestry</argument>, <argument>bool dryRun</argument>,
             <argument>bool recordOnly</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <macro><name>merge</name><argument_list>(<argument>const char *path</argument>, <argument>Revision &amp;pegRevision</argument>,
             <argument>std::vector&lt;RevisionRange&gt; &amp;rangesToMerge</argument>,
             <argument>const char *localPath</argument>, <argument>bool force</argument>, <argument>svn_depth_t depth</argument>,
             <argument>bool ignoreAncestry</argument>, <argument>bool dryRun</argument>, <argument>bool recordOnly</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <macro><name>mergeReintegrate</name><argument_list>(<argument>const char *path</argument>, <argument>Revision &amp;pegRevision</argument>,
                        <argument>const char *localPath</argument>, <argument>bool dryRun</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <macro><name>doImport</name><argument_list>(<argument>const char *path</argument>, <argument>const char *url</argument>, <argument>const char *message</argument>,
                <argument>svn_depth_t depth</argument>, <argument>bool noIgnore</argument>, <argument>bool ignoreUnknownNodeTypes</argument>,
                <argument>RevpropTable &amp;revprops</argument>)</argument_list></macro></expr>;
  <expr><name>jlong</name> <macro><name>doSwitch</name><argument_list>(<argument>const char *path</argument>, <argument>const char *url</argument>, <argument>Revision &amp;revision</argument>,
                 <argument>Revision &amp;pegRevision</argument>, <argument>svn_depth_t depth</argument>,
                 <argument>bool depthIsSticky</argument>, <argument>bool ignoreExternals</argument>,
                 <argument>bool allowUnverObstructions</argument>)</argument_list></macro></expr>;
  <expr><name>jlong</name> <macro><name>doExport</name><argument_list>(<argument>const char *srcPath</argument>, <argument>const char *destPath</argument>,
                 <argument>Revision &amp;revision</argument>, <argument>Revision &amp;pegRevision</argument>, <argument>bool force</argument>,
                 <argument>bool ignoreExternals</argument>, <argument>svn_depth_t depth</argument>,
                 <argument>const char *nativeEOL</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <macro><name>resolve</name><argument_list>(<argument>const char *path</argument>, <argument>svn_depth_t depth</argument>,
               <argument>svn_wc_conflict_choice_t choice</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <call><name>cleanup</name><argument_list>(<argument><expr>const <name>char</name> *<name>path</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>void</name> <macro><name>mkdir</name><argument_list>(<argument>Targets &amp;targets</argument>, <argument>const char *message</argument>, <argument>bool makeParents</argument>,
             <argument>RevpropTable &amp;revprops</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <macro><name>move</name><argument_list>(<argument>Targets &amp;srcPaths</argument>, <argument>const char *destPath</argument>,
            <argument>const char *message</argument>, <argument>bool force</argument>, <argument>bool moveAsChild</argument>,
            <argument>bool makeParents</argument>, <argument>RevpropTable &amp;revprops</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <macro><name>copy</name><argument_list>(<argument>CopySources &amp;copySources</argument>, <argument>const char *destPath</argument>,
            <argument>const char *message</argument>, <argument>bool copyAsChild</argument>, <argument>bool makeParents</argument>,
            <argument>RevpropTable &amp;revprops</argument>)</argument_list></macro></expr>;
  <expr><name>jlong</name> <macro><name>commit</name><argument_list>(<argument>Targets &amp;targets</argument>, <argument>const char *message</argument>, <argument>svn_depth_t depth</argument>,
               <argument>bool noUnlock</argument>, <argument>bool keepChangelist</argument>,
               <argument>StringArray &amp;changelists</argument>, <argument>RevpropTable &amp;revprops</argument>)</argument_list></macro></expr>;
  <expr><name>jlongArray</name> <macro><name>update</name><argument_list>(<argument>Targets &amp;targets</argument>, <argument>Revision &amp;revision</argument>, <argument>svn_depth_t depth</argument>,
                    <argument>bool depthIsSticky</argument>, <argument>bool ignoreExternals</argument>,
                    <argument>bool allowUnverObstructions</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <macro><name>add</name><argument_list>(<argument>const char *path</argument>, <argument>svn_depth_t depth</argument>, <argument>bool force</argument>, <argument>bool no_ignore</argument>,
           <argument>bool add_parents</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <macro><name>revert</name><argument_list>(<argument>const char *path</argument>, <argument>svn_depth_t depth</argument>, <argument>StringArray &amp;changelists</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <macro><name>remove</name><argument_list>(<argument>Targets &amp;targets</argument>, <argument>const char *message</argument>, <argument>bool force</argument>,
              <argument>bool keep_local</argument>, <argument>RevpropTable &amp;revprops</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <call><name>notification</name><argument_list>(<argument><expr><name>Notify</name> *<name>notify</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>void</name> <call><name>notification2</name><argument_list>(<argument><expr><name>Notify2</name> *<name>notify2</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>void</name> <call><name>setConflictResolver</name><argument_list>(<argument><expr><name>ConflictResolverCallback</name> *<name>conflictResolver</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>void</name> <call><name>setProgressListener</name><argument_list>(<argument><expr><name>ProgressListener</name> *<name>progressListener</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>jlong</name> <macro><name>checkout</name><argument_list>(<argument>const char *moduleName</argument>, <argument>const char *destPath</argument>,
                 <argument>Revision &amp;revision</argument>, <argument>Revision &amp;pegRevsion</argument>, <argument>svn_depth_t depth</argument>,
                 <argument>bool ignoreExternals</argument>, <argument>bool allowUnverObstructions</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <macro><name>logMessages</name><argument_list>(<argument>const char *path</argument>, <argument>Revision &amp;pegRevision</argument>,
                   <argument>Revision &amp;revisionStart</argument>,
                   <argument>Revision &amp;revisionEnd</argument>, <argument>bool stopOnCopy</argument>,
                   <argument>bool discoverPaths</argument>, <argument>bool includeMergedRevisions</argument>,
                   <argument>StringArray &amp;revProps</argument>,
                   <argument>long limit</argument>, <argument>LogMessageCallback *callback</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <call><name>setPrompt</name><argument_list>(<argument><expr><name>Prompter</name> *<name>prompter</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>void</name> <call><name>password</name><argument_list>(<argument><expr>const <name>char</name> *<name>pi_password</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>void</name> <call><name>username</name><argument_list>(<argument><expr>const <name>char</name> *<name>pi_username</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>jstring</name> <call><name>getAdminDirectoryName</name><argument_list>()</argument_list></call></expr>;
  <expr><name>jboolean</name> <call><name>isAdminDirectory</name><argument_list>(<argument><expr>const <name>char</name> *<name>name</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>jobject</name> <call><name>info</name><argument_list>(<argument><expr>const <name>char</name> *<name>path</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>void</name> <macro><name>addToChangelist</name><argument_list>(<argument>Targets &amp;srcPaths</argument>, <argument>const char *changelist</argument>,
                       <argument>svn_depth_t depth</argument>, <argument>StringArray &amp;changelists</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <macro><name>removeFromChangelists</name><argument_list>(<argument>Targets &amp;srcPaths</argument>, <argument>svn_depth_t depth</argument>,
                             <argument>StringArray &amp;changelists</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <macro><name>getChangelists</name><argument_list>(<argument>const char *path</argument>, <argument>StringArray &amp;changelists</argument>,
                      <argument>svn_depth_t depth</argument>, <argument>ChangelistCallback *callback</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <macro><name>status</name><argument_list>(<argument>const char *path</argument>, <argument>svn_depth_t depth</argument>, <argument>bool onServer</argument>,
              <argument>bool getAll</argument>, <argument>bool noIgnore</argument>, <argument>bool ignoreExternals</argument>,
              <argument>StringArray &amp;changelists</argument>, <argument>StatusCallback *callback</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <macro><name>list</name><argument_list>(<argument>const char *url</argument>, <argument>Revision &amp;revision</argument>, <argument>Revision &amp;pegRevision</argument>,
            <argument>svn_depth_t depth</argument>, <argument>int direntFields</argument>, <argument>bool fetchLocks</argument>,
            <argument>ListCallback *callback</argument>)</argument_list></macro></expr>;
  <expr><name>jobject</name> <macro><name>revProperty</name><argument_list>(<argument>jobject jthis</argument>, <argument>const char *path</argument>, <argument>const char *name</argument>,
                      <argument>Revision &amp;rev</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <macro><name>setRevProperty</name><argument_list>(<argument>jobject jthis</argument>, <argument>const char *path</argument>, <argument>const char *name</argument>,
                      <argument>Revision &amp;rev</argument>, <argument>const char *value</argument>, <argument>bool force</argument>)</argument_list></macro></expr>;
  <expr><name>jstring</name> <macro><name>getVersionInfo</name><argument_list>(<argument>const char *path</argument>, <argument>const char *trailUrl</argument>,
                         <argument>bool lastChanged</argument>)</argument_list></macro></expr>;
  <expr><name>jobject</name> <macro><name>propertyGet</name><argument_list>(<argument>jobject jthis</argument>, <argument>const char *path</argument>, <argument>const char *name</argument>,
                      <argument>Revision &amp;revision</argument>, <argument>Revision &amp;pegRevision</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <macro><name>diff</name><argument_list>(<argument>const char *target1</argument>, <argument>Revision &amp;revision1</argument>,
            <argument>const char *target2</argument>, <argument>Revision &amp;revision2</argument>,
            <argument>const char *relativeToDir</argument>, <argument>const char *outfileName</argument>,
            <argument>svn_depth_t depth</argument>, <argument>StringArray &amp;changelists</argument>,
            <argument>bool ignoreAncestry</argument>, <argument>bool noDiffDelete</argument>, <argument>bool force</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <macro><name>diff</name><argument_list>(<argument>const char *target</argument>, <argument>Revision &amp;pegevision</argument>,
            <argument>Revision &amp;startRevision</argument>, <argument>Revision &amp;endRevision</argument>,
            <argument>const char *relativeToDir</argument>, <argument>const char *outfileName</argument>,
            <argument>svn_depth_t depth</argument>, <argument>StringArray &amp;changelists</argument>,
            <argument>bool ignoreAncestry</argument>, <argument>bool noDiffDelete</argument>, <argument>bool force</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <macro><name>diffSummarize</name><argument_list>(<argument>const char *target1</argument>, <argument>Revision &amp;revision1</argument>,
                     <argument>const char *target2</argument>, <argument>Revision &amp;revision2</argument>,
                     <argument>svn_depth_t depth</argument>, <argument>StringArray &amp;changelists</argument>,
                     <argument>bool ignoreAncestry</argument>, <argument>DiffSummaryReceiver &amp;receiver</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <macro><name>diffSummarize</name><argument_list>(<argument>const char *target</argument>, <argument>Revision &amp;pegRevision</argument>,
                     <argument>Revision &amp;startRevision</argument>, <argument>Revision &amp;endRevision</argument>,
                     <argument>svn_depth_t depth</argument>, <argument>StringArray &amp;changelists</argument>,
                     <argument>bool ignoreAncestry</argument>, <argument>DiffSummaryReceiver &amp;receiver</argument>)</argument_list></macro></expr>;

  <expr>const <name>char</name> *<call><name>getLastPath</name><argument_list>()</argument_list></call></expr>;
  <expr><name>void</name> <macro><name>dispose</name><argument_list>(<argument>jobject jthis</argument>)</argument_list></macro></expr>;
  <expr>static <name>SVNClient</name> *<macro><name>getCppObject</name><argument_list>(<argument>jobject jthis</argument>)</argument_list></macro></expr>;
  <expr><call><name>SVNClient</name><argument_list>()</argument_list></call></expr>;
  <expr><name>virtual</name> ~<call><name>SVNClient</name><argument_list>()</argument_list></call></expr>;
  <expr>static <name>jobject</name> <call><name>createJavaLock</name><argument_list>(<argument><expr>const <name>svn_lock_t</name> *<name>lock</name></expr></argument>)</argument_list></call></expr>;
 <expr><name>private</name>:
  static <name>svn_error_t</name> *<call><name>checkCancel</name><argument_list>(<argument><expr><name>void</name> *<name>cancelBaton</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>jobject</name> <macro><name>createJavaProperty</name><argument_list>(<argument>jobject jthis</argument>, <argument>const char *path</argument>,
                             <argument>const char *name</argument>, <argument>svn_string_t *value</argument>)</argument_list></macro></expr>;
  <expr><name>svn_client_ctx_t</name> *<call><name>getContext</name><argument_list>(<argument><expr>const <name>char</name> *<name>message</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>svn_stream_t</name> *<call><name>createReadStream</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>pool</name></expr></argument>, <argument><expr>const <name>char</name> *<name>path</name></expr></argument>,
                                 <argument><expr><name>Revision</name> &amp;<name>revision</name></expr></argument>, <argument><expr><name>Revision</name> &amp;<name>pegRevision</name></expr></argument>,
                                 <argument><expr><name>size_t</name> &amp;<name>size</name></expr></argument>)</argument_list></call></expr>;
  <comment type="block">/**
   * Shared implementation for diff() APIs. When pegRevision is
   * provided, revision1 and revision2 equate to startRevision and
   * endRevision (respectively), and target2 is ignored.
   */</comment>
  <expr><name>void</name> <macro><name>diff</name><argument_list>(<argument>const char *target1</argument>, <argument>Revision &amp;revision1</argument>,
            <argument>const char *target2</argument>, <argument>Revision &amp;revision2</argument>,
            <argument>Revision *pegRevision</argument>, <argument>const char *relativeToDir</argument>,
            <argument>const char *outfileName</argument>, <argument>svn_depth_t depth</argument>, <argument>StringArray &amp;changelists</argument>,
            <argument>bool ignoreAncestry</argument>, <argument>bool noDiffDelete</argument>, <argument>bool force</argument>)</argument_list></macro></expr>;

  <expr><name>jobject</name> <call><name>createJavaInfo</name><argument_list>(<argument><expr>const <name>svn_wc_entry_t</name> *<name>entry</name></expr></argument>)</argument_list></call></expr>;

  <expr><name>Notify</name> *<name>m_notify</name></expr>;
  <expr><name>Notify2</name> *<name>m_notify2</name></expr>;
  <expr><name>ConflictResolverCallback</name> *<name>m_conflictResolver</name></expr>;
  <expr><name>ProgressListener</name> *<name>m_progressListener</name></expr>;
  <expr><name>Prompter</name> *<name>m_prompter</name></expr>;
  <expr><name>Path</name> <name>m_lastPath</name></expr>;
  <expr><name>bool</name> <name>m_cancelOperation</name></expr>;
  <expr><name>CommitMessage</name> *<name>m_commitMessage</name></expr>;

  <expr><name>jobjectArray</name> <call><name>makeJRevisionRangeArray</name><argument_list>(<argument><expr><name>apr_array_header_t</name> *<name>ranges</name></expr></argument>)</argument_list></call></expr>;

  <comment type="block">/**
   * Implements the svn_client_get_commit_log3_t API.
   */</comment>
  <expr>static <name>svn_error_t</name> *<call><name>getCommitMessage</name><argument_list>(<argument><expr>const <name>char</name> **<name>log_msg</name></expr></argument>,
                                       <argument><expr>const <name>char</name> **<name>tmp_file</name></expr></argument>,
                                       <argument><expr>const <name>apr_array_header_t</name> *
                                       <name>commit_items</name></expr></argument>,
                                       <argument><expr><name>void</name> *<name>baton</name></expr></argument>,
                                       <argument><expr><name>apr_pool_t</name> *<name>pool</name></expr></argument>)</argument_list></call></expr>;
  <comment type="block">/**
   * Produce a baton for the getCommitMessage() callback.
   */</comment>
  <expr><name>void</name> *<call><name>getCommitMessageBaton</name><argument_list>(<argument><expr>const <name>char</name> *<name>message</name></expr></argument>)</argument_list></call></expr>;

  <expr><name>std</name>::<name>string</name> <name>m_userName</name></expr>;
  <expr><name>std</name>::<name>string</name> <name>m_passWord</name></expr>;
  <expr><name>std</name>::<name>string</name> <name>m_configDir</name></expr>;
}</block></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// SVNCLIENT_H</comment>
</unit>
