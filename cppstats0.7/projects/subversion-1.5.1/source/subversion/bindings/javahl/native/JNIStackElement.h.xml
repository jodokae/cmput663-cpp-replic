<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/bindings/javahl/native/JNIStackElement.h"><comment type="block">/**
 * @copyright
 * ====================================================================
 * Copyright (c) 2003-2004 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 * @endcopyright
 *
 * @file JNIStackElement.h
 * @brief Interface of the class JNIStackElement
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>JNISTACKELEMENT_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNISTACKELEMENT_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;jni.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"JNIUtil.h"</cpp:file></cpp:include>

<comment type="block">/**
 * Create a stack element on the stack, which will be used to track
 * the entry and exit of a method.  Assumes that there are a local
 * variables named "env" and "jthis" available.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNIEntry</name><parameter_list>(<param><type><name>c</name></type></param>,<param><type><name>m</name></type></param>)</parameter_list></cpp:macro> <cpp:value>JNIStackElement se(env, #c, #m, jthis);</cpp:value></cpp:define>

<comment type="block">/**
 * Create a stack element on the stack, which will be used to track
 * the entry and exit of a static method.  Assumes that there are a
 * local variables named "env" and "jthis" available.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNIEntryStatic</name><parameter_list>(<param><type><name>c</name></type></param>,<param><type><name>m</name></type></param>)</parameter_list></cpp:macro> <cpp:value>JNIStackElement se(env, #c, #m, jclazz);</cpp:value></cpp:define>


<comment type="block">/**
 * This class is used to mark the entry and exit of a method, and can
 * generate a log messages at those points.  The members are used to
 * generate the exit message
 */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>JNIStackElement</name>
<block>{
 <label><name>public</name>:</label>
  <macro><name>JNIStackElement</name><argument_list>(<argument>JNIEnv *env</argument>, <argument>const char *clazz</argument>,
                  <argument>const char *method</argument>, <argument>jobject jthis</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
  <expr_stmt><expr><name>virtual</name> ~<call><name>JNIStackElement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

 <label><name>private</name>:</label>
  <comment type="block">/**
   * The name of the method.
   */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>m_method</name></decl>;</decl_stmt>

  <comment type="block">/**
   * The name of the class.
   */</comment>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>m_clazz</name></decl>;</decl_stmt>

  <comment type="block">/**
   * A buffer for the result for jthis.toString to identify the
   * object.
   */</comment>
  <decl_stmt><decl><type><name>char</name></type> <name><name>m_objectID</name><index>[<expr><name>JNIUtil</name>::<name>formatBufferSize</name></expr>]</index></name></decl>;</decl_stmt>
}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// JNISTACKELEMENT_H</comment>
</unit>
