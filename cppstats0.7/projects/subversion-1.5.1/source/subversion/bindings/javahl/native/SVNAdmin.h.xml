<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/bindings/javahl/native/SVNAdmin.h"><comment type="block">/**
 * @copyright
 * ====================================================================
 * Copyright (c) 2003-2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 * @endcopyright
 *
 * @file SVNAdmin.h
 * @brief Interface of the class SVNAdmin
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVNADMIN_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVNADMIN_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;jni.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_repos.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"SVNBase.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Revision.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Outputer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Inputer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"MessageReceiver.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Targets.h"</cpp:file></cpp:include>

<expr_stmt><expr><name>class</name> <name>SVNAdmin</name> : <name>public</name> <name>SVNBase</name>
<block>{
 <expr><name>public</name>:
  <name>void</name> <call><name>rmlocks</name><argument_list>(<argument><expr>const <name>char</name> *<name>path</name></expr></argument>, <argument><expr><name>Targets</name> &amp;<name>locks</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>jobjectArray</name> <call><name>lslocks</name><argument_list>(<argument><expr>const <name>char</name> *<name>path</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>void</name> <call><name>verify</name><argument_list>(<argument><expr>const <name>char</name> *<name>path</name></expr></argument>, <argument><expr><name>Outputer</name> &amp;<name>messageOut</name></expr></argument>,
              <argument><expr><name>Revision</name> &amp;<name>revisionStart</name></expr></argument>, <argument><expr><name>Revision</name> &amp;<name>revisionEnd</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>void</name> <macro><name>setRevProp</name><argument_list>(<argument>const char *path</argument>, <argument>Revision &amp;revision</argument>,
                  <argument>const char *propName</argument>, <argument>const char *propValue</argument>,
                  <argument>bool usePreRevPropChangeHook</argument>,
                  <argument>bool usePostRevPropChangeHook</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <call><name>rmtxns</name><argument_list>(<argument><expr>const <name>char</name> *<name>path</name></expr></argument>, <argument><expr><name>Targets</name> &amp;<name>transactions</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>jlong</name> <call><name>recover</name><argument_list>(<argument><expr>const <name>char</name> *<name>path</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>void</name> <call><name>lstxns</name><argument_list>(<argument><expr>const <name>char</name> *<name>path</name></expr></argument>, <argument><expr><name>MessageReceiver</name> &amp;<name>messageReceiver</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>void</name> <macro><name>load</name><argument_list>(<argument>const char *path</argument>, <argument>Inputer &amp;dataIn</argument>, <argument>Outputer &amp;messageOut</argument>,
            <argument>bool ignoreUUID</argument>, <argument>bool forceUUID</argument>, <argument>bool usePreCommitHook</argument>,
            <argument>bool usePostCommitHook</argument>, <argument>const char *relativePath</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <call><name>listUnusedDBLogs</name><argument_list>(<argument><expr>const <name>char</name> *<name>path</name></expr></argument>,
                        <argument><expr><name>MessageReceiver</name> &amp;<name>messageReceiver</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>void</name> <call><name>listDBLogs</name><argument_list>(<argument><expr>const <name>char</name> *<name>path</name></expr></argument>, <argument><expr><name>MessageReceiver</name> &amp;<name>messageReceiver</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>void</name> <macro><name>hotcopy</name><argument_list>(<argument>const char *path</argument>, <argument>const char *targetPath</argument>, <argument>bool cleanLogs</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <macro><name>dump</name><argument_list>(<argument>const char *path</argument>, <argument>Outputer &amp;dataOut</argument>, <argument>Outputer &amp;messageOut</argument>,
            <argument>Revision &amp;revsionStart</argument>, <argument>Revision &amp;RevisionEnd</argument>,
            <argument>bool incremental</argument>, <argument>bool useDeltas</argument>)</argument_list></macro></expr>;
  <expr><name>void</name> <call><name>deltify</name><argument_list>(<argument><expr>const <name>char</name> *<name>path</name></expr></argument>, <argument><expr><name>Revision</name> &amp;<name>start</name></expr></argument>, <argument><expr><name>Revision</name> &amp;<name>end</name></expr></argument>)</argument_list></call></expr>;
  <expr><name>void</name> <macro><name>create</name><argument_list>(<argument>const char *path</argument>, <argument>bool ignoreUUID</argument>, <argument>bool forceUUID</argument>,
              <argument>const char *configPath</argument>, <argument>const char *fstype</argument>)</argument_list></macro></expr>;
  <expr><call><name>SVNAdmin</name><argument_list>()</argument_list></call></expr>;
  <expr><name>virtual</name> ~<call><name>SVNAdmin</name><argument_list>()</argument_list></call></expr>;
  <expr><name>void</name> <macro><name>dispose</name><argument_list>(<argument>jobject jthis</argument>)</argument_list></macro></expr>;
  <expr>static <name>SVNAdmin</name> *<macro><name>getCppObject</name><argument_list>(<argument>jobject jthis</argument>)</argument_list></macro></expr>;

 <expr><name>private</name>:
  static <name>svn_error_t</name> *<macro><name>getRevnum</name><argument_list>(<argument>svn_revnum_t *revnum</argument>,
                                <argument>const svn_opt_revision_t *revision</argument>,
                                <argument>svn_revnum_t youngest</argument>, <argument>svn_repos_t *repos</argument>,
                                <argument>apr_pool_t *pool</argument>)</argument_list></macro></expr>;
}</block></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// SVNADMIN_H</comment>
</unit>
