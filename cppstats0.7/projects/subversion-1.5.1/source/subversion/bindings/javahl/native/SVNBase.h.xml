<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/bindings/javahl/native/SVNBase.h"><comment type="block">/**
 * @copyright
 * ====================================================================
 * Copyright (c) 2003-2004 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 * @endcopyright
 *
 * @file SVNBase.h
 * @brief Interface of the class SVNBase
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVNBASE_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVNBASE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;jni.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>class</name></type> <name>SVNBase</name>
<block>{
 <label><name>public</name>:</label>
  <expr_stmt><expr><call><name>SVNBase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>virtual</name> ~<call><name>SVNBase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/**
   * Return @c this as a @c jlong.
   *
   * @since 1.4.0
   */</comment>
  <function_decl><type><name>jlong</name></type> <name>getCppAddr</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="block">/**
   * Deletes this C++ peer object, and clears the memory address of
   * the corresponding Java object @a jthis which points to it.
   *
   * @since 1.4.0
   */</comment>
  <decl_stmt><decl><type><name>virtual</name> <name>void</name></type> <name>dispose</name><argument_list>(<argument><expr><name>jobject</name> <name>jthis</name></expr></argument>)</argument_list> <init>= <expr>0</expr></init></decl>;</decl_stmt>

  <comment type="block">/**
   * This method should never be called, as @c dispose() should be
   * called explicitly.  When @c dispose() fails to be called, this
   * method assures that this C++ peer object has been enqueued for
   * deletion.
   *
   * @since 1.4.0
   */</comment>
  <function_decl><type><name>void</name></type> <name>finalize</name><parameter_list>()</parameter_list>;</function_decl>

 <label><name>protected</name>:</label>
  <comment type="block">/**
   * Return the value of the @c cppAddr instance field from the @a
   * jthis Java object, or @c 0 if an error occurs, or the address
   * otherwise can't be determined.  @a fid is expected to point to
   * 0 if not already known, in which case it's looked up using @a
   * className.
   *
   * @since 1.4.0
   */</comment>
  <function_decl><type><specifier>static</specifier> <name>jlong</name></type> <name>findCppAddrForJObject</name><parameter_list>(<param><decl><type><name>jobject</name></type> <name>jthis</name></decl></param>, <param><decl><type><name>jfieldID</name> *</type><name>fid</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>className</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="block">/**
   * Deletes @c this, then attempts to null out the @c jthis.cppAddr
   * instance field on the corresponding Java object.
   *
   * @since 1.4.0
   */</comment>
  <function_decl><type><name>void</name></type> <name>dispose</name><parameter_list>(<param><decl><type><name>jobject</name></type> <name>jthis</name></decl></param>, <param><decl><type><name>jfieldID</name> *</type><name>fid</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>className</name></decl></param>)</parameter_list>;</function_decl>

 <label><name>private</name>:</label>
  <comment type="block">/**
   * If the value pointed to by @a fid is zero, find the @c jfieldID
   * for the @c cppAddr instance field of @c className.
   *
   * @since 1.4.0
   */</comment>
  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>findCppAddrFieldID</name><parameter_list>(<param><decl><type><name>jfieldID</name> *</type><name>fid</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>className</name></decl></param>,
                                 <param><decl><type><name>JNIEnv</name> *</type><name>env</name></decl></param>)</parameter_list>;</function_decl>
}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// SVNBASE_H</comment>
</unit>
