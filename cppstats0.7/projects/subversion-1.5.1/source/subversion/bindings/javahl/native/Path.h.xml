<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/bindings/javahl/native/Path.h"><comment type="block">/**
 * @copyright
 * ====================================================================
 * Copyright (c) 2003-2006 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 * @endcopyright
 *
 * @file Path.h
 * @brief Interface of the C++ class Path.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PATH_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;jni.h&gt;</cpp:file></cpp:include>
<struct_decl>struct <name>svn_error_t</name>;</struct_decl>

<comment type="block">/**
 * Encapsulation for Subversion Path handling
 */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>Path</name>
<block>{
 <label><name>private</name>:</label>
  <comment type="line">// The path to be stored.</comment>
  <expr_stmt><expr><name>std</name>::<name>string</name> <name>m_path</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>m_error_occured</name></decl>;</decl_stmt>

  <comment type="block">/**
   * Initialize the class.
   *
   * @param pi_path Path string
   */</comment>
  <function_decl><type><name>void</name></type> <name>init</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pi_path</name></decl></param>)</parameter_list>;</function_decl>

 <label><name>public</name>:</label>
  <comment type="block">/**
   * Constructor that takes a string as parameter.
   * The string is converted to subversion internal
   * representation. The string is copied.
   *
   * @param pi_path Path string
   */</comment>
  <expr_stmt><expr><call><name>Path</name><argument_list>(<argument><expr>const <name>std</name>::<name>string</name> &amp;<name>pi_path</name> = ""</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/**
   * Constructor
   *
   * @see Path::Path (const std::string &amp;)
   * @param pi_path Path string
   */</comment>
  <expr_stmt><expr><call><name>Path</name><argument_list>(<argument><expr>const <name>char</name> *<name>pi_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/**
   * Copy constructor
   *
   * @param pi_path Path to be copied
   */</comment>
  <expr_stmt><expr><call><name>Path</name><argument_list>(<argument><expr>const <name>Path</name> &amp;<name>pi_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/**
   * Assignment operator
   */</comment>
  <decl_stmt><decl><type><name>Path</name> &amp;</type><name>operator</name><init>=<expr>(const <name>Path</name>&amp;)</expr></init></decl>;</decl_stmt>

  <comment type="block">/**
   * @return Path string
   */</comment>
  <expr_stmt><expr>const <name>std</name>::<name>string</name> &amp;<macro><name>path</name><argument_list>()</argument_list></macro> const</expr>;</expr_stmt>

  <comment type="block">/**
   * @return Path string as a C string
   */</comment>
  <expr_stmt><expr>const <name>char</name> *<macro><name>c_str</name><argument_list>()</argument_list></macro> const</expr>;</expr_stmt>

  <expr_stmt><expr><name>svn_error_t</name> *<macro><name>error_occured</name><argument_list>()</argument_list></macro> const</expr>;</expr_stmt>

  <comment type="block">/**
   * Returns whether @a path is non-NULL and passes the @c
   * svn_path_check_valid() test.
   *
   * @since 1.4.0
   */</comment>
  <function_decl><type><specifier>static</specifier> <name>jboolean</name></type> <name>isValid</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>)</parameter_list>;</function_decl>
}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// PATH_H</comment>
</unit>
