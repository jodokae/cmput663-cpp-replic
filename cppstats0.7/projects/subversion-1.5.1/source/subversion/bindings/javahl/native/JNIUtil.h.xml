<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/bindings/javahl/native/JNIUtil.h"><comment type="block">/**
 * @copyright
 * ====================================================================
 * Copyright (c) 2003-2004 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 * @endcopyright
 *
 * @file JNIUtil.h
 * @brief Interface of the class JNIUtil
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>JNIUTIL_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNIUTIL_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>
<struct_decl>struct <name>apr_pool_t</name>;</struct_decl>
<struct_decl>struct <name>svn_error</name>;</struct_decl>
<decl_stmt><decl><type><name>class</name></type> <name>JNIMutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SVNBase</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Pool</name></decl>;</decl_stmt>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;jni.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<struct_decl>struct <name>svn_error_t</name>;</struct_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JAVA_PACKAGE</name></cpp:macro> <cpp:value>"org/tigris/subversion/javahl"</cpp:value></cpp:define>

<comment type="block">/**
 * Class to hold a number of JNI related utility methods.  No Objects
 * of this class are ever created.
 */</comment>
<decl_stmt><decl><type><name>class</name></type> <name>JNIUtil</name>
<block>{
 <label><name>public</name>:</label>
  <function_decl><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>preprocessPath</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *&amp;</type><name>path</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="block">/**
   * Throw the Java NativeException instance named by
   * exceptionClassName.  A NativeException sub-class must supply a
   * 3-arg constructor identical to that of NativeException.  @a
   * source is any file name and line number information.
   */</comment>
  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>throwNativeException</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>exceptionClassName</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>source</name> <init>= <expr><name>NULL</name></expr></init></decl></param>,
                                   <name>int</name> <name>aprErr</name> = -1)</parameter_list>;</function_decl>

  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>throwNullPointerException</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>message</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><specifier>static</specifier> <name>jbyteArray</name></type> <name>makeJByteArray</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>signed</name> <name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>int</name></type> <name>length</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>setRequestPool</name><parameter_list>(<param><decl><type><name>Pool</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><specifier>static</specifier> <name>Pool</name> *</type><name>getRequestPool</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><specifier>static</specifier> <name>jobject</name></type> <name>createDate</name><parameter_list>(<param><decl><type><name>apr_time_t</name></type> <name>time</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>logMessage</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>message</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><specifier>static</specifier> <name>int</name></type> <name>getLogLevel</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><specifier>static</specifier> <name>char</name> *</type><name>getFormatBuffer</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>initLogFile</name><parameter_list>(<param><decl><type><name>int</name></type> <name>level</name></decl></param>, <param><decl><type><name>jstring</name></type> <name>path</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><specifier>static</specifier> <name>jstring</name></type> <name>makeJString</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txt</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>isJavaExceptionThrown</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><specifier>static</specifier> <name>JNIEnv</name> *</type><name>getEnv</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>setEnv</name><parameter_list>(<param><decl><type><name>JNIEnv</name> *</type></decl></param>)</parameter_list>;</function_decl>

  <comment type="block">/**
   * @return Whether any Throwable has been raised.
   */</comment>
  <function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>isExceptionThrown</name><parameter_list>()</parameter_list>;</function_decl>

  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handleAPRError</name><parameter_list>(<param><decl><type><name>int</name></type> <name>error</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>op</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="block">/**
   * Put @a object in the list of finalized objects queued up to be
   * deleted (by another thread) during the next operation.
   *
   * @param object The C++ peer of the finalized (Java) object.
   * @since 1.4.0
   */</comment>
  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>enqueueForDeletion</name><parameter_list>(<param><decl><type><name>SVNBase</name> *</type><name>object</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="block">/**
   * @deprecated Use the more appropriately named
   * enqueueForDeletion() instead.
   */</comment>
  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>putFinalizedClient</name><parameter_list>(<param><decl><type><name>SVNBase</name> *</type><name>cl</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="block">/**
   * Convert any exception that may have been thrown into a textual
   * representation.  Return @c NULL if no exception has
   * occurred. Useful for converting Java @c Exceptions into @c
   * svn_error_t's.
   */</comment>
  <function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>thrownExceptionToCString</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="block">/**
   * Throw a Java exception corresponding to err, and run
   * svn_error_clear() on err.
   */</comment>
  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handleSVNError</name><parameter_list>(<param><decl><type><name>svn_error_t</name> *</type><name>err</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><specifier>static</specifier> <name>jstring</name></type> <name>makeSVNErrorMessage</name><parameter_list>(<param><decl><type><name>svn_error_t</name> *</type><name>err</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="block">/**
   * Create and throw a java.lang.Throwable instance.
   *
   * @param name The class name (in path form, with slashes in lieu
   * of dots) of the Throwable to create and raise.
   * @param message The message text of the Throwable.
   */</comment>
  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>raiseThrowable</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>message</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="block">/**
   * Creates and throws a JNIError.
   *
   * @param message The message text of the JNIError.
   */</comment>
  <function><type><specifier>static</specifier> <name>void</name></type> <name>throwError</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>message</name></decl></param>)</parameter_list>
    <block>{
      <expr_stmt><expr><call><name>raiseThrowable</name><argument_list>(<argument><expr><name>JAVA_PACKAGE</name>"/JNIError"</expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

  <function_decl><type><specifier>static</specifier> <name>apr_pool_t</name> *</type><name>getPool</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>JNIGlobalInit</name><parameter_list>(<param><decl><type><name>JNIEnv</name> *</type><name>env</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>JNIInit</name><parameter_list>(<param><decl><type><name>JNIEnv</name> *</type><name>env</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><specifier>static</specifier> <name>JNIMutex</name> *</type><name>getGlobalPoolMutex</name><parameter_list>()</parameter_list>;</function_decl>
  <enum>enum <block>{ <decl><name>formatBufferSize</name> <init>= <expr>2048</expr></init></decl> }</block>;</enum>
  <enum>enum <block>{ <decl><name>noLog</name></decl>, <decl><name>errorLog</name></decl>, <decl><name>exceptionLog</name></decl>, <decl><name>entryLog</name></decl> }</block> <decl><name>LogLevel</name></decl>;</enum>

 <label><name>private</name>:</label>
  <decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>assembleErrorMessage</name><argument_list>(<argument><expr><name>svn_error_t</name> *<name>err</name></expr></argument>, <argument><expr><name>int</name> <name>depth</name></expr></argument>,
                                   <argument><expr><name>apr_status_t</name> <name>parent_apr_err</name></expr></argument>,
                                   <argument><expr><name>std</name>::<name>string</name> &amp;<name>buffer</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <comment type="block">/**
   * Set the appropriate global or thread-local flag that an exception
   * has been thrown to @a flag.
   */</comment>
  <function_decl><type><specifier>static</specifier> <name>void</name></type> <name>setExceptionThrown</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>flag</name> <init>= <expr><name>true</name></expr></init></decl></param>)</parameter_list>;</function_decl>

  <comment type="block">/**
   * The log level of this module.
   */</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>g_logLevel</name></decl>;</decl_stmt>

  <comment type="block">/**
   * Global master pool.  All other pool are subpools of this pool.
   */</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <name>apr_pool_t</name> *</type><name>g_pool</name></decl>;</decl_stmt>

  <comment type="block">/**
   * List of objects finalized, where the C++ peer has not yet be
   * deleted.
   */</comment>
  <expr_stmt><expr>static <name>std</name>::<name>list</name>&lt;<name>SVNBase</name>*&gt; <name>g_finalizedObjects</name></expr>;</expr_stmt>

  <comment type="block">/**
   * Mutex to secure the g_finalizedObjects list.
   */</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <name>JNIMutex</name> *</type><name>g_finalizedObjectsMutex</name></decl>;</decl_stmt>

  <comment type="block">/**
   * Mutex to secure the access to the log file.
   */</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <name>JNIMutex</name> *</type><name>g_logMutex</name></decl>;</decl_stmt>

  <comment type="block">/**
   * Flag, that an exception occured during our initialization.
   */</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>g_initException</name></decl>;</decl_stmt>

  <comment type="block">/**
   * Flag, that one thread is in the init code.  Cannot use mutex
   * here since apr is not initialized yet.
   */</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>g_inInit</name></decl>;</decl_stmt>

  <comment type="block">/**
   * The JNI environment used during initialization.
   */</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <name>JNIEnv</name> *</type><name>g_initEnv</name></decl>;</decl_stmt>

  <comment type="block">/**
   * Fuffer the format error messages during initialization.
   */</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>g_initFormatBuffer</name><index>[<expr><name>formatBufferSize</name></expr>]</index></name></decl>;</decl_stmt>

  <comment type="block">/**
   * The stream to write log messages to.
   */</comment>
  <expr_stmt><expr>static <name>std</name>::<name>ofstream</name> <name>g_logStream</name></expr>;</expr_stmt>

  <comment type="block">/**
   * Flag to secure our global pool.
   */</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <name>JNIMutex</name> *</type><name>g_globalPoolMutext</name></decl>;</decl_stmt>
}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<comment type="block">/**
 * A statement macro used for checking NULL pointers, in the style of
 * SVN_ERR().
 *
 * Evaluate @a expr.  If it equals NULL, throw an NullPointerException with
 * the value @a str, and return the @a ret_val.  Otherwise, continue.
 *
 * Note that if the enclosing function returns &lt;tt&gt;void&lt;/tt&gt;, @a ret_val may
 * be blank.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_JNI_NULL_PTR_EX</name><parameter_list>(<param><type><name>expr</name></type></param>, <param><type><name>str</name></type></param>, <param><type><name>ret_val</name></type></param>)</parameter_list></cpp:macro> \
  <cpp:value>if (expr == NULL) {                           \
    JNIUtil::throwNullPointerException(str);    \
    return ret_val ;                            \
  }</cpp:value></cpp:define>

<comment type="block">/**
 * A statement macro used for checking for errors, in the style of
 * SVN_ERR().
 *
 * Evalute @a expr.  If it yields an error, handle the JNI error, and
 * return @a ret_val.  Otherwise, continue.
 *
 * Note that if the enclosing function returns &lt;tt&gt;void&lt;/tt&gt;, @a ret_val may
 * be blank.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_JNI_ERR</name><parameter_list>(<param><type><name>expr</name></type></param>, <param><type><name>ret_val</name></type></param>)</parameter_list></cpp:macro>                      \
  <cpp:value>do {                                                  \
    svn_error_t *svn_jni_err__temp = (expr);            \
    if (svn_jni_err__temp != SVN_NO_ERROR) {            \
      JNIUtil::handleSVNError(svn_jni_err__temp);       \
      return ret_val ;                                  \
    }                                                   \
  } while (0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="line">// JNIUTIL_H</comment>
</unit>
