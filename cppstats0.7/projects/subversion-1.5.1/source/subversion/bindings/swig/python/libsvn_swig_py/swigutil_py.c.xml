<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/bindings/swig/python/libsvn_swig_py/swigutil_py.c"><comment type="block">/*
 * swigutil_py.c: utility functions for the SWIG Python bindings
 *
 * ====================================================================
 * Copyright (c) 2000-2004 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<comment type="block">/* Tell swigutil_py.h that we're inside the implementation */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_SWIG_SWIGUTIL_PY_C</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Python.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_hash.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_portable.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_thread_proc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_delta.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_auth.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_mergeinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include> <comment type="block">/* for SVN_APR_INT64_T_PYCFMT */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"swig_python_external_runtime.swg"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"swigutil_py.h"</cpp:file></cpp:include>

<comment type="block">/* Define handy Python 2.4 macro if this is older Python. */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>Py_RETURN_NONE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Py_RETURN_NONE</name></cpp:macro> <cpp:value>return Py_INCREF(Py_None), Py_None</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<escape char="0xc"/>

<comment type="block">/*** Manage the Global Interpreter Lock ***/</comment>

<comment type="block">/* If both Python and APR have threads available, we can optimize ourselves
 * by releasing the global interpreter lock when we drop into our SVN calls.
 *
 * In svn_types.i, svn_swig_py_release_py_lock is called before every
 * function, then svn_swig_py_acquire_py_lock is called after every
 * function.  So, if these functions become no-ops, then Python will
 * start to block...
 *
 * The Subversion libraries can be assumed to be thread-safe *only* when
 * APR_HAS_THREAD is 1.  The APR pool allocations aren't thread-safe unless
 * APR_HAS_THREAD is 1.
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WITH_THREAD</name></expr></argument>)</argument_list></call> &amp;&amp; <name>APR_HAS_THREADS</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACQUIRE_PYTHON_LOCK</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACQUIRE_PYTHON_LOCK</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_threadkey_t</name> *</type><name>_saved_thread_key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_pool_t</name> *</type><name>_saved_thread_pool</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>svn_swig_py_release_py_lock</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACQUIRE_PYTHON_LOCK</name></cpp:ifdef>
  <decl_stmt><decl><type><name>PyThreadState</name> *</type><name>thread_state</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>_saved_thread_key</name> == <name>NULL</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* Obviously, creating a top-level pool for this is pretty stupid. */</comment>
      <expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>_saved_thread_pool</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>apr_threadkey_private_create</name><argument_list>(<argument><expr>&amp;<name>_saved_thread_key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                   <argument><expr><name>_saved_thread_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <expr_stmt><expr><name>thread_state</name> = <call><name>PyEval_SaveThread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>apr_threadkey_private_set</name><argument_list>(<argument><expr><name>thread_state</name></expr></argument>, <argument><expr><name>_saved_thread_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><name>void</name></type> <name>svn_swig_py_acquire_py_lock</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACQUIRE_PYTHON_LOCK</name></cpp:ifdef>
  <decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyThreadState</name> *</type><name>thread_state</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>apr_threadkey_private_get</name><argument_list>(<argument><expr>&amp;<name>val</name></expr></argument>, <argument><expr><name>_saved_thread_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>thread_state</name> = <name>val</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>PyEval_RestoreThread</name><argument_list>(<argument><expr><name>thread_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>


<escape char="0xc"/>
<comment type="block">/*** Automatic Pool Management Functions ***/</comment>

<comment type="block">/* The application pool */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_pool_t</name> *</type><name>application_pool</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PyObject</name> *</type><name>application_py_pool</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>assertValid</name><index>[]</index></name> <init>= <expr>"assert_valid"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>markValid</name><index>[]</index></name> <init>= <expr>"_mark_valid"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>parentPool</name><index>[]</index></name> <init>= <expr>"_parent_pool"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>wrap</name><index>[]</index></name> <init>= <expr>"_wrap"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>unwrap</name><index>[]</index></name> <init>= <expr>"_unwrap"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>setParentPool</name><index>[]</index></name> <init>= <expr>"set_parent_pool"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>emptyTuple</name><index>[]</index></name> <init>= <expr>"()"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>objectTuple</name><index>[]</index></name> <init>= <expr>"(O)"</expr></init></decl>;</decl_stmt>


<function><type><name>apr_status_t</name></type> <name>svn_swig_py_initialize</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>

  <if>if <condition>(<expr>(<name>status</name> = <call><name>apr_initialize</name><argument_list>()</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then>
    <return>return <expr><name>status</name></expr>;</return></then></if>
  <if>if <condition>(<expr><call><name>atexit</name><argument_list>(<argument><expr><name>apr_terminate</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
    <return>return <expr><name>APR_EGENERAL</name></expr>;</return></then></if>
  <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>svn_swig_py_get_pool_arg</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>swig_type_info</name> *</type><name>type</name></decl></param>,
    <param><decl><type><name>PyObject</name> **</type><name>py_pool</name></decl></param>, <param><decl><type><name>apr_pool_t</name> **</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>argnum</name> <init>= <expr><call><name>PyTuple_GET_SIZE</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call> - 1</expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>argnum</name> &gt;= 0</expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>PyObject</name> *</type><name>input</name> <init>= <expr><call><name>PyTuple_GET_ITEM</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>argnum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>input</name> != <name>Py_None</name> &amp;&amp; <call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>markValid</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
          <expr_stmt><expr>*<name>pool</name> = <call><name>svn_swig_MustGetPtr</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>argnum</name>+1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr>*<name>pool</name> == <name>NULL</name></expr>)</condition><then>
            <return>return <expr>1</expr>;</return></then></if>
          <expr_stmt><expr>*<name>py_pool</name> = <name>input</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr>0</expr>;</return>
        }</block></then></if>
    }</block></then></if>

  <comment type="block">/* We couldn't find a pool argument, so we'll create a subpool */</comment>
  <expr_stmt><expr>*<name>pool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>application_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>py_pool</name> = <call><name>svn_swig_NewPointerObj</name><argument_list>(<argument><expr>*<name>pool</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>application_py_pool</name></expr></argument>,
                                    <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>*<name>py_pool</name> == <name>NULL</name></expr>)</condition><then>
    <return>return <expr>1</expr>;</return></then></if>

  <return>return <expr>0</expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>svn_swig_py_get_parent_pool</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>, <param><decl><type><name>swig_type_info</name> *</type><name>type</name></decl></param>,
    <param><decl><type><name>PyObject</name> **</type><name>py_pool</name></decl></param>, <param><decl><type><name>apr_pool_t</name> **</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>proxy</name> <init>= <expr><call><name>PyTuple_GetItem</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>proxy</name> == <name>NULL</name></expr>)</condition><then>
    <return>return <expr>1</expr>;</return></then></if>

  <expr_stmt><expr>*<name>py_pool</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>, <argument><expr><name>parentPool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>*<name>py_pool</name> == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
             <argument><expr>"Unexpected NULL parent pool on proxy object"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr>1</expr>;</return>
    }</block></then></if>

  <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr>*<name>py_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>pool</name> = <call><name>svn_swig_MustGetPtr</name><argument_list>(<argument><expr>*<name>py_pool</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>*<name>pool</name> == <name>NULL</name></expr>)</condition><then>
    <return>return <expr>1</expr>;</return></then></if>

  <return>return <expr>0</expr>;</return>
}</block></function>

<comment type="block">/* Set the application pool */</comment>
<function><type><name>void</name></type> <name>svn_swig_py_set_application_pool</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>py_pool</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name>application_pool</name> = <name>pool</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>application_py_pool</name> = <name>py_pool</name></expr>;</expr_stmt>
}</block></function>

<comment type="block">/* Clear the application pool */</comment>
<function><type><name>void</name></type> <name>svn_swig_py_clear_application_pool</name><parameter_list>()</parameter_list>
<block>{
  <expr_stmt><expr><name>application_pool</name> = <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>application_py_pool</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></function>

<comment type="block">/* Set the parent pool of a proxy object */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>proxy_set_pool</name><parameter_list>(<param><decl><type><name>PyObject</name> **</type><name>proxy</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>

  <if>if <condition>(<expr>*<name>proxy</name> != <name>NULL</name></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><name>pool</name> == <name>NULL</name></expr>)</condition><then>
        <block>{
          <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr>*<name>proxy</name></expr></argument>, <argument><expr><name>setParentPool</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
              <expr_stmt><expr><name>result</name> = <call><name>PyObject_CallMethod</name><argument_list>(<argument><expr>*<name>proxy</name></expr></argument>, <argument><expr><name>setParentPool</name></expr></argument>, <argument><expr><name>emptyTuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <if>if <condition>(<expr><name>result</name> == <name>NULL</name></expr>)</condition><then>
                <return>return <expr>1</expr>;</return></then></if>
              <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then>
      <else>else
        <block>{
          <expr_stmt><expr><name>result</name> = <call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>wrap</name></expr></argument>, <argument><expr><name>objectTuple</name></expr></argument>, <argument><expr>*<name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr>*<name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr>*<name>proxy</name> = <name>result</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then></if>

  <return>return <expr>0</expr>;</return>
}</block></function>

<escape char="0xc"/>
<comment type="block">/* Wrapper for SWIG_TypeQuery */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_swig_TypeQuery</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>SWIG_TypeQuery(x)</cpp:value></cpp:define>

<comment type="block">/** Wrapper for SWIG_NewPointerObj */</comment>
<function><type><name>PyObject</name> *</type><name>svn_swig_NewPointerObj</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>obj</name></decl></param>, <param><decl><type><name>swig_type_info</name> *</type><name>type</name></decl></param>,
                                 <param><decl><type><name>PyObject</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>proxy</name> <init>= <expr><call><name>SWIG_NewPointerObj</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>proxy</name> == <name>NULL</name></expr>)</condition><then>
    <return>return <expr><name>NULL</name></expr>;</return></then></if>

  <if>if <condition>(<expr><name>pool</name> == <name>NULL</name> &amp;&amp; <name>args</name> != <name>NULL</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>tmp</name></decl>;</decl_stmt>
      <if>if <condition>(<expr><call><name>svn_swig_py_get_parent_pool</name><argument_list>(<argument><expr><name>args</name></expr></argument>,
            <argument><expr><call><name>svn_swig_TypeQuery</name><argument_list>(<argument><expr>"apr_pool_t *"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>pool</name></expr></argument>, <argument><expr>&amp;<name>tmp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><call><name>PyErr_Clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></then></if>

  <if>if <condition>(<expr><call><name>proxy_set_pool</name><argument_list>(<argument><expr>&amp;<name>proxy</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

  <return>return <expr><name>proxy</name></expr>;</return>
}</block></function>

<comment type="block">/** svn_swig_NewPointerObj, except a string is used to describe the type */</comment>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>svn_swig_NewPointerObjString</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>ptr</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>type</name></decl></param>,
                                              <param><decl><type><name>PyObject</name> *</type><name>py_pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>swig_type_info</name> *</type><name>typeinfo</name> <init>= <expr><call><name>svn_swig_TypeQuery</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>typeinfo</name> == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"Cannot find required typeobject"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

  <comment type="block">/* ### cache the swig_type_info at some point? */</comment>
  <return>return <expr><call><name>svn_swig_NewPointerObj</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>typeinfo</name></expr></argument>, <argument><expr><name>py_pool</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/** Wrapper for SWIG_ConvertPtr */</comment>
<function><type><name>int</name></type> <name>svn_swig_ConvertPtr</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>input</name></decl></param>, <param><decl><type><name>void</name> **</type><name>obj</name></decl></param>, <param><decl><type><name>swig_type_info</name> *</type><name>type</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>assertValid</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name> <init>= <expr><call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>assertValid</name></expr></argument>, <argument><expr><name>emptyTuple</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>result</name> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr>1</expr>;</return></then></if>
      <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>unwrap</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>input</name> = <call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>unwrap</name></expr></argument>, <argument><expr><name>emptyTuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>input</name> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr>1</expr>;</return></then></if>
      <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <return>return <expr><call><name>SWIG_ConvertPtr</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>SWIG_POINTER_EXCEPTION</name> | 0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/** svn_swig_ConvertPtr, except a string is used to describe the type */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>svn_swig_ConvertPtrString</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>input</name></decl></param>,
    <param><decl><type><name>void</name> **</type><name>obj</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>type</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_swig_ConvertPtr</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><call><name>svn_swig_TypeQuery</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/** Wrapper for SWIG_MustGetPtr */</comment>
<function><type><name>void</name> *</type><name>svn_swig_MustGetPtr</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>input</name></decl></param>, <param><decl><type><name>swig_type_info</name> *</type><name>type</name></decl></param>, <param><decl><type><name>int</name></type> <name>argnum</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>assertValid</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name> <init>= <expr><call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>assertValid</name></expr></argument>, <argument><expr><name>emptyTuple</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>result</name> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
      <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <if>if <condition>(<expr><call><name>PyObject_HasAttrString</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>unwrap</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>input</name> = <call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>unwrap</name></expr></argument>, <argument><expr><name>emptyTuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>input</name> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
      <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr>(<name>PyObject</name> *) <name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <return>return <expr><call><name>SWIG_MustGetPtr</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>argnum</name></expr></argument>, <argument><expr><name>SWIG_POINTER_EXCEPTION</name> | 0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<escape char="0xc"/>
<comment type="block">/*** Custom SubversionException stuffs. ***/</comment>

<function><type><name>void</name></type> <name>svn_swig_py_svn_exception</name><parameter_list>(<param><decl><type><name>svn_error_t</name> *</type><name>error_chain</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>args_list</name></decl>, *<decl><type ref="prev"/><name>args</name></decl>, *<decl><type ref="prev"/><name>apr_err_ob</name></decl>, *<decl><type ref="prev"/><name>message_ob</name></decl>, *<decl><type ref="prev"/><name>file_ob</name></decl>, *<decl><type ref="prev"/><name>line_ob</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>svn_module</name></decl>, *<decl><type ref="prev"/><name>exc_class</name></decl>, *<decl><type ref="prev"/><name>exc_ob</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>error_chain</name> == <name>NULL</name></expr>)</condition><then>
    <return>return;</return></then></if>

  <comment type="block">/* Start with no references. */</comment>
  <expr_stmt><expr><name>args_list</name> = <name>args</name> = <name>apr_err_ob</name> = <name>message_ob</name> = <name>file_ob</name> = <name>line_ob</name> = <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>svn_module</name> = <name>exc_class</name> = <name>exc_ob</name> = <name>NULL</name></expr>;</expr_stmt>

  <if>if <condition>(<expr>(<name>args_list</name> = <call><name>PyList_New</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <goto>goto <name>finished</name>;</goto></then></if>

  <for>for (<init><expr><name>err</name> = <name>error_chain</name></expr>;</init> <condition><expr><name>err</name></expr>;</condition> <incr><expr><name>err</name> = <name><name>err</name>-&gt;<name>child</name></name></expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

      <if>if <condition>(<expr>(<name>args</name> = <call><name>PyTuple_New</name><argument_list>(<argument><expr>4</expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
        <goto>goto <name>finished</name>;</goto></then></if>

      <comment type="block">/* Convert the fields of the svn_error_t to Python objects. */</comment>
      <if>if <condition>(<expr>(<name>apr_err_ob</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>apr_err</name></name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
        <goto>goto <name>finished</name>;</goto></then></if>
      <if>if <condition>(<expr><name><name>err</name>-&gt;<name>message</name></name> == <name>NULL</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>message_ob</name> = <name>Py_None</name></expr>;</expr_stmt>
        }</block></then>
      <else>else <if>if <condition>(<expr>(<name>message_ob</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>message</name></name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
        <goto>goto <name>finished</name>;</goto></then></if></else></if>
      <if>if <condition>(<expr><name><name>err</name>-&gt;<name>file</name></name> == <name>NULL</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>file_ob</name> = <name>Py_None</name></expr>;</expr_stmt>
        }</block></then>
      <else>else <if>if <condition>(<expr>(<name>file_ob</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>file</name></name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
        <goto>goto <name>finished</name>;</goto></then></if></else></if>
      <if>if <condition>(<expr>(<name>line_ob</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>line</name></name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
        <goto>goto <name>finished</name>;</goto></then></if>

      <comment type="block">/* Store the objects in the tuple. */</comment>
      <expr_stmt><expr><name>i</name> = 0</expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>append</name><parameter_list>(<param><type><name>item</name></type></param>)</parameter_list></cpp:macro>                                            \
      <cpp:value>if (PyTuple_SetItem(args, i++, item) == 0)                \
        <comment type="block">/* tuple stole our reference, so don't DECREF */</comment>        \
        item = NULL;                                            \
      else                                                      \
        goto finished;</cpp:value></cpp:define>
      <expr_stmt><expr><call><name>append</name><argument_list>(<argument><expr><name>apr_err_ob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>append</name><argument_list>(<argument><expr><name>message_ob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>append</name><argument_list>(<argument><expr><name>file_ob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>append</name><argument_list>(<argument><expr><name>line_ob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>append</name></cpp:undef>

      <comment type="block">/* Append the tuple to the args list. */</comment>
      <if>if <condition>(<expr><call><name>PyList_Append</name><argument_list>(<argument><expr><name>args_list</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
        <goto>goto <name>finished</name>;</goto></then></if>
      <comment type="block">/* The list takes its own reference, so release ours. */</comment>
      <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* Let's not decref in 'finished:' after the final iteration. */</comment>
      <expr_stmt><expr><name>args</name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></for>
  <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>error_chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Create the exception object chain. */</comment>
  <if>if <condition>(<expr>(<name>svn_module</name> = <call><name>PyImport_ImportModule</name><argument_list>(<argument><expr>(<name>char</name> *)"svn.core"</expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <goto>goto <name>finished</name>;</goto></then></if>
  <if>if <condition>(<expr>(<name>exc_class</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>svn_module</name></expr></argument>,
                                       <argument><expr>(<name>char</name> *)"SubversionException"</expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <goto>goto <name>finished</name>;</goto></then></if>
  <if>if <condition>(<expr>(<name>exc_ob</name> = <call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name>exc_class</name></expr></argument>, <argument><expr>(<name>char</name> *)"_new_from_err_list"</expr></argument>,
                                    <argument><expr>(<name>char</name> *)"O"</expr></argument>, <argument><expr><name>args_list</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <goto>goto <name>finished</name>;</goto></then></if>

  <comment type="block">/* Raise the exception. */</comment>
  <expr_stmt><expr><call><name>PyErr_SetObject</name><argument_list>(<argument><expr><name>exc_class</name></expr></argument>, <argument><expr><name>exc_ob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

 <label><name>finished</name>:</label>
  <comment type="block">/* Release any references. */</comment>
  <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>args_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>apr_err_ob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>message_ob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>file_ob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>line_ob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>svn_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>exc_class</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>exc_ob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<escape char="0xc"/>
<comment type="block">/*** Helper/Conversion Routines ***/</comment>

<comment type="block">/* Functions for making Python wrappers around Subversion structs */</comment>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>make_ob_pool</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <comment type="block">/* Return a brand new default pool to Python. This pool isn't
   * normally used for anything. It's just here for compatibility
   * with Subversion 1.2. */</comment>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>new_pool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>application_pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>new_py_pool</name> <init>= <expr><call><name>svn_swig_NewPointerObj</name><argument_list>(<argument><expr><name>new_pool</name></expr></argument>,
    <argument><expr><call><name>svn_swig_TypeQuery</name><argument_list>(<argument><expr>"apr_pool_t *"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>application_py_pool</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr>(<name>void</name>) <name>pool</name></expr>;</expr_stmt> <comment type="block">/* Silence compiler warnings about unused parameter. */</comment>
  <return>return <expr><name>new_py_pool</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>make_ob_fs_root</name><parameter_list>(<param><decl><type><name>svn_fs_root_t</name> *</type><name>ptr</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>py_pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_swig_NewPointerObjString</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr>"svn_fs_root_t *"</expr></argument>, <argument><expr><name>py_pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>make_ob_wc_adm_access</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>adm_access</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_swig_NewPointerObjString</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>,
                                      <argument><expr>"svn_wc_adm_access_t *"</expr></argument>,
                                      <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<comment type="block">/***/</comment>

<comment type="block">/* Conversion from Python single objects (not hashes/lists/etc.) to
   Subversion types. */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>make_string_from_ob</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>ob</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>ob</name> == <name>Py_None</name></expr>)</condition><then>
    <return>return <expr><name>NULL</name></expr>;</return></then></if>
  <if>if <condition>(<expr>! <call><name>PyString_Check</name><argument_list>(<argument><expr><name>ob</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"not a string"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
  <return>return <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>ob</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_string_t</name> *</type><name>make_svn_string_from_ob</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>ob</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>ob</name> == <name>Py_None</name></expr>)</condition><then>
    <return>return <expr><name>NULL</name></expr>;</return></then></if>
  <if>if <condition>(<expr>! <call><name>PyString_Check</name><argument_list>(<argument><expr><name>ob</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"not a string"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
  <return>return <expr><call><name>svn_string_create</name><argument_list>(<argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>ob</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<comment type="block">/***/</comment>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>convert_hash</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>hash</name></decl></param>,
                              <param><function_decl><type><name>PyObject</name> *</type> (*<name>converter_func</name>)<parameter_list>(<param><decl><type><name>void</name> *</type><name>value</name></decl></param>,
                                                           <param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>,
                                                           <param><decl><type><name>PyObject</name> *</type><name>py_pool</name></decl></param>)</parameter_list></function_decl></param>,
                              <param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>py_pool</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>dict</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>hash</name> == <name>NULL</name></expr>)</condition><then>
        <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt></then></if>

    <if>if <condition>(<expr>(<name>dict</name> = <call><name>PyDict_New</name><argument_list>()</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
      <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PyObject</name> *</type><name>value</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>value</name> = <call>(*<name>converter_func</name>)<argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>py_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>value</name> == <name>NULL</name></expr>)</condition><then>
          <block>{
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
          }</block></then></if>
        <comment type="block">/* ### gotta cast this thing cuz Python doesn't use "const" */</comment>
        <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr>(<name>char</name> *)<name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
          <block>{
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
          }</block></then></if>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></for>

    <return>return <expr><name>dict</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>convert_to_swigtype</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>value</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>py_pool</name></decl></param>)</parameter_list>
<block>{
  <comment type="block">/* ctx is a 'swig_type_info *' */</comment>
  <return>return <expr><call><name>svn_swig_NewPointerObj</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>py_pool</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>convert_svn_string_t</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>value</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>,
                                      <param><decl><type><name>PyObject</name> *</type><name>py_pool</name></decl></param>)</parameter_list>
<block>{
  <comment type="block">/* ctx is unused */</comment>

  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>s</name> <init>= <expr><name>value</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* ### gotta cast this thing cuz Python doesn't use "const" */</comment>
  <return>return <expr><call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr>(<name>void</name> *)<name><name>s</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>convert_svn_client_commit_item3_t</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>value</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>list</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>path</name></decl>, *<decl><type ref="prev"/><name>kind</name></decl>, *<decl><type ref="prev"/><name>url</name></decl>, *<decl><type ref="prev"/><name>rev</name></decl>, *<decl><type ref="prev"/><name>cf_url</name></decl>, *<decl><type ref="prev"/><name>cf_rev</name></decl>, *<decl><type ref="prev"/><name>state</name></decl>,
      *<decl><type ref="prev"/><name>incoming_prop_changes</name></decl>, *<decl><type ref="prev"/><name>outgoing_prop_changes</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_client_commit_item3_t</name> *</type><name>item</name> <init>= <expr><name>value</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* ctx is unused */</comment>

  <expr_stmt><expr><name>list</name> = <call><name>PyList_New</name><argument_list>(<argument><expr>9</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name><name>item</name>-&gt;<name>path</name></name></expr>)</condition><then>
    <expr_stmt><expr><name>path</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr><name><name>item</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <block>{
      <expr_stmt><expr><name>path</name> = <name>Py_None</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <if>if <condition>(<expr><name><name>item</name>-&gt;<name>url</name></name></expr>)</condition><then>
    <expr_stmt><expr><name>url</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr><name><name>item</name>-&gt;<name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <block>{
      <expr_stmt><expr><name>url</name> = <name>Py_None</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <if>if <condition>(<expr><name><name>item</name>-&gt;<name>copyfrom_url</name></name></expr>)</condition><then>
    <expr_stmt><expr><name>cf_url</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr><name><name>item</name>-&gt;<name>copyfrom_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <block>{
      <expr_stmt><expr><name>cf_url</name> = <name>Py_None</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <expr_stmt><expr><name>kind</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name><name>item</name>-&gt;<name>kind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rev</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name><name>item</name>-&gt;<name>revision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>cf_rev</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name><name>item</name>-&gt;<name>copyfrom_rev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>state</name> = <call><name>PyInt_FromLong</name><argument_list>(<argument><expr><name><name>item</name>-&gt;<name>state_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name><name>item</name>-&gt;<name>incoming_prop_changes</name></name></expr>)</condition><then>
    <expr_stmt><expr><name>incoming_prop_changes</name> =
      <call><name>svn_swig_py_array_to_list</name><argument_list>(<argument><expr><name><name>item</name>-&gt;<name>incoming_prop_changes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <block>{
      <expr_stmt><expr><name>incoming_prop_changes</name> = <name>Py_None</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <if>if <condition>(<expr><name><name>item</name>-&gt;<name>outgoing_prop_changes</name></name></expr>)</condition><then>
    <expr_stmt><expr><name>outgoing_prop_changes</name> =
      <call><name>svn_swig_py_array_to_list</name><argument_list>(<argument><expr><name><name>item</name>-&gt;<name>outgoing_prop_changes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <block>{
      <expr_stmt><expr><name>outgoing_prop_changes</name> = <name>Py_None</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <if>if <condition>(<expr>! (<name>list</name> &amp;&amp; <name>path</name> &amp;&amp; <name>kind</name> &amp;&amp; <name>url</name> &amp;&amp; <name>rev</name> &amp;&amp; <name>cf_url</name> &amp;&amp; <name>cf_rev</name> &amp;&amp; <name>state</name> &amp;&amp;
         <name>incoming_prop_changes</name> &amp;&amp; <name>outgoing_prop_changes</name>)</expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>cf_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>cf_rev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>incoming_prop_changes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>outgoing_prop_changes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

  <expr_stmt><expr><call><name>PyList_SET_ITEM</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>PyList_SET_ITEM</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>PyList_SET_ITEM</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>PyList_SET_ITEM</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>PyList_SET_ITEM</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><name>cf_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>PyList_SET_ITEM</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><name>cf_rev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>PyList_SET_ITEM</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>PyList_SET_ITEM</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr>7</expr></argument>, <argument><expr><name>incoming_prop_changes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>PyList_SET_ITEM</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr><name>outgoing_prop_changes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>list</name></expr>;</return>
}</block></function>

<function><type><name>PyObject</name> *</type><name>svn_swig_py_prophash_to_dict</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>hash</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>convert_hash</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>convert_svn_string_t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>convert_string</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>value</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>,
                                <param><decl><type><name>PyObject</name> *</type><name>py_pool</name></decl></param>)</parameter_list>
<block>{
  <comment type="block">/* ### gotta cast this thing cuz Python doesn't use "const" */</comment>
  <return>return <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr>(const <name>char</name> *)<name>value</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>PyObject</name> *</type><name>svn_swig_py_stringhash_to_dict</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>hash</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>convert_hash</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>convert_string</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>convert_rangelist</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>value</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>PyObject</name> *</type><name>py_pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>list</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>array</name> <init>= <expr><name>value</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>list</name> = <call><name>PyList_New</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>array</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>svn_merge_range_t</name> *</type><name>range</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><call><name>PyList_Append</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><call><name>convert_to_swigtype</name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>py_pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
        <goto>goto <name>error</name>;</goto></then></if>
    }</block></for>
  <return>return <expr><name>list</name></expr>;</return>
 <label><name>error</name>:</label>
  <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><name>PyObject</name> *</type><name>svn_swig_py_rangelist_to_list</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> *</type><name>rangelist</name></decl></param>,
                                        <param><decl><type><name>swig_type_info</name> *</type><name>type</name></decl></param>,
                                        <param><decl><type><name>PyObject</name> *</type><name>py_pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>convert_rangelist</name><argument_list>(<argument><expr><name>rangelist</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>py_pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>PyObject</name> *</type><name>svn_swig_py_mergeinfo_to_dict</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>hash</name></decl></param>,
                                        <param><decl><type><name>swig_type_info</name> *</type><name>type</name></decl></param>,
                                        <param><decl><type><name>PyObject</name> *</type><name>py_pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>convert_hash</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>convert_rangelist</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>py_pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>convert_mergeinfo_hash</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>value</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>,
                                         <param><decl><type><name>PyObject</name> *</type><name>py_pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_swig_py_mergeinfo_to_dict</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>py_pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>PyObject</name> *</type><name>svn_swig_py_mergeinfo_catalog_to_dict</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>hash</name></decl></param>,
                                                <param><decl><type><name>swig_type_info</name> *</type><name>type</name></decl></param>,
                                                <param><decl><type><name>PyObject</name> *</type><name>py_pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>convert_hash</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>convert_mergeinfo_hash</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>py_pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>PyObject</name> *</type><name>svn_swig_py_proparray_to_dict</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>array</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>dict</name> <init>= <expr><call><name>PyDict_New</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>dict</name> == <name>NULL</name></expr>)</condition><then>
      <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>array</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
      <block>{
        <decl_stmt><decl><type><name>svn_prop_t</name></type> <name>prop</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PyObject</name> *</type><name>py_key</name></decl>, *<decl><type ref="prev"/><name>py_value</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>prop</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_prop_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>py_key</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr><name><name>prop</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>py_key</name> == <name>NULL</name></expr>)</condition><then>
          <goto>goto <name>error</name>;</goto></then></if>

        <if>if <condition>(<expr><name><name>prop</name>.<name>value</name></name> == <name>NULL</name></expr>)</condition><then>
          <block>{
             <expr_stmt><expr><name>py_value</name> = <name>Py_None</name></expr>;</expr_stmt>
             <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then>
        <else>else
          <block>{
             <expr_stmt><expr><name>py_value</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr>(<name>void</name> *)<name><name>prop</name>.<name>value</name>-&gt;<name>data</name></name></expr></argument>,
                                                   <argument><expr><name><name>prop</name>.<name>value</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <if>if <condition>(<expr><name>py_value</name> == <name>NULL</name></expr>)</condition><then>
               <block>{
                 <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>py_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <goto>goto <name>error</name>;</goto>
               }</block></then></if>
          }</block></else></if>

        <expr_stmt><expr><call><name>PyDict_SetItem</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>py_key</name></expr></argument>, <argument><expr><name>py_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <return>return <expr><name>dict</name></expr>;</return>

  <label><name>error</name>:</label>
    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>

}</block></function>

<function><type><name>PyObject</name> *</type><name>svn_swig_py_locationhash_to_dict</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>hash</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/* Need special code for this because of the darned svn_revnum_t
       keys. */</comment>
    <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>dict</name> <init>= <expr><call><name>PyDict_New</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>dict</name> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
      <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>k</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>void</name> *</type><name>v</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PyObject</name> *</type><name>key</name></decl>, *<decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>k</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>key</name> = <call><name>PyLong_FromLong</name><argument_list>(<argument><expr>*(<name>svn_revnum_t</name> *)<name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>key</name> == <name>NULL</name></expr>)</condition><then>
          <block>{
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
          }</block></then></if>
        <expr_stmt><expr><name>value</name> = <call><name>PyString_FromString</name><argument_list>(<argument><expr>(<name>char</name> *)<name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>value</name> == <name>NULL</name></expr>)</condition><then>
          <block>{
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
          }</block></then></if>
        <if>if <condition>(<expr><call><name>PyDict_SetItem</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
          <block>{
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
          }</block></then></if>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></for>
    <return>return <expr><name>dict</name></expr>;</return>
}</block></function>

<function><type><name>PyObject</name> *</type><name>svn_swig_py_convert_hash</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>hash</name></decl></param>, <param><decl><type><name>swig_type_info</name> *</type><name>type</name></decl></param>,
                                   <param><decl><type><name>PyObject</name> *</type><name>py_pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>convert_hash</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>convert_to_swigtype</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>py_pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_SWIG_CONSTRUCTOR</name><parameter_list>(<param><type><name>type</name></type></param>, <param><type><name>dup</name></type></param>)</parameter_list></cpp:macro> \
<cpp:value>static PyObject *make_ob_##type(void *value) \
{ \
  apr_pool_t *new_pool = svn_pool_create(application_pool); \
  PyObject *new_py_pool = svn_swig_NewPointerObj(new_pool, \
    svn_swig_TypeQuery("apr_pool_t *"), application_py_pool, NULL); \
  svn_##type##_t *new_value = dup(value, new_pool); \
  PyObject *obj = svn_swig_NewPointerObjString(new_value, "svn_" #type "_t *", \
                                               new_py_pool); \
  Py_XDECREF(new_py_pool); \
  return obj; \
}</cpp:value></cpp:define>

<macro><name>DECLARE_SWIG_CONSTRUCTOR</name><argument_list>(<argument>txdelta_window</argument>, <argument>svn_txdelta_window_dup</argument>)</argument_list></macro>
<macro><name>DECLARE_SWIG_CONSTRUCTOR</name><argument_list>(<argument>log_changed_path</argument>, <argument>svn_log_changed_path_dup</argument>)</argument_list></macro>
<macro><name>DECLARE_SWIG_CONSTRUCTOR</name><argument_list>(<argument>wc_status</argument>, <argument>svn_wc_dup_status</argument>)</argument_list></macro>
<macro><name>DECLARE_SWIG_CONSTRUCTOR</name><argument_list>(<argument>lock</argument>, <argument>svn_lock_dup</argument>)</argument_list></macro>
<macro><name>DECLARE_SWIG_CONSTRUCTOR</name><argument_list>(<argument>auth_ssl_server_cert_info</argument>,
    <argument>svn_auth_ssl_server_cert_info_dup</argument>)</argument_list></macro>
<macro><name>DECLARE_SWIG_CONSTRUCTOR</name><argument_list>(<argument>info</argument>, <argument>svn_info_dup</argument>)</argument_list></macro>
<macro><name>DECLARE_SWIG_CONSTRUCTOR</name><argument_list>(<argument>location_segment</argument>, <argument>svn_location_segment_dup</argument>)</argument_list></macro>
<macro><name>DECLARE_SWIG_CONSTRUCTOR</name><argument_list>(<argument>commit_info</argument>, <argument>svn_commit_info_dup</argument>)</argument_list></macro>
<macro><name>DECLARE_SWIG_CONSTRUCTOR</name><argument_list>(<argument>wc_notify</argument>, <argument>svn_wc_dup_notify</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type><name>convert_log_changed_path</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>value</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>,
                                          <param><decl><type><name>PyObject</name> *</type><name>py_pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>make_ob_log_changed_path</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>PyObject</name> *</type><name>svn_swig_py_c_strings_to_list</name><parameter_list>(<param><decl><type><name>char</name> **</type><name>strings</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>list</name> <init>= <expr><call><name>PyList_New</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>s</name></decl>;</decl_stmt>

    <while>while <condition>(<expr>(<name>s</name> = *<name>strings</name>++) != <name>NULL</name></expr>)</condition>
      <block>{
        <decl_stmt><decl><type><name>PyObject</name> *</type><name>ob</name> <init>= <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>ob</name> == <name>NULL</name></expr>)</condition><then>
            <goto>goto <name>error</name>;</goto></then></if>
        <if>if <condition>(<expr><call><name>PyList_Append</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>ob</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
            <goto>goto <name>error</name>;</goto></then></if>
      }</block></while>

    <return>return <expr><name>list</name></expr>;</return>

  <label><name>error</name>:</label>
    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><name>PyObject</name> *</type><name>svn_swig_py_changed_path_hash_to_dict</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>hash</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>dict</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>hash</name> == <name>NULL</name></expr>)</condition><then>
    <expr_stmt><expr><name>Py_RETURN_NONE</name></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr>(<name>dict</name> = <call><name>PyDict_New</name><argument_list>()</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <return>return <expr><name>NULL</name></expr>;</return></then></if>

  <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>PyObject</name> *</type><name>value</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>value</name> = <call><name>make_ob_log_changed_path</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>value</name> == <name>NULL</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
      <if>if <condition>(<expr><call><name>PyDict_SetItemString</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr>(<name>char</name> *)<name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
      <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

  <return>return <expr><name>dict</name></expr>;</return>
}</block></function>

<function><type><name>apr_array_header_t</name> *</type><name>svn_swig_py_rangelist_to_array</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>list</name></decl></param>,
                                                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>targlen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>temp</name></decl>;</decl_stmt>

  <if>if <condition>(<expr>!<call><name>PySequence_Check</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"not a sequence"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><name>targlen</name> = <call><name>PySequence_Length</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>temp</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>targlen</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* APR_ARRAY_IDX doesn't actually increment the array item count
     (like, say, apr_array_push would). */</comment>
  <expr_stmt><expr><name><name>temp</name>-&gt;<name>nelts</name></name> = <name>targlen</name></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>targlen</name>--</expr>)</condition> <block>{
      <decl_stmt><decl><type><name>PyObject</name> *</type><name>o</name> <init>= <expr><call><name>PySequence_GetItem</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>targlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_merge_range_t</name> *</type><name>range</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_merge_range_t</name> *</type><name>newrange</name></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>o</name> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><name>NULL</name></expr>;</return></then></if>
      <if>if <condition>(<expr><call><name>svn_swig_ConvertPtrString</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr>(<name>void</name> **)&amp;<name>range</name></expr></argument>,
                                    <argument><expr>"svn_merge_range_t *"</expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
                          <argument><expr>"list values are not svn_merge_range_t *'s"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
      <expr_stmt><expr><name>newrange</name> = <call><name>svn_merge_range_dup</name><argument_list>(<argument><expr><name>range</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>targlen</name></expr></argument>, <argument><expr><name>svn_merge_range_t</name> *</expr></argument>)</argument_list></call> = <name>newrange</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></while>
  <return>return <expr><name>temp</name></expr>;</return>
}</block></function>

<function><type><name>apr_hash_t</name> *</type><name>svn_swig_py_stringhash_from_dict</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>dict</name></decl></param>,
                                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>hash</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>keys</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>num_keys</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>dict</name> == <name>Py_None</name></expr>)</condition><then>
    <return>return <expr><name>NULL</name></expr>;</return></then></if>

  <if>if <condition>(<expr>!<call><name>PyDict_Check</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"not a dictionary"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

  <expr_stmt><expr><name>hash</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>keys</name> = <call><name>PyDict_Keys</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>num_keys</name> = <call><name>PyList_Size</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>num_keys</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>PyObject</name> *</type><name>key</name> <init>= <expr><call><name>PyList_GetItem</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>PyObject</name> *</type><name>value</name> <init>= <expr><call><name>PyDict_GetItem</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>propname</name> <init>= <expr><call><name>make_string_from_ob</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>propval</name> <init>= <expr><call><name>make_string_from_ob</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr>! (<name>propname</name> &amp;&amp; <name>propval</name>)</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
                          <argument><expr>"dictionary keys/values aren't strings"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
      <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>propname</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>propval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
  <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>hash</name></expr>;</return>
}</block></function>

<function><type><name>apr_hash_t</name> *</type><name>svn_swig_py_mergeinfo_from_dict</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>dict</name></decl></param>,
                                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>hash</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>keys</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>num_keys</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>dict</name> == <name>Py_None</name></expr>)</condition><then>
    <return>return <expr><name>NULL</name></expr>;</return></then></if>

  <if>if <condition>(<expr>!<call><name>PyDict_Check</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"not a dictionary"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><name>hash</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>keys</name> = <call><name>PyDict_Keys</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>num_keys</name> = <call><name>PyList_Size</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>num_keys</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>PyObject</name> *</type><name>key</name> <init>= <expr><call><name>PyList_GetItem</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>PyObject</name> *</type><name>value</name> <init>= <expr><call><name>PyDict_GetItem</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pathname</name> <init>= <expr><call><name>make_string_from_ob</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>ranges</name> <init>= <expr><call><name>svn_swig_py_rangelist_to_array</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr>! (<name>pathname</name> &amp;&amp; <name>ranges</name>)</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
                          <argument><expr>"dictionary keys aren't strings or values aren't svn_merge_range_t *'s"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
      <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>ranges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
  <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>hash</name></expr>;</return>
}</block></function>

<function><type><name>apr_array_header_t</name> *</type><name>svn_swig_py_proparray_from_dict</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>dict</name></decl></param>,
                                                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>array</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>keys</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>num_keys</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>dict</name> == <name>Py_None</name></expr>)</condition><then>
    <return>return <expr><name>NULL</name></expr>;</return></then></if>

  <if>if <condition>(<expr>!<call><name>PyDict_Check</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"not a dictionary"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

  <expr_stmt><expr><name>keys</name> = <call><name>PyDict_Keys</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>num_keys</name> = <call><name>PyList_Size</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>array</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>num_keys</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_prop_t</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>num_keys</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>PyObject</name> *</type><name>key</name> <init>= <expr><call><name>PyList_GetItem</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>PyObject</name> *</type><name>value</name> <init>= <expr><call><name>PyDict_GetItem</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_prop_t</name> *</type><name>prop</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>prop</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>prop</name>-&gt;<name>name</name></name> = <call><name>make_string_from_ob</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>prop</name>-&gt;<name>value</name></name> = <call><name>make_svn_string_from_ob</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr>! (<name><name>prop</name>-&gt;<name>name</name></name> &amp;&amp; <name><name>prop</name>-&gt;<name>value</name></name>)</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
                          <argument><expr>"dictionary keys/values aren't strings"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
      <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>svn_prop_t</name> *</expr></argument>)</argument_list></call> = <name>prop</name></expr>;</expr_stmt>
    }</block></for>
  <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>array</name></expr>;</return>
}</block></function>

<function><type><name>apr_hash_t</name> *</type><name>svn_swig_py_prophash_from_dict</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>dict</name></decl></param>,
                                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>hash</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>keys</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>num_keys</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>dict</name> == <name>Py_None</name></expr>)</condition><then>
    <return>return <expr><name>NULL</name></expr>;</return></then></if>

  <if>if <condition>(<expr>!<call><name>PyDict_Check</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"not a dictionary"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

  <expr_stmt><expr><name>hash</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>keys</name> = <call><name>PyDict_Keys</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>num_keys</name> = <call><name>PyList_Size</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>num_keys</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>PyObject</name> *</type><name>key</name> <init>= <expr><call><name>PyList_GetItem</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>PyObject</name> *</type><name>value</name> <init>= <expr><call><name>PyDict_GetItem</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>propname</name> <init>= <expr><call><name>make_string_from_ob</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_string_t</name> *</type><name>propval</name> <init>= <expr><call><name>make_svn_string_from_ob</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr>! (<name>propname</name> &amp;&amp; <name>propval</name>)</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
                          <argument><expr>"dictionary keys/values aren't strings"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
      <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>propname</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>propval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
  <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>hash</name></expr>;</return>
}</block></function>

<function><type><name>apr_hash_t</name> *</type><name>svn_swig_py_path_revs_hash_from_dict</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>dict</name></decl></param>,
                                                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>hash</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>keys</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>num_keys</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>dict</name> == <name>Py_None</name></expr>)</condition><then>
    <return>return <expr><name>NULL</name></expr>;</return></then></if>

  <if>if <condition>(<expr>!<call><name>PyDict_Check</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"not a dictionary"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

  <expr_stmt><expr><name>hash</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>keys</name> = <call><name>PyDict_Keys</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>num_keys</name> = <call><name>PyList_Size</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>num_keys</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>PyObject</name> *</type><name>key</name> <init>= <expr><call><name>PyList_GetItem</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>PyObject</name> *</type><name>value</name> <init>= <expr><call><name>PyDict_GetItem</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name> <init>= <expr><call><name>make_string_from_ob</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_revnum_t</name> *</type><name>revnum</name></decl>;</decl_stmt>

      <if>if <condition>(<expr>!(<name>path</name>)</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
                          <argument><expr>"dictionary keys aren't strings"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>

      <expr_stmt><expr><name>revnum</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_revnum_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><call><name>PyInt_Check</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr>*<name>revnum</name> = <call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
      <else>else <if>if <condition>(<expr><call><name>PyLong_Check</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr>*<name>revnum</name> = <call><name>PyLong_AsLong</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
      <else>else
        <block>{
          <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"dictionary values aren't revnums"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>NULL</name></expr>;</return>
        }</block></else></if></else></if>

      <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>revnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
  <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>hash</name></expr>;</return>
}</block></function>

<function><type><name>apr_hash_t</name> *</type><name>svn_swig_py_changed_path_hash_from_dict</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>dict</name></decl></param>,
                                                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>hash</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>keys</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>num_keys</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>dict</name> == <name>Py_None</name></expr>)</condition><then>
    <return>return <expr><name>NULL</name></expr>;</return></then></if>

  <if>if <condition>(<expr>!<call><name>PyDict_Check</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"not a dictionary"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

  <expr_stmt><expr><name>hash</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>keys</name> = <call><name>PyDict_Keys</name><argument_list>(<argument><expr><name>dict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>num_keys</name> = <call><name>PyList_Size</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>num_keys</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>PyObject</name> *</type><name>key</name> <init>= <expr><call><name>PyList_GetItem</name><argument_list>(<argument><expr><name>keys</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>PyObject</name> *</type><name>py_changed_path</name> <init>= <expr><call><name>PyDict_GetItem</name><argument_list>(<argument><expr><name>dict</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name> <init>= <expr><call><name>make_string_from_ob</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_log_changed_path_t</name> *</type><name>changed_path</name></decl>;</decl_stmt>
      <if>if <condition>(<expr>!<name>path</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
                          <argument><expr>"dictionary keys aren't strings"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
      <expr_stmt><expr><call><name>svn_swig_ConvertPtrString</name><argument_list>(<argument><expr><name>py_changed_path</name></expr></argument>, <argument><expr>(<name>void</name> *)&amp;<name>changed_path</name></expr></argument>,
                                <argument><expr>"svn_log_changed_path_t *"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr>!<name>changed_path</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>,
                          <argument><expr>"dictionary values aren't svn_log_changed_path_t"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
      <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>changed_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
  <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>hash</name></expr>;</return>
}</block></function>

<function><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>svn_swig_py_strings_to_array</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>source</name></decl></param>,
                                                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>targlen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>temp</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>source</name> == <name>Py_None</name></expr>)</condition><then>
      <return>return <expr><name>NULL</name></expr>;</return></then></if>

    <if>if <condition>(<expr>!<call><name>PySequence_Check</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>)</condition><then>
      <block>{
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"not a sequence"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
      }</block></then></if>
    <expr_stmt><expr><name>targlen</name> = <call><name>PySequence_Length</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>temp</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>targlen</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* APR_ARRAY_IDX doesn't actually increment the array item count
       (like, say, apr_array_push would). */</comment>
    <expr_stmt><expr><name><name>temp</name>-&gt;<name>nelts</name></name> = <name>targlen</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>targlen</name>--</expr>)</condition>
      <block>{
        <decl_stmt><decl><type><name>PyObject</name> *</type><name>o</name> <init>= <expr><call><name>PySequence_GetItem</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>targlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>o</name> == <name>NULL</name></expr>)</condition><then>
            <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <if>if <condition>(<expr>!<call><name>PyString_Check</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition><then>
          <block>{
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"not a string"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
          }</block></then></if>
        <expr_stmt><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>targlen</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></while>
    <return>return <expr><name>temp</name></expr>;</return>
}</block></function>


<function><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>svn_swig_py_revnums_to_array</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>source</name></decl></param>,
                                                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>targlen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>temp</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>PySequence_Check</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>)</condition><then>
      <block>{
        <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"not a sequence"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
      }</block></then></if>
    <expr_stmt><expr><name>targlen</name> = <call><name>PySequence_Length</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>temp</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>targlen</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_revnum_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* APR_ARRAY_IDX doesn't actually increment the array item count
       (like, say, apr_array_push would). */</comment>
    <expr_stmt><expr><name><name>temp</name>-&gt;<name>nelts</name></name> = <name>targlen</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>targlen</name>--</expr>)</condition>
      <block>{
        <decl_stmt><decl><type><name>PyObject</name> *</type><name>o</name> <init>= <expr><call><name>PySequence_GetItem</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>targlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>o</name> == <name>NULL</name></expr>)</condition><then>
            <return>return <expr><name>NULL</name></expr>;</return></then></if>
        <if>if <condition>(<expr><call><name>PyLong_Check</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition><then>
          <block>{
            <expr_stmt><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>targlen</name></expr></argument>, <argument><expr><name>svn_revnum_t</name></expr></argument>)</argument_list></call> =
              (<name>svn_revnum_t</name>)<call><name>PyLong_AsLong</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then>
        <else>else <if>if <condition>(<expr><call><name>PyInt_Check</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition><then>
          <block>{
            <expr_stmt><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>targlen</name></expr></argument>, <argument><expr><name>svn_revnum_t</name></expr></argument>)</argument_list></call> =
              (<name>svn_revnum_t</name>)<call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then>
        <else>else
          <block>{
            <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr>"not an integer type"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
          }</block></else></if></else></if>
        <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>temp</name></expr>;</return>
}</block></function>


<escape char="0xc"/>
<comment type="block">/*** apr_array_header_t conversions.  To create a new type of
     converter, simply copy-n-paste one of these function and tweak
     the creation of the PyObject *ob.  ***/</comment>

<function><type><name>PyObject</name> *</type><name>svn_swig_py_array_to_list</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>array</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>list</name> <init>= <expr><call><name>PyList_New</name><argument_list>(<argument><expr><name><name>array</name>-&gt;<name>nelts</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>array</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
      <block>{
        <decl_stmt><decl><type><name>PyObject</name> *</type><name>ob</name> <init>=
          <expr><call><name>PyString_FromString</name><argument_list>(<argument><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>ob</name> == <name>NULL</name></expr>)</condition><then>
          <goto>goto <name>error</name>;</goto></then></if>
        <expr_stmt><expr><call><name>PyList_SET_ITEM</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>ob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></for>
    <return>return <expr><name>list</name></expr>;</return>

  <label><name>error</name>:</label>
    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><name>PyObject</name> *</type><name>svn_swig_py_revarray_to_list</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>array</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>list</name> <init>= <expr><call><name>PyList_New</name><argument_list>(<argument><expr><name><name>array</name>-&gt;<name>nelts</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>array</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
      <block>{
        <decl_stmt><decl><type><name>PyObject</name> *</type><name>ob</name>
          <init>= <expr><call><name>PyInt_FromLong</name><argument_list>(<argument><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_revnum_t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>ob</name> == <name>NULL</name></expr>)</condition><then>
          <goto>goto <name>error</name>;</goto></then></if>
        <expr_stmt><expr><call><name>PyList_SET_ITEM</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>ob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></for>
    <return>return <expr><name>list</name></expr>;</return>

  <label><name>error</name>:</label>
    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>PyObject</name> *</type>
<name>commit_item_array_to_list</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>array</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>PyObject</name> *</type><name>list</name> <init>= <expr><call><name>PyList_New</name><argument_list>(<argument><expr><name><name>array</name>-&gt;<name>nelts</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>array</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
      <block>{
        <decl_stmt><decl><type><name>PyObject</name> *</type><name>ob</name> <init>= <expr><call><name>convert_svn_client_commit_item3_t</name>
          <argument_list>(<argument><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_client_commit_item3_t</name> *</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>ob</name> == <name>NULL</name></expr>)</condition><then>
          <goto>goto <name>error</name>;</goto></then></if>
        <expr_stmt><expr><call><name>PyList_SET_ITEM</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>ob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></for>
    <return>return <expr><name>list</name></expr>;</return>

  <label><name>error</name>:</label>
    <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>


<escape char="0xc"/>
<comment type="block">/*** Errors ***/</comment>

<comment type="block">/* Return a Subversion error about a failed callback. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>callback_exception_error</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_SWIG_PY_EXCEPTION_SET</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                          <argument><expr>"Python callback raised an exception"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* Raise a TypeError exception with MESSAGE, and return a Subversion
   error about an invalid return from a callback. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>callback_bad_return_error</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>message</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>PyErr_SetString</name><argument_list>(<argument><expr><name>PyExc_TypeError</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>APR_EGENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                          <argument><expr>"Python callback returned an invalid object"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* Return a generic error about not being able to map types. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>type_conversion_error</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>datatype</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>APR_EGENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                           <argument><expr>"Error converting object of type '%s'"</expr></argument>, <argument><expr><name>datatype</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<escape char="0xc"/>
<comment type="block">/*** Editor Wrapping ***/</comment>

<comment type="block">/* this baton is used for the editor, directory, and file batons. */</comment>
<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>editor</name></decl>;</decl_stmt>     <comment type="block">/* the editor handling the callbacks */</comment>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>baton</name></decl>;</decl_stmt>      <comment type="block">/* the dir/file baton (or NULL for edit baton) */</comment>
}</block></struct></type> <name>item_baton</name>;</typedef>

<function><type><specifier>static</specifier> <name>item_baton</name> *</type><name>make_baton</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                              <param><decl><type><name>PyObject</name> *</type><name>editor</name></decl></param>,
                              <param><decl><type><name>PyObject</name> *</type><name>baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>item_baton</name> *</type><name>newb</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>newb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Note: We steal the caller's reference to 'baton'. Also, to avoid
     memory leaks, we borrow the caller's reference to 'editor'. In this
     case, borrowing the reference to 'editor' is safe because the contents
     of an item_baton struct are only used by functino calls which operate on
     the editor itself. */</comment>
  <expr_stmt><expr><name><name>newb</name>-&gt;<name>editor</name></name> = <name>editor</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>newb</name>-&gt;<name>baton</name></name> = <name>baton</name></expr>;</expr_stmt>

  <return>return <expr><name>newb</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>close_baton</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>method</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>item_baton</name> *</type><name>ib</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If there is no baton object, then it is an edit_baton, and we should
     not bother to pass an object. Note that we still shove a NULL onto
     the stack, but the format specified just won't reference it.  */</comment>
  <comment type="block">/* ### python doesn't have 'const' on the method name and format */</comment>
  <if>if <condition>(<expr>(<name>result</name> = <call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name><name>ib</name>-&gt;<name>editor</name></name></expr></argument>, <argument><expr>(<name>char</name> *)<name>method</name></expr></argument>,
                                    <argument><expr><name><name>ib</name>-&gt;<name>baton</name></name> ? (<name>char</name> *)"(O)" : <name>NULL</name></expr></argument>,
                                    <argument><expr><name><name>ib</name>-&gt;<name>baton</name></name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finished</name>;</goto>
    }</block></then></if>

  <comment type="block">/* there is no return value, so just toss this object (probably Py_None) */</comment>
  <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* We're now done with the baton. Since there isn't really a free, all
     we need to do is note that its objects are no longer referenced by
     the baton.  */</comment>
  <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>ib</name>-&gt;<name>baton</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SVN_DEBUG</name></cpp:ifdef>
  <expr_stmt><expr><name><name>ib</name>-&gt;<name>editor</name></name> = <name><name>ib</name>-&gt;<name>baton</name></name> = <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><name>err</name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt>

 <label><name>finished</name>:</label>
  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>set_target_revision</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
                                        <param><decl><type><name>svn_revnum_t</name></type> <name>target_revision</name></decl></param>,
                                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>item_baton</name> *</type><name>ib</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* ### python doesn't have 'const' on the method name and format */</comment>
  <if>if <condition>(<expr>(<name>result</name> = <call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name><name>ib</name>-&gt;<name>editor</name></name></expr></argument>, <argument><expr>(<name>char</name> *)"set_target_revision"</expr></argument>,
                                    <argument><expr>(<name>char</name> *)"l"</expr></argument>, <argument><expr><name>target_revision</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finished</name>;</goto>
    }</block></then></if>

  <comment type="block">/* there is no return value, so just toss this object (probably Py_None) */</comment>
  <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>err</name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt>

 <label><name>finished</name>:</label>
  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>open_root</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
                              <param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
                              <param><decl><type><name>apr_pool_t</name> *</type><name>dir_pool</name></decl></param>,
                              <param><decl><type><name>void</name> **</type><name>root_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>item_baton</name> *</type><name>ib</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* ### python doesn't have 'const' on the method name and format */</comment>
  <if>if <condition>(<expr>(<name>result</name> = <call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name><name>ib</name>-&gt;<name>editor</name></name></expr></argument>, <argument><expr>(<name>char</name> *)"open_root"</expr></argument>,
                                    <argument><expr>(<name>char</name> *)"lO&amp;"</expr></argument>, <argument><expr><name>base_revision</name></expr></argument>,
                                    <argument><expr><name>make_ob_pool</name></expr></argument>, <argument><expr><name>dir_pool</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finished</name>;</goto>
    }</block></then></if>

  <comment type="block">/* make_baton takes our 'result' reference */</comment>
  <expr_stmt><expr>*<name>root_baton</name> = <call><name>make_baton</name><argument_list>(<argument><expr><name>dir_pool</name></expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>editor</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>err</name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt>

 <label><name>finished</name>:</label>
  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>delete_entry</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                 <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                                 <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
                                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>item_baton</name> *</type><name>ib</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* ### python doesn't have 'const' on the method name and format */</comment>
  <if>if <condition>(<expr>(<name>result</name> = <call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name><name>ib</name>-&gt;<name>editor</name></name></expr></argument>, <argument><expr>(<name>char</name> *)"delete_entry"</expr></argument>,
                                    <argument><expr>(<name>char</name> *)"slOO&amp;"</expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>baton</name></name></expr></argument>,
                                    <argument><expr><name>make_ob_pool</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finished</name>;</goto>
    }</block></then></if>

  <comment type="block">/* there is no return value, so just toss this object (probably Py_None) */</comment>
  <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>err</name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt>

 <label><name>finished</name>:</label>
  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>add_directory</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                  <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
                                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl></param>,
                                  <param><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_revision</name></decl></param>,
                                  <param><decl><type><name>apr_pool_t</name> *</type><name>dir_pool</name></decl></param>,
                                  <param><decl><type><name>void</name> **</type><name>child_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>item_baton</name> *</type><name>ib</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* ### python doesn't have 'const' on the method name and format */</comment>
  <if>if <condition>(<expr>(<name>result</name> = <call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name><name>ib</name>-&gt;<name>editor</name></name></expr></argument>, <argument><expr>(<name>char</name> *)"add_directory"</expr></argument>,
                                    <argument><expr>(<name>char</name> *)"sOslO&amp;"</expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>baton</name></name></expr></argument>,
                                    <argument><expr><name>copyfrom_path</name></expr></argument>, <argument><expr><name>copyfrom_revision</name></expr></argument>,
                                    <argument><expr><name>make_ob_pool</name></expr></argument>, <argument><expr><name>dir_pool</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finished</name>;</goto>
    }</block></then></if>

  <comment type="block">/* make_baton takes our 'result' reference */</comment>
  <expr_stmt><expr>*<name>child_baton</name> = <call><name>make_baton</name><argument_list>(<argument><expr><name>dir_pool</name></expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>editor</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>err</name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt>

 <label><name>finished</name>:</label>
  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>open_directory</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                   <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
                                   <param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
                                   <param><decl><type><name>apr_pool_t</name> *</type><name>dir_pool</name></decl></param>,
                                   <param><decl><type><name>void</name> **</type><name>child_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>item_baton</name> *</type><name>ib</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* ### python doesn't have 'const' on the method name and format */</comment>
  <if>if <condition>(<expr>(<name>result</name> = <call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name><name>ib</name>-&gt;<name>editor</name></name></expr></argument>, <argument><expr>(<name>char</name> *)"open_directory"</expr></argument>,
                                    <argument><expr>(<name>char</name> *)"sOlO&amp;"</expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>baton</name></name></expr></argument>,
                                    <argument><expr><name>base_revision</name></expr></argument>,
                                    <argument><expr><name>make_ob_pool</name></expr></argument>, <argument><expr><name>dir_pool</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finished</name>;</goto>
    }</block></then></if>

  <comment type="block">/* make_baton takes our 'result' reference */</comment>
  <expr_stmt><expr>*<name>child_baton</name> = <call><name>make_baton</name><argument_list>(<argument><expr><name>dir_pool</name></expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>editor</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>err</name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt>

 <label><name>finished</name>:</label>
  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>change_dir_prop</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>dir_baton</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
                                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>item_baton</name> *</type><name>ib</name> <init>= <expr><name>dir_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* ### python doesn't have 'const' on the method name and format */</comment>
  <if>if <condition>(<expr>(<name>result</name> = <call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name><name>ib</name>-&gt;<name>editor</name></name></expr></argument>, <argument><expr>(<name>char</name> *)"change_dir_prop"</expr></argument>,
                                    <argument><expr>(<name>char</name> *)"Oss#O&amp;"</expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
                                    <argument><expr><name>value</name> ? <name><name>value</name>-&gt;<name>data</name></name> : <name>NULL</name></expr></argument>,
                                    <argument><expr><name>value</name> ? <name><name>value</name>-&gt;<name>len</name></name> : 0</expr></argument>,
                                    <argument><expr><name>make_ob_pool</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finished</name>;</goto>
    }</block></then></if>

  <comment type="block">/* there is no return value, so just toss this object (probably Py_None) */</comment>
  <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>err</name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt>

 <label><name>finished</name>:</label>
  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>close_directory</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>dir_baton</name></decl></param>,
                                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>close_baton</name><argument_list>(<argument><expr><name>dir_baton</name></expr></argument>, <argument><expr>"close_directory"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>add_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                             <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl></param>,
                             <param><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_revision</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>file_pool</name></decl></param>,
                             <param><decl><type><name>void</name> **</type><name>file_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>item_baton</name> *</type><name>ib</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* ### python doesn't have 'const' on the method name and format */</comment>
  <if>if <condition>(<expr>(<name>result</name> = <call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name><name>ib</name>-&gt;<name>editor</name></name></expr></argument>, <argument><expr>(<name>char</name> *)"add_file"</expr></argument>,
                                    <argument><expr>(<name>char</name> *)"sOslO&amp;"</expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>baton</name></name></expr></argument>,
                                    <argument><expr><name>copyfrom_path</name></expr></argument>, <argument><expr><name>copyfrom_revision</name></expr></argument>,
                                    <argument><expr><name>make_ob_pool</name></expr></argument>, <argument><expr><name>file_pool</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finished</name>;</goto>
    }</block></then></if>

  <comment type="block">/* make_baton takes our 'result' reference */</comment>
  <expr_stmt><expr>*<name>file_baton</name> = <call><name>make_baton</name><argument_list>(<argument><expr><name>file_pool</name></expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>editor</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>err</name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt>

 <label><name>finished</name>:</label>
  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>open_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                              <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
                              <param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
                              <param><decl><type><name>apr_pool_t</name> *</type><name>file_pool</name></decl></param>,
                              <param><decl><type><name>void</name> **</type><name>file_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>item_baton</name> *</type><name>ib</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* ### python doesn't have 'const' on the method name and format */</comment>
  <if>if <condition>(<expr>(<name>result</name> = <call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name><name>ib</name>-&gt;<name>editor</name></name></expr></argument>, <argument><expr>(<name>char</name> *)"open_file"</expr></argument>,
                                    <argument><expr>(<name>char</name> *)"sOlO&amp;"</expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>baton</name></name></expr></argument>,
                                    <argument><expr><name>base_revision</name></expr></argument>,
                                    <argument><expr><name>make_ob_pool</name></expr></argument>, <argument><expr><name>file_pool</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finished</name>;</goto>
    }</block></then></if>

  <comment type="block">/* make_baton takes our 'result' reference */</comment>
  <expr_stmt><expr>*<name>file_baton</name> = <call><name>make_baton</name><argument_list>(<argument><expr><name>file_pool</name></expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>editor</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>err</name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt>

 <label><name>finished</name>:</label>
  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>window_handler</name><parameter_list>(<param><decl><type><name>svn_txdelta_window_t</name> *</type><name>window</name></decl></param>,
                                   <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>handler</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>window</name> == <name>NULL</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* the last call; it closes the handler */</comment>

      <comment type="block">/* invoke the handler with None for the window */</comment>
      <comment type="block">/* ### python doesn't have 'const' on the format */</comment>
      <expr_stmt><expr><name>result</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>handler</name></expr></argument>, <argument><expr>(<name>char</name> *)"O"</expr></argument>, <argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* we no longer need to refer to the handler object */</comment>
      <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <comment type="block">/* invoke the handler with the window */</comment>
      <comment type="block">/* ### python doesn't have 'const' on the format */</comment>
      <expr_stmt><expr><name>result</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>handler</name></expr></argument>, <argument><expr>(<name>char</name> *)"O&amp;"</expr></argument>,
        <argument><expr><name>make_ob_txdelta_window</name></expr></argument>, <argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <if>if <condition>(<expr><name>result</name> == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finished</name>;</goto>
    }</block></then></if>

  <comment type="block">/* there is no return value, so just toss this object (probably Py_None) */</comment>
  <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>err</name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt>

 <label><name>finished</name>:</label>
  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>apply_textdelta</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_checksum</name></decl></param>,
                                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                    <param><decl><type><name>svn_txdelta_window_handler_t</name> *</type><name>handler</name></decl></param>,
                                    <param><decl><type><name>void</name> **</type><name>h_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>item_baton</name> *</type><name>ib</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* ### python doesn't have 'const' on the method name and format */</comment>
  <if>if <condition>(<expr>(<name>result</name> = <call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name><name>ib</name>-&gt;<name>editor</name></name></expr></argument>, <argument><expr>(<name>char</name> *)"apply_textdelta"</expr></argument>,
                                    <argument><expr>(<name>char</name> *)"(Os)"</expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>baton</name></name></expr></argument>,
                                    <argument><expr><name>base_checksum</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finished</name>;</goto>
    }</block></then></if>

  <comment type="block">/* Interpret None to mean svn_delta_noop_window_handler. This is much
     easier/faster than making code always have to write a NOOP handler
     in Python.  */</comment>
  <if>if <condition>(<expr><name>result</name> == <name>Py_None</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr>*<name>handler</name> = <name>svn_delta_noop_window_handler</name></expr>;</expr_stmt>
      <expr_stmt><expr>*<name>h_baton</name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <comment type="block">/* return the thunk for invoking the handler. the baton takes our
         'result' reference, which is the handler. */</comment>
      <expr_stmt><expr>*<name>handler</name> = <name>window_handler</name></expr>;</expr_stmt>
      <expr_stmt><expr>*<name>h_baton</name> = <name>result</name></expr>;</expr_stmt>
    }</block></else></if>

  <expr_stmt><expr><name>err</name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt>

 <label><name>finished</name>:</label>
  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>change_file_prop</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
                                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>item_baton</name> *</type><name>ib</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* ### python doesn't have 'const' on the method name and format */</comment>
  <if>if <condition>(<expr>(<name>result</name> = <call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name><name>ib</name>-&gt;<name>editor</name></name></expr></argument>, <argument><expr>(<name>char</name> *)"change_file_prop"</expr></argument>,
                                    <argument><expr>(<name>char</name> *)"Oss#O&amp;"</expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
                                    <argument><expr><name>value</name> ? <name><name>value</name>-&gt;<name>data</name></name> : <name>NULL</name></expr></argument>,
                                    <argument><expr><name>value</name> ? <name><name>value</name>-&gt;<name>len</name></name> : 0</expr></argument>,
                                    <argument><expr><name>make_ob_pool</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finished</name>;</goto>
    }</block></then></if>

  <comment type="block">/* there is no return value, so just toss this object (probably Py_None) */</comment>
  <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>err</name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt>

 <label><name>finished</name>:</label>
  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>close_file</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>text_checksum</name></decl></param>,
                               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>item_baton</name> *</type><name>ib</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* ### python doesn't have 'const' on the method name and format */</comment>
  <if>if <condition>(<expr>(<name>result</name> = <call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name><name>ib</name>-&gt;<name>editor</name></name></expr></argument>, <argument><expr>(<name>char</name> *)"close_file"</expr></argument>,
                                    <argument><expr>(<name>char</name> *)"(Os)"</expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>baton</name></name></expr></argument>,
                                    <argument><expr><name>text_checksum</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finished</name>;</goto>
    }</block></then></if>

  <comment type="block">/* there is no return value, so just toss this object (probably Py_None) */</comment>
  <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* We're now done with the baton. Since there isn't really a free, all
     we need to do is note that its objects are no longer referenced by
     the baton.  */</comment>
  <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name><name>ib</name>-&gt;<name>baton</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SVN_DEBUG</name></cpp:ifdef>
  <expr_stmt><expr><name><name>ib</name>-&gt;<name>editor</name></name> = <name><name>ib</name>-&gt;<name>baton</name></name> = <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><name>err</name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt>

 <label><name>finished</name>:</label>
  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>close_edit</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
                               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>close_baton</name><argument_list>(<argument><expr><name>edit_baton</name></expr></argument>, <argument><expr>"close_edit"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>abort_edit</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
                               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>close_baton</name><argument_list>(<argument><expr><name>edit_baton</name></expr></argument>, <argument><expr>"abort_edit"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>svn_swig_py_make_editor</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
                             <param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
                             <param><decl><type><name>PyObject</name> *</type><name>py_editor</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_delta_editor_t</name> *</type><name>thunk_editor</name> <init>= <expr><call><name>svn_delta_default_editor</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>thunk_editor</name>-&gt;<name>set_target_revision</name></name> = <name>set_target_revision</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>thunk_editor</name>-&gt;<name>open_root</name></name> = <name>open_root</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>thunk_editor</name>-&gt;<name>delete_entry</name></name> = <name>delete_entry</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>thunk_editor</name>-&gt;<name>add_directory</name></name> = <name>add_directory</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>thunk_editor</name>-&gt;<name>open_directory</name></name> = <name>open_directory</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>thunk_editor</name>-&gt;<name>change_dir_prop</name></name> = <name>change_dir_prop</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>thunk_editor</name>-&gt;<name>close_directory</name></name> = <name>close_directory</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>thunk_editor</name>-&gt;<name>add_file</name></name> = <name>add_file</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>thunk_editor</name>-&gt;<name>open_file</name></name> = <name>open_file</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>thunk_editor</name>-&gt;<name>apply_textdelta</name></name> = <name>apply_textdelta</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>thunk_editor</name>-&gt;<name>change_file_prop</name></name> = <name>change_file_prop</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>thunk_editor</name>-&gt;<name>close_file</name></name> = <name>close_file</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>thunk_editor</name>-&gt;<name>close_edit</name></name> = <name>close_edit</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>thunk_editor</name>-&gt;<name>abort_edit</name></name> = <name>abort_edit</name></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>editor</name> = <name>thunk_editor</name></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>edit_baton</name> = <call><name>make_baton</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>py_editor</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<escape char="0xc"/>
<comment type="block">/*** Other Wrappers for SVN Functions ***/</comment>


<function><type><name>apr_file_t</name> *</type><name>svn_swig_py_make_file</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>py_file</name></decl></param>,
                                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_file_t</name> *</type><name>apr_file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_status_t</name></type> <name>apr_err</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>py_file</name> == <name>NULL</name> || <name>py_file</name> == <name>Py_None</name></expr>)</condition><then>
    <return>return <expr><name>NULL</name></expr>;</return></then></if>

  <if>if <condition>(<expr><call><name>PyString_Check</name><argument_list>(<argument><expr><name>py_file</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <comment type="block">/* input is a path -- just open an apr_file_t */</comment>
      <decl_stmt><decl><type><name>char</name>*</type> <name>fname</name> <init>= <expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>py_file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>apr_err</name> = <call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name>apr_file</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>,
                              <argument><expr><name>APR_CREATE</name> | <name>APR_READ</name> | <name>APR_WRITE</name></expr></argument>,
                              <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>apr_err</name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>apr_strerror</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_IOError</name></expr></argument>, <argument><expr>"apr_file_open failed: %s: '%s'"</expr></argument>,
                       <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
    }</block></then>
  <else>else <if>if <condition>(<expr><call><name>PyFile_Check</name><argument_list>(<argument><expr><name>py_file</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>FILE</name> *</type><name>file</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>apr_os_file_t</name></type> <name>osfile</name></decl>;</decl_stmt>

      <comment type="block">/* input is a file object -- convert to apr_file_t */</comment>
      <expr_stmt><expr><name>file</name> = <call><name>PyFile_AsFile</name><argument_list>(<argument><expr><name>py_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
      <expr_stmt><expr><name>osfile</name> = (<name>apr_os_file_t</name>)<call><name>_get_osfhandle</name><argument_list>(<argument><expr><call><name>_fileno</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><name>osfile</name> = (<name>apr_os_file_t</name>)<call><name>fileno</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <expr_stmt><expr><name>apr_err</name> = <call><name>apr_os_file_put</name><argument_list>(<argument><expr>&amp;<name>apr_file</name></expr></argument>, <argument><expr>&amp;<name>osfile</name></expr></argument>, <argument><expr><name>O_CREAT</name> | <name>O_WRONLY</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>apr_err</name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>apr_strerror</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>PyErr_Format</name><argument_list>(<argument><expr><name>PyExc_IOError</name></expr></argument>, <argument><expr>"apr_os_file_put failed: %s"</expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
    }</block></then></if></else></if>
  <return>return <expr><name>apr_file</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>read_handler_pyio</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>char</name> *</type><name>buffer</name></decl></param>, <param><decl><type><name>apr_size_t</name> *</type><name>len</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>py_io</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_size_t</name></type> <name>bytes</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>py_io</name> == <name>Py_None</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* Return the empty string to indicate a short read */</comment>
      <expr_stmt><expr>*<name>buffer</name> = '\0'</expr>;</expr_stmt>
      <expr_stmt><expr>*<name>len</name> = 0</expr>;</expr_stmt>
      <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
    }</block></then></if>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>(<name>result</name> = <call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name>py_io</name></expr></argument>, <argument><expr>(<name>char</name> *)"read"</expr></argument>,
                                    <argument><expr>(<name>char</name> *)"i"</expr></argument>, <argument><expr>*<name>len</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr><call><name>PyString_Check</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>bytes</name> = <call><name>PyString_GET_SIZE</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>bytes</name> &gt; *<name>len</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>err</name> = <call><name>callback_bad_return_error</name><argument_list>(<argument><expr>"Too many bytes"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else
        <block>{
          <comment type="block">/* Writeback, in case this was a short read, indicating EOF */</comment>
          <expr_stmt><expr>*<name>len</name> = <name>bytes</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>*<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then>
  <else>else
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_bad_return_error</name><argument_list>(<argument><expr>"Not a string"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if></else></if>
  <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>write_handler_pyio</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>apr_size_t</name> *</type><name>len</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>py_io</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>data</name> != <name>NULL</name> &amp;&amp; <name>py_io</name> != <name>Py_None</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr>(<name>result</name> = <call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name>py_io</name></expr></argument>, <argument><expr>(<name>char</name> *)"write"</expr></argument>,
                                        <argument><expr>(<name>char</name> *)"s#"</expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr>*<name>len</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>close_handler_pyio</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>py_io</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>py_io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_stream_t</name> *</type>
<name>svn_swig_py_make_stream</name><parameter_list>(<param><decl><type><name>PyObject</name> *</type><name>py_io</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>stream</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>stream</name> = <call><name>svn_stream_create</name><argument_list>(<argument><expr><name>py_io</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_stream_set_read</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>read_handler_pyio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_stream_set_write</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>write_handler_pyio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_stream_set_close</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>close_handler_pyio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>py_io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>stream</name></expr>;</return>
}</block></function>


<function><type><name>void</name></type> <name>svn_swig_py_notify_func</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                             <param><decl><type><name>svn_wc_notify_action_t</name></type> <name>action</name></decl></param>,
                             <param><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mime_type</name></decl></param>,
                             <param><decl><type><name>svn_wc_notify_state_t</name></type> <name>content_state</name></decl></param>,
                             <param><decl><type><name>svn_wc_notify_state_t</name></type> <name>prop_state</name></decl></param>,
                             <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>function</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>function</name> == <name>NULL</name> || <name>function</name> == <name>Py_None</name></expr>)</condition><then>
    <return>return;</return></then></if>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>(<name>result</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>function</name></expr></argument>,
                                      <argument><expr>(<name>char</name> *)"(siisiii)"</expr></argument>,
                                      <argument><expr><name>path</name></expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><name>kind</name></expr></argument>,
                                      <argument><expr><name>mime_type</name></expr></argument>,
                                      <argument><expr><name>content_state</name></expr></argument>, <argument><expr><name>prop_state</name></expr></argument>,
                                      <argument><expr><name>revision</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <comment type="block">/* The callback shouldn't be returning anything. */</comment>
      <if>if <condition>(<expr><name>result</name> != <name>Py_None</name></expr>)</condition><then>
        <expr_stmt><expr><name>err</name> = <call><name>callback_bad_return_error</name><argument_list>(<argument><expr>"Not None"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
      <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <comment type="block">/* Our error has no place to go. :-( */</comment>
  <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><name>void</name></type> <name>svn_swig_py_notify_func2</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>svn_wc_notify_t</name> *</type><name>notify</name></decl></param>,
                              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>function</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>function</name> == <name>NULL</name> || <name>function</name> == <name>Py_None</name></expr>)</condition><then>
    <return>return;</return></then></if>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>(<name>result</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>function</name></expr></argument>,
                                      <argument><expr>(<name>char</name> *)"(O&amp;O&amp;)"</expr></argument>,
                                      <argument><expr><name>make_ob_wc_notify</name></expr></argument>, <argument><expr><name>notify</name></expr></argument>,
                                      <argument><expr><name>make_ob_pool</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <comment type="block">/* The callback shouldn't be returning anything. */</comment>
      <if>if <condition>(<expr><name>result</name> != <name>Py_None</name></expr>)</condition><then>
        <expr_stmt><expr><name>err</name> = <call><name>callback_bad_return_error</name><argument_list>(<argument><expr>"Not None"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
      <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <comment type="block">/* Our error has no place to go. :-( */</comment>
  <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>svn_swig_py_status_func</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                             <param><decl><type><name>svn_wc_status_t</name> *</type><name>status</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>function</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>function</name> == <name>NULL</name> || <name>function</name> == <name>Py_None</name></expr>)</condition><then>
    <return>return;</return></then></if>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>(<name>result</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>function</name></expr></argument>, <argument><expr>(<name>char</name> *)"sO&amp;"</expr></argument>, <argument><expr><name>path</name></expr></argument>,
                                      <argument><expr><name>make_ob_wc_status</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <comment type="block">/* The callback shouldn't be returning anything. */</comment>
      <if>if <condition>(<expr><name>result</name> != <name>Py_None</name></expr>)</condition><then>
        <expr_stmt><expr><name>err</name> = <call><name>callback_bad_return_error</name><argument_list>(<argument><expr>"Not None"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
      <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <comment type="block">/* Our error has no place to go. :-( */</comment>
  <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><name>svn_error_t</name> *</type><name>svn_swig_py_delta_path_driver_cb_func</name><parameter_list>(<param><decl><type><name>void</name> **</type><name>dir_baton</name></decl></param>,
                                                   <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
                                                   <param><decl><type><name>void</name> *</type><name>callback_baton</name></decl></param>,
                                                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>function</name> <init>= <expr><name>callback_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>, *<decl><type ref="prev"/><name>py_parent_baton</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>function</name> == <name>NULL</name> || <name>function</name> == <name>Py_None</name></expr>)</condition><then>
    <return>return <expr><name>err</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>py_parent_baton</name> = <call><name>svn_swig_NewPointerObjString</name><argument_list>(<argument><expr><name>parent_baton</name></expr></argument>,
                                                 <argument><expr>"void *"</expr></argument>,
                                                 <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>result</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>function</name></expr></argument>, <argument><expr>(<name>char</name> *)"OsO&amp;"</expr></argument>,
                                 <argument><expr><name>py_parent_baton</name></expr></argument>,
                                 <argument><expr><name>path</name></expr></argument>, <argument><expr><name>make_ob_pool</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <if>if <condition>(<expr><name>result</name> == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>result</name> == <name>Py_None</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr>*<name>dir_baton</name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <if>if <condition>(<expr><call><name>svn_swig_ConvertPtrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>dir_baton</name></expr></argument>, <argument><expr>"void *"</expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>err</name> = <call><name>type_conversion_error</name><argument_list>(<argument><expr>"void *"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></else></if></else></if>

  <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_parent_baton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>


<function><type><name>void</name></type> <name>svn_swig_py_status_func2</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                              <param><decl><type><name>svn_wc_status2_t</name> *</type><name>status</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>function</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>function</name> == <name>NULL</name> || <name>function</name> == <name>Py_None</name></expr>)</condition><then>
    <return>return;</return></then></if>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>(<name>result</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>function</name></expr></argument>, <argument><expr>(<name>char</name> *)"sO&amp;"</expr></argument>, <argument><expr><name>path</name></expr></argument>,
                                      <argument><expr><name>make_ob_wc_status</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <comment type="block">/* The callback shouldn't be returning anything. */</comment>
      <if>if <condition>(<expr><name>result</name> != <name>Py_None</name></expr>)</condition><then>
        <expr_stmt><expr><name>err</name> = <call><name>callback_bad_return_error</name><argument_list>(<argument><expr>"Not None"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
      <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <comment type="block">/* Our error has no place to go. :-( */</comment>
  <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><name>svn_error_t</name> *</type><name>svn_swig_py_cancel_func</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>function</name> <init>= <expr><name>cancel_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>function</name> == <name>NULL</name> || <name>function</name> == <name>Py_None</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>(<name>result</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>function</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <if>if <condition>(<expr><call><name>PyInt_Check</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
          <if>if <condition>(<expr><call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><name>err</name> = <call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CANCELLED</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></then>
      <else>else <if>if <condition>(<expr><call><name>PyLong_Check</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
          <if>if <condition>(<expr><call><name>PyLong_AsLong</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><name>err</name> = <call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CANCELLED</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        }</block></then>
      <else>else <if>if <condition>(<expr><name>result</name> != <name>Py_None</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>err</name> = <call><name>callback_bad_return_error</name><argument_list>(<argument><expr>"Not an integer or None"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if></else></if>
      <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_swig_py_fs_get_locks_func</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                                           <param><decl><type><name>svn_lock_t</name> *</type><name>lock</name></decl></param>,
                                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>function</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>function</name> == <name>NULL</name> || <name>function</name> == <name>Py_None</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>(<name>result</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>function</name></expr></argument>, <argument><expr>(<name>char</name> *)"O&amp;O&amp;"</expr></argument>,
                                      <argument><expr><name>make_ob_lock</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>,
                                      <argument><expr><name>make_ob_pool</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <comment type="block">/* The callback shouldn't be returning anything. */</comment>
      <if>if <condition>(<expr><name>result</name> != <name>Py_None</name></expr>)</condition><then>
        <expr_stmt><expr><name>err</name> = <call><name>callback_bad_return_error</name><argument_list>(<argument><expr>"Not None"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
      <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_swig_py_get_commit_log_func</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>log_msg</name></decl></param>,
                                             <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>tmp_file</name></decl></param>,
                                             <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type>
                                             <name>commit_items</name></decl></param>,
                                             <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>function</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>cmt_items</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>log_msg</name> = <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>tmp_file</name> = <name>NULL</name></expr>;</expr_stmt>

  <comment type="block">/* ### todo: for now, just ignore the whole tmp_file thing.  */</comment>

  <if>if <condition>(<expr>(<name>function</name> == <name>NULL</name>) || (<name>function</name> == <name>Py_None</name>)</expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>commit_items</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>cmt_items</name> = <call><name>commit_item_array_to_list</name><argument_list>(<argument><expr><name>commit_items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <expr_stmt><expr><name>cmt_items</name> = <name>Py_None</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <if>if <condition>(<expr>(<name>result</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>function</name></expr></argument>,
                                      <argument><expr>(<name>char</name> *)"OO&amp;"</expr></argument>,
                                      <argument><expr><name>cmt_items</name></expr></argument>,
                                      <argument><expr><name>make_ob_pool</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>cmt_items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finished</name>;</goto>
    }</block></then></if>

  <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>cmt_items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>result</name> == <name>Py_None</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr>*<name>log_msg</name> = <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>err</name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr><call><name>PyString_Check</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <expr_stmt><expr>*<name>log_msg</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>PyString_AS_STRING</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>err</name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>err</name> = <call><name>callback_bad_return_error</name><argument_list>(<argument><expr>"Not a string"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if></else></if>

 <label><name>finished</name>:</label>
  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type><name>svn_swig_py_repos_authz_func</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>allowed</name></decl></param>,
                                          <param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>,
                                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                          <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>function</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>py_pool</name></decl>, *<decl><type ref="prev"/><name>py_root</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>allowed</name> = <name>TRUE</name></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>function</name> == <name>NULL</name> || <name>function</name> == <name>Py_None</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>py_pool</name> = <call><name>make_ob_pool</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>py_pool</name> == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finished</name>;</goto>
    }</block></then></if>
  <expr_stmt><expr><name>py_root</name> = <call><name>make_ob_fs_root</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>py_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>py_root</name> == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>py_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finished</name>;</goto>
    }</block></then></if>

  <if>if <condition>(<expr>(<name>result</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>function</name></expr></argument>,
                                      <argument><expr>(<name>char</name> *)"OsO"</expr></argument>,
                                      <argument><expr><name>py_root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>py_pool</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <if>if <condition>(<expr><call><name>PyInt_Check</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr>*<name>allowed</name> = <call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
      <else>else <if>if <condition>(<expr><call><name>PyLong_Check</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr>*<name>allowed</name> = <call><name>PyLong_AsLong</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
      <else>else
        <expr_stmt><expr><name>err</name> = <call><name>callback_bad_return_error</name><argument_list>(<argument><expr>"Not an integer"</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>
      <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>py_root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>py_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>finished</name>:</label>
  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type><name>svn_swig_py_repos_history_func</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                            <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>function</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>function</name> == <name>NULL</name> || <name>function</name> == <name>Py_None</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>(<name>result</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>function</name></expr></argument>,
                                      <argument><expr>(<name>char</name> *)"slO&amp;"</expr></argument>,
                                      <argument><expr><name>path</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>,
                                      <argument><expr><name>make_ob_pool</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <if>if <condition>(<expr><name>result</name> != <name>Py_None</name></expr>)</condition><then>
        <expr_stmt><expr><name>err</name> = <call><name>callback_bad_return_error</name><argument_list>(<argument><expr>"Not None"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
      <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type><name>svn_swig_py_log_receiver</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                                      <param><decl><type><name>apr_hash_t</name> *</type><name>changed_paths</name></decl></param>,
                                      <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>author</name></decl></param>,
                                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>date</name></decl></param>,
                                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name></decl></param>,
                                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>receiver</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>, *<decl><type ref="prev"/><name>py_pool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>chpaths</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr>(<name>receiver</name> == <name>NULL</name>) || (<name>receiver</name> == <name>Py_None</name>)</expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>py_pool</name> = <call><name>make_ob_pool</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>py_pool</name> == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finished</name>;</goto>
    }</block></then></if>

  <if>if <condition>(<expr><name>changed_paths</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>chpaths</name> = <call><name>convert_hash</name><argument_list>(<argument><expr><name>changed_paths</name></expr></argument>, <argument><expr><name>convert_log_changed_path</name></expr></argument>,
                             <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <expr_stmt><expr><name>chpaths</name> = <name>Py_None</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>Py_INCREF</name><argument_list>(<argument><expr><name>Py_None</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <if>if <condition>(<expr>(<name>result</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>receiver</name></expr></argument>,
                                      <argument><expr>(<name>char</name> *)"OlsssO"</expr></argument>,
                                      <argument><expr><name>chpaths</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>author</name></expr></argument>, <argument><expr><name>date</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>,
                                      <argument><expr><name>py_pool</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <if>if <condition>(<expr><name>result</name> != <name>Py_None</name></expr>)</condition><then>
        <expr_stmt><expr><name>err</name> = <call><name>callback_bad_return_error</name><argument_list>(<argument><expr>"Not None"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
      <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>chpaths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>py_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>finished</name>:</label>
  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_swig_py_log_entry_receiver</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                                            <param><decl><type><name>svn_log_entry_t</name> *</type><name>log_entry</name></decl></param>,
                                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>receiver</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>, *<decl><type ref="prev"/><name>py_pool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>py_log_entry</name></decl>;</decl_stmt>

  <if>if <condition>(<expr>(<name>receiver</name> == <name>NULL</name>) || (<name>receiver</name> == <name>Py_None</name>)</expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>py_pool</name> = <call><name>make_ob_pool</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>py_pool</name> == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finished</name>;</goto>
    }</block></then></if>

  <expr_stmt><expr><name>py_log_entry</name> = <call><name>svn_swig_NewPointerObjString</name><argument_list>(<argument><expr><name>log_entry</name></expr></argument>, <argument><expr>"svn_log_entry_t *"</expr></argument>,
                                              <argument><expr><name>py_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>(<name>result</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>receiver</name></expr></argument>,
                                      <argument><expr>(<name>char</name> *)"OO"</expr></argument>, <argument><expr><name>py_log_entry</name></expr></argument>,
                                      <argument><expr><name>py_pool</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <if>if <condition>(<expr><name>result</name> != <name>Py_None</name></expr>)</condition><then>
        <expr_stmt><expr><name>err</name> = <call><name>callback_bad_return_error</name><argument_list>(<argument><expr>"Not None"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
      <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>py_log_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>py_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>finished</name>:</label>
  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_swig_py_info_receiver_func</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                            <param><decl><type><specifier>const</specifier> <name>svn_info_t</name> *</type><name>info</name></decl></param>,
                                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>receiver</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr>(<name>receiver</name> == <name>NULL</name>) || (<name>receiver</name> == <name>Py_None</name>)</expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>(<name>result</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>receiver</name></expr></argument>,
                                      <argument><expr>(<name>char</name> *)"sO&amp;O&amp;"</expr></argument>,
                                      <argument><expr><name>path</name></expr></argument>, <argument><expr><name>make_ob_info</name></expr></argument>, <argument><expr><name>info</name></expr></argument>,
                                      <argument><expr><name>make_ob_pool</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <if>if <condition>(<expr><name>result</name> != <name>Py_None</name></expr>)</condition><then>
        <expr_stmt><expr><name>err</name> = <call><name>callback_bad_return_error</name><argument_list>(<argument><expr>"Not None"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
      <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_swig_py_location_segment_receiver_func</name><parameter_list>(<param><decl><type><name>svn_location_segment_t</name> *</type><name>segment</name></decl></param>,
                                           <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>receiver</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr>(<name>receiver</name> == <name>NULL</name>) || (<name>receiver</name> == <name>Py_None</name>)</expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>(<name>result</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>receiver</name></expr></argument>,
                                      <argument><expr>(<name>char</name> *)"O&amp;O&amp;"</expr></argument>,
                                      <argument><expr><name>make_ob_location_segment</name></expr></argument>, <argument><expr><name>segment</name></expr></argument>,
                                      <argument><expr><name>make_ob_pool</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <if>if <condition>(<expr><name>result</name> != <name>Py_None</name></expr>)</condition><then>
        <expr_stmt><expr><name>err</name> = <call><name>callback_bad_return_error</name><argument_list>(<argument><expr>"Not None"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
      <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_swig_py_client_blame_receiver_func</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                                                    <param><decl><type><name>apr_int64_t</name></type> <name>line_no</name></decl></param>,
                                                    <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>author</name></decl></param>,
                                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>date</name></decl></param>,
                                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>line</name></decl></param>,
                                                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>receiver</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr>(<name>receiver</name> == <name>NULL</name>) || (<name>receiver</name> == <name>Py_None</name>)</expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>(<name>result</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>receiver</name></expr></argument>,
                                      <argument><expr><call>(<name>char</name> *)
                                      <argument_list>(<argument><expr><name>SVN_APR_INT64_T_PYCFMT</name> "lsssO&amp;"</expr></argument>)</argument_list></call></expr></argument>,
                                      <argument><expr><name>line_no</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>author</name></expr></argument>, <argument><expr><name>date</name></expr></argument>, <argument><expr><name>line</name></expr></argument>,
                                      <argument><expr><name>make_ob_pool</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <if>if <condition>(<expr><name>result</name> != <name>Py_None</name></expr>)</condition><then>
        <expr_stmt><expr><name>err</name> = <call><name>callback_bad_return_error</name><argument_list>(<argument><expr>"Not None"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
      <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_swig_py_changelist_receiver_func</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                                                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>changelist</name></decl></param>,
                                                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>receiver</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr>(<name>receiver</name> == <name>NULL</name>) || (<name>receiver</name> == <name>Py_None</name>)</expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>(<name>result</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>receiver</name></expr></argument>, 
                                      <argument><expr>(<name>char</name> *)"ssO&amp;"</expr></argument>,
                                      <argument><expr><name>path</name></expr></argument>, <argument><expr><name>changelist</name></expr></argument>, 
                                      <argument><expr><name>make_ob_pool</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <if>if <condition>(<expr><name>result</name> != <name>Py_None</name></expr>)</condition><then>
        <expr_stmt><expr><name>err</name> = <call><name>callback_bad_return_error</name><argument_list>(<argument><expr>"Not None"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
      <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_swig_py_auth_simple_prompt_func</name><parameter_list>(<param><decl><type><name>svn_auth_cred_simple_t</name> **</type><name>cred</name></decl></param>,
                                    <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>username</name></decl></param>,
                                    <param><decl><type><name>svn_boolean_t</name></type> <name>may_save</name></decl></param>,
                                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>function</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_auth_cred_simple_t</name> *</type><name>creds</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr>(<name>function</name> == <name>NULL</name>) || (<name>function</name> == <name>Py_None</name>)</expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>(<name>result</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>function</name></expr></argument>,
                                      <argument><expr>(<name>char</name> *)"sslO&amp;"</expr></argument>,
                                      <argument><expr><name>realm</name></expr></argument>, <argument><expr><name>username</name></expr></argument>, <argument><expr><name>may_save</name></expr></argument>,
                                      <argument><expr><name>make_ob_pool</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <if>if <condition>(<expr><name>result</name> != <name>Py_None</name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>svn_auth_cred_simple_t</name> *</type><name>tmp_creds</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
          <if>if <condition>(<expr><call><name>svn_swig_ConvertPtrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>(<name>void</name> **)&amp;<name>tmp_creds</name></expr></argument>,
                <argument><expr>"svn_auth_cred_simple_t *"</expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
              <expr_stmt><expr><name>err</name> = <call><name>type_conversion_error</name><argument_list>(<argument><expr>"svn_auth_cred_simple_t *"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
          <else>else
            <block>{
              <expr_stmt><expr><name>creds</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>creds</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>creds</name>-&gt;<name>username</name></name> = <name><name>tmp_creds</name>-&gt;<name>username</name></name> ?
                <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>tmp_creds</name>-&gt;<name>username</name></name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>creds</name>-&gt;<name>password</name></name> = <name><name>tmp_creds</name>-&gt;<name>password</name></name> ?
                <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>tmp_creds</name>-&gt;<name>password</name></name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>creds</name>-&gt;<name>may_save</name></name> = <name><name>tmp_creds</name>-&gt;<name>may_save</name></name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>
      <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>cred</name> = <name>creds</name></expr>;</expr_stmt>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_swig_py_auth_username_prompt_func</name><parameter_list>(<param><decl><type><name>svn_auth_cred_username_t</name> **</type><name>cred</name></decl></param>,
                                      <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name></decl></param>,
                                      <param><decl><type><name>svn_boolean_t</name></type> <name>may_save</name></decl></param>,
                                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>function</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_auth_cred_username_t</name> *</type><name>creds</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr>(<name>function</name> == <name>NULL</name>) || (<name>function</name> == <name>Py_None</name>)</expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>(<name>result</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>function</name></expr></argument>,
                                      <argument><expr>(<name>char</name> *)"slO&amp;"</expr></argument>,
                                      <argument><expr><name>realm</name></expr></argument>, <argument><expr><name>may_save</name></expr></argument>,
                                      <argument><expr><name>make_ob_pool</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <if>if <condition>(<expr><name>result</name> != <name>Py_None</name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>svn_auth_cred_username_t</name> *</type><name>tmp_creds</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
          <if>if <condition>(<expr><call><name>svn_swig_ConvertPtrString</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>(<name>void</name> **)&amp;<name>tmp_creds</name></expr></argument>,
                <argument><expr>"svn_auth_cred_username_t *"</expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
              <expr_stmt><expr><name>err</name> = <call><name>type_conversion_error</name><argument_list>(<argument><expr>"svn_auth_cred_username_t *"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
          <else>else
            <block>{
              <expr_stmt><expr><name>creds</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>creds</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>creds</name>-&gt;<name>username</name></name> = <name><name>tmp_creds</name>-&gt;<name>username</name></name> ?
                <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>tmp_creds</name>-&gt;<name>username</name></name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>creds</name>-&gt;<name>may_save</name></name> = <name><name>tmp_creds</name>-&gt;<name>may_save</name></name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>
      <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>cred</name> = <name>creds</name></expr>;</expr_stmt>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_swig_py_auth_ssl_server_trust_prompt_func</name><parameter_list>(
    <param><decl><type><name>svn_auth_cred_ssl_server_trust_t</name> **</type><name>cred</name></decl></param>,
    <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name></decl></param>,
    <param><decl><type><name>apr_uint32_t</name></type> <name>failures</name></decl></param>,
    <param><decl><type><specifier>const</specifier> <name>svn_auth_ssl_server_cert_info_t</name> *</type><name>cert_info</name></decl></param>,
    <param><decl><type><name>svn_boolean_t</name></type> <name>may_save</name></decl></param>,
    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>function</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_auth_cred_ssl_server_trust_t</name> *</type><name>creds</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr>(<name>function</name> == <name>NULL</name>) || (<name>function</name> == <name>Py_None</name>)</expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>(<name>result</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>function</name></expr></argument>, <argument><expr>(<name>char</name> *)"slO&amp;lO&amp;"</expr></argument>,
                  <argument><expr><name>realm</name></expr></argument>, <argument><expr><name>failures</name></expr></argument>, <argument><expr><name>make_ob_auth_ssl_server_cert_info</name></expr></argument>,
                  <argument><expr><name>cert_info</name></expr></argument>, <argument><expr><name>may_save</name></expr></argument>, <argument><expr><name>make_ob_pool</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <if>if <condition>(<expr><name>result</name> != <name>Py_None</name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>svn_auth_cred_ssl_server_trust_t</name> *</type><name>tmp_creds</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
          <if>if <condition>(<expr><call><name>svn_swig_ConvertPtrString</name>
              <argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>(<name>void</name> **)&amp;<name>tmp_creds</name></expr></argument>,
               <argument><expr>"svn_auth_cred_ssl_server_trust_t *"</expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
              <expr_stmt><expr><name>err</name> = <call><name>type_conversion_error</name>
                <argument_list>(<argument><expr>"svn_auth_cred_ssl_server_trust_t *"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
          <else>else
            <block>{
              <expr_stmt><expr><name>creds</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>creds</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr>*<name>creds</name> = *<name>tmp_creds</name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>
      <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>cred</name> = <name>creds</name></expr>;</expr_stmt>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_swig_py_auth_ssl_client_cert_prompt_func</name><parameter_list>(
    <param><decl><type><name>svn_auth_cred_ssl_client_cert_t</name> **</type><name>cred</name></decl></param>,
    <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name></decl></param>,
    <param><decl><type><name>svn_boolean_t</name></type> <name>may_save</name></decl></param>,
    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>function</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_auth_cred_ssl_client_cert_t</name> *</type><name>creds</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr>(<name>function</name> == <name>NULL</name>) || (<name>function</name> == <name>Py_None</name>)</expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>(<name>result</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>function</name></expr></argument>,
                                      <argument><expr>(<name>char</name> *)"slO&amp;"</expr></argument>,
                                      <argument><expr><name>realm</name></expr></argument>, <argument><expr><name>may_save</name></expr></argument>,
                                      <argument><expr><name>make_ob_pool</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <if>if <condition>(<expr><name>result</name> != <name>Py_None</name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>svn_auth_cred_ssl_client_cert_t</name> *</type><name>tmp_creds</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
          <if>if <condition>(<expr><call><name>svn_swig_ConvertPtrString</name>
              <argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>(<name>void</name> **)&amp;<name>tmp_creds</name></expr></argument>,
               <argument><expr>"svn_auth_cred_ssl_client_cert_t *"</expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
              <expr_stmt><expr><name>err</name> = <call><name>type_conversion_error</name><argument_list>(<argument><expr>"svn_auth_cred_ssl_client_cert_t *"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
          <else>else
            <block>{
              <expr_stmt><expr><name>creds</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>creds</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>creds</name>-&gt;<name>cert_file</name></name> = <name><name>tmp_creds</name>-&gt;<name>cert_file</name></name> ?
                <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>tmp_creds</name>-&gt;<name>cert_file</name></name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>creds</name>-&gt;<name>may_save</name></name> = <name><name>tmp_creds</name>-&gt;<name>may_save</name></name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>
      <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>cred</name> = <name>creds</name></expr>;</expr_stmt>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_swig_py_auth_ssl_client_cert_pw_prompt_func</name><parameter_list>(
    <param><decl><type><name>svn_auth_cred_ssl_client_cert_pw_t</name> **</type><name>cred</name></decl></param>,
    <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name></decl></param>,
    <param><decl><type><name>svn_boolean_t</name></type> <name>may_save</name></decl></param>,
    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>function</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_auth_cred_ssl_client_cert_pw_t</name> *</type><name>creds</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr>(<name>function</name> == <name>NULL</name>) || (<name>function</name> == <name>Py_None</name>)</expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>(<name>result</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>function</name></expr></argument>,
                                      <argument><expr>(<name>char</name> *)"slO&amp;"</expr></argument>,
                                      <argument><expr><name>realm</name></expr></argument>, <argument><expr><name>may_save</name></expr></argument>,
                                      <argument><expr><name>make_ob_pool</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <if>if <condition>(<expr><name>result</name> != <name>Py_None</name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>svn_auth_cred_ssl_client_cert_pw_t</name> *</type><name>tmp_creds</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
          <if>if <condition>(<expr><call><name>svn_swig_ConvertPtrString</name>
              <argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>(<name>void</name> **)&amp;<name>tmp_creds</name></expr></argument>,
               <argument><expr>"svn_auth_cred_ssl_client_cert_pw_t *"</expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
              <expr_stmt><expr><name>err</name> = <call><name>type_conversion_error</name>
                <argument_list>(<argument><expr>"svn_auth_cred_ssl_client_cert_pw_t *"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
          <else>else
            <block>{
              <expr_stmt><expr><name>creds</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>creds</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>creds</name>-&gt;<name>password</name></name> = <name><name>tmp_creds</name>-&gt;<name>password</name></name> ?
                <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>tmp_creds</name>-&gt;<name>password</name></name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>creds</name>-&gt;<name>may_save</name></name> = <name><name>tmp_creds</name>-&gt;<name>may_save</name></name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>
      <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>cred</name> = <name>creds</name></expr>;</expr_stmt>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<comment type="block">/* svn_ra_callbacks_t */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>ra_callbacks_open_tmp_file</name><parameter_list>(<param><decl><type><name>apr_file_t</name> **</type><name>fp</name></decl></param>,
                           <param><decl><type><name>void</name> *</type><name>callback_baton</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>callbacks</name> <init>= <expr>(<name>PyObject</name> *)<name>callback_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>py_callback</name></decl>, *<decl><type ref="prev"/><name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>fp</name> = <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>py_callback</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>callbacks</name></expr></argument>, <argument><expr>(<name>char</name> *)"open_tmp_file"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>py_callback</name> == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finished</name>;</goto>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>py_callback</name> == <name>Py_None</name></expr>)</condition><then>
    <block>{
      <goto>goto <name>finished</name>;</goto>
    }</block></then></if></else></if>

  <if>if <condition>(<expr>(<name>result</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>py_callback</name></expr></argument>,
                                      <argument><expr>(<name>char</name> *)"O&amp;"</expr></argument>,
                                      <argument><expr><name>make_ob_pool</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>result</name> != <name>Py_None</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr>*<name>fp</name> = <call><name>svn_swig_py_make_file</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr>*<name>fp</name> == <name>NULL</name></expr>)</condition><then>
       <block>{
      	  <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
       }</block></then></if>
    }</block></then></if></else></if>

  <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>finished</name>:</label>
  <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<comment type="block">/* svn_ra_callbacks_t */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>ra_callbacks_get_wc_prop</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> **</type><name>value</name></decl></param>,
                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>callbacks</name> <init>= <expr>(<name>PyObject</name> *)<name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>py_callback</name></decl>, *<decl><type ref="prev"/><name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>value</name> = <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>py_callback</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>callbacks</name></expr></argument>, <argument><expr>(<name>char</name> *)"get_wc_prop"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>py_callback</name> == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finished</name>;</goto>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>py_callback</name> == <name>Py_None</name></expr>)</condition><then>
    <block>{
      <goto>goto <name>finished</name>;</goto>
    }</block></then></if></else></if>

  <if>if <condition>(<expr>(<name>result</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>py_callback</name></expr></argument>,
                                      <argument><expr>(<name>char</name> *)"ssO&amp;"</expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
                                      <argument><expr><name>make_ob_pool</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>result</name> != <name>Py_None</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>char</name> *</type><name>buf</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
      <if>if <condition>(<expr><call><name>PyString_AsStringAndSize</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>&amp;<name>buf</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
        <block>{
      	  <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else
        <block>{
          <expr_stmt><expr>*<name>value</name> = <call><name>svn_string_ncreate</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then></if></else></if>

  <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>finished</name>:</label>
  <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<comment type="block">/* svn_ra_callbacks_t */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>ra_callbacks_push_or_set_wc_prop</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>callback</name></decl></param>,
                                 <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
                                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>callbacks</name> <init>= <expr>(<name>PyObject</name> *)<name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>py_callback</name></decl>, *<decl><type ref="prev"/><name>py_value</name></decl>, *<decl><type ref="prev"/><name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>py_callback</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>callbacks</name></expr></argument>, <argument><expr>(<name>char</name> *)<name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>py_callback</name> == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finished</name>;</goto>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>py_callback</name> == <name>Py_None</name></expr>)</condition><then>
    <block>{
      <goto>goto <name>finished</name>;</goto>
    }</block></then></if></else></if>

  <if>if <condition>(<expr>(<name>py_value</name> = <call><name>PyString_FromStringAndSize</name><argument_list>(<argument><expr><name><name>value</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>value</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finished</name>;</goto>
    }</block></then></if>

  <if>if <condition>(<expr>(<name>result</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>py_callback</name></expr></argument>,
                                      <argument><expr>(<name>char</name> *)"ssOO&amp;"</expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>py_value</name></expr></argument>,
                                      <argument><expr><name>make_ob_pool</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>finished</name>:</label>
  <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<comment type="block">/* svn_ra_callbacks_t */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>ra_callbacks_set_wc_prop</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>ra_callbacks_push_or_set_wc_prop</name><argument_list>(<argument><expr>"set_wc_prop"</expr></argument>, <argument><expr><name>baton</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
                                          <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* svn_ra_callbacks_t */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>ra_callbacks_push_wc_prop</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>ra_callbacks_push_or_set_wc_prop</name><argument_list>(<argument><expr>"push_wc_prop"</expr></argument>, <argument><expr><name>baton</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
                                          <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* svn_ra_callbacks_t */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>ra_callbacks_invalidate_wc_props</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>callbacks</name> <init>= <expr>(<name>PyObject</name> *)<name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>py_callback</name></decl>, *<decl><type ref="prev"/><name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>py_callback</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>callbacks</name></expr></argument>,
                                       <argument><expr>(<name>char</name> *)"invalidate_wc_props"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>py_callback</name> == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finished</name>;</goto>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>py_callback</name> == <name>Py_None</name></expr>)</condition><then>
    <block>{
      <goto>goto <name>finished</name>;</goto>
    }</block></then></if></else></if>

  <if>if <condition>(<expr>(<name>result</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>py_callback</name></expr></argument>,
                                      <argument><expr>(<name>char</name> *)"ssO&amp;"</expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
                                      <argument><expr><name>make_ob_pool</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>finished</name>:</label>
  <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<comment type="block">/* svn_ra_callbacks_t */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ra_callbacks_progress_func</name><parameter_list>(<param><decl><type><name>apr_off_t</name></type> <name>progress</name></decl></param>,
                           <param><decl><type><name>apr_off_t</name></type> <name>total</name></decl></param>,
                           <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>callbacks</name> <init>= <expr>(<name>PyObject</name> *)<name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>py_callback</name></decl>, *<decl><type ref="prev"/><name>py_progress</name></decl>, *<decl><type ref="prev"/><name>py_total</name></decl>, *<decl><type ref="prev"/><name>result</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>py_progress</name> = <name>py_total</name> = <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>py_callback</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>callbacks</name></expr></argument>,
                                       <argument><expr>(<name>char</name> *)"progress_func"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>py_callback</name> == <name>NULL</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* Ouch, no way to pass on exceptions! */</comment>
      <comment type="block">/* err = callback_exception_error(); */</comment>
      <goto>goto <name>finished</name>;</goto>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>py_callback</name> == <name>Py_None</name></expr>)</condition><then>
    <block>{
      <goto>goto <name>finished</name>;</goto>
    }</block></then></if></else></if>

  <comment type="block">/* Create PyLongs for progress and total up-front, rather than
     passing them directly, so we don't have to worry about the size
     (if apr_off_t is 4 bytes, we'd better use the l specifier; if 8
     bytes, better use L...) */</comment>
  <if>if <condition>(<expr>(<name>py_progress</name> = <call><name>PyLong_FromLongLong</name><argument_list>(<argument><expr><name>progress</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* Ouch, no way to pass on exceptions! */</comment>
      <comment type="block">/* err = callback_exception_error(); */</comment>
      <goto>goto <name>finished</name>;</goto>
    }</block></then></if>
  <if>if <condition>(<expr>(<name>py_total</name> = <call><name>PyLong_FromLongLong</name><argument_list>(<argument><expr><name>total</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* Ouch, no way to pass on exceptions! */</comment>
      <comment type="block">/* err = callback_exception_error(); */</comment>
      <goto>goto <name>finished</name>;</goto>
    }</block></then></if>
  <if>if <condition>(<expr>(<name>result</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>py_callback</name></expr></argument>,
                                      <argument><expr>(<name>char</name> *)"OOO&amp;"</expr></argument>, <argument><expr><name>py_progress</name></expr></argument>, <argument><expr><name>py_total</name></expr></argument>,
                                      <argument><expr><name>make_ob_pool</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* Ouch, no way to pass on exceptions! */</comment>
      <comment type="block">/* err = callback_exception_error(); */</comment>
    }</block></then></if>

  <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>finished</name>:</label>
  <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_progress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* Sure hope nothing went wrong... */</comment>
  <comment type="block">/* return err; */</comment>
}</block></function>

<comment type="block">/* svn_ra_callbacks_t */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>ra_callbacks_cancel_func</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>callbacks</name> <init>= <expr>(<name>PyObject</name> *)<name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>py_callback</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>py_callback</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>callbacks</name></expr></argument>,
                                       <argument><expr>(<name>char</name> *)"cancel_func"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>err</name> = <call><name>svn_swig_py_cancel_func</name><argument_list>(<argument><expr><name>py_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<comment type="block">/* svn_ra_callbacks_t */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>ra_callbacks_get_client_string</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>name</name></decl></param>,
                               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>callbacks</name> <init>= <expr>(<name>PyObject</name> *)<name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>py_callback</name></decl>, *<decl><type ref="prev"/><name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>name</name> = <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>py_callback</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>callbacks</name></expr></argument>, <argument><expr>(<name>char</name> *)"get_client_string"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>py_callback</name> == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finished</name>;</goto>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>py_callback</name> == <name>Py_None</name></expr>)</condition><then>
    <block>{
      <goto>goto <name>finished</name>;</goto>
    }</block></then></if></else></if>

  <if>if <condition>(<expr>(<name>result</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>py_callback</name></expr></argument>,
                                      <argument><expr>(<name>char</name> *)"O&amp;"</expr></argument>,
                                      <argument><expr><name>make_ob_pool</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>result</name> != <name>Py_None</name></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr>(*<name>name</name> = <call><name>PyString_AsString</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
        <block>{
      	  <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if></else></if>

  <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>finished</name>:</label>
  <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type>
<name>svn_swig_py_setup_ra_callbacks</name><parameter_list>(<param><decl><type><name>svn_ra_callbacks2_t</name> **</type><name>callbacks</name></decl></param>,
                               <param><decl><type><name>void</name> **</type><name>baton</name></decl></param>,
                               <param><decl><type><name>PyObject</name> *</type><name>py_callbacks</name></decl></param>,
                               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><call><name>svn_ra_create_callbacks</name><argument_list>(<argument><expr><name>callbacks</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>py_auth_baton</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_swig_py_svn_exception</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    }</block></then></if>

  <expr_stmt><expr><name>(*<name>callbacks</name>)-&gt;<name>open_tmp_file</name></name> = <name>ra_callbacks_open_tmp_file</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>py_auth_baton</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>py_callbacks</name></expr></argument>, <argument><expr>(<name>char</name> *)"auth_baton"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><call><name>svn_swig_ConvertPtrString</name><argument_list>(<argument><expr><name>py_auth_baton</name></expr></argument>,
                                <argument><expr>(<name>void</name> **)&amp;(<name>(*<name>callbacks</name>)-&gt;<name>auth_baton</name></name>)</expr></argument>,
                                <argument><expr>"svn_auth_baton_t *"</expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>type_conversion_error</name><argument_list>(<argument><expr>"svn_auth_baton_t *"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>svn_swig_py_svn_exception</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_auth_baton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    }</block></then></if>

  <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_auth_baton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>(*<name>callbacks</name>)-&gt;<name>get_wc_prop</name></name> = <name>ra_callbacks_get_wc_prop</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>(*<name>callbacks</name>)-&gt;<name>set_wc_prop</name></name> = <name>ra_callbacks_set_wc_prop</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>(*<name>callbacks</name>)-&gt;<name>push_wc_prop</name></name> = <name>ra_callbacks_push_wc_prop</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>(*<name>callbacks</name>)-&gt;<name>invalidate_wc_props</name></name> = <name>ra_callbacks_invalidate_wc_props</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>(*<name>callbacks</name>)-&gt;<name>progress_func</name></name> = <name>ra_callbacks_progress_func</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>(*<name>callbacks</name>)-&gt;<name>progress_baton</name></name> = <name>py_callbacks</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>(*<name>callbacks</name>)-&gt;<name>cancel_func</name></name> = <name>ra_callbacks_cancel_func</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>(*<name>callbacks</name>)-&gt;<name>get_client_string</name></name> = <name>ra_callbacks_get_client_string</name></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>baton</name> = <name>py_callbacks</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_swig_py_commit_callback2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_commit_info_t</name> *</type><name>commit_info</name></decl></param>,
                                          <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>receiver</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr>(<name>receiver</name> == <name>NULL</name>) || (<name>receiver</name> == <name>Py_None</name>)</expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>(<name>result</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>receiver</name></expr></argument>,
                                      <argument><expr>(<name>char</name> *)"O&amp;O&amp;"</expr></argument>,
                                      <argument><expr><name>make_ob_commit_info</name></expr></argument>, <argument><expr><name>commit_info</name></expr></argument>,
                                      <argument><expr><name>make_ob_pool</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <if>if <condition>(<expr><name>result</name> != <name>Py_None</name></expr>)</condition><then>
        <expr_stmt><expr><name>err</name> = <call><name>callback_bad_return_error</name><argument_list>(<argument><expr>"Not None"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
      <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_swig_py_commit_callback</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name></type> <name>new_revision</name></decl></param>,
                                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>date</name></decl></param>,
                                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>author</name></decl></param>,
                                         <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>receiver</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr>(<name>receiver</name> == <name>NULL</name>) || (<name>receiver</name> == <name>Py_None</name>)</expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>(<name>result</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>receiver</name></expr></argument>,
                                      <argument><expr>(<name>char</name> *)"lss"</expr></argument>,
                                      <argument><expr><name>new_revision</name></expr></argument>, <argument><expr><name>date</name></expr></argument>, <argument><expr><name>author</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <if>if <condition>(<expr><name>result</name> != <name>Py_None</name></expr>)</condition><then>
        <expr_stmt><expr><name>err</name> = <call><name>callback_bad_return_error</name><argument_list>(<argument><expr>"Not None"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
      <expr_stmt><expr><call><name>Py_DECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_swig_py_ra_file_rev_handler_func</name><parameter_list>(
                    <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                    <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                    <param><decl><type><name>apr_hash_t</name> *</type><name>rev_props</name></decl></param>,
                    <param><decl><type><name>svn_txdelta_window_handler_t</name> *</type><name>delta_handler</name></decl></param>,
                    <param><decl><type><name>void</name> **</type><name>delta_baton</name></decl></param>,
                    <param><decl><type><name>apr_array_header_t</name> *</type><name>prop_diffs</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>handler</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name></decl>, *<decl><type ref="prev"/><name>py_rev_props</name> <init>= <expr><name>NULL</name></expr></init>, *<name>py_prop_diffs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr>(<name>handler</name> == <name>NULL</name>) || (<name>handler</name> == <name>Py_None</name>)</expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>py_rev_props</name> = <call><name>svn_swig_py_prophash_to_dict</name><argument_list>(<argument><expr><name>rev_props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>py_rev_props</name> == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>type_conversion_error</name><argument_list>(<argument><expr>"apr_hash_t *"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>error</name>;</goto>
    }</block></then></if>

  <expr_stmt><expr><name>py_prop_diffs</name> = <call><name>svn_swig_py_proparray_to_dict</name><argument_list>(<argument><expr><name>prop_diffs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>py_prop_diffs</name> == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>type_conversion_error</name><argument_list>(<argument><expr>"apr_array_header_t *"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>error</name>;</goto>
    }</block></then></if>

  <if>if <condition>(<expr>(<name>result</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>handler</name></expr></argument>,
                                      <argument><expr>(<name>char</name> *)"slOOO&amp;"</expr></argument>,
                                      <argument><expr><name>path</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>py_rev_props</name></expr></argument>, <argument><expr><name>py_prop_diffs</name></expr></argument>,
                                      <argument><expr><name>make_ob_pool</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <if>if <condition>(<expr><name>result</name> != <name>Py_None</name></expr>)</condition><then>
        <expr_stmt><expr><name>err</name> = <call><name>callback_bad_return_error</name><argument_list>(<argument><expr>"Not None"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <comment type="block">/* FIXME: Support returned TxDeltaWindow object and
       * set delta_handler and delta_baton */</comment>
      <expr_stmt><expr>*<name>delta_handler</name> = <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr>*<name>delta_baton</name> = <name>NULL</name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

<label><name>error</name>:</label>

  <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_rev_props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_prop_diffs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_swig_py_ra_lock_callback</name><parameter_list>(
                    <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                    <param><decl><type><name>svn_boolean_t</name></type> <name>do_lock</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>svn_lock_t</name> *</type><name>lock</name></decl></param>,
                    <param><decl><type><name>svn_error_t</name> *</type><name>ra_err</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>py_callback</name> <init>= <expr><name>baton</name></expr></init>, *<name>result</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>py_callback</name> == <name>NULL</name> || <name>py_callback</name> == <name>Py_None</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>(<name>result</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>py_callback</name></expr></argument>,
                                     <argument><expr>(<name>char</name> *)"sbO&amp;O&amp;"</expr></argument>,
                                     <argument><expr><name>path</name></expr></argument>, <argument><expr><name>do_lock</name></expr></argument>,
                                     <argument><expr><name>make_ob_lock</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>,
                                     <argument><expr><name>make_ob_pool</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>result</name> != <name>Py_None</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_bad_return_error</name><argument_list>(<argument><expr>"Not None"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></else></if>

  <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>reporter_set_path</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>report_baton</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                           <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                           <param><decl><type><name>svn_boolean_t</name></type> <name>start_empty</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lock_token</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>py_reporter</name> <init>= <expr><name>report_baton</name></expr></init>, *<name>result</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>py_reporter</name> == <name>NULL</name> || <name>py_reporter</name> == <name>Py_None</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>(<name>result</name> = <call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name>py_reporter</name></expr></argument>,
                                    <argument><expr>(<name>char</name> *)"set_path"</expr></argument>,
                                    <argument><expr>(<name>char</name> *)"slbsO&amp;"</expr></argument>,
                                    <argument><expr><name>path</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>,
                                    <argument><expr><name>start_empty</name></expr></argument>, <argument><expr><name>lock_token</name></expr></argument>,
                                    <argument><expr><name>make_ob_pool</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>result</name> != <name>Py_None</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_bad_return_error</name><argument_list>(<argument><expr>"Not None"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></else></if>

  <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>reporter_delete_path</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>report_baton</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>py_reporter</name> <init>= <expr><name>report_baton</name></expr></init>, *<name>result</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>py_reporter</name> == <name>NULL</name> || <name>py_reporter</name> == <name>Py_None</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>(<name>result</name> = <call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name>py_reporter</name></expr></argument>,
                                    <argument><expr>(<name>char</name> *)"delete_path"</expr></argument>,
                                    <argument><expr>(<name>char</name> *)"sO&amp;"</expr></argument>,
                                    <argument><expr><name>path</name></expr></argument>,
                                    <argument><expr><name>make_ob_pool</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>result</name> != <name>Py_None</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_bad_return_error</name><argument_list>(<argument><expr>"Not None"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></else></if>

  <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>reporter_link_path</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>report_baton</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
                            <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                            <param><decl><type><name>svn_boolean_t</name></type> <name>start_empty</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lock_token</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>py_reporter</name> <init>= <expr><name>report_baton</name></expr></init>, *<name>result</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>py_reporter</name> == <name>NULL</name> || <name>py_reporter</name> == <name>Py_None</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>(<name>result</name> = <call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name>py_reporter</name></expr></argument>,
                                    <argument><expr>(<name>char</name> *)"link_path"</expr></argument>,
                                    <argument><expr>(<name>char</name> *)"sslbsO&amp;"</expr></argument>,
                                    <argument><expr><name>path</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>,
                                    <argument><expr><name>start_empty</name></expr></argument>, <argument><expr><name>lock_token</name></expr></argument>,
                                    <argument><expr><name>make_ob_pool</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>result</name> != <name>Py_None</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_bad_return_error</name><argument_list>(<argument><expr>"Not None"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></else></if>

  <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>reporter_finish_report</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>report_baton</name></decl></param>,
                                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>PyObject</name> *</type><name>py_reporter</name> <init>= <expr><name>report_baton</name></expr></init>, *<name>result</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>py_reporter</name> == <name>NULL</name> || <name>py_reporter</name> == <name>Py_None</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>(<name>result</name> = <call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name>py_reporter</name></expr></argument>,
                                    <argument><expr>(<name>char</name> *)"finish_report"</expr></argument>,
                                    <argument><expr>(<name>char</name> *)"O&amp;"</expr></argument>,
                                    <argument><expr><name>make_ob_pool</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>result</name> != <name>Py_None</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_bad_return_error</name><argument_list>(<argument><expr>"Not None"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></else></if>

  <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>reporter_abort_report</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>report_baton</name></decl></param>,
                               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>PyObject</name> *</type><name>py_reporter</name> <init>= <expr><name>report_baton</name></expr></init>, *<name>result</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>py_reporter</name> == <name>NULL</name> || <name>py_reporter</name> == <name>Py_None</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>(<name>result</name> = <call><name>PyObject_CallMethod</name><argument_list>(<argument><expr><name>py_reporter</name></expr></argument>,
                                    <argument><expr>(<name>char</name> *)"abort_report"</expr></argument>,
                                    <argument><expr>(<name>char</name> *)"O&amp;"</expr></argument>,
                                    <argument><expr><name>make_ob_pool</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>result</name> != <name>Py_None</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_bad_return_error</name><argument_list>(<argument><expr>"Not None"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></else></if>

  <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>svn_ra_reporter2_t</name></type> <name>swig_py_ra_reporter2</name> <init>= <expr><block>{
    <expr><name>reporter_set_path</name></expr>,
    <expr><name>reporter_delete_path</name></expr>,
    <expr><name>reporter_link_path</name></expr>,
    <expr><name>reporter_finish_report</name></expr>,
    <expr><name>reporter_abort_report</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* svn_wc_diff_callbacks2_t */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>wc_diff_callbacks2_file_changed_or_added</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>callback</name></decl></param>,
                                         <param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                                         <param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>contentstate</name></decl></param>,
                                         <param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>propstate</name></decl></param>,
                                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmpfile1</name></decl></param>,
                                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmpfile2</name></decl></param>,
                                         <param><decl><type><name>svn_revnum_t</name></type> <name>rev1</name></decl></param>,
                                         <param><decl><type><name>svn_revnum_t</name></type> <name>rev2</name></decl></param>,
                                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype1</name></decl></param>,
                                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype2</name></decl></param>,
                                         <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>propchanges</name></decl></param>,
                                         <param><decl><type><name>apr_hash_t</name> *</type><name>originalprops</name></decl></param>,
                                         <param><decl><type><name>void</name> *</type><name>diff_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>callbacks</name> <init>= <expr>(<name>PyObject</name> *)<name>diff_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>py_callback</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>py_contentstate</name></decl>, <decl><type ref="prev"/><name>py_propstate</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>py_callback</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>callbacks</name></expr></argument>, <argument><expr>(<name>char</name> *)<name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>py_callback</name> == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finished</name>;</goto>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>py_callback</name> == <name>Py_None</name></expr>)</condition><then>
    <block>{
      <goto>goto <name>finished</name>;</goto>
    }</block></then></if></else></if>

  <expr_stmt><expr><name>result</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>py_callback</name></expr></argument>,
                                 <argument><expr>(<name>char</name> *)"O&amp;sssllssO&amp;O&amp;"</expr></argument>,
                                 <argument><expr><name>make_ob_wc_adm_access</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
                                 <argument><expr><name>path</name></expr></argument>,
                                 <argument><expr><name>tmpfile1</name></expr></argument>, <argument><expr><name>tmpfile2</name></expr></argument>,
                                 <argument><expr><name>rev1</name></expr></argument>, <argument><expr><name>rev2</name></expr></argument>,
                                 <argument><expr><name>mimetype1</name></expr></argument>, <argument><expr><name>mimetype2</name></expr></argument>,
                                 <argument><expr><name>svn_swig_py_proparray_to_dict</name></expr></argument>, <argument><expr><name>propchanges</name></expr></argument>,
                                 <argument><expr><name>svn_swig_py_prophash_to_dict</name></expr></argument>, <argument><expr><name>originalprops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>result</name> == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finished</name>;</goto>
    }</block></then></if>
  <if>if <condition>(<expr>!<call><name>PyArg_ParseTuple</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>(<name>char</name> *)"ii"</expr></argument>, <argument><expr>&amp;<name>py_contentstate</name></expr></argument>, <argument><expr>&amp;<name>py_propstate</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finished</name>;</goto>
    }</block></then></if>
  <if>if <condition>(<expr><name>contentstate</name> != <name>NULL</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>contentstate</name> = <name>py_contentstate</name></expr>;</expr_stmt></then></if>
  <if>if <condition>(<expr><name>propstate</name> != <name>NULL</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>propstate</name> = <name>py_propstate</name></expr>;</expr_stmt></then></if>

<label><name>finished</name>:</label>
  <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<comment type="block">/* svn_wc_diff_callbacks2_t */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>wc_diff_callbacks2_file_changed</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                                <param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>contentstate</name></decl></param>,
                                <param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>propstate</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmpfile1</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmpfile2</name></decl></param>,
                                <param><decl><type><name>svn_revnum_t</name></type> <name>rev1</name></decl></param>,
                                <param><decl><type><name>svn_revnum_t</name></type> <name>rev2</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype1</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype2</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>propchanges</name></decl></param>,
                                <param><decl><type><name>apr_hash_t</name> *</type><name>originalprops</name></decl></param>,
                                <param><decl><type><name>void</name> *</type><name>diff_baton</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>wc_diff_callbacks2_file_changed_or_added</name><argument_list>(<argument><expr>"file_changed"</expr></argument>,
                                                  <argument><expr><name>adm_access</name></expr></argument>,
                                                  <argument><expr><name>contentstate</name></expr></argument>,
                                                  <argument><expr><name>propstate</name></expr></argument>,
                                                  <argument><expr><name>path</name></expr></argument>,
                                                  <argument><expr><name>tmpfile1</name></expr></argument>,
                                                  <argument><expr><name>tmpfile2</name></expr></argument>,
                                                  <argument><expr><name>rev1</name></expr></argument>, <argument><expr><name>rev2</name></expr></argument>,
                                                  <argument><expr><name>mimetype1</name></expr></argument>,
                                                  <argument><expr><name>mimetype2</name></expr></argument>,
                                                  <argument><expr><name>propchanges</name></expr></argument>,
                                                  <argument><expr><name>originalprops</name></expr></argument>,
                                                  <argument><expr><name>diff_baton</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* svn_wc_diff_callbacks2_t */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>wc_diff_callbacks2_file_added</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                              <param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>contentstate</name></decl></param>,
                              <param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>propstate</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmpfile1</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmpfile2</name></decl></param>,
                              <param><decl><type><name>svn_revnum_t</name></type> <name>rev1</name></decl></param>,
                              <param><decl><type><name>svn_revnum_t</name></type> <name>rev2</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype1</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype2</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>propchanges</name></decl></param>,
                              <param><decl><type><name>apr_hash_t</name> *</type><name>originalprops</name></decl></param>,
                              <param><decl><type><name>void</name> *</type><name>diff_baton</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>wc_diff_callbacks2_file_changed_or_added</name><argument_list>(<argument><expr>"file_added"</expr></argument>,
                                                  <argument><expr><name>adm_access</name></expr></argument>,
                                                  <argument><expr><name>contentstate</name></expr></argument>,
                                                  <argument><expr><name>propstate</name></expr></argument>,
                                                  <argument><expr><name>path</name></expr></argument>,
                                                  <argument><expr><name>tmpfile1</name></expr></argument>,
                                                  <argument><expr><name>tmpfile2</name></expr></argument>,
                                                  <argument><expr><name>rev1</name></expr></argument>, <argument><expr><name>rev2</name></expr></argument>,
                                                  <argument><expr><name>mimetype1</name></expr></argument>,
                                                  <argument><expr><name>mimetype2</name></expr></argument>,
                                                  <argument><expr><name>propchanges</name></expr></argument>,
                                                  <argument><expr><name>originalprops</name></expr></argument>,
                                                  <argument><expr><name>diff_baton</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* svn_wc_diff_callbacks2_t */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>wc_diff_callbacks2_file_deleted</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                                <param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>state</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmpfile1</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmpfile2</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype1</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype2</name></decl></param>,
                                <param><decl><type><name>apr_hash_t</name> *</type><name>originalprops</name></decl></param>,
                                <param><decl><type><name>void</name> *</type><name>diff_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>callbacks</name> <init>= <expr>(<name>PyObject</name> *)<name>diff_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>py_callback</name></decl>, *<decl><type ref="prev"/><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type> <name>py_state</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>py_callback</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>callbacks</name></expr></argument>, <argument><expr>(<name>char</name> *)"file_deleted"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>py_callback</name> == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finished</name>;</goto>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>py_callback</name> == <name>Py_None</name></expr>)</condition><then>
    <block>{
      <goto>goto <name>finished</name>;</goto>
    }</block></then></if></else></if>

  <expr_stmt><expr><name>result</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>py_callback</name></expr></argument>,
                                 <argument><expr>(<name>char</name> *)"O&amp;sssssO&amp;"</expr></argument>,
                                 <argument><expr><name>make_ob_wc_adm_access</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
                                 <argument><expr><name>path</name></expr></argument>,
                                 <argument><expr><name>tmpfile1</name></expr></argument>, <argument><expr><name>tmpfile2</name></expr></argument>,
                                 <argument><expr><name>mimetype1</name></expr></argument>, <argument><expr><name>mimetype2</name></expr></argument>,
                                 <argument><expr><name>svn_swig_py_prophash_to_dict</name></expr></argument>, <argument><expr><name>originalprops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>result</name> == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finished</name>;</goto>
    }</block></then></if>
  <expr_stmt><expr><name>py_state</name> = <call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>py_state</name> == -1 &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finished</name>;</goto>
    }</block></then></if>
  <if>if <condition>(<expr><name>state</name> != <name>NULL</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>state</name> = <name>py_state</name></expr>;</expr_stmt></then></if>

<label><name>finished</name>:</label>
  <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<comment type="block">/* svn_wc_diff_callbacks2_t */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>wc_diff_callbacks2_dir_added</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                             <param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>state</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                             <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                             <param><decl><type><name>void</name> *</type><name>diff_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>callbacks</name> <init>= <expr>(<name>PyObject</name> *)<name>diff_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>py_callback</name></decl>, *<decl><type ref="prev"/><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type> <name>py_state</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>py_callback</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>callbacks</name></expr></argument>, <argument><expr>(<name>char</name> *)"dir_added"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>py_callback</name> == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finished</name>;</goto>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>py_callback</name> == <name>Py_None</name></expr>)</condition><then>
    <block>{
      <goto>goto <name>finished</name>;</goto>
    }</block></then></if></else></if>

  <expr_stmt><expr><name>result</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>py_callback</name></expr></argument>,
                                 <argument><expr>(<name>char</name> *)"O&amp;sl"</expr></argument>,
                                 <argument><expr><name>make_ob_wc_adm_access</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
                                 <argument><expr><name>path</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>result</name> == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finished</name>;</goto>
    }</block></then></if>
  <expr_stmt><expr><name>py_state</name> = <call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>py_state</name> == -1 &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finished</name>;</goto>
    }</block></then></if>
  <if>if <condition>(<expr><name>state</name> != <name>NULL</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>state</name> = <name>py_state</name></expr>;</expr_stmt></then></if>

<label><name>finished</name>:</label>
  <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<comment type="block">/* svn_wc_diff_callbacks2_t */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>wc_diff_callbacks2_dir_deleted</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                               <param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>state</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                               <param><decl><type><name>void</name> *</type><name>diff_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>callbacks</name> <init>= <expr>(<name>PyObject</name> *)<name>diff_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>py_callback</name></decl>, *<decl><type ref="prev"/><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type> <name>py_state</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>py_callback</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>callbacks</name></expr></argument>, <argument><expr>(<name>char</name> *)"dir_deleted"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>py_callback</name> == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finished</name>;</goto>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>py_callback</name> == <name>Py_None</name></expr>)</condition><then>
    <block>{
      <goto>goto <name>finished</name>;</goto>
    }</block></then></if></else></if>

  <expr_stmt><expr><name>result</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>py_callback</name></expr></argument>,
                                 <argument><expr>(<name>char</name> *)"O&amp;s"</expr></argument>,
                                 <argument><expr><name>make_ob_wc_adm_access</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>result</name> == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finished</name>;</goto>
    }</block></then></if>
  <expr_stmt><expr><name>py_state</name> = <call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>py_state</name> == -1 &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finished</name>;</goto>
    }</block></then></if>
  <if>if <condition>(<expr><name>state</name> != <name>NULL</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>state</name> = <name>py_state</name></expr>;</expr_stmt></then></if>

<label><name>finished</name>:</label>
  <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<comment type="block">/* svn_wc_diff_callbacks2_t */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>wc_diff_callbacks2_dir_props_changed</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
                                     <param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>state</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>propchanges</name></decl></param>,
                                     <param><decl><type><name>apr_hash_t</name> *</type><name>originalprops</name></decl></param>,
                                     <param><decl><type><name>void</name> *</type><name>diff_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>callbacks</name> <init>= <expr>(<name>PyObject</name> *)<name>diff_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>py_callback</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PyObject</name> *</type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name></type> <name>py_state</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>svn_swig_py_acquire_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>py_callback</name> = <call><name>PyObject_GetAttrString</name><argument_list>(<argument><expr><name>callbacks</name></expr></argument>, <argument><expr>(<name>char</name> *)"dir_props_changed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>py_callback</name> == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finished</name>;</goto>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>py_callback</name> == <name>Py_None</name></expr>)</condition><then>
    <block>{
      <goto>goto <name>finished</name>;</goto>
    }</block></then></if></else></if>

  <expr_stmt><expr><name>result</name> = <call><name>PyObject_CallFunction</name><argument_list>(<argument><expr><name>py_callback</name></expr></argument>,
                                 <argument><expr>(<name>char</name> *)"O&amp;sO&amp;O&amp;"</expr></argument>,
                                 <argument><expr><name>make_ob_wc_adm_access</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
                                 <argument><expr><name>path</name></expr></argument>,
                                 <argument><expr><name>svn_swig_py_proparray_to_dict</name></expr></argument>, <argument><expr><name>propchanges</name></expr></argument>,
                                 <argument><expr><name>svn_swig_py_prophash_to_dict</name></expr></argument>, <argument><expr><name>originalprops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>result</name> == <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finished</name>;</goto>
    }</block></then></if>
  <expr_stmt><expr><name>py_state</name> = <call><name>PyInt_AsLong</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>py_state</name> == -1 &amp;&amp; <call><name>PyErr_Occurred</name><argument_list>()</argument_list></call></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>err</name> = <call><name>callback_exception_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>finished</name>;</goto>
    }</block></then></if>
  <if>if <condition>(<expr><name>state</name> != <name>NULL</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>state</name> = <name>py_state</name></expr>;</expr_stmt></then></if>

<label><name>finished</name>:</label>
  <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Py_XDECREF</name><argument_list>(<argument><expr><name>py_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_swig_py_release_py_lock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<function><type><name>svn_wc_diff_callbacks2_t</name> *</type>
<name>svn_swig_py_setup_wc_diff_callbacks2</name><parameter_list>(<param><decl><type><name>void</name> **</type><name>baton</name></decl></param>,
                                     <param><decl><type><name>PyObject</name> *</type><name>py_callbacks</name></decl></param>,
                                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_wc_diff_callbacks2_t</name> *</type><name>callbacks</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>callbacks</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr>*<name>baton</name> = <name>py_callbacks</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>callbacks</name>-&gt;<name>file_changed</name></name>       = <name>wc_diff_callbacks2_file_changed</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>callbacks</name>-&gt;<name>file_added</name></name>         = <name>wc_diff_callbacks2_file_added</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>callbacks</name>-&gt;<name>file_deleted</name></name>       = <name>wc_diff_callbacks2_file_deleted</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>callbacks</name>-&gt;<name>dir_added</name></name>          = <name>wc_diff_callbacks2_dir_added</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>callbacks</name>-&gt;<name>dir_deleted</name></name>        = <name>wc_diff_callbacks2_dir_deleted</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>callbacks</name>-&gt;<name>dir_props_changed</name></name>  = <name>wc_diff_callbacks2_dir_props_changed</name></expr>;</expr_stmt>
  <return>return <expr><name>callbacks</name></expr>;</return>
}</block></function>
</unit>
