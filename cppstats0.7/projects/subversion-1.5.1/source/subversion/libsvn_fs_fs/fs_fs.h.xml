<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_fs_fs/fs_fs.h"><comment type="block">/* fs_fs.h : interface to the native filesystem layer
 *
 * ====================================================================
 * Copyright (c) 2000-2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVN_LIBSVN_FS__FS_FS_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_LIBSVN_FS__FS_FS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs.h"</cpp:file></cpp:include>

<comment type="block">/* Open the fsfs filesystem pointed to by PATH and associate it with
   filesystem object FS.  Use POOL for temporary allocations. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__open</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Upgrade the fsfs filesystem FS.  Use POOL for temporary allocations. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__upgrade</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Copy the fsfs filesystem at SRC_PATH into a new copy at DST_PATH.
   Use POOL for temporary allocations. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__hotcopy</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_path</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_path</name></decl></param>,
                                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Recover the fsfs associated with filesystem FS.
   Use optional CANCEL_FUNC/CANCEL_BATON for cancellation support.
   Use POOL for temporary allocations. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__recover</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
                                <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
                                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Set *NODEREV_P to the node-revision for the node ID in FS.  Do any
   allocations in POOL. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__get_node_revision</name><parameter_list>(<param><decl><type><name>node_revision_t</name> **</type><name>noderev_p</name></decl></param>,
                                          <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                          <param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>id</name></decl></param>,
                                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Store NODEREV as the node-revision for the node whose id is ID in
   FS, after setting its is_fresh_txn_root to FRESH_TXN_ROOT.  Do any
   necessary temporary allocation in POOL. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__put_node_revision</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                          <param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>id</name></decl></param>,
                                          <param><decl><type><name>node_revision_t</name> *</type><name>noderev</name></decl></param>,
                                          <param><decl><type><name>svn_boolean_t</name></type> <name>fresh_txn_root</name></decl></param>,
                                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Set *YOUNGEST to the youngest revision in filesystem FS.  Do any
   temporary allocation in POOL. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__youngest_rev</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name> *</type><name>youngest</name></decl></param>,
                                     <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Set *ROOT_ID to the node-id for the root of revision REV in
   filesystem FS.  Do any allocations in POOL. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__rev_get_root</name><parameter_list>(<param><decl><type><name>svn_fs_id_t</name> **</type><name>root_id</name></decl></param>,
                                     <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                     <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Set *ENTRIES to an apr_hash_t of dirent structs that contain the
   directory entries of node-revision NODEREV in filesystem FS.  The
   returned table (and its keys and values) is allocated in POOL,
   which is also used for temporary allocations. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__rep_contents_dir</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>entries</name></decl></param>,
                                         <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                         <param><decl><type><name>node_revision_t</name> *</type><name>noderev</name></decl></param>,
                                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Set *CONTENTS to be a readable svn_stream_t that receives the text
   representation of node-revision NODEREV as seen in filesystem FS.
   Use POOL for temporary allocations. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__get_contents</name><parameter_list>(<param><decl><type><name>svn_stream_t</name> **</type><name>contents</name></decl></param>,
                                     <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                     <param><decl><type><name>node_revision_t</name> *</type><name>noderev</name></decl></param>,
                                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Set *STREAM_P to a delta stream turning the contents of the file SOURCE into
   the contents of the file TARGET, allocated in POOL.
   If SOURCE is null, the empty string will be used. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__get_file_delta_stream</name><parameter_list>(<param><decl><type><name>svn_txdelta_stream_t</name> **</type><name>stream_p</name></decl></param>,
                                              <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                              <param><decl><type><name>node_revision_t</name> *</type><name>source</name></decl></param>,
                                              <param><decl><type><name>node_revision_t</name> *</type><name>target</name></decl></param>,
                                              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Set *PROPLIST to be an apr_hash_t containing the property list of
   node-revision NODEREV as seen in filesystem FS.  Use POOL for
   temporary allocations. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__get_proplist</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>proplist</name></decl></param>,
                                     <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                     <param><decl><type><name>node_revision_t</name> *</type><name>noderev</name></decl></param>,
                                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Set the revision property list of revision REV in filesystem FS to
   PROPLIST.  Use POOL for temporary allocations. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__set_revision_proplist</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                              <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                                              <param><decl><type><name>apr_hash_t</name> *</type><name>proplist</name></decl></param>,
                                              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Set *PROPLIST to be an apr_hash_t containing the property list of
   revision REV as seen in filesystem FS.  Use POOL for temporary
   allocations. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__revision_proplist</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>proplist</name></decl></param>,
                                          <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                          <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Set *LENGTH to the be fulltext length of the node revision
   specified by NODEREV.  Use POOL for temporary allocations. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__file_length</name><parameter_list>(<param><decl><type><name>svn_filesize_t</name> *</type><name>length</name></decl></param>,
                                    <param><decl><type><name>node_revision_t</name> *</type><name>noderev</name></decl></param>,
                                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Return TRUE if the representation keys in A and B both point to the
   same representation, else return FALSE. */</comment>
<function_decl><type><name>svn_boolean_t</name></type> <name>svn_fs_fs__noderev_same_rep_key</name><parameter_list>(<param><decl><type><name>representation_t</name> *</type><name>a</name></decl></param>,
                                              <param><decl><type><name>representation_t</name> *</type><name>b</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Return a copy of the representation REP allocated from POOL. */</comment>
<function_decl><type><name>representation_t</name> *</type><name>svn_fs_fs__rep_copy</name><parameter_list>(<param><decl><type><name>representation_t</name> *</type><name>rep</name></decl></param>,
                                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Return the record MD5 checksum of the text representation of NODREV
   into DIGEST, allocating from POOL.  If no stored checksum is
   available, put all 0's into DIGEST. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__file_checksum</name><parameter_list>(<param><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[]</index></name></decl></param>,
                                      <param><decl><type><name>node_revision_t</name> *</type><name>noderev</name></decl></param>,
                                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Find the paths which were changed in revision REV of filesystem FS
   and store them in *CHANGED_PATHS_P.  Cached copyfrom information
   will be stored in *COPYFROM_CACHE.  Get any temporary allocations
   from POOL. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__paths_changed</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>changed_paths_p</name></decl></param>,
                                      <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                      <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                                      <param><decl><type><name>apr_hash_t</name> *</type><name>copyfrom_cache</name></decl></param>,
                                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Create a new transaction in filesystem FS, based on revision REV,
   and store it in *TXN_P.  Allocate all necessary variables from
   POOL. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__create_txn</name><parameter_list>(<param><decl><type><name>svn_fs_txn_t</name> **</type><name>txn_p</name></decl></param>,
                                   <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                   <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Set the transaction property NAME to the value VALUE in transaction
   TXN.  Perform temporary allocations from POOL. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__change_txn_prop</name><parameter_list>(<param><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl></param>,
                                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                                        <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
                                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Change transaction properties in transaction TXN based on PROPS.
   Perform temporary allocations from POOL. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__change_txn_props</name><parameter_list>(<param><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl></param>,
                                         <param><decl><type><name>apr_array_header_t</name> *</type><name>props</name></decl></param>,
                                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Return whether or not the given FS supports mergeinfo metadata. */</comment>
<function_decl><type><name>svn_boolean_t</name></type> <name>svn_fs_fs__fs_supports_mergeinfo</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Store a transaction record in *TXN_P for the transaction identified
   by TXN_ID in filesystem FS.  Allocate everything from POOL. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__get_txn</name><parameter_list>(<param><decl><type><name>transaction_t</name> **</type><name>txn_p</name></decl></param>,
                                <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_id</name></decl></param>,
                                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Abort the existing transaction TXN, performing any temporary
   allocations in POOL. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__abort_txn</name><parameter_list>(<param><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Create an entirely new mutable node in the filesystem FS, whose
   node-revision is NODEREV.  Set *ID_P to the new node revision's ID.
   Use POOL for any temporary allocation.  COPY_ID is the copy_id to
   use in the node revision ID.  TXN_ID is the Subversion transaction
   under which this occurs. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__create_node</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> **</type><name>id_p</name></decl></param>,
                                    <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                    <param><decl><type><name>node_revision_t</name> *</type><name>noderev</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copy_id</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_id</name></decl></param>,
                                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Remove all references to the transaction TXN_ID from filesystem FS.
   Temporary allocations are from POOL. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__purge_txn</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_id</name></decl></param>,
                                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Add or set in filesystem FS, transaction TXN_ID, in directory
   PARENT_NODEREV a directory entry for NAME pointing to ID of type
   KIND.  Allocations are done in POOL. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__set_entry</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_id</name></decl></param>,
                                  <param><decl><type><name>node_revision_t</name> *</type><name>parent_noderev</name></decl></param>,
                                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                                  <param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>id</name></decl></param>,
                                  <param><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl></param>,
                                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Add a change to the changes record for filesystem FS in transaction
   TXN_ID.  Mark path PATH, having node-id ID, as changed according to
   the type in CHANGE_KIND.  If the text representation was changed
   set TEXT_MOD to TRUE, and likewise for PROP_MOD.  If this change
   was the result of a copy, set COPYFROM_REV and COPYFROM_PATH to the
   revision and path of the copy source, otherwise they should be set
   to SVN_INVALID_REVNUM and NULL.  Perform any temporary allocations
   from POOL. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__add_change</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_id</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>id</name></decl></param>,
                                   <param><decl><type><name>svn_fs_path_change_kind_t</name></type> <name>change_kind</name></decl></param>,
                                   <param><decl><type><name>svn_boolean_t</name></type> <name>text_mod</name></decl></param>,
                                   <param><decl><type><name>svn_boolean_t</name></type> <name>prop_mod</name></decl></param>,
                                   <param><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_rev</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl></param>,
                                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Return a writable stream in *STREAM that allows storing the text
   representation of node-revision NODEREV in filesystem FS.
   Allocations are from POOL. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__set_contents</name><parameter_list>(<param><decl><type><name>svn_stream_t</name> **</type><name>stream</name></decl></param>,
                                     <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                     <param><decl><type><name>node_revision_t</name> *</type><name>noderev</name></decl></param>,
                                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Create a node revision in FS which is an immediate successor of
   OLD_ID, whose contents are NEW_NR.  Set *NEW_ID_P to the new node
   revision's ID.  Use POOL for any temporary allocation.

   COPY_ID, if non-NULL, is a key into the `copies' table, and
   indicates that this new node is being created as the result of a
   copy operation, and specifically which operation that was.  If
   COPY_ID is NULL, then re-use the copy ID from the predecessor node.

   TXN_ID is the Subversion transaction under which this occurs.

   After this call, the deltification code assumes that the new node's
   contents will change frequently, and will avoid representing other
   nodes as deltas against this node's contents.  */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__create_successor</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> **</type><name>new_id_p</name></decl></param>,
                                         <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                         <param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>old_idp</name></decl></param>,
                                         <param><decl><type><name>node_revision_t</name> *</type><name>new_noderev</name></decl></param>,
                                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copy_id</name></decl></param>,
                                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_id</name></decl></param>,
                                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Write a new property list PROPLIST for node-revision NODEREV in
   filesystem FS.  Perform any temporary allocations in POOL. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__set_proplist</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                     <param><decl><type><name>node_revision_t</name> *</type><name>noderev</name></decl></param>,
                                     <param><decl><type><name>apr_hash_t</name> *</type><name>proplist</name></decl></param>,
                                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Commit the transaction TXN in filesystem FS and return its new
   revision number in *REV.  If the transaction is out of date, return
   the error SVN_ERR_FS_TXN_OUT_OF_DATE.  Use POOL for temporary
   allocations. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__commit</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name> *</type><name>new_rev_p</name></decl></param>,
                               <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                               <param><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl></param>,
                               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Return the next available copy_id in *COPY_ID for the transaction
   TXN_ID in filesystem FS.  Allocate space in POOL. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__reserve_copy_id</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>copy_id</name></decl></param>,
                                        <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_id</name></decl></param>,
                                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Create a fs_fs fileysystem referenced by FS at path PATH.  Get any
   temporary allocations from POOL. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__create</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Store the uuid of the repository FS in *UUID.  Allocate space in
   POOL. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__get_uuid</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>uuid</name></decl></param>,
                                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Set the uuid of repository FS to UUID, if UUID is not NULL;
   otherwise, set the uuid of FS to a newly generated UUID.  Perform
   temporary allocations in POOL. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__set_uuid</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>uuid</name></decl></param>,
                                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Set *NAMES_P to an array of names which are all the active
   transactions in filesystem FS.  Allocate the array from POOL. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__list_transactions</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>names_p</name></decl></param>,
                                          <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Open the transaction named NAME in filesystem FS.  Set *TXN_P to
 * the transaction. If there is no such transaction, return
` * SVN_ERR_FS_NO_SUCH_TRANSACTION.  Allocate the new transaction in
 * POOL. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__open_txn</name><parameter_list>(<param><decl><type><name>svn_fs_txn_t</name> **</type><name>txn_p</name></decl></param>,
                                 <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Return the property list from transaction TXN and store it in
   *PROPLIST.  Allocate the property list from POOL. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__txn_proplist</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>proplist</name></decl></param>,
                                     <param><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl></param>,
                                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Delete the mutable node-revision referenced by ID, along with any
   mutable props or directory contents associated with it.  Perform
   temporary allocations in POOL. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__delete_node_revision</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                             <param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>id</name></decl></param>,
                                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Find the paths which were changed in transaction TXN_ID of
   filesystem FS and store them in *CHANGED_PATHS_P.  Cached copyfrom
   information will be stored in COPYFROM_CACHE if it is non-NULL.
   Get any temporary allocations from POOL. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__txn_changes_fetch</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>changes</name></decl></param>,
                                          <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_id</name></decl></param>,
                                          <param><decl><type><name>apr_hash_t</name> *</type><name>copyfrom_cache</name></decl></param>,
                                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Move a file into place from OLD_FILENAME in the transactions
   directory to its final location NEW_FILENAME in the repository.  On
   Unix, match the permissions of the new file to the permissions of
   PERMS_REFERENCE.  Temporary allocations are from POOL. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__move_into_place</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>old_filename</name></decl></param>,
                                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>new_filename</name></decl></param>,
                                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>perms_reference</name></decl></param>,
                                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Match the perms on FILENAME to the PERMS_REFERENCE file if we're
   not on a win32 system.  On win32, this is a no-op. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__dup_perms</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename</name></decl></param>,
                                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>perms_reference</name></decl></param>,
                                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Return the path to the file containing revision REV in FS.
   Allocate the new char * from POOL. */</comment>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>svn_fs_fs__path_rev</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Return the path to the 'current' file in FS.
   Perform allocation in POOL. */</comment>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_fs_fs__path_current</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Obtain a write lock on the filesystem FS in a subpool of POOL, call
   BODY with BATON and that subpool, destroy the subpool (releasing the write
   lock) and return what BODY returned. */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_fs_fs__with_write_lock</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                           <param><function_decl><type><name>svn_error_t</name> *</type>(*<name>body</name>)<parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                                                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list></function_decl></param>,
                           <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Find the value of the property named PROPNAME in transaction TXN.
   Return the contents in *VALUE_P.  The contents will be allocated
   from POOL. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__revision_prop</name><parameter_list>(<param><decl><type><name>svn_string_t</name> **</type><name>value_p</name></decl></param>, <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                      <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>propname</name></decl></param>,
                                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Change, add, or delete a property on a revision REV in filesystem
   FS.  NAME gives the name of the property, and value, if non-NULL,
   gives the new contents of the property.  If value is NULL, then the
   property will be deleted.  Do any temporary allocation in POOL.  */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__change_rev_prop</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>, <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                                        <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
                                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Retrieve information about the Subversion transaction SVN_TXN from
   the `transactions' table of FS, allocating from POOL.  Set
   *ROOT_ID_P to the ID of the transaction's root directory.  Set
   *BASE_ROOT_ID_P to the ID of the root directory of the
   transaction's base revision.

   If there is no such transaction, SVN_ERR_FS_NO_SUCH_TRANSACTION is
   the error returned.

   Returns SVN_ERR_FS_TRANSACTION_NOT_MUTABLE if TXN_NAME refers to a
   transaction that has already been committed.

   Allocate *ROOT_ID_P and *BASE_ROOT_ID_P in POOL.  */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__get_txn_ids</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> **</type><name>root_id_p</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> **</type><name>base_root_id_p</name></decl></param>,
                                    <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_name</name></decl></param>,
                                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Begin a new transaction in filesystem FS, based on existing
   revision REV.  The new transaction is returned in *TXN_P.  Allocate
   the new transaction structure from POOL. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__begin_txn</name><parameter_list>(<param><decl><type><name>svn_fs_txn_t</name> **</type><name>txn_p</name></decl></param>, <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                  <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>, <param><decl><type><name>apr_uint32_t</name></type> <name>flags</name></decl></param>,
                                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Find the value of the property named PROPNAME in transaction TXN.
   Return the contents in *VALUE_P.  The contents will be allocated
   from POOL. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__txn_prop</name><parameter_list>(<param><decl><type><name>svn_string_t</name> **</type><name>value_p</name></decl></param>, <param><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>propname</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* If directory PATH does not exist, create it and give it the same
   permissions as FS-&gt;path.*/</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__ensure_dir_exists</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                          <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Update the node origin index for FS, recording the mapping from
   NODE_ID to NODE_REV_ID.  Use POOL for any temporary allocations.

   Because this is just an "optional" cache, this function does not
   return an error if the underlying storage is readonly; it still
   returns an error for other error conditions.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_fs_fs__set_node_origin</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>node_id</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>node_rev_id</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Set *ORIGIN_ID to the node revision ID from which the history of
   all nodes in FS whose "Node ID" is NODE_ID springs, as determined
   by a look in the index.  ORIGIN_ID needs to be parsed in an
   FS-backend-specific way.  Use POOL for allocations.

   If there is no entry for NODE_ID in the cache, return NULL
   in *ORIGIN_ID. */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_fs_fs__get_node_origin</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> **</type><name>origin_id</name></decl></param>,
                           <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>node_id</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
