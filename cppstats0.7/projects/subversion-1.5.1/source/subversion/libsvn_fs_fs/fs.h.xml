<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_fs_fs/fs.h"><comment type="block">/* fs.h : interface to Subversion filesystem, private to libsvn_fs
 *
 * ====================================================================
 * Copyright (c) 2000-2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVN_LIBSVN_FS_FS_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_LIBSVN_FS_FS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_hash.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_md5.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_thread_mutex.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_network_io.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_fs_private.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<escape char="0xc"/>
<comment type="block">/*** The filesystem structure.  ***/</comment>

<comment type="block">/* Following are defines that specify the textual elements of the
   native filesystem directories and revision files. */</comment>

<comment type="block">/* Names of special files in the fs_fs filesystem. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_FORMAT</name></cpp:macro>           <cpp:value>"format"</cpp:value></cpp:define>           <comment type="block">/* Contains format number */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_UUID</name></cpp:macro>             <cpp:value>"uuid"</cpp:value></cpp:define>             <comment type="block">/* Contains UUID */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_CURRENT</name></cpp:macro>          <cpp:value>"current"</cpp:value></cpp:define>          <comment type="block">/* Youngest revision */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_LOCK_FILE</name></cpp:macro>        <cpp:value>"write-lock"</cpp:value></cpp:define>       <comment type="block">/* Revision lock file */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_REVS_DIR</name></cpp:macro>         <cpp:value>"revs"</cpp:value></cpp:define>             <comment type="block">/* Directory of revisions */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_REVPROPS_DIR</name></cpp:macro>     <cpp:value>"revprops"</cpp:value></cpp:define>         <comment type="block">/* Directory of revprops */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_TXNS_DIR</name></cpp:macro>         <cpp:value>"transactions"</cpp:value></cpp:define>     <comment type="block">/* Directory of transactions */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_NODE_ORIGINS_DIR</name></cpp:macro> <cpp:value>"node-origins"</cpp:value></cpp:define>     <comment type="block">/* Lazy node-origin cache */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_TXN_PROTOS_DIR</name></cpp:macro>   <cpp:value>"txn-protorevs"</cpp:value></cpp:define>    <comment type="block">/* Directory of proto-revs */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_TXN_CURRENT</name></cpp:macro>      <cpp:value>"txn-current"</cpp:value></cpp:define>      <comment type="block">/* File with next txn key */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_TXN_CURRENT_LOCK</name></cpp:macro> <cpp:value>"txn-current-lock"</cpp:value></cpp:define> <comment type="block">/* Lock for txn-current */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_LOCKS_DIR</name></cpp:macro>        <cpp:value>"locks"</cpp:value></cpp:define>            <comment type="block">/* Directory of locks */</comment>

<comment type="block">/* Names of special files and file extensions for transactions */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_CHANGES</name></cpp:macro>       <cpp:value>"changes"</cpp:value></cpp:define>       <comment type="block">/* Records changes made so far */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_TXN_PROPS</name></cpp:macro>     <cpp:value>"props"</cpp:value></cpp:define>         <comment type="block">/* Transaction properties */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_NEXT_IDS</name></cpp:macro>      <cpp:value>"next-ids"</cpp:value></cpp:define>      <comment type="block">/* Next temporary ID assignments */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_PREFIX_NODE</name></cpp:macro>   <cpp:value>"node."</cpp:value></cpp:define>         <comment type="block">/* Prefix for node filename */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_EXT_TXN</name></cpp:macro>       <cpp:value>".txn"</cpp:value></cpp:define>          <comment type="block">/* Extension of txn dir */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_EXT_CHILDREN</name></cpp:macro>  <cpp:value>".children"</cpp:value></cpp:define>     <comment type="block">/* Extension for dir contents */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_EXT_PROPS</name></cpp:macro>     <cpp:value>".props"</cpp:value></cpp:define>        <comment type="block">/* Extension for node props */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_EXT_REV</name></cpp:macro>       <cpp:value>".rev"</cpp:value></cpp:define>          <comment type="block">/* Extension of protorev file */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_EXT_REV_LOCK</name></cpp:macro>  <cpp:value>".rev-lock"</cpp:value></cpp:define>     <comment type="block">/* Extension of protorev lock file */</comment>
<comment type="block">/* Names of files in legacy FS formats */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_REV</name></cpp:macro>           <cpp:value>"rev"</cpp:value></cpp:define>           <comment type="block">/* Proto rev file */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATH_REV_LOCK</name></cpp:macro>      <cpp:value>"rev-lock"</cpp:value></cpp:define>      <comment type="block">/* Proto rev (write) lock file */</comment>

<comment type="block">/* The format number of this filesystem.
   This is independent of the repository format number, and
   independent of any other FS back ends. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_FS_FS__FORMAT_NUMBER</name></cpp:macro>   <cpp:value>3</cpp:value></cpp:define>

<comment type="block">/* The minimum format number that supports svndiff version 1.  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_FS_FS__MIN_SVNDIFF1_FORMAT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<comment type="block">/* The minimum format number that supports transaction ID generation
   using a transaction sequence in the txn-current file. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_FS_FS__MIN_TXN_CURRENT_FORMAT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<comment type="block">/* The minimum format number that supports the "layout" filesystem
   format option. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_FS_FS__MIN_LAYOUT_FORMAT_OPTION_FORMAT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<comment type="block">/* The minimum format number that stores protorevs in a separate directory. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_FS_FS__MIN_PROTOREVS_DIR_FORMAT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<comment type="block">/* The minimum format number that doesn't keep node and copy ID counters. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_FS_FS__MIN_NO_GLOBAL_IDS_FORMAT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<comment type="block">/* The minimum format number that maintains minfo-here and minfo-count
   noderev fields. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_FS_FS__MIN_MERGEINFO_FORMAT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<comment type="block">/* Maximum number of directories to cache dirents for.
   This *must* be a power of 2 for DIR_CACHE_ENTRIES_MASK
   to work.  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_DIR_CACHE_ENTRIES</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIR_CACHE_ENTRIES_MASK</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((x) &amp; (NUM_DIR_CACHE_ENTRIES - 1))</cpp:value></cpp:define>

<comment type="block">/* Maximum number of revroot ids to cache dirents for at a time. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_RRI_CACHE_ENTRIES</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>

<comment type="block">/* Private FSFS-specific data shared between all svn_txn_t objects that
   relate to a particular transaction in a filesystem (as identified
   by transaction id and filesystem UUID).  Objects of this type are
   allocated in their own subpool of the common pool. */</comment>
<struct_decl>struct <name>fs_fs_shared_txn_data_t</name>;</struct_decl>
<typedef>typedef <type><struct>struct <name>fs_fs_shared_txn_data_t</name>
<block>{
  <comment type="block">/* The next transaction in the list, or NULL if there is no following
     transaction. */</comment>
  <decl_stmt><decl><type>struct <name>fs_fs_shared_txn_data_t</name> *</type><name>next</name></decl>;</decl_stmt>

  <comment type="block">/* This transaction's ID.  For repositories whose format is less
     than SVN_FS_FS__MIN_TXN_CURRENT_FORMAT, the ID is in the form
     &lt;rev&gt;-&lt;uniqueifier&gt;, where &lt;uniqueifier&gt; runs from 0-99999 (see
     create_txn_dir_pre_1_5() in fs_fs.c).  For newer repositories,
     the form is &lt;rev&gt;-&lt;200 digit base 36 number&gt; (see
     create_txn_dir() in fs_fs.c). */</comment>
  <decl_stmt><decl><type><name>char</name></type> <name><name>txn_id</name><index>[<expr><name>SVN_FS__TXN_MAX_LEN</name>+1</expr>]</index></name></decl>;</decl_stmt>

  <comment type="block">/* Whether the transaction's prototype revision file is locked for
     writing by any thread in this process (including the current
     thread; recursive locks are not permitted).  This is effectively
     a non-recursive mutex. */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>being_written</name></decl>;</decl_stmt>

  <comment type="block">/* The pool in which this object has been allocated; a subpool of the
     common pool. */</comment>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
}</block></struct></type> <name>fs_fs_shared_txn_data_t</name>;</typedef>


<comment type="block">/* Private FSFS-specific data shared between all svn_fs_t objects that
   relate to a particular filesystem, as identified by filesystem UUID.
   Objects of this type are allocated in the common pool. */</comment>
<typedef>typedef <type><struct>struct
<block>{
  <comment type="block">/* A list of shared transaction objects for each transaction that is
     currently active, or NULL if none are.  All access to this list,
     including the contents of the objects stored in it, is synchronised
     under TXN_LIST_LOCK. */</comment>
  <decl_stmt><decl><type><name>fs_fs_shared_txn_data_t</name> *</type><name>txns</name></decl>;</decl_stmt>

  <comment type="block">/* A free transaction object, or NULL if there is no free object.
     Access to this object is synchronised under TXN_LIST_LOCK. */</comment>
  <decl_stmt><decl><type><name>fs_fs_shared_txn_data_t</name> *</type><name>free_txn</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
  <comment type="block">/* A lock for intra-process synchronization when accessing the TXNS list. */</comment>
  <decl_stmt><decl><type><name>apr_thread_mutex_t</name> *</type><name>txn_list_lock</name></decl>;</decl_stmt>

  <comment type="block">/* A lock for intra-process synchronization when grabbing the
     repository write lock. */</comment>
  <decl_stmt><decl><type><name>apr_thread_mutex_t</name> *</type><name>fs_write_lock</name></decl>;</decl_stmt>

  <comment type="block">/* A lock for intra-process synchronization when locking the
     txn-current file. */</comment>
  <decl_stmt><decl><type><name>apr_thread_mutex_t</name> *</type><name>txn_current_lock</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/* The common pool, under which this object is allocated, subpools
     of which are used to allocate the transaction objects. */</comment>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>common_pool</name></decl>;</decl_stmt>
}</block></struct></type> <name>fs_fs_shared_data_t</name>;</typedef>

<typedef>typedef <type>struct <name>dag_node_t</name></type> <name>dag_node_t</name>;</typedef>

<comment type="block">/* Structure for DAG-node cache.  Cache items are arranged in a
   circular LRU list with a dummy entry, and also indexed with a hash
   table.  Transaction nodes are cached within the individual txn
   roots; revision nodes are cached together within the FS object. */</comment>
<typedef>typedef <type><struct>struct <name>dag_node_cache_t</name>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl>;</decl_stmt>                <comment type="block">/* Lookup key for cached node: path
                                     for txns; rev catenated with path
                                     for revs */</comment>
  <decl_stmt><decl><type><name>dag_node_t</name> *</type><name>node</name></decl>;</decl_stmt>               <comment type="block">/* Cached node */</comment>
  <decl_stmt><decl><type>struct <name>dag_node_cache_t</name> *</type><name>prev</name></decl>;</decl_stmt>  <comment type="block">/* Next node in LRU list */</comment>
  <decl_stmt><decl><type>struct <name>dag_node_cache_t</name> *</type><name>next</name></decl>;</decl_stmt>  <comment type="block">/* Previous node in LRU list */</comment>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>               <comment type="block">/* Pool in which node is allocated */</comment>
}</block></struct></type> <name>dag_node_cache_t</name>;</typedef>


<comment type="block">/* Private (non-shared) FSFS-specific data for each svn_fs_t object. */</comment>
<typedef>typedef <type><struct>struct
<block>{
  <comment type="block">/* A cache of the last directory opened within the filesystem. */</comment>
  <decl_stmt><decl><type><name>svn_fs_id_t</name> *</type><name><name>dir_cache_id</name><index>[<expr><name>NUM_DIR_CACHE_ENTRIES</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name><name>dir_cache</name><index>[<expr><name>NUM_DIR_CACHE_ENTRIES</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name><name>dir_cache_pool</name><index>[<expr><name>NUM_DIR_CACHE_ENTRIES</name></expr>]</index></name></decl>;</decl_stmt>

  <comment type="block">/* The format number of this FS. */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>format</name></decl>;</decl_stmt>
  <comment type="block">/* The maximum number of files to store per directory (for sharded
     layouts) or zero (for linear layouts). */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>max_files_per_dir</name></decl>;</decl_stmt>

  <comment type="block">/* The uuid of this FS. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>uuid</name></decl>;</decl_stmt>

  <comment type="block">/* The revision that was youngest, last time we checked. */</comment>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>youngest_rev_cache</name></decl>;</decl_stmt>

  <comment type="block">/* Caches of immutable data.
     
     Both of these could be moved to fs_fs_shared_data_t to make them
     last longer; on the other hand, this would require adding mutexes
     for threaded builds.
  */</comment>

  <comment type="block">/* A cache of revision root IDs, allocated in this subpool.  (IDs
     are so small that one pool per ID would be overkill;
     unfortunately, this means the only way we expire cache entries is
     by wiping the whole cache.) */</comment>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>rev_root_id_cache</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>rev_root_id_cache_pool</name></decl>;</decl_stmt>

  <comment type="block">/* DAG node cache for immutable nodes */</comment>
  <decl_stmt><decl><type><name>dag_node_cache_t</name></type> <name>rev_node_list</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>rev_node_cache</name></decl>;</decl_stmt>

  <comment type="block">/* Data shared between all svn_fs_t objects for a given filesystem. */</comment>
  <decl_stmt><decl><type><name>fs_fs_shared_data_t</name> *</type><name>shared</name></decl>;</decl_stmt>
}</block></struct></type> <name>fs_fs_data_t</name>;</typedef>


<comment type="block">/*** Filesystem Transaction ***/</comment>
<typedef>typedef <type><struct>struct
<block>{
  <comment type="block">/* property list (const char * name, svn_string_t * value).
     may be NULL if there are no properties.  */</comment>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>proplist</name></decl>;</decl_stmt>

  <comment type="block">/* node revision id of the root node.  */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>root_id</name></decl>;</decl_stmt>

  <comment type="block">/* node revision id of the node which is the root of the revision
     upon which this txn is base.  (unfinished only) */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>base_id</name></decl>;</decl_stmt>

  <comment type="block">/* copies list (const char * copy_ids), or NULL if there have been
     no copies in this transaction.  */</comment>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>copies</name></decl>;</decl_stmt>

}</block></struct></type> <name>transaction_t</name>;</typedef>


<comment type="block">/*** Representation ***/</comment>
<comment type="block">/* If you add fields to this, check to see if you need to change
 * svn_fs_fs__rep_copy. */</comment>
<typedef>typedef <type><struct>struct
<block>{
  <comment type="block">/* MD5 checksum for the contents produced by this representation.
     This checksum is for the contents the rep shows to consumers,
     regardless of how the rep stores the data under the hood.  It is
     independent of the storage (fulltext, delta, whatever).

     If all the bytes are 0, then for compatibility behave as though
     this checksum matches the expected checksum. */</comment>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>checksum</name><index>[<expr><name>APR_MD5_DIGESTSIZE</name></expr>]</index></name></decl>;</decl_stmt>

  <comment type="block">/* Revision where this representation is located. */</comment>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl>;</decl_stmt>

  <comment type="block">/* Offset into the revision file where it is located. */</comment>
  <decl_stmt><decl><type><name>apr_off_t</name></type> <name>offset</name></decl>;</decl_stmt>

  <comment type="block">/* The size of the representation in bytes as seen in the revision
     file. */</comment>
  <decl_stmt><decl><type><name>svn_filesize_t</name></type> <name>size</name></decl>;</decl_stmt>

  <comment type="block">/* The size of the fulltext of the representation. */</comment>
  <decl_stmt><decl><type><name>svn_filesize_t</name></type> <name>expanded_size</name></decl>;</decl_stmt>

  <comment type="block">/* Is this representation a transaction? */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_id</name></decl>;</decl_stmt>

}</block></struct></type> <name>representation_t</name>;</typedef>


<comment type="block">/*** Node-Revision ***/</comment>
<comment type="block">/* If you add fields to this, check to see if you need to change
 * copy_node_revision in dag.c. */</comment>
<typedef>typedef <type><struct>struct
<block>{
  <comment type="block">/* node kind */</comment>
  <decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>

  <comment type="block">/* The node-id for this node-rev. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>id</name></decl>;</decl_stmt>

  <comment type="block">/* predecessor node revision id, or NULL if there is no predecessor
     for this node revision */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>predecessor_id</name></decl>;</decl_stmt>

  <comment type="block">/* If this node-rev is a copy, where was it copied from? */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_rev</name></decl>;</decl_stmt>

  <comment type="block">/* Helper for history tracing, root of the parent tree from whence
     this node-rev was copied. */</comment>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>copyroot_rev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyroot_path</name></decl>;</decl_stmt>

  <comment type="block">/* number of predecessors this node revision has (recursively), or
     -1 if not known (for backward compatibility). */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>predecessor_count</name></decl>;</decl_stmt>

  <comment type="block">/* representation key for this node's properties.  may be NULL if
     there are no properties.  */</comment>
  <decl_stmt><decl><type><name>representation_t</name> *</type><name>prop_rep</name></decl>;</decl_stmt>

  <comment type="block">/* representation for this node's data.  may be NULL if there is
     no data. */</comment>
  <decl_stmt><decl><type><name>representation_t</name> *</type><name>data_rep</name></decl>;</decl_stmt>

  <comment type="block">/* path at which this node first came into existence.  */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>created_path</name></decl>;</decl_stmt>

  <comment type="block">/* is this the unmodified root of a transaction? */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>is_fresh_txn_root</name></decl>;</decl_stmt>

  <comment type="block">/* Number of nodes with svn:mergeinfo properties that are
     descendants of this node (including it itself) */</comment>
  <decl_stmt><decl><type><name>apr_int64_t</name></type> <name>mergeinfo_count</name></decl>;</decl_stmt>

  <comment type="block">/* Does this node itself have svn:mergeinfo? */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>has_mergeinfo</name></decl>;</decl_stmt>

}</block></struct></type> <name>node_revision_t</name>;</typedef>


<comment type="block">/*** Change ***/</comment>
<typedef>typedef <type><struct>struct
<block>{
  <comment type="block">/* Path of the change. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>

  <comment type="block">/* Node revision ID of the change. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>noderev_id</name></decl>;</decl_stmt>

  <comment type="block">/* The kind of change. */</comment>
  <decl_stmt><decl><type><name>svn_fs_path_change_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>

  <comment type="block">/* Text or property mods? */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>text_mod</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>prop_mod</name></decl>;</decl_stmt>

  <comment type="block">/* Copyfrom revision and path. */</comment>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_rev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type> <name>copyfrom_path</name></decl>;</decl_stmt>

}</block></struct></type> <name>change_t</name>;</typedef>

<escape char="0xc"/>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SVN_LIBSVN_FS_FS_H */</comment>
</unit>
