<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_fs_fs/lock.h"><comment type="block">/* lock.h : internal interface to lock functions
 *
 * ====================================================================
 * Copyright (c) 2000-2004 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVN_LIBSVN_FS_LOCK_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_LIBSVN_FS_LOCK_H</name></cpp:macro></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<escape char="0xc"/>

<comment type="block">/* These functions implement some of the calls in the FS loader
   library's fs vtables. */</comment>

<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__lock</name><parameter_list>(<param><decl><type><name>svn_lock_t</name> **</type><name>lock</name></decl></param>,
                             <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>token</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>comment</name></decl></param>,
                             <param><decl><type><name>svn_boolean_t</name></type> <name>is_dav_comment</name></decl></param>,
                             <param><decl><type><name>apr_time_t</name></type> <name>expiration_date</name></decl></param>,
                             <param><decl><type><name>svn_revnum_t</name></type> <name>current_rev</name></decl></param>,
                             <param><decl><type><name>svn_boolean_t</name></type> <name>steal_lock</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__generate_lock_token</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>token</name></decl></param>,
                                            <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__unlock</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>token</name></decl></param>,
                               <param><decl><type><name>svn_boolean_t</name></type> <name>break_lock</name></decl></param>,
                               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__get_lock</name><parameter_list>(<param><decl><type><name>svn_lock_t</name> **</type><name>lock</name></decl></param>,
                                 <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__get_locks</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                  <param><decl><type><name>svn_fs_get_locks_callback_t</name></type> <name>get_locks_func</name></decl></param>,
                                  <param><decl><type><name>void</name> *</type><name>get_locks_baton</name></decl></param>,
                                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Examine PATH for existing locks, and check whether they can be
   used.  Use POOL for temporary allocations.

   If no locks are present, return SVN_NO_ERROR.

   If PATH is locked (or contains locks "below" it, when RECURSE is
   set), then verify that:

      1. a username has been supplied to TRAIL-&gt;fs's access-context,
         else return SVN_ERR_FS_NO_USER.

      2. for every lock discovered, the current username in the access
         context of TRAIL-&gt;fs matches the "owner" of the lock, else
         return SVN_ERR_FS_LOCK_OWNER_MISMATCH.

      3. for every lock discovered, a matching lock token has been
         passed into TRAIL-&gt;fs's access-context, else return
         SVN_ERR_FS_BAD_LOCK_TOKEN.

   If all three conditions are met, return SVN_NO_ERROR.

   If the caller (directly or indirectly) has the FS write lock,
   HAVE_WRITE_LOCK should be true.
*/</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__allow_locked_operation</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                               <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                               <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                                               <param><decl><type><name>svn_boolean_t</name></type> <name>have_write_lock</name></decl></param>,
                                               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SVN_LIBSVN_FS_LOCK_H */</comment>
</unit>
