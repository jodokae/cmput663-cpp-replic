<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_fs_fs/id.h"><comment type="block">/* id.h : interface to node ID functions, private to libsvn_fs_fs
 *
 * ====================================================================
 * Copyright (c) 2000-2004 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVN_LIBSVN_FS_FS_ID_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_LIBSVN_FS_FS_ID_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_fs.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<escape char="0xc"/>
<comment type="block">/*** ID accessor functions. ***/</comment>

<comment type="block">/* Get the "node id" portion of ID. */</comment>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>svn_fs_fs__id_node_id</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>id</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Get the "copy id" portion of ID. */</comment>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>svn_fs_fs__id_copy_id</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>id</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Get the "txn id" portion of ID, or NULL if it is a permanent ID. */</comment>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>svn_fs_fs__id_txn_id</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>id</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Get the "rev" portion of ID, or SVN_INVALID_REVNUM if it is a
   transaction ID. */</comment>
<function_decl><type><name>svn_revnum_t</name></type> <name>svn_fs_fs__id_rev</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>id</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Access the "offset" portion of the ID, or -1 if it is a transaction
   ID. */</comment>
<function_decl><type><name>apr_off_t</name></type> <name>svn_fs_fs__id_offset</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>id</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Convert ID into string form, allocated in POOL. */</comment>
<function_decl><type><name>svn_string_t</name> *</type><name>svn_fs_fs__id_unparse</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>id</name></decl></param>,
                                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Return true if A and B are equal. */</comment>
<function_decl><type><name>svn_boolean_t</name></type> <name>svn_fs_fs__id_eq</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>a</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>b</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Return true if A and B are related. */</comment>
<function_decl><type><name>svn_boolean_t</name></type> <name>svn_fs_fs__id_check_related</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>a</name></decl></param>,
                                          <param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>b</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Return 0 if A and B are equal, 1 if they are related, -1 otherwise. */</comment>
<function_decl><type><name>int</name></type> <name>svn_fs_fs__id_compare</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>a</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>b</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Create an ID within a transaction based on NODE_ID, COPY_ID, and
   TXN_ID, allocated in POOL. */</comment>
<function_decl><type><name>svn_fs_id_t</name> *</type><name>svn_fs_fs__id_txn_create</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>node_id</name></decl></param>,
                                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copy_id</name></decl></param>,
                                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_id</name></decl></param>,
                                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Create a permanent ID based on NODE_ID, COPY_ID, REV, and OFFSET,
   allocated in POOL. */</comment>
<function_decl><type><name>svn_fs_id_t</name> *</type><name>svn_fs_fs__id_rev_create</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>node_id</name></decl></param>,
                                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copy_id</name></decl></param>,
                                      <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                                      <param><decl><type><name>apr_off_t</name></type> <name>offset</name></decl></param>,
                                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Return a copy of ID, allocated from POOL. */</comment>
<function_decl><type><name>svn_fs_id_t</name> *</type><name>svn_fs_fs__id_copy</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>id</name></decl></param>,
                                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Return an ID resulting from parsing the string DATA (with length
   LEN), or NULL if DATA is an invalid ID string. */</comment>
<function_decl><type><name>svn_fs_id_t</name> *</type><name>svn_fs_fs__id_parse</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>,
                                 <param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>,
                                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SVN_LIBSVN_FS_FS_ID_H */</comment>
</unit>
