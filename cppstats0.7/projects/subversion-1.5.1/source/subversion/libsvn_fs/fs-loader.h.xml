<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_fs/fs-loader.h"><comment type="block">/*
 * fs_loader.h:  Declarations for the FS loader library
 *
 * ====================================================================
 * Copyright (c) 2000-2008 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>
<escape char="0xc"/>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LIBSVN_FS_FS_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBSVN_FS_FS_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_fs.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<escape char="0xc"/>
<comment type="block">/* The FS loader library implements the a front end to "filesystem
   abstract providers" (FSAPs), which implement the svn_fs API.

   The loader library divides up the FS API into five categories:

     - Top-level functions, which operate on paths to an FS
     - Functions which operate on an FS object
     - Functions which operate on a transaction object
     - Functions which operate on a root object
     - Functions which operate on a history object

   Some generic fields of the FS, transaction, root, and history
   objects are defined by the loader library; the rest are stored in
   the "fsap_data" field which is defined by the FSAP.  Likewise, some
   of the very simple svn_fs API functions (such as svn_fs_root_fs)
   are defined by the loader library, while the rest are implemented
   through vtable calls defined by the FSAP.

   If you are considering writing a new database-backed filesystem
   implementation, it may be appropriate to add a second, lower-level
   abstraction to the libsvn_fs_base library which currently
   implements the BDB filesystem type.  Consult the dev list for
   details on the "FSP-level" abstraction concept.
*/</comment>


<escape char="0xc"/>
<comment type="block">/*** Top-level library vtable type ***/</comment>

<typedef>typedef <type><struct>struct <name>fs_library_vtable_t</name>
<block>{
  <comment type="block">/* This field should always remain first in the vtable.
     Apart from that, it can be changed however you like, since exact
     version equality is required between loader and module.  This policy
     was weaker during 1.1.x, but only in ways which do not conflict with
     this statement, now that the minor version has increased. */</comment>
  <function_decl><type><specifier>const</specifier> <name>svn_version_t</name> *</type>(*<name>get_version</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>

  <comment type="block">/* The open_fs/create/open_fs_for_recovery/upgrade_fs functions are
     serialized so that they may use the common_pool parameter to
     allocate fs-global objects such as the bdb env cache. */</comment>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>create</name>)<parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                         <param><decl><type><name>apr_pool_t</name> *</type><name>common_pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>open_fs</name>)<parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                          <param><decl><type><name>apr_pool_t</name> *</type><name>common_pool</name></decl></param>)</parameter_list>;</function_decl>
  <comment type="block">/* open_for_recovery() is like open(), but used to fill in an fs pointer
     that will be passed to recover().  We assume that the open() method
     might not be immediately appropriate for recovery. */</comment>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>open_fs_for_recovery</name>)<parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                       <param><decl><type><name>apr_pool_t</name> *</type><name>common_pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>upgrade_fs</name>)<parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>common_pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>delete_fs</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>hotcopy</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_path</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dest_path</name></decl></param>,
                          <param><decl><type><name>svn_boolean_t</name></type> <name>clean</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><specifier>const</specifier> <name>char</name> *</type>(*<name>get_description</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>recover</name>)<parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                          <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>, <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="block">/* Provider-specific functions should go here, even if they could go
     in an object vtable, so that they are all kept together. */</comment>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>bdb_logfiles</name>)<parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>logfiles</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>svn_boolean_t</name></type> <name>only_unused</name></decl></param>,
                               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="block">/* This is to let the base provider implement the deprecated
     svn_fs_parse_id, which we've decided doesn't belong in the FS
     API.  If we change our minds and decide to add a real
     svn_fs_parse_id variant which takes an FS object, it should go
     into the FS vtable. */</comment>
  <function_decl><type><name>svn_fs_id_t</name> *</type>(*<name>parse_id</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
}</block></struct></type> <name>fs_library_vtable_t</name>;</typedef>

<comment type="block">/* This is the type of symbol an FS module defines to fetch the
   library vtable. The LOADER_VERSION parameter must remain first in
   the list, and the function must use the C calling convention on all
   platforms, so that the init functions can safely read the version
   parameter.  The COMMON_POOL parameter must be a pool with a greater
   lifetime than the fs module so that fs global state can be kept
   in it and cleaned up on termination before the fs module is unloaded.
   Calls to these functions are globally serialized so that they have
   exclusive access to the COMMON_POOL parameter.

   ### need to force this to be __cdecl on Windows... how?? */</comment>
<typedef>typedef <function_decl><type><name>svn_error_t</name> *</type>(*<name>fs_init_func_t</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_version_t</name> *</type><name>loader_version</name></decl></param>,
                                       <param><decl><type><name>fs_library_vtable_t</name> **</type><name>vtable</name></decl></param>,
                                       <param><decl><type><name>apr_pool_t</name>*</type> <name>common_pool</name></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="block">/* Here are the declarations for the FS module init functions.  If we
   are using DSO loading, they won't actually be linked into
   libsvn_fs.  Note that these private functions have a common_pool
   parameter that may be used for fs module scoped variables such as
   the bdb cache.  This will be the same common_pool that is passed
   to the create and open functions and these init functions (as well
   as the open and create functions) are globally serialized so that
   they have exclusive access to the common_pool. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_base__init</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_version_t</name> *</type><name>loader_version</name></decl></param>,
                               <param><decl><type><name>fs_library_vtable_t</name> **</type><name>vtable</name></decl></param>,
                               <param><decl><type><name>apr_pool_t</name>*</type> <name>common_pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_fs__init</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_version_t</name> *</type><name>loader_version</name></decl></param>,
                             <param><decl><type><name>fs_library_vtable_t</name> **</type><name>vtable</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name>*</type> <name>common_pool</name></decl></param>)</parameter_list>;</function_decl>


<escape char="0xc"/>
<comment type="block">/*** vtable types for the abstract FS objects ***/</comment>

<typedef>typedef <type><struct>struct <name>fs_vtable_t</name>
<block>{
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>youngest_rev</name>)<parameter_list>(<param><decl><type><name>svn_revnum_t</name> *</type><name>youngest_p</name></decl></param>, <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>revision_prop</name>)<parameter_list>(<param><decl><type><name>svn_string_t</name> **</type><name>value_p</name></decl></param>, <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>propname</name></decl></param>,
                                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>revision_proplist</name>)<parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>table_p</name></decl></param>, <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                    <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>change_rev_prop</name>)<parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>, <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                                  <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
                                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>get_uuid</name>)<parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>uuid</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>set_uuid</name>)<parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>uuid</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>revision_root</name>)<parameter_list>(<param><decl><type><name>svn_fs_root_t</name> **</type><name>root_p</name></decl></param>, <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>begin_txn</name>)<parameter_list>(<param><decl><type><name>svn_fs_txn_t</name> **</type><name>txn_p</name></decl></param>, <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                            <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>, <param><decl><type><name>apr_uint32_t</name></type> <name>flags</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>open_txn</name>)<parameter_list>(<param><decl><type><name>svn_fs_txn_t</name> **</type><name>txn</name></decl></param>, <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>purge_txn</name>)<parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_id</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>list_transactions</name>)<parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>names_p</name></decl></param>,
                                    <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>deltify</name>)<parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>, <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>lock</name>)<parameter_list>(<param><decl><type><name>svn_lock_t</name> **</type><name>lock</name></decl></param>, <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>token</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>comment</name></decl></param>, <param><decl><type><name>svn_boolean_t</name></type> <name>is_dav_comment</name></decl></param>,
                       <param><decl><type><name>apr_time_t</name></type> <name>expiration_date</name></decl></param>,
                       <param><decl><type><name>svn_revnum_t</name></type> <name>current_rev</name></decl></param>, <param><decl><type><name>svn_boolean_t</name></type> <name>steal_lock</name></decl></param>,
                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>generate_lock_token</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>token</name></decl></param>, <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>unlock</name>)<parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>token</name></decl></param>,
                         <param><decl><type><name>svn_boolean_t</name></type> <name>break_lock</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>get_lock</name>)<parameter_list>(<param><decl><type><name>svn_lock_t</name> **</type><name>lock</name></decl></param>, <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>get_locks</name>)<parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                            <param><decl><type><name>svn_fs_get_locks_callback_t</name></type> <name>get_locks_func</name></decl></param>,
                            <param><decl><type><name>void</name> *</type><name>get_locks_baton</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>bdb_set_errcall</name>)<parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                  <param><function_decl><type><name>void</name></type> (*<name>handler</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>errpfx</name></decl></param>,
                                                  <param><decl><type><name>char</name> *</type><name>msg</name></decl></param>)</parameter_list></function_decl></param>)</parameter_list>;</function_decl>
}</block></struct></type> <name>fs_vtable_t</name>;</typedef>


<typedef>typedef <type><struct>struct <name>txn_vtable_t</name>
<block>{
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>commit</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>conflict_p</name></decl></param>, <param><decl><type><name>svn_revnum_t</name> *</type><name>new_rev</name></decl></param>,
                         <param><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>abort</name>)<parameter_list>(<param><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>get_prop</name>)<parameter_list>(<param><decl><type><name>svn_string_t</name> **</type><name>value_p</name></decl></param>, <param><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>propname</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>get_proplist</name>)<parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>table_p</name></decl></param>, <param><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl></param>,
                               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>change_prop</name>)<parameter_list>(<param><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>root</name>)<parameter_list>(<param><decl><type><name>svn_fs_root_t</name> **</type><name>root_p</name></decl></param>, <param><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl></param>,
                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>change_props</name>)<parameter_list>(<param><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl></param>, <param><decl><type><name>apr_array_header_t</name> *</type><name>props</name></decl></param>,
                               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
}</block></struct></type> <name>txn_vtable_t</name>;</typedef>


<comment type="block">/* Some of these operations accept multiple root arguments.  Since the
   roots may not all have the same vtable, we need a rule to determine
   which root's vtable is used.  The rule is: if one of the roots is
   named "target", we use that root's vtable; otherwise, we use the
   first root argument's vtable. */</comment>
<typedef>typedef <type><struct>struct <name>root_vtable_t</name>
<block>{
  <comment type="block">/* Determining what has changed in a root */</comment>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>paths_changed</name>)<parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>changed_paths_p</name></decl></param>,
                                <param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>,
                                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="block">/* Generic node operations */</comment>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>check_path</name>)<parameter_list>(<param><decl><type><name>svn_node_kind_t</name> *</type><name>kind_p</name></decl></param>, <param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>node_history</name>)<parameter_list>(<param><decl><type><name>svn_fs_history_t</name> **</type><name>history_p</name></decl></param>,
                               <param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>node_id</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> **</type><name>id_p</name></decl></param>, <param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>node_created_rev</name>)<parameter_list>(<param><decl><type><name>svn_revnum_t</name> *</type><name>revision</name></decl></param>,
                                   <param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>node_origin_rev</name>)<parameter_list>(<param><decl><type><name>svn_revnum_t</name> *</type><name>revision</name></decl></param>,
                                  <param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>node_created_path</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>created_path</name></decl></param>,
                                    <param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>delete_node</name>)<parameter_list>(<param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>copied_from</name>)<parameter_list>(<param><decl><type><name>svn_revnum_t</name> *</type><name>rev_p</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>path_p</name></decl></param>,
                              <param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>closest_copy</name>)<parameter_list>(<param><decl><type><name>svn_fs_root_t</name> **</type><name>root_p</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>path_p</name></decl></param>,
                               <param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="block">/* Property operations */</comment>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>node_prop</name>)<parameter_list>(<param><decl><type><name>svn_string_t</name> **</type><name>value_p</name></decl></param>, <param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>propname</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>node_proplist</name>)<parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>table_p</name></decl></param>, <param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>change_node_prop</name>)<parameter_list>(<param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
                                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>props_changed</name>)<parameter_list>(<param><decl><type><name>int</name> *</type><name>changed_p</name></decl></param>, <param><decl><type><name>svn_fs_root_t</name> *</type><name>root1</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path1</name></decl></param>, <param><decl><type><name>svn_fs_root_t</name> *</type><name>root2</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path2</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="block">/* Directories */</comment>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>dir_entries</name>)<parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>entries_p</name></decl></param>, <param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>make_dir</name>)<parameter_list>(<param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>copy</name>)<parameter_list>(<param><decl><type><name>svn_fs_root_t</name> *</type><name>from_root</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>from_path</name></decl></param>,
                       <param><decl><type><name>svn_fs_root_t</name> *</type><name>to_root</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>to_path</name></decl></param>,
                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>revision_link</name>)<parameter_list>(<param><decl><type><name>svn_fs_root_t</name> *</type><name>from_root</name></decl></param>,
                                <param><decl><type><name>svn_fs_root_t</name> *</type><name>to_root</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="block">/* Files */</comment>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>file_length</name>)<parameter_list>(<param><decl><type><name>svn_filesize_t</name> *</type><name>length_p</name></decl></param>, <param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>file_md5_checksum</name>)<parameter_list>(<param><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[]</index></name></decl></param>,
                                    <param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>file_contents</name>)<parameter_list>(<param><decl><type><name>svn_stream_t</name> **</type><name>contents</name></decl></param>,
                                <param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>make_file</name>)<parameter_list>(<param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>apply_textdelta</name>)<parameter_list>(<param><decl><type><name>svn_txdelta_window_handler_t</name> *</type><name>contents_p</name></decl></param>,
                                  <param><decl><type><name>void</name> **</type><name>contents_baton_p</name></decl></param>,
                                  <param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_checksum</name></decl></param>,
                                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>result_checksum</name></decl></param>,
                                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>apply_text</name>)<parameter_list>(<param><decl><type><name>svn_stream_t</name> **</type><name>contents_p</name></decl></param>, <param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>result_checksum</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>contents_changed</name>)<parameter_list>(<param><decl><type><name>int</name> *</type><name>changed_p</name></decl></param>, <param><decl><type><name>svn_fs_root_t</name> *</type><name>root1</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path1</name></decl></param>, <param><decl><type><name>svn_fs_root_t</name> *</type><name>root2</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path2</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>get_file_delta_stream</name>)<parameter_list>(<param><decl><type><name>svn_txdelta_stream_t</name> **</type><name>stream_p</name></decl></param>,
                                        <param><decl><type><name>svn_fs_root_t</name> *</type><name>source_root</name></decl></param>,
                                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>source_path</name></decl></param>,
                                        <param><decl><type><name>svn_fs_root_t</name> *</type><name>target_root</name></decl></param>,
                                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target_path</name></decl></param>,
                                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="block">/* Merging. */</comment>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>merge</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>conflict_p</name></decl></param>,
                        <param><decl><type><name>svn_fs_root_t</name> *</type><name>source_root</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>source_path</name></decl></param>,
                        <param><decl><type><name>svn_fs_root_t</name> *</type><name>target_root</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target_path</name></decl></param>,
                        <param><decl><type><name>svn_fs_root_t</name> *</type><name>ancestor_root</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ancestor_path</name></decl></param>,
                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>get_mergeinfo</name>)<parameter_list>(<param><decl><type><name>svn_mergeinfo_catalog_t</name> *</type><name>catalog</name></decl></param>,
                                <param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>paths</name></decl></param>,
                                <param><decl><type><name>svn_mergeinfo_inheritance_t</name></type> <name>inherit</name></decl></param>,
                                <param><decl><type><name>svn_boolean_t</name></type> <name>include_descendants</name></decl></param>,
                                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
}</block></struct></type> <name>root_vtable_t</name>;</typedef>


<typedef>typedef <type><struct>struct <name>history_vtable_t</name>
<block>{
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>prev</name>)<parameter_list>(<param><decl><type><name>svn_fs_history_t</name> **</type><name>prev_history_p</name></decl></param>,
                       <param><decl><type><name>svn_fs_history_t</name> *</type><name>history</name></decl></param>, <param><decl><type><name>svn_boolean_t</name></type> <name>cross_copies</name></decl></param>,
                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>location</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>path</name></decl></param>, <param><decl><type><name>svn_revnum_t</name> *</type><name>revision</name></decl></param>,
                           <param><decl><type><name>svn_fs_history_t</name> *</type><name>history</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
}</block></struct></type> <name>history_vtable_t</name>;</typedef>


<typedef>typedef <type><struct>struct <name>id_vtable_t</name>
<block>{
  <function_decl><type><name>svn_string_t</name> *</type>(*<name>unparse</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>id</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>int</name></type> (*<name>compare</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>a</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>b</name></decl></param>)</parameter_list>;</function_decl>
}</block></struct></type> <name>id_vtable_t</name>;</typedef>


<escape char="0xc"/>
<comment type="block">/*** Definitions of the abstract FS object types ***/</comment>

<comment type="block">/* These are transaction properties that correspond to the bitfields
   in the 'flags' argument to svn_fs_lock().  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_FS__PROP_TXN_CHECK_LOCKS</name></cpp:macro>           <cpp:value>SVN_PROP_PREFIX "check-locks"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_FS__PROP_TXN_CHECK_OOD</name></cpp:macro>             <cpp:value>SVN_PROP_PREFIX "check-ood"</cpp:value></cpp:define>

<struct>struct <name>svn_fs_t</name>
<block>{
  <comment type="block">/* The pool in which this fs object is allocated */</comment>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>

  <comment type="block">/* The path to the repository's top-level directory */</comment>
  <decl_stmt><decl><type><name>char</name> *</type><name>path</name></decl>;</decl_stmt>

  <comment type="block">/* A callback for printing warning messages */</comment>
  <decl_stmt><decl><type><name>svn_fs_warning_callback_t</name></type> <name>warning</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>warning_baton</name></decl>;</decl_stmt>

  <comment type="block">/* The filesystem configuration */</comment>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>config</name></decl>;</decl_stmt>

  <comment type="block">/* An access context indicating who's using the fs */</comment>
  <decl_stmt><decl><type><name>svn_fs_access_t</name> *</type><name>access_ctx</name></decl>;</decl_stmt>

  <comment type="block">/* FSAP-specific vtable and private data */</comment>
  <decl_stmt><decl><type><name>fs_vtable_t</name> *</type><name>vtable</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>fsap_data</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>svn_fs_txn_t</name>
<block>{
  <comment type="block">/* The filesystem to which this transaction belongs */</comment>
  <decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>

  <comment type="block">/* The revision on which this transaction is based, or
     SVN_INVALID_REVISION if the transaction is not based on a
     revision at all */</comment>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>base_rev</name></decl>;</decl_stmt>

  <comment type="block">/* The ID of this transaction */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>id</name></decl>;</decl_stmt>

  <comment type="block">/* FSAP-specific vtable and private data */</comment>
  <decl_stmt><decl><type><name>txn_vtable_t</name> *</type><name>vtable</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>fsap_data</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>svn_fs_root_t</name>
<block>{
  <comment type="block">/* A pool managing this root */</comment>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>

  <comment type="block">/* The filesystem to which this root belongs */</comment>
  <decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>

  <comment type="block">/* The kind of root this is */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>is_txn_root</name></decl>;</decl_stmt>

  <comment type="block">/* For transaction roots, the name of the transaction  */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn</name></decl>;</decl_stmt>

  <comment type="block">/* For transaction roots, flags describing the txn's behavior. */</comment>
  <decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>txn_flags</name></decl>;</decl_stmt>

  <comment type="block">/* For revision roots, the number of the revision; for transaction
     roots, the number of the revision on which the transaction is
     based. */</comment>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>

  <comment type="block">/* FSAP-specific vtable and private data */</comment>
  <decl_stmt><decl><type><name>root_vtable_t</name> *</type><name>vtable</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>fsap_data</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>svn_fs_history_t</name>
<block>{
  <comment type="block">/* FSAP-specific vtable and private data */</comment>
  <decl_stmt><decl><type><name>history_vtable_t</name> *</type><name>vtable</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>fsap_data</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>svn_fs_id_t</name>
<block>{
  <comment type="block">/* FSAP-specific vtable and private data */</comment>
  <decl_stmt><decl><type><name>id_vtable_t</name> *</type><name>vtable</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>fsap_data</name></decl>;</decl_stmt>
}</block>;</struct>


<struct>struct <name>svn_fs_access_t</name>
<block>{
  <comment type="block">/* An authenticated username using the fs */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>username</name></decl>;</decl_stmt>

  <comment type="block">/* A collection of lock-tokens supplied by the fs caller.
     Hash maps (const char *) UUID --&gt; (void *) 1
     fs functions should really only be interested whether a UUID
     exists as a hash key at all;  the value is irrelevant. */</comment>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>lock_tokens</name></decl>;</decl_stmt>
}</block>;</struct>



<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
