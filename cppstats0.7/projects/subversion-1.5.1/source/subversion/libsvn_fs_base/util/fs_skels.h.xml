<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_fs_base/util/fs_skels.h"><comment type="block">/* fs_skels.h : headers for conversion between fs native types and
 *              skeletons
 *
 * ====================================================================
 * Copyright (c) 2000-2004 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVN_LIBSVN_FS_FS_SKELS_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_LIBSVN_FS_FS_SKELS_H</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APU_WANT_DB</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apu_want.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_hash.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"skel.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<escape char="0xc"/>
<comment type="block">/*** Parsing (conversion from skeleton to native FS type) ***/</comment>


<comment type="block">/* Parse a `PROPLIST' SKEL into a regular hash of properties,
   *PROPLIST_P, which has const char * property names, and
   svn_string_t * values, or NULL if SKEL contains no properties.  Use
   POOL for all allocations.  */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_fs_base__parse_proplist_skel</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>proplist_p</name></decl></param>,
                                 <param><decl><type><name>skel_t</name> *</type><name>skel</name></decl></param>,
                                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Parse a `REVISION' SKEL into *REVISION_P.  Use POOL for all
   allocations.  */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_fs_base__parse_revision_skel</name><parameter_list>(<param><decl><type><name>revision_t</name> **</type><name>revision_p</name></decl></param>,
                                 <param><decl><type><name>skel_t</name> *</type><name>skel</name></decl></param>,
                                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Parse a `TRANSACTION' SKEL into *TRANSACTION_P.  Use POOL for all
   allocations.  */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_fs_base__parse_transaction_skel</name><parameter_list>(<param><decl><type><name>transaction_t</name> **</type><name>transaction_p</name></decl></param>,
                                    <param><decl><type><name>skel_t</name> *</type><name>skel</name></decl></param>,
                                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Parse a `REPRESENTATION' SKEL into *REP_P.  Use POOL for all
   allocations.  */</comment>

<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_fs_base__parse_representation_skel</name><parameter_list>(<param><decl><type><name>representation_t</name> **</type><name>rep_p</name></decl></param>,
                                       <param><decl><type><name>skel_t</name> *</type><name>skel</name></decl></param>,
                                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Parse a `NODE-REVISION' SKEL into *NODEREV_P.  Use POOL for all
   allocations. */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_fs_base__parse_node_revision_skel</name><parameter_list>(<param><decl><type><name>node_revision_t</name> **</type><name>noderev_p</name></decl></param>,
                                      <param><decl><type><name>skel_t</name> *</type><name>skel</name></decl></param>,
                                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Parse a `COPY' SKEL into *COPY_P.  Use POOL for all allocations. */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_fs_base__parse_copy_skel</name><parameter_list>(<param><decl><type><name>copy_t</name> **</type><name>copy_p</name></decl></param>,
                             <param><decl><type><name>skel_t</name> *</type><name>skel</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Parse an `ENTRIES' SKEL into *ENTRIES_P, which is a hash with const
   char * names (the directory entry name) and svn_fs_id_t * values
   (the node-id of the entry), or NULL if SKEL contains no entries.
   Use POOL for all allocations. */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_fs_base__parse_entries_skel</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>entries_p</name></decl></param>,
                                <param><decl><type><name>skel_t</name> *</type><name>skel</name></decl></param>,
                                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Parse a `CHANGE' SKEL into *CHANGE_P.  Use POOL for all allocations. */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_fs_base__parse_change_skel</name><parameter_list>(<param><decl><type><name>change_t</name> **</type><name>change_p</name></decl></param>,
                               <param><decl><type><name>skel_t</name> *</type><name>skel</name></decl></param>,
                               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Parse a `LOCK' SKEL into *LOCK_P.  Use POOL for all allocations. */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_fs_base__parse_lock_skel</name><parameter_list>(<param><decl><type><name>svn_lock_t</name> **</type><name>lock_p</name></decl></param>,
                             <param><decl><type><name>skel_t</name> *</type><name>skel</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<escape char="0xc"/>
<comment type="block">/*** Unparsing (conversion from native FS type to skeleton) ***/</comment>


<comment type="block">/* Unparse a PROPLIST hash (which has const char * property names and
   svn_stringbuf_t * values) into a `PROPLIST' skel *SKEL_P.  Use POOL
   for all allocations.  */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_fs_base__unparse_proplist_skel</name><parameter_list>(<param><decl><type><name>skel_t</name> **</type><name>skel_p</name></decl></param>,
                                   <param><decl><type><name>apr_hash_t</name> *</type><name>proplist</name></decl></param>,
                                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Unparse REVISION into a `REVISION' skel *SKEL_P.  Use POOL for all
   allocations.  */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_fs_base__unparse_revision_skel</name><parameter_list>(<param><decl><type><name>skel_t</name> **</type><name>skel_p</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>revision_t</name> *</type><name>revision</name></decl></param>,
                                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Unparse TRANSACTION into a `TRANSACTION' skel *SKEL_P.  Use POOL
   for all allocations.  */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_fs_base__unparse_transaction_skel</name><parameter_list>(<param><decl><type><name>skel_t</name> **</type><name>skel_p</name></decl></param>,
                                      <param><decl><type><specifier>const</specifier> <name>transaction_t</name> *</type><name>transaction</name></decl></param>,
                                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Unparse REP into a `REPRESENTATION' skel *SKEL_P.  Use POOL for all
   allocations.  */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_fs_base__unparse_representation_skel</name><parameter_list>(<param><decl><type><name>skel_t</name> **</type><name>skel_p</name></decl></param>,
                                         <param><decl><type><specifier>const</specifier> <name>representation_t</name> *</type><name>rep</name></decl></param>,
                                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Unparse NODEREV into a `NODE-REVISION' skel *SKEL_P.  Use POOL for
   all allocations.  FORMAT is the format version of the filesystem. */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_fs_base__unparse_node_revision_skel</name><parameter_list>(<param><decl><type><name>skel_t</name> **</type><name>skel_p</name></decl></param>,
                                        <param><decl><type><specifier>const</specifier> <name>node_revision_t</name> *</type><name>noderev</name></decl></param>,
                                        <param><decl><type><name>int</name></type> <name>format</name></decl></param>,
                                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Unparse COPY into a `COPY' skel *SKEL_P.  Use POOL for all
   allocations.  */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_fs_base__unparse_copy_skel</name><parameter_list>(<param><decl><type><name>skel_t</name> **</type><name>skel_p</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>copy_t</name> *</type><name>copy</name></decl></param>,
                               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Unparse an ENTRIES hash, which has const char * names (the entry
   name) and svn_fs_id_t * values (the node-id of the entry) into an
   `ENTRIES' skel *SKEL_P.  Use POOL for all allocations.  */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_fs_base__unparse_entries_skel</name><parameter_list>(<param><decl><type><name>skel_t</name> **</type><name>skel_p</name></decl></param>,
                                  <param><decl><type><name>apr_hash_t</name> *</type><name>entries</name></decl></param>,
                                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Unparse CHANGE into a `CHANGE' skel *SKEL_P.  Use POOL for all
   allocations.  */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_fs_base__unparse_change_skel</name><parameter_list>(<param><decl><type><name>skel_t</name> **</type><name>skel_p</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>change_t</name> *</type><name>change</name></decl></param>,
                                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Unparse LOCK into a `LOCK' skel *SKEL_P.  Use POOL for all
   allocations.  */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_fs_base__unparse_lock_skel</name><parameter_list>(<param><decl><type><name>skel_t</name> **</type><name>skel_p</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>svn_lock_t</name> *</type><name>lock</name></decl></param>,
                               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<escape char="0xc"/>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SVN_LIBSVN_FS_FS_SKELS_H */</comment>
</unit>
