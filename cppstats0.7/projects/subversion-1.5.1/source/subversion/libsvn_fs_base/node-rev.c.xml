<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_fs_base/node-rev.c"><comment type="block">/* node-rev.c --- storing and retrieving NODE-REVISION skels
 *
 * ====================================================================
 * Copyright (c) 2000-2004 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APU_WANT_DB</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apu_want.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"err.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"node-rev.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"reps-strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"id.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libsvn_fs/fs-loader.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bdb/nodes-table.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bdb/node-origins-table.h"</cpp:file></cpp:include>

<escape char="0xc"/>
<comment type="block">/* Creating completely new nodes.  */</comment>


<function><type><name>svn_error_t</name> *</type>
<name>svn_fs_base__create_node</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> **</type><name>id_p</name></decl></param>,
                         <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                         <param><decl><type><name>node_revision_t</name> *</type><name>noderev</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copy_id</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_id</name></decl></param>,
                         <param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>,
                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_fs_id_t</name> *</type><name>id</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>base_fs_data_t</name> *</type><name>bfd</name> <init>= <expr><name><name>fs</name>-&gt;<name>fsap_data</name></name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Find an unused ID for the node.  */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__new_node_id</name><argument_list>(<argument><expr>&amp;<name>id</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>copy_id</name></expr></argument>, <argument><expr><name>txn_id</name></expr></argument>, <argument><expr><name>trail</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Store its NODE-REVISION skel.  */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__put_node_revision</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>noderev</name></expr></argument>, <argument><expr><name>trail</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Add a record in the node origins index table if our format
     supports it.  */</comment>
  <if>if <condition>(<expr><name><name>bfd</name>-&gt;<name>format</name></name> &gt;= <name>SVN_FS_BASE__MIN_NODE_ORIGINS_FORMAT</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__set_node_origin</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><call><name>svn_fs_base__id_node_id</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>,
                                          <argument><expr><name>id</name></expr></argument>, <argument><expr><name>trail</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <expr_stmt><expr>*<name>id_p</name> = <name>id</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<escape char="0xc"/>
<comment type="block">/* Creating new revisions of existing nodes.  */</comment>

<function><type><name>svn_error_t</name> *</type>
<name>svn_fs_base__create_successor</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> **</type><name>new_id_p</name></decl></param>,
                              <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>old_id</name></decl></param>,
                              <param><decl><type><name>node_revision_t</name> *</type><name>new_noderev</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copy_id</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_id</name></decl></param>,
                              <param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>,
                              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_fs_id_t</name> *</type><name>new_id</name></decl>;</decl_stmt>

  <comment type="block">/* Choose an ID for the new node, and store it in the database.  */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__new_successor_id</name><argument_list>(<argument><expr>&amp;<name>new_id</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>old_id</name></expr></argument>, <argument><expr><name>copy_id</name></expr></argument>,
                                       <argument><expr><name>txn_id</name></expr></argument>, <argument><expr><name>trail</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Store the new skel under that ID.  */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__put_node_revision</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>new_id</name></expr></argument>, <argument><expr><name>new_noderev</name></expr></argument>,
                                        <argument><expr><name>trail</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>new_id_p</name> = <name>new_id</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<escape char="0xc"/>
<comment type="block">/* Deleting a node revision. */</comment>

<function><type><name>svn_error_t</name> *</type>
<name>svn_fs_base__delete_node_revision</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                  <param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>id</name></decl></param>,
                                  <param><decl><type><name>svn_boolean_t</name></type> <name>origin_also</name></decl></param>,
                                  <param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>,
                                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>base_fs_data_t</name> *</type><name>bfd</name> <init>= <expr><name><name>fs</name>-&gt;<name>fsap_data</name></name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* ### todo: here, we should adjust other nodes to compensate for
     the missing node. */</comment>

  <comment type="block">/* Delete the node origin record, too, if asked to do so and our
     format supports it. */</comment>
  <if>if <condition>(<expr><name>origin_also</name> &amp;&amp; (<name><name>bfd</name>-&gt;<name>format</name></name> &gt;= <name>SVN_FS_BASE__MIN_NODE_ORIGINS_FORMAT</name>)</expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__delete_node_origin</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><call><name>svn_fs_base__id_node_id</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>,
                                             <argument><expr><name>trail</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <return>return <expr><call><name>svn_fs_bdb__delete_nodes_entry</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>trail</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
</unit>
