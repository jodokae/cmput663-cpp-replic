<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_fs_base/lock.c"><comment type="block">/* lock.c :  functions for manipulating filesystem locks.
 *
 * ====================================================================
 * Copyright (c) 2000-2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_uuid.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"err.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bdb/locks-table.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bdb/lock-tokens-table.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libsvn_fs/fs-loader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_fs_util.h"</cpp:file></cpp:include>


<comment type="block">/* Add LOCK and its associated LOCK_TOKEN (associated with PATH) as
   part of TRAIL. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>add_lock_and_token</name><parameter_list>(<param><decl><type><name>svn_lock_t</name> *</type><name>lock</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lock_token</name></decl></param>,
                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                   <param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__lock_add</name><argument_list>(<argument><expr><name><name>trail</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name>lock_token</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>,
                               <argument><expr><name>trail</name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__lock_token_add</name><argument_list>(<argument><expr><name><name>trail</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>lock_token</name></expr></argument>,
                                     <argument><expr><name>trail</name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Delete LOCK_TOKEN and its corresponding lock (associated with PATH,
   whose KIND is supplied), as part of TRAIL. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>delete_lock_and_token</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lock_token</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                      <param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__lock_delete</name><argument_list>(<argument><expr><name><name>trail</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name>lock_token</name></expr></argument>,
                                  <argument><expr><name>trail</name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__lock_token_delete</name><argument_list>(<argument><expr><name><name>trail</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
                                        <argument><expr><name>trail</name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<struct>struct <name>lock_args</name>
<block>{
  <decl_stmt><decl><type><name>svn_lock_t</name> **</type><name>lock_p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>token</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>comment</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>is_dav_comment</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>steal_lock</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_time_t</name></type> <name>expiration_date</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>current_rev</name></decl>;</decl_stmt>
}</block>;</struct>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>txn_body_lock</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>lock_args</name> *</type><name>args</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name> <init>= <expr><name>svn_node_file</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_lock_t</name> *</type><name>existing_lock</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fs_username</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_lock_t</name> *</type><name>lock</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__get_path_kind</name><argument_list>(<argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name><name>args</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>trail</name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Until we implement directory locks someday, we only allow locks
     on files or non-existent paths. */</comment>
  <if>if <condition>(<expr><name>kind</name> == <name>svn_node_dir</name></expr>)</condition><then>
    <return>return <expr><call><name>SVN_FS__ERR_NOT_FILE</name><argument_list>(<argument><expr><name><name>trail</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name><name>args</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <comment type="block">/* While our locking implementation easily supports the locking of
     nonexistent paths, we deliberately choose not to allow such madness. */</comment>
  <if>if <condition>(<expr><name>kind</name> == <name>svn_node_none</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_FS_NOT_FOUND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr>"Path '%s' doesn't exist in HEAD revision"</expr></argument>,
                             <argument><expr><name><name>args</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <comment type="block">/* There better be a username attached to the fs. */</comment>
  <if>if <condition>(<expr>!<name><name>trail</name>-&gt;<name>fs</name>-&gt;<name>access_ctx</name></name> || !<name><name>trail</name>-&gt;<name>fs</name>-&gt;<name>access_ctx</name>-&gt;<name>username</name></name></expr>)</condition><then>
    <return>return <expr><call><name>SVN_FS__ERR_NO_USER</name><argument_list>(<argument><expr><name><name>trail</name>-&gt;<name>fs</name></name></expr></argument>)</argument_list></call></expr>;</return></then>
  <else>else
    <expr_stmt><expr><name>fs_username</name> = <name><name>trail</name>-&gt;<name>fs</name>-&gt;<name>access_ctx</name>-&gt;<name>username</name></name></expr>;</expr_stmt></else></if> <comment type="block">/* for convenience */</comment>

  <comment type="block">/* Is the caller attempting to lock an out-of-date working file? */</comment>
  <if>if <condition>(<expr><call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name><name>args</name>-&gt;<name>current_rev</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>created_rev</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__get_path_created_rev</name><argument_list>(<argument><expr>&amp;<name>created_rev</name></expr></argument>, <argument><expr><name><name>args</name>-&gt;<name>path</name></name></expr></argument>,
                                                <argument><expr><name>trail</name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* SVN_INVALID_REVNUM means the path doesn't exist.  So
         apparently somebody is trying to lock something in their
         working copy, but somebody else has deleted the thing
         from HEAD.  That counts as being 'out of date'. */</comment>
      <if>if <condition>(<expr>! <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>created_rev</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_FS_OUT_OF_DATE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                 <argument><expr>"Path '%s' doesn't exist in HEAD revision"</expr></argument>,
                                 <argument><expr><name><name>args</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>

      <if>if <condition>(<expr><name><name>args</name>-&gt;<name>current_rev</name></name> &lt; <name>created_rev</name></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_FS_OUT_OF_DATE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                 <argument><expr>"Lock failed: newer version of '%s' exists"</expr></argument>,
                                 <argument><expr><name><name>args</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
    }</block></then></if>

  <comment type="block">/* If the caller provided a TOKEN, we *really* need to see
     if a lock already exists with that token, and if so, verify that
     the lock's path matches PATH.  Otherwise we run the risk of
     breaking the 1-to-1 mapping of lock tokens to locked paths. */</comment>
  <if>if <condition>(<expr><name><name>args</name>-&gt;<name>token</name></name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_lock_t</name> *</type><name>lock_from_token</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><call><name>svn_fs_bdb__lock_get</name><argument_list>(<argument><expr>&amp;<name>lock_from_token</name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>fs</name></name></expr></argument>,
                                              <argument><expr><name><name>args</name>-&gt;<name>token</name></name></expr></argument>, <argument><expr><name>trail</name></expr></argument>,
                                              <argument><expr><name><name>trail</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>err</name> &amp;&amp; ((<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_LOCK_EXPIRED</name>)
                  || (<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_BAD_LOCK_TOKEN</name>))</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else
        <block>{
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>lock_from_token</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name><name>args</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
            <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_FS_BAD_LOCK_TOKEN</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                    <argument><expr>"Lock failed: token refers to existing "
                                    "lock with non-matching path."</expr></argument>)</argument_list></call></expr>;</return></then></if>
        }</block></else></if>
    }</block></then></if>

  <comment type="block">/* Is the path already locked?

     Note that this next function call will automatically ignore any
     errors about {the path not existing as a key, the path's token
     not existing as a key, the lock just having been expired}.  And
     that's totally fine.  Any of these three errors are perfectly
     acceptable to ignore; it means that the path is now free and
     clear for locking, because the bdb funcs just cleared out both
     of the tables for us.   */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__get_lock_helper</name><argument_list>(<argument><expr>&amp;<name>existing_lock</name></expr></argument>, <argument><expr><name><name>args</name>-&gt;<name>path</name></name></expr></argument>,
                                       <argument><expr><name>trail</name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>existing_lock</name></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr>! <name><name>args</name>-&gt;<name>steal_lock</name></name></expr>)</condition><then>
        <block>{
          <comment type="block">/* Sorry, the path is already locked. */</comment>
          <return>return <expr><call><name>SVN_FS__ERR_PATH_ALREADY_LOCKED</name><argument_list>(<argument><expr><name><name>trail</name>-&gt;<name>fs</name></name></expr></argument>,
                                                      <argument><expr><name>existing_lock</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then>
      <else>else
        <block>{
          <comment type="block">/* ARGS-&gt;steal_lock is set, so fs_username is "stealing" the
             lock from lock-&gt;owner.  Destroy the existing lock. */</comment>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>delete_lock_and_token</name><argument_list>(<argument><expr><name><name>existing_lock</name>-&gt;<name>token</name></name></expr></argument>,
                                        <argument><expr><name><name>existing_lock</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>trail</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then></if>

  <comment type="block">/* Create a new lock, and add it to the tables. */</comment>
  <expr_stmt><expr><name>lock</name> = <call><name>svn_lock_create</name><argument_list>(<argument><expr><name><name>trail</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name><name>args</name>-&gt;<name>token</name></name></expr>)</condition><then>
    <expr_stmt><expr><name><name>lock</name>-&gt;<name>token</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>trail</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>args</name>-&gt;<name>token</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__generate_lock_token</name><argument_list>(<argument><expr>&amp;(<name><name>lock</name>-&gt;<name>token</name></name>)</expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>fs</name></name></expr></argument>,
                                             <argument><expr><name><name>trail</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
  <expr_stmt><expr><name><name>lock</name>-&gt;<name>path</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>trail</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>args</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lock</name>-&gt;<name>owner</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>trail</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>fs</name>-&gt;<name>access_ctx</name>-&gt;<name>username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lock</name>-&gt;<name>comment</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>trail</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>args</name>-&gt;<name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lock</name>-&gt;<name>is_dav_comment</name></name> = <name><name>args</name>-&gt;<name>is_dav_comment</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lock</name>-&gt;<name>creation_date</name></name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lock</name>-&gt;<name>expiration_date</name></name> = <name><name>args</name>-&gt;<name>expiration_date</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>add_lock_and_token</name><argument_list>(<argument><expr><name>lock</name></expr></argument>, <argument><expr><name><name>lock</name>-&gt;<name>token</name></name></expr></argument>, <argument><expr><name><name>args</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>trail</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*(<name><name>args</name>-&gt;<name>lock_p</name></name>) = <name>lock</name></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>



<function><type><name>svn_error_t</name> *</type>
<name>svn_fs_base__lock</name><parameter_list>(<param><decl><type><name>svn_lock_t</name> **</type><name>lock</name></decl></param>,
                  <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>token</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>comment</name></decl></param>,
                  <param><decl><type><name>svn_boolean_t</name></type> <name>is_dav_comment</name></decl></param>,
                  <param><decl><type><name>apr_time_t</name></type> <name>expiration_date</name></decl></param>,
                  <param><decl><type><name>svn_revnum_t</name></type> <name>current_rev</name></decl></param>,
                  <param><decl><type><name>svn_boolean_t</name></type> <name>steal_lock</name></decl></param>,
                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>lock_args</name></type> <name>args</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs__check_fs</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>args</name>.<name>lock_p</name></name> = <name>lock</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>args</name>.<name>path</name></name> = <call><name>svn_fs__canonicalize_abspath</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>args</name>.<name>token</name></name> = <name>token</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>args</name>.<name>comment</name></name> = <name>comment</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>args</name>.<name>is_dav_comment</name></name> = <name>is_dav_comment</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>args</name>.<name>steal_lock</name></name> = <name>steal_lock</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>args</name>.<name>expiration_date</name></name> = <name>expiration_date</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>args</name>.<name>current_rev</name></name> = <name>current_rev</name></expr>;</expr_stmt>

  <return>return <expr><call><name>svn_fs_base__retry_txn</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>txn_body_lock</name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>

}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_fs_base__generate_lock_token</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>token</name></decl></param>,
                                 <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <comment type="block">/* Notice that 'fs' is currently unused.  But perhaps someday, we'll
     want to use the fs UUID + some incremented number?  For now, we
     generate a URI that matches the DAV RFC.  We could change this to
     some other URI scheme someday, if we wish. */</comment>
  <expr_stmt><expr>*<name>token</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"opaquelocktoken:"</expr></argument>,
                       <argument><expr><call><name>svn_uuid_generate</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<struct>struct <name>unlock_args</name>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>token</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>break_lock</name></decl>;</decl_stmt>
}</block>;</struct>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>txn_body_unlock</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>unlock_args</name> *</type><name>args</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lock_token</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_lock_t</name> *</type><name>lock</name></decl>;</decl_stmt>

  <comment type="block">/* This could return SVN_ERR_FS_BAD_LOCK_TOKEN or SVN_ERR_FS_LOCK_EXPIRED. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__lock_token_get</name><argument_list>(<argument><expr>&amp;<name>lock_token</name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name><name>args</name>-&gt;<name>path</name></name></expr></argument>,
                                     <argument><expr><name>trail</name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If not breaking the lock, we need to do some more checking. */</comment>
  <if>if <condition>(<expr>!<name><name>args</name>-&gt;<name>break_lock</name></name></expr>)</condition><then>
    <block>{
      <comment type="block">/* Sanity check: The lock token must exist, and must match. */</comment>
      <if>if <condition>(<expr><name><name>args</name>-&gt;<name>token</name></name> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><call><name>svn_fs_base__err_no_lock_token</name><argument_list>(<argument><expr><name><name>trail</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name><name>args</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>;</return></then>
      <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>lock_token</name></expr></argument>, <argument><expr><name><name>args</name>-&gt;<name>token</name></name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
        <return>return <expr><call><name>SVN_FS__ERR_NO_SUCH_LOCK</name><argument_list>(<argument><expr><name><name>trail</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name><name>args</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if></else></if>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__lock_get</name><argument_list>(<argument><expr>&amp;<name>lock</name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name>lock_token</name></expr></argument>,
                                   <argument><expr><name>trail</name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* There better be a username attached to the fs. */</comment>
      <if>if <condition>(<expr>!<name><name>trail</name>-&gt;<name>fs</name>-&gt;<name>access_ctx</name></name> || !<name><name>trail</name>-&gt;<name>fs</name>-&gt;<name>access_ctx</name>-&gt;<name>username</name></name></expr>)</condition><then>
        <return>return <expr><call><name>SVN_FS__ERR_NO_USER</name><argument_list>(<argument><expr><name><name>trail</name>-&gt;<name>fs</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>

      <comment type="block">/* And that username better be the same as the lock's owner. */</comment>
      <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>trail</name>-&gt;<name>fs</name>-&gt;<name>access_ctx</name>-&gt;<name>username</name></name></expr></argument>, <argument><expr><name><name>lock</name>-&gt;<name>owner</name></name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
        <return>return <expr><call><name>SVN_FS__ERR_LOCK_OWNER_MISMATCH</name>
          <argument_list>(<argument><expr><name><name>trail</name>-&gt;<name>fs</name></name></expr></argument>,
           <argument><expr><name><name>trail</name>-&gt;<name>fs</name>-&gt;<name>access_ctx</name>-&gt;<name>username</name></name></expr></argument>,
           <argument><expr><name><name>lock</name>-&gt;<name>owner</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
    }</block></then></if>

  <comment type="block">/* Remove a row from each of the locking tables. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>delete_lock_and_token</name><argument_list>(<argument><expr><name>lock_token</name></expr></argument>, <argument><expr><name><name>args</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>trail</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_fs_base__unlock</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>token</name></decl></param>,
                    <param><decl><type><name>svn_boolean_t</name></type> <name>break_lock</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>unlock_args</name></type> <name>args</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs__check_fs</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>args</name>.<name>path</name></name> = <call><name>svn_fs__canonicalize_abspath</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>args</name>.<name>token</name></name> = <name>token</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>args</name>.<name>break_lock</name></name> = <name>break_lock</name></expr>;</expr_stmt>
  <return>return <expr><call><name>svn_fs_base__retry_txn</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>txn_body_unlock</name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_fs_base__get_lock_helper</name><parameter_list>(<param><decl><type><name>svn_lock_t</name> **</type><name>lock_p</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                             <param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lock_token</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>err</name> = <call><name>svn_fs_bdb__lock_token_get</name><argument_list>(<argument><expr>&amp;<name>lock_token</name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
                                   <argument><expr><name>trail</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* We've deliberately decided that this function doesn't tell the
     caller *why* the lock is unavailable.  */</comment>
  <if>if <condition>(<expr><name>err</name> &amp;&amp; ((<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_NO_SUCH_LOCK</name>)
              || (<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_LOCK_EXPIRED</name>)
              || (<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_BAD_LOCK_TOKEN</name>))</expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr>*<name>lock_p</name> = <name>NULL</name></expr>;</expr_stmt>
      <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
    }</block></then>
  <else>else
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

  <comment type="block">/* Same situation here.  */</comment>
  <expr_stmt><expr><name>err</name> = <call><name>svn_fs_bdb__lock_get</name><argument_list>(<argument><expr><name>lock_p</name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name>lock_token</name></expr></argument>, <argument><expr><name>trail</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>err</name> &amp;&amp; ((<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_LOCK_EXPIRED</name>)
              || (<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_BAD_LOCK_TOKEN</name>))</expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr>*<name>lock_p</name> = <name>NULL</name></expr>;</expr_stmt>
      <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
    }</block></then>
  <else>else
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

  <return>return <expr><name>err</name></expr>;</return>
}</block></function>


<struct>struct <name>lock_token_get_args</name>
<block>{
  <decl_stmt><decl><type><name>svn_lock_t</name> **</type><name>lock_p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
}</block>;</struct>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>txn_body_get_lock</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>lock_token_get_args</name> *</type><name>args</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>svn_fs_base__get_lock_helper</name><argument_list>(<argument><expr><name><name>args</name>-&gt;<name>lock_p</name></name></expr></argument>, <argument><expr><name><name>args</name>-&gt;<name>path</name></name></expr></argument>,
                                      <argument><expr><name>trail</name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_fs_base__get_lock</name><parameter_list>(<param><decl><type><name>svn_lock_t</name> **</type><name>lock</name></decl></param>,
                      <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>lock_token_get_args</name></type> <name>args</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs__check_fs</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>args</name>.<name>path</name></name> = <call><name>svn_fs__canonicalize_abspath</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>args</name>.<name>lock_p</name></name> = <name>lock</name></expr>;</expr_stmt>
  <return>return <expr><call><name>svn_fs_base__retry_txn</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>txn_body_get_lock</name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<struct>struct <name>locks_get_args</name>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_get_locks_callback_t</name></type> <name>get_locks_func</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>get_locks_baton</name></decl>;</decl_stmt>
}</block>;</struct>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>txn_body_get_locks</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>locks_get_args</name> *</type><name>args</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>svn_fs_bdb__locks_get</name><argument_list>(<argument><expr><name><name>trail</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name><name>args</name>-&gt;<name>path</name></name></expr></argument>,
                               <argument><expr><name><name>args</name>-&gt;<name>get_locks_func</name></name></expr></argument>, <argument><expr><name><name>args</name>-&gt;<name>get_locks_baton</name></name></expr></argument>,
                               <argument><expr><name>trail</name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_fs_base__get_locks</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                       <param><decl><type><name>svn_fs_get_locks_callback_t</name></type> <name>get_locks_func</name></decl></param>,
                       <param><decl><type><name>void</name> *</type><name>get_locks_baton</name></decl></param>,
                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>locks_get_args</name></type> <name>args</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs__check_fs</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>args</name>.<name>path</name></name> = <call><name>svn_fs__canonicalize_abspath</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>args</name>.<name>get_locks_func</name></name> = <name>get_locks_func</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>args</name>.<name>get_locks_baton</name></name> = <name>get_locks_baton</name></expr>;</expr_stmt>
  <return>return <expr><call><name>svn_fs_base__retry_txn</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>txn_body_get_locks</name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>



<comment type="block">/* Utility function:  verify that a lock can be used.

   If no username is attached to the FS, return SVN_ERR_FS_NO_USER.

   If the FS username doesn't match LOCK's owner, return
   SVN_ERR_FS_LOCK_OWNER_MISMATCH.

   If FS hasn't been supplied with a matching lock-token for LOCK,
   return SVN_ERR_FS_BAD_LOCK_TOKEN.

   Otherwise return SVN_NO_ERROR.
 */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>verify_lock</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
            <param><decl><type><name>svn_lock_t</name> *</type><name>lock</name></decl></param>,
            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>(! <name><name>fs</name>-&gt;<name>access_ctx</name></name>) || (! <name><name>fs</name>-&gt;<name>access_ctx</name>-&gt;<name>username</name></name>)</expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name>
      <argument_list>(<argument><expr><name>SVN_ERR_FS_NO_USER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
       <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Cannot verify lock on path '%s'; no username available"</expr></argument>)</argument_list></call></expr></argument>,
       <argument><expr><name><name>lock</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>;</return></then>

  <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>fs</name>-&gt;<name>access_ctx</name>-&gt;<name>username</name></name></expr></argument>, <argument><expr><name><name>lock</name>-&gt;<name>owner</name></name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name>
      <argument_list>(<argument><expr><name>SVN_ERR_FS_LOCK_OWNER_MISMATCH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
       <argument><expr><call><name>_</name><argument_list>(<argument><expr>"User %s does not own lock on path '%s' (currently locked by %s)"</expr></argument>)</argument_list></call></expr></argument>,
       <argument><expr><name><name>fs</name>-&gt;<name>access_ctx</name>-&gt;<name>username</name></name></expr></argument>, <argument><expr><name><name>lock</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name><name>lock</name>-&gt;<name>owner</name></name></expr></argument>)</argument_list></call></expr>;</return></then>

  <else>else <if>if <condition>(<expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>fs</name>-&gt;<name>access_ctx</name>-&gt;<name>lock_tokens</name></name></expr></argument>, <argument><expr><name><name>lock</name>-&gt;<name>token</name></name></expr></argument>,
                        <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call> == <name>NULL</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name>
      <argument_list>(<argument><expr><name>SVN_ERR_FS_BAD_LOCK_TOKEN</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
       <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Cannot verify lock on path '%s'; no matching lock-token available"</expr></argument>)</argument_list></call></expr></argument>,
       <argument><expr><name><name>lock</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if></else></if></else></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* This implements the svn_fs_get_locks_callback_t interface, where
   BATON is just an svn_fs_t object. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>get_locks_callback</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                   <param><decl><type><name>svn_lock_t</name> *</type><name>lock</name></decl></param>,
                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>verify_lock</name><argument_list>(<argument><expr><name>baton</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<comment type="block">/* The main routine for lock enforcement, used throughout libsvn_fs_base. */</comment>
<function><type><name>svn_error_t</name> *</type>
<name>svn_fs_base__allow_locked_operation</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                    <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                                    <param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>,
                                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>recurse</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* Discover all locks at or below the path. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__locks_get</name><argument_list>(<argument><expr><name><name>trail</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>get_locks_callback</name></expr></argument>,
                                    <argument><expr><name><name>trail</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name>trail</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <decl_stmt><decl><type><name>svn_lock_t</name> *</type><name>lock</name></decl>;</decl_stmt>

      <comment type="block">/* Discover any lock attached to the path. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__get_lock_helper</name><argument_list>(<argument><expr>&amp;<name>lock</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>trail</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>lock</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>verify_lock</name><argument_list>(<argument><expr><name><name>trail</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></else></if>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
