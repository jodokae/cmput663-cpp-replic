<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_fs_base/fs.c"><comment type="block">/* fs.c --- creating, opening and closing filesystems
 *
 * ====================================================================
 * Copyright (c) 2000-2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APU_WANT_DB</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apu_want.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_general.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_file_io.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_utf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_delta.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"err.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dag.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"revs-txns.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"uuid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"id.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bdb/bdb-err.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bdb/bdb_compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bdb/env.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bdb/nodes-table.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bdb/rev-table.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bdb/txn-table.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bdb/copies-table.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bdb/changes-table.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bdb/reps-table.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bdb/strings-table.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bdb/uuids-table.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bdb/locks-table.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bdb/lock-tokens-table.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bdb/node-origins-table.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libsvn_fs/fs-loader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_fs_util.h"</cpp:file></cpp:include>

<escape char="0xc"/>
<comment type="block">/* Checking for return values, and reporting errors.  */</comment>

<comment type="block">/* Check that we're using the right Berkeley DB version. */</comment>
<comment type="block">/* FIXME: This check should be abstracted into the DB back-end layer. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>check_bdb_version</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>major</name></decl>, <decl><type ref="prev"/><name>minor</name></decl>, <decl><type ref="prev"/><name>patch</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>db_version</name><argument_list>(<argument><expr>&amp;<name>major</name></expr></argument>, <argument><expr>&amp;<name>minor</name></expr></argument>, <argument><expr>&amp;<name>patch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* First, check that we're using a reasonably correct of Berkeley DB. */</comment>
  <if>if <condition>(<expr>(<name>major</name> &lt; <name>SVN_FS_WANT_DB_MAJOR</name>)
      || (<name>major</name> == <name>SVN_FS_WANT_DB_MAJOR</name> &amp;&amp; <name>minor</name> &lt; <name>SVN_FS_WANT_DB_MINOR</name>)
      || (<name>major</name> == <name>SVN_FS_WANT_DB_MAJOR</name> &amp;&amp; <name>minor</name> == <name>SVN_FS_WANT_DB_MINOR</name>
          &amp;&amp; <name>patch</name> &lt; <name>SVN_FS_WANT_DB_PATCH</name>)</expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr>0</expr></argument>,
                             <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Bad database version: got %d.%d.%d,"
                               " should be at least %d.%d.%d"</expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><name>major</name></expr></argument>, <argument><expr><name>minor</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>,
                             <argument><expr><name>SVN_FS_WANT_DB_MAJOR</name></expr></argument>,
                             <argument><expr><name>SVN_FS_WANT_DB_MINOR</name></expr></argument>,
                             <argument><expr><name>SVN_FS_WANT_DB_PATCH</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <comment type="block">/* Now, check that the version we're running against is the same as
     the one we compiled with. */</comment>
  <if>if <condition>(<expr><name>major</name> != <name>DB_VERSION_MAJOR</name> || <name>minor</name> != <name>DB_VERSION_MINOR</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr>0</expr></argument>,
                             <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Bad database version:"
                               " compiled with %d.%d.%d,"
                               " running against %d.%d.%d"</expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><name>DB_VERSION_MAJOR</name></expr></argument>,
                             <argument><expr><name>DB_VERSION_MINOR</name></expr></argument>,
                             <argument><expr><name>DB_VERSION_PATCH</name></expr></argument>,
                             <argument><expr><name>major</name></expr></argument>, <argument><expr><name>minor</name></expr></argument>, <argument><expr><name>patch</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<escape char="0xc"/>
<comment type="block">/* Cleanup functions.  */</comment>

<comment type="block">/* Close a database in the filesystem FS.
   DB_PTR is a pointer to the DB pointer in *FS to close.
   NAME is the name of the database, for use in error messages.  */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>cleanup_fs_db</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>, <param><decl><type><name>DB</name> **</type><name>db_ptr</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list>
<block>{
  <comment type="block">/* If the BDB environment is panicked, don't do anything, since
     attempting to close the database will fail anyway. */</comment>
  <decl_stmt><decl><type><name>base_fs_data_t</name> *</type><name>bfd</name> <init>= <expr><name><name>fs</name>-&gt;<name>fsap_data</name></name></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>*<name>db_ptr</name> &amp;&amp; !<call><name>svn_fs_bdb__get_panic</name><argument_list>(<argument><expr><name><name>bfd</name>-&gt;<name>bdb</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>DB</name> *</type><name>db</name> <init>= <expr>*<name>db_ptr</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> *</type><name>msg</name> <init>= <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>fs</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"closing '%s' database"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>db_err</name></decl>;</decl_stmt>

      <expr_stmt><expr>*<name>db_ptr</name> = 0</expr>;</expr_stmt>
      <expr_stmt><expr><name>db_err</name> = <call><name><name>db</name>-&gt;<name>close</name></name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>db_err</name> == <name>DB_RUNRECOVERY</name></expr>)</condition><then>
        <block>{
          <comment type="block">/* We can ignore DB_RUNRECOVERY errors from DB-&gt;close, but
             must set the panic flag in the environment baton.  The
             error will be propagated appropriately from
             svn_fs_bdb__close. */</comment>
          <expr_stmt><expr><call><name>svn_fs_bdb__set_panic</name><argument_list>(<argument><expr><name><name>bfd</name>-&gt;<name>bdb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>db_err</name> = 0</expr>;</expr_stmt>
        }</block></then></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SVN_BDB_HAS_DB_INCOMPLETE</name></expr></cpp:if>
      <comment type="block">/* We can ignore DB_INCOMPLETE on db-&gt;close and db-&gt;sync; it
       * just means someone else was using the db at the same time
       * we were.  See the Berkeley documentation at:
       * http://www.sleepycat.com/docs/ref/program/errorret.html#DB_INCOMPLETE
       * http://www.sleepycat.com/docs/api_c/db_close.html
       */</comment>
      <if>if <condition>(<expr><name>db_err</name> == <name>DB_INCOMPLETE</name></expr>)</condition><then>
        <expr_stmt><expr><name>db_err</name> = 0</expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SVN_BDB_HAS_DB_INCOMPLETE */</comment>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>BDB_WRAP</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>db_err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Close whatever Berkeley DB resources are allocated to FS.  */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>cleanup_fs</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>base_fs_data_t</name> *</type><name>bfd</name> <init>= <expr><name><name>fs</name>-&gt;<name>fsap_data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bdb_env_baton_t</name> *</type><name>bdb</name> <init>= <expr>(<name>bfd</name> ? <name><name>bfd</name>-&gt;<name>bdb</name></name> : <name>NULL</name>)</expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr>!<name>bdb</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* Close the databases.  */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>cleanup_fs_db</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>&amp;<name><name>bfd</name>-&gt;<name>nodes</name></name></expr></argument>, <argument><expr>"nodes"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>cleanup_fs_db</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>&amp;<name><name>bfd</name>-&gt;<name>revisions</name></name></expr></argument>, <argument><expr>"revisions"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>cleanup_fs_db</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>&amp;<name><name>bfd</name>-&gt;<name>transactions</name></name></expr></argument>, <argument><expr>"transactions"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>cleanup_fs_db</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>&amp;<name><name>bfd</name>-&gt;<name>copies</name></name></expr></argument>, <argument><expr>"copies"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>cleanup_fs_db</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>&amp;<name><name>bfd</name>-&gt;<name>changes</name></name></expr></argument>, <argument><expr>"changes"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>cleanup_fs_db</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>&amp;<name><name>bfd</name>-&gt;<name>representations</name></name></expr></argument>, <argument><expr>"representations"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>cleanup_fs_db</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>&amp;<name><name>bfd</name>-&gt;<name>strings</name></name></expr></argument>, <argument><expr>"strings"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>cleanup_fs_db</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>&amp;<name><name>bfd</name>-&gt;<name>uuids</name></name></expr></argument>, <argument><expr>"uuids"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>cleanup_fs_db</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>&amp;<name><name>bfd</name>-&gt;<name>locks</name></name></expr></argument>, <argument><expr>"locks"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>cleanup_fs_db</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>&amp;<name><name>bfd</name>-&gt;<name>lock_tokens</name></name></expr></argument>, <argument><expr>"lock-tokens"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>cleanup_fs_db</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>&amp;<name><name>bfd</name>-&gt;<name>node_origins</name></name></expr></argument>, <argument><expr>"node-origins"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Finally, close the environment.  */</comment>
  <expr_stmt><expr><name><name>bfd</name>-&gt;<name>bdb</name></name> = 0</expr>;</expr_stmt>
  <block>{
    <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><call><name>svn_fs_bdb__close</name><argument_list>(<argument><expr><name>bdb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
      <return>return <expr><call><name>svn_error_createf</name>
        <argument_list>(<argument><expr><name><name>err</name>-&gt;<name>apr_err</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>,
         <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Berkeley DB error for filesystem '%s'"
           " while closing environment:\n"</expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><name><name>fs</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
  }</block>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>   <comment type="block">/* Set to 1 for instrumenting. */</comment>
static void print_fs_stats(svn_fs_t *fs)
{
  base_fs_data_t *bfd = fs-&gt;fsap_data;
  DB_TXN_STAT *t;
  DB_LOCK_STAT *l;
  int db_err;

  <comment type="block">/* Print transaction statistics for this DB env. */</comment>
  if ((db_err = bfd-&gt;bdb-&gt;env-&gt;txn_stat(bfd-&gt;bdb-&gt;env, &amp;t, 0)) != 0)
    fprintf(stderr, "Error running bfd-&gt;bdb-&gt;env-&gt;txn_stat(): %s",
            db_strerror(db_err));
  else
    {
      printf("*** DB transaction stats, right before closing env:\n");
      printf("   Number of transactions currently active: %d\n",
             t-&gt;st_nactive);
      printf("   Max number of active transactions at any one time: %d\n",
             t-&gt;st_maxnactive);
      printf("   Number of transactions that have begun: %d\n",
             t-&gt;st_nbegins);
      printf("   Number of transactions that have aborted: %d\n",
             t-&gt;st_naborts);
      printf("   Number of transactions that have committed: %d\n",
             t-&gt;st_ncommits);
      printf("   Number of times a thread was forced to wait: %d\n",
             t-&gt;st_region_wait);
      printf("   Number of times a thread didn't need to wait: %d\n",
             t-&gt;st_region_nowait);
      printf("*** End DB transaction stats.\n\n");
    }

  <comment type="block">/* Print transaction statistics for this DB env. */</comment>
  if ((db_err = bfd-&gt;bdb-&gt;env-&gt;lock_stat(bfd-&gt;bdb-&gt;env, &amp;l, 0)) != 0)
    fprintf(stderr, "Error running bfd-&gt;bdb-&gt;env-&gt;lock_stat(): %s",
            db_strerror(db_err));
  else
    {
      printf("*** DB lock stats, right before closing env:\n");
      printf("   The number of current locks: %d\n",
             l-&gt;st_nlocks);
      printf("   Max number of locks at any one time: %d\n",
             l-&gt;st_maxnlocks);
      printf("   Number of current lockers: %d\n",
             l-&gt;st_nlockers);
      printf("   Max number of lockers at any one time: %d\n",
             l-&gt;st_maxnlockers);
      printf("   Number of current objects: %d\n",
             l-&gt;st_nobjects);
      printf("   Max number of objects at any one time: %d\n",
             l-&gt;st_maxnobjects);
      printf("   Total number of locks requested: %d\n",
             l-&gt;st_nrequests);
      printf("   Total number of locks released: %d\n",
             l-&gt;st_nreleases);
      printf("   Total number of lock reqs failed because "
             "DB_LOCK_NOWAIT was set: %d\n", l-&gt;st_nnowaits);
      printf("   Total number of locks not immediately available "
             "due to conflicts: %d\n", l-&gt;st_nconflicts);
      printf("   Number of deadlocks detected: %d\n", l-&gt;st_ndeadlocks);
      printf("   Number of times a thread waited before "
             "obtaining the region lock: %d\n", l-&gt;st_region_wait);
      printf("   Number of times a thread didn't have to wait: %d\n",
             l-&gt;st_region_nowait);
      printf("*** End DB lock stats.\n\n");
    }

}
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>print_fs_stats</name><parameter_list>(<param><type><name>fs</name></type></param>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* 0/1 */</comment>

<comment type="block">/* An APR pool cleanup function for a filesystem.  DATA must be a
   pointer to the filesystem to clean up.

   When the filesystem object's pool is freed, we want the resources
   held by Berkeley DB to go away, just like everything else.  So we
   register this cleanup function with the filesystem's pool, and let
   it take care of closing the databases, the environment, and any
   other DB objects we might be using.  APR calls this function before
   actually freeing the pool's memory.

   It's a pity that we can't return an svn_error_t object from an APR
   cleanup function.  For now, we return the rather generic
   SVN_ERR_FS_CLEANUP, and pass the real svn_error_t to the registered
   warning callback.  */</comment>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type>
<name>cleanup_fs_apr</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>print_fs_stats</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>err</name> = <call><name>cleanup_fs</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>! <name>err</name></expr>)</condition><then>
    <return>return <expr><name>APR_SUCCESS</name></expr>;</return></then></if>

  <comment type="block">/* Darn. An error during cleanup. Call the warning handler to
     try and do something "right" with this error. Note that
     the default will simply abort().  */</comment>
  <expr_stmt><expr><call>(*<name><name>fs</name>-&gt;<name>warning</name></name>)<argument_list>(<argument><expr><name><name>fs</name>-&gt;<name>warning_baton</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_ERR_FS_CLEANUP</name></expr>;</return>
}</block></function>

<escape char="0xc"/>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>base_bdb_set_errcall</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                     <param><function_decl><type><name>void</name></type> (*<name>db_errcall_fcn</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>errpfx</name></decl></param>, <param><decl><type><name>char</name> *</type><name>msg</name></decl></param>)</parameter_list></function_decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>base_fs_data_t</name> *</type><name>bfd</name> <init>= <expr><name><name>fs</name>-&gt;<name>fsap_data</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs__check_fs</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>bfd</name>-&gt;<name>bdb</name>-&gt;<name>error_info</name>-&gt;<name>user_callback</name></name> = <name>db_errcall_fcn</name></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<escape char="0xc"/>
<comment type="block">/* Write the DB_CONFIG file. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>bdb_write_config</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dbconfig_file_name</name> <init>=
    <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>fs</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>BDB_CONFIG_FILE</name></expr></argument>, <argument><expr><name><name>fs</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_file_t</name> *</type><name>dbconfig_file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>dbconfig_contents</name><index>[]</index></name> <init>=
    <expr>"# This is the configuration file for the Berkeley DB environment\n"
    "# used by your Subversion repository.\n"
    "# You must run 'svnadmin recover' whenever you modify this file,\n"
    "# for your changes to take effect.\n"
    "\n"
    "### Lock subsystem\n"
    "#\n"
    "# Make sure you read the documentation at:\n"
    "#\n"
    "#   http://www.oracle.com/technology/documentation/berkeley-db/db/ref/lock/max.html\n"
    "#\n"
    "# before tweaking these values.\n"
    "set_lk_max_locks   2000\n"
    "set_lk_max_lockers 2000\n"
    "set_lk_max_objects 2000\n"
    "\n"
    "### Log file subsystem\n"
    "#\n"
    "# Make sure you read the documentation at:\n"
    "#\n"
    "#   http://www.oracle.com/technology/documentation/berkeley-db/db/api_c/env_set_lg_bsize.html\n"
    "#   http://www.oracle.com/technology/documentation/berkeley-db/db/api_c/env_set_lg_max.html\n"
    "#   http://www.oracle.com/technology/documentation/berkeley-db/db/ref/log/limits.html\n"
    "#\n"
    "# Increase the size of the in-memory log buffer from the default\n"
    "# of 32 Kbytes to 256 Kbytes.  Decrease the log file size from\n"
    "# 10 Mbytes to 1 Mbyte.  This will help reduce the amount of disk\n"
    "# space required for hot backups.  The size of the log file must be\n"
    "# at least four times the size of the in-memory log buffer.\n"
    "#\n"
    "# Note: Decreasing the in-memory buffer size below 256 Kbytes\n"
    "# will hurt commit performance. For details, see this post from\n"
    "# Daniel Berlin &lt;dan@dberlin.org&gt;:\n"
    "#\n"
    "# http://subversion.tigris.org/servlets/ReadMsg?list=dev&amp;msgId=161960\n"
    "set_lg_bsize     262144\n"
    "set_lg_max      1048576\n"
    "#\n"
    "# If you see \"log region out of memory\" errors, bump lg_regionmax.\n"
    "# See http://www.oracle.com/technology/documentation/berkeley-db/db/ref/log/config.html\n"
    "# and http://svn.haxx.se/users/archive-2004-10/1001.shtml for more.\n"
    "set_lg_regionmax 131072\n"
    "#\n"
    <comment type="block">/* ### Configure this with "svnadmin create --bdb-cache-size" */</comment>
    "# The default cache size in BDB is only 256k. As explained in\n"
    "# http://svn.haxx.se/dev/archive-2004-12/0369.shtml, this is too\n"
    "# small for most applications. Bump this number if \"db_stat -m\"\n"
    "# shows too many cache misses.\n"
    "set_cachesize    0 1048576 1\n"</expr></init></decl>;</decl_stmt>

  <comment type="block">/* Run-time configurable options.
     Each option set consists of a minimum required BDB version, a
     config hash key, a header, an inactive form and an active
     form. We always write the header; then, depending on the
     run-time configuration and the BDB version we're compiling
     against, we write either the active or inactive form of the
     value. */</comment>
  <struct><specifier>static</specifier> <specifier>const</specifier> struct
  <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>bdb_major</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>bdb_minor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>config_key</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>header</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>inactive</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>active</name></decl>;</decl_stmt>
  }</block> <decl><name><name>dbconfig_options</name><index>[]</index></name> <init>= <expr><block>{
    <comment type="block">/* Controlled by "svnadmin create --bdb-txn-nosync" */</comment>
    <expr><block>{ <expr>4</expr>, <expr>0</expr>, <expr><name>SVN_FS_CONFIG_BDB_TXN_NOSYNC</name></expr>,
      <comment type="block">/* header */</comment>
      <expr>"#\n"
      "# Disable fsync of log files on transaction commit. Read the\n"
      "# documentation about DB_TXN_NOSYNC at:\n"
      "#\n"
      "#   http://www.oracle.com/technology/documentation/berkeley-db/db/ref/log/config.html\n"
      "#\n"
      "# [requires Berkeley DB 4.0]\n"</expr>,
      <comment type="block">/* inactive */</comment>
      <expr>"# set_flags DB_TXN_NOSYNC\n"</expr>,
      <comment type="block">/* active */</comment>
      <expr>"set_flags DB_TXN_NOSYNC\n"</expr> }</block></expr>,
    <comment type="block">/* Controlled by "svnadmin create --bdb-log-keep" */</comment>
    <expr><block>{ <expr>4</expr>, <expr>2</expr>, <expr><name>SVN_FS_CONFIG_BDB_LOG_AUTOREMOVE</name></expr>,
      <comment type="block">/* header */</comment>
      <expr>"#\n"
      "# Enable automatic removal of unused transaction log files.\n"
      "# Read the documentation about DB_LOG_AUTOREMOVE at:\n"
      "#\n"
      "#   http://www.oracle.com/technology/documentation/berkeley-db/db/ref/log/config.html\n"
      "#\n"
      "# [requires Berkeley DB 4.2]\n"</expr>,
      <comment type="block">/* inactive */</comment>
      <expr>"# set_flags DB_LOG_AUTOREMOVE\n"</expr>,
      <comment type="block">/* active */</comment>
      <expr>"set_flags DB_LOG_AUTOREMOVE\n"</expr> }</block></expr>,
  }</block></expr></init></decl>;</struct>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>dbconfig_options_length</name> <init>=
    <expr><sizeof>sizeof<argument_list>(<argument><expr><name>dbconfig_options</name></expr></argument>)</argument_list></sizeof>/<sizeof>sizeof<argument_list>(<argument><expr>*<name>dbconfig_options</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>


  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_open</name><argument_list>(<argument><expr>&amp;<name>dbconfig_file</name></expr></argument>, <argument><expr><name>dbconfig_file_name</name></expr></argument>,
                           <argument><expr><name>APR_WRITE</name> | <name>APR_CREATE</name></expr></argument>, <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>,
                           <argument><expr><name><name>fs</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_write_full</name><argument_list>(<argument><expr><name>dbconfig_file</name></expr></argument>, <argument><expr><name>dbconfig_contents</name></expr></argument>,
                                 <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dbconfig_contents</name></expr></argument>)</argument_list></sizeof> - 1</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                 <argument><expr><name><name>fs</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Write the variable DB_CONFIG flags. */</comment>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>dbconfig_options_length</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>void</name> *</type><name>value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>choice</name></decl>;</decl_stmt>

      <if>if <condition>(<expr><name><name>fs</name>-&gt;<name>config</name></name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>value</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>fs</name>-&gt;<name>config</name></name></expr></argument>,
                               <argument><expr><name><name>dbconfig_options</name><index>[<expr><name>i</name></expr>]</index></name>.<name>config_key</name></expr></argument>,
                               <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_write_full</name><argument_list>(<argument><expr><name>dbconfig_file</name></expr></argument>,
                                     <argument><expr><name><name>dbconfig_options</name><index>[<expr><name>i</name></expr>]</index></name>.<name>header</name></expr></argument>,
                                     <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>dbconfig_options</name><index>[<expr><name>i</name></expr>]</index></name>.<name>header</name></expr></argument>)</argument_list></call></expr></argument>,
                                     <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>fs</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr>((<name>DB_VERSION_MAJOR</name> == <name><name>dbconfig_options</name><index>[<expr><name>i</name></expr>]</index></name>.<name>bdb_major</name>
            &amp;&amp; <name>DB_VERSION_MINOR</name> &gt;= <name><name>dbconfig_options</name><index>[<expr><name>i</name></expr>]</index></name>.<name>bdb_minor</name>)
           || <name>DB_VERSION_MAJOR</name> &gt; <name><name>dbconfig_options</name><index>[<expr><name>i</name></expr>]</index></name>.<name>bdb_major</name>)
          &amp;&amp; <name>value</name> != <name>NULL</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>"0"</expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
        <expr_stmt><expr><name>choice</name> = <name><name>dbconfig_options</name><index>[<expr><name>i</name></expr>]</index></name>.<name>active</name></expr>;</expr_stmt></then>
      <else>else
        <expr_stmt><expr><name>choice</name> = <name><name>dbconfig_options</name><index>[<expr><name>i</name></expr>]</index></name>.<name>inactive</name></expr>;</expr_stmt></else></if>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_write_full</name><argument_list>(<argument><expr><name>dbconfig_file</name></expr></argument>, <argument><expr><name>choice</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>choice</name></expr></argument>)</argument_list></call></expr></argument>,
                                     <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>fs</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_close</name><argument_list>(<argument><expr><name>dbconfig_file</name></expr></argument>, <argument><expr><name><name>fs</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<escape char="0xc"/>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>base_serialized_init</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>common_pool</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <comment type="block">/* Nothing to do here. */</comment>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<escape char="0xc"/>
<comment type="block">/* Creating a new filesystem */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>fs_vtable_t</name></type> <name>fs_vtable</name> <init>= <expr><block>{
  <expr><name>svn_fs_base__youngest_rev</name></expr>,
  <expr><name>svn_fs_base__revision_prop</name></expr>,
  <expr><name>svn_fs_base__revision_proplist</name></expr>,
  <expr><name>svn_fs_base__change_rev_prop</name></expr>,
  <expr><name>svn_fs_base__get_uuid</name></expr>,
  <expr><name>svn_fs_base__set_uuid</name></expr>,
  <expr><name>svn_fs_base__revision_root</name></expr>,
  <expr><name>svn_fs_base__begin_txn</name></expr>,
  <expr><name>svn_fs_base__open_txn</name></expr>,
  <expr><name>svn_fs_base__purge_txn</name></expr>,
  <expr><name>svn_fs_base__list_transactions</name></expr>,
  <expr><name>svn_fs_base__deltify</name></expr>,
  <expr><name>svn_fs_base__lock</name></expr>,
  <expr><name>svn_fs_base__generate_lock_token</name></expr>,
  <expr><name>svn_fs_base__unlock</name></expr>,
  <expr><name>svn_fs_base__get_lock</name></expr>,
  <expr><name>svn_fs_base__get_locks</name></expr>,
  <expr><name>base_bdb_set_errcall</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Where the format number is stored. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORMAT_FILE</name></cpp:macro>   <cpp:value>"format"</cpp:value></cpp:define>

<comment type="block">/* Depending on CREATE, create or open the environment and databases
   for filesystem FS in PATH. Use POOL for temporary allocations. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>open_databases</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>, 
               <param><decl><type><name>svn_boolean_t</name></type> <name>create</name></decl></param>,
               <param><decl><type><name>int</name></type> <name>format</name></decl></param>,
               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, 
               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>base_fs_data_t</name> *</type><name>bfd</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs__check_fs</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>bfd</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>fs</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>bfd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fs</name>-&gt;<name>vtable</name></name> = &amp;<name>fs_vtable</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fs</name>-&gt;<name>fsap_data</name></name> = <name>bfd</name></expr>;</expr_stmt>

  <comment type="block">/* Initialize the fs's path. */</comment>
  <expr_stmt><expr><name><name>fs</name>-&gt;<name>path</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>fs</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>create</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>bdb_write_config</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <comment type="block">/* Create the Berkeley DB environment.  */</comment>
  <block>{
    <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><call><name>svn_fs_bdb__open</name><argument_list>(<argument><expr>&amp;(<name><name>bfd</name>-&gt;<name>bdb</name></name>)</expr></argument>, <argument><expr><name>path</name></expr></argument>,
                                        <argument><expr><name>SVN_BDB_STANDARD_ENV_FLAGS</name></expr></argument>,
                                        <argument><expr>0666</expr></argument>, <argument><expr><name><name>fs</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
      <block>{
        <if>if <condition>(<expr><name>create</name></expr>)</condition><then>
          <return>return <expr><call><name>svn_error_createf</name>
            <argument_list>(<argument><expr><name><name>err</name>-&gt;<name>apr_err</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>,
             <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Berkeley DB error for filesystem '%s'"
               " while creating environment:\n"</expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><name><name>fs</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>;</return></then>
        <else>else
          <return>return <expr><call><name>svn_error_createf</name>
            <argument_list>(<argument><expr><name><name>err</name>-&gt;<name>apr_err</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>,
             <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Berkeley DB error for filesystem '%s'"
               " while opening environment:\n"</expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><name><name>fs</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>;</return></else></if>
      }</block></then></if>
  }</block>

  <comment type="block">/* We must register the FS cleanup function *after* opening the
     environment, so that it's run before the environment baton
     cleanup. */</comment>
  <expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name><name>fs</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>cleanup_fs_apr</name></expr></argument>,
                            <argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <comment type="block">/* Create the databases in the environment.  */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>BDB_WRAP</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>(<name>create</name>
                        ? "creating 'nodes' table"
                        : "opening 'nodes' table")</expr></argument>,
                   <argument><expr><call><name>svn_fs_bdb__open_nodes_table</name><argument_list>(<argument><expr>&amp;<name><name>bfd</name>-&gt;<name>nodes</name></name></expr></argument>,
                                                <argument><expr><name><name>bfd</name>-&gt;<name>bdb</name>-&gt;<name>env</name></name></expr></argument>,
                                                <argument><expr><name>create</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>BDB_WRAP</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>(<name>create</name>
                        ? "creating 'revisions' table"
                        : "opening 'revisions' table")</expr></argument>,
                   <argument><expr><call><name>svn_fs_bdb__open_revisions_table</name><argument_list>(<argument><expr>&amp;<name><name>bfd</name>-&gt;<name>revisions</name></name></expr></argument>,
                                                    <argument><expr><name><name>bfd</name>-&gt;<name>bdb</name>-&gt;<name>env</name></name></expr></argument>,
                                                    <argument><expr><name>create</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>BDB_WRAP</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>(<name>create</name>
                        ? "creating 'transactions' table"
                        : "opening 'transactions' table")</expr></argument>,
                   <argument><expr><call><name>svn_fs_bdb__open_transactions_table</name><argument_list>(<argument><expr>&amp;<name><name>bfd</name>-&gt;<name>transactions</name></name></expr></argument>,
                                                       <argument><expr><name><name>bfd</name>-&gt;<name>bdb</name>-&gt;<name>env</name></name></expr></argument>,
                                                       <argument><expr><name>create</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>BDB_WRAP</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>(<name>create</name>
                        ? "creating 'copies' table"
                        : "opening 'copies' table")</expr></argument>,
                   <argument><expr><call><name>svn_fs_bdb__open_copies_table</name><argument_list>(<argument><expr>&amp;<name><name>bfd</name>-&gt;<name>copies</name></name></expr></argument>,
                                                 <argument><expr><name><name>bfd</name>-&gt;<name>bdb</name>-&gt;<name>env</name></name></expr></argument>,
                                                 <argument><expr><name>create</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>BDB_WRAP</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>(<name>create</name>
                        ? "creating 'changes' table"
                        : "opening 'changes' table")</expr></argument>,
                   <argument><expr><call><name>svn_fs_bdb__open_changes_table</name><argument_list>(<argument><expr>&amp;<name><name>bfd</name>-&gt;<name>changes</name></name></expr></argument>,
                                                  <argument><expr><name><name>bfd</name>-&gt;<name>bdb</name>-&gt;<name>env</name></name></expr></argument>,
                                                  <argument><expr><name>create</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>BDB_WRAP</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>(<name>create</name>
                        ? "creating 'representations' table"
                        : "opening 'representations' table")</expr></argument>,
                   <argument><expr><call><name>svn_fs_bdb__open_reps_table</name><argument_list>(<argument><expr>&amp;<name><name>bfd</name>-&gt;<name>representations</name></name></expr></argument>,
                                               <argument><expr><name><name>bfd</name>-&gt;<name>bdb</name>-&gt;<name>env</name></name></expr></argument>,
                                               <argument><expr><name>create</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>BDB_WRAP</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>(<name>create</name>
                        ? "creating 'strings' table"
                        : "opening 'strings' table")</expr></argument>,
                   <argument><expr><call><name>svn_fs_bdb__open_strings_table</name><argument_list>(<argument><expr>&amp;<name><name>bfd</name>-&gt;<name>strings</name></name></expr></argument>,
                                                  <argument><expr><name><name>bfd</name>-&gt;<name>bdb</name>-&gt;<name>env</name></name></expr></argument>,
                                                  <argument><expr><name>create</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>BDB_WRAP</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>(<name>create</name>
                        ? "creating 'uuids' table"
                        : "opening 'uuids' table")</expr></argument>,
                   <argument><expr><call><name>svn_fs_bdb__open_uuids_table</name><argument_list>(<argument><expr>&amp;<name><name>bfd</name>-&gt;<name>uuids</name></name></expr></argument>,
                                                <argument><expr><name><name>bfd</name>-&gt;<name>bdb</name>-&gt;<name>env</name></name></expr></argument>,
                                                <argument><expr><name>create</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>BDB_WRAP</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>(<name>create</name>
                        ? "creating 'locks' table"
                        : "opening 'locks' table")</expr></argument>,
                   <argument><expr><call><name>svn_fs_bdb__open_locks_table</name><argument_list>(<argument><expr>&amp;<name><name>bfd</name>-&gt;<name>locks</name></name></expr></argument>,
                                                <argument><expr><name><name>bfd</name>-&gt;<name>bdb</name>-&gt;<name>env</name></name></expr></argument>,
                                                <argument><expr><name>create</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>BDB_WRAP</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>(<name>create</name>
                        ? "creating 'lock-tokens' table"
                        : "opening 'lock-tokens' table")</expr></argument>,
                   <argument><expr><call><name>svn_fs_bdb__open_lock_tokens_table</name><argument_list>(<argument><expr>&amp;<name><name>bfd</name>-&gt;<name>lock_tokens</name></name></expr></argument>,
                                                      <argument><expr><name><name>bfd</name>-&gt;<name>bdb</name>-&gt;<name>env</name></name></expr></argument>,
                                                      <argument><expr><name>create</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>format</name> &gt;= <name>SVN_FS_BASE__MIN_NODE_ORIGINS_FORMAT</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>BDB_WRAP</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>(<name>create</name>
                            ? "creating 'node-origins' table"
                            : "opening 'node-origins' table")</expr></argument>,
                       <argument><expr><call><name>svn_fs_bdb__open_node_origins_table</name><argument_list>(<argument><expr>&amp;<name><name>bfd</name>-&gt;<name>node_origins</name></name></expr></argument>,
                                                           <argument><expr><name><name>bfd</name>-&gt;<name>bdb</name>-&gt;<name>env</name></name></expr></argument>,
                                                           <argument><expr><name>create</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>base_create</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
            <param><decl><type><name>apr_pool_t</name> *</type><name>common_pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>format</name> <init>= <expr><name>SVN_FS_BASE__FORMAT_NUMBER</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>svn_err</name></decl>;</decl_stmt>

  <comment type="block">/* See if we had an explicitly specified pre-1.5-compatible.  */</comment>
  <if>if <condition>(<expr><name><name>fs</name>-&gt;<name>config</name></name> &amp;&amp; <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>fs</name>-&gt;<name>config</name></name></expr></argument>, <argument><expr><name>SVN_FS_CONFIG_PRE_1_5_COMPATIBLE</name></expr></argument>,
                                 <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <expr_stmt><expr><name>format</name> = 2</expr>;</expr_stmt></then></if>

  <comment type="block">/* See if we had an explicitly specified pre-1.4-compatible.  */</comment>
  <if>if <condition>(<expr><name><name>fs</name>-&gt;<name>config</name></name> &amp;&amp; <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>fs</name>-&gt;<name>config</name></name></expr></argument>, <argument><expr><name>SVN_FS_CONFIG_PRE_1_4_COMPATIBLE</name></expr></argument>,
                                 <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <expr_stmt><expr><name>format</name> = 1</expr>;</expr_stmt></then></if>

  <comment type="block">/* Create the environment and databases. */</comment>
  <expr_stmt><expr><name>svn_err</name> = <call><name>open_databases</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>svn_err</name></expr>)</condition><then> <goto>goto <name>error</name>;</goto></then></if>

  <comment type="block">/* Initialize the DAG subsystem. */</comment>
  <expr_stmt><expr><name>svn_err</name> = <call><name>svn_fs_base__dag_init_fs</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>svn_err</name></expr>)</condition><then> <goto>goto <name>error</name>;</goto></then></if>

  <comment type="block">/* This filesystem is ready.  Stamp it with a format number. */</comment>
  <expr_stmt><expr><name>svn_err</name> = <call><name>svn_io_write_version_file</name>
    <argument_list>(<argument><expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>fs</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>FORMAT_FILE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>svn_err</name></expr>)</condition><then> <goto>goto <name>error</name>;</goto></then></if>

  <expr_stmt><expr>((<name>base_fs_data_t</name> *) <name><name>fs</name>-&gt;<name>fsap_data</name></name>)-&gt;<name>format</name> = <name>format</name></expr>;</expr_stmt>
  <return>return <expr><call><name>base_serialized_init</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>common_pool</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>

<label><name>error</name>:</label>
  <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name>cleanup_fs</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>svn_err</name></expr>;</return>
}</block></function>

<escape char="0xc"/>
<comment type="block">/* Gaining access to an existing Berkeley DB-based filesystem.  */</comment>

<function><type><name>svn_error_t</name> *</type>
<name>svn_fs_base__test_required_feature_format</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>, 
                                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>feature</name></decl></param>, 
                                          <param><decl><type><name>int</name></type> <name>requires</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>base_fs_data_t</name> *</type><name>bfd</name> <init>= <expr><name><name>fs</name>-&gt;<name>fsap_data</name></name></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name><name>bfd</name>-&gt;<name>format</name></name> &lt; <name>requires</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name>
      <argument_list>(<argument><expr><name>SVN_ERR_UNSUPPORTED_FEATURE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
       <argument><expr><call><name>_</name><argument_list>(<argument><expr>"The '%s' feature requires version %d of the filesystem schema; "
         "filesystem '%s' uses only version %d"</expr></argument>)</argument_list></call></expr></argument>, 
       <argument><expr><name>feature</name></expr></argument>, <argument><expr><name>requires</name></expr></argument>, <argument><expr><name><name>fs</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name><name>bfd</name>-&gt;<name>format</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Return the error SVN_ERR_FS_UNSUPPORTED_FORMAT if FS's format
   number is not the same as the format number supported by this
   Subversion. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>check_format</name><parameter_list>(<param><decl><type><name>int</name></type> <name>format</name></decl></param>)</parameter_list>
<block>{
  <comment type="block">/* We support format 1, 2 and 3 simultaneously.  */</comment>
  <if>if <condition>(<expr><name>format</name> == 1 &amp;&amp; <name>SVN_FS_BASE__FORMAT_NUMBER</name> == 2</expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
  <if>if <condition>(<expr>(<name>format</name> == 1 || <name>format</name> == 2) &amp;&amp; <name>SVN_FS_BASE__FORMAT_NUMBER</name> == 3</expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <if>if <condition>(<expr><name>format</name> != <name>SVN_FS_BASE__FORMAT_NUMBER</name></expr>)</condition><then>
    <block>{
      <return>return <expr><call><name>svn_error_createf</name>
        <argument_list>(<argument><expr><name>SVN_ERR_FS_UNSUPPORTED_FORMAT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
         <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Expected FS format '%d'; found format '%d'"</expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><name>SVN_FS_BASE__FORMAT_NUMBER</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>base_open</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
          <param><decl><type><name>apr_pool_t</name> *</type><name>common_pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>format</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>svn_err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>write_format_file</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Read the FS format number. */</comment>
  <expr_stmt><expr><name>svn_err</name> = <call><name>svn_io_read_version_file</name><argument_list>(<argument><expr>&amp;<name>format</name></expr></argument>, 
                                     <argument><expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>FORMAT_FILE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, 
                                     <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>svn_err</name> &amp;&amp; <call><name>APR_STATUS_IS_ENOENT</name><argument_list>(<argument><expr><name><name>svn_err</name>-&gt;<name>apr_err</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <comment type="block">/* Pre-1.2 filesystems did not have a format file (you could say
         they were format "0"), so they get upgraded on the fly. */</comment>
      <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>svn_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>svn_err</name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>format</name> = <name>SVN_FS_BASE__FORMAT_NUMBER</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>write_format_file</name> = <name>TRUE</name></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr><name>svn_err</name></expr>)</condition><then>
    <goto>goto <name>error</name>;</goto></then></if></else></if>

  <comment type="block">/* Create the environment and databases. */</comment>
  <expr_stmt><expr><name>svn_err</name> = <call><name>open_databases</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <if>if <condition>(<expr><name>svn_err</name></expr>)</condition><then> <goto>goto <name>error</name>;</goto></then></if>

  <expr_stmt><expr>((<name>base_fs_data_t</name> *) <name><name>fs</name>-&gt;<name>fsap_data</name></name>)-&gt;<name>format</name> = <name>format</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_format</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If we lack a format file, write one. */</comment>
  <if>if <condition>(<expr><name>write_format_file</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>svn_err</name> = <call><name>svn_io_write_version_file</name><argument_list>(<argument><expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>FORMAT_FILE</name></expr></argument>, 
                                                        <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>svn_err</name></expr>)</condition><then> <goto>goto <name>error</name>;</goto></then></if>
    }</block></then></if>

  <return>return <expr><call><name>base_serialized_init</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>common_pool</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>

 <label><name>error</name>:</label>
  <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name>cleanup_fs</name><argument_list>(<argument><expr><name>fs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>svn_err</name></expr>;</return>
}</block></function>

<escape char="0xc"/>
<comment type="block">/* Running recovery on a Berkeley DB-based filesystem.  */</comment>


<comment type="block">/* Recover a database at PATH. Perform catastrophic recovery if FATAL
   is TRUE. Use POOL for temporary allocation. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>bdb_recover</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>svn_boolean_t</name></type> <name>fatal</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>bdb_env_baton_t</name> *</type><name>bdb</name></decl>;</decl_stmt>

  <comment type="block">/* Here's the comment copied from db_recover.c:

     Initialize the environment -- we don't actually do anything
     else, that all that's needed to run recovery.

     Note that we specify a private environment, as we're about to
     create a region, and we don't want to leave it around.  If we
     leave the region around, the application that should create it
     will simply join it instead, and will then be running with
     incorrectly sized (and probably terribly small) caches.  */</comment>

  <comment type="block">/* Note that since we're using a private environment, we shoudl
     /not/ initialize locking. We want the environment files to go
     away. */</comment>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__open</name><argument_list>(<argument><expr>&amp;<name>bdb</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
                           <argument><expr>((<name>fatal</name> ? <name>DB_RECOVER_FATAL</name> : <name>DB_RECOVER</name>)
                            | <name>SVN_BDB_PRIVATE_ENV_FLAGS</name>)</expr></argument>,
                           <argument><expr>0666</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__close</name><argument_list>(<argument><expr><name>bdb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>base_open_for_recovery</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                       <param><decl><type><name>apr_pool_t</name> *</type><name>common_pool</name></decl></param>)</parameter_list>
<block>{
  <comment type="block">/* Just stash the path in the fs pointer - it's all we really need. */</comment>
  <expr_stmt><expr><name><name>fs</name>-&gt;<name>path</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>fs</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>base_upgrade</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
             <param><decl><type><name>apr_pool_t</name> *</type><name>common_pool</name></decl></param>)</parameter_list>
<block>{
  <comment type="block">/* Currently, upgrading just means bumping the format file's stored
     version number. */</comment>
  <return>return <expr><call><name>svn_io_write_version_file</name><argument_list>(<argument><expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>FORMAT_FILE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, 
                                   <argument><expr><name>SVN_FS_BASE__FORMAT_NUMBER</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>base_bdb_recover</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                 <param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>, <param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <comment type="block">/* The fs pointer is a fake created in base_open_for_recovery above.
     We only care about the path. */</comment>
  <return>return <expr><call><name>bdb_recover</name><argument_list>(<argument><expr><name><name>fs</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<escape char="0xc"/>
<comment type="block">/* Running the 'archive' command on a Berkeley DB-based filesystem.  */</comment>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>base_bdb_logfiles</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>logfiles</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                  <param><decl><type><name>svn_boolean_t</name></type> <name>only_unused</name></decl></param>,
                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>bdb_env_baton_t</name> *</type><name>bdb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> **</type><name>filelist</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> **</type><name>filename</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u_int32_t</name></type> <name>flags</name> <init>= <expr><name>only_unused</name> ? 0 : <name>DB_ARCH_LOG</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>logfiles</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__open</name><argument_list>(<argument><expr>&amp;<name>bdb</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
                           <argument><expr><name>SVN_BDB_STANDARD_ENV_FLAGS</name></expr></argument>,
                           <argument><expr>0666</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_BDB_ERR</name><argument_list>(<argument><expr><name>bdb</name></expr></argument>, <argument><expr><call><name><name>bdb</name>-&gt;<name>env</name>-&gt;<name>log_archive</name></name><argument_list>(<argument><expr><name><name>bdb</name>-&gt;<name>env</name></name></expr></argument>, <argument><expr>&amp;<name>filelist</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>filelist</name> == <name>NULL</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_fs_bdb__close</name><argument_list>(<argument><expr><name>bdb</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <for>for (<init><expr><name>filename</name> = <name>filelist</name></expr>;</init> <condition><expr>*<name>filename</name> != <name>NULL</name></expr>;</condition> <incr><expr>++<name>filename</name></expr></incr>)
    <block>{
      <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr>*<name>logfiles</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>*<name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>filelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>svn_fs_bdb__close</name><argument_list>(<argument><expr><name>bdb</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<escape char="0xc"/>
<comment type="block">/* Copying a live Berkeley DB-base filesystem.  */</comment>

<comment type="block">/**
 * Delete all unused log files from DBD enviroment at @a live_path that exist
 * in @a backup_path.
 */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>svn_fs_base__clean_logs</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>live_path</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>backup_path</name></decl></param>,
                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>logfiles</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>base_bdb_logfiles</name><argument_list>(<argument><expr>&amp;<name>logfiles</name></expr></argument>,
                            <argument><expr><name>live_path</name></expr></argument>,
                            <argument><expr><name>TRUE</name></expr></argument>,        <comment type="block">/* Only unused logs */</comment>
                            <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <block>{  <comment type="block">/* Process unused logs from live area */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>sub_pool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Process log files. */</comment>
    <for>for (<init><expr><name>idx</name> = 0</expr>;</init> <condition><expr><name>idx</name> &lt; <name><name>logfiles</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>idx</name>++</expr></incr>)
      <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>log_file</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>logfiles</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>live_log_path</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>backup_log_path</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>sub_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>live_log_path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>live_path</name></expr></argument>, <argument><expr><name>log_file</name></expr></argument>, <argument><expr><name>sub_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>backup_log_path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>backup_path</name></expr></argument>, <argument><expr><name>log_file</name></expr></argument>, <argument><expr><name>sub_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <block>{ <comment type="block">/* Compare files. No point in using MD5 and wasting CPU cycles as we
             got full copies of both logs */</comment>

          <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>files_match</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>

          <comment type="block">/* Check to see if there is a corresponding log file in the backup
             directory */</comment>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_check_path</name><argument_list>(<argument><expr><name>backup_log_path</name></expr></argument>, <argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="block">/* If the copy of the log exists, compare them */</comment>
          <if>if <condition>(<expr><name>kind</name> == <name>svn_node_file</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_files_contents_same_p</name><argument_list>(<argument><expr>&amp;<name>files_match</name></expr></argument>,
                                                 <argument><expr><name>live_log_path</name></expr></argument>,
                                                 <argument><expr><name>backup_log_path</name></expr></argument>,
                                                 <argument><expr><name>sub_pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

          <comment type="block">/* If log files do not match, go to the next log filr. */</comment>
          <if>if <condition>(<expr><name>files_match</name> == <name>FALSE</name></expr>)</condition><then>
            <continue>continue;</continue></then></if>
        }</block>

        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_remove_file</name><argument_list>(<argument><expr><name>live_log_path</name></expr></argument>, <argument><expr><name>sub_pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></for>

    <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>sub_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* DB_ENV-&gt;get_flags() and DB-&gt;get_pagesize() don't exist prior to
   Berkeley DB 4.2. */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>SVN_BDB_VERSION_AT_LEAST</name><argument_list>(<argument><expr>4, 2</expr></argument>)</argument_list></call></expr></cpp:if>

<comment type="block">/* Open the BDB environment at PATH and compare its configuration
   flags with FLAGS.  If every flag in FLAGS is set in the
   environment, then set *MATCH to true.  Else set *MATCH to false. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>check_env_flags</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>match</name></decl></param>,
                <param><decl><type><name>u_int32_t</name></type> <name>flags</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>bdb_env_baton_t</name> *</type><name>bdb</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>SVN_BDB_VERSION_AT_LEAST</name><argument_list>(<argument><expr>4, 7</expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>int</name></type> <name>flag_state</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>u_int32_t</name></type> <name>envflags</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__open</name><argument_list>(<argument><expr>&amp;<name>bdb</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
                           <argument><expr><name>SVN_BDB_STANDARD_ENV_FLAGS</name></expr></argument>,
                           <argument><expr>0666</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>SVN_BDB_VERSION_AT_LEAST</name><argument_list>(<argument><expr>4, 7</expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name>SVN_BDB_ERR</name><argument_list>(<argument><expr><name>bdb</name></expr></argument>, <argument><expr><call><name><name>bdb</name>-&gt;<name>env</name>-&gt;<name>log_get_config</name></name><argument_list>(<argument><expr><name><name>bdb</name>-&gt;<name>env</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr>&amp;<name>flag_state</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>SVN_BDB_ERR</name><argument_list>(<argument><expr><name>bdb</name></expr></argument>, <argument><expr><call><name><name>bdb</name>-&gt;<name>env</name>-&gt;<name>get_flags</name></name><argument_list>(<argument><expr><name><name>bdb</name>-&gt;<name>env</name></name></expr></argument>, <argument><expr>&amp;<name>envflags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__close</name><argument_list>(<argument><expr><name>bdb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>SVN_BDB_VERSION_AT_LEAST</name><argument_list>(<argument><expr>4, 7</expr></argument>)</argument_list></call></expr></cpp:if>
  <if>if <condition>(<expr><name>flag_state</name> == 0</expr>)</condition><then>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <if>if <condition>(<expr><name>flags</name> &amp; <name>envflags</name></expr>)</condition><then>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr>*<name>match</name> = <name>TRUE</name></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr>*<name>match</name> = <name>FALSE</name></expr>;</expr_stmt></else></if></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Set *PAGESIZE to the size of pages used to hold items in the
   database environment located at PATH.
*/</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>get_db_pagesize</name><parameter_list>(<param><decl><type><name>u_int32_t</name> *</type><name>pagesize</name></decl></param>,
                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>bdb_env_baton_t</name> *</type><name>bdb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DB</name> *</type><name>nodes_table</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__open</name><argument_list>(<argument><expr>&amp;<name>bdb</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
                           <argument><expr><name>SVN_BDB_STANDARD_ENV_FLAGS</name></expr></argument>,
                           <argument><expr>0666</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* ### We're only asking for the pagesize on the 'nodes' table.
         Is this enough?  We never call DB-&gt;set_pagesize() on any of
         our tables, so presumably BDB is using the same default
         pagesize for all our databases, right? */</comment>
  <expr_stmt><expr><call><name>SVN_BDB_ERR</name><argument_list>(<argument><expr><name>bdb</name></expr></argument>, <argument><expr><call><name>svn_fs_bdb__open_nodes_table</name><argument_list>(<argument><expr>&amp;<name>nodes_table</name></expr></argument>, <argument><expr><name><name>bdb</name>-&gt;<name>env</name></name></expr></argument>,
                                                <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_BDB_ERR</name><argument_list>(<argument><expr><name>bdb</name></expr></argument>, <argument><expr><call><name><name>nodes_table</name>-&gt;<name>get_pagesize</name></name><argument_list>(<argument><expr><name>nodes_table</name></expr></argument>, <argument><expr><name>pagesize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_BDB_ERR</name><argument_list>(<argument><expr><name>bdb</name></expr></argument>, <argument><expr><call><name><name>nodes_table</name>-&gt;<name>close</name></name><argument_list>(<argument><expr><name>nodes_table</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>svn_fs_bdb__close</name><argument_list>(<argument><expr><name>bdb</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SVN_BDB_VERSION_AT_LEAST(4, 2) */</comment>


<comment type="block">/* Copy FILENAME from SRC_DIR to DST_DIR in byte increments of size
   CHUNKSIZE.  The read/write buffer of size CHUNKSIZE will be
   allocated in POOL.  If ALLOW_MISSING is set, we won't make a fuss
   if FILENAME isn't found in SRC_DIR; otherwise, we will.  */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>copy_db_file_safely</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_dir</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_dir</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename</name></decl></param>,
                    <param><decl><type><name>u_int32_t</name></type> <name>chunksize</name></decl></param>,
                    <param><decl><type><name>svn_boolean_t</name></type> <name>allow_missing</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_file_t</name> *</type><name>s</name> <init>= <expr><name>NULL</name></expr></init>, *<name>d</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>  <comment type="block">/* init to null important for APR */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file_src_path</name> <init>= <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name>src_dir</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file_dst_path</name> <init>= <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name>dst_dir</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>buf</name></decl>;</decl_stmt>

  <comment type="block">/* Open source file.  If it's missing and that's allowed, there's
     nothing more to do here. */</comment>
  <expr_stmt><expr><name>err</name> = <call><name>svn_io_file_open</name><argument_list>(<argument><expr>&amp;<name>s</name></expr></argument>, <argument><expr><name>file_src_path</name></expr></argument>,
                         <argument><expr>(<name>APR_READ</name> | <name>APR_LARGEFILE</name> | <name>APR_BINARY</name>)</expr></argument>,
                         <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>err</name> &amp;&amp; <call><name>APR_STATUS_IS_ENOENT</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>apr_err</name></name></expr></argument>)</argument_list></call> &amp;&amp; <name>allow_missing</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
    }</block></then></if>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Open destination file. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_open</name><argument_list>(<argument><expr>&amp;<name>d</name></expr></argument>, <argument><expr><name>file_dst_path</name></expr></argument>, <argument><expr>(<name>APR_WRITE</name> | <name>APR_CREATE</name> |
                                               <name>APR_LARGEFILE</name> | <name>APR_BINARY</name>)</expr></argument>,
                           <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Allocate our read/write buffer. */</comment>
  <expr_stmt><expr><name>buf</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>chunksize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Copy bytes till the cows come home. */</comment>
  <while>while <condition>(<expr>1</expr>)</condition>
    <block>{
      <decl_stmt><decl><type><name>apr_size_t</name></type> <name>bytes_this_time</name> <init>= <expr><name>chunksize</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>read_err</name></decl>, *<decl><type ref="prev"/><name>write_err</name></decl>;</decl_stmt>

      <comment type="block">/* Read 'em. */</comment>
      <if>if <condition>(<expr>(<name>read_err</name> = <call><name>svn_io_file_read</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>&amp;<name>bytes_this_time</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
        <block>{
          <if>if <condition>(<expr><call><name>APR_STATUS_IS_EOF</name><argument_list>(<argument><expr><name><name>read_err</name>-&gt;<name>apr_err</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>read_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
          <else>else
            <block>{
              <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name>svn_io_file_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name>svn_io_file_close</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <return>return <expr><name>read_err</name></expr>;</return>
            }</block></else></if>
        }</block></then></if>

      <comment type="block">/* Write 'em. */</comment>
      <if>if <condition>(<expr>(<name>write_err</name> = <call><name>svn_io_file_write_full</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bytes_this_time</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                              <argument><expr><name>pool</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name>svn_io_file_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name>svn_io_file_close</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>write_err</name></expr>;</return>
        }</block></then></if>

      <comment type="block">/* read_err is either NULL, or a dangling pointer - but it is only a
         dangling pointer if it used to be an EOF error. */</comment>
      <if>if <condition>(<expr><name>read_err</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_close</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>  <comment type="block">/* got EOF on read, all files closed, all done. */</comment>
        }</block></then></if>
    }</block></while>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>




<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>base_hotcopy</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_path</name></decl></param>,
             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dest_path</name></decl></param>,
             <param><decl><type><name>svn_boolean_t</name></type> <name>clean_logs</name></decl></param>,
             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u_int32_t</name></type> <name>pagesize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>log_autoremove</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>format</name></decl>;</decl_stmt>

  <comment type="block">/* Check the FS format number to be certain that we know how to
     hotcopy this FS.  Pre-1.2 filesystems did not have a format file (you
     could say they were format "0"), so we will error here.  This is not
     optimal, but since this has been the case since 1.2.0, and no one has
     complained, it apparently isn't much of a concern.  (We did not check
     the 'format' file in 1.2.x, but we did blindly try to copy 'locks',
     which would have errored just the same.)  */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_read_version_file</name>
          <argument_list>(<argument><expr>&amp;<name>format</name></expr></argument>, <argument><expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>FORMAT_FILE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_format</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If using Berkeley DB 4.2 or later, note whether the DB_LOG_AUTO_REMOVE
     feature is on.  If it is, we have a potential race condition:
     another process might delete a logfile while we're in the middle
     of copying all the logfiles.  (This is not a huge deal; at worst,
     the hotcopy fails with a file-not-found error.) */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>SVN_BDB_VERSION_AT_LEAST</name><argument_list>(<argument><expr>4, 2</expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><name>err</name> = <call><name>check_env_flags</name><argument_list>(<argument><expr>&amp;<name>log_autoremove</name></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>SVN_BDB_VERSION_AT_LEAST</name><argument_list>(<argument><expr>4, 7</expr></argument>)</argument_list></call></expr></cpp:if>
                          <argument><expr><name>DB_LOG_AUTO_REMOVE</name></expr></argument>,
 <comment type="block">/* DB_LOG_AUTO_REMOVE was named DB_LOG_AUTOREMOVE before Berkeley DB 4.7. */</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                          <argument><expr><name>DB_LOG_AUTOREMOVE</name></expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                          <argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Copy the DB_CONFIG file. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_dir_file_copy</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>dest_path</name></expr></argument>, <argument><expr>"DB_CONFIG"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* In order to copy the database files safely and atomically, we
     must copy them in chunks which are multiples of the page-size
     used by BDB.  See sleepycat docs for details, or svn issue #1818. */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>SVN_BDB_VERSION_AT_LEAST</name><argument_list>(<argument><expr>4, 2</expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_db_pagesize</name><argument_list>(<argument><expr>&amp;<name>pagesize</name></expr></argument>, <argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>pagesize</name> &lt; <name>SVN__STREAM_CHUNK_SIZE</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* use the largest multiple of BDB pagesize we can. */</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>multiple</name> <init>= <expr><name>SVN__STREAM_CHUNK_SIZE</name> / <name>pagesize</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>pagesize</name> *= <name>multiple</name></expr>;</expr_stmt>
    }</block></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* default to 128K chunks, which should be safe.
     BDB almost certainly uses a power-of-2 pagesize. */</comment>
  <expr_stmt><expr><name>pagesize</name> = (4096 * 32)</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/* Copy the databases.  */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>copy_db_file_safely</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>dest_path</name></expr></argument>,
                              <argument><expr>"nodes"</expr></argument>, <argument><expr><name>pagesize</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>copy_db_file_safely</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>dest_path</name></expr></argument>,
                              <argument><expr>"transactions"</expr></argument>, <argument><expr><name>pagesize</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>copy_db_file_safely</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>dest_path</name></expr></argument>,
                              <argument><expr>"revisions"</expr></argument>, <argument><expr><name>pagesize</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>copy_db_file_safely</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>dest_path</name></expr></argument>,
                              <argument><expr>"copies"</expr></argument>, <argument><expr><name>pagesize</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>copy_db_file_safely</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>dest_path</name></expr></argument>,
                              <argument><expr>"changes"</expr></argument>, <argument><expr><name>pagesize</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>copy_db_file_safely</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>dest_path</name></expr></argument>,
                              <argument><expr>"representations"</expr></argument>, <argument><expr><name>pagesize</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>copy_db_file_safely</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>dest_path</name></expr></argument>,
                              <argument><expr>"strings"</expr></argument>, <argument><expr><name>pagesize</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>copy_db_file_safely</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>dest_path</name></expr></argument>,
                              <argument><expr>"uuids"</expr></argument>, <argument><expr><name>pagesize</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>copy_db_file_safely</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>dest_path</name></expr></argument>,
                              <argument><expr>"locks"</expr></argument>, <argument><expr><name>pagesize</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>copy_db_file_safely</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>dest_path</name></expr></argument>,
                              <argument><expr>"lock-tokens"</expr></argument>, <argument><expr><name>pagesize</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>copy_db_file_safely</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>dest_path</name></expr></argument>,
                              <argument><expr>"node-origins"</expr></argument>, <argument><expr><name>pagesize</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <block>{
    <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>logfiles</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>base_bdb_logfiles</name><argument_list>(<argument><expr>&amp;<name>logfiles</name></expr></argument>,
                              <argument><expr><name>src_path</name></expr></argument>,
                              <argument><expr><name>FALSE</name></expr></argument>,   <comment type="block">/* All logs */</comment>
                              <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Process log files. */</comment>
    <expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for (<init><expr><name>idx</name> = 0</expr>;</init> <condition><expr><name>idx</name> &lt; <name><name>logfiles</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>idx</name>++</expr></incr>)
      <block>{
        <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>err</name> = <call><name>svn_io_dir_file_copy</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>dest_path</name></expr></argument>,
                                   <argument><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>logfiles</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>,
                                                 <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></argument>,
                                   <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
          <block>{
            <if>if <condition>(<expr><name>log_autoremove</name></expr>)</condition><then>
              <return>return
                <expr><call><name>svn_error_quick_wrap</name>
                <argument_list>(<argument><expr><name>err</name></expr></argument>,
                 <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Error copying logfile;  the DB_LOG_AUTOREMOVE feature\n"
                   "may be interfering with the hotcopy algorithm.  If\n"
                   "the problem persists, try deactivating this feature\n"
                   "in DB_CONFIG"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then>
            <else>else
              <return>return <expr><name>err</name></expr>;</return></else></if>
          }</block></then></if>
      }</block></for>
    <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>

  <comment type="block">/* Since this is a copy we will have exclusive access to the repository. */</comment>
  <expr_stmt><expr><name>err</name> = <call><name>bdb_recover</name><argument_list>(<argument><expr><name>dest_path</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><name>log_autoremove</name></expr>)</condition><then>
        <return>return
          <expr><call><name>svn_error_quick_wrap</name>
          <argument_list>(<argument><expr><name>err</name></expr></argument>,
           <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Error running catastrophic recovery on hotcopy;  the\n"
             "DB_LOG_AUTOREMOVE feature may be interfering with the\n"
             "hotcopy algorithm.  If the problem persists, try deactivating\n"
             "this feature in DB_CONFIG"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then>
      <else>else
        <return>return <expr><name>err</name></expr>;</return></else></if>
    }</block></then></if>

  <comment type="block">/* Only now that the hotcopied filesystem is complete,
     stamp it with a format file. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_write_version_file</name>
          <argument_list>(<argument><expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name>dest_path</name></expr></argument>, <argument><expr><name>FORMAT_FILE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>clean_logs</name> == <name>TRUE</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__clean_logs</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>dest_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<escape char="0xc"/>
<comment type="block">/* Deleting a Berkeley DB-based filesystem.  */</comment>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>base_delete_fs</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <comment type="block">/* First, use the Berkeley DB library function to remove any shared
     memory segments.  */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__remove</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Remove the environment directory. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_remove_dir2</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_version_t</name> *</type>
<name>base_version</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name>SVN_VERSION_BODY</name></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>base_get_description</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>_</name><argument_list>(<argument><expr>"Module for working with a Berkeley DB repository."</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<escape char="0xc"/>
<comment type="block">/* Base FS library vtable, used by the FS loader library. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>fs_library_vtable_t</name></type> <name>library_vtable</name> <init>= <expr><block>{
  <expr><name>base_version</name></expr>,
  <expr><name>base_create</name></expr>,
  <expr><name>base_open</name></expr>,
  <expr><name>base_open_for_recovery</name></expr>,
  <expr><name>base_upgrade</name></expr>,
  <expr><name>base_delete_fs</name></expr>,
  <expr><name>base_hotcopy</name></expr>,
  <expr><name>base_get_description</name></expr>,
  <expr><name>base_bdb_recover</name></expr>,
  <expr><name>base_bdb_logfiles</name></expr>,
  <expr><name>svn_fs_base__id_parse</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>svn_error_t</name> *</type>
<name>svn_fs_base__init</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_version_t</name> *</type><name>loader_version</name></decl></param>,
                  <param><decl><type><name>fs_library_vtable_t</name> **</type><name>vtable</name></decl></param>, <param><decl><type><name>apr_pool_t</name>*</type> <name>common_pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_version_checklist_t</name></type> <name><name>checklist</name><index>[]</index></name> <init>=
    <expr><block>{
      <expr><block>{ <expr>"svn_subr"</expr>,  <expr><name>svn_subr_version</name></expr> }</block></expr>,
      <expr><block>{ <expr>"svn_delta"</expr>, <expr><name>svn_delta_version</name></expr> }</block></expr>,
      <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
    }</block></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Simplified version check to make sure we can safely use the
     VTABLE parameter. The FS loader does a more exhaustive check. */</comment>
  <if>if <condition>(<expr><name><name>loader_version</name>-&gt;<name>major</name></name> != <name>SVN_VER_MAJOR</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_VERSION_MISMATCH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Unsupported FS loader version (%d) for bdb"</expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><name><name>loader_version</name>-&gt;<name>major</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ver_check_list</name><argument_list>(<argument><expr><call><name>base_version</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>checklist</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_bdb_version</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__init</name><argument_list>(<argument><expr><name>common_pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>vtable</name> = &amp;<name>library_vtable</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
