<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_fs_base/bdb/bdb_compat.h"><comment type="block">/* svn_bdb_compat.h --- Compatibility wrapper for different BDB versions.
 *
 * ====================================================================
 * Copyright (c) 2000-2006 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVN_LIBSVN_FS_BDB_COMPAT_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_LIBSVN_FS_BDB_COMPAT_H</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APU_WANT_DB</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apu_want.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>


<comment type="block">/* Symbols and constants */</comment>

<comment type="block">/* BDB 4.1 introduced the DB_AUTO_COMMIT flag. Older versions can just
   use 0 instead. */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DB_AUTO_COMMIT</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_BDB_AUTO_COMMIT</name></cpp:macro> <cpp:value>(DB_AUTO_COMMIT)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_BDB_AUTO_COMMIT</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* DB_INCOMPLETE is obsolete in BDB 4.1. */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DB_INCOMPLETE</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_BDB_HAS_DB_INCOMPLETE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_BDB_HAS_DB_INCOMPLETE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* In BDB 4.3, "buffer too small" errors come back with
   DB_BUFFER_SMALL (instead of ENOMEM, which is now fatal). */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DB_BUFFER_SMALL</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_BDB_DB_BUFFER_SMALL</name></cpp:macro> <cpp:value>DB_BUFFER_SMALL</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_BDB_DB_BUFFER_SMALL</name></cpp:macro> <cpp:value>ENOMEM</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* BDB 4.4 introdiced the DB_REGISTER flag for DBEnv::open that allows
   for automatic recovery of the databases after a program crash. */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DB_REGISTER</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_BDB_AUTO_RECOVER</name></cpp:macro> <cpp:value>(DB_REGISTER | DB_RECOVER)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_BDB_AUTO_RECOVER</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/* Explicit BDB version check. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_BDB_VERSION_AT_LEAST</name><parameter_list>(<param><type><name>major</name></type></param>,<param><type><name>minor</name></type></param>)</parameter_list></cpp:macro> \
    <cpp:value>(DB_VERSION_MAJOR &gt; (major) \
     || (DB_VERSION_MAJOR == (major) &amp;&amp; DB_VERSION_MINOR &gt;= (minor)))</cpp:value></cpp:define>


<comment type="block">/* Parameter lists */</comment>

<comment type="block">/* In BDB 4.1, DB-&gt;open takes a transaction parameter. We'll ignore it
   when building with 4.0. */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>SVN_BDB_VERSION_AT_LEAST</name><argument_list>(<argument><expr>4,1</expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_BDB_OPEN_PARAMS</name><parameter_list>(<param><type><name>env</name></type></param>,<param><type><name>txn</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(env), (txn)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_BDB_OPEN_PARAMS</name><parameter_list>(<param><type><name>env</name></type></param>,<param><type><name>txn</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(env)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* In BDB 4.3, the error gatherer function grew a new DBENV parameter,
   and the MSG parameter's type changed. */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>SVN_BDB_VERSION_AT_LEAST</name><argument_list>(<argument><expr>4,3</expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/* Prevents most compilers from whining about unused parameters. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_BDB_ERROR_GATHERER_IGNORE</name><parameter_list>(<param><type><name>varname</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((void)(varname))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bdb_error_gatherer</name><parameter_list>(<param><type><name>param1</name></type></param>, <param><type><name>param2</name></type></param>, <param><type><name>param3</name></type></param>)</parameter_list></cpp:macro> \
  <cpp:value>bdb_error_gatherer(param2, char *msg)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_BDB_ERROR_GATHERER_IGNORE</name><parameter_list>(<param><type><name>varname</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((void)0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* In BDB 4.3 and later, the file names in DB_ENV-&gt;open and DB-&gt;open
   are assumed to be encoded in UTF-8 on Windows. */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>SVN_BDB_VERSION_AT_LEAST</name><argument_list>(<argument><expr>4,3</expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_BDB_PATH_UTF8</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_BDB_PATH_UTF8</name></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* In BDB 4.6, the cursor routines were renamed, and the old names
   deprecated. */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>SVN_BDB_VERSION_AT_LEAST</name><argument_list>(<argument><expr>4,6</expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_bdb_dbc_close</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro>         <cpp:value>((c)-&gt;close(c))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_bdb_dbc_count</name><parameter_list>(<param><type><name>c</name></type></param>,<param><type><name>r</name></type></param>,<param><type><name>f</name></type></param>)</parameter_list></cpp:macro>     <cpp:value>((c)-&gt;count(c,r,f))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_bdb_dbc_del</name><parameter_list>(<param><type><name>c</name></type></param>,<param><type><name>f</name></type></param>)</parameter_list></cpp:macro>         <cpp:value>((c)-&gt;del(c,f))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_bdb_dbc_dup</name><parameter_list>(<param><type><name>c</name></type></param>,<param><type><name>p</name></type></param>,<param><type><name>f</name></type></param>)</parameter_list></cpp:macro>       <cpp:value>((c)-&gt;dup(c,p,f))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_bdb_dbc_get</name><parameter_list>(<param><type><name>c</name></type></param>,<param><type><name>k</name></type></param>,<param><type><name>d</name></type></param>,<param><type><name>f</name></type></param>)</parameter_list></cpp:macro>     <cpp:value>((c)-&gt;get(c,k,d,f))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_bdb_dbc_pget</name><parameter_list>(<param><type><name>c</name></type></param>,<param><type><name>k</name></type></param>,<param><type><name>p</name></type></param>,<param><type><name>d</name></type></param>,<param><type><name>f</name></type></param>)</parameter_list></cpp:macro>  <cpp:value>((c)-&gt;pget(c,k,p,d,f))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_bdb_dbc_put</name><parameter_list>(<param><type><name>c</name></type></param>,<param><type><name>k</name></type></param>,<param><type><name>d</name></type></param>,<param><type><name>f</name></type></param>)</parameter_list></cpp:macro>     <cpp:value>((c)-&gt;put(c,k,d,f))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_bdb_dbc_close</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro>         <cpp:value>((c)-&gt;c_close(c))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_bdb_dbc_count</name><parameter_list>(<param><type><name>c</name></type></param>,<param><type><name>r</name></type></param>,<param><type><name>f</name></type></param>)</parameter_list></cpp:macro>     <cpp:value>((c)-&gt;c_count(c,r,f))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_bdb_dbc_del</name><parameter_list>(<param><type><name>c</name></type></param>,<param><type><name>f</name></type></param>)</parameter_list></cpp:macro>         <cpp:value>((c)-&gt;c_del(c,f))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_bdb_dbc_dup</name><parameter_list>(<param><type><name>c</name></type></param>,<param><type><name>p</name></type></param>,<param><type><name>f</name></type></param>)</parameter_list></cpp:macro>       <cpp:value>((c)-&gt;c_dup(c,p,f))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_bdb_dbc_get</name><parameter_list>(<param><type><name>c</name></type></param>,<param><type><name>k</name></type></param>,<param><type><name>d</name></type></param>,<param><type><name>f</name></type></param>)</parameter_list></cpp:macro>     <cpp:value>((c)-&gt;c_get(c,k,d,f))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_bdb_dbc_pget</name><parameter_list>(<param><type><name>c</name></type></param>,<param><type><name>k</name></type></param>,<param><type><name>p</name></type></param>,<param><type><name>d</name></type></param>,<param><type><name>f</name></type></param>)</parameter_list></cpp:macro>  <cpp:value>((c)-&gt;c_pget(c,k,p,d,f))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_bdb_dbc_put</name><parameter_list>(<param><type><name>c</name></type></param>,<param><type><name>k</name></type></param>,<param><type><name>d</name></type></param>,<param><type><name>f</name></type></param>)</parameter_list></cpp:macro>     <cpp:value>((c)-&gt;c_put(c,k,d,f))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Before calling db_create, we must check that the version of the BDB
   libraries we're linking with is the same as the one we compiled
   against, because the DB-&gt;open call is not binary compatible between
   BDB 4.0 and 4.1. This function returns DB_OLD_VERSION if the
   compile-time and run-time versions of BDB don't match. */</comment>
<function_decl><type><name>int</name></type> <name>svn_fs_bdb__check_version</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SVN_LIBSVN_FS_BDB_COMPAT_H */</comment>
</unit>
