<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_fs_base/bdb/node-origins-table.h"><comment type="block">/* node-origins-table.h : internal interface to ops on `node-origins' table
 *
 * ====================================================================
 * Copyright (c) 2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVN_LIBSVN_FS_NODE_ORIGINS_TABLE_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_LIBSVN_FS_NODE_ORIGINS_TABLE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../trail.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../fs.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<escape char="0xc"/>
<comment type="block">/* Open a `node-origins' table in ENV.  If CREATE is non-zero, create
   one if it doesn't exist.  Set *NODE_ORIGINS_P to the new table.
   Return a Berkeley DB error code.  */</comment>
<function_decl><type><name>int</name></type> <name>svn_fs_bdb__open_node_origins_table</name><parameter_list>(<param><decl><type><name>DB</name> **</type><name>node_origins_p</name></decl></param>,
                                        <param><decl><type><name>DB_ENV</name> *</type><name>env</name></decl></param>,
                                        <param><decl><type><name>svn_boolean_t</name></type> <name>create</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Set *ORIGIN_ID to the node revision ID from which the history of
   all nodes in FS whose node ID is NODE_ID springs, as determined by
   a look in the `node-origins' table.  Do this as part of TRAIL.  Use
   POOL for allocations.

   If no such node revision ID is stored for NODE_ID, return
   SVN_ERR_FS_NO_SUCH_NODE_ORIGIN.  */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_bdb__get_node_origin</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> **</type><name>origin_id</name></decl></param>,
                                         <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>node_id</name></decl></param>,
                                         <param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>,
                                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Store in the `node-origins' table a mapping of NODE_ID to original
   node revision ID ORIGIN_ID for FS.  Do this as part of TRAIL.  Use
   POOL for temporary allocations.  */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_bdb__set_node_origin</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>node_id</name></decl></param>,
                                         <param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>origin_id</name></decl></param>,
                                         <param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>,
                                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Delete from the `node-origins' table the record for NODE_ID in FS.
   Do this as part of TRAIL.  Use POOL for temporary allocations.  */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_bdb__delete_node_origin</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>node_id</name></decl></param>,
                                            <param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>,
                                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SVN_LIBSVN_FS_NODE_ORIGINS_TABLE_H */</comment>
</unit>
