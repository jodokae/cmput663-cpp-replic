<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_fs_base/bdb/changes-table.c"><comment type="block">/* changes-table.c : operations on the `changes' table
 *
 * ====================================================================
 * Copyright (c) 2000-2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bdb_compat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_hash.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_tables.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../err.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../trail.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../id.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/fs_skels.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../libsvn_fs/fs-loader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bdb-err.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dbt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"changes-table.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>

<escape char="0xc"/>
<comment type="block">/*** Creating and opening the changes table. ***/</comment>

<function><type><name>int</name></type>
<name>svn_fs_bdb__open_changes_table</name><parameter_list>(<param><decl><type><name>DB</name> **</type><name>changes_p</name></decl></param>,
                               <param><decl><type><name>DB_ENV</name> *</type><name>env</name></decl></param>,
                               <param><decl><type><name>svn_boolean_t</name></type> <name>create</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>u_int32_t</name></type> <name>open_flags</name> <init>= <expr>(<name>create</name> ? (<name>DB_CREATE</name> | <name>DB_EXCL</name>) : 0)</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DB</name> *</type><name>changes</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>BDB_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__check_version</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BDB_ERR</name><argument_list>(<argument><expr><call><name>db_create</name><argument_list>(<argument><expr>&amp;<name>changes</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Enable duplicate keys. This allows us to store the changes
     one-per-row.  Note: this must occur before -&gt;open().  */</comment>
  <expr_stmt><expr><call><name>BDB_ERR</name><argument_list>(<argument><expr><call><name><name>changes</name>-&gt;<name>set_flags</name></name><argument_list>(<argument><expr><name>changes</name></expr></argument>, <argument><expr><name>DB_DUP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>BDB_ERR</name><argument_list>(<argument><expr><call>(<name><name>changes</name>-&gt;<name>open</name></name>)<argument_list>(<argument><expr><call><name>SVN_BDB_OPEN_PARAMS</name><argument_list>(<argument><expr><name>changes</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
                          <argument><expr>"changes"</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>DB_BTREE</name></expr></argument>,
                          <argument><expr><name>open_flags</name></expr></argument>, <argument><expr>0666</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>changes_p</name> = <name>changes</name></expr>;</expr_stmt>
  <return>return <expr>0</expr>;</return>
}</block></function>


<escape char="0xc"/>
<comment type="block">/*** Storing and retrieving changes.  ***/</comment>

<function><type><name>svn_error_t</name> *</type>
<name>svn_fs_bdb__changes_add</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>,
                        <param><decl><type><name>change_t</name> *</type><name>change</name></decl></param>,
                        <param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>,
                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>base_fs_data_t</name> *</type><name>bfd</name> <init>= <expr><name><name>fs</name>-&gt;<name>fsap_data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DBT</name></type> <name>query</name></decl>, <decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>skel_t</name> *</type><name>skel</name></decl>;</decl_stmt>

  <comment type="block">/* Convert native type to skel. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__unparse_change_skel</name><argument_list>(<argument><expr>&amp;<name>skel</name></expr></argument>, <argument><expr><name>change</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Store a new record into the database. */</comment>
  <expr_stmt><expr><call><name>svn_fs_base__str_to_dbt</name><argument_list>(<argument><expr>&amp;<name>query</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_fs_base__skel_to_dbt</name><argument_list>(<argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>skel</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_fs_base__trail_debug</name><argument_list>(<argument><expr><name>trail</name></expr></argument>, <argument><expr>"changes"</expr></argument>, <argument><expr>"put"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>BDB_WRAP</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"creating change"</expr></argument>)</argument_list></call></expr></argument>,
                   <argument><expr><call><name><name>bfd</name>-&gt;<name>changes</name>-&gt;<name>put</name></name><argument_list>(<argument><expr><name><name>bfd</name>-&gt;<name>changes</name></name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>db_txn</name></name></expr></argument>,
                                     <argument><expr>&amp;<name>query</name></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_fs_bdb__changes_delete</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>,
                           <param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>db_err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DBT</name></type> <name>query</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>base_fs_data_t</name> *</type><name>bfd</name> <init>= <expr><name><name>fs</name>-&gt;<name>fsap_data</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>svn_fs_base__trail_debug</name><argument_list>(<argument><expr><name>trail</name></expr></argument>, <argument><expr>"changes"</expr></argument>, <argument><expr>"del"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>db_err</name> = <call><name><name>bfd</name>-&gt;<name>changes</name>-&gt;<name>del</name></name><argument_list>(<argument><expr><name><name>bfd</name>-&gt;<name>changes</name></name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>db_txn</name></name></expr></argument>,
                             <argument><expr><call><name>svn_fs_base__str_to_dbt</name><argument_list>(<argument><expr>&amp;<name>query</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If there're no changes for KEY, that is acceptable.  Any other
     error should be propogated to the caller, though.  */</comment>
  <if>if <condition>(<expr>(<name>db_err</name>) &amp;&amp; (<name>db_err</name> != <name>DB_NOTFOUND</name>)</expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>BDB_WRAP</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"deleting changes"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>db_err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Merge the internal-use-only CHANGE into a hash of public-FS
   svn_fs_path_change_t CHANGES, collapsing multiple changes into a
   single succinct change per path. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>fold_change</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>changes</name></decl></param>,
            <param><decl><type><specifier>const</specifier> <name>change_t</name> *</type><name>change</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name> <init>= <expr><call><name>apr_hash_pool_get</name><argument_list>(<argument><expr><name>changes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_path_change_t</name> *</type><name>old_change</name></decl>, *<decl><type ref="prev"/><name>new_change</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>

  <if>if <condition>(<expr>(<name>old_change</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>changes</name></expr></argument>, <argument><expr><name><name>change</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
    <block>{
      <comment type="block">/* This path already exists in the hash, so we have to merge
         this change into the already existing one. */</comment>

      <comment type="block">/* Since the path already exists in the hash, we don't have to
         dup the allocation for the path itself. */</comment>
      <expr_stmt><expr><name>path</name> = <name><name>change</name>-&gt;<name>path</name></name></expr>;</expr_stmt>

      <comment type="block">/* Sanity check:  only allow NULL node revision ID in the
         `reset' case. */</comment>
      <if>if <condition>(<expr>(! <name><name>change</name>-&gt;<name>noderev_id</name></name>) &amp;&amp; (<name><name>change</name>-&gt;<name>kind</name></name> != <name>svn_fs_path_change_reset</name>)</expr>)</condition><then>
        <return>return <expr><call><name>svn_error_create</name>
          <argument_list>(<argument><expr><name>SVN_ERR_FS_CORRUPT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
           <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Missing required node revision ID"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>

      <comment type="block">/* Sanity check:  we should be talking about the same node
         revision ID as our last change except where the last change
         was a deletion. */</comment>
      <if>if <condition>(<expr><name><name>change</name>-&gt;<name>noderev_id</name></name>
          &amp;&amp; (! <call><name>svn_fs_base__id_eq</name><argument_list>(<argument><expr><name><name>old_change</name>-&gt;<name>node_rev_id</name></name></expr></argument>,
                                   <argument><expr><name><name>change</name>-&gt;<name>noderev_id</name></name></expr></argument>)</argument_list></call>)
          &amp;&amp; (<name><name>old_change</name>-&gt;<name>change_kind</name></name> != <name>svn_fs_path_change_delete</name>)</expr>)</condition><then>
        <return>return <expr><call><name>svn_error_create</name>
          <argument_list>(<argument><expr><name>SVN_ERR_FS_CORRUPT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
           <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Invalid change ordering: new node revision ID without delete"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>

      <comment type="block">/* Sanity check: an add, replacement, or reset must be the first
         thing to follow a deletion. */</comment>
      <if>if <condition>(<expr>(<name><name>old_change</name>-&gt;<name>change_kind</name></name> == <name>svn_fs_path_change_delete</name>)
          &amp;&amp; (! ((<name><name>change</name>-&gt;<name>kind</name></name> == <name>svn_fs_path_change_replace</name>)
                 || (<name><name>change</name>-&gt;<name>kind</name></name> == <name>svn_fs_path_change_reset</name>)
                 || (<name><name>change</name>-&gt;<name>kind</name></name> == <name>svn_fs_path_change_add</name>)))</expr>)</condition><then>
        <return>return <expr><call><name>svn_error_create</name>
          <argument_list>(<argument><expr><name>SVN_ERR_FS_CORRUPT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
           <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Invalid change ordering: non-add change on deleted path"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>

      <comment type="block">/* Now, merge that change in. */</comment>
      <switch>switch <condition>(<expr><name><name>change</name>-&gt;<name>kind</name></name></expr>)</condition>
        <block>{
        <case>case <expr><name>svn_fs_path_change_reset</name></expr>:
          <comment type="block">/* A reset here will simply remove the path change from the
             hash. */</comment>
          <expr_stmt><expr><name>old_change</name> = <name>NULL</name></expr>;</expr_stmt>
          <break>break;</break>

        </case><case>case <expr><name>svn_fs_path_change_delete</name></expr>:
          <if>if <condition>(<expr><name><name>old_change</name>-&gt;<name>change_kind</name></name> == <name>svn_fs_path_change_add</name></expr>)</condition><then>
            <block>{
              <comment type="block">/* If the path was introduced in this transaction via an
                 add, and we are deleting it, just remove the path
                 altogether. */</comment>
              <expr_stmt><expr><name>old_change</name> = <name>NULL</name></expr>;</expr_stmt>
            }</block></then>
          <else>else
            <block>{
              <comment type="block">/* A deletion overrules all previous changes. */</comment>
              <expr_stmt><expr><name><name>old_change</name>-&gt;<name>change_kind</name></name> = <name>svn_fs_path_change_delete</name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>old_change</name>-&gt;<name>text_mod</name></name> = <name><name>change</name>-&gt;<name>text_mod</name></name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>old_change</name>-&gt;<name>prop_mod</name></name> = <name><name>change</name>-&gt;<name>prop_mod</name></name></expr>;</expr_stmt>
            }</block></else></if>
          <break>break;</break>

        </case><case>case <expr><name>svn_fs_path_change_add</name></expr>:
        </case><case>case <expr><name>svn_fs_path_change_replace</name></expr>:
          <comment type="block">/* An add at this point must be following a previous delete,
             so treat it just like a replace. */</comment>
          <expr_stmt><expr><name><name>old_change</name>-&gt;<name>change_kind</name></name> = <name>svn_fs_path_change_replace</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>old_change</name>-&gt;<name>node_rev_id</name></name> = <call><name>svn_fs_base__id_copy</name><argument_list>(<argument><expr><name><name>change</name>-&gt;<name>noderev_id</name></name></expr></argument>,
                                                         <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>old_change</name>-&gt;<name>text_mod</name></name> = <name><name>change</name>-&gt;<name>text_mod</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>old_change</name>-&gt;<name>prop_mod</name></name> = <name><name>change</name>-&gt;<name>prop_mod</name></name></expr>;</expr_stmt>
          <break>break;</break>

        </case><case>case <expr><name>svn_fs_path_change_modify</name></expr>:
        </case><default>default:
          <if>if <condition>(<expr><name><name>change</name>-&gt;<name>text_mod</name></name></expr>)</condition><then>
            <expr_stmt><expr><name><name>old_change</name>-&gt;<name>text_mod</name></name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
          <if>if <condition>(<expr><name><name>change</name>-&gt;<name>prop_mod</name></name></expr>)</condition><then>
            <expr_stmt><expr><name><name>old_change</name>-&gt;<name>prop_mod</name></name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
          <break>break;</break>
        </default>}</block></switch>

      <comment type="block">/* Point our new_change to our (possibly modified) old_change. */</comment>
      <expr_stmt><expr><name>new_change</name> = <name>old_change</name></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <comment type="block">/* This change is new to the hash, so make a new public change
         structure from the internal one (in the hash's pool), and dup
         the path into the hash's pool, too. */</comment>
      <expr_stmt><expr><name>new_change</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>new_change</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>new_change</name>-&gt;<name>node_rev_id</name></name> = <call><name>svn_fs_base__id_copy</name><argument_list>(<argument><expr><name><name>change</name>-&gt;<name>noderev_id</name></name></expr></argument>,
                                                     <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>new_change</name>-&gt;<name>change_kind</name></name> = <name><name>change</name>-&gt;<name>kind</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>new_change</name>-&gt;<name>text_mod</name></name> = <name><name>change</name>-&gt;<name>text_mod</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>new_change</name>-&gt;<name>prop_mod</name></name> = <name><name>change</name>-&gt;<name>prop_mod</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>path</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>change</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <comment type="block">/* Add (or update) this path. */</comment>
  <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>changes</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>new_change</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_fs_bdb__changes_fetch</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>changes_p</name></decl></param>,
                          <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>,
                          <param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>,
                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>base_fs_data_t</name> *</type><name>bfd</name> <init>= <expr><name><name>fs</name>-&gt;<name>fsap_data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DBC</name> *</type><name>cursor</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DBT</name></type> <name>query</name></decl>, <decl><type ref="prev"/><name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>db_err</name> <init>= <expr>0</expr></init>, <name>db_c_err</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>changes</name> <init>= <expr><call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Get a cursor on the first record matching KEY, and then loop over
     the records, adding them to the return array. */</comment>
  <expr_stmt><expr><call><name>svn_fs_base__trail_debug</name><argument_list>(<argument><expr><name>trail</name></expr></argument>, <argument><expr>"changes"</expr></argument>, <argument><expr>"cursor"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>BDB_WRAP</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"creating cursor for reading changes"</expr></argument>)</argument_list></call></expr></argument>,
                   <argument><expr><call><name><name>bfd</name>-&gt;<name>changes</name>-&gt;<name>cursor</name></name><argument_list>(<argument><expr><name><name>bfd</name>-&gt;<name>changes</name></name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>db_txn</name></name></expr></argument>,
                                        <argument><expr>&amp;<name>cursor</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Advance the cursor to the key that we're looking for. */</comment>
  <expr_stmt><expr><call><name>svn_fs_base__str_to_dbt</name><argument_list>(<argument><expr>&amp;<name>query</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_fs_base__result_dbt</name><argument_list>(<argument><expr>&amp;<name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>db_err</name> = <call><name>svn_bdb_dbc_get</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr>&amp;<name>query</name></expr></argument>, <argument><expr>&amp;<name>result</name></expr></argument>, <argument><expr><name>DB_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>! <name>db_err</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>svn_fs_base__track_dbt</name><argument_list>(<argument><expr>&amp;<name>result</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <while>while <condition>(<expr>! <name>db_err</name></expr>)</condition>
    <block>{
      <decl_stmt><decl><type><name>change_t</name> *</type><name>change</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>skel_t</name> *</type><name>result_skel</name></decl>;</decl_stmt>

      <comment type="block">/* Clear the per-iteration subpool. */</comment>
      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* RESULT now contains a change record associated with KEY.  We
         need to parse that skel into an change_t structure ...  */</comment>
      <expr_stmt><expr><name>result_skel</name> = <call><name>svn_fs_base__parse_skel</name><argument_list>(<argument><expr><name><name>result</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>result</name>.<name>size</name></name></expr></argument>,
                                            <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr>! <name>result_skel</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>err</name> = <call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_FS_CORRUPT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                  <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Error reading changes for key '%s'"</expr></argument>)</argument_list></call></expr></argument>,
                                  <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <goto>goto <name>cleanup</name>;</goto>
        }</block></then></if>
      <expr_stmt><expr><name>err</name> = <call><name>svn_fs_base__parse_change_skel</name><argument_list>(<argument><expr>&amp;<name>change</name></expr></argument>, <argument><expr><name>result_skel</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
        <goto>goto <name>cleanup</name>;</goto></then></if>

      <comment type="block">/* ... and merge it with our return hash.  */</comment>
      <expr_stmt><expr><name>err</name> = <call><name>fold_change</name><argument_list>(<argument><expr><name>changes</name></expr></argument>, <argument><expr><name>change</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
        <goto>goto <name>cleanup</name>;</goto></then></if>

      <comment type="block">/* Now, if our change was a deletion or replacement, we have to
         blow away any changes thus far on paths that are (or, were)
         children of this path.
         ### i won't bother with another iteration pool here -- at
             most we talking about a few extra dups of paths into what
             is already a temporary subpool.
      */</comment>
      <if>if <condition>(<expr>(<name><name>change</name>-&gt;<name>kind</name></name> == <name>svn_fs_path_change_delete</name>)
          || (<name><name>change</name>-&gt;<name>kind</name></name> == <name>svn_fs_path_change_replace</name>)</expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>

          <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><name>changes</name></expr></argument>)</argument_list></call></expr>;</init>
               <condition><expr><name>hi</name></expr>;</condition>
               <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
            <block>{
              <comment type="block">/* KEY is the path. */</comment>
              <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>hashkey</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>apr_ssize_t</name></type> <name>klen</name></decl>;</decl_stmt>
              <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>hashkey</name></expr></argument>, <argument><expr>&amp;<name>klen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

              <comment type="block">/* If we come across our own path, ignore it. */</comment>
              <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>change</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>hashkey</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
                <continue>continue;</continue></then></if>

              <comment type="block">/* If we come across a child of our path, remove it. */</comment>
              <if>if <condition>(<expr><call><name>svn_path_is_child</name><argument_list>(<argument><expr><name><name>change</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>hashkey</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>changes</name></expr></argument>, <argument><expr><name>hashkey</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            }</block></for>
        }</block></then></if>

      <comment type="block">/* Advance the cursor to the next record with this same KEY, and
         fetch that record. */</comment>
      <expr_stmt><expr><call><name>svn_fs_base__result_dbt</name><argument_list>(<argument><expr>&amp;<name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>db_err</name> = <call><name>svn_bdb_dbc_get</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr>&amp;<name>query</name></expr></argument>, <argument><expr>&amp;<name>result</name></expr></argument>, <argument><expr><name>DB_NEXT_DUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr>! <name>db_err</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>svn_fs_base__track_dbt</name><argument_list>(<argument><expr>&amp;<name>result</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></while>

  <comment type="block">/* Destroy the per-iteration subpool. */</comment>
  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If there are no (more) change records for this KEY, we're
     finished.  Just return the (possibly empty) array.  Any other
     error, however, needs to get handled appropriately.  */</comment>
  <if>if <condition>(<expr><name>db_err</name> &amp;&amp; (<name>db_err</name> != <name>DB_NOTFOUND</name>)</expr>)</condition><then>
    <expr_stmt><expr><name>err</name> = <call><name>BDB_WRAP</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"fetching changes"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>db_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

 <label><name>cleanup</name>:</label>
  <comment type="block">/* Close the cursor. */</comment>
  <expr_stmt><expr><name>db_c_err</name> = <call><name>svn_bdb_dbc_close</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If we had an error prior to closing the cursor, return the error. */</comment>
  <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
    <return>return <expr><name>err</name></expr>;</return></then></if>

  <comment type="block">/* If our only error thus far was when we closed the cursor, return
     that error. */</comment>
  <if>if <condition>(<expr><name>db_c_err</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>BDB_WRAP</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"closing changes cursor"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>db_c_err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <comment type="block">/* Finally, set our return variable and get outta here. */</comment>
  <expr_stmt><expr>*<name>changes_p</name> = <name>changes</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_fs_bdb__changes_fetch_raw</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>changes_p</name></decl></param>,
                              <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>,
                              <param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>,
                              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>base_fs_data_t</name> *</type><name>bfd</name> <init>= <expr><name><name>fs</name>-&gt;<name>fsap_data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DBC</name> *</type><name>cursor</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DBT</name></type> <name>query</name></decl>, <decl><type ref="prev"/><name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>db_err</name> <init>= <expr>0</expr></init>, <name>db_c_err</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>change_t</name> *</type><name>change</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>changes</name> <init>= <expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>change</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Get a cursor on the first record matching KEY, and then loop over
     the records, adding them to the return array. */</comment>
  <expr_stmt><expr><call><name>svn_fs_base__trail_debug</name><argument_list>(<argument><expr><name>trail</name></expr></argument>, <argument><expr>"changes"</expr></argument>, <argument><expr>"cursor"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>BDB_WRAP</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"creating cursor for reading changes"</expr></argument>)</argument_list></call></expr></argument>,
                   <argument><expr><call><name><name>bfd</name>-&gt;<name>changes</name>-&gt;<name>cursor</name></name><argument_list>(<argument><expr><name><name>bfd</name>-&gt;<name>changes</name></name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>db_txn</name></name></expr></argument>,
                                        <argument><expr>&amp;<name>cursor</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Advance the cursor to the key that we're looking for. */</comment>
  <expr_stmt><expr><call><name>svn_fs_base__str_to_dbt</name><argument_list>(<argument><expr>&amp;<name>query</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_fs_base__result_dbt</name><argument_list>(<argument><expr>&amp;<name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>db_err</name> = <call><name>svn_bdb_dbc_get</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr>&amp;<name>query</name></expr></argument>, <argument><expr>&amp;<name>result</name></expr></argument>, <argument><expr><name>DB_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>! <name>db_err</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>svn_fs_base__track_dbt</name><argument_list>(<argument><expr>&amp;<name>result</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <while>while <condition>(<expr>! <name>db_err</name></expr>)</condition>
    <block>{
      <decl_stmt><decl><type><name>skel_t</name> *</type><name>result_skel</name></decl>;</decl_stmt>

      <comment type="block">/* RESULT now contains a change record associated with KEY.  We
         need to parse that skel into an change_t structure ...  */</comment>
      <expr_stmt><expr><name>result_skel</name> = <call><name>svn_fs_base__parse_skel</name><argument_list>(<argument><expr><name><name>result</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>result</name>.<name>size</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr>! <name>result_skel</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>err</name> = <call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_FS_CORRUPT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                  <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Error reading changes for key '%s'"</expr></argument>)</argument_list></call></expr></argument>,
                                  <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <goto>goto <name>cleanup</name>;</goto>
        }</block></then></if>
      <expr_stmt><expr><name>err</name> = <call><name>svn_fs_base__parse_change_skel</name><argument_list>(<argument><expr>&amp;<name>change</name></expr></argument>, <argument><expr><name>result_skel</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
        <goto>goto <name>cleanup</name>;</goto></then></if>

      <comment type="block">/* ... and add it to our return array.  */</comment>
      <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>changes</name></expr></argument>, <argument><expr><name>change_t</name> *</expr></argument>)</argument_list></call> = <name>change</name></expr>;</expr_stmt>

      <comment type="block">/* Advance the cursor to the next record with this same KEY, and
         fetch that record. */</comment>
      <expr_stmt><expr><call><name>svn_fs_base__result_dbt</name><argument_list>(<argument><expr>&amp;<name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>db_err</name> = <call><name>svn_bdb_dbc_get</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr>&amp;<name>query</name></expr></argument>, <argument><expr>&amp;<name>result</name></expr></argument>, <argument><expr><name>DB_NEXT_DUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr>! <name>db_err</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>svn_fs_base__track_dbt</name><argument_list>(<argument><expr>&amp;<name>result</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></while>

  <comment type="block">/* If there are no (more) change records for this KEY, we're
     finished.  Just return the (possibly empty) array.  Any other
     error, however, needs to get handled appropriately.  */</comment>
  <if>if <condition>(<expr><name>db_err</name> &amp;&amp; (<name>db_err</name> != <name>DB_NOTFOUND</name>)</expr>)</condition><then>
    <expr_stmt><expr><name>err</name> = <call><name>BDB_WRAP</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"fetching changes"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>db_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

 <label><name>cleanup</name>:</label>
  <comment type="block">/* Close the cursor. */</comment>
  <expr_stmt><expr><name>db_c_err</name> = <call><name>svn_bdb_dbc_close</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If we had an error prior to closing the cursor, return the error. */</comment>
  <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
    <return>return <expr><name>err</name></expr>;</return></then></if>

  <comment type="block">/* If our only error thus far was when we closed the cursor, return
     that error. */</comment>
  <if>if <condition>(<expr><name>db_c_err</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>BDB_WRAP</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"closing changes cursor"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>db_c_err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <comment type="block">/* Finally, set our return variable and get outta here. */</comment>
  <expr_stmt><expr>*<name>changes_p</name> = <name>changes</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
