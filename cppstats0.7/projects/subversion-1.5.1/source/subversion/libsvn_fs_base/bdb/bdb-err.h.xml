<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_fs_base/bdb/bdb-err.h"><comment type="block">/*
 * err.h : interface to routines for returning Berkeley DB errors
 *
 * ====================================================================
 * Copyright (c) 2000-2004 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>


<escape char="0xc"/>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVN_LIBSVN_FS_BDB_ERR_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_LIBSVN_FS_BDB_ERR_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_fs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"env.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<escape char="0xc"/>
<comment type="block">/* Return an svn_error_t object that reports a Berkeley DB error.
   DB_ERR is the error value returned by the Berkeley DB routine.
   Wrap and consume pending errors in BDB.  */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_bdb__dberr</name><parameter_list>(<param><decl><type><name>bdb_env_baton_t</name> *</type><name>bdb_baton</name></decl></param>, <param><decl><type><name>int</name></type> <name>db_err</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Allocate an error object for a Berkeley DB error, with a formatted message.
   Wrap and consume pending errors in BDB.

   DB_ERR is the Berkeley DB error code.
   FMT is a printf-style format string, describing how to format any
      subsequent arguments.

   The svn_error_t object returned has a message consisting of:
   - the text specified by FMT and the subsequent arguments, and
   - the Berkeley DB error message for the error code DB_ERR.

   There is no separator between the two messages; if you want one,
   you should include it in FMT.  */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_bdb__dberrf</name><parameter_list>(<param><decl><type><name>bdb_env_baton_t</name> *</type><name>bdb_baton</name></decl></param>, <param><decl><type><name>int</name></type> <name>db_err</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fmt</name></decl></param>, <param><decl><type>...</type></decl></param>)</parameter_list>
       __attribute__<parameter_list>(<param/></parameter_list>(format<parameter_list>(<param><decl><type><name>printf</name></type></decl></param>, <param/></parameter_list>3, 4</function_decl>)</block></extern>))<empty_stmt>;</empty_stmt>


<comment type="block">/* Clear errors associated with BDB. */</comment>
<function_decl><type><name>void</name></type> <name>svn_fs_bdb__clear_err</name><parameter_list>(<param><decl><type><name>bdb_env_t</name> *</type><name>bdb</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Check the return status from the Berkeley DB operation.  If the
   operation succeeded, return zero.  Otherwise, construct an
   appropriate Subversion error object describing what went wrong.
   - FS is the Subversion filesystem we're operating on.
   - OPERATION is a gerund clause describing what we were trying to do.
   - BDB_ERR is the return status from the Berkeley DB function.  */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_bdb__wrap_db</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>operation</name></decl></param>,
                                 <param><decl><type><name>int</name></type> <name>db_err</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* A terse wrapper for svn_fs_bdb__wrap_db.  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BDB_WRAP</name><parameter_list>(<param><type><name>fs</name></type></param>, <param><type><name>op</name></type></param>, <param><type><name>err</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(svn_fs_bdb__wrap_db((fs), (op), (err)))</cpp:value></cpp:define>

<comment type="block">/* If EXPR returns a non-zero value, pass that value to
   svn_fs_bdb__dberr and return that function's value.  This is like
   SVN_ERR, but is used by functions that return a Subversion error
   and call other functions that return a Berkeley DB error code. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_BDB_ERR</name><parameter_list>(<param><type><name>bdb</name></type></param>, <param><type><name>expr</name></type></param>)</parameter_list></cpp:macro>                           \
  <cpp:value>do {                                                   \
    int db_err__temp = (expr);                           \
    if (db_err__temp)                                    \
      return svn_fs_bdb__dberr((bdb), db_err__temp);     \
    svn_error_clear((bdb)-&gt;error_info-&gt;pending_errors);  \
    (bdb)-&gt;error_info-&gt;pending_errors = NULL;            \
  } while (0)</cpp:value></cpp:define>


<comment type="block">/* If EXPR returns a non-zero value, return it.  This is like SVN_ERR,
   but for functions that return a Berkeley DB error code.  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BDB_ERR</name><parameter_list>(<param><type><name>expr</name></type></param>)</parameter_list></cpp:macro>                           \
  <cpp:value>do {                                          \
    int db_err__temp = (expr);                  \
    if (db_err__temp)                           \
      return db_err__temp;                      \
  } while (0)</cpp:value></cpp:define>


<comment type="block">/* Verify that FS refers to an open database; return an appropriate
   error if this is not the case.  */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_bdb__check_fs</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SVN_LIBSVN_FS_BDB_ERR_H */</comment>
</unit>
