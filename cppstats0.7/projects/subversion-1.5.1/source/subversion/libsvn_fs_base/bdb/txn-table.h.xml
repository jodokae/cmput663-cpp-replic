<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_fs_base/bdb/txn-table.h"><comment type="block">/* txn-table.h : internal interface to ops on `transactions' table
 *
 * ====================================================================
 * Copyright (c) 2000-2004 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVN_LIBSVN_FS_TXN_TABLE_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_LIBSVN_FS_TXN_TABLE_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../trail.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../fs.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<escape char="0xc"/>
<comment type="block">/* Open a `transactions' table in ENV.  If CREATE is non-zero, create
   one if it doesn't exist.  Set *TRANSACTIONS_P to the new table.
   Return a Berkeley DB error code.  */</comment>
<function_decl><type><name>int</name></type> <name>svn_fs_bdb__open_transactions_table</name><parameter_list>(<param><decl><type><name>DB</name> **</type><name>transactions_p</name></decl></param>,
                                        <param><decl><type><name>DB_ENV</name> *</type><name>env</name></decl></param>,
                                        <param><decl><type><name>svn_boolean_t</name></type> <name>create</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Create a new transaction in FS as part of TRAIL, with an initial
   root and base root ID of ROOT_ID.  Set *TXN_NAME_P to the name of the
   new transaction, allocated in POOL.  */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_bdb__create_txn</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>txn_name_p</name></decl></param>,
                                    <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>root_id</name></decl></param>,
                                    <param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>,
                                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Remove the transaction whose name is TXN_NAME from the `transactions'
   table of FS, as part of TRAIL.

   Returns SVN_ERR_FS_TRANSACTION_NOT_MUTABLE if TXN_NAME refers to a
   transaction that has already been committed.  */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_bdb__delete_txn</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_name</name></decl></param>,
                                    <param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>,
                                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Retrieve the transaction *TXN_P for the Subversion transaction
   named TXN_NAME from the `transactions' table of FS, as part of
   TRAIL.  Perform all allocations in POOL.

   If there is no such transaction, SVN_ERR_FS_NO_SUCH_TRANSACTION is
   the error returned.  */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_bdb__get_txn</name><parameter_list>(<param><decl><type><name>transaction_t</name> **</type><name>txn_p</name></decl></param>,
                                 <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_name</name></decl></param>,
                                 <param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>,
                                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Store the Suversion transaction TXN in FS with an ID of TXN_NAME as
   part of TRAIL. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_bdb__put_txn</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>transaction_t</name> *</type><name>txn</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_name</name></decl></param>,
                                 <param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>,
                                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Set *NAMES_P to an array of const char * IDs (unfinished
   transactions in FS) as part of TRAIL.  Allocate the array and the
   names in POOL, and use POOL for any temporary allocations.  */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_bdb__get_txn_list</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>names_p</name></decl></param>,
                                      <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                      <param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>,
                                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SVN_LIBSVN_FS_TXN_TABLE_H */</comment>
</unit>
