<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_fs_base/bdb/env.h"><comment type="block">/* env.h : managing the BDB environment
 *
 * ====================================================================
 * Copyright (c) 2000-2005 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVN_LIBSVN_FS_BDB_ENV_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_LIBSVN_FS_BDB_ENV_H</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APU_WANT_DB</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apu_want.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_file_io.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bdb_compat.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<escape char="0xc"/>
<comment type="block">/* The name of the Berkeley DB config file.  */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BDB_CONFIG_FILE</name></cpp:macro> <cpp:value>"DB_CONFIG"</cpp:value></cpp:define>

<comment type="block">/* Prefix string for BDB errors. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BDB_ERRPFX_STRING</name></cpp:macro> <cpp:value>"svn (bdb): "</cpp:value></cpp:define>


<comment type="block">/* Opaque descriptor of an open BDB environment. */</comment>
<typedef>typedef <type>struct <name>bdb_env_t</name></type> <name>bdb_env_t</name>;</typedef>


<comment type="block">/* Thread-specific error info related to the bdb_env_t. */</comment>
<typedef>typedef <type><struct>struct
<block>{
  <comment type="block">/* We hold the extended info here until the Berkeley DB function returns.
     It usually returns an error code, triggering the collection and
     wrapping of the additional errors stored here.

     Note: In some circumstances BDB will call the error function and not
     go on to return an error code, so the caller must always check whether
     pending_errors is non-NULL to avoid leaking errors.  This behaviour
     has been seen when running recovery on a repository upgraded to 4.3
     that still has old 4.2 log files present, a typical error string is
     "Skipping log file db/log.0000000002: historic log version 8" */</comment>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>pending_errors</name></decl>;</decl_stmt>

  <comment type="block">/* We permitted clients of our library to install a Berkeley BDB errcall.
     Since we now use the errcall ourselves, we must store and invoke a user
     errcall, to maintain our API guarantees. */</comment>
  <function_decl><type><name>void</name></type> (*<name>user_callback</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>errpfx</name></decl></param>, <param><decl><type><name>char</name> *</type><name>msg</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="block">/* The reference count.  It counts the number of bdb_env_baton_t
     instances that refer to this object. */</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>refcount</name></decl>;</decl_stmt>

}</block></struct></type> <name>bdb_error_info_t</name>;</typedef>


<comment type="block">/* The Berkeley DB environment baton. */</comment>
<typedef>typedef <type><struct>struct
<block>{
  <comment type="block">/* The Berkeley DB environment. This pointer must be identical to
     the one in the bdb_env_t. */</comment>
  <decl_stmt><decl><type><name>DB_ENV</name> *</type><name>env</name></decl>;</decl_stmt>

  <comment type="block">/* The (opaque) cached environment descriptor. */</comment>
  <decl_stmt><decl><type><name>bdb_env_t</name> *</type><name>bdb</name></decl>;</decl_stmt>

  <comment type="block">/* The error info related to this baton. */</comment>
  <decl_stmt><decl><type><name>bdb_error_info_t</name> *</type><name>error_info</name></decl>;</decl_stmt>
}</block></struct></type> <name>bdb_env_baton_t</name>;</typedef>


<escape char="0xc"/>
<comment type="block">/* Flag combination for opening a shared BDB environment. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_BDB_STANDARD_ENV_FLAGS</name></cpp:macro> <cpp:value>(DB_CREATE       \
                                    | DB_INIT_LOCK  \
                                    | DB_INIT_LOG   \
                                    | DB_INIT_MPOOL \
                                    | DB_INIT_TXN   \
                                    | SVN_BDB_AUTO_RECOVER)</cpp:value></cpp:define>

<comment type="block">/* Flag combination for opening a private BDB environment. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_BDB_PRIVATE_ENV_FLAGS</name></cpp:macro> <cpp:value>(DB_CREATE       \
                                   | DB_INIT_LOG   \
                                   | DB_INIT_MPOOL \
                                   | DB_INIT_TXN   \
                                   | DB_PRIVATE)</cpp:value></cpp:define>


<comment type="block">/* Iniitalize the BDB back-end's private stuff. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_bdb__init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name>*</type> <name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Allocate the Berkeley DB descriptor BDB and open the environment.
 *
 * Allocate *BDBP from POOL and open (*BDBP)-&gt;env in PATH, using FLAGS
 * and MODE.  If applicable, set the BDB_AUTO_COMMIT flag for this
 * environment.
 *
 * Use POOL for temporary allocation.
 *
 * Note: This function may return a bdb_env_baton_t object that refers
 *       to a previously opened environment.  If FLAGS contains
 *       DB_PRIVATE and the environment is already open, the function
 *       will fail (this isn't a problem in practice, because a caller
 *       should obtain an exclusive lock on the repository before
 *       opening the environment).
 */</comment>

<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_bdb__open</name><parameter_list>(<param><decl><type><name>bdb_env_baton_t</name> **</type><name>bdb_batonp</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                              <param><decl><type><name>u_int32_t</name></type> <name>flags</name></decl></param>, <param><decl><type><name>int</name></type> <name>mode</name></decl></param>,
                              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Close the Berkeley DB descriptor BDB.
 *
 * Note: This function might not actually close the environment if it
 *       has been opened more than once.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_bdb__close</name><parameter_list>(<param><decl><type><name>bdb_env_baton_t</name> *</type><name>bdb_baton</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Get the panic state of the open BDB environment. */</comment>
<function_decl><type><name>svn_boolean_t</name></type> <name>svn_fs_bdb__get_panic</name><parameter_list>(<param><decl><type><name>bdb_env_baton_t</name> *</type><name>bdb_baton</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Set the panic flag on the open BDB environment. */</comment>
<function_decl><type><name>void</name></type> <name>svn_fs_bdb__set_panic</name><parameter_list>(<param><decl><type><name>bdb_env_baton_t</name> *</type><name>bdb_baton</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Remove the Berkeley DB environment at PATH.
 *
 * Use POOL for temporary allocation.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_fs_bdb__remove</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SVN_LIBSVN_FS_BDB_ENV_H */</comment>
</unit>
