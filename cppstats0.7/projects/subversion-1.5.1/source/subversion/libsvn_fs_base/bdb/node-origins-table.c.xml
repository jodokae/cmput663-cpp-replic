<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_fs_base/bdb/node-origins-table.c"><comment type="block">/* node-origins-table.c : operations on the `node-origins' table
 *
 * ====================================================================
 * Copyright (c) 2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bdb_compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../err.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../id.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dbt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../trail.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bdb-err.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../libsvn_fs/fs-loader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"node-origins-table.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>

<escape char="0xc"/>
<function><type><name>int</name></type> <name>svn_fs_bdb__open_node_origins_table</name><parameter_list>(<param><decl><type><name>DB</name> **</type><name>node_origins_p</name></decl></param>,
                                        <param><decl><type><name>DB_ENV</name> *</type><name>env</name></decl></param>,
                                        <param><decl><type><name>svn_boolean_t</name></type> <name>create</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>u_int32_t</name></type> <name>open_flags</name> <init>= <expr>(<name>create</name> ? (<name>DB_CREATE</name> | <name>DB_EXCL</name>) : 0)</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DB</name> *</type><name>node_origins</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>BDB_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__check_version</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BDB_ERR</name><argument_list>(<argument><expr><call><name>db_create</name><argument_list>(<argument><expr>&amp;<name>node_origins</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>error</name> = <call>(<name><name>node_origins</name>-&gt;<name>open</name></name>)<argument_list>(<argument><expr><call><name>SVN_BDB_OPEN_PARAMS</name><argument_list>(<argument><expr><name>node_origins</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr>"node-origins"</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>DB_BTREE</name></expr></argument>,
                               <argument><expr><name>open_flags</name></expr></argument>, <argument><expr>0666</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Create the node-origins table if it doesn't exist. */</comment>
  <if>if <condition>(<expr><name>error</name> == <name>ENOENT</name> &amp;&amp; (! <name>create</name>)</expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>BDB_ERR</name><argument_list>(<argument><expr><call><name><name>node_origins</name>-&gt;<name>close</name></name><argument_list>(<argument><expr><name>node_origins</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name>svn_fs_bdb__open_node_origins_table</name><argument_list>(<argument><expr><name>node_origins_p</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

  <expr_stmt><expr><call><name>BDB_ERR</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>node_origins_p</name> = <name>node_origins</name></expr>;</expr_stmt>
  <return>return <expr>0</expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_fs_bdb__get_node_origin</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> **</type><name>origin_id</name></decl></param>,
                                         <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>node_id</name></decl></param>,
                                         <param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>,
                                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>base_fs_data_t</name> *</type><name>bfd</name> <init>= <expr><name><name>fs</name>-&gt;<name>fsap_data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DBT</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>db_err</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>svn_fs_base__trail_debug</name><argument_list>(<argument><expr><name>trail</name></expr></argument>, <argument><expr>"node-origins"</expr></argument>, <argument><expr>"get"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>db_err</name> = <call><name><name>bfd</name>-&gt;<name>node_origins</name>-&gt;<name>get</name></name><argument_list>(<argument><expr><name><name>bfd</name>-&gt;<name>node_origins</name></name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>db_txn</name></name></expr></argument>,
                                  <argument><expr><call><name>svn_fs_base__str_to_dbt</name><argument_list>(<argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>node_id</name></expr></argument>)</argument_list></call></expr></argument>,
                                  <argument><expr><call><name>svn_fs_base__result_dbt</name><argument_list>(<argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_fs_base__track_dbt</name><argument_list>(<argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>db_err</name> == <name>DB_NOTFOUND</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_fs_base__err_no_such_node_origin</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>node_id</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <expr_stmt><expr>*<name>origin_id</name> = <call><name>svn_fs_base__id_parse</name><argument_list>(<argument><expr><name><name>value</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>value</name>.<name>size</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_fs_bdb__set_node_origin</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>node_id</name></decl></param>,
                                         <param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>origin_id</name></decl></param>,
                                         <param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>,
                                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>base_fs_data_t</name> *</type><name>bfd</name> <init>= <expr><name><name>fs</name>-&gt;<name>fsap_data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DBT</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>db_err</name></decl>;</decl_stmt>

  <comment type="block">/* Create a key from our NODE_ID. */</comment>
  <expr_stmt><expr><call><name>svn_fs_base__str_to_dbt</name><argument_list>(<argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>node_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check to see if we already have a mapping for NODE_ID.  If so,
     and the value is the same one we were about to write.  That's
     cool -- just do nothing.  If, however, the value is *different*,
     that's a red flag!  */</comment>
  <expr_stmt><expr><call><name>svn_fs_base__trail_debug</name><argument_list>(<argument><expr><name>trail</name></expr></argument>, <argument><expr>"node-origins"</expr></argument>, <argument><expr>"get"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>db_err</name> = <call><name><name>bfd</name>-&gt;<name>node_origins</name>-&gt;<name>get</name></name><argument_list>(<argument><expr><name><name>bfd</name>-&gt;<name>node_origins</name></name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>db_txn</name></name></expr></argument>,
                                  <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><call><name>svn_fs_base__result_dbt</name><argument_list>(<argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_fs_base__track_dbt</name><argument_list>(<argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>db_err</name> != <name>DB_NOTFOUND</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>origin_id_str</name> <init>= <expr><call><name>svn_fs_base__id_unparse</name><argument_list>(<argument><expr><name>origin_id</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>old_origin_id_str</name> <init>=
        <expr><call><name>svn_string_ncreate</name><argument_list>(<argument><expr><name><name>value</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>value</name>.<name>size</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr>! <call><name>svn_string_compare</name><argument_list>(<argument><expr><name>origin_id_str</name></expr></argument>, <argument><expr><name>old_origin_id_str</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_createf</name>
          <argument_list>(<argument><expr><name>SVN_ERR_FS_CORRUPT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
           <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Node origin for '%s' exists in filesystem '%s' with a different "
             "value (%s) than what we were about to store (%s)"</expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><name>node_id</name></expr></argument>, <argument><expr><name><name>fs</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name><name>old_origin_id_str</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>origin_id_str</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</return></then>
      <else>else
        <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></else></if>
    }</block></then></if>

  <comment type="block">/* Create a value from our ORIGIN_ID, and add this record to the table. */</comment>
  <expr_stmt><expr><call><name>svn_fs_base__id_to_dbt</name><argument_list>(<argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>origin_id</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_fs_base__trail_debug</name><argument_list>(<argument><expr><name>trail</name></expr></argument>, <argument><expr>"node-origins"</expr></argument>, <argument><expr>"put"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>BDB_WRAP</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"storing node-origins record"</expr></argument>)</argument_list></call></expr></argument>,
                   <argument><expr><call><name><name>bfd</name>-&gt;<name>node_origins</name>-&gt;<name>put</name></name><argument_list>(<argument><expr><name><name>bfd</name>-&gt;<name>node_origins</name></name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>db_txn</name></name></expr></argument>,
                                          <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_fs_bdb__delete_node_origin</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>node_id</name></decl></param>,
                                            <param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>,
                                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>base_fs_data_t</name> *</type><name>bfd</name> <init>= <expr><name><name>fs</name>-&gt;<name>fsap_data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DBT</name></type> <name>key</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>svn_fs_base__str_to_dbt</name><argument_list>(<argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>node_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_fs_base__trail_debug</name><argument_list>(<argument><expr><name>trail</name></expr></argument>, <argument><expr>"node-origins"</expr></argument>, <argument><expr>"del"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>BDB_WRAP</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>"deleting entry from 'node-origins' table"</expr></argument>,
                   <argument><expr><call><name><name>bfd</name>-&gt;<name>node_origins</name>-&gt;<name>del</name></name><argument_list>(<argument><expr><name><name>bfd</name>-&gt;<name>node_origins</name></name></expr></argument>,
                                          <argument><expr><name><name>trail</name>-&gt;<name>db_txn</name></name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
