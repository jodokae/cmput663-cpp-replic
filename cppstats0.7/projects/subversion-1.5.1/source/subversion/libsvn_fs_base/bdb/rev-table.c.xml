<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_fs_base/bdb/rev-table.c">    <comment type="block">/* rev-table.c : working with the `revisions' table
 *
 * ====================================================================
 * Copyright (c) 2000-2004 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bdb_compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../err.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/skel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../util/fs_skels.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../libsvn_fs/fs-loader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bdb-err.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dbt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rev-table.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_fs_util.h"</cpp:file></cpp:include>

<escape char="0xc"/>
<comment type="block">/* Opening/creating the `revisions' table.  */</comment>

<function><type><name>int</name></type> <name>svn_fs_bdb__open_revisions_table</name><parameter_list>(<param><decl><type><name>DB</name> **</type><name>revisions_p</name></decl></param>,
                                     <param><decl><type><name>DB_ENV</name> *</type><name>env</name></decl></param>,
                                     <param><decl><type><name>svn_boolean_t</name></type> <name>create</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>u_int32_t</name></type> <name>open_flags</name> <init>= <expr>(<name>create</name> ? (<name>DB_CREATE</name> | <name>DB_EXCL</name>) : 0)</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DB</name> *</type><name>revisions</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>BDB_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__check_version</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BDB_ERR</name><argument_list>(<argument><expr><call><name>db_create</name><argument_list>(<argument><expr>&amp;<name>revisions</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>BDB_ERR</name><argument_list>(<argument><expr><call>(<name><name>revisions</name>-&gt;<name>open</name></name>)<argument_list>(<argument><expr><call><name>SVN_BDB_OPEN_PARAMS</name><argument_list>(<argument><expr><name>revisions</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr>"revisions"</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>DB_RECNO</name></expr></argument>,
                            <argument><expr><name>open_flags</name></expr></argument>, <argument><expr>0666</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>revisions_p</name> = <name>revisions</name></expr>;</expr_stmt>
  <return>return <expr>0</expr>;</return>
}</block></function>


<escape char="0xc"/>
<comment type="block">/* Storing and retrieving filesystem revisions.  */</comment>


<function><type><name>svn_error_t</name> *</type>
<name>svn_fs_bdb__get_rev</name><parameter_list>(<param><decl><type><name>revision_t</name> **</type><name>revision_p</name></decl></param>,
                    <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                    <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                    <param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>base_fs_data_t</name> *</type><name>bfd</name> <init>= <expr><name><name>fs</name>-&gt;<name>fsap_data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>db_err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DBT</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>skel_t</name> *</type><name>skel</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>revision_t</name> *</type><name>revision</name></decl>;</decl_stmt>

  <comment type="block">/* Turn the revision number into a Berkeley DB record number.
     Revisions are numbered starting with zero; Berkeley DB record
     numbers begin with one.  */</comment>
  <decl_stmt><decl><type><name>db_recno_t</name></type> <name>recno</name> <init>= <expr><name>rev</name> + 1</expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>svn_fs_base__trail_debug</name><argument_list>(<argument><expr><name>trail</name></expr></argument>, <argument><expr>"revisions"</expr></argument>, <argument><expr>"get"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>db_err</name> = <call><name><name>bfd</name>-&gt;<name>revisions</name>-&gt;<name>get</name></name><argument_list>(<argument><expr><name><name>bfd</name>-&gt;<name>revisions</name></name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>db_txn</name></name></expr></argument>,
                               <argument><expr><call><name>svn_fs_base__set_dbt</name><argument_list>(<argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>recno</name></expr></argument>,
                                                    <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>recno</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><call><name>svn_fs_base__result_dbt</name><argument_list>(<argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>svn_fs_base__track_dbt</name><argument_list>(<argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If there's no such revision, return an appropriately specific error.  */</comment>
  <if>if <condition>(<expr><name>db_err</name> == <name>DB_NOTFOUND</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_fs_base__err_dangling_rev</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <comment type="block">/* Handle any other error conditions.  */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>BDB_WRAP</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"reading filesystem revision"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>db_err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Parse REVISION skel.  */</comment>
  <expr_stmt><expr><name>skel</name> = <call><name>svn_fs_base__parse_skel</name><argument_list>(<argument><expr><name><name>value</name>.<name>data</name></name></expr></argument>, <argument><expr><name><name>value</name>.<name>size</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>! <name>skel</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_fs_base__err_corrupt_fs_revision</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <comment type="block">/* Convert skel to native type. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__parse_revision_skel</name><argument_list>(<argument><expr>&amp;<name>revision</name></expr></argument>, <argument><expr><name>skel</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>revision_p</name> = <name>revision</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Write REVISION to FS as part of TRAIL.  If *REV is a valid revision
   number, write this revision as one that corresponds to *REV, else
   write a new revision and return its newly created revision number
   in *REV.  */</comment>
<function><type><name>svn_error_t</name> *</type>
<name>svn_fs_bdb__put_rev</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name> *</type><name>rev</name></decl></param>,
                    <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>revision_t</name> *</type><name>revision</name></decl></param>,
                    <param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>base_fs_data_t</name> *</type><name>bfd</name> <init>= <expr><name><name>fs</name>-&gt;<name>fsap_data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>db_err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>db_recno_t</name></type> <name>recno</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>skel_t</name> *</type><name>skel</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DBT</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>

  <comment type="block">/* Convert native type to skel. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__unparse_revision_skel</name><argument_list>(<argument><expr>&amp;<name>skel</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr>*<name>rev</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>DBT</name></type> <name>query</name></decl>, <decl><type ref="prev"/><name>result</name></decl>;</decl_stmt>

      <comment type="block">/* Update the filesystem revision with the new skel. */</comment>
      <expr_stmt><expr><name>recno</name> = *<name>rev</name> + 1</expr>;</expr_stmt>
      <expr_stmt><expr><call><name>svn_fs_base__trail_debug</name><argument_list>(<argument><expr><name>trail</name></expr></argument>, <argument><expr>"revisions"</expr></argument>, <argument><expr>"put"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>db_err</name> = <call><name><name>bfd</name>-&gt;<name>revisions</name>-&gt;<name>put</name></name>
        <argument_list>(<argument><expr><name><name>bfd</name>-&gt;<name>revisions</name></name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>db_txn</name></name></expr></argument>,
         <argument><expr><call><name>svn_fs_base__set_dbt</name><argument_list>(<argument><expr>&amp;<name>query</name></expr></argument>, <argument><expr>&amp;<name>recno</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>recno</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><call><name>svn_fs_base__skel_to_dbt</name><argument_list>(<argument><expr>&amp;<name>result</name></expr></argument>, <argument><expr><name>skel</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name>BDB_WRAP</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>"updating filesystem revision"</expr></argument>, <argument><expr><name>db_err</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

  <expr_stmt><expr><call><name>svn_fs_base__trail_debug</name><argument_list>(<argument><expr><name>trail</name></expr></argument>, <argument><expr>"revisions"</expr></argument>, <argument><expr>"put"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>db_err</name> = <call><name><name>bfd</name>-&gt;<name>revisions</name>-&gt;<name>put</name></name><argument_list>(<argument><expr><name><name>bfd</name>-&gt;<name>revisions</name></name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>db_txn</name></name></expr></argument>,
                               <argument><expr><call><name>svn_fs_base__recno_dbt</name><argument_list>(<argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>recno</name></expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><call><name>svn_fs_base__skel_to_dbt</name><argument_list>(<argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>skel</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><name>DB_APPEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>BDB_WRAP</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>"storing filesystem revision"</expr></argument>, <argument><expr><name>db_err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Turn the record number into a Subversion revision number.
     Revisions are numbered starting with zero; Berkeley DB record
     numbers begin with one.  */</comment>
  <expr_stmt><expr>*<name>rev</name> = <name>recno</name> - 1</expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<escape char="0xc"/>
<comment type="block">/* Getting the youngest revision.  */</comment>


<function><type><name>svn_error_t</name> *</type>
<name>svn_fs_bdb__youngest_rev</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name> *</type><name>youngest_p</name></decl></param>,
                         <param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
                         <param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>,
                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>base_fs_data_t</name> *</type><name>bfd</name> <init>= <expr><name><name>fs</name>-&gt;<name>fsap_data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>db_err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DBC</name> *</type><name>cursor</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DBT</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>db_recno_t</name></type> <name>recno</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs__check_fs</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Create a database cursor.  */</comment>
  <expr_stmt><expr><call><name>svn_fs_base__trail_debug</name><argument_list>(<argument><expr><name>trail</name></expr></argument>, <argument><expr>"revisions"</expr></argument>, <argument><expr>"cursor"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>BDB_WRAP</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>"getting youngest revision (creating cursor)"</expr></argument>,
                   <argument><expr><call><name><name>bfd</name>-&gt;<name>revisions</name>-&gt;<name>cursor</name></name><argument_list>(<argument><expr><name><name>bfd</name>-&gt;<name>revisions</name></name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>db_txn</name></name></expr></argument>,
                                          <argument><expr>&amp;<name>cursor</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Find the last entry in the `revisions' table.  */</comment>
  <expr_stmt><expr><name>db_err</name> = <call><name>svn_bdb_dbc_get</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>,
                           <argument><expr><call><name>svn_fs_base__recno_dbt</name><argument_list>(<argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>recno</name></expr></argument>)</argument_list></call></expr></argument>,
                           <argument><expr><call><name>svn_fs_base__nodata_dbt</name><argument_list>(<argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr></argument>,
                           <argument><expr><name>DB_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>db_err</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* Free the cursor.  Ignore any error value --- the error above
         is more interesting.  */</comment>
      <expr_stmt><expr><call><name>svn_bdb_dbc_close</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>db_err</name> == <name>DB_NOTFOUND</name></expr>)</condition><then>
        <comment type="block">/* The revision 0 should always be present, at least.  */</comment>
        <return>return
          <expr><call><name>svn_error_createf</name>
          <argument_list>(<argument><expr><name>SVN_ERR_FS_CORRUPT</name></expr></argument>, <argument><expr>0</expr></argument>,
           <argument><expr>"Corrupt DB: revision 0 missing from 'revisions' table, in "
           "filesystem '%s'"</expr></argument>, <argument><expr><name><name>fs</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>BDB_WRAP</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>"getting youngest revision (finding last entry)"</expr></argument>,
                       <argument><expr><name>db_err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <comment type="block">/* You can't commit a transaction with open cursors, because:
     1) key/value pairs don't get deleted until the cursors referring
     to them are closed, so closing a cursor can fail for various
     reasons, and txn_commit shouldn't fail that way, and
     2) using a cursor after committing its transaction can cause
     undetectable database corruption.  */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>BDB_WRAP</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>"getting youngest revision (closing cursor)"</expr></argument>,
                   <argument><expr><call><name>svn_bdb_dbc_close</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Turn the record number into a Subversion revision number.
     Revisions are numbered starting with zero; Berkeley DB record
     numbers begin with one.  */</comment>
  <expr_stmt><expr>*<name>youngest_p</name> = <name>recno</name> - 1</expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
