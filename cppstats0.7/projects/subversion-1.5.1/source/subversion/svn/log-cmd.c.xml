<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/svn/log-cmd.c"><comment type="block">/*
 * log-cmd.c -- Display log messages
 *
 * ====================================================================
 * Copyright (c) 2000-2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<comment type="block">/* ==================================================================== */</comment>


<escape char="0xc"/>
<comment type="block">/*** Includes. ***/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STDIO</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_want.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_sorts.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_xml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_cmdline.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cl.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>

<escape char="0xc"/>
<comment type="block">/*** Code. ***/</comment>

<comment type="block">/* Baton for log_entry_receiver() and log_entry_receiver_xml(). */</comment>
<struct>struct <name>log_receiver_baton</name>
<block>{
  <comment type="block">/* Check for cancellation on each invocation of a log receiver. */</comment>
  <decl_stmt><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>cancel_baton</name></decl>;</decl_stmt>

  <comment type="block">/* Don't print log message body nor its line count. */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>omit_log_message</name></decl>;</decl_stmt>

  <comment type="block">/* Stack which keeps track of merge revision nesting, using svn_revnum_t's */</comment>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>merge_stack</name></decl>;</decl_stmt>

  <comment type="block">/* Pool for persistent allocations. */</comment>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
}</block>;</struct>


<comment type="block">/* The separator between log messages. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEP_STRING</name></cpp:macro> \
  <cpp:value>"------------------------------------------------------------------------\n"</cpp:value></cpp:define>


<comment type="block">/* Implement `svn_log_entry_receiver_t', printing the logs in
 * a human-readable and machine-parseable format.
 *
 * BATON is of type `struct log_receiver_baton'.
 *
 * First, print a header line.  Then if CHANGED_PATHS is non-null,
 * print all affected paths in a list headed "Changed paths:\n",
 * immediately following the header line.  Then print a newline
 * followed by the message body, unless BATON-&gt;omit_log_message is true.
 *
 * Here are some examples of the output:
 *
 * $ svn log -r1847:1846
 * ------------------------------------------------------------------------
 * rev 1847:  cmpilato | Wed 1 May 2002 15:44:26 | 7 lines
 *
 * Fix for Issue #694.
 *
 * * subversion/libsvn_repos/delta.c
 *   (delta_files): Rework the logic in this function to only call
 * send_text_deltas if there are deltas to send, and within that case,
 * only use a real delta stream if the caller wants real text deltas.
 *
 * ------------------------------------------------------------------------
 * rev 1846:  whoever | Wed 1 May 2002 15:23:41 | 1 line
 *
 * imagine an example log message here
 * ------------------------------------------------------------------------
 *
 * Or:
 *
 * $ svn log -r1847:1846 -v
 * ------------------------------------------------------------------------
 * rev 1847:  cmpilato | Wed 1 May 2002 15:44:26 | 7 lines
 * Changed paths:
 *    M /trunk/subversion/libsvn_repos/delta.c
 *
 * Fix for Issue #694.
 *
 * * subversion/libsvn_repos/delta.c
 *   (delta_files): Rework the logic in this function to only call
 * send_text_deltas if there are deltas to send, and within that case,
 * only use a real delta stream if the caller wants real text deltas.
 *
 * ------------------------------------------------------------------------
 * rev 1846:  whoever | Wed 1 May 2002 15:23:41 | 1 line
 * Changed paths:
 *    M /trunk/notes/fs_dumprestore.txt
 *    M /trunk/subversion/libsvn_repos/dump.c
 *
 * imagine an example log message here
 * ------------------------------------------------------------------------
 *
 * Or:
 *
 * $ svn log -r1847:1846 -q
 * ------------------------------------------------------------------------
 * rev 1847:  cmpilato | Wed 1 May 2002 15:44:26
 * ------------------------------------------------------------------------
 * rev 1846:  whoever | Wed 1 May 2002 15:23:41
 * ------------------------------------------------------------------------
 *
 * Or:
 *
 * $ svn log -r1847:1846 -qv
 * ------------------------------------------------------------------------
 * rev 1847:  cmpilato | Wed 1 May 2002 15:44:26
 * Changed paths:
 *    M /trunk/subversion/libsvn_repos/delta.c
 * ------------------------------------------------------------------------
 * rev 1846:  whoever | Wed 1 May 2002 15:23:41
 * Changed paths:
 *    M /trunk/notes/fs_dumprestore.txt
 *    M /trunk/subversion/libsvn_repos/dump.c
 * ------------------------------------------------------------------------
 *
 */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>log_entry_receiver</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                   <param><decl><type><name>svn_log_entry_t</name> *</type><name>log_entry</name></decl></param>,
                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>log_receiver_baton</name> *</type><name>lb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>author</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>date</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>message</name></decl>;</decl_stmt>

  <comment type="block">/* Number of lines in the msg. */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>lines</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>lb</name>-&gt;<name>cancel_func</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>lb</name>-&gt;<name>cancel_func</name></name><argument_list>(<argument><expr><name><name>lb</name>-&gt;<name>cancel_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <expr_stmt><expr><call><name>svn_compat_log_revprops_out</name><argument_list>(<argument><expr>&amp;<name>author</name></expr></argument>, <argument><expr>&amp;<name>date</name></expr></argument>, <argument><expr>&amp;<name>message</name></expr></argument>, <argument><expr><name><name>log_entry</name>-&gt;<name>revprops</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name><name>log_entry</name>-&gt;<name>revision</name></name> == 0 &amp;&amp; <name>message</name> == <name>NULL</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <if>if <condition>(<expr>! <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name><name>log_entry</name>-&gt;<name>revision</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>apr_array_pop</name><argument_list>(<argument><expr><name><name>lb</name>-&gt;<name>merge_stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
    }</block></then></if>

  <comment type="block">/* ### See http://subversion.tigris.org/issues/show_bug.cgi?id=807
     for more on the fallback fuzzy conversions below. */</comment>

  <if>if <condition>(<expr><name>author</name> == <name>NULL</name></expr>)</condition><then>
    <expr_stmt><expr><name>author</name> = <call><name>_</name><argument_list>(<argument><expr>"(no author)"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr><name>date</name> &amp;&amp; <name><name>date</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then>
    <comment type="block">/* Convert date to a format for humans. */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__time_cstring_to_human_cstring</name><argument_list>(<argument><expr>&amp;<name>date</name></expr></argument>, <argument><expr><name>date</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><name>date</name> = <call><name>_</name><argument_list>(<argument><expr>"(no date)"</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

  <if>if <condition>(<expr>! <name><name>lb</name>-&gt;<name>omit_log_message</name></name> &amp;&amp; <name>message</name> == <name>NULL</name></expr>)</condition><then>
    <expr_stmt><expr><name>message</name> = ""</expr>;</expr_stmt></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
                             <argument><expr><name>SEP_STRING</name> "r%ld | %s | %s"</expr></argument>,
                             <argument><expr><name><name>log_entry</name>-&gt;<name>revision</name></name></expr></argument>, <argument><expr><name>author</name></expr></argument>, <argument><expr><name>date</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>message</name> != <name>NULL</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>lines</name> = <call><name>svn_cstring_count_newlines</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call> + 1</expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
                                 <argument><expr>(<name>lines</name> != 1)
                                 ? " | %d lines"
                                 : " | %d line"</expr></argument>, <argument><expr><name>lines</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"\n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name><name>log_entry</name>-&gt;<name>changed_paths</name></name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>sorted_paths</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

      <comment type="block">/* Get an array of sorted hash keys. */</comment>
      <expr_stmt><expr><name>sorted_paths</name> = <call><name>svn_sort__hash</name><argument_list>(<argument><expr><name><name>log_entry</name>-&gt;<name>changed_paths</name></name></expr></argument>,
                                    <argument><expr><name>svn_sort_compare_items_as_paths</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
                                 <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Changed paths:\n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>sorted_paths</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
          <decl_stmt><decl><type><name>svn_sort__item_t</name> *</type><name>item</name> <init>= <expr>&amp;(<call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>sorted_paths</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
                                                   <argument><expr><name>svn_sort__item_t</name></expr></argument>)</argument_list></call>)</expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name> <init>= <expr><name><name>item</name>-&gt;<name>key</name></name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>svn_log_changed_path_t</name> *</type><name>log_item</name>
            <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>log_entry</name>-&gt;<name>changed_paths</name></name></expr></argument>, <argument><expr><name><name>item</name>-&gt;<name>key</name></name></expr></argument>, <argument><expr><name><name>item</name>-&gt;<name>klen</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copy_data</name> <init>= <expr>""</expr></init></decl>;</decl_stmt>

          <if>if <condition>(<expr><name><name>log_item</name>-&gt;<name>copyfrom_path</name></name>
              &amp;&amp; <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name><name>log_item</name>-&gt;<name>copyfrom_rev</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
              <expr_stmt><expr><name>copy_data</name>
                = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
                               <argument><expr><call><name>_</name><argument_list>(<argument><expr>" (from %s:%ld)"</expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><name><name>log_item</name>-&gt;<name>copyfrom_path</name></name></expr></argument>,
                               <argument><expr><name><name>log_item</name>-&gt;<name>copyfrom_rev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"   %c %s%s\n"</expr></argument>,
                                     <argument><expr><name><name>log_item</name>-&gt;<name>action</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
                                     <argument><expr><name>copy_data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></then></if>

  <if>if <condition>(<expr><name><name>lb</name>-&gt;<name>merge_stack</name>-&gt;<name>nelts</name></name> &gt; 0</expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

      <comment type="block">/* Print the result of merge line */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Merged via:"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>lb</name>-&gt;<name>merge_stack</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
          <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>lb</name>-&gt;<name>merge_stack</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_revnum_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>" r%ld%c"</expr></argument>, <argument><expr><name>rev</name></expr></argument>,
                                     <argument><expr><name>i</name> == <name><name>lb</name>-&gt;<name>merge_stack</name>-&gt;<name>nelts</name></name> - 1 ?
                                                                  '\n' : ','</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></then></if>

  <if>if <condition>(<expr><name>message</name> != <name>NULL</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* A blank line always precedes the log message. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"\n%s\n"</expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name><name>log_entry</name>-&gt;<name>has_children</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name><name>lb</name>-&gt;<name>merge_stack</name></name></expr></argument>, <argument><expr><name>svn_revnum_t</name></expr></argument>)</argument_list></call> = <name><name>log_entry</name>-&gt;<name>revision</name></name></expr>;</expr_stmt></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* This implements `svn_log_entry_receiver_t', printing the logs in XML.
 *
 * BATON is of type `struct log_receiver_baton'.
 *
 * Here is an example of the output; note that the "&lt;log&gt;" and
 * "&lt;/log&gt;" tags are not emitted by this function:
 *
 * $ svn log --xml -r 1648:1649
 * &lt;log&gt;
 * &lt;logentry
 *    revision="1648"&gt;
 * &lt;author&gt;david&lt;/author&gt;
 * &lt;date&gt;2002-04-06T16:34:51.428043Z&lt;/date&gt;
 * &lt;msg&gt; * packages/rpm/subversion.spec : Now requires apache 2.0.36.
 * &lt;/msg&gt;
 * &lt;/logentry&gt;
 * &lt;logentry
 *    revision="1649"&gt;
 * &lt;author&gt;cmpilato&lt;/author&gt;
 * &lt;date&gt;2002-04-06T17:01:28.185136Z&lt;/date&gt;
 * &lt;msg&gt;Fix error handling when the $EDITOR is needed but unavailable.  Ah
 * ... now that&amp;apos;s *much* nicer.
 *
 * * subversion/clients/cmdline/util.c
 *   (svn_cl__edit_externally): Clean up the &amp;quot;no external editor&amp;quot;
 *   error message.
 *   (svn_cl__get_log_message): Wrap &amp;quot;no external editor&amp;quot;
 *   errors with helpful hints about the -m and -F options.
 *
 * * subversion/libsvn_client/commit.c
 *   (svn_client_commit): Actually capture and propogate &amp;quot;no external
 *   editor&amp;quot; errors.&lt;/msg&gt;
 * &lt;/logentry&gt;
 * &lt;/log&gt;
 *
 */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>log_entry_receiver_xml</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                       <param><decl><type><name>svn_log_entry_t</name> *</type><name>log_entry</name></decl></param>,
                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>log_receiver_baton</name> *</type><name>lb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <comment type="block">/* Collate whole log message into sb before printing. */</comment>
  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>sb</name> <init>= <expr><call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>revstr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>author</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>date</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>message</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>lb</name>-&gt;<name>cancel_func</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>lb</name>-&gt;<name>cancel_func</name></name><argument_list>(<argument><expr><name><name>lb</name>-&gt;<name>cancel_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <expr_stmt><expr><call><name>svn_compat_log_revprops_out</name><argument_list>(<argument><expr>&amp;<name>author</name></expr></argument>, <argument><expr>&amp;<name>date</name></expr></argument>, <argument><expr>&amp;<name>message</name></expr></argument>, <argument><expr><name><name>log_entry</name>-&gt;<name>revprops</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>author</name></expr>)</condition><then>
    <expr_stmt><expr><name>author</name> = <call><name>svn_xml_fuzzy_escape</name><argument_list>(<argument><expr><name>author</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <if>if <condition>(<expr><name>date</name></expr>)</condition><then>
    <expr_stmt><expr><name>date</name> = <call><name>svn_xml_fuzzy_escape</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <if>if <condition>(<expr><name>message</name></expr>)</condition><then>
    <expr_stmt><expr><name>message</name> = <call><name>svn_xml_fuzzy_escape</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr><name><name>log_entry</name>-&gt;<name>revision</name></name> == 0 &amp;&amp; <name>message</name> == <name>NULL</name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <if>if <condition>(<expr>! <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name><name>log_entry</name>-&gt;<name>revision</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_xml_make_close_tag</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"logentry"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__error_checked_fputs</name><argument_list>(<argument><expr><name><name>sb</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>apr_array_pop</name><argument_list>(<argument><expr><name><name>lb</name>-&gt;<name>merge_stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
    }</block></then></if>

  <expr_stmt><expr><name>revstr</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%ld"</expr></argument>, <argument><expr><name><name>log_entry</name>-&gt;<name>revision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* &lt;logentry revision="xxx"&gt; */</comment>
  <expr_stmt><expr><call><name>svn_xml_make_open_tag</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>svn_xml_normal</name></expr></argument>, <argument><expr>"logentry"</expr></argument>,
                        <argument><expr>"revision"</expr></argument>, <argument><expr><name>revstr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* &lt;author&gt;xxx&lt;/author&gt; */</comment>
  <expr_stmt><expr><call><name>svn_cl__xml_tagged_cdata</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"author"</expr></argument>, <argument><expr><name>author</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Print the full, uncut, date.  This is machine output. */</comment>
  <comment type="block">/* According to the docs for svn_log_entry_receiver_t, either
     NULL or the empty string represents no date.  Avoid outputting an
     empty date element. */</comment>
  <if>if <condition>(<expr><name>date</name> &amp;&amp; <name><name>date</name><index>[<expr>0</expr>]</index></name> == '\0'</expr>)</condition><then>
    <expr_stmt><expr><name>date</name> = <name>NULL</name></expr>;</expr_stmt></then></if>
  <comment type="block">/* &lt;date&gt;xxx&lt;/date&gt; */</comment>
  <expr_stmt><expr><call><name>svn_cl__xml_tagged_cdata</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"date"</expr></argument>, <argument><expr><name>date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name><name>log_entry</name>-&gt;<name>changed_paths</name></name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> *</type><name>path</name></decl>;</decl_stmt>

      <comment type="block">/* &lt;paths&gt; */</comment>
      <expr_stmt><expr><call><name>svn_xml_make_open_tag</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>svn_xml_normal</name></expr></argument>, <argument><expr>"paths"</expr></argument>,
                            <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>log_entry</name>-&gt;<name>changed_paths</name></name></expr></argument>)</argument_list></call></expr>;</init>
           <condition><expr><name>hi</name> != <name>NULL</name></expr>;</condition>
           <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
        <block>{
          <decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>char</name></type> <name><name>action</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>svn_log_changed_path_t</name> *</type><name>log_item</name></decl>;</decl_stmt>

          <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>(<name>void</name> *) &amp;<name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>log_item</name> = <name>val</name></expr>;</expr_stmt>

          <expr_stmt><expr><name><name>action</name><index>[<expr>0</expr>]</index></name> = <name><name>log_item</name>-&gt;<name>action</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>action</name><index>[<expr>1</expr>]</index></name> = '\0'</expr>;</expr_stmt>
          <if>if <condition>(<expr><name><name>log_item</name>-&gt;<name>copyfrom_path</name></name>
              &amp;&amp; <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name><name>log_item</name>-&gt;<name>copyfrom_rev</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
              <comment type="block">/* &lt;path action="X" copyfrom-path="xxx" copyfrom-rev="xxx"&gt; */</comment>
              <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>escpath</name> <init>= <expr><call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <expr_stmt><expr><call><name>svn_xml_escape_attr_cstring</name><argument_list>(<argument><expr>&amp;<name>escpath</name></expr></argument>,
                                          <argument><expr><name><name>log_item</name>-&gt;<name>copyfrom_path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>revstr</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%ld"</expr></argument>,
                                    <argument><expr><name><name>log_item</name>-&gt;<name>copyfrom_rev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>svn_xml_make_open_tag</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>svn_xml_protect_pcdata</name></expr></argument>, <argument><expr>"path"</expr></argument>,
                                    <argument><expr>"action"</expr></argument>, <argument><expr><name>action</name></expr></argument>,
                                    <argument><expr>"copyfrom-path"</expr></argument>, <argument><expr><name><name>escpath</name>-&gt;<name>data</name></name></expr></argument>,
                                    <argument><expr>"copyfrom-rev"</expr></argument>, <argument><expr><name>revstr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
          <else>else
            <block>{
              <comment type="block">/* &lt;path action="X"&gt; */</comment>
              <expr_stmt><expr><call><name>svn_xml_make_open_tag</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>svn_xml_protect_pcdata</name></expr></argument>, <argument><expr>"path"</expr></argument>,
                                    <argument><expr>"action"</expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
          <comment type="block">/* xxx&lt;/path&gt; */</comment>
          <expr_stmt><expr><call><name>svn_xml_escape_cdata_cstring</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>svn_xml_make_close_tag</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"path"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

      <comment type="block">/* &lt;/paths&gt; */</comment>
      <expr_stmt><expr><call><name>svn_xml_make_close_tag</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"paths"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <if>if <condition>(<expr><name>message</name> != <name>NULL</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* &lt;msg&gt;xxx&lt;/msg&gt; */</comment>
      <expr_stmt><expr><call><name>svn_cl__xml_tagged_cdata</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"msg"</expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <expr_stmt><expr><call><name>svn_compat_log_revprops_clear</name><argument_list>(<argument><expr><name><name>log_entry</name>-&gt;<name>revprops</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name><name>log_entry</name>-&gt;<name>revprops</name></name> &amp;&amp; <call><name>apr_hash_count</name><argument_list>(<argument><expr><name><name>log_entry</name>-&gt;<name>revprops</name></name></expr></argument>)</argument_list></call> &gt; 0</expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_xml_make_open_tag</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>svn_xml_normal</name></expr></argument>, <argument><expr>"revprops"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__print_xml_prop_hash</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name><name>log_entry</name>-&gt;<name>revprops</name></name></expr></argument>,
                                          <argument><expr><name>FALSE</name></expr></argument>, <comment type="block">/* name_only */</comment>
                                          <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>svn_xml_make_close_tag</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"revprops"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <if>if <condition>(<expr><name><name>log_entry</name>-&gt;<name>has_children</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name><name>lb</name>-&gt;<name>merge_stack</name></name></expr></argument>, <argument><expr><name>svn_revnum_t</name></expr></argument>)</argument_list></call> = <name><name>log_entry</name>-&gt;<name>revision</name></name></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><call><name>svn_xml_make_close_tag</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"logentry"</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__error_checked_fputs</name><argument_list>(<argument><expr><name><name>sb</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* This implements the `svn_opt_subcommand_t' interface. */</comment>
<function><type><name>svn_error_t</name> *</type>
<name>svn_cl__log</name><parameter_list>(<param><decl><type><name>apr_getopt_t</name> *</type><name>os</name></decl></param>,
            <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_cl__opt_state_t</name> *</type><name>opt_state</name> <init>= <expr>((<name>svn_cl__cmd_baton_t</name> *) <name>baton</name>)-&gt;<name>opt_state</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name> <init>= <expr>((<name>svn_cl__cmd_baton_t</name> *) <name>baton</name>)-&gt;<name>ctx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>targets</name></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>log_receiver_baton</name></type> <name>lb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_opt_revision_t</name></type> <name>peg_revision</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>true_path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>revprops</name></decl>;</decl_stmt>

  <if>if <condition>(<expr>!<name><name>opt_state</name>-&gt;<name>xml</name></name></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>all_revprops</name></name></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CL_ARG_PARSING_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                <argument><expr><call><name>_</name><argument_list>(<argument><expr>"'with-all-revprops' option only valid in"
                                  " XML mode"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
      <if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>revprop_table</name></name> != <name>NULL</name></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CL_ARG_PARSING_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                <argument><expr><call><name>_</name><argument_list>(<argument><expr>"'with-revprop' option only valid in"
                                  " XML mode"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
    }</block></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__args_to_target_array_print_reserved</name><argument_list>(<argument><expr>&amp;<name>targets</name></expr></argument>, <argument><expr><name>os</name></expr></argument>,
                                                      <argument><expr><name><name>opt_state</name>-&gt;<name>targets</name></name></expr></argument>, 
                                                      <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Add "." if user passed 0 arguments */</comment>
  <expr_stmt><expr><call><name>svn_opt_push_implicit_dot_target</name><argument_list>(<argument><expr><name>targets</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>target</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>targets</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Determine if they really want a two-revision range. */</comment>
  <if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>used_change_arg</name></name></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>start_revision</name>.<name>value</name>.<name>number</name></name> &lt; 
          <name><name>opt_state</name>-&gt;<name>end_revision</name>.<name>value</name>.<name>number</name></name></expr>)</condition><then>
        <expr_stmt><expr><name><name>opt_state</name>-&gt;<name>start_revision</name></name> = <name><name>opt_state</name>-&gt;<name>end_revision</name></name></expr>;</expr_stmt></then>
      <else>else
        <expr_stmt><expr><name><name>opt_state</name>-&gt;<name>end_revision</name></name> = <name><name>opt_state</name>-&gt;<name>start_revision</name></name></expr>;</expr_stmt></else></if>
    }</block></then></if>

  <comment type="block">/* Strip peg revision if targets contains an URI. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_opt_parse_path</name><argument_list>(<argument><expr>&amp;<name>peg_revision</name></expr></argument>, <argument><expr>&amp;<name>true_path</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>targets</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>true_path</name></expr>;</expr_stmt>

  <if>if <condition>(<expr>(<name><name>opt_state</name>-&gt;<name>start_revision</name>.<name>kind</name></name> != <name>svn_opt_revision_unspecified</name>)
      &amp;&amp; (<name><name>opt_state</name>-&gt;<name>end_revision</name>.<name>kind</name></name> == <name>svn_opt_revision_unspecified</name>)</expr>)</condition><then>
    <block>{
      <comment type="block">/* If the user specified exactly one revision, then start rev is
         set but end is not.  We show the log message for just that
         revision by making end equal to start.

         Note that if the user requested a single dated revision, then
         this will cause the same date to be resolved twice.  The
         extra code complexity to get around this slight inefficiency
         doesn't seem worth it, however.  */</comment>

      <expr_stmt><expr><name><name>opt_state</name>-&gt;<name>end_revision</name></name> = <name><name>opt_state</name>-&gt;<name>start_revision</name></name></expr>;</expr_stmt>
    }</block></then>
  <else>else <if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>start_revision</name>.<name>kind</name></name> == <name>svn_opt_revision_unspecified</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* Default to any specified peg revision.  Otherwise, if the
         first target is an URL, then we default to HEAD:0.  Lastly,
         the default is BASE:0 since WC@HEAD may not exist. */</comment>
      <if>if <condition>(<expr><name><name>peg_revision</name>.<name>kind</name></name> == <name>svn_opt_revision_unspecified</name></expr>)</condition><then>
        <block>{
          <if>if <condition>(<expr><call><name>svn_path_is_url</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><name><name>opt_state</name>-&gt;<name>start_revision</name>.<name>kind</name></name> = <name>svn_opt_revision_head</name></expr>;</expr_stmt></then>
          <else>else
            <expr_stmt><expr><name><name>opt_state</name>-&gt;<name>start_revision</name>.<name>kind</name></name> = <name>svn_opt_revision_base</name></expr>;</expr_stmt></else></if>
        }</block></then>
      <else>else
        <expr_stmt><expr><name><name>opt_state</name>-&gt;<name>start_revision</name></name> = <name>peg_revision</name></expr>;</expr_stmt></else></if>

      <if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>end_revision</name>.<name>kind</name></name> == <name>svn_opt_revision_unspecified</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name><name>opt_state</name>-&gt;<name>end_revision</name>.<name>kind</name></name> = <name>svn_opt_revision_number</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>opt_state</name>-&gt;<name>end_revision</name>.<name>value</name>.<name>number</name></name> = 0</expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if></else></if>

  <if>if <condition>(<expr><call><name>svn_path_is_url</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <for>for (<init><expr><name>i</name> = 1</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>targets</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
          <expr_stmt><expr><name>target</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>targets</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <if>if <condition>(<expr><call><name>svn_path_is_url</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_UNSUPPORTED_FEATURE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                    <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Only relative paths can be specified "
                                      "after a URL"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
        }</block></for>
    }</block></then></if>

  <expr_stmt><expr><name><name>lb</name>.<name>cancel_func</name></name> = <name><name>ctx</name>-&gt;<name>cancel_func</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lb</name>.<name>cancel_baton</name></name> = <name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lb</name>.<name>omit_log_message</name></name> = <name><name>opt_state</name>-&gt;<name>quiet</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lb</name>.<name>merge_stack</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_revnum_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lb</name>.<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>

  <if>if <condition>(<expr>! <name><name>opt_state</name>-&gt;<name>quiet</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name>svn_cl__get_notifier</name><argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>notify_func2</name></name></expr></argument>, <argument><expr>&amp;<name><name>ctx</name>-&gt;<name>notify_baton2</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                         <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>xml</name></name></expr>)</condition><then>
    <block>{
      <comment type="block">/* If output is not incremental, output the XML header and wrap
         everything in a top-level element. This makes the output in
         its entirety a well-formed XML document. */</comment>
      <if>if <condition>(<expr>! <name><name>opt_state</name>-&gt;<name>incremental</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__xml_print_header</name><argument_list>(<argument><expr>"log"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>all_revprops</name></name></expr>)</condition><then>
        <expr_stmt><expr><name>revprops</name> = <name>NULL</name></expr>;</expr_stmt></then>
      <else>else <if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>revprop_table</name></name> != <name>NULL</name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
          <expr_stmt><expr><name>revprops</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
                                    <argument><expr><call><name>apr_hash_count</name><argument_list>(<argument><expr><name><name>opt_state</name>-&gt;<name>revprop_table</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>opt_state</name>-&gt;<name>revprop_table</name></name></expr></argument>)</argument_list></call></expr>;</init>
               <condition><expr><name>hi</name> != <name>NULL</name></expr>;</condition>
               <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
            <block>{
              <decl_stmt><decl><type><name>char</name> *</type><name>property</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>svn_string_t</name> *</type><name>value</name></decl>;</decl_stmt>
              <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>(<name>void</name> *)&amp;<name>property</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>(<name>void</name> *)&amp;<name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <if>if <condition>(<expr><name>value</name> &amp;&amp; <name><name>value</name>-&gt;<name>data</name><index>[<expr>0</expr>]</index></name> != '\0'</expr>)</condition><then>
                <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_CL_ARG_PARSING_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                         <argument><expr><call><name>_</name><argument_list>(<argument><expr>"cannot assign with 'with-revprop'"
                                           " option (drop the '=')"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
              <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>revprops</name></expr></argument>, <argument><expr><name>char</name> *</expr></argument>)</argument_list></call> = <name>property</name></expr>;</expr_stmt>
            }</block></for>
        }</block></then>
      <else>else
        <block>{
          <expr_stmt><expr><name>revprops</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>revprops</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>SVN_PROP_REVISION_AUTHOR</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>revprops</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>SVN_PROP_REVISION_DATE</name></expr>;</expr_stmt>
          <if>if <condition>(<expr>!<name><name>opt_state</name>-&gt;<name>quiet</name></name></expr>)</condition><then>
            <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>revprops</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>SVN_PROP_REVISION_LOG</name></expr>;</expr_stmt></then></if>
        }</block></else></if></else></if>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client_log4</name><argument_list>(<argument><expr><name>targets</name></expr></argument>,
                              <argument><expr>&amp;<name>peg_revision</name></expr></argument>,
                              <argument><expr>&amp;(<name><name>opt_state</name>-&gt;<name>start_revision</name></name>)</expr></argument>,
                              <argument><expr>&amp;(<name><name>opt_state</name>-&gt;<name>end_revision</name></name>)</expr></argument>,
                              <argument><expr><name><name>opt_state</name>-&gt;<name>limit</name></name></expr></argument>,
                              <argument><expr><name><name>opt_state</name>-&gt;<name>verbose</name></name></expr></argument>,
                              <argument><expr><name><name>opt_state</name>-&gt;<name>stop_on_copy</name></name></expr></argument>,
                              <argument><expr><name><name>opt_state</name>-&gt;<name>use_merge_history</name></name></expr></argument>,
                              <argument><expr><name>revprops</name></expr></argument>,
                              <argument><expr><name>log_entry_receiver_xml</name></expr></argument>,
                              <argument><expr>&amp;<name>lb</name></expr></argument>,
                              <argument><expr><name>ctx</name></expr></argument>,
                              <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr>! <name><name>opt_state</name>-&gt;<name>incremental</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__xml_print_footer</name><argument_list>(<argument><expr>"log"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></then>
  <else>else  <comment type="block">/* default output format */</comment>
    <block>{
      <expr_stmt><expr><name>revprops</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>revprops</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>SVN_PROP_REVISION_AUTHOR</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>revprops</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>SVN_PROP_REVISION_DATE</name></expr>;</expr_stmt>
      <if>if <condition>(<expr>!<name><name>opt_state</name>-&gt;<name>quiet</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>revprops</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>SVN_PROP_REVISION_LOG</name></expr>;</expr_stmt></then></if>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client_log4</name><argument_list>(<argument><expr><name>targets</name></expr></argument>,
                              <argument><expr>&amp;<name>peg_revision</name></expr></argument>,
                              <argument><expr>&amp;(<name><name>opt_state</name>-&gt;<name>start_revision</name></name>)</expr></argument>,
                              <argument><expr>&amp;(<name><name>opt_state</name>-&gt;<name>end_revision</name></name>)</expr></argument>,
                              <argument><expr><name><name>opt_state</name>-&gt;<name>limit</name></name></expr></argument>,
                              <argument><expr><name><name>opt_state</name>-&gt;<name>verbose</name></name></expr></argument>,
                              <argument><expr><name><name>opt_state</name>-&gt;<name>stop_on_copy</name></name></expr></argument>,
                              <argument><expr><name><name>opt_state</name>-&gt;<name>use_merge_history</name></name></expr></argument>,
                              <argument><expr><name>revprops</name></expr></argument>,
                              <argument><expr><name>log_entry_receiver</name></expr></argument>,
                              <argument><expr>&amp;<name>lb</name></expr></argument>,
                              <argument><expr><name>ctx</name></expr></argument>,
                              <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr>! <name><name>opt_state</name>-&gt;<name>incremental</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>SEP_STRING</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></else></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
