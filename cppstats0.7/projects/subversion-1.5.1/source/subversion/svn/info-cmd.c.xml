<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/svn/info-cmd.c"><comment type="block">/*
 * info-cmd.c -- Display information about a resource
 *
 * ====================================================================
 * Copyright (c) 2000-2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<comment type="block">/* ==================================================================== */</comment>


<escape char="0xc"/>
<comment type="block">/*** Includes. ***/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_cmdline.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_wc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error_codes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_xml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cl.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>

<escape char="0xc"/>
<comment type="block">/*** Code. ***/</comment>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>svn_cl__info_print_time</name><parameter_list>(<param><decl><type><name>apr_time_t</name></type> <name>atime</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>desc</name></decl></param>,
                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>time_utf8</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>time_utf8</name> = <call><name>svn_time_to_human_cstring</name><argument_list>(<argument><expr><name>atime</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s: %s\n"</expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>time_utf8</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Return string representation of SCHEDULE */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>schedule_str</name><parameter_list>(<param><decl><type><name>svn_wc_schedule_t</name></type> <name>schedule</name></decl></param>)</parameter_list>
<block>{
  <switch>switch <condition>(<expr><name>schedule</name></expr>)</condition>
    <block>{
    <case>case <expr><name>svn_wc_schedule_normal</name></expr>:
      <return>return <expr>"normal"</expr>;</return>
    </case><case>case <expr><name>svn_wc_schedule_add</name></expr>:
      <return>return <expr>"add"</expr>;</return>
    </case><case>case <expr><name>svn_wc_schedule_delete</name></expr>:
      <return>return <expr>"delete"</expr>;</return>
    </case><case>case <expr><name>svn_wc_schedule_replace</name></expr>:
      <return>return <expr>"replace"</expr>;</return>
    </case><default>default:
      <return>return <expr>"none"</expr>;</return>
    </default>}</block></switch>
}</block></function>


<comment type="block">/* A callback of type svn_info_receiver_t.
   Prints svn info in xml mode to standard out */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>print_info_xml</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
               <param><decl><type><specifier>const</specifier> <name>svn_info_t</name> *</type><name>info</name></decl></param>,
               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>sb</name> <init>= <expr><call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rev_str</name></decl>;</decl_stmt>

  <comment type="block">/* If revision is invalid, assume WC is corrupt. */</comment>
  <if>if <condition>(<expr><call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>rev</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <expr_stmt><expr><name>rev_str</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%ld"</expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>rev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_WC_CORRUPT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s' has invalid revision"</expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></else></if>

  <comment type="block">/* "&lt;entry ...&gt;" */</comment>
  <expr_stmt><expr><call><name>svn_xml_make_open_tag</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>svn_xml_normal</name></expr></argument>, <argument><expr>"entry"</expr></argument>,
                        <argument><expr>"path"</expr></argument>, <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr>"kind"</expr></argument>, <argument><expr><call><name>svn_cl__node_kind_str</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>kind</name></name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr>"revision"</expr></argument>, <argument><expr><name>rev_str</name></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>svn_cl__xml_tagged_cdata</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"url"</expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>URL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name><name>info</name>-&gt;<name>repos_root_URL</name></name> || <name><name>info</name>-&gt;<name>repos_UUID</name></name></expr>)</condition><then>
    <block>{
      <comment type="block">/* "&lt;repository&gt;" */</comment>
      <expr_stmt><expr><call><name>svn_xml_make_open_tag</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>svn_xml_normal</name></expr></argument>, <argument><expr>"repository"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* "&lt;root&gt; xx &lt;/root&gt;" */</comment>
      <expr_stmt><expr><call><name>svn_cl__xml_tagged_cdata</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"root"</expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>repos_root_URL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* "&lt;uuid&gt; xx &lt;/uuid&gt;" */</comment>
      <expr_stmt><expr><call><name>svn_cl__xml_tagged_cdata</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"uuid"</expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>repos_UUID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* "&lt;/repository&gt;" */</comment>
      <expr_stmt><expr><call><name>svn_xml_make_close_tag</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"repository"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <if>if <condition>(<expr><name><name>info</name>-&gt;<name>has_wc_info</name></name></expr>)</condition><then>
    <block>{
      <comment type="block">/* "&lt;wc-info&gt;" */</comment>
      <expr_stmt><expr><call><name>svn_xml_make_open_tag</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>svn_xml_normal</name></expr></argument>, <argument><expr>"wc-info"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* "&lt;schedule&gt; xx &lt;/schedule&gt;" */</comment>
      <expr_stmt><expr><call><name>svn_cl__xml_tagged_cdata</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"schedule"</expr></argument>,
                               <argument><expr><call><name>schedule_str</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>schedule</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* "&lt;depth&gt; xx &lt;/depth&gt;" */</comment>
      <expr_stmt><expr><call><name>svn_cl__xml_tagged_cdata</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"depth"</expr></argument>,
                               <argument><expr><call><name>svn_depth_to_word</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>depth</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* "&lt;copy-from-url&gt; xx &lt;/copy-from-url&gt;" */</comment>
      <expr_stmt><expr><call><name>svn_cl__xml_tagged_cdata</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"copy-from-url"</expr></argument>,
                               <argument><expr><name><name>info</name>-&gt;<name>copyfrom_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* "&lt;copy-from-rev&gt; xx &lt;/copy-from-rev&gt;" */</comment>
      <if>if <condition>(<expr><call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>copyfrom_rev</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><call><name>svn_cl__xml_tagged_cdata</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"copy-from-rev"</expr></argument>,
                                 <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%ld"</expr></argument>,
                                              <argument><expr><name><name>info</name>-&gt;<name>copyfrom_rev</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <comment type="block">/* "&lt;text-updated&gt; xx &lt;/text-updated&gt;" */</comment>
      <if>if <condition>(<expr><name><name>info</name>-&gt;<name>text_time</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>svn_cl__xml_tagged_cdata</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"text-updated"</expr></argument>,
                                 <argument><expr><call><name>svn_time_to_cstring</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>text_time</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <comment type="block">/* "&lt;prop-updated&gt; xx &lt;/prop-updated&gt;" */</comment>
      <if>if <condition>(<expr><name><name>info</name>-&gt;<name>prop_time</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>svn_cl__xml_tagged_cdata</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"prop-updated"</expr></argument>,
                                 <argument><expr><call><name>svn_time_to_cstring</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>prop_time</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <comment type="block">/* "&lt;checksum&gt; xx &lt;/checksum&gt;" */</comment>
      <expr_stmt><expr><call><name>svn_cl__xml_tagged_cdata</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"checksum"</expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>checksum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name><name>info</name>-&gt;<name>changelist</name></name></expr>)</condition><then>
        <comment type="block">/* "&lt;changelist&gt; xx &lt;/changelist&gt;" */</comment>
        <expr_stmt><expr><call><name>svn_cl__xml_tagged_cdata</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"changelist"</expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>changelist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <comment type="block">/* "&lt;/wc-info&gt;" */</comment>
      <expr_stmt><expr><call><name>svn_xml_make_close_tag</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"wc-info"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <if>if <condition>(<expr><name><name>info</name>-&gt;<name>last_changed_author</name></name>
      || <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>last_changed_rev</name></name></expr></argument>)</argument_list></call>
      || <name><name>info</name>-&gt;<name>last_changed_date</name></name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_cl__print_xml_commit</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>last_changed_rev</name></name></expr></argument>,
                               <argument><expr><name><name>info</name>-&gt;<name>last_changed_author</name></name></expr></argument>,
                               <argument><expr><call><name>svn_time_to_cstring</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>last_changed_date</name></name></expr></argument>,
                                                   <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <if>if <condition>(<expr><name><name>info</name>-&gt;<name>conflict_old</name></name> || <name><name>info</name>-&gt;<name>conflict_wrk</name></name>
      || <name><name>info</name>-&gt;<name>conflict_new</name></name> || <name><name>info</name>-&gt;<name>prejfile</name></name></expr>)</condition><then>
    <block>{
      <comment type="block">/* "&lt;conflict&gt;" */</comment>
      <expr_stmt><expr><call><name>svn_xml_make_open_tag</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>svn_xml_normal</name></expr></argument>, <argument><expr>"conflict"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* "&lt;prev-base-file&gt; xx &lt;/prev-base-file&gt;" */</comment>
      <expr_stmt><expr><call><name>svn_cl__xml_tagged_cdata</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"prev-base-file"</expr></argument>,
                               <argument><expr><name><name>info</name>-&gt;<name>conflict_old</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* "&lt;prev-wc-file&gt; xx &lt;/prev-wc-file&gt;" */</comment>
      <expr_stmt><expr><call><name>svn_cl__xml_tagged_cdata</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"prev-wc-file"</expr></argument>,
                               <argument><expr><name><name>info</name>-&gt;<name>conflict_wrk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* "&lt;cur-base-file&gt; xx &lt;/cur-base-file&gt;" */</comment>
      <expr_stmt><expr><call><name>svn_cl__xml_tagged_cdata</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"cur-base-file"</expr></argument>,
                               <argument><expr><name><name>info</name>-&gt;<name>conflict_new</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* "&lt;prop-file&gt; xx &lt;/prop-file&gt;" */</comment>
      <expr_stmt><expr><call><name>svn_cl__xml_tagged_cdata</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"prop-file"</expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>prejfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* "&lt;/conflict&gt;" */</comment>
      <expr_stmt><expr><call><name>svn_xml_make_close_tag</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"conflict"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <if>if <condition>(<expr><name><name>info</name>-&gt;<name>lock</name></name></expr>)</condition><then>
    <block>{
      <comment type="block">/* "&lt;lock&gt;" */</comment>
      <expr_stmt><expr><call><name>svn_xml_make_open_tag</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>svn_xml_normal</name></expr></argument>, <argument><expr>"lock"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* "&lt;token&gt; xx &lt;/token&gt;" */</comment>
      <expr_stmt><expr><call><name>svn_cl__xml_tagged_cdata</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"token"</expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>lock</name>-&gt;<name>token</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* "&lt;owner&gt; xx &lt;/owner&gt;" */</comment>
      <expr_stmt><expr><call><name>svn_cl__xml_tagged_cdata</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"owner"</expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>lock</name>-&gt;<name>owner</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* "&lt;comment ...&gt; xxxx &lt;/comment&gt;" */</comment>
      <expr_stmt><expr><call><name>svn_cl__xml_tagged_cdata</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"comment"</expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>lock</name>-&gt;<name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* "&lt;created&gt; xx &lt;/created&gt;" */</comment>
      <expr_stmt><expr><call><name>svn_cl__xml_tagged_cdata</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"created"</expr></argument>,
                               <argument><expr><call><name>svn_time_to_cstring</name>
                               <argument_list>(<argument><expr><name><name>info</name>-&gt;<name>lock</name>-&gt;<name>creation_date</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* "&lt;expires&gt; xx &lt;/expires&gt;" */</comment>
      <expr_stmt><expr><call><name>svn_cl__xml_tagged_cdata</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"expires"</expr></argument>,
                               <argument><expr><call><name>svn_time_to_cstring</name>
                               <argument_list>(<argument><expr><name><name>info</name>-&gt;<name>lock</name>-&gt;<name>expiration_date</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* "&lt;/lock&gt;" */</comment>
      <expr_stmt><expr><call><name>svn_xml_make_close_tag</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"lock"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <comment type="block">/* "&lt;/entry&gt;" */</comment>
  <expr_stmt><expr><call><name>svn_xml_make_close_tag</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"entry"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>svn_cl__error_checked_fputs</name><argument_list>(<argument><expr><name><name>sb</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<comment type="block">/* A callback of type svn_info_receiver_t. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>print_info</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
           <param><decl><type><specifier>const</specifier> <name>svn_info_t</name> *</type><name>info</name></decl></param>,
           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Path: %s\n"</expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* ### remove this someday:  it's only here for cmdline output
     compatibility with svn 1.1 and older.  */</comment>
  <if>if <condition>(<expr><name><name>info</name>-&gt;<name>kind</name></name> != <name>svn_node_dir</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Name: %s\n"</expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><call><name>svn_path_basename</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr><name><name>info</name>-&gt;<name>URL</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"URL: %s\n"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>URL</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr><name><name>info</name>-&gt;<name>repos_root_URL</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Repository Root: %s\n"</expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><name><name>info</name>-&gt;<name>repos_root_URL</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr><name><name>info</name>-&gt;<name>repos_UUID</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Repository UUID: %s\n"</expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><name><name>info</name>-&gt;<name>repos_UUID</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr><call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>rev</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Revision: %ld\n"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>rev</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <switch>switch <condition>(<expr><name><name>info</name>-&gt;<name>kind</name></name></expr>)</condition>
    <block>{
    <case>case <expr><name>svn_node_file</name></expr>:
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Node Kind: file\n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    </case><case>case <expr><name>svn_node_dir</name></expr>:
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Node Kind: directory\n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    </case><case>case <expr><name>svn_node_none</name></expr>:
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Node Kind: none\n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    </case><case>case <expr><name>svn_node_unknown</name></expr>:
    </case><default>default:
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Node Kind: unknown\n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </default>}</block></switch>

  <if>if <condition>(<expr><name><name>info</name>-&gt;<name>has_wc_info</name></name></expr>)</condition><then>
    <block>{
      <switch>switch <condition>(<expr><name><name>info</name>-&gt;<name>schedule</name></name></expr>)</condition>
        <block>{
        <case>case <expr><name>svn_wc_schedule_normal</name></expr>:
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Schedule: normal\n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>

        </case><case>case <expr><name>svn_wc_schedule_add</name></expr>:
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Schedule: add\n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>

        </case><case>case <expr><name>svn_wc_schedule_delete</name></expr>:
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Schedule: delete\n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>

        </case><case>case <expr><name>svn_wc_schedule_replace</name></expr>:
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Schedule: replace\n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>

        </case><default>default:
          <break>break;</break>
        </default>}</block></switch>

      <switch>switch <condition>(<expr><name><name>info</name>-&gt;<name>depth</name></name></expr>)</condition>
        <block>{
        <case>case <expr><name>svn_depth_unknown</name></expr>:
          <comment type="block">/* Unknown depth is the norm for remote directories anyway
             (although infinity would be equally appropriate).  Let's
             not bother to print it. */</comment>
          <break>break;</break>

        </case><case>case <expr><name>svn_depth_empty</name></expr>:
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Depth: empty\n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>

        </case><case>case <expr><name>svn_depth_files</name></expr>:
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Depth: files\n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>

        </case><case>case <expr><name>svn_depth_immediates</name></expr>:
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Depth: immediates\n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>

        </case><case>case <expr><name>svn_depth_infinity</name></expr>:
          <comment type="block">/* Infinity is the default depth for working copy
             directories.  Let's not print it, it's not special enough
             to be worth mentioning.  */</comment>
          <break>break;</break>

        </case><default>default:
          <comment type="block">/* Other depths should never happen here. */</comment>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Depth: INVALID\n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </default>}</block></switch>

      <if>if <condition>(<expr><name><name>info</name>-&gt;<name>copyfrom_url</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Copied From URL: %s\n"</expr></argument>)</argument_list></call></expr></argument>,
                                   <argument><expr><name><name>info</name>-&gt;<name>copyfrom_url</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <if>if <condition>(<expr><call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>copyfrom_rev</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Copied From Rev: %ld\n"</expr></argument>)</argument_list></call></expr></argument>,
                                   <argument><expr><name><name>info</name>-&gt;<name>copyfrom_rev</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></then></if>

  <if>if <condition>(<expr><name><name>info</name>-&gt;<name>last_changed_author</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Last Changed Author: %s\n"</expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><name><name>info</name>-&gt;<name>last_changed_author</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr><call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>last_changed_rev</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Last Changed Rev: %ld\n"</expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><name><name>info</name>-&gt;<name>last_changed_rev</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr><name><name>info</name>-&gt;<name>last_changed_date</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__info_print_time</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>last_changed_date</name></name></expr></argument>,
                                    <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Last Changed Date"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr><name><name>info</name>-&gt;<name>has_wc_info</name></name></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><name><name>info</name>-&gt;<name>text_time</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__info_print_time</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>text_time</name></name></expr></argument>,
                                        <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Text Last Updated"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <if>if <condition>(<expr><name><name>info</name>-&gt;<name>prop_time</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__info_print_time</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>prop_time</name></name></expr></argument>,
                                        <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Properties Last Updated"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <if>if <condition>(<expr><name><name>info</name>-&gt;<name>checksum</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Checksum: %s\n"</expr></argument>)</argument_list></call></expr></argument>,
                                   <argument><expr><name><name>info</name>-&gt;<name>checksum</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <if>if <condition>(<expr><name><name>info</name>-&gt;<name>conflict_old</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
                                   <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Conflict Previous Base File: %s\n"</expr></argument>)</argument_list></call></expr></argument>,
                                   <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>conflict_old</name></name></expr></argument>,
                                                        <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <if>if <condition>(<expr><name><name>info</name>-&gt;<name>conflict_wrk</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name>
                <argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Conflict Previous Working File: %s\n"</expr></argument>)</argument_list></call></expr></argument>,
                 <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>conflict_wrk</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <if>if <condition>(<expr><name><name>info</name>-&gt;<name>conflict_new</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
                                   <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Conflict Current Base File: %s\n"</expr></argument>)</argument_list></call></expr></argument>,
                                   <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>conflict_new</name></name></expr></argument>,
                                                        <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <if>if <condition>(<expr><name><name>info</name>-&gt;<name>prejfile</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Conflict Properties File: %s\n"</expr></argument>)</argument_list></call></expr></argument>,
                                   <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>prejfile</name></name></expr></argument>,
                                                        <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></then></if>

  <if>if <condition>(<expr><name><name>info</name>-&gt;<name>lock</name></name></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><name><name>info</name>-&gt;<name>lock</name>-&gt;<name>token</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Lock Token: %s\n"</expr></argument>)</argument_list></call></expr></argument>,
                                   <argument><expr><name><name>info</name>-&gt;<name>lock</name>-&gt;<name>token</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <if>if <condition>(<expr><name><name>info</name>-&gt;<name>lock</name>-&gt;<name>owner</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Lock Owner: %s\n"</expr></argument>)</argument_list></call></expr></argument>,
                                   <argument><expr><name><name>info</name>-&gt;<name>lock</name>-&gt;<name>owner</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <if>if <condition>(<expr><name><name>info</name>-&gt;<name>lock</name>-&gt;<name>creation_date</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__info_print_time</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>lock</name>-&gt;<name>creation_date</name></name></expr></argument>,
                                        <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Lock Created"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <if>if <condition>(<expr><name><name>info</name>-&gt;<name>lock</name>-&gt;<name>expiration_date</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__info_print_time</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>lock</name>-&gt;<name>expiration_date</name></name></expr></argument>,
                                        <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Lock Expires"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <if>if <condition>(<expr><name><name>info</name>-&gt;<name>lock</name>-&gt;<name>comment</name></name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>int</name></type> <name>comment_lines</name></decl>;</decl_stmt>
          <comment type="block">/* NOTE: The stdio will handle newline translation. */</comment>
          <expr_stmt><expr><name>comment_lines</name> = <call><name>svn_cstring_count_newlines</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>lock</name>-&gt;<name>comment</name></name></expr></argument>)</argument_list></call> + 1</expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
                                     <argument><expr>(<name>comment_lines</name> != 1)
                                     ? <call><name>_</name><argument_list>(<argument><expr>"Lock Comment (%i lines):\n%s\n"</expr></argument>)</argument_list></call>
                                     : <call><name>_</name><argument_list>(<argument><expr>"Lock Comment (%i line):\n%s\n"</expr></argument>)</argument_list></call></expr></argument>,
                                     <argument><expr><name>comment_lines</name></expr></argument>,
                                     <argument><expr><name><name>info</name>-&gt;<name>lock</name>-&gt;<name>comment</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

  <if>if <condition>(<expr><name><name>info</name>-&gt;<name>changelist</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Changelist: %s\n"</expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><name><name>info</name>-&gt;<name>changelist</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <comment type="block">/* Print extra newline separator. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"\n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* This implements the `svn_opt_subcommand_t' interface. */</comment>
<function><type><name>svn_error_t</name> *</type>
<name>svn_cl__info</name><parameter_list>(<param><decl><type><name>apr_getopt_t</name> *</type><name>os</name></decl></param>,
             <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_cl__opt_state_t</name> *</type><name>opt_state</name> <init>= <expr>((<name>svn_cl__cmd_baton_t</name> *) <name>baton</name>)-&gt;<name>opt_state</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name> <init>= <expr>((<name>svn_cl__cmd_baton_t</name> *) <name>baton</name>)-&gt;<name>ctx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>targets</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_opt_revision_t</name></type> <name>peg_revision</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_info_receiver_t</name></type> <name>receiver</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__args_to_target_array_print_reserved</name><argument_list>(<argument><expr>&amp;<name>targets</name></expr></argument>, <argument><expr><name>os</name></expr></argument>, 
                                                      <argument><expr><name><name>opt_state</name>-&gt;<name>targets</name></name></expr></argument>, 
                                                      <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Add "." if user passed 0 arguments. */</comment>
  <expr_stmt><expr><call><name>svn_opt_push_implicit_dot_target</name><argument_list>(<argument><expr><name>targets</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>xml</name></name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>receiver</name> = <name>print_info_xml</name></expr>;</expr_stmt>

      <comment type="block">/* If output is not incremental, output the XML header and wrap
         everything in a top-level element. This makes the output in
         its entirety a well-formed XML document. */</comment>
      <if>if <condition>(<expr>! <name><name>opt_state</name>-&gt;<name>incremental</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__xml_print_header</name><argument_list>(<argument><expr>"info"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></then>
  <else>else
    <block>{
      <expr_stmt><expr><name>receiver</name> = <name>print_info</name></expr>;</expr_stmt>

      <if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>incremental</name></name></expr>)</condition><then>
        <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CL_ARG_PARSING_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                <argument><expr><call><name>_</name><argument_list>(<argument><expr>"'incremental' option only valid in XML "
                                  "mode"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
    }</block></else></if>

  <if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>depth</name></name> == <name>svn_depth_unknown</name></expr>)</condition><then>
    <expr_stmt><expr><name><name>opt_state</name>-&gt;<name>depth</name></name> = <name>svn_depth_empty</name></expr>;</expr_stmt></then></if>

  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>targets</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>truepath</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>targets</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__check_cancel</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Get peg revisions. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_opt_parse_path</name><argument_list>(<argument><expr>&amp;<name>peg_revision</name></expr></argument>, <argument><expr>&amp;<name>truepath</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* If no peg-rev was attached to a URL target, then assume HEAD. */</comment>
      <if>if <condition>(<expr>(<call><name>svn_path_is_url</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call>)
          &amp;&amp; (<name><name>peg_revision</name>.<name>kind</name></name> == <name>svn_opt_revision_unspecified</name>)</expr>)</condition><then>
        <expr_stmt><expr><name><name>peg_revision</name>.<name>kind</name></name> = <name>svn_opt_revision_head</name></expr>;</expr_stmt></then></if>

      <expr_stmt><expr><name>err</name> = <call><name>svn_client_info2</name><argument_list>(<argument><expr><name>truepath</name></expr></argument>, 
                             <argument><expr>&amp;<name>peg_revision</name></expr></argument>, <argument><expr>&amp;(<name><name>opt_state</name>-&gt;<name>start_revision</name></name>)</expr></argument>,
                             <argument><expr><name>receiver</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>opt_state</name>-&gt;<name>depth</name></name></expr></argument>,
                             <argument><expr><name><name>opt_state</name>-&gt;<name>changelists</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* If one of the targets is a non-existent URL or wc-entry,
         don't bail out.  Just warn and move on to the next target. */</comment>
      <if>if <condition>(<expr><name>err</name> &amp;&amp; <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_UNVERSIONED_RESOURCE</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_fprintf</name>
                  <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>,
                   <argument><expr><call><name>_</name><argument_list>(<argument><expr>"%s:  (Not a versioned resource)\n\n"</expr></argument>)</argument_list></call></expr></argument>,
                   <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <continue>continue;</continue>
        }</block></then>
      <else>else <if>if <condition>(<expr><name>err</name> &amp;&amp; <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_RA_ILLEGAL_URL</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_fprintf</name>
                  <argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>,
                   <argument><expr><call><name>_</name><argument_list>(<argument><expr>"%s:  (Not a valid URL)\n\n"</expr></argument>)</argument_list></call></expr></argument>,
                   <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <continue>continue;</continue>
        }</block></then>
      <else>else <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
        <return>return <expr><name>err</name></expr>;</return></then></if></else></if></else></if>

    }</block></for>
  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>xml</name></name> &amp;&amp; (! <name><name>opt_state</name>-&gt;<name>incremental</name></name>)</expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__xml_print_footer</name><argument_list>(<argument><expr>"info"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
