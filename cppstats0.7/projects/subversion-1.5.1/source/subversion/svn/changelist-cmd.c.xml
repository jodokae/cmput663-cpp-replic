<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/svn/changelist-cmd.c"><comment type="block">/*
 * changelist-cmd.c -- Associate (or deassociate) a wc path with a changelist.
 *
 * ====================================================================
 * Copyright (c) 2006-2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<comment type="block">/* ==================================================================== */</comment>


<escape char="0xc"/>
<comment type="block">/*** Includes. ***/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error_codes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cl.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>

<escape char="0xc"/>
<comment type="block">/*** Code. ***/</comment>


<comment type="block">/* This implements the `svn_opt_subcommand_t' interface. */</comment>
<function><type><name>svn_error_t</name> *</type>
<name>svn_cl__changelist</name><parameter_list>(<param><decl><type><name>apr_getopt_t</name> *</type><name>os</name></decl></param>,
                   <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>changelist_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_cl__opt_state_t</name> *</type><name>opt_state</name> <init>= <expr>((<name>svn_cl__cmd_baton_t</name> *) <name>baton</name>)-&gt;<name>opt_state</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name> <init>= <expr>((<name>svn_cl__cmd_baton_t</name> *) <name>baton</name>)-&gt;<name>ctx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>targets</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_depth_t</name></type> <name>depth</name> <init>= <expr><name><name>opt_state</name>-&gt;<name>depth</name></name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* If we're not removing changelists, then our first argument should
     be the name of a changelist. */</comment>

  <if>if <condition>(<expr>! <name><name>opt_state</name>-&gt;<name>remove</name></name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>args</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_opt_parse_num_args</name><argument_list>(<argument><expr>&amp;<name>args</name></expr></argument>, <argument><expr><name>os</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>changelist_name</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_utf_cstring_to_utf8</name><argument_list>(<argument><expr>&amp;<name>changelist_name</name></expr></argument>, 
                                      <argument><expr><name>changelist_name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <comment type="block">/* Parse the remaining arguments as paths. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__args_to_target_array_print_reserved</name><argument_list>(<argument><expr>&amp;<name>targets</name></expr></argument>, <argument><expr><name>os</name></expr></argument>, 
                                                      <argument><expr><name><name>opt_state</name>-&gt;<name>targets</name></name></expr></argument>, 
                                                      <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Changelist has no implicit dot-target `.', so don't you put that
     code here! */</comment>
  <if>if <condition>(<expr>! <name><name>targets</name>-&gt;<name>nelts</name></name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CL_INSUFFICIENT_ARGS</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <if>if <condition>(<expr>! <name><name>opt_state</name>-&gt;<name>quiet</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name>svn_cl__get_notifier</name><argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>notify_func2</name></name></expr></argument>, <argument><expr>&amp;<name><name>ctx</name>-&gt;<name>notify_baton2</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
                         <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <comment type="block">/* FIXME: This is required because svn_client_create_context()
       always initializes ctx-&gt;notify_func2 to a wrapper function
       which calls ctx-&gt;notify_func() if it isn't NULL.  In other
       words, typically, ctx-&gt;notify_func2 is never NULL.  This isn't
       usually a problem, but the changelist logic generates
       svn_error_t's as part of its notification.  

       So, svn_wc_set_changelist() checks its notify_func (our
       ctx-&gt;notify_func2) for NULL-ness, and seeing non-NULL-ness,
       generates a notificaton object and svn_error_t to describe some
       problem.  It passes that off to its notify_func (our
       ctx-&gt;notify_func2) which drops the notification on the floor
       (because it wraps a NULL ctx-&gt;notify_func).  But svn_error_t's
       dropped on the floor cause SEGFAULTs at pool cleanup time --
       they need instead to be cleared. 

       SOOOooo... we set our ctx-&gt;notify_func2 to NULL so the WC code
       doesn't even generate the errors.  */</comment>
    <expr_stmt><expr><name><name>ctx</name>-&gt;<name>notify_func2</name></name> = <name>NULL</name></expr>;</expr_stmt></else></if>

  <if>if <condition>(<expr><name>depth</name> == <name>svn_depth_unknown</name></expr>)</condition><then>
    <expr_stmt><expr><name>depth</name> = <name>svn_depth_empty</name></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr><name>changelist_name</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__try</name>
              <argument_list>(<argument><expr><call><name>svn_client_add_to_changelist</name><argument_list>(<argument><expr><name>targets</name></expr></argument>, <argument><expr><name>changelist_name</name></expr></argument>,
                                            <argument><expr><name>depth</name></expr></argument>, <argument><expr><name><name>opt_state</name>-&gt;<name>changelists</name></name></expr></argument>,
                                            <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
               <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>opt_state</name>-&gt;<name>quiet</name></name></expr></argument>,
               <argument><expr><name>SVN_ERR_UNVERSIONED_RESOURCE</name></expr></argument>,
               <argument><expr><name>SVN_ERR_WC_PATH_NOT_FOUND</name></expr></argument>,
               <argument><expr><name>SVN_NO_ERROR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__try</name>
              <argument_list>(<argument><expr><call><name>svn_client_remove_from_changelists</name><argument_list>(<argument><expr><name>targets</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, 
                                                  <argument><expr><name><name>opt_state</name>-&gt;<name>changelists</name></name></expr></argument>,
                                                  <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
               <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>opt_state</name>-&gt;<name>quiet</name></name></expr></argument>,
               <argument><expr><name>SVN_ERR_UNVERSIONED_RESOURCE</name></expr></argument>,
               <argument><expr><name>SVN_ERR_WC_PATH_NOT_FOUND</name></expr></argument>,
               <argument><expr><name>SVN_NO_ERROR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>


  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
