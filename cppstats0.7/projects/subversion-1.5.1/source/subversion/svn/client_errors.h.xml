<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/svn/client_errors.h"><comment type="block">/*
 * client_errors.h:  error codes this command line client features
 *
 * ====================================================================
 * Copyright (c) 2000-2004 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<comment type="block">/* ==================================================================== */</comment>


<escape char="0xc"/>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVN_CLIENT_ERRORS_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CLIENT_ERRORS_H</name></cpp:macro></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<comment type="block">/*
 * This error defining system is copied from and explained in
 * ../../include/svn_error_codes.h
 */</comment>

<comment type="block">/* Process this file if we're building an error array, or if we have
   not defined the enumerated constants yet.  */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SVN_ERROR_BUILD_ARRAY</name></expr></argument>)</argument_list></call> || !<call><name>defined</name><argument_list>(<argument><expr><name>SVN_CMDLINE_ERROR_ENUM_DEFINED</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SVN_ERROR_BUILD_ARRAY</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_ERROR_START</name></cpp:macro> \
        <cpp:value>static const err_defn error_table[] = { \
          { SVN_ERR_CDMLINE__WARNING, "Warning" },</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_ERRDEF</name><parameter_list>(<param><type><name>n</name></type></param>, <param><type><name>s</name></type></param>)</parameter_list></cpp:macro> <cpp:value>{ n, s },</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_ERROR_END</name></cpp:macro> <cpp:value>{ 0, NULL } };</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SVN_CMDLINE_ERROR_ENUM_DEFINED</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_ERROR_START</name></cpp:macro> \
        <cpp:value>typedef enum svn_client_errno_t { \
          SVN_ERR_CDMLINE__WARNING = SVN_ERR_LAST + 1,</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_ERRDEF</name><parameter_list>(<param><type><name>n</name></type></param>, <param><type><name>s</name></type></param>)</parameter_list></cpp:macro> <cpp:value>n,</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_ERROR_END</name></cpp:macro> <cpp:value>SVN_ERR_CMDLINE__ERR_LAST } svn_client_errno_t;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CMDLINE_ERROR_ENUM_DEFINED</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Define custom command line client error numbers */</comment>

<decl_stmt><decl><type><name>SVN_ERROR_START</name></type>

  <comment type="block">/* BEGIN Client errors */</comment>

<name>SVN_ERRDEF</name><argument_list>(<argument><expr><name>SVN_ERR_CMDLINE__TMPFILE_WRITE</name></expr></argument>,
           <argument><expr>"Failed writing to temporary file."</expr></argument>)</argument_list>

       <name>SVN_ERRDEF</name><argument_list>(<argument><expr><name>SVN_ERR_CMDLINE__TMPFILE_STAT</name></expr></argument>,
                  <argument><expr>"Failed getting info about temporary file."</expr></argument>)</argument_list>

       <name>SVN_ERRDEF</name><argument_list>(<argument><expr><name>SVN_ERR_CMDLINE__TMPFILE_OPEN</name></expr></argument>,
                  <argument><expr>"Failed opening temporary file."</expr></argument>)</argument_list>

  <comment type="block">/* END Client errors */</comment>


<name>SVN_ERROR_END</name></decl></decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SVN_ERROR_START</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SVN_ERRDEF</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SVN_ERROR_END</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SVN_ERROR_BUILD_ARRAY || !SVN_CMDLINE_ERROR_ENUM_DEFINED */</comment>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SVN_CLIENT_ERRORS_H */</comment>
</unit>
