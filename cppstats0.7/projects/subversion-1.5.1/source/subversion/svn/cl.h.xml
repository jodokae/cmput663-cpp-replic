<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/svn/cl.h"><comment type="block">/*
 * cl.h:  shared stuff in the command line program
 *
 * ====================================================================
 * Copyright (c) 2000-2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<comment type="block">/* ==================================================================== */</comment>


<escape char="0xc"/>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVN_CL_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CL_H</name></cpp:macro></cpp:define>

<comment type="block">/*** Includes. ***/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_tables.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_getopt.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_wc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_auth.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_cmdline.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<escape char="0xc"/>
<comment type="block">/*** Option processing ***/</comment>

<comment type="block">/* --accept actions */</comment>
<typedef>typedef <type><enum>enum
<block>{
  <comment type="block">/* invalid accept action */</comment>
  <decl><name>svn_cl__accept_invalid</name> <init>= <expr>-2</expr></init></decl>,

  <comment type="block">/* unspecified accept action */</comment>
  <decl><name>svn_cl__accept_unspecified</name> <init>= <expr>-1</expr></init></decl>,

  <comment type="block">/* Leave conflicts alone, for later resolution. */</comment>
  <decl><name>svn_cl__accept_postpone</name></decl>,

  <comment type="block">/* Resolve the conflict with the pre-conflict base file. */</comment>
  <decl><name>svn_cl__accept_base</name></decl>,

  <comment type="block">/* Resolve the conflict with the current working file. */</comment>
  <decl><name>svn_cl__accept_working</name></decl>,

  <comment type="block">/* Resolve the conflicted hunks by choosing the corresponding text
     from the pre-conflict working copy file.

     Note: this is a placeholder, not actually implemented in 1.5. */</comment>
  <decl><name>svn_cl__accept_mine_conflict</name></decl>,

  <comment type="block">/* Resolve the conflicted hunks by choosing the corresponding text
     from the post-conflict base copy file.
     
     Note: this is a placeholder, not actually implemented in 1.5. */</comment>
  <decl><name>svn_cl__accept_theirs_conflict</name></decl>,

  <comment type="block">/* Resolve the conflict by taking the entire pre-conflict working
     copy file. */</comment>
  <decl><name>svn_cl__accept_mine_full</name></decl>,

  <comment type="block">/* Resolve the conflict by taking the entire post-conflict base file. */</comment>
  <decl><name>svn_cl__accept_theirs_full</name></decl>,

  <comment type="block">/* Launch user's editor and resolve conflict with edited file. */</comment>
  <decl><name>svn_cl__accept_edit</name></decl>,

  <comment type="block">/* Launch user's resolver and resolve conflict with edited file. */</comment>
  <decl><name>svn_cl__accept_launch</name></decl>,
}</block></enum></type> <name>svn_cl__accept_t</name>;</typedef>

<comment type="block">/* --accept action user input words */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CL__ACCEPT_POSTPONE</name></cpp:macro> <cpp:value>"postpone"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CL__ACCEPT_BASE</name></cpp:macro> <cpp:value>"base"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CL__ACCEPT_WORKING</name></cpp:macro> <cpp:value>"working"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CL__ACCEPT_MINE_CONFLICT</name></cpp:macro> <cpp:value>"mine-conflict"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CL__ACCEPT_THEIRS_CONFLICT</name></cpp:macro> <cpp:value>"theirs-conflict"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CL__ACCEPT_MINE_FULL</name></cpp:macro> <cpp:value>"mine-full"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CL__ACCEPT_THEIRS_FULL</name></cpp:macro> <cpp:value>"theirs-full"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CL__ACCEPT_EDIT</name></cpp:macro> <cpp:value>"edit"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CL__ACCEPT_LAUNCH</name></cpp:macro> <cpp:value>"launch"</cpp:value></cpp:define>

<comment type="block">/* Return svn_cl__accept_t value corresponding to word. */</comment>
<function_decl><type><name>svn_cl__accept_t</name></type>
<name>svn_cl__accept_from_word</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>word</name></decl></param>)</parameter_list>;</function_decl>

<escape char="0xc"/>
<comment type="block">/*** Mergeinfo flavors. ***/</comment>

<comment type="block">/* --show-revs values */</comment>
<typedef>typedef <type><enum>enum <block>{
  <decl><name>svn_cl__show_revs_invalid</name> <init>= <expr>-1</expr></init></decl>,
  <decl><name>svn_cl__show_revs_merged</name></decl>,
  <decl><name>svn_cl__show_revs_eligible</name></decl>
}</block></enum></type> <name>svn_cl__show_revs_t</name>;</typedef>

<comment type="block">/* --show-revs user input words */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CL__SHOW_REVS_MERGED</name></cpp:macro>   <cpp:value>"merged"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CL__SHOW_REVS_ELIGIBLE</name></cpp:macro> <cpp:value>"eligible"</cpp:value></cpp:define>

<comment type="block">/* Return svn_cl__show_revs_t value corresponding to word. */</comment>
<function_decl><type><name>svn_cl__show_revs_t</name></type>
<name>svn_cl__show_revs_from_word</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>word</name></decl></param>)</parameter_list>;</function_decl>

<escape char="0xc"/>
<comment type="block">/*** Command dispatch. ***/</comment>

<comment type="block">/* Hold results of option processing that are shared by multiple
   commands. */</comment>
<typedef>typedef <type><struct>struct <name>svn_cl__opt_state_t</name>
<block>{
  <comment type="block">/* An array of svn_opt_revision_range_t *'s representing revisions
     ranges indicated on the command-line via the -r and -c options.
     For each range in the list, if only one revision was provided
     (-rN), its 'end' member remains `svn_opt_revision_unspecified'.

     NOTE: This is currently used only by merge subcommand. */</comment>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>revision_ranges</name></decl>;</decl_stmt>

  <comment type="block">/* These are simply a copy of the range start and end values present
     in the first item of the revision_ranges list. */</comment>
  <decl_stmt><decl><type><name>svn_opt_revision_t</name></type> <name>start_revision</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_opt_revision_t</name></type> <name>end_revision</name></decl>;</decl_stmt>

  <comment type="block">/* Flag which is only set if the '-c' option was used. */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>used_change_arg</name></decl>;</decl_stmt>

  <comment type="block">/* Max number of log messages to get back from svn_client_log2. */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>limit</name></decl>;</decl_stmt>

  <comment type="block">/* After option processing is done, reflects the switch actually
     given on the command line, or svn_depth_unknown if none. */</comment>
  <decl_stmt><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl>;</decl_stmt>

  <comment type="block">/* Was --no-unlock specified? */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>no_unlock</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>message</name></decl>;</decl_stmt>           <comment type="block">/* log message */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ancestor_path</name></decl>;</decl_stmt>     <comment type="block">/* ### todo: who sets this? */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>force</name></decl>;</decl_stmt>           <comment type="block">/* be more forceful, as in "svn rm -f ..." */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>force_log</name></decl>;</decl_stmt>       <comment type="block">/* force validity of a suspect log msg file */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>incremental</name></decl>;</decl_stmt>     <comment type="block">/* yield output suitable for concatenation */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>quiet</name></decl>;</decl_stmt>           <comment type="block">/* sssh...avoid unnecessary output */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>non_interactive</name></decl>;</decl_stmt> <comment type="block">/* do no interactive prompting */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>version</name></decl>;</decl_stmt>         <comment type="block">/* print version information */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>verbose</name></decl>;</decl_stmt>         <comment type="block">/* be verbose */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>update</name></decl>;</decl_stmt>          <comment type="block">/* contact the server for the full story */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>strict</name></decl>;</decl_stmt>          <comment type="block">/* do strictly what was requested */</comment>
  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>filedata</name></decl>;</decl_stmt>     <comment type="block">/* contents of file used as option data */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>encoding</name></decl>;</decl_stmt>          <comment type="block">/* the locale/encoding of the data*/</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>help</name></decl>;</decl_stmt>            <comment type="block">/* print usage message */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>auth_username</name></decl>;</decl_stmt>     <comment type="block">/* auth username */</comment> <comment type="block">/* UTF-8! */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>auth_password</name></decl>;</decl_stmt>     <comment type="block">/* auth password */</comment> <comment type="block">/* UTF-8! */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>extensions</name></decl>;</decl_stmt>        <comment type="block">/* subprocess extension args */</comment> <comment type="block">/* UTF-8! */</comment>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>targets</name></decl>;</decl_stmt>   <comment type="block">/* target list from file */</comment> <comment type="block">/* UTF-8! */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>xml</name></decl>;</decl_stmt>             <comment type="block">/* output in xml, e.g., "svn log --xml" */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>no_ignore</name></decl>;</decl_stmt>       <comment type="block">/* disregard default ignores &amp; svn:ignore's */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>no_auth_cache</name></decl>;</decl_stmt>   <comment type="block">/* do not cache authentication information */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>no_diff_deleted</name></decl>;</decl_stmt> <comment type="block">/* do not show diffs for deleted files */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>notice_ancestry</name></decl>;</decl_stmt> <comment type="block">/* notice ancestry for diff-y operations */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl>;</decl_stmt> <comment type="block">/* ignore ancestry for merge-y operations */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>ignore_externals</name></decl>;</decl_stmt><comment type="block">/* ignore externals definitions */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>stop_on_copy</name></decl>;</decl_stmt>    <comment type="block">/* don't cross copies during processing */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>dry_run</name></decl>;</decl_stmt>         <comment type="block">/* try operation but make no changes */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>revprop</name></decl>;</decl_stmt>         <comment type="block">/* operate on a revision property */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>diff_cmd</name></decl>;</decl_stmt>          <comment type="block">/* the external diff command to use */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>merge_cmd</name></decl>;</decl_stmt>         <comment type="block">/* the external merge command to use */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>editor_cmd</name></decl>;</decl_stmt>        <comment type="block">/* external editor command. */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>record_only</name></decl>;</decl_stmt>     <comment type="block">/* whether to record mergeinfo */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>old_target</name></decl>;</decl_stmt>        <comment type="block">/* diff target */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>new_target</name></decl>;</decl_stmt>        <comment type="block">/* diff target */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>relocate</name></decl>;</decl_stmt>        <comment type="block">/* rewrite urls (svn switch) */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>config_dir</name></decl>;</decl_stmt>        <comment type="block">/* over-riding configuration directory */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>autoprops</name></decl>;</decl_stmt>       <comment type="block">/* enable automatic properties */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>no_autoprops</name></decl>;</decl_stmt>    <comment type="block">/* disable automatic properties */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>native_eol</name></decl>;</decl_stmt>        <comment type="block">/* override system standard eol marker */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>summarize</name></decl>;</decl_stmt>       <comment type="block">/* create a summary of a diff */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>remove</name></decl>;</decl_stmt>          <comment type="block">/* deassociate a changelist */</comment>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>changelists</name></decl>;</decl_stmt> <comment type="block">/* changelist filters */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>changelist</name></decl>;</decl_stmt>        <comment type="block">/* operate on this changelist
                                    THIS IS TEMPORARY (LAST OF CHANGELISTS) */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>keep_changelists</name></decl>;</decl_stmt><comment type="block">/* don't remove changelists after commit */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>keep_local</name></decl>;</decl_stmt>      <comment type="block">/* delete path only from repository */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>all_revprops</name></decl>;</decl_stmt>    <comment type="block">/* retrieve all props */</comment>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>revprop_table</name></decl>;</decl_stmt>     <comment type="block">/* table of revision properties to get/set */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>parents</name></decl>;</decl_stmt>         <comment type="block">/* create intermediate directories */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>use_merge_history</name></decl>;</decl_stmt> <comment type="block">/* use/display extra merge information */</comment>
  <decl_stmt><decl><type><name>svn_cl__accept_t</name></type> <name>accept_which</name></decl>;</decl_stmt> <comment type="block">/* how to handle conflicts */</comment>
  <decl_stmt><decl><type><name>svn_cl__show_revs_t</name></type> <name>show_revs</name></decl>;</decl_stmt> <comment type="block">/* mergeinfo flavor */</comment>
  <decl_stmt><decl><type><name>svn_depth_t</name></type> <name>set_depth</name></decl>;</decl_stmt>         <comment type="block">/* new sticky ambient depth value */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>reintegrate</name></decl>;</decl_stmt>     <comment type="block">/* use "reintegrate" merge-source heuristic */</comment>
}</block></struct></type> <name>svn_cl__opt_state_t</name>;</typedef>


<typedef>typedef <type><struct>struct
<block>{
  <decl_stmt><decl><type><name>svn_cl__opt_state_t</name> *</type><name>opt_state</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl>;</decl_stmt>
}</block></struct></type> <name>svn_cl__cmd_baton_t</name>;</typedef>


<comment type="block">/* Declare all the command procedures */</comment>
<decl_stmt><decl><type><name>svn_opt_subcommand_t</name></type>
  <name>svn_cl__add</name></decl>,
  <decl><type ref="prev"/><name>svn_cl__blame</name></decl>,
  <decl><type ref="prev"/><name>svn_cl__cat</name></decl>,
  <decl><type ref="prev"/><name>svn_cl__changelist</name></decl>,
  <decl><type ref="prev"/><name>svn_cl__checkout</name></decl>,
  <decl><type ref="prev"/><name>svn_cl__cleanup</name></decl>,
  <decl><type ref="prev"/><name>svn_cl__commit</name></decl>,
  <decl><type ref="prev"/><name>svn_cl__copy</name></decl>,
  <decl><type ref="prev"/><name>svn_cl__delete</name></decl>,
  <decl><type ref="prev"/><name>svn_cl__diff</name></decl>,
  <decl><type ref="prev"/><name>svn_cl__export</name></decl>,
  <decl><type ref="prev"/><name>svn_cl__help</name></decl>,
  <decl><type ref="prev"/><name>svn_cl__import</name></decl>,
  <decl><type ref="prev"/><name>svn_cl__info</name></decl>,
  <decl><type ref="prev"/><name>svn_cl__lock</name></decl>,
  <decl><type ref="prev"/><name>svn_cl__log</name></decl>,
  <decl><type ref="prev"/><name>svn_cl__list</name></decl>,
  <decl><type ref="prev"/><name>svn_cl__merge</name></decl>,
  <decl><type ref="prev"/><name>svn_cl__mergeinfo</name></decl>,
  <decl><type ref="prev"/><name>svn_cl__mkdir</name></decl>,
  <decl><type ref="prev"/><name>svn_cl__move</name></decl>,
  <decl><type ref="prev"/><name>svn_cl__propdel</name></decl>,
  <decl><type ref="prev"/><name>svn_cl__propedit</name></decl>,
  <decl><type ref="prev"/><name>svn_cl__propget</name></decl>,
  <decl><type ref="prev"/><name>svn_cl__proplist</name></decl>,
  <decl><type ref="prev"/><name>svn_cl__propset</name></decl>,
  <decl><type ref="prev"/><name>svn_cl__revert</name></decl>,
  <decl><type ref="prev"/><name>svn_cl__resolve</name></decl>,
  <decl><type ref="prev"/><name>svn_cl__resolved</name></decl>,
  <decl><type ref="prev"/><name>svn_cl__status</name></decl>,
  <decl><type ref="prev"/><name>svn_cl__switch</name></decl>,
  <decl><type ref="prev"/><name>svn_cl__unlock</name></decl>,
  <decl><type ref="prev"/><name>svn_cl__update</name></decl>;</decl_stmt>


<comment type="block">/* See definition in main.c for documentation. */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>svn_opt_subcommand_desc2_t</name></type> <name><name>svn_cl__cmd_table</name><index>[]</index></name></decl>;</decl_stmt>

<comment type="block">/* See definition in main.c for documentation. */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>svn_cl__global_options</name><index>[]</index></name></decl>;</decl_stmt>

<comment type="block">/* See definition in main.c for documentation. */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>apr_getopt_option_t</name></type> <name><name>svn_cl__options</name><index>[]</index></name></decl>;</decl_stmt>

<escape char="0xc"/>
<comment type="block">/* A helper for the many subcommands that wish to merely warn when
 * invoked on an unversioned, nonexistent, or otherwise innocuously
 * errorful resource.  Meant to be wrapped with SVN_ERR().
 *
 * If ERR is null, return SVN_NO_ERROR, setting *SUCCESS to TRUE
 * if SUCCESS is not NULL.
 *
 * Else if ERR-&gt;apr_err is one of the error codes supplied in varargs,
 * then handle ERR as a warning (unless QUIET is true), clear ERR, and
 * return SVN_NO_ERROR, setting *SUCCESS to FALSE if SUCCESS is not
 * NULL.
 *
 * Else return ERR, setting *SUCCESS to FALSE if SUCCESS is not NULL.
 *
 * Typically, error codes like SVN_ERR_UNVERSIONED_RESOURCE,
 * SVN_ERR_ENTRY_NOT_FOUND, etc, are supplied in varargs.  Don't
 * forget to terminate the argument list with SVN_NO_ERROR.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_cl__try</name><parameter_list>(<param><decl><type><name>svn_error_t</name> *</type><name>err</name></decl></param>,
            <param><decl><type><name>svn_boolean_t</name> *</type><name>success</name></decl></param>,
            <param><decl><type><name>svn_boolean_t</name></type> <name>quiet</name></decl></param>,
            <param><decl><type>...</type></decl></param>)</parameter_list>;</function_decl>

<escape char="0xc"/>
<comment type="block">/* Our cancellation callback. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_cl__check_cancel</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list>;</function_decl>


<escape char="0xc"/>
<comment type="block">/* Various conflict-resolution callbacks. */</comment>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>svn_cl__accept_t</name></type> <name>accept_which</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>config</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>editor_cmd</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>external_failed</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_cmdline_prompt_baton_t</name> *</type><name>pb</name></decl>;</decl_stmt>
}</block></struct></type> <name>svn_cl__conflict_baton_t</name>;</typedef>

<comment type="block">/* Return address of newly allocated and initialized
   svn_cl__conflict_baton_t. */</comment>
<function_decl><type><name>svn_cl__conflict_baton_t</name> *</type>
<name>svn_cl__conflict_baton_make</name><parameter_list>(<param><decl><type><name>svn_cl__accept_t</name></type> <name>accept_which</name></decl></param>,
                            <param><decl><type><name>apr_hash_t</name> *</type><name>config</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>editor_cmd</name></decl></param>,
                            <param><decl><type><name>svn_cmdline_prompt_baton_t</name> *</type><name>pb</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* A conflict-resolution callback which prompts the user to choose
   one of the 3 fulltexts, edit the merged file on the spot, or just
   skip the conflict (to be resolved later). */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_cl__conflict_handler</name><parameter_list>(<param><decl><type><name>svn_wc_conflict_result_t</name> **</type><name>result</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>svn_wc_conflict_description_t</name> *</type><name>desc</name></decl></param>,
                         <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<escape char="0xc"/>
<comment type="block">/*** Command-line output functions -- printing to the user. ***/</comment>

<comment type="block">/* Print out commit information found in COMMIT_INFO to the console.
 * POOL is used for temporay allocations. 
 * COMMIT_INFO should not be NULL. 
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_cl__print_commit_info</name><parameter_list>(<param><decl><type><name>svn_commit_info_t</name> *</type><name>commit_info</name></decl></param>,
                                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Convert the date in DATA to a human-readable UTF-8-encoded string
 * *HUMAN_CSTRING, or set the latter to "(invalid date)" if DATA is not
 * a valid date.  DATA should be as expected by svn_time_from_cstring().
 *
 * Do all allocations in POOL.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_cl__time_cstring_to_human_cstring</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>human_cstring</name></decl></param>,
                                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>,
                                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Print STATUS for PATH to stdout for human consumption.  Prints in
   abbreviated format by default, or DETAILED format if flag is set.

   When DETAILED is set, use SHOW_LAST_COMMITTED to toggle display of
   the last-committed-revision and last-committed-author.

   If SKIP_UNRECOGNIZED is TRUE, this function will not print out
   unversioned items found in the working copy.

   When DETAILED is set, and REPOS_LOCKS is set, treat missing repository locks
   as broken WC locks. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_cl__print_status</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                  <param><decl><type><name>svn_wc_status2_t</name> *</type><name>status</name></decl></param>,
                                  <param><decl><type><name>svn_boolean_t</name></type> <name>detailed</name></decl></param>,
                                  <param><decl><type><name>svn_boolean_t</name></type> <name>show_last_committed</name></decl></param>,
                                  <param><decl><type><name>svn_boolean_t</name></type> <name>skip_unrecognized</name></decl></param>,
                                  <param><decl><type><name>svn_boolean_t</name></type> <name>repos_locks</name></decl></param>,
                                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Print STATUS for PATH in XML to stdout.  Use POOL for temporary
   allocations. */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_cl__print_status_xml</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                         <param><decl><type><name>svn_wc_status2_t</name> *</type><name>status</name></decl></param>,
                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Print a hash that maps property names (char *) to property values
   (svn_string_t *).  The names are assumed to be in UTF-8 format;
   the values are either in UTF-8 (the special Subversion props) or
   plain binary values.

   If NAMES_ONLY is true, print just names, else print names and
   values. */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_cl__print_prop_hash</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>prop_hash</name></decl></param>,
                        <param><decl><type><name>svn_boolean_t</name></type> <name>names_only</name></decl></param>,
                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Print a single xml property name-value pair to OUTSTR.  If OUTSTR is NULL,
   allocate it first from pool, otherwise append the xml to it.  Escape
   property values which are not xml safe, as determined by
   svn_xml_is_xml_safe(). */</comment>
<function_decl><type><name>void</name></type>
<name>svn_cl__print_xml_prop</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> **</type><name>outstr</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>propname</name></decl></param>,
                       <param><decl><type><name>svn_string_t</name> *</type><name>propval</name></decl></param>,
                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Same as svn_cl__print_prop_hash(), only output xml to OUTSTR.  If OUTSTR is
   NULL, allocate it first from pool, otherwise append the xml to it. */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_cl__print_xml_prop_hash</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> **</type><name>outstr</name></decl></param>,
                            <param><decl><type><name>apr_hash_t</name> *</type><name>prop_hash</name></decl></param>,
                            <param><decl><type><name>svn_boolean_t</name></type> <name>names_only</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Output a commit xml element to OUTSTR.  IF OUTSTR is NULL, allocate it
   first from pool, otherwise appen the xml to it.  If AUTHOR or DATE is
   NULL, it will be omitted. */</comment>
<function_decl><type><name>void</name></type>
<name>svn_cl__print_xml_commit</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> **</type><name>outstr</name></decl></param>,
                         <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>author</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>date</name></decl></param>,
                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Do the following things that are commonly required before accessing revision
   properties.  Ensure that REVISION is specified explicitly and is not
   relative to a working-copy item.  Ensure that exactly one target is
   specified in TARGETS.  Set *URL to the URL of the target.  Return an
   appropriate error if any of those checks or operations fail.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_cl__revprop_prepare</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision</name></decl></param>,
                        <param><decl><type><name>apr_array_header_t</name> *</type><name>targets</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>URL</name></decl></param>,
                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Search for a text editor command in standard environment variables,
   and invoke it to edit CONTENTS (using a temporary file created in
   directory BASE_DIR).  Return the new contents in *EDITED_CONTENTS,
   or set *EDITED_CONTENTS to NULL if no edit was performed.

   If EDITOR_CMD is not NULL, it is the name of the external editor
   command to use, overriding anything else that might determine the
   editor.

   If TMPFILE_LEFT is NULL, the temporary file will be destroyed.
   Else, the file will be left on disk, and its path returned in
   *TMPFILE_LEFT.

   CONFIG is a hash of svn_config_t * items keyed on a configuration
   category (SVN_CONFIG_CATEGORY_CONFIG et al), and may be NULL.

   If AS_TEXT is TRUE, recode CONTENTS and convert to native eol-style before
   editing and back again afterwards.  In this case, ENCODING determines the
   encoding used during editing.  If non-NULL, use the named encoding, else
   use the system encoding.  If AS_TEXT is FALSE, don't do any translation.
   In that case, ENCODING is ignored.

   Use POOL for all allocations.  Use PREFIX as the prefix for the
   temporary file used by the editor.

   If return error, *EDITED_CONTENTS is not touched. */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_cl__edit_string_externally</name><parameter_list>(<param><decl><type><name>svn_string_t</name> **</type><name>edited_contents</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>tmpfile_left</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>editor_cmd</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_dir</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>contents</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prefix</name></decl></param>,
                               <param><decl><type><name>apr_hash_t</name> *</type><name>config</name></decl></param>,
                               <param><decl><type><name>svn_boolean_t</name></type> <name>as_text</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>encoding</name></decl></param>,
                               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Search for a text editor command in standard environment variables,
   and invoke it to edit PATH.  Use POOL for all allocations.

   If EDITOR_CMD is not NULL, it is the name of the external editor
   command to use, overriding anything else that might determine the
   editor.

   CONFIG is a hash of svn_config_t * items keyed on a configuration
   category (SVN_CONFIG_CATEGORY_CONFIG et al), and may be NULL.  */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_cl__edit_file_externally</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>editor_cmd</name></decl></param>,
                             <param><decl><type><name>apr_hash_t</name> *</type><name>config</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Search for a merge tool command in environment variables,
   and use it to perform the merge of the four given files.
   Use POOL for all allocations.

   CONFIG is a hash of svn_config_t * items keyed on a configuration
   category (SVN_CONFIG_CATEGORY_CONFIG et al), and may be NULL.
   */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_cl__merge_file_externally</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_path</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>their_path</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>my_path</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>merged_path</name></decl></param>,
                              <param><decl><type><name>apr_hash_t</name> *</type><name>config</name></decl></param>,
                              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<escape char="0xc"/>
<comment type="block">/*** Notification functions to display results on the terminal. */</comment>

<comment type="block">/* Set *NOTIFY_FUNC_P and *NOTIFY_BATON_P to a notifier/baton for all
 * operations, allocated in POOL.
 *
 * If this is a checkout, set IS_CHECKOUT to true, so that the
 * notifier will print the appropriate summary line at the end of the
 * output.
 *
 * If this is an export, set IS_EXPORT to true, so that the
 * notifier will print the appropriate summary line at the end of the
 * output.
 *
 * If don't want a summary line at the end of notifications, set
 * SUPPRESS_FINAL_LINE.
 */</comment>
<function_decl><type><name>void</name></type> <name>svn_cl__get_notifier</name><parameter_list>(<param><decl><type><name>svn_wc_notify_func2_t</name> *</type><name>notify_func_p</name></decl></param>,
                          <param><decl><type><name>void</name> **</type><name>notify_baton_p</name></decl></param>,
                          <param><decl><type><name>svn_boolean_t</name></type> <name>is_checkout</name></decl></param>,
                          <param><decl><type><name>svn_boolean_t</name></type> <name>is_export</name></decl></param>,
                          <param><decl><type><name>svn_boolean_t</name></type> <name>suppress_final_line</name></decl></param>,
                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<escape char="0xc"/>
<comment type="block">/*** Log message callback stuffs. ***/</comment>

<comment type="block">/* Allocate in POOL a baton for use with svn_cl__get_log_message().

   OPT_STATE is the set of command-line options given.

   BASE_DIR is a directory in which to create temporary files if an
   external editor is used to edit the log message.  If BASE_DIR is
   NULL, the current working directory (`.') will be used, and
   therefore the user must have the proper permissions on that
   directory.  ### todo: What *should* happen in the NULL case is that
   we ask APR to tell us where a suitable tmp directory is (like, /tmp
   on Unix and C:\Windows\Temp on Win32 or something), and use it.
   But APR doesn't yet have that capability.

   CONFIG is a client configuration hash of svn_config_t * items keyed
   on config categories, and may be NULL.

   NOTE: While the baton itself will be allocated from POOL, the items
   add to it are added by reference, not duped into POOL!*/</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_cl__make_log_msg_baton</name><parameter_list>(<param><decl><type><name>void</name> **</type><name>baton</name></decl></param>,
                                        <param><decl><type><name>svn_cl__opt_state_t</name> *</type><name>opt_state</name></decl></param>,
                                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_dir</name></decl></param>,
                                        <param><decl><type><name>apr_hash_t</name> *</type><name>config</name></decl></param>,
                                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* A function of type svn_client_get_commit_log3_t. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_cl__get_log_message</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>log_msg</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>tmp_file</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>commit_items</name></decl></param>,
                                     <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Handle the cleanup of a log message, using the data in the
   LOG_MSG_BATON, in the face of COMMIT_ERR.  This may mean removing a
   temporary file left by an external editor, or it may be a complete
   no-op.  COMMIT_ERR may be NULL to indicate to indicate that the
   function should act as though no commit error occurred.

   All error returns from this function are guaranteed to at least
   include COMMIT_ERR, and perhaps additional errors attached to the
   end of COMMIT_ERR's chain.  */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_cl__cleanup_log_msg</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>log_msg_baton</name></decl></param>,
                                     <param><decl><type><name>svn_error_t</name> *</type><name>commit_err</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Add a message about --force if appropriate */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_cl__may_need_force</name><parameter_list>(<param><decl><type><name>svn_error_t</name> *</type><name>err</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Write the STRING to the stdio STREAM, returning an error if it fails. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_cl__error_checked_fputs</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>string</name></decl></param>,
                                         <param><decl><type><name>FILE</name>*</type> <name>stream</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* If STRING is non-null, append it, wrapped in a simple XML CDATA element
   named TAGNAME, to the string SB.  Use POOL for temporary allocations. */</comment>
<function_decl><type><name>void</name></type> <name>svn_cl__xml_tagged_cdata</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> **</type><name>sb</name></decl></param>,
                              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tagname</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>string</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Print the XML prolog and document root element start-tag to stdout, using
   TAGNAME as the root element name.  Use pool for temporary allocations. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_cl__xml_print_header</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tagname</name></decl></param>,
                                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Print the XML document root element end-tag to stdout, using TAGNAME as the
   root element name.  Use pool for temporary allocations. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_cl__xml_print_footer</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tagname</name></decl></param>,
                                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Return a (non-localised) string representation of KIND, being "dir" or
   "file" or, in any other case, the empty string. */</comment>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>svn_cl__node_kind_str</name><parameter_list>(<param><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* If PROPNAME is one of the svn: properties with a boolean value, and
 * PROPVAL looks like an attempt to turn the property off (i.e., it's
 * "off", "no", "false", or ""), then print a warning to the user that
 * setting the property to this value might not do what they expect.
 * Perform temporary allocations in POOL.
 */</comment>
<function_decl><type><name>void</name></type> <name>svn_cl__check_boolean_prop_val</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>propname</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>propval</name></decl></param>,
                                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* De-streamifying wrapper around svn_client_get_changelists(), which
   is called for each target in TARGETS to populate *PATHS (a list of
   paths assigned to one of the CHANGELISTS. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_cl__changelist_paths</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>paths</name></decl></param>,
                                      <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>changelists</name></decl></param>,
                                      <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>targets</name></decl></param>,
                                      <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                                      <param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
                                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_cl__args_to_target_array_print_reserved</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>targets_p</name></decl></param>,
                                            <param><decl><type><name>apr_getopt_t</name> *</type><name>os</name></decl></param>,
                                            <param><decl><type><name>apr_array_header_t</name> *</type><name>known_targets</name></decl></param>,
                                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __cplusplus */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SVN_CL_H */</comment>
</unit>
