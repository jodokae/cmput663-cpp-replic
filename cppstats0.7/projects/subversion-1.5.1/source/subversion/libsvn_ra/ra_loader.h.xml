<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_ra/ra_loader.h"><comment type="block">/**
 * @copyright
 * ====================================================================
 * Copyright (c) 2005-2008 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 * @endcopyright
 *
 * @file ra_loader.h
 * @brief structures related to repository access, private to libsvn_ra and the
 * RA implementation libraries.
 */</comment>

<escape char="0xc"/>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LIBSVN_RA_RA_LOADER_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIBSVN_RA_RA_LOADER_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_ra.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* The RA layer vtable. */</comment>
<typedef>typedef <type><struct>struct <name>svn_ra__vtable_t</name> <block>{
  <comment type="block">/* This field should always remain first in the vtable. */</comment>
  <function_decl><type><specifier>const</specifier> <name>svn_version_t</name> *</type>(*<name>get_version</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>

  <comment type="block">/* Return a short description of the RA implementation, as a localized
   * string. */</comment>
  <function_decl><type><specifier>const</specifier> <name>char</name> *</type>(*<name>get_description</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>

  <comment type="block">/* Return a list of actual URI schemes supported by this implementation.
   * The returned array is NULL-terminated. */</comment>
  <function_decl><type><specifier>const</specifier> <name>char</name> * <specifier>const</specifier> *</type>(*<name>get_schemes</name>)<parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

  <comment type="block">/* Implementations of the public API functions. */</comment>

  <comment type="block">/* All fields in SESSION, except priv, have been initialized by the
     time this is called.  SESSION-&gt;priv may be set by this function. */</comment>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>open_session</name>)<parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_URL</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>svn_ra_callbacks2_t</name> *</type><name>callbacks</name></decl></param>,
                               <param><decl><type><name>void</name> *</type><name>callback_baton</name></decl></param>,
                               <param><decl><type><name>apr_hash_t</name> *</type><name>config</name></decl></param>,
                               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <comment type="block">/* URL is guaranteed to have what get_repos_root() returns as a prefix. */</comment>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>reparent</name>)<parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>get_session_url</name>)<parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                                  <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>url</name></decl></param>,
                                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>get_latest_revnum</name>)<parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                                    <param><decl><type><name>svn_revnum_t</name> *</type><name>latest_revnum</name></decl></param>,
                                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>get_dated_revision</name>)<parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                                     <param><decl><type><name>svn_revnum_t</name> *</type><name>revision</name></decl></param>,
                                     <param><decl><type><name>apr_time_t</name></type> <name>tm</name></decl></param>,
                                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>change_rev_prop</name>)<parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                                  <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                                  <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
                                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

  <function_decl><type><name>svn_error_t</name> *</type>(*<name>rev_proplist</name>)<parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                               <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                               <param><decl><type><name>apr_hash_t</name> **</type><name>props</name></decl></param>,
                               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>rev_prop</name>)<parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                           <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                           <param><decl><type><name>svn_string_t</name> **</type><name>value</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>get_commit_editor</name>)<parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
                                    <param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
                                    <param><decl><type><name>apr_hash_t</name> *</type><name>revprop_table</name></decl></param>,
                                    <param><decl><type><name>svn_commit_callback2_t</name></type> <name>callback</name></decl></param>,
                                    <param><decl><type><name>void</name> *</type><name>callback_baton</name></decl></param>,
                                    <param><decl><type><name>apr_hash_t</name> *</type><name>lock_tokens</name></decl></param>,
                                    <param><decl><type><name>svn_boolean_t</name></type> <name>keep_locks</name></decl></param>,
                                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>get_file</name>)<parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                           <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                           <param><decl><type><name>svn_stream_t</name> *</type><name>stream</name></decl></param>,
                           <param><decl><type><name>svn_revnum_t</name> *</type><name>fetched_rev</name></decl></param>,
                           <param><decl><type><name>apr_hash_t</name> **</type><name>props</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>get_dir</name>)<parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                          <param><decl><type><name>apr_hash_t</name> **</type><name>dirents</name></decl></param>,
                          <param><decl><type><name>svn_revnum_t</name> *</type><name>fetched_rev</name></decl></param>,
                          <param><decl><type><name>apr_hash_t</name> **</type><name>props</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                          <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                          <param><decl><type><name>apr_uint32_t</name></type> <name>dirent_fields</name></decl></param>,
                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>get_mergeinfo</name>)<parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                                <param><decl><type><name>svn_mergeinfo_catalog_t</name> *</type><name>mergeinfo</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>paths</name></decl></param>,
                                <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                                <param><decl><type><name>svn_mergeinfo_inheritance_t</name></type> <name>inherit</name></decl></param>,
                                <param><decl><type><name>svn_boolean_t</name></type> <name>include_merged_revisions</name></decl></param>,
                                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>do_update</name>)<parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>svn_ra_reporter3_t</name> **</type><name>reporter</name></decl></param>,
                            <param><decl><type><name>void</name> **</type><name>report_baton</name></decl></param>,
                            <param><decl><type><name>svn_revnum_t</name></type> <name>revision_to_update_to</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>update_target</name></decl></param>,
                            <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                            <param><decl><type><name>svn_boolean_t</name></type> <name>send_copyfrom_args</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>update_editor</name></decl></param>,
                            <param><decl><type><name>void</name> *</type><name>update_baton</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>do_switch</name>)<parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>svn_ra_reporter3_t</name> **</type><name>reporter</name></decl></param>,
                            <param><decl><type><name>void</name> **</type><name>report_baton</name></decl></param>,
                            <param><decl><type><name>svn_revnum_t</name></type> <name>revision_to_switch_to</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>switch_target</name></decl></param>,
                            <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>switch_url</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>switch_editor</name></decl></param>,
                            <param><decl><type><name>void</name> *</type><name>switch_baton</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>do_status</name>)<parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>svn_ra_reporter3_t</name> **</type><name>reporter</name></decl></param>,
                            <param><decl><type><name>void</name> **</type><name>report_baton</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>status_target</name></decl></param>,
                            <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                            <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>status_editor</name></decl></param>,
                            <param><decl><type><name>void</name> *</type><name>status_baton</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>do_diff</name>)<parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>svn_ra_reporter3_t</name> **</type><name>reporter</name></decl></param>,
                          <param><decl><type><name>void</name> **</type><name>report_baton</name></decl></param>,
                          <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>diff_target</name></decl></param>,
                          <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                          <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl></param>,
                          <param><decl><type><name>svn_boolean_t</name></type> <name>text_deltas</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>versus_url</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>diff_editor</name></decl></param>,
                          <param><decl><type><name>void</name> *</type><name>diff_baton</name></decl></param>,
                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>get_log</name>)<parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>paths</name></decl></param>,
                          <param><decl><type><name>svn_revnum_t</name></type> <name>start</name></decl></param>,
                          <param><decl><type><name>svn_revnum_t</name></type> <name>end</name></decl></param>,
                          <param><decl><type><name>int</name></type> <name>limit</name></decl></param>,
                          <param><decl><type><name>svn_boolean_t</name></type> <name>discover_changed_paths</name></decl></param>,
                          <param><decl><type><name>svn_boolean_t</name></type> <name>strict_node_history</name></decl></param>,
                          <param><decl><type><name>svn_boolean_t</name></type> <name>include_merged_revisions</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>revprops</name></decl></param>,
                          <param><decl><type><name>svn_log_entry_receiver_t</name></type> <name>receiver</name></decl></param>,
                          <param><decl><type><name>void</name> *</type><name>receiver_baton</name></decl></param>,
                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>check_path</name>)<parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                             <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                             <param><decl><type><name>svn_node_kind_t</name> *</type><name>kind</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>stat</name>)<parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                       <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                       <param><decl><type><name>svn_dirent_t</name> **</type><name>dirent</name></decl></param>,
                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>get_uuid</name>)<parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>uuid</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>get_repos_root</name>)<parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>url</name></decl></param>,
                                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>get_locations</name>)<parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                                <param><decl><type><name>apr_hash_t</name> **</type><name>locations</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                <param><decl><type><name>svn_revnum_t</name></type> <name>peg_revision</name></decl></param>,
                                <param><decl><type><name>apr_array_header_t</name> *</type><name>location_revisions</name></decl></param>,
                                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>get_location_segments</name>)<parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                        <param><decl><type><name>svn_revnum_t</name></type> <name>peg_revision</name></decl></param>,
                                        <param><decl><type><name>svn_revnum_t</name></type> <name>start_rev</name></decl></param>,
                                        <param><decl><type><name>svn_revnum_t</name></type> <name>end_rev</name></decl></param>,
                                        <param><decl><type><name>svn_location_segment_receiver_t</name></type> <name>rcvr</name></decl></param>,
                                        <param><decl><type><name>void</name> *</type><name>receiver_baton</name></decl></param>,
                                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>get_file_revs</name>)<parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                <param><decl><type><name>svn_revnum_t</name></type> <name>start</name></decl></param>,
                                <param><decl><type><name>svn_revnum_t</name></type> <name>end</name></decl></param>,
                                <param><decl><type><name>svn_boolean_t</name></type> <name>include_merged_revisions</name></decl></param>,
                                <param><decl><type><name>svn_file_rev_handler_t</name></type> <name>handler</name></decl></param>,
                                <param><decl><type><name>void</name> *</type><name>handler_baton</name></decl></param>,
                                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>lock</name>)<parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                       <param><decl><type><name>apr_hash_t</name> *</type><name>path_revs</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>comment</name></decl></param>,
                       <param><decl><type><name>svn_boolean_t</name></type> <name>force</name></decl></param>,
                       <param><decl><type><name>svn_ra_lock_callback_t</name></type> <name>lock_func</name></decl></param>,
                       <param><decl><type><name>void</name> *</type><name>lock_baton</name></decl></param>,
                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>unlock</name>)<parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                         <param><decl><type><name>apr_hash_t</name> *</type><name>path_tokens</name></decl></param>,
                         <param><decl><type><name>svn_boolean_t</name></type> <name>force</name></decl></param>,
                         <param><decl><type><name>svn_ra_lock_callback_t</name></type> <name>lock_func</name></decl></param>,
                         <param><decl><type><name>void</name> *</type><name>lock_baton</name></decl></param>,
                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>get_lock</name>)<parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                           <param><decl><type><name>svn_lock_t</name> **</type><name>lock</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>get_locks</name>)<parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                            <param><decl><type><name>apr_hash_t</name> **</type><name>locks</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>replay</name>)<parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                         <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                         <param><decl><type><name>svn_revnum_t</name></type> <name>low_water_mark</name></decl></param>,
                         <param><decl><type><name>svn_boolean_t</name></type> <name>text_deltas</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>editor</name></decl></param>,
                         <param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>(*<name>has_capability</name>)<parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                                 <param><decl><type><name>svn_boolean_t</name> *</type><name>has</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>capability</name></decl></param>,
                                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>svn_error_t</name> *</type>
  (*<name>replay_range</name>)<parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                  <param><decl><type><name>svn_revnum_t</name></type> <name>start_revision</name></decl></param>,
                  <param><decl><type><name>svn_revnum_t</name></type> <name>end_revision</name></decl></param>,
                  <param><decl><type><name>svn_revnum_t</name></type> <name>low_water_mark</name></decl></param>,
                  <param><decl><type><name>svn_boolean_t</name></type> <name>text_deltas</name></decl></param>,
                  <param><decl><type><name>svn_ra_replay_revstart_callback_t</name></type> <name>revstart_func</name></decl></param>,
                  <param><decl><type><name>svn_ra_replay_revfinish_callback_t</name></type> <name>revfinish_func</name></decl></param>,
                  <param><decl><type><name>void</name> *</type><name>replay_baton</name></decl></param>,
                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
}</block></struct></type> <name>svn_ra__vtable_t</name>;</typedef>

<comment type="block">/* The RA session object. */</comment>
<struct>struct <name>svn_ra_session_t</name> <block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_ra__vtable_t</name> *</type><name>vtable</name></decl>;</decl_stmt>

  <comment type="block">/* Pool used to manage this session. */</comment>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>

  <comment type="block">/* Private data for the RA implementation. */</comment>
  <decl_stmt><decl><type><name>void</name> *</type><name>priv</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/* Each libsvn_ra_foo defines a function named svn_ra_foo__init of this type.
 *
 * The LOADER_VERSION parameter must remain first in the list, and the
 * function must use the C calling convention on all platforms, so that
 * the init functions can safely read the version parameter.
 *
 * POOL will be available as long as this module is being used.
 *
 * ### need to force this to be __cdecl on Windows... how??
 */</comment>
<typedef>typedef <function_decl><type><name>svn_error_t</name> *</type>
(*<name>svn_ra__init_func_t</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_version_t</name> *</type><name>loader_version</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>svn_ra__vtable_t</name> **</type><name>vtable</name></decl></param>,
                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="block">/* Declarations of the init functions for the available RA libraries. */</comment>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_ra_local__init</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_version_t</name> *</type><name>loader_version</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>svn_ra__vtable_t</name> **</type><name>vtable</name></decl></param>,
                                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_ra_svn__init</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_version_t</name> *</type><name>loader_version</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>svn_ra__vtable_t</name> **</type><name>vtable</name></decl></param>,
                              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_ra_neon__init</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_version_t</name> *</type><name>loader_version</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>svn_ra__vtable_t</name> **</type><name>vtable</name></decl></param>,
                              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_ra_serf__init</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_version_t</name> *</type><name>loader_version</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>svn_ra__vtable_t</name> **</type><name>vtable</name></decl></param>,
                               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>


<escape char="0xc"/>
<comment type="block">/*** Compat Functions ***/</comment>

<comment type="block">/**
 * Set *LOCATIONS to the locations (at the repository revisions
 * LOCATION_REVISIONS) of the file identified by PATH in PEG_REVISION.
 * PATH is relative to the URL to which SESSION was opened.
 * LOCATION_REVISIONS is an array of svn_revnum_t's.  *LOCATIONS will
 * be a mapping from the revisions to their appropriate absolute
 * paths.  If the file doesn't exist in a location_revision, that
 * revision will be ignored.
 *
 * Use POOL for all allocations.
 *
 * NOTE: This function uses the RA get_log interfaces to do its work,
 * as a fallback mechanism for servers which don't support the native
 * get_locations API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra__locations_from_log</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                           <param><decl><type><name>apr_hash_t</name> **</type><name>locations_p</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                           <param><decl><type><name>svn_revnum_t</name></type> <name>peg_revision</name></decl></param>,
                           <param><decl><type><name>apr_array_header_t</name> *</type><name>location_revisions</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Call RECEIVER (with RECEIVER_BATON) for each segment in the
 * location history of PATH in START_REV, working backwards in time
 * from START_REV to END_REV.
 *
 * END_REV may be SVN_INVALID_REVNUM to indicate that you want to
 * trace the history of the object to its origin.
 *
 * START_REV may be SVN_INVALID_REVNUM to indicate that you want to
 * trace the history of the object beginning in the HEAD revision.
 * Otherwise, START_REV must be younger than END_REV (unless END_REV
 * is SVN_INVALID_REVNUM).
 *
 * Use POOL for all allocations.
 *
 * NOTE: This function uses the RA get_log interfaces to do its work,
 * as a fallback mechanism for servers which don't support the native
 * get_location_segments API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra__location_segments_from_log</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                   <param><decl><type><name>svn_revnum_t</name></type> <name>peg_revision</name></decl></param>,
                                   <param><decl><type><name>svn_revnum_t</name></type> <name>start_rev</name></decl></param>,
                                   <param><decl><type><name>svn_revnum_t</name></type> <name>end_rev</name></decl></param>,
                                   <param><decl><type><name>svn_location_segment_receiver_t</name></type> <name>receiver</name></decl></param>,
                                   <param><decl><type><name>void</name> *</type><name>receiver_baton</name></decl></param>,
                                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Retrieve a subset of the interesting revisions of a file PATH
 * as seen in revision END (see svn_fs_history_prev() for a
 * definition of "interesting revisions").  Invoke HANDLER with
 * @a handler_baton as its first argument for each such revision.
 * @a session is an open RA session.  Use POOL for all allocations.
 *
 * If there is an interesting revision of the file that is less than or
 * equal to START, the iteration will begin at that revision.
 * Else, the iteration will begin at the first revision of the file in
 * the repository, which has to be less than or equal to END.  Note
 * that if the function succeeds, HANDLER will have been called at
 * least once.
 *
 * In a series of calls to HANDLER, the file contents for the first
 * interesting revision will be provided as a text delta against the
 * empty file.  In the following calls, the delta will be against the
 * fulltext contents for the previous call.
 *
 * NOTE: This function uses the RA get_log interfaces to do its work,
 * as a fallback mechanism for servers which don't support the native
 * get_location_segments API.
 */</comment>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra__file_revs_from_log</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                           <param><decl><type><name>svn_revnum_t</name></type> <name>start</name></decl></param>,
                           <param><decl><type><name>svn_revnum_t</name></type> <name>end</name></decl></param>,
                           <param><decl><type><name>svn_file_rev_handler_t</name></type> <name>handler</name></decl></param>,
                           <param><decl><type><name>void</name> *</type><name>handler_baton</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
