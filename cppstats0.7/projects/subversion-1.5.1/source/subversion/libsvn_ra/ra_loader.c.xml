<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_ra/ra_loader.c"><comment type="block">/*
 * ra_loader.c:  logic for loading different RA library implementations
 *
 * ====================================================================
 * Copyright (c) 2000-2008 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<comment type="block">/* ==================================================================== */</comment>
<escape char="0xc"/>
<comment type="block">/*** Includes. ***/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_want.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_hash.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_uri.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error_codes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_delta.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_ra.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_xml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_dso.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ra_loader.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_ra_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>


<comment type="block">/* ### This file maps URL schemes to particular RA libraries.
   ### Currently, the only pair of RA libraries which support the same
   ### protocols are neon and serf.  svn_ra_open3 makes the assumption
   ### that this is the case; that their 'schemes' fields are both
   ### dav_schemes; and that "neon" is listed first.

   ### Users can choose which dav library to use with the http-library
   ### preference in .subversion/servers; however, it is ignored by
   ### any code which uses the pre-1.2 API svn_ra_get_ra_library
   ### instead of svn_ra_open. */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SVN_HAVE_NEON</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>SVN_HAVE_SERF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUST_CHOOSE_DAV</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<escape char="0xc"/>
<comment type="block">/* These are the URI schemes that the respective libraries *may* support.
 * The schemes actually supported may be a subset of the schemes listed below.
 * This can't be determine until the library is loaded.
 * (Currently, this applies to the https scheme, which is only
 * available if SSL is supported.) */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> * <specifier>const</specifier></type> <name><name>dav_schemes</name><index>[]</index></name> <init>= <expr><block>{ <expr>"http"</expr>, <expr>"https"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> * <specifier>const</specifier></type> <name><name>svn_schemes</name><index>[]</index></name> <init>= <expr><block>{ <expr>"svn"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> * <specifier>const</specifier></type> <name><name>local_schemes</name><index>[]</index></name> <init>= <expr><block>{ <expr>"file"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>ra_lib_defn</name> <block>{
  <comment type="block">/* the name of this RA library (e.g. "neon" or "local") */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ra_name</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> * <specifier>const</specifier> *</type><name>schemes</name></decl>;</decl_stmt>
  <comment type="block">/* the initialization function if linked in; otherwise, NULL */</comment>
  <decl_stmt><decl><type><name>svn_ra__init_func_t</name></type> <name>initfunc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra_init_func_t</name></type> <name>compat_initfunc</name></decl>;</decl_stmt>
}</block> <decl><name><name>ra_libraries</name><index>[]</index></name> <init>= <expr><block>{
  <expr><block>{
    <expr>"neon"</expr>,
    <expr><name>dav_schemes</name></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SVN_LIBSVN_CLIENT_LINKS_RA_NEON</name></cpp:ifdef>
    <expr><name>svn_ra_neon__init</name></expr>,
    <expr><name>svn_ra_dav_init</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  }</block></expr>,

  <expr><block>{
    <expr>"svn"</expr>,
    <expr><name>svn_schemes</name></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SVN_LIBSVN_CLIENT_LINKS_RA_SVN</name></cpp:ifdef>
    <expr><name>svn_ra_svn__init</name></expr>,
    <expr><name>svn_ra_svn_init</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  }</block></expr>,

  <expr><block>{
    <expr>"local"</expr>,
    <expr><name>local_schemes</name></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SVN_LIBSVN_CLIENT_LINKS_RA_LOCAL</name></cpp:ifdef>
    <expr><name>svn_ra_local__init</name></expr>,
    <expr><name>svn_ra_local_init</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  }</block></expr>,

  <expr><block>{
    <expr>"serf"</expr>,
    <expr><name>dav_schemes</name></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SVN_LIBSVN_CLIENT_LINKS_RA_SERF</name></cpp:ifdef>
    <expr><name>svn_ra_serf__init</name></expr>,
    <expr><name>svn_ra_serf_init</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  }</block></expr>,

  <comment type="block">/* ADD NEW RA IMPLEMENTATIONS HERE (as they're written) */</comment>

  <comment type="block">/* sentinel */</comment>
  <expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</struct>

<comment type="block">/* Ensure that the RA library NAME is loaded.
 *
 * If FUNC is non-NULL, set *FUNC to the address of the svn_ra_NAME__init
 * function of the library.
 *
 * If COMPAT_FUNC is non-NULL, set *COMPAT_FUNC to the address of the
 * svn_ra_NAME_init compatibility init function of the library.
 *
 * ### todo: Any RA libraries implemented from this point forward
 * ### don't really need an svn_ra_NAME_init compatibility function.
 * ### Currently, load_ra_module() will error if no such function is
 * ### found, but it might be more friendly to simply set *COMPAT_FUNC
 * ### to null (assuming COMPAT_FUNC itself is non-null).
 */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>load_ra_module</name><parameter_list>(<param><decl><type><name>svn_ra__init_func_t</name> *</type><name>func</name></decl></param>,
               <param><decl><type><name>svn_ra_init_func_t</name> *</type><name>compat_func</name></decl></param>,
               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ra_name</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>func</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>func</name> = <name>NULL</name></expr>;</expr_stmt></then></if>
  <if>if <condition>(<expr><name>compat_func</name></expr>)</condition><then>
    <expr_stmt><expr>*<name>compat_func</name> = <name>NULL</name></expr>;</expr_stmt></then></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SVN_USE_DSO</name></expr></argument>)</argument_list></call> &amp;&amp; <name>APR_HAS_DSO</name></expr></cpp:if>
  <block>{
    <decl_stmt><decl><type><name>apr_dso_handle_t</name> *</type><name>dso</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_dso_handle_sym_t</name></type> <name>symbol</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>libname</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>funcname</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>compat_funcname</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>libname</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"libsvn_ra_%s-%d.so.0"</expr></argument>,
                           <argument><expr><name>ra_name</name></expr></argument>, <argument><expr><name>SVN_VER_MAJOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>funcname</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"svn_ra_%s__init"</expr></argument>, <argument><expr><name>ra_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>compat_funcname</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"svn_ra_%s_init"</expr></argument>, <argument><expr><name>ra_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* find/load the specified library */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_dso_load</name><argument_list>(<argument><expr>&amp;<name>dso</name></expr></argument>, <argument><expr><name>libname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>! <name>dso</name></expr>)</condition><then>
      <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

    <comment type="block">/* find the initialization routines */</comment>
    <if>if <condition>(<expr><name>func</name></expr>)</condition><then>
      <block>{
        <expr_stmt><expr><name>status</name> = <call><name>apr_dso_sym</name><argument_list>(<argument><expr>&amp;<name>symbol</name></expr></argument>, <argument><expr><name>dso</name></expr></argument>, <argument><expr><name>funcname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>status</name></expr>)</condition><then>
          <block>{
            <return>return <expr><call><name>svn_error_wrap_apr</name><argument_list>(<argument><expr><name>status</name></expr></argument>,
                                      <argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s' does not define '%s()'"</expr></argument>)</argument_list></call></expr></argument>,
                                      <argument><expr><name>libname</name></expr></argument>, <argument><expr><name>funcname</name></expr></argument>)</argument_list></call></expr>;</return>
          }</block></then></if>

        <expr_stmt><expr>*<name>func</name> = (<name>svn_ra__init_func_t</name>) <name>symbol</name></expr>;</expr_stmt>
      }</block></then></if>

    <if>if <condition>(<expr><name>compat_func</name></expr>)</condition><then>
      <block>{
        <expr_stmt><expr><name>status</name> = <call><name>apr_dso_sym</name><argument_list>(<argument><expr>&amp;<name>symbol</name></expr></argument>, <argument><expr><name>dso</name></expr></argument>, <argument><expr><name>compat_funcname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>status</name></expr>)</condition><then>
          <block>{
            <return>return <expr><call><name>svn_error_wrap_apr</name><argument_list>(<argument><expr><name>status</name></expr></argument>,
                                      <argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s' does not define '%s()'"</expr></argument>)</argument_list></call></expr></argument>,
                                      <argument><expr><name>libname</name></expr></argument>, <argument><expr><name>compat_funcname</name></expr></argument>)</argument_list></call></expr>;</return>
          }</block></then></if>

        <expr_stmt><expr>*<name>compat_func</name> = (<name>svn_ra_init_func_t</name>) <name>symbol</name></expr>;</expr_stmt>
      }</block></then></if>
  }</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* APR_HAS_DSO */</comment>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* If DEFN may support URL, return the scheme.  Else, return NULL. */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>has_scheme_of</name><parameter_list>(<param><decl><type><specifier>const</specifier> struct <name>ra_lib_defn</name> *</type><name>defn</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> * <specifier>const</specifier> *</type><name>schemes</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>

  <for>for (<init><expr><name>schemes</name> = <name><name>defn</name>-&gt;<name>schemes</name></name></expr>;</init> <condition><expr>*<name>schemes</name> != <name>NULL</name></expr>;</condition> <incr><expr>++<name>schemes</name></expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>scheme</name> <init>= <expr>*<name>schemes</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>scheme</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* Case-insensitive comparison, per RFC 2396 section 3.1.  Allow
         URL to contain a trailing "+foo" section in the scheme, since
         that's how we specify tunnel schemes in ra_svn. */</comment>
      <if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>scheme</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> == 0 &amp;&amp;
          (<name><name>url</name><index>[<expr><name>len</name></expr>]</index></name> == ':' || <name><name>url</name><index>[<expr><name>len</name></expr>]</index></name> == '+')</expr>)</condition><then>
        <return>return <expr><name>scheme</name></expr>;</return></then></if>
    }</block></for>

  <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<comment type="block">/* Return an error if RA_VERSION doesn't match the version of this library.
   Use SCHEME in the error message to describe the library that was loaded. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>check_ra_version</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_version_t</name> *</type><name>ra_version</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>scheme</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_version_t</name> *</type><name>my_version</name> <init>= <expr><call><name>svn_ra_version</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr>!<call><name>svn_ver_equal</name><argument_list>(<argument><expr><name>my_version</name></expr></argument>, <argument><expr><name>ra_version</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_VERSION_MISMATCH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Mismatched RA version for '%s':"
                               " found %d.%d.%d%s,"
                               " expected %d.%d.%d%s"</expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><name>scheme</name></expr></argument>,
                             <argument><expr><name><name>my_version</name>-&gt;<name>major</name></name></expr></argument>, <argument><expr><name><name>my_version</name>-&gt;<name>minor</name></name></expr></argument>,
                             <argument><expr><name><name>my_version</name>-&gt;<name>patch</name></name></expr></argument>, <argument><expr><name><name>my_version</name>-&gt;<name>tag</name></name></expr></argument>,
                             <argument><expr><name><name>ra_version</name>-&gt;<name>major</name></name></expr></argument>, <argument><expr><name><name>ra_version</name>-&gt;<name>minor</name></name></expr></argument>,
                             <argument><expr><name><name>ra_version</name>-&gt;<name>patch</name></name></expr></argument>, <argument><expr><name><name>ra_version</name>-&gt;<name>tag</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* -------------------------------------------------------------- */</comment>
<escape char="0xc"/>
<comment type="block">/*** Compatibility Wrappers ***/</comment>

<comment type="block">/* Wrap @c svn_ra_reporter3_t in an interface that looks like
   @c svn_ra_reporter2_t, for compatibility with functions that take
   the latter.  This shields the ra-specific implementations from
   worrying about what kind of reporter they're dealing with.

   This code does not live in wrapper_template.h because that file is
   about the big changeover from a vtable-style to function-style
   interface, and does not contain the post-changeover interfaces
   that we are compatiblizing here.

   This code looks like it duplicates code in libsvn_wc/adm_crawler.c,
   but in fact it does not.  That code makes old things look like new
   things; this code makes a new thing look like an old thing. */</comment>

<comment type="block">/* Baton for abovementioned wrapping. */</comment>
<struct>struct <name>reporter_3in2_baton</name> <block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_ra_reporter3_t</name> *</type><name>reporter3</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>reporter3_baton</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/* Wrap the corresponding svn_ra_reporter3_t field in an
   svn_ra_reporter2_t interface.  @a report_baton is a
   @c reporter_3in2_baton_t *. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>set_path</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>report_baton</name></decl></param>,
         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
         <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
         <param><decl><type><name>svn_boolean_t</name></type> <name>start_empty</name></decl></param>,
         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lock_token</name></decl></param>,
         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>reporter_3in2_baton</name> *</type><name>b</name> <init>= <expr><name>report_baton</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>b</name>-&gt;<name>reporter3</name>-&gt;<name>set_path</name></name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>reporter3_baton</name></name></expr></argument>,
                                <argument><expr><name>path</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>svn_depth_infinity</name></expr></argument>,
                                <argument><expr><name>start_empty</name></expr></argument>, <argument><expr><name>lock_token</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* Wrap the corresponding svn_ra_reporter3_t field in an
   svn_ra_reporter2_t interface.  @a report_baton is a
   @c reporter_3in2_baton_t *. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>delete_path</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>report_baton</name></decl></param>,
            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>reporter_3in2_baton</name> *</type><name>b</name> <init>= <expr><name>report_baton</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>b</name>-&gt;<name>reporter3</name>-&gt;<name>delete_path</name></name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>reporter3_baton</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* Wrap the corresponding svn_ra_reporter3_t field in an
   svn_ra_reporter2_t interface.  @a report_baton is a
   @c reporter_3in2_baton_t *. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>link_path</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>report_baton</name></decl></param>,
          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
          <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
          <param><decl><type><name>svn_boolean_t</name></type> <name>start_empty</name></decl></param>,
          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lock_token</name></decl></param>,
          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>reporter_3in2_baton</name> *</type><name>b</name> <init>= <expr><name>report_baton</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>b</name>-&gt;<name>reporter3</name>-&gt;<name>link_path</name></name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>reporter3_baton</name></name></expr></argument>,
                                 <argument><expr><name>path</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>svn_depth_infinity</name></expr></argument>,
                                 <argument><expr><name>start_empty</name></expr></argument>, <argument><expr><name>lock_token</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>

}</block></function>

<comment type="block">/* Wrap the corresponding svn_ra_reporter3_t field in an
   svn_ra_reporter2_t interface.  @a report_baton is a
   @c reporter_3in2_baton_t *. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>finish_report</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>report_baton</name></decl></param>,
              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>reporter_3in2_baton</name> *</type><name>b</name> <init>= <expr><name>report_baton</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>b</name>-&gt;<name>reporter3</name>-&gt;<name>finish_report</name></name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>reporter3_baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* Wrap the corresponding svn_ra_reporter3_t field in an
   svn_ra_reporter2_t interface.  @a report_baton is a
   @c reporter_3in2_baton_t *. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>abort_report</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>report_baton</name></decl></param>,
             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>reporter_3in2_baton</name> *</type><name>b</name> <init>= <expr><name>report_baton</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>b</name>-&gt;<name>reporter3</name>-&gt;<name>abort_report</name></name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>reporter3_baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* Wrap svn_ra_reporter3_t calls in an svn_ra_reporter2_t interface.

   Note: For calls where the prototypes are exactly the same, we could
   avoid the pass-through overhead by using the function in the
   reporter returned from session-&gt;vtable-&gt;do_foo.  But the code would
   get a lot less readable, and the only benefit would be to shave a
   few instructions in a network-bound operation anyway.  So in
   delete_path(), finish_report(), and abort_report(), we cheerfully
   pass through to identical functions. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_ra_reporter2_t</name></type> <name>reporter_3in2_wrapper</name> <init>= <expr><block>{
  <expr><name>set_path</name></expr>,
  <expr><name>delete_path</name></expr>,
  <expr><name>link_path</name></expr>,
  <expr><name>finish_report</name></expr>,
  <expr><name>abort_report</name></expr>
}</block></expr></init></decl>;</decl_stmt>


<comment type="block">/* -------------------------------------------------------------- */</comment>
<escape char="0xc"/>
<comment type="block">/*** Public Interfaces ***/</comment>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_initialize</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/* Please note: the implementation of svn_ra_create_callbacks is
 * duplicated in libsvn_ra/wrapper_template.h:compat_open() .  This
 * duplication is intentional, is there to avoid a circular
 * dependancy, and is justified in great length in the code of
 * compat_open() in libsvn_ra/wrapper_template.h.  If you modify the
 * implementation of svn_ra_create_callbacks(), be sure to keep the
 * code in wrapper_template.h:compat_open() in sync with your
 * changes. */</comment>
<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_create_callbacks</name><parameter_list>(<param><decl><type><name>svn_ra_callbacks2_t</name> **</type><name>callbacks</name></decl></param>,
                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>callbacks</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>**<name>callbacks</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_open3</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> **</type><name>session_p</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_URL</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>uuid</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>svn_ra_callbacks2_t</name> *</type><name>callbacks</name></decl></param>,
                          <param><decl><type><name>void</name> *</type><name>callback_baton</name></decl></param>,
                          <param><decl><type><name>apr_hash_t</name> *</type><name>config</name></decl></param>,
                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> struct <name>ra_lib_defn</name> *</type><name>defn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_ra__vtable_t</name> *</type><name>vtable</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MUST_CHOOSE_DAV</name></cpp:ifdef>
  <decl_stmt><decl><type><name>svn_config_t</name> *</type><name>servers</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>http_library</name> <init>= <expr>"neon"</expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>config</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>servers</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>SVN_CONFIG_CATEGORY_SERVERS</name></expr></argument>,
                             <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>servers</name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>apr_uri_t</name></type> <name>repos_URI</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>apr_status_t</name></type> <name>apr_err</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>server_group</name></decl>;</decl_stmt>

          <expr_stmt><expr><name>apr_err</name> = <call><name>apr_uri_parse</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>repos_URL</name></expr></argument>, <argument><expr>&amp;<name>repos_URI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <comment type="block">/* ### Should apr_uri_parse leave hostname NULL?  It doesn't
           * for "file:///" URLs, only for bogus URLs like "bogus".
           * If this is the right behavior for apr_uri_parse, maybe we
           * should have a svn_uri_parse wrapper. */</comment>
          <if>if <condition>(<expr><name>apr_err</name> != <name>APR_SUCCESS</name> || <name><name>repos_URI</name>.<name>hostname</name></name> == <name>NULL</name></expr>)</condition><then>
            <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_ILLEGAL_URL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                     <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Illegal repository URL '%s'"</expr></argument>)</argument_list></call></expr></argument>,
                                     <argument><expr><name>repos_URL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
          <expr_stmt><expr><name>server_group</name> = <call><name>svn_config_find_group</name><argument_list>(<argument><expr><name>servers</name></expr></argument>, <argument><expr><name><name>repos_URI</name>.<name>hostname</name></name></expr></argument>,
                                               <argument><expr><name>SVN_CONFIG_SECTION_GROUPS</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><name>http_library</name>
            = <call><name>svn_config_get_server_setting</name><argument_list>(<argument><expr><name>servers</name></expr></argument>,
                                            <argument><expr><name>server_group</name></expr></argument>,
                                            <argument><expr><name>SVN_CONFIG_OPTION_HTTP_LIBRARY</name></expr></argument>,
                                            <argument><expr>"neon"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>http_library</name></expr></argument>, <argument><expr>"neon"</expr></argument>)</argument_list></call> != 0 &amp;&amp;
              <call><name>strcmp</name><argument_list>(<argument><expr><name>http_library</name></expr></argument>, <argument><expr>"serf"</expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
            <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_INVALID_CONFIG_VALUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                     <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Invalid config: unknown HTTP library "
                                       "'%s'"</expr></argument>)</argument_list></call></expr></argument>,
                                     <argument><expr><name>http_library</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
        }</block></then></if>
    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/* Find the library. */</comment>
  <for>for (<init><expr><name>defn</name> = <name>ra_libraries</name></expr>;</init> <condition><expr><name><name>defn</name>-&gt;<name>ra_name</name></name> != <name>NULL</name></expr>;</condition> <incr><expr>++<name>defn</name></expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>scheme</name></decl>;</decl_stmt>

      <if>if <condition>(<expr>(<name>scheme</name> = <call><name>has_scheme_of</name><argument_list>(<argument><expr><name>defn</name></expr></argument>, <argument><expr><name>repos_URL</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>svn_ra__init_func_t</name></type> <name>initfunc</name> <init>= <expr><name><name>defn</name>-&gt;<name>initfunc</name></name></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MUST_CHOOSE_DAV</name></cpp:ifdef>
          <if>if <condition>(<expr><name><name>defn</name>-&gt;<name>schemes</name></name> == <name>dav_schemes</name>
              &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>defn</name>-&gt;<name>ra_name</name></name></expr></argument>, <argument><expr><name>http_library</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
            <continue>continue;</continue></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

          <if>if <condition>(<expr>! <name>initfunc</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>load_ra_module</name><argument_list>(<argument><expr>&amp;<name>initfunc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>defn</name>-&gt;<name>ra_name</name></name></expr></argument>,
                                   <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
          <if>if <condition>(<expr>! <name>initfunc</name></expr>)</condition><then>
            <comment type="block">/* Library not found. */</comment>
            <continue>continue;</continue></then></if>

          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>initfunc</name><argument_list>(<argument><expr><call><name>svn_ra_version</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>&amp;<name>vtable</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_ra_version</name><argument_list>(<argument><expr><call><name><name>vtable</name>-&gt;<name>get_version</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>scheme</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <break>break;</break>
        }</block></then></if>
    }</block></for>

  <if>if <condition>(<expr><name>vtable</name> == <name>NULL</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_ILLEGAL_URL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Unrecognized URL scheme for '%s'"</expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><name>repos_URL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <comment type="block">/* Create the session object. */</comment>
  <expr_stmt><expr><name>session</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>session</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>session</name>-&gt;<name>vtable</name></name> = <name>vtable</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>session</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>

  <comment type="block">/* Ask the library to open the session. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>vtable</name>-&gt;<name>open_session</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>repos_URL</name></expr></argument>, <argument><expr><name>callbacks</name></expr></argument>, <argument><expr><name>callback_baton</name></expr></argument>,
                               <argument><expr><name>config</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check the UUID. */</comment>
  <if>if <condition>(<expr><name>uuid</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repository_uuid</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>vtable</name>-&gt;<name>get_uuid</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>&amp;<name>repository_uuid</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>uuid</name></expr></argument>, <argument><expr><name>repository_uuid</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
        <block>{
          <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_UUID_MISMATCH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                   <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Repository UUID '%s' doesn't match "
                                     "expected UUID '%s'"</expr></argument>)</argument_list></call></expr></argument>,
                                   <argument><expr><name>repository_uuid</name></expr></argument>, <argument><expr><name>uuid</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
    }</block></then></if>

  <expr_stmt><expr>*<name>session_p</name> = <name>session</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_open2</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> **</type><name>session_p</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_URL</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>svn_ra_callbacks2_t</name> *</type><name>callbacks</name></decl></param>,
                          <param><decl><type><name>void</name> *</type><name>callback_baton</name></decl></param>,
                          <param><decl><type><name>apr_hash_t</name> *</type><name>config</name></decl></param>,
                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_ra_open3</name><argument_list>(<argument><expr><name>session_p</name></expr></argument>, <argument><expr><name>repos_URL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                      <argument><expr><name>callbacks</name></expr></argument>, <argument><expr><name>callback_baton</name></expr></argument>, <argument><expr><name>config</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_open</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> **</type><name>session_p</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_URL</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>svn_ra_callbacks_t</name> *</type><name>callbacks</name></decl></param>,
                         <param><decl><type><name>void</name> *</type><name>callback_baton</name></decl></param>,
                         <param><decl><type><name>apr_hash_t</name> *</type><name>config</name></decl></param>,
                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <comment type="block">/* Deprecated function. Copy the contents of the svn_ra_callbacks_t
     to a new svn_ra_callbacks2_t and call svn_ra_open2(). */</comment>
  <decl_stmt><decl><type><name>svn_ra_callbacks2_t</name> *</type><name>callbacks2</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_create_callbacks</name><argument_list>(<argument><expr>&amp;<name>callbacks2</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>callbacks2</name>-&gt;<name>open_tmp_file</name></name> = <name><name>callbacks</name>-&gt;<name>open_tmp_file</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>callbacks2</name>-&gt;<name>auth_baton</name></name> = <name><name>callbacks</name>-&gt;<name>auth_baton</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>callbacks2</name>-&gt;<name>get_wc_prop</name></name> = <name><name>callbacks</name>-&gt;<name>get_wc_prop</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>callbacks2</name>-&gt;<name>set_wc_prop</name></name> = <name><name>callbacks</name>-&gt;<name>set_wc_prop</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>callbacks2</name>-&gt;<name>push_wc_prop</name></name> = <name><name>callbacks</name>-&gt;<name>push_wc_prop</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>callbacks2</name>-&gt;<name>invalidate_wc_props</name></name> = <name><name>callbacks</name>-&gt;<name>invalidate_wc_props</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>callbacks2</name>-&gt;<name>progress_func</name></name> = <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>callbacks2</name>-&gt;<name>progress_baton</name></name> = <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><call><name>svn_ra_open2</name><argument_list>(<argument><expr><name>session_p</name></expr></argument>, <argument><expr><name>repos_URL</name></expr></argument>,
                      <argument><expr><name>callbacks2</name></expr></argument>, <argument><expr><name>callback_baton</name></expr></argument>,
                      <argument><expr><name>config</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_reparent</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_root</name></decl>;</decl_stmt>

  <comment type="block">/* Make sure the new URL is in the same repository, so that the
     implementations don't have to do it. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_repos_root2</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>&amp;<name>repos_root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr>! <call><name>svn_path_is_ancestor</name><argument_list>(<argument><expr><name>repos_root</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_ILLEGAL_URL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s' isn't in the same repository as '%s'"</expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><name>url</name></expr></argument>, <argument><expr><name>repos_root</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <return>return <expr><call><name><name>session</name>-&gt;<name>vtable</name>-&gt;<name>reparent</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_get_session_url</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>url</name></decl></param>,
                                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>session</name>-&gt;<name>vtable</name>-&gt;<name>get_session_url</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_get_latest_revnum</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                                      <param><decl><type><name>svn_revnum_t</name> *</type><name>latest_revnum</name></decl></param>,
                                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>session</name>-&gt;<name>vtable</name>-&gt;<name>get_latest_revnum</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>latest_revnum</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_get_dated_revision</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                                       <param><decl><type><name>svn_revnum_t</name> *</type><name>revision</name></decl></param>,
                                       <param><decl><type><name>apr_time_t</name></type> <name>tm</name></decl></param>,
                                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>session</name>-&gt;<name>vtable</name>-&gt;<name>get_dated_revision</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_change_rev_prop</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                                    <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
                                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>session</name>-&gt;<name>vtable</name>-&gt;<name>change_rev_prop</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_rev_proplist</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                                 <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                                 <param><decl><type><name>apr_hash_t</name> **</type><name>props</name></decl></param>,
                                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>session</name>-&gt;<name>vtable</name>-&gt;<name>rev_proplist</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_rev_prop</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                             <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                             <param><decl><type><name>svn_string_t</name> **</type><name>value</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>session</name>-&gt;<name>vtable</name>-&gt;<name>rev_prop</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_get_commit_editor3</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                                       <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
                                       <param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
                                       <param><decl><type><name>apr_hash_t</name> *</type><name>revprop_table</name></decl></param>,
                                       <param><decl><type><name>svn_commit_callback2_t</name></type> <name>callback</name></decl></param>,
                                       <param><decl><type><name>void</name> *</type><name>callback_baton</name></decl></param>,
                                       <param><decl><type><name>apr_hash_t</name> *</type><name>lock_tokens</name></decl></param>,
                                       <param><decl><type><name>svn_boolean_t</name></type> <name>keep_locks</name></decl></param>,
                                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>session</name>-&gt;<name>vtable</name>-&gt;<name>get_commit_editor</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>editor</name></expr></argument>, <argument><expr><name>edit_baton</name></expr></argument>,
                                            <argument><expr><name>revprop_table</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>,
                                            <argument><expr><name>callback_baton</name></expr></argument>, <argument><expr><name>lock_tokens</name></expr></argument>,
                                            <argument><expr><name>keep_locks</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_get_commit_editor2</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                                       <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
                                       <param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
                                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>log_msg</name></decl></param>,
                                       <param><decl><type><name>svn_commit_callback2_t</name></type> <name>callback</name></decl></param>,
                                       <param><decl><type><name>void</name> *</type><name>callback_baton</name></decl></param>,
                                       <param><decl><type><name>apr_hash_t</name> *</type><name>lock_tokens</name></decl></param>,
                                       <param><decl><type><name>svn_boolean_t</name></type> <name>keep_locks</name></decl></param>,
                                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>revprop_table</name> <init>= <expr><call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>log_msg</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>revprop_table</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_LOG</name></expr></argument>,
                 <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
                 <argument><expr><call><name>svn_string_create</name><argument_list>(<argument><expr><name>log_msg</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <return>return <expr><call><name>svn_ra_get_commit_editor3</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>editor</name></expr></argument>, <argument><expr><name>edit_baton</name></expr></argument>, <argument><expr><name>revprop_table</name></expr></argument>,
                                   <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>callback_baton</name></expr></argument>,
                                   <argument><expr><name>lock_tokens</name></expr></argument>, <argument><expr><name>keep_locks</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_get_commit_editor</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                                      <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
                                      <param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
                                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>log_msg</name></decl></param>,
                                      <param><decl><type><name>svn_commit_callback_t</name></type> <name>callback</name></decl></param>,
                                      <param><decl><type><name>void</name> *</type><name>callback_baton</name></decl></param>,
                                      <param><decl><type><name>apr_hash_t</name> *</type><name>lock_tokens</name></decl></param>,
                                      <param><decl><type><name>svn_boolean_t</name></type> <name>keep_locks</name></decl></param>,
                                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_commit_callback2_t</name></type> <name>callback2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>callback2_baton</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>svn_compat_wrap_commit_callback</name><argument_list>(<argument><expr>&amp;<name>callback2</name></expr></argument>, <argument><expr>&amp;<name>callback2_baton</name></expr></argument>,
                                  <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>callback_baton</name></expr></argument>,
                                  <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>svn_ra_get_commit_editor2</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>editor</name></expr></argument>, <argument><expr><name>edit_baton</name></expr></argument>,
                                   <argument><expr><name>log_msg</name></expr></argument>, <argument><expr><name>callback2</name></expr></argument>,
                                   <argument><expr><name>callback2_baton</name></expr></argument>, <argument><expr><name>lock_tokens</name></expr></argument>,
                                   <argument><expr><name>keep_locks</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_get_file</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                             <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                             <param><decl><type><name>svn_stream_t</name> *</type><name>stream</name></decl></param>,
                             <param><decl><type><name>svn_revnum_t</name> *</type><name>fetched_rev</name></decl></param>,
                             <param><decl><type><name>apr_hash_t</name> **</type><name>props</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>*<name>path</name> != '/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>session</name>-&gt;<name>vtable</name>-&gt;<name>get_file</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>,
                                   <argument><expr><name>fetched_rev</name></expr></argument>, <argument><expr><name>props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_get_dir</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                            <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                            <param><decl><type><name>apr_hash_t</name> **</type><name>dirents</name></decl></param>,
                            <param><decl><type><name>svn_revnum_t</name> *</type><name>fetched_rev</name></decl></param>,
                            <param><decl><type><name>apr_hash_t</name> **</type><name>props</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>*<name>path</name> != '/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>session</name>-&gt;<name>vtable</name>-&gt;<name>get_dir</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>dirents</name></expr></argument>, <argument><expr><name>fetched_rev</name></expr></argument>, <argument><expr><name>props</name></expr></argument>,
                                  <argument><expr><name>path</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>SVN_DIRENT_ALL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_get_dir2</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                             <param><decl><type><name>apr_hash_t</name> **</type><name>dirents</name></decl></param>,
                             <param><decl><type><name>svn_revnum_t</name> *</type><name>fetched_rev</name></decl></param>,
                             <param><decl><type><name>apr_hash_t</name> **</type><name>props</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                             <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                             <param><decl><type><name>apr_uint32_t</name></type> <name>dirent_fields</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>*<name>path</name> != '/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>session</name>-&gt;<name>vtable</name>-&gt;<name>get_dir</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>dirents</name></expr></argument>, <argument><expr><name>fetched_rev</name></expr></argument>, <argument><expr><name>props</name></expr></argument>,
                                  <argument><expr><name>path</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>dirent_fields</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_get_mergeinfo</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                                  <param><decl><type><name>svn_mergeinfo_catalog_t</name> *</type><name>catalog</name></decl></param>,
                                  <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>paths</name></decl></param>,
                                  <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                                  <param><decl><type><name>svn_mergeinfo_inheritance_t</name></type> <name>inherit</name></decl></param>,
                                  <param><decl><type><name>svn_boolean_t</name></type> <name>include_descendants</name></decl></param>,
                                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <comment type="block">/* Validate path format. */</comment>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>paths</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>paths</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>*<name>path</name> != '/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

  <comment type="block">/* Check server Merge Tracking capability. */</comment>
  <expr_stmt><expr><name>err</name> = <call><name>svn_ra__assert_mergeinfo_capable_server</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr>*<name>catalog</name> = <name>NULL</name></expr>;</expr_stmt>
      <return>return <expr><name>err</name></expr>;</return>
    }</block></then></if>

  <return>return <expr><call><name><name>session</name>-&gt;<name>vtable</name>-&gt;<name>get_mergeinfo</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>catalog</name></expr></argument>, <argument><expr><name>paths</name></expr></argument>,
                                        <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>inherit</name></expr></argument>,
                                        <argument><expr><name>include_descendants</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_do_update2</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>svn_ra_reporter3_t</name> **</type><name>reporter</name></decl></param>,
                               <param><decl><type><name>void</name> **</type><name>report_baton</name></decl></param>,
                               <param><decl><type><name>svn_revnum_t</name></type> <name>revision_to_update_to</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>update_target</name></decl></param>,
                               <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                               <param><decl><type><name>svn_boolean_t</name></type> <name>send_copyfrom_args</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>update_editor</name></decl></param>,
                               <param><decl><type><name>void</name> *</type><name>update_baton</name></decl></param>,
                               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>svn_path_is_empty</name><argument_list>(<argument><expr><name>update_target</name></expr></argument>)</argument_list></call>
         || <call><name>svn_path_is_single_path_component</name><argument_list>(<argument><expr><name>update_target</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>session</name>-&gt;<name>vtable</name>-&gt;<name>do_update</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                                    <argument><expr><name>reporter</name></expr></argument>, <argument><expr><name>report_baton</name></expr></argument>,
                                    <argument><expr><name>revision_to_update_to</name></expr></argument>, <argument><expr><name>update_target</name></expr></argument>,
                                    <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>send_copyfrom_args</name></expr></argument>,
                                    <argument><expr><name>update_editor</name></expr></argument>, <argument><expr><name>update_baton</name></expr></argument>,
                                    <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_do_update</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>svn_ra_reporter2_t</name> **</type><name>reporter</name></decl></param>,
                              <param><decl><type><name>void</name> **</type><name>report_baton</name></decl></param>,
                              <param><decl><type><name>svn_revnum_t</name></type> <name>revision_to_update_to</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>update_target</name></decl></param>,
                              <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>update_editor</name></decl></param>,
                              <param><decl><type><name>void</name> *</type><name>update_baton</name></decl></param>,
                              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>reporter_3in2_baton</name> *</type><name>b</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>svn_path_is_empty</name><argument_list>(<argument><expr><name>update_target</name></expr></argument>)</argument_list></call>
         || <call><name>svn_path_is_single_path_component</name><argument_list>(<argument><expr><name>update_target</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>reporter</name> = &amp;<name>reporter_3in2_wrapper</name></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>report_baton</name> = <name>b</name></expr>;</expr_stmt>
  <return>return <expr><call><name><name>session</name>-&gt;<name>vtable</name>-&gt;<name>do_update</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                                    <argument><expr>&amp;(<name><name>b</name>-&gt;<name>reporter3</name></name>)</expr></argument>, <argument><expr>&amp;(<name><name>b</name>-&gt;<name>reporter3_baton</name></name>)</expr></argument>,
                                    <argument><expr><name>revision_to_update_to</name></expr></argument>, <argument><expr><name>update_target</name></expr></argument>,
                                    <argument><expr><call><name>SVN_DEPTH_INFINITY_OR_FILES</name><argument_list>(<argument><expr><name>recurse</name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><name>FALSE</name></expr></argument>, <comment type="block">/* no copyfrom args */</comment>
                                    <argument><expr><name>update_editor</name></expr></argument>, <argument><expr><name>update_baton</name></expr></argument>,
                                    <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_do_switch2</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>svn_ra_reporter3_t</name> **</type><name>reporter</name></decl></param>,
                               <param><decl><type><name>void</name> **</type><name>report_baton</name></decl></param>,
                               <param><decl><type><name>svn_revnum_t</name></type> <name>revision_to_switch_to</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>switch_target</name></decl></param>,
                               <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>switch_url</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>switch_editor</name></decl></param>,
                               <param><decl><type><name>void</name> *</type><name>switch_baton</name></decl></param>,
                               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>svn_path_is_empty</name><argument_list>(<argument><expr><name>switch_target</name></expr></argument>)</argument_list></call>
         || <call><name>svn_path_is_single_path_component</name><argument_list>(<argument><expr><name>switch_target</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>session</name>-&gt;<name>vtable</name>-&gt;<name>do_switch</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                                    <argument><expr><name>reporter</name></expr></argument>, <argument><expr><name>report_baton</name></expr></argument>,
                                    <argument><expr><name>revision_to_switch_to</name></expr></argument>, <argument><expr><name>switch_target</name></expr></argument>,
                                    <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>switch_url</name></expr></argument>, <argument><expr><name>switch_editor</name></expr></argument>,
                                    <argument><expr><name>switch_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_do_switch</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>svn_ra_reporter2_t</name> **</type><name>reporter</name></decl></param>,
                              <param><decl><type><name>void</name> **</type><name>report_baton</name></decl></param>,
                              <param><decl><type><name>svn_revnum_t</name></type> <name>revision_to_switch_to</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>switch_target</name></decl></param>,
                              <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>switch_url</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>switch_editor</name></decl></param>,
                              <param><decl><type><name>void</name> *</type><name>switch_baton</name></decl></param>,
                              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>reporter_3in2_baton</name> *</type><name>b</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>svn_path_is_empty</name><argument_list>(<argument><expr><name>switch_target</name></expr></argument>)</argument_list></call>
         || <call><name>svn_path_is_single_path_component</name><argument_list>(<argument><expr><name>switch_target</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>reporter</name> = &amp;<name>reporter_3in2_wrapper</name></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>report_baton</name> = <name>b</name></expr>;</expr_stmt>
  <return>return <expr><call><name><name>session</name>-&gt;<name>vtable</name>-&gt;<name>do_switch</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                                    <argument><expr>&amp;(<name><name>b</name>-&gt;<name>reporter3</name></name>)</expr></argument>, <argument><expr>&amp;(<name><name>b</name>-&gt;<name>reporter3_baton</name></name>)</expr></argument>,
                                    <argument><expr><name>revision_to_switch_to</name></expr></argument>, <argument><expr><name>switch_target</name></expr></argument>,
                                    <argument><expr><call><name>SVN_DEPTH_INFINITY_OR_FILES</name><argument_list>(<argument><expr><name>recurse</name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><name>switch_url</name></expr></argument>, <argument><expr><name>switch_editor</name></expr></argument>, <argument><expr><name>switch_baton</name></expr></argument>,
                                    <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_do_status2</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>svn_ra_reporter3_t</name> **</type><name>reporter</name></decl></param>,
                               <param><decl><type><name>void</name> **</type><name>report_baton</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>status_target</name></decl></param>,
                               <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                               <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>status_editor</name></decl></param>,
                               <param><decl><type><name>void</name> *</type><name>status_baton</name></decl></param>,
                               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>svn_path_is_empty</name><argument_list>(<argument><expr><name>status_target</name></expr></argument>)</argument_list></call>
         || <call><name>svn_path_is_single_path_component</name><argument_list>(<argument><expr><name>status_target</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>session</name>-&gt;<name>vtable</name>-&gt;<name>do_status</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                                    <argument><expr><name>reporter</name></expr></argument>, <argument><expr><name>report_baton</name></expr></argument>,
                                    <argument><expr><name>status_target</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>,
                                    <argument><expr><name>status_editor</name></expr></argument>, <argument><expr><name>status_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_do_status</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>svn_ra_reporter2_t</name> **</type><name>reporter</name></decl></param>,
                              <param><decl><type><name>void</name> **</type><name>report_baton</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>status_target</name></decl></param>,
                              <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                              <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>status_editor</name></decl></param>,
                              <param><decl><type><name>void</name> *</type><name>status_baton</name></decl></param>,
                              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>reporter_3in2_baton</name> *</type><name>b</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>svn_path_is_empty</name><argument_list>(<argument><expr><name>status_target</name></expr></argument>)</argument_list></call>
         || <call><name>svn_path_is_single_path_component</name><argument_list>(<argument><expr><name>status_target</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>reporter</name> = &amp;<name>reporter_3in2_wrapper</name></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>report_baton</name> = <name>b</name></expr>;</expr_stmt>
  <return>return <expr><call><name><name>session</name>-&gt;<name>vtable</name>-&gt;<name>do_status</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                                    <argument><expr>&amp;(<name><name>b</name>-&gt;<name>reporter3</name></name>)</expr></argument>, <argument><expr>&amp;(<name><name>b</name>-&gt;<name>reporter3_baton</name></name>)</expr></argument>,
                                    <argument><expr><name>status_target</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>,
                                    <argument><expr><call><name>SVN_DEPTH_INFINITY_OR_IMMEDIATES</name><argument_list>(<argument><expr><name>recurse</name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><name>status_editor</name></expr></argument>, <argument><expr><name>status_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_do_diff3</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>svn_ra_reporter3_t</name> **</type><name>reporter</name></decl></param>,
                             <param><decl><type><name>void</name> **</type><name>report_baton</name></decl></param>,
                             <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>diff_target</name></decl></param>,
                             <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
                             <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl></param>,
                             <param><decl><type><name>svn_boolean_t</name></type> <name>text_deltas</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>versus_url</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>diff_editor</name></decl></param>,
                             <param><decl><type><name>void</name> *</type><name>diff_baton</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>svn_path_is_empty</name><argument_list>(<argument><expr><name>diff_target</name></expr></argument>)</argument_list></call>
         || <call><name>svn_path_is_single_path_component</name><argument_list>(<argument><expr><name>diff_target</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>session</name>-&gt;<name>vtable</name>-&gt;<name>do_diff</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                                  <argument><expr><name>reporter</name></expr></argument>, <argument><expr><name>report_baton</name></expr></argument>,
                                  <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>diff_target</name></expr></argument>,
                                  <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>ignore_ancestry</name></expr></argument>,
                                  <argument><expr><name>text_deltas</name></expr></argument>, <argument><expr><name>versus_url</name></expr></argument>, <argument><expr><name>diff_editor</name></expr></argument>,
                                  <argument><expr><name>diff_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_do_diff2</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>svn_ra_reporter2_t</name> **</type><name>reporter</name></decl></param>,
                             <param><decl><type><name>void</name> **</type><name>report_baton</name></decl></param>,
                             <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>diff_target</name></decl></param>,
                             <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                             <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl></param>,
                             <param><decl><type><name>svn_boolean_t</name></type> <name>text_deltas</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>versus_url</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>diff_editor</name></decl></param>,
                             <param><decl><type><name>void</name> *</type><name>diff_baton</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>reporter_3in2_baton</name> *</type><name>b</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>svn_path_is_empty</name><argument_list>(<argument><expr><name>diff_target</name></expr></argument>)</argument_list></call>
         || <call><name>svn_path_is_single_path_component</name><argument_list>(<argument><expr><name>diff_target</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>reporter</name> = &amp;<name>reporter_3in2_wrapper</name></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>report_baton</name> = <name>b</name></expr>;</expr_stmt>
  <return>return <expr><call><name><name>session</name>-&gt;<name>vtable</name>-&gt;<name>do_diff</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>,
                                  <argument><expr>&amp;(<name><name>b</name>-&gt;<name>reporter3</name></name>)</expr></argument>, <argument><expr>&amp;(<name><name>b</name>-&gt;<name>reporter3_baton</name></name>)</expr></argument>,
                                  <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>diff_target</name></expr></argument>,
                                  <argument><expr><call><name>SVN_DEPTH_INFINITY_OR_FILES</name><argument_list>(<argument><expr><name>recurse</name></expr></argument>)</argument_list></call></expr></argument>,
                                  <argument><expr><name>ignore_ancestry</name></expr></argument>, <argument><expr><name>text_deltas</name></expr></argument>, <argument><expr><name>versus_url</name></expr></argument>,
                                  <argument><expr><name>diff_editor</name></expr></argument>, <argument><expr><name>diff_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_do_diff</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>svn_ra_reporter2_t</name> **</type><name>reporter</name></decl></param>,
                            <param><decl><type><name>void</name> **</type><name>report_baton</name></decl></param>,
                            <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>diff_target</name></decl></param>,
                            <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                            <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>versus_url</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>diff_editor</name></decl></param>,
                            <param><decl><type><name>void</name> *</type><name>diff_baton</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>svn_path_is_empty</name><argument_list>(<argument><expr><name>diff_target</name></expr></argument>)</argument_list></call>
         || <call><name>svn_path_is_single_path_component</name><argument_list>(<argument><expr><name>diff_target</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>svn_ra_do_diff2</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>reporter</name></expr></argument>, <argument><expr><name>report_baton</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>,
                         <argument><expr><name>diff_target</name></expr></argument>, <argument><expr><name>recurse</name></expr></argument>, <argument><expr><name>ignore_ancestry</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
                         <argument><expr><name>versus_url</name></expr></argument>, <argument><expr><name>diff_editor</name></expr></argument>, <argument><expr><name>diff_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_get_log2</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>paths</name></decl></param>,
                             <param><decl><type><name>svn_revnum_t</name></type> <name>start</name></decl></param>,
                             <param><decl><type><name>svn_revnum_t</name></type> <name>end</name></decl></param>,
                             <param><decl><type><name>int</name></type> <name>limit</name></decl></param>,
                             <param><decl><type><name>svn_boolean_t</name></type> <name>discover_changed_paths</name></decl></param>,
                             <param><decl><type><name>svn_boolean_t</name></type> <name>strict_node_history</name></decl></param>,
                             <param><decl><type><name>svn_boolean_t</name></type> <name>include_merged_revisions</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>revprops</name></decl></param>,
                             <param><decl><type><name>svn_log_entry_receiver_t</name></type> <name>receiver</name></decl></param>,
                             <param><decl><type><name>void</name> *</type><name>receiver_baton</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>paths</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
      <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>paths</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>paths</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>*<name>path</name> != '/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></then></if>

  <if>if <condition>(<expr><name>include_merged_revisions</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra__assert_mergeinfo_capable_server</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <return>return <expr><call><name><name>session</name>-&gt;<name>vtable</name>-&gt;<name>get_log</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>paths</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>,
                                  <argument><expr><name>discover_changed_paths</name></expr></argument>, <argument><expr><name>strict_node_history</name></expr></argument>,
                                  <argument><expr><name>include_merged_revisions</name></expr></argument>, <argument><expr><name>revprops</name></expr></argument>,
                                  <argument><expr><name>receiver</name></expr></argument>, <argument><expr><name>receiver_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_get_log</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>paths</name></decl></param>,
                            <param><decl><type><name>svn_revnum_t</name></type> <name>start</name></decl></param>,
                            <param><decl><type><name>svn_revnum_t</name></type> <name>end</name></decl></param>,
                            <param><decl><type><name>int</name></type> <name>limit</name></decl></param>,
                            <param><decl><type><name>svn_boolean_t</name></type> <name>discover_changed_paths</name></decl></param>,
                            <param><decl><type><name>svn_boolean_t</name></type> <name>strict_node_history</name></decl></param>,
                            <param><decl><type><name>svn_log_message_receiver_t</name></type> <name>receiver</name></decl></param>,
                            <param><decl><type><name>void</name> *</type><name>receiver_baton</name></decl></param>,
                            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_log_entry_receiver_t</name></type> <name>receiver2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>receiver2_baton</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>paths</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
      <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>paths</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>paths</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>*<name>path</name> != '/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></then></if>

  <expr_stmt><expr><call><name>svn_compat_wrap_log_receiver</name><argument_list>(<argument><expr>&amp;<name>receiver2</name></expr></argument>, <argument><expr>&amp;<name>receiver2_baton</name></expr></argument>,
                               <argument><expr><name>receiver</name></expr></argument>, <argument><expr><name>receiver_baton</name></expr></argument>,
                               <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>svn_ra_get_log2</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>paths</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>,
                         <argument><expr><name>discover_changed_paths</name></expr></argument>, <argument><expr><name>strict_node_history</name></expr></argument>,
                         <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><call><name>svn_compat_log_revprops_in</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
                         <argument><expr><name>receiver2</name></expr></argument>, <argument><expr><name>receiver2_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_check_path</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                               <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                               <param><decl><type><name>svn_node_kind_t</name> *</type><name>kind</name></decl></param>,
                               <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>*<name>path</name> != '/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>session</name>-&gt;<name>vtable</name>-&gt;<name>check_path</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>kind</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_stat</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                         <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                         <param><decl><type><name>svn_dirent_t</name> **</type><name>dirent</name></decl></param>,
                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>*<name>path</name> != '/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>session</name>-&gt;<name>vtable</name>-&gt;<name>stat</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>dirent</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_get_uuid2</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>uuid</name></decl></param>,
                              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>session</name>-&gt;<name>vtable</name>-&gt;<name>get_uuid</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>uuid</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>uuid</name> = *<name>uuid</name> ? <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>*<name>uuid</name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_get_uuid</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>uuid</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>session</name>-&gt;<name>vtable</name>-&gt;<name>get_uuid</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>uuid</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_get_repos_root2</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>url</name></decl></param>,
                                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>session</name>-&gt;<name>vtable</name>-&gt;<name>get_repos_root</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>url</name> = *<name>url</name> ? <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>*<name>url</name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_get_repos_root</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>url</name></decl></param>,
                                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>session</name>-&gt;<name>vtable</name>-&gt;<name>get_repos_root</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_get_locations</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                                  <param><decl><type><name>apr_hash_t</name> **</type><name>locations</name></decl></param>,
                                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                  <param><decl><type><name>svn_revnum_t</name></type> <name>peg_revision</name></decl></param>,
                                  <param><decl><type><name>apr_array_header_t</name> *</type><name>location_revisions</name></decl></param>,
                                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>*<name>path</name> != '/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>err</name> = <call><name><name>session</name>-&gt;<name>vtable</name>-&gt;<name>get_locations</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>locations</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
                                       <argument><expr><name>peg_revision</name></expr></argument>, <argument><expr><name>location_revisions</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>err</name> &amp;&amp; (<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_RA_NOT_IMPLEMENTED</name>)</expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Do it the slow way, using get-logs, for older servers. */</comment>
      <expr_stmt><expr><name>err</name> = <call><name>svn_ra__locations_from_log</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>locations</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
                                       <argument><expr><name>peg_revision</name></expr></argument>, <argument><expr><name>location_revisions</name></expr></argument>,
                                       <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_get_location_segments</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                             <param><decl><type><name>svn_revnum_t</name></type> <name>peg_revision</name></decl></param>,
                             <param><decl><type><name>svn_revnum_t</name></type> <name>start_rev</name></decl></param>,
                             <param><decl><type><name>svn_revnum_t</name></type> <name>end_rev</name></decl></param>,
                             <param><decl><type><name>svn_location_segment_receiver_t</name></type> <name>receiver</name></decl></param>,
                             <param><decl><type><name>void</name> *</type><name>receiver_baton</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>*<name>path</name> != '/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>err</name> = <call><name><name>session</name>-&gt;<name>vtable</name>-&gt;<name>get_location_segments</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>peg_revision</name></expr></argument>,
                                               <argument><expr><name>start_rev</name></expr></argument>, <argument><expr><name>end_rev</name></expr></argument>,
                                               <argument><expr><name>receiver</name></expr></argument>, <argument><expr><name>receiver_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>err</name> &amp;&amp; (<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_RA_NOT_IMPLEMENTED</name>)</expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Do it the slow way, using get-logs, for older servers. */</comment>
      <expr_stmt><expr><name>err</name> = <call><name>svn_ra__location_segments_from_log</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
                                               <argument><expr><name>peg_revision</name></expr></argument>, <argument><expr><name>start_rev</name></expr></argument>,
                                               <argument><expr><name>end_rev</name></expr></argument>, <argument><expr><name>receiver</name></expr></argument>,
                                               <argument><expr><name>receiver_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_get_file_revs</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                  <param><decl><type><name>svn_revnum_t</name></type> <name>start</name></decl></param>,
                                  <param><decl><type><name>svn_revnum_t</name></type> <name>end</name></decl></param>,
                                  <param><decl><type><name>svn_ra_file_rev_handler_t</name></type> <name>handler</name></decl></param>,
                                  <param><decl><type><name>void</name> *</type><name>handler_baton</name></decl></param>,
                                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_file_rev_handler_t</name></type> <name>handler2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>handler2_baton</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>*<name>path</name> != '/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>svn_compat_wrap_file_rev_handler</name><argument_list>(<argument><expr>&amp;<name>handler2</name></expr></argument>, <argument><expr>&amp;<name>handler2_baton</name></expr></argument>,
                                   <argument><expr><name>handler</name></expr></argument>, <argument><expr><name>handler_baton</name></expr></argument>,
                                   <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>svn_ra_get_file_revs2</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>handler2</name></expr></argument>,
                               <argument><expr><name>handler2_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_get_file_revs2</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                   <param><decl><type><name>svn_revnum_t</name></type> <name>start</name></decl></param>,
                                   <param><decl><type><name>svn_revnum_t</name></type> <name>end</name></decl></param>,
                                   <param><decl><type><name>svn_boolean_t</name></type> <name>include_merged_revisions</name></decl></param>,
                                   <param><decl><type><name>svn_file_rev_handler_t</name></type> <name>handler</name></decl></param>,
                                   <param><decl><type><name>void</name> *</type><name>handler_baton</name></decl></param>,
                                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>*<name>path</name> != '/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>include_merged_revisions</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra__assert_mergeinfo_capable_server</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <expr_stmt><expr><name>err</name> = <call><name><name>session</name>-&gt;<name>vtable</name>-&gt;<name>get_file_revs</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>,
                                       <argument><expr><name>include_merged_revisions</name></expr></argument>,
                                       <argument><expr><name>handler</name></expr></argument>, <argument><expr><name>handler_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>err</name> &amp;&amp; (<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_RA_NOT_IMPLEMENTED</name>)</expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Do it the slow way, using get-logs, for older servers. */</comment>
      <expr_stmt><expr><name>err</name> = <call><name>svn_ra__file_revs_from_log</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>,
                                       <argument><expr><name>handler</name></expr></argument>, <argument><expr><name>handler_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_lock</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                         <param><decl><type><name>apr_hash_t</name> *</type><name>path_revs</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>comment</name></decl></param>,
                         <param><decl><type><name>svn_boolean_t</name></type> <name>steal_lock</name></decl></param>,
                         <param><decl><type><name>svn_ra_lock_callback_t</name></type> <name>lock_func</name></decl></param>,
                         <param><decl><type><name>void</name> *</type><name>lock_baton</name></decl></param>,
                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>

  <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>path_revs</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>path</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>*((const <name>char</name> *)<name>path</name>) != '/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

  <if>if <condition>(<expr><name>comment</name> &amp;&amp; ! <call><name>svn_xml_is_xml_safe</name><argument_list>(<argument><expr><name>comment</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_create</name>
      <argument_list>(<argument><expr><name>SVN_ERR_XML_UNESCAPABLE_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
       <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Lock comment contains illegal characters"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <return>return <expr><call><name><name>session</name>-&gt;<name>vtable</name>-&gt;<name>lock</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>path_revs</name></expr></argument>, <argument><expr><name>comment</name></expr></argument>, <argument><expr><name>steal_lock</name></expr></argument>,
                               <argument><expr><name>lock_func</name></expr></argument>, <argument><expr><name>lock_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_unlock</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                           <param><decl><type><name>apr_hash_t</name> *</type><name>path_tokens</name></decl></param>,
                           <param><decl><type><name>svn_boolean_t</name></type> <name>break_lock</name></decl></param>,
                           <param><decl><type><name>svn_ra_lock_callback_t</name></type> <name>lock_func</name></decl></param>,
                           <param><decl><type><name>void</name> *</type><name>lock_baton</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>

  <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>path_tokens</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>path</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>*((const <name>char</name> *)<name>path</name>) != '/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

  <return>return <expr><call><name><name>session</name>-&gt;<name>vtable</name>-&gt;<name>unlock</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>path_tokens</name></expr></argument>, <argument><expr><name>break_lock</name></expr></argument>,
                                 <argument><expr><name>lock_func</name></expr></argument>, <argument><expr><name>lock_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_get_lock</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                             <param><decl><type><name>svn_lock_t</name> **</type><name>lock</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>*<name>path</name> != '/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>session</name>-&gt;<name>vtable</name>-&gt;<name>get_lock</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_get_locks</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                              <param><decl><type><name>apr_hash_t</name> **</type><name>locks</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>*<name>path</name> != '/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>session</name>-&gt;<name>vtable</name>-&gt;<name>get_locks</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>locks</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_replay</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                           <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                           <param><decl><type><name>svn_revnum_t</name></type> <name>low_water_mark</name></decl></param>,
                           <param><decl><type><name>svn_boolean_t</name></type> <name>text_deltas</name></decl></param>,
                           <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>editor</name></decl></param>,
                           <param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>session</name>-&gt;<name>vtable</name>-&gt;<name>replay</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>low_water_mark</name></expr></argument>,
                                 <argument><expr><name>text_deltas</name></expr></argument>, <argument><expr><name>editor</name></expr></argument>, <argument><expr><name>edit_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_replay_range</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                    <param><decl><type><name>svn_revnum_t</name></type> <name>start_revision</name></decl></param>,
                    <param><decl><type><name>svn_revnum_t</name></type> <name>end_revision</name></decl></param>,
                    <param><decl><type><name>svn_revnum_t</name></type> <name>low_water_mark</name></decl></param>,
                    <param><decl><type><name>svn_boolean_t</name></type> <name>text_deltas</name></decl></param>,
                    <param><decl><type><name>svn_ra_replay_revstart_callback_t</name></type> <name>revstart_func</name></decl></param>,
                    <param><decl><type><name>svn_ra_replay_revfinish_callback_t</name></type> <name>revfinish_func</name></decl></param>,
                    <param><decl><type><name>void</name> *</type><name>replay_baton</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= 
    <expr><call><name><name>session</name>-&gt;<name>vtable</name>-&gt;<name>replay_range</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>start_revision</name></expr></argument>, <argument><expr><name>end_revision</name></expr></argument>, 
                                  <argument><expr><name>low_water_mark</name></expr></argument>, <argument><expr><name>text_deltas</name></expr></argument>, 
                                  <argument><expr><name>revstart_func</name></expr></argument>, <argument><expr><name>revfinish_func</name></expr></argument>,
                                  <argument><expr><name>replay_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>err</name> &amp;&amp; (<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_RA_NOT_IMPLEMENTED</name>)</expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>err</name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt>

      <for>for (<init><expr><name>rev</name> = <name>start_revision</name></expr> ;</init> <condition><expr><name>rev</name> &lt;= <name>end_revision</name></expr> ;</condition> <incr><expr><name>rev</name>++</expr></incr>)
        <block>{
          <decl_stmt><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>editor</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>void</name> *</type><name>edit_baton</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>rev_props</name></decl>;</decl_stmt>

          <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_rev_proplist</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr>&amp;<name>rev_props</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>revstart_func</name><argument_list>(<argument><expr><name>rev</name></expr></argument>, <argument><expr><name>replay_baton</name></expr></argument>, 
                                <argument><expr>&amp;<name>editor</name></expr></argument>, <argument><expr>&amp;<name>edit_baton</name></expr></argument>, 
                                <argument><expr><name>rev_props</name></expr></argument>,
                                <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_replay</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>low_water_mark</name></expr></argument>,
                                <argument><expr><name>text_deltas</name></expr></argument>, <argument><expr><name>editor</name></expr></argument>, <argument><expr><name>edit_baton</name></expr></argument>, 
                                <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>revfinish_func</name><argument_list>(<argument><expr><name>rev</name></expr></argument>, <argument><expr><name>replay_baton</name></expr></argument>, 
                                 <argument><expr><name>editor</name></expr></argument>, <argument><expr><name>edit_baton</name></expr></argument>,
                                 <argument><expr><name>rev_props</name></expr></argument>,
                                 <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
      <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type><name>svn_ra_has_capability</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
                                   <param><decl><type><name>svn_boolean_t</name> *</type><name>has</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>capability</name></decl></param>,
                                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>session</name>-&gt;<name>vtable</name>-&gt;<name>has_capability</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>has</name></expr></argument>, <argument><expr><name>capability</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<escape char="0xc"/>

<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_print_modules</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> *</type><name>output</name></decl></param>,
                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> struct <name>ra_lib_defn</name> *</type><name>defn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> * <specifier>const</specifier> *</type><name>schemes</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_ra__init_func_t</name></type> <name>initfunc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_ra__vtable_t</name> *</type><name>vtable</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iterpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <for>for (<init><expr><name>defn</name> = <name>ra_libraries</name></expr>;</init> <condition><expr><name><name>defn</name>-&gt;<name>ra_name</name></name> != <name>NULL</name></expr>;</condition> <incr><expr>++<name>defn</name></expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>char</name> *</type><name>line</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>initfunc</name> = <name><name>defn</name>-&gt;<name>initfunc</name></name></expr>;</expr_stmt>
      <if>if <condition>(<expr>! <name>initfunc</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>load_ra_module</name><argument_list>(<argument><expr>&amp;<name>initfunc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>defn</name>-&gt;<name>ra_name</name></name></expr></argument>,
                               <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <if>if <condition>(<expr><name>initfunc</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>initfunc</name><argument_list>(<argument><expr><call><name>svn_ra_version</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>&amp;<name>vtable</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_ra_version</name><argument_list>(<argument><expr><call><name><name>vtable</name>-&gt;<name>get_version</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>defn</name>-&gt;<name>ra_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="block">/* Note: if you change the formatting of the description,
             bear in mind that ra_svn's description has multiple lines when
             built with SASL. */</comment>
          <expr_stmt><expr><name>line</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>, <argument><expr>"* ra_%s : %s\n"</expr></argument>,
                              <argument><expr><name><name>defn</name>-&gt;<name>ra_name</name></name></expr></argument>,
                              <argument><expr><call><name><name>vtable</name>-&gt;<name>get_description</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <for>for (<init><expr><name>schemes</name> = <call><name><name>vtable</name>-&gt;<name>get_schemes</name></name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr>*<name>schemes</name> != <name>NULL</name></expr>;</condition>
               <incr><expr>++<name>schemes</name></expr></incr>)
            <block>{
              <expr_stmt><expr><name>line</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"  - handles '%s' scheme\n"</expr></argument>)</argument_list></call></expr></argument>,
                                  <argument><expr>*<name>schemes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>
    }</block></for>

  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_print_ra_libraries</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> **</type><name>descriptions</name></decl></param>,
                          <param><decl><type><name>void</name> *</type><name>ra_baton</name></decl></param>,
                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>descriptions</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>svn_ra_print_modules</name><argument_list>(<argument><expr>*<name>descriptions</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<comment type="block">/* Return the library version number. */</comment>
<function><type><specifier>const</specifier> <name>svn_version_t</name> *</type>
<name>svn_ra_version</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name>SVN_VERSION_BODY</name></expr>;</expr_stmt>
}</block></function>

<escape char="0xc"/>
<comment type="block">/*** Compatibility Interfaces **/</comment>
<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_init_ra_libs</name><parameter_list>(<param><decl><type><name>void</name> **</type><name>ra_baton</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr>*<name>ra_baton</name> = <name>pool</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_get_ra_library</name><parameter_list>(<param><decl><type><name>svn_ra_plugin_t</name> **</type><name>library</name></decl></param>,
                      <param><decl><type><name>void</name> *</type><name>ra_baton</name></decl></param>,
                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> struct <name>ra_lib_defn</name> *</type><name>defn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>load_pool</name> <init>= <expr><name>ra_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>ht</name> <init>= <expr><call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Figure out which RA library key matches URL. */</comment>
  <for>for (<init><expr><name>defn</name> = <name>ra_libraries</name></expr>;</init> <condition><expr><name><name>defn</name>-&gt;<name>ra_name</name></name> != <name>NULL</name></expr>;</condition> <incr><expr>++<name>defn</name></expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>scheme</name></decl>;</decl_stmt>
      <if>if <condition>(<expr>(<name>scheme</name> = <call><name>has_scheme_of</name><argument_list>(<argument><expr><name>defn</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>svn_ra_init_func_t</name></type> <name>compat_initfunc</name> <init>= <expr><name><name>defn</name>-&gt;<name>compat_initfunc</name></name></expr></init></decl>;</decl_stmt>

          <if>if <condition>(<expr>! <name>compat_initfunc</name></expr>)</condition><then>
            <block>{
              <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>load_ra_module</name>
                      <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>compat_initfunc</name></expr></argument>, <argument><expr><name><name>defn</name>-&gt;<name>ra_name</name></name></expr></argument>, <argument><expr><name>load_pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
          <if>if <condition>(<expr>! <name>compat_initfunc</name></expr>)</condition><then>
            <block>{
              <continue>continue;</continue>
            }</block></then></if>

          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>compat_initfunc</name><argument_list>(<argument><expr><name>SVN_RA_ABI_VERSION</name></expr></argument>, <argument><expr><name>load_pool</name></expr></argument>, <argument><expr><name>ht</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr>*<name>library</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr><name>scheme</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="block">/* The library may support just a subset of the schemes listed,
             so we have to check here too. */</comment>
          <if>if <condition>(<expr>! *<name>library</name></expr>)</condition><then>
            <break>break;</break></then></if>

          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_ra_version</name><argument_list>(<argument><expr><call><name>(*<name>library</name>)-&gt;<name>get_version</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>scheme</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
        }</block></then></if>
    }</block></for>

  <comment type="block">/* Couldn't find a match... */</comment>
  <expr_stmt><expr>*<name>library</name> = <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_ILLEGAL_URL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                           <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Unrecognized URL scheme '%s'"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* For each libsvn_ra_foo library that is not linked in, provide a default
   implementation for svn_ra_foo_init which returns a "not implemented"
   error. */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVN_LIBSVN_CLIENT_LINKS_RA_NEON</name></cpp:ifndef>
<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_dav_init</name><parameter_list>(<param><decl><type><name>int</name></type> <name>abi_version</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                <param><decl><type><name>apr_hash_t</name> *</type><name>hash</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_NOT_IMPLEMENTED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ! SVN_LIBSVN_CLIENT_LINKS_RA_NEON */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVN_LIBSVN_CLIENT_LINKS_RA_SVN</name></cpp:ifndef>
<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_svn_init</name><parameter_list>(<param><decl><type><name>int</name></type> <name>abi_version</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                <param><decl><type><name>apr_hash_t</name> *</type><name>hash</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_NOT_IMPLEMENTED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ! SVN_LIBSVN_CLIENT_LINKS_RA_SVN */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVN_LIBSVN_CLIENT_LINKS_RA_LOCAL</name></cpp:ifndef>
<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_local_init</name><parameter_list>(<param><decl><type><name>int</name></type> <name>abi_version</name></decl></param>,
                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                  <param><decl><type><name>apr_hash_t</name> *</type><name>hash</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_NOT_IMPLEMENTED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ! SVN_LIBSVN_CLIENT_LINKS_RA_LOCAL */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SVN_LIBSVN_CLIENT_LINKS_RA_SERF</name></cpp:ifndef>
<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf_init</name><parameter_list>(<param><decl><type><name>int</name></type> <name>abi_version</name></decl></param>,
                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                 <param><decl><type><name>apr_hash_t</name> *</type><name>hash</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_NOT_IMPLEMENTED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ! SVN_LIBSVN_CLIENT_LINKS_RA_SERF */</comment>
</unit>
