<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/libsvn_ra/wrapper_template.h"><comment type="block">/**
 * @copyright
 * ====================================================================
 * Copyright (c) 2005-2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 * @endcopyright
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_compat.h"</cpp:file></cpp:include>

<comment type="block">/* This file is a template for a compatibility wrapper for an RA library.
 * It contains an svn_ra_plugin_t and wrappers for all of its functions,
 * implemented in terms of svn_ra__vtable_t functions.  It also contains
 * the implementations of an svn_ra_FOO_init for the FOO RA library.
 *
 * A file in the RA library includes this file, providing the
 * following macros before inclusion:
 *
 * NAME             The library name, e.g. "ra_local".
 * DESCRIPTION      The short library description as a string constant.
 * VTBL             The name of an svn_ra_vtable_t object for the library.
 * INITFUNC         The init function for the library, e.g. svn_ra_local__init.
 * COMPAT_INITFUNC  The compatibility init function, e.g. svn_ra_local_init.
 */</comment>

<comment type="block">/* Check that all our "arguments" are defined. */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>! <call><name>defined</name><argument_list>(<argument><expr><name>NAME</name></expr></argument>)</argument_list></call> || ! <call><name>defined</name><argument_list>(<argument><expr><name>DESCRIPTION</name></expr></argument>)</argument_list></call> || ! <call><name>defined</name><argument_list>(<argument><expr><name>VTBL</name></expr></argument>)</argument_list></call> \
    || ! <call><name>defined</name><argument_list>(<argument><expr><name>INITFUNC</name></expr></argument>)</argument_list></call> || ! <call><name>defined</name><argument_list>(<argument><expr><name>COMPAT_INITFUNC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> Missing define for RA compatibility wrapper.</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>compat_open</name><parameter_list>(<param><decl><type><name>void</name> **</type><name>session_baton</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_URL</name></decl></param>,
                                <param><decl><type><specifier>const</specifier> <name>svn_ra_callbacks_t</name> *</type><name>callbacks</name></decl></param>,
                                <param><decl><type><name>void</name> *</type><name>callback_baton</name></decl></param>,
                                <param><decl><type><name>apr_hash_t</name> *</type><name>config</name></decl></param>,
                                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <comment type="block">/* Here, we should be calling svn_ra_create_callbacks to initialize
   * the svn_ra_callbacks2_t structure.  However, doing that
   * introduces a circular dependancy between libsvn_ra and
   * libsvn_ra_{local,neon,serf,svn}, which include
   * wrapper_template.h.  In turn, circular dependancies break the
   * build on win32 (and possibly other systems).
   *
   * In order to avoid this happening at all, the code of
   * svn_ra_create_callbacks is duplicated here.  This is evil, but
   * the alternative (creating a new ra_util library) would be massive
   * overkill for the time being.  Just be sure to keep the following
   * line and the code of svn_ra_create_callbacks in sync.  */</comment>
  <decl_stmt><decl><type><name>svn_ra_callbacks2_t</name> *</type><name>callbacks2</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
                                                <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>callbacks2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>sess</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>sess</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>sess</name>-&gt;<name>vtable</name></name> = &amp;<name>VTBL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sess</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>callbacks2</name>-&gt;<name>open_tmp_file</name></name> = <name><name>callbacks</name>-&gt;<name>open_tmp_file</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>callbacks2</name>-&gt;<name>auth_baton</name></name> = <name><name>callbacks</name>-&gt;<name>auth_baton</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>callbacks2</name>-&gt;<name>get_wc_prop</name></name> = <name><name>callbacks</name>-&gt;<name>get_wc_prop</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>callbacks2</name>-&gt;<name>set_wc_prop</name></name> = <name><name>callbacks</name>-&gt;<name>set_wc_prop</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>callbacks2</name>-&gt;<name>push_wc_prop</name></name> = <name><name>callbacks</name>-&gt;<name>push_wc_prop</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>callbacks2</name>-&gt;<name>invalidate_wc_props</name></name> = <name><name>callbacks</name>-&gt;<name>invalidate_wc_props</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>callbacks2</name>-&gt;<name>progress_func</name></name> = <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>callbacks2</name>-&gt;<name>progress_baton</name></name> = <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>VTBL</name>.<name>open_session</name></name><argument_list>(<argument><expr><name>sess</name></expr></argument>, <argument><expr><name>repos_URL</name></expr></argument>, <argument><expr><name>callbacks2</name></expr></argument>, <argument><expr><name>callback_baton</name></expr></argument>,
                            <argument><expr><name>config</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>session_baton</name> = <name>sess</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>compat_get_latest_revnum</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>session_baton</name></decl></param>,
                                             <param><decl><type><name>svn_revnum_t</name> *</type><name>latest_revnum</name></decl></param>,
                                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>VTBL</name>.<name>get_latest_revnum</name></name><argument_list>(<argument><expr><name>session_baton</name></expr></argument>, <argument><expr><name>latest_revnum</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>compat_get_dated_revision</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>session_baton</name></decl></param>,
                                              <param><decl><type><name>svn_revnum_t</name> *</type><name>revision</name></decl></param>,
                                              <param><decl><type><name>apr_time_t</name></type> <name>tm</name></decl></param>,
                                              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>VTBL</name>.<name>get_dated_revision</name></name><argument_list>(<argument><expr><name>session_baton</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>compat_change_rev_prop</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>session_baton</name></decl></param>,
                                           <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>propname</name></decl></param>,
                                           <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
                                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>VTBL</name>.<name>change_rev_prop</name></name><argument_list>(<argument><expr><name>session_baton</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>propname</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>compat_rev_proplist</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>session_baton</name></decl></param>,
                                        <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                                        <param><decl><type><name>apr_hash_t</name> **</type><name>props</name></decl></param>,
                                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>VTBL</name>.<name>rev_proplist</name></name><argument_list>(<argument><expr><name>session_baton</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>compat_rev_prop</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>session_baton</name></decl></param>,
                                    <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>propname</name></decl></param>,
                                    <param><decl><type><name>svn_string_t</name> **</type><name>value</name></decl></param>,
                                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>VTBL</name>.<name>rev_prop</name></name><argument_list>(<argument><expr><name>session_baton</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>propname</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>compat_get_commit_editor</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>session_baton</name></decl></param>,
                                             <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name>
                                             **</type><name>editor</name></decl></param>,
                                             <param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
                                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>log_msg</name></decl></param>,
                                             <param><decl><type><name>svn_commit_callback_t</name></type> <name>callback</name></decl></param>,
                                             <param><decl><type><name>void</name> *</type><name>callback_baton</name></decl></param>,
                                             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_commit_callback2_t</name></type> <name>callback2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>callback2_baton</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>revprop_table</name> <init>= <expr><call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>svn_compat_wrap_commit_callback</name><argument_list>(<argument><expr>&amp;<name>callback2</name></expr></argument>, <argument><expr>&amp;<name>callback2_baton</name></expr></argument>,
                                  <argument><expr><name>callback</name></expr></argument>, <argument><expr><name>callback_baton</name></expr></argument>,
                                  <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>revprop_table</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_LOG</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
               <argument><expr><call><name>svn_string_create</name><argument_list>(<argument><expr><name>log_msg</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>VTBL</name>.<name>get_commit_editor</name></name><argument_list>(<argument><expr><name>session_baton</name></expr></argument>, <argument><expr><name>editor</name></expr></argument>, <argument><expr><name>edit_baton</name></expr></argument>,
                                <argument><expr><name>revprop_table</name></expr></argument>, <argument><expr><name>callback2</name></expr></argument>, <argument><expr><name>callback2_baton</name></expr></argument>,
                                <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>compat_get_file</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>session_baton</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                    <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                                    <param><decl><type><name>svn_stream_t</name> *</type><name>stream</name></decl></param>,
                                    <param><decl><type><name>svn_revnum_t</name> *</type><name>fetched_rev</name></decl></param>,
                                    <param><decl><type><name>apr_hash_t</name> **</type><name>props</name></decl></param>,
                                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>VTBL</name>.<name>get_file</name></name><argument_list>(<argument><expr><name>session_baton</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>fetched_rev</name></expr></argument>,
                       <argument><expr><name>props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>compat_get_dir</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>session_baton</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                   <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                                   <param><decl><type><name>apr_hash_t</name> **</type><name>dirents</name></decl></param>,
                                   <param><decl><type><name>svn_revnum_t</name> *</type><name>fetched_rev</name></decl></param>,
                                   <param><decl><type><name>apr_hash_t</name> **</type><name>props</name></decl></param>,
                                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>VTBL</name>.<name>get_dir</name></name><argument_list>(<argument><expr><name>session_baton</name></expr></argument>, <argument><expr><name>dirents</name></expr></argument>, <argument><expr><name>fetched_rev</name></expr></argument>, <argument><expr><name>props</name></expr></argument>,
                      <argument><expr><name>path</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>SVN_DIRENT_ALL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/** Reporter compat code. **/</comment>

<struct>struct <name>compat_report_baton</name> <block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_ra_reporter3_t</name> *</type><name>reporter</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>baton</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>compat_set_path</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>report_baton</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                    <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                                    <param><decl><type><name>svn_boolean_t</name></type> <name>start_empty</name></decl></param>,
                                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>compat_report_baton</name> *</type><name>crb</name> <init>= <expr><name>report_baton</name></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name><name>crb</name>-&gt;<name>reporter</name>-&gt;<name>set_path</name></name><argument_list>(<argument><expr><name><name>crb</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>,
                                 <argument><expr><name>svn_depth_infinity</name></expr></argument>, <argument><expr><name>start_empty</name></expr></argument>,
                                 <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>compat_delete_path</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>report_baton</name></decl></param>,
                                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                       <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>compat_report_baton</name> *</type><name>crb</name> <init>= <expr><name>report_baton</name></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name><name>crb</name>-&gt;<name>reporter</name>-&gt;<name>delete_path</name></name><argument_list>(<argument><expr><name><name>crb</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>compat_link_path</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>report_baton</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
                                     <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                                     <param><decl><type><name>svn_boolean_t</name></type> <name>start_empty</name></decl></param>,
                                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>compat_report_baton</name> *</type><name>crb</name> <init>= <expr><name>report_baton</name></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name><name>crb</name>-&gt;<name>reporter</name>-&gt;<name>link_path</name></name><argument_list>(<argument><expr><name><name>crb</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>,
                                  <argument><expr><name>svn_depth_infinity</name></expr></argument>, <argument><expr><name>start_empty</name></expr></argument>,
                                  <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>compat_finish_report</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>report_baton</name></decl></param>,
                                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>compat_report_baton</name> *</type><name>crb</name> <init>= <expr><name>report_baton</name></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name><name>crb</name>-&gt;<name>reporter</name>-&gt;<name>finish_report</name></name><argument_list>(<argument><expr><name><name>crb</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>compat_abort_report</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>report_baton</name></decl></param>,
                                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>compat_report_baton</name> *</type><name>crb</name> <init>= <expr><name>report_baton</name></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name><name>crb</name>-&gt;<name>reporter</name>-&gt;<name>abort_report</name></name><argument_list>(<argument><expr><name><name>crb</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_ra_reporter_t</name></type> <name>compat_reporter</name> <init>= <expr><block>{
  <expr><name>compat_set_path</name></expr>,
  <expr><name>compat_delete_path</name></expr>,
  <expr><name>compat_link_path</name></expr>,
  <expr><name>compat_finish_report</name></expr>,
  <expr><name>compat_abort_report</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>compat_wrap_reporter</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_ra_reporter_t</name> **</type><name>reporter</name></decl></param>,
                                 <param><decl><type><name>void</name> **</type><name>baton</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>svn_ra_reporter3_t</name> *</type><name>wrapped</name></decl></param>,
                                 <param><decl><type><name>void</name> *</type><name>wrapped_baton</name></decl></param>,
                                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>compat_report_baton</name> *</type><name>crb</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>crb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>crb</name>-&gt;<name>reporter</name></name> = <name>wrapped</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>crb</name>-&gt;<name>baton</name></name> = <name>wrapped_baton</name></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>reporter</name> = &amp;<name>compat_reporter</name></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>baton</name> = <name>crb</name></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>compat_do_update</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>session_baton</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>svn_ra_reporter_t</name> **</type><name>reporter</name></decl></param>,
                                     <param><decl><type><name>void</name> **</type><name>report_baton</name></decl></param>,
                                     <param><decl><type><name>svn_revnum_t</name></type> <name>revision_to_update_to</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>update_target</name></decl></param>,
                                     <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>editor</name></decl></param>,
                                     <param><decl><type><name>void</name> *</type><name>update_baton</name></decl></param>,
                                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_ra_reporter3_t</name> *</type><name>reporter3</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>baton3</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_depth_t</name></type> <name>depth</name> <init>= <expr><call><name>SVN_DEPTH_INFINITY_OR_FILES</name><argument_list>(<argument><expr><name>recurse</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>VTBL</name>.<name>do_update</name></name><argument_list>(<argument><expr><name>session_baton</name></expr></argument>, <argument><expr>&amp;<name>reporter3</name></expr></argument>, <argument><expr>&amp;<name>baton3</name></expr></argument>,
                         <argument><expr><name>revision_to_update_to</name></expr></argument>, <argument><expr><name>update_target</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>,
                         <argument><expr><name>FALSE</name></expr></argument>, <comment type="block">/* no copyfrom args */</comment>
                         <argument><expr><name>editor</name></expr></argument>, <argument><expr><name>update_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>compat_wrap_reporter</name><argument_list>(<argument><expr><name>reporter</name></expr></argument>, <argument><expr><name>report_baton</name></expr></argument>, <argument><expr><name>reporter3</name></expr></argument>, <argument><expr><name>baton3</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>compat_do_switch</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>session_baton</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>svn_ra_reporter_t</name> **</type><name>reporter</name></decl></param>,
                                     <param><decl><type><name>void</name> **</type><name>report_baton</name></decl></param>,
                                     <param><decl><type><name>svn_revnum_t</name></type> <name>revision_to_switch_to</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>switch_target</name></decl></param>,
                                     <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>switch_url</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>editor</name></decl></param>,
                                     <param><decl><type><name>void</name> *</type><name>switch_baton</name></decl></param>,
                                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_ra_reporter3_t</name> *</type><name>reporter3</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>baton3</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_depth_t</name></type> <name>depth</name> <init>= <expr><call><name>SVN_DEPTH_INFINITY_OR_FILES</name><argument_list>(<argument><expr><name>recurse</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>VTBL</name>.<name>do_switch</name></name><argument_list>(<argument><expr><name>session_baton</name></expr></argument>, <argument><expr>&amp;<name>reporter3</name></expr></argument>, <argument><expr>&amp;<name>baton3</name></expr></argument>,
                         <argument><expr><name>revision_to_switch_to</name></expr></argument>, <argument><expr><name>switch_target</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>,
                         <argument><expr><name>switch_url</name></expr></argument>, <argument><expr><name>editor</name></expr></argument>, <argument><expr><name>switch_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>compat_wrap_reporter</name><argument_list>(<argument><expr><name>reporter</name></expr></argument>, <argument><expr><name>report_baton</name></expr></argument>, <argument><expr><name>reporter3</name></expr></argument>, <argument><expr><name>baton3</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>compat_do_status</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>session_baton</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>svn_ra_reporter_t</name> **</type><name>reporter</name></decl></param>,
                                     <param><decl><type><name>void</name> **</type><name>report_baton</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>status_target</name></decl></param>,
                                     <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                                     <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>editor</name></decl></param>,
                                     <param><decl><type><name>void</name> *</type><name>status_baton</name></decl></param>,
                                     <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_ra_reporter3_t</name> *</type><name>reporter3</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>baton3</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_depth_t</name></type> <name>depth</name> <init>= <expr><call><name>SVN_DEPTH_INFINITY_OR_IMMEDIATES</name><argument_list>(<argument><expr><name>recurse</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>VTBL</name>.<name>do_status</name></name><argument_list>(<argument><expr><name>session_baton</name></expr></argument>, <argument><expr>&amp;<name>reporter3</name></expr></argument>, <argument><expr>&amp;<name>baton3</name></expr></argument>, <argument><expr><name>status_target</name></expr></argument>,
                         <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>editor</name></expr></argument>, <argument><expr><name>status_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>compat_wrap_reporter</name><argument_list>(<argument><expr><name>reporter</name></expr></argument>, <argument><expr><name>report_baton</name></expr></argument>, <argument><expr><name>reporter3</name></expr></argument>, <argument><expr><name>baton3</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>compat_do_diff</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>session_baton</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>svn_ra_reporter_t</name> **</type><name>reporter</name></decl></param>,
                                   <param><decl><type><name>void</name> **</type><name>report_baton</name></decl></param>,
                                   <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>diff_target</name></decl></param>,
                                   <param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
                                   <param><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>versus_url</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>diff_editor</name></decl></param>,
                                   <param><decl><type><name>void</name> *</type><name>diff_baton</name></decl></param>,
                                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_ra_reporter3_t</name> *</type><name>reporter3</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>baton3</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_depth_t</name></type> <name>depth</name> <init>= <expr><call><name>SVN_DEPTH_INFINITY_OR_FILES</name><argument_list>(<argument><expr><name>recurse</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>VTBL</name>.<name>do_diff</name></name><argument_list>(<argument><expr><name>session_baton</name></expr></argument>, <argument><expr>&amp;<name>reporter3</name></expr></argument>, <argument><expr>&amp;<name>baton3</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>,
                       <argument><expr><name>diff_target</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>ignore_ancestry</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
                       <argument><expr><name>versus_url</name></expr></argument>, <argument><expr><name>diff_editor</name></expr></argument>, <argument><expr><name>diff_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>compat_wrap_reporter</name><argument_list>(<argument><expr><name>reporter</name></expr></argument>, <argument><expr><name>report_baton</name></expr></argument>, <argument><expr><name>reporter3</name></expr></argument>, <argument><expr><name>baton3</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>compat_get_log</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>session_baton</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>paths</name></decl></param>,
                                   <param><decl><type><name>svn_revnum_t</name></type> <name>start</name></decl></param>,
                                   <param><decl><type><name>svn_revnum_t</name></type> <name>end</name></decl></param>,
                                   <param><decl><type><name>svn_boolean_t</name></type> <name>discover_changed_paths</name></decl></param>,
                                   <param><decl><type><name>svn_boolean_t</name></type> <name>strict_node_history</name></decl></param>,
                                   <param><decl><type><name>svn_log_message_receiver_t</name></type> <name>receiver</name></decl></param>,
                                   <param><decl><type><name>void</name> *</type><name>receiver_baton</name></decl></param>,
                                   <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_log_entry_receiver_t</name></type> <name>receiver2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>receiver2_baton</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>svn_compat_wrap_log_receiver</name><argument_list>(<argument><expr>&amp;<name>receiver2</name></expr></argument>, <argument><expr>&amp;<name>receiver2_baton</name></expr></argument>,
                               <argument><expr><name>receiver</name></expr></argument>, <argument><expr><name>receiver_baton</name></expr></argument>,
                               <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name><name>VTBL</name>.<name>get_log</name></name><argument_list>(<argument><expr><name>session_baton</name></expr></argument>, <argument><expr><name>paths</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr>0</expr></argument>, <comment type="block">/* limit */</comment>
                      <argument><expr><name>discover_changed_paths</name></expr></argument>, <argument><expr><name>strict_node_history</name></expr></argument>,
                      <argument><expr><name>FALSE</name></expr></argument>, <comment type="block">/* include_merged_revisions */</comment>
                      <argument><expr><call><name>svn_compat_log_revprops_in</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <comment type="block">/* revprops */</comment>
                      <argument><expr><name>receiver2</name></expr></argument>, <argument><expr><name>receiver2_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>compat_check_path</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>session_baton</name></decl></param>,
                                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                      <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                                      <param><decl><type><name>svn_node_kind_t</name> *</type><name>kind</name></decl></param>,
                                      <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>VTBL</name>.<name>check_path</name></name><argument_list>(<argument><expr><name>session_baton</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>kind</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>compat_get_uuid</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>session_baton</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>uuid</name></decl></param>,
                                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>VTBL</name>.<name>get_uuid</name></name><argument_list>(<argument><expr><name>session_baton</name></expr></argument>, <argument><expr><name>uuid</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>compat_get_repos_root</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>session_baton</name></decl></param>,
                                          <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>url</name></decl></param>,
                                          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>VTBL</name>.<name>get_repos_root</name></name><argument_list>(<argument><expr><name>session_baton</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>compat_get_locations</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>session_baton</name></decl></param>,
                                         <param><decl><type><name>apr_hash_t</name> **</type><name>locations</name></decl></param>,
                                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                         <param><decl><type><name>svn_revnum_t</name></type> <name>peg_revision</name></decl></param>,
                                         <param><decl><type><name>apr_array_header_t</name> *</type><name>location_revs</name></decl></param>,
                                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>VTBL</name>.<name>get_locations</name></name><argument_list>(<argument><expr><name>session_baton</name></expr></argument>, <argument><expr><name>locations</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>peg_revision</name></expr></argument>,
                            <argument><expr><name>location_revs</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>compat_get_file_revs</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>session_baton</name></decl></param>,
                                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                         <param><decl><type><name>svn_revnum_t</name></type> <name>start</name></decl></param>,
                                         <param><decl><type><name>svn_revnum_t</name></type> <name>end</name></decl></param>,
                                         <param><decl><type><name>svn_ra_file_rev_handler_t</name></type> <name>handler</name></decl></param>,
                                         <param><decl><type><name>void</name> *</type><name>handler_baton</name></decl></param>,
                                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_file_rev_handler_t</name></type> <name>handler2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>handler2_baton</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>svn_compat_wrap_file_rev_handler</name><argument_list>(<argument><expr>&amp;<name>handler2</name></expr></argument>, <argument><expr>&amp;<name>handler2_baton</name></expr></argument>,
                                   <argument><expr><name>handler</name></expr></argument>, <argument><expr><name>handler_baton</name></expr></argument>,
                                   <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name><name>VTBL</name>.<name>get_file_revs</name></name><argument_list>(<argument><expr><name>session_baton</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>,
                            <argument><expr><name>FALSE</name></expr></argument>, <comment type="block">/* include merged revisions */</comment>
                            <argument><expr><name>handler2</name></expr></argument>, <argument><expr><name>handler2_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_version_t</name> *</type><name>compat_get_version</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name><name>VTBL</name>.<name>get_version</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_ra_plugin_t</name></type> <name>compat_plugin</name> <init>= <expr><block>{
  <expr><name>NAME</name></expr>,
  <expr><name>DESCRIPTION</name></expr>,
  <expr><name>compat_open</name></expr>,
  <expr><name>compat_get_latest_revnum</name></expr>,
  <expr><name>compat_get_dated_revision</name></expr>,
  <expr><name>compat_change_rev_prop</name></expr>,
  <expr><name>compat_rev_proplist</name></expr>,
  <expr><name>compat_rev_prop</name></expr>,
  <expr><name>compat_get_commit_editor</name></expr>,
  <expr><name>compat_get_file</name></expr>,
  <expr><name>compat_get_dir</name></expr>,
  <expr><name>compat_do_update</name></expr>,
  <expr><name>compat_do_switch</name></expr>,
  <expr><name>compat_do_status</name></expr>,
  <expr><name>compat_do_diff</name></expr>,
  <expr><name>compat_get_log</name></expr>,
  <expr><name>compat_check_path</name></expr>,
  <expr><name>compat_get_uuid</name></expr>,
  <expr><name>compat_get_repos_root</name></expr>,
  <expr><name>compat_get_locations</name></expr>,
  <expr><name>compat_get_file_revs</name></expr>,
  <expr><name>compat_get_version</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>svn_error_t</name> *</type>
<name>COMPAT_INITFUNC</name><parameter_list>(<param><decl><type><name>int</name></type> <name>abi_version</name></decl></param>,
                <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                <param><decl><type><name>apr_hash_t</name> *</type><name>hash</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>svn_ra__vtable_t</name> *</type><name>vtable</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> * <specifier>const</specifier> *</type> <name>schemes</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name>abi_version</name> &lt; 1
      || <name>abi_version</name> &gt; <name>SVN_RA_ABI_VERSION</name></expr>)</condition><then>
    <return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_UNSUPPORTED_ABI_VERSION</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Unsupported RA plugin ABI version (%d) "
                               "for %s"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>abi_version</name></expr></argument>, <argument><expr><name>NAME</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <comment type="block">/* We call the new init function so it can check library dependencies or
     do other initialization things.  We fake the loader version, since we
     rely on the ABI version check instead. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>INITFUNC</name><argument_list>(<argument><expr><call><name><name>VTBL</name>.<name>get_version</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>&amp;<name>vtable</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>schemes</name> = <call><name><name>VTBL</name>.<name>get_schemes</name></name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for (<init>;</init> <condition><expr>*<name>schemes</name> != <name>NULL</name></expr>;</condition> <incr><expr>++<name>schemes</name></expr></incr>)
    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr>*<name>schemes</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr>&amp;<name>compat_plugin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
