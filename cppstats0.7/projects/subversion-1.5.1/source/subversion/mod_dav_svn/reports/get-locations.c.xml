<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/mod_dav_svn/reports/get-locations.c"><comment type="block">/*
 * version.c: mod_dav_svn versioning provider functions for Subversion
 *
 * ====================================================================
 * Copyright (c) 2000-2006 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_tables.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_uuid.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;httpd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_log.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mod_dav.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_xml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_repos.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_dav.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_props.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_dav.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_base64.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../dav_svn.h"</cpp:file></cpp:include>


<function><type><specifier>static</specifier> <name>apr_status_t</name></type>
<name>send_get_locations_report</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>output</name></decl></param>,
                          <param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
                          <param><decl><type><name>apr_hash_t</name> *</type><name>fs_locations</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_status_t</name></type> <name>apr_err</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>pool</name> = <name><name>resource</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name>apr_err</name> = <macro><name>ap_fprintf</name><argument_list>(<argument>output</argument>, <argument>bb</argument>, <argument>DAV_XML_HEADER DEBUG_CR
                       "&lt;S:get-locations-report xmlns:S=\"" SVN_XML_NAMESPACE
                       "\" xmlns:D=\"DAV:\"&gt;" DEBUG_CR</argument>)</argument_list></macro></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>apr_err</name></expr>)</condition><then>
    <return>return <expr><name>apr_err</name></expr>;</return></then></if>

  <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>fs_locations</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name> *</type><name>value</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path_quoted</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>path_quoted</name> = <call><name>apr_xml_quote_string</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>apr_err</name> = <call><name>ap_fprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr>"&lt;S:location "
                           "rev=\"%ld\" path=\"%s\"/&gt;" <name>DEBUG_CR</name></expr></argument>,
                           <argument><expr>*(const <name>svn_revnum_t</name> *)<name>key</name></expr></argument>, <argument><expr><name>path_quoted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>apr_err</name></expr>)</condition><then>
        <return>return <expr><name>apr_err</name></expr>;</return></then></if>
    }</block></for>
  <return>return <expr><call><name>ap_fprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr>"&lt;/S:get-locations-report&gt;" <name>DEBUG_CR</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name>dav_error</name> *</type>
<name>dav_svn__get_locations_report</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
                              <param><decl><type><specifier>const</specifier> <name>apr_xml_doc</name> *</type><name>doc</name></decl></param>,
                              <param><decl><type><name>ap_filter_t</name> *</type><name>output</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>serr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>dav_error</name> *</type><name>derr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_status_t</name></type> <name>apr_err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>dav_svn__authz_read_baton</name></type> <name>arb</name></decl>;</decl_stmt>

  <comment type="block">/* The parameters to do the operation on. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>relative_path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>abs_path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>peg_revision</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>location_revisions</name></decl>;</decl_stmt>

  <comment type="block">/* XML Parsing Variables */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>ns</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_xml_elem</name> *</type><name>child</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>fs_locations</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>location_revisions</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>0</expr></argument>,
                                      <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_revnum_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Sanity check. */</comment>
  <expr_stmt><expr><name>ns</name> = <call><name>dav_svn__find_ns</name><argument_list>(<argument><expr><name><name>doc</name>-&gt;<name>namespaces</name></name></expr></argument>, <argument><expr><name>SVN_XML_NAMESPACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>ns</name> == -1</expr>)</condition><then>
    <block>{
      <return>return <expr><call><name>dav_svn__new_error_tag</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_BAD_REQUEST</name></expr></argument>, <argument><expr>0</expr></argument>,
                                    <argument><expr>"The request does not contain the 'svn:' "
                                    "namespace, so it is not going to have "
                                    "certain required elements."</expr></argument>,
                                    <argument><expr><name>SVN_DAV_ERROR_NAMESPACE</name></expr></argument>,
                                    <argument><expr><name>SVN_DAV_ERROR_TAG</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

  <comment type="block">/* Gather the parameters. */</comment>
  <for>for (<init><expr><name>child</name> = <name><name>doc</name>-&gt;<name>root</name>-&gt;<name>first_child</name></name></expr>;</init> <condition><expr><name>child</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>child</name> = <name><name>child</name>-&gt;<name>next</name></name></expr></incr>)
    <block>{
      <comment type="block">/* If this element isn't one of ours, then skip it. */</comment>
      <if>if <condition>(<expr><name><name>child</name>-&gt;<name>ns</name></name> != <name>ns</name></expr>)</condition><then>
        <continue>continue;</continue></then></if>

      <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"peg-revision"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <expr_stmt><expr><name>peg_revision</name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><call><name>dav_xml_get_cdata</name><argument_list>(<argument><expr><name>child</name></expr></argument>,
                                                        <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
      <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"location-revision"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>revision</name>
            <init>= <expr><call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><call><name>dav_xml_get_cdata</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>location_revisions</name></expr></argument>, <argument><expr><name>svn_revnum_t</name></expr></argument>)</argument_list></call> = <name>revision</name></expr>;</expr_stmt>
        }</block></then>
      <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"path"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>relative_path</name> = <call><name>dav_xml_get_cdata</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr>(<name>derr</name> = <call><name>dav_svn__test_canonical</name><argument_list>(<argument><expr><name>relative_path</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
            <return>return <expr><name>derr</name></expr>;</return></then></if>
        }</block></then></if></else></if></else></if>
    }</block></for>

  <comment type="block">/* Now we should have the parameters ready - let's
     check if they are all present. */</comment>
  <if>if <condition>(<expr>! (<name>relative_path</name> &amp;&amp; <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>peg_revision</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
    <block>{
      <return>return <expr><call><name>dav_svn__new_error_tag</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_BAD_REQUEST</name></expr></argument>, <argument><expr>0</expr></argument>,
                                    <argument><expr>"Not all parameters passed."</expr></argument>,
                                    <argument><expr><name>SVN_DAV_ERROR_NAMESPACE</name></expr></argument>,
                                    <argument><expr><name>SVN_DAV_ERROR_TAG</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

  <comment type="block">/* Append the relative path to the base FS path to get an absolute
     repository path. */</comment>
  <expr_stmt><expr><name>abs_path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>repos_path</name></name></expr></argument>, <argument><expr><name>relative_path</name></expr></argument>,
                           <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Build an authz read baton */</comment>
  <expr_stmt><expr><name><name>arb</name>.<name>r</name></name> = <name><name>resource</name>-&gt;<name>info</name>-&gt;<name>r</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>arb</name>.<name>repos</name></name> = <name><name>resource</name>-&gt;<name>info</name>-&gt;<name>repos</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name>serr</name> = <call><name>svn_repos_trace_node_locations</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>repos</name>-&gt;<name>fs</name></name></expr></argument>,
                                        <argument><expr>&amp;<name>fs_locations</name></expr></argument>, <argument><expr><name>abs_path</name></expr></argument>, <argument><expr><name>peg_revision</name></expr></argument>,
                                        <argument><expr><name>location_revisions</name></expr></argument>,
                                        <argument><expr><call><name>dav_svn__authz_read_func</name><argument_list>(<argument><expr>&amp;<name>arb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>arb</name></expr></argument>,
                                        <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>serr</name></expr>)</condition><then>
    <block>{
      <return>return <expr><call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><name>serr</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
                                  <argument><expr><name><name>serr</name>-&gt;<name>message</name></name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

  <expr_stmt><expr><name>bb</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>output</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>apr_err</name> = <call><name>send_get_locations_report</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>, <argument><expr><name>fs_locations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>apr_err</name></expr>)</condition><then>
    <expr_stmt><expr><name>derr</name> = <call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
                                <argument><expr>"Error writing REPORT response."</expr></argument>,
                                <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <comment type="block">/* Flush the contents of the brigade (returning an error only if we
     don't already have one). */</comment>
  <if>if <condition>(<expr>((<name>apr_err</name> = <call><name>ap_fflush</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call>)) &amp;&amp; (! <name>derr</name>)</expr>)</condition><then>
    <return>return <expr><call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
                                <argument><expr>"Error flushing brigade."</expr></argument>,
                                <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <return>return <expr><name>derr</name></expr>;</return>
}</block></function>
</unit>
