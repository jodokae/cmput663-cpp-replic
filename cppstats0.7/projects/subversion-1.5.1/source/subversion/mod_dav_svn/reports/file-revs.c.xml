<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/mod_dav_svn/reports/file-revs.c"><comment type="block">/*
 * file_revs.c: handle the file-revs-report request and response
 *
 * ====================================================================
 * Copyright (c) 2000-2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_want.h&gt;</cpp:file></cpp:include> <comment type="block">/* for strcmp() */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_xml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_base64.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_props.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_dav.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../dav_svn.h"</cpp:file></cpp:include>

<struct>struct <name>file_rev_baton</name> <block>{
  <comment type="block">/* this buffers the output for a bit and is automatically flushed,
     at appropriate times, by the Apache filter system. */</comment>
  <decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>

  <comment type="block">/* where to deliver the output */</comment>
  <decl_stmt><decl><type><name>ap_filter_t</name> *</type><name>output</name></decl>;</decl_stmt>

  <comment type="block">/* Whether we've written the &lt;S:file-revs-report&gt; header.  Allows for lazy
     writes to support mod_dav-based error handling. */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>needs_header</name></decl>;</decl_stmt>

  <comment type="block">/* SVNDIFF version to use when sending to client.  */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>svndiff_version</name></decl>;</decl_stmt>

  <comment type="block">/* Used by the delta iwndow handler. */</comment>
  <decl_stmt><decl><type><name>svn_txdelta_window_handler_t</name></type> <name>window_handler</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>window_baton</name></decl>;</decl_stmt>
}</block>;</struct>


<comment type="block">/* If FRB-&gt;needs_header is true, send the "&lt;S:file-revs-report&gt;" start
   tag and set FRB-&gt;needs_header to zero.  Else do nothing.
   This is basically duplicated in log.c.  Consider factoring if
   duplicating again. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>maybe_send_header</name><parameter_list>(<param><decl><type>struct <name>file_rev_baton</name> *</type><name>frb</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name><name>frb</name>-&gt;<name>needs_header</name></name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><macro><name>dav_svn__send_xml</name><argument_list>(<argument>frb-&gt;bb</argument>, <argument>frb-&gt;output</argument>,
                                <argument>DAV_XML_HEADER DEBUG_CR
                                "&lt;S:file-revs-report xmlns:S=\""
                                SVN_XML_NAMESPACE "\" "
                                "xmlns:D=\"DAV:\"&gt;" DEBUG_CR</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>frb</name>-&gt;<name>needs_header</name></name> = <name>FALSE</name></expr>;</expr_stmt>
    }</block></then></if>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Send a property named NAME with value VAL in an element named ELEM_NAME.
   Quote NAME and base64-encode VAL if necessary. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>send_prop</name><parameter_list>(<param><decl><type>struct <name>file_rev_baton</name> *</type><name>frb</name></decl></param>,
          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>elem_name</name></decl></param>,
          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
          <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>val</name></decl></param>,
          <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name>name</name> = <call><name>apr_xml_quote_string</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><call><name>svn_xml_is_xml_safe</name><argument_list>(<argument><expr><name><name>val</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>val</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>svn_xml_escape_cdata_string</name><argument_list>(<argument><expr>&amp;<name>tmp</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>val</name> = <call><name>svn_string_create</name><argument_list>(<argument><expr><name><name>tmp</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>frb</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>frb</name>-&gt;<name>output</name></name></expr></argument>,
                                <argument><expr>"&lt;S:%s name=\"%s\"&gt;%s&lt;/S:%s&gt;" <name>DEBUG_CR</name></expr></argument>,
                                <argument><expr><name>elem_name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>val</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>elem_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <expr_stmt><expr><name>val</name> = <call><name>svn_base64_encode_string</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>frb</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>frb</name>-&gt;<name>output</name></name></expr></argument>,
                                <argument><expr>"&lt;S:%s name=\"%s\" encoding=\"base64\"&gt;"
                                "%s&lt;/S:%s&gt;" <name>DEBUG_CR</name></expr></argument>,
                                <argument><expr><name>elem_name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>val</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>elem_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* This implements the svn_txdelta_window_handler interface.
   Forward to a more interesting window handler and if we're done, terminate
   the txdelta and file-rev elements. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>delta_window_handler</name><parameter_list>(<param><decl><type><name>svn_txdelta_window_t</name> *</type><name>window</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>file_rev_baton</name> *</type><name>frb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>frb</name>-&gt;<name>window_handler</name></name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name><name>frb</name>-&gt;<name>window_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Terminate elements if we're done. */</comment>
  <if>if <condition>(<expr>!<name>window</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name><name>frb</name>-&gt;<name>window_handler</name></name> = <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>frb</name>-&gt;<name>window_baton</name></name> = <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>frb</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>frb</name>-&gt;<name>output</name></name></expr></argument>,
                                <argument><expr>"&lt;/S:txdelta&gt;&lt;/S:file-rev&gt;" <name>DEBUG_CR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* This implements the svn_repos_file_rev_handler2_t interface. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>file_rev_handler</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                 <param><decl><type><name>svn_revnum_t</name></type> <name>revnum</name></decl></param>,
                 <param><decl><type><name>apr_hash_t</name> *</type><name>rev_props</name></decl></param>,
                 <param><decl><type><name>svn_boolean_t</name></type> <name>merged_revision</name></decl></param>,
                 <param><decl><type><name>svn_txdelta_window_handler_t</name> *</type><name>window_handler</name></decl></param>,
                 <param><decl><type><name>void</name> **</type><name>window_baton</name></decl></param>,
                 <param><decl><type><name>apr_array_header_t</name> *</type><name>props</name></decl></param>,
                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>file_rev_baton</name> *</type><name>frb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>maybe_send_header</name><argument_list>(<argument><expr><name>frb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>frb</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>frb</name>-&gt;<name>output</name></name></expr></argument>,
                            <argument><expr>"&lt;S:file-rev path=\"%s\" rev=\"%ld\"&gt;" <name>DEBUG_CR</name></expr></argument>,
                            <argument><expr><call><name>apr_xml_quote_string</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>revnum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Send rev props. */</comment>
  <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>rev_props</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pname</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>pval</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pname</name> = <name>key</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>pval</name> = <name>val</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>send_prop</name><argument_list>(<argument><expr><name>frb</name></expr></argument>, <argument><expr>"rev-prop"</expr></argument>, <argument><expr><name>pname</name></expr></argument>, <argument><expr><name>pval</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

  <comment type="block">/* Send file prop changes. */</comment>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>props</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>svn_prop_t</name> *</type><name>prop</name> <init>= <expr>&amp;<call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_prop_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name><name>prop</name>-&gt;<name>value</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>send_prop</name><argument_list>(<argument><expr><name>frb</name></expr></argument>, <argument><expr>"set-prop"</expr></argument>, <argument><expr><name><name>prop</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>prop</name>-&gt;<name>value</name></name></expr></argument>,
                          <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
      <else>else
        <block>{
          <comment type="block">/* Property was removed. */</comment>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>frb</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>frb</name>-&gt;<name>output</name></name></expr></argument>,
                                    <argument><expr>"&lt;S:remove-prop name=\"%s\"/&gt;" <name>DEBUG_CR</name></expr></argument>,
                                    <argument><expr><call><name>apr_xml_quote_string</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><name><name>prop</name>-&gt;<name>name</name></name></expr></argument>,
                                                         <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></for>

  <comment type="block">/* Send whether this was the result of a merge or not. */</comment>
  <if>if <condition>(<expr><name>merged_revision</name></expr>)</condition><then>
    <block>{
     <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>frb</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>frb</name>-&gt;<name>output</name></name></expr></argument>,
                                <argument><expr>"&lt;S:merged-revision/&gt;"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>


  <comment type="block">/* Maybe send text delta. */</comment>
  <if>if <condition>(<expr><name>window_handler</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>base64_stream</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>base64_stream</name> = <call><name>dav_svn__make_base64_output_stream</name><argument_list>(<argument><expr><name><name>frb</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>frb</name>-&gt;<name>output</name></name></expr></argument>,
                                                         <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>svn_txdelta_to_svndiff2</name><argument_list>(<argument><expr>&amp;<name><name>frb</name>-&gt;<name>window_handler</name></name></expr></argument>, <argument><expr>&amp;<name><name>frb</name>-&gt;<name>window_baton</name></name></expr></argument>,
                              <argument><expr><name>base64_stream</name></expr></argument>, <argument><expr><name><name>frb</name>-&gt;<name>svndiff_version</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr>*<name>window_handler</name> = <name>delta_window_handler</name></expr>;</expr_stmt>
      <expr_stmt><expr>*<name>window_baton</name> = <name>frb</name></expr>;</expr_stmt>
      <comment type="block">/* Start the txdelta element wich will be terminated by the window
         handler together with the file-rev element. */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>frb</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>frb</name>-&gt;<name>output</name></name></expr></argument>, <argument><expr>"&lt;S:txdelta&gt;"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <comment type="block">/* No txdelta, so terminate the element here. */</comment>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>frb</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>frb</name>-&gt;<name>output</name></name></expr></argument>, <argument><expr>"&lt;/S:file-rev&gt;" <name>DEBUG_CR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Respond to a client request for a REPORT of type file-revs-report for the
   RESOURCE.  Get request body from DOC and send result to OUTPUT. */</comment>
<function><type><name>dav_error</name> *</type>
<name>dav_svn__file_revs_report</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>apr_xml_doc</name> *</type><name>doc</name></decl></param>,
                          <param><decl><type><name>ap_filter_t</name> *</type><name>output</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>serr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>dav_error</name> *</type><name>derr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_status_t</name></type> <name>apr_err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_xml_elem</name> *</type><name>child</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ns</name></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>file_rev_baton</name></type> <name>frb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>dav_svn__authz_read_baton</name></type> <name>arb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* These get determined from the request document. */</comment>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>start</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>end</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>include_merged_revisions</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>    <comment type="block">/* off by default */</comment>

  <comment type="block">/* Construct the authz read check baton. */</comment>
  <expr_stmt><expr><name><name>arb</name>.<name>r</name></name> = <name><name>resource</name>-&gt;<name>info</name>-&gt;<name>r</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>arb</name>.<name>repos</name></name> = <name><name>resource</name>-&gt;<name>info</name>-&gt;<name>repos</name></name></expr>;</expr_stmt>

  <comment type="block">/* Sanity check. */</comment>
  <expr_stmt><expr><name>ns</name> = <call><name>dav_svn__find_ns</name><argument_list>(<argument><expr><name><name>doc</name>-&gt;<name>namespaces</name></name></expr></argument>, <argument><expr><name>SVN_XML_NAMESPACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* ### This is done on other places, but the document element is
     in this namespace, so is this necessary at all? */</comment>
  <if>if <condition>(<expr><name>ns</name> == -1</expr>)</condition><then>
    <block>{
      <return>return <expr><call><name>dav_svn__new_error_tag</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_BAD_REQUEST</name></expr></argument>, <argument><expr>0</expr></argument>,
                                    <argument><expr>"The request does not contain the 'svn:' "
                                    "namespace, so it is not going to have "
                                    "certain required elements."</expr></argument>,
                                    <argument><expr><name>SVN_DAV_ERROR_NAMESPACE</name></expr></argument>,
                                    <argument><expr><name>SVN_DAV_ERROR_TAG</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

  <comment type="block">/* Get request information. */</comment>
  <for>for (<init><expr><name>child</name> = <name><name>doc</name>-&gt;<name>root</name>-&gt;<name>first_child</name></name></expr>;</init> <condition><expr><name>child</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>child</name> = <name><name>child</name>-&gt;<name>next</name></name></expr></incr>)
    <block>{
      <comment type="block">/* if this element isn't one of ours, then skip it */</comment>
      <if>if <condition>(<expr><name><name>child</name>-&gt;<name>ns</name></name> != <name>ns</name></expr>)</condition><then>
        <continue>continue;</continue></then></if>

      <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"start-revision"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <expr_stmt><expr><name>start</name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><call><name>dav_xml_get_cdata</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
      <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"end-revision"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <expr_stmt><expr><name>end</name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><call><name>dav_xml_get_cdata</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
      <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"include-merged-revisions"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <expr_stmt><expr><name>include_merged_revisions</name> = <name>TRUE</name></expr>;</expr_stmt></then> <comment type="block">/* presence indicates positivity */</comment>
      <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"path"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rel_path</name> <init>= <expr><call><name>dav_xml_get_cdata</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if>if <condition>(<expr>(<name>derr</name> = <call><name>dav_svn__test_canonical</name><argument_list>(<argument><expr><name>rel_path</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
            <return>return <expr><name>derr</name></expr>;</return></then></if>
          <expr_stmt><expr><name>path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>repos_path</name></name></expr></argument>, <argument><expr><name>rel_path</name></expr></argument>,
                               <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if></else></if></else></if>
      <comment type="block">/* else unknown element; skip it */</comment>
    }</block></for>

  <expr_stmt><expr><name><name>frb</name>.<name>bb</name></name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>,
                              <argument><expr><name><name>output</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>frb</name>.<name>output</name></name> = <name>output</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>frb</name>.<name>needs_header</name></name> = <name>TRUE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>frb</name>.<name>svndiff_version</name></name> = <name><name>resource</name>-&gt;<name>info</name>-&gt;<name>svndiff_version</name></name></expr>;</expr_stmt>

  <comment type="block">/* file_rev_handler will send header first time it is called. */</comment>

  <comment type="block">/* Get the revisions and send them. */</comment>
  <expr_stmt><expr><name>serr</name> = <call><name>svn_repos_get_file_revs2</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>repos</name>-&gt;<name>repos</name></name></expr></argument>,
                                  <argument><expr><name>path</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>include_merged_revisions</name></expr></argument>,
                                  <argument><expr><call><name>dav_svn__authz_read_func</name><argument_list>(<argument><expr>&amp;<name>arb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>arb</name></expr></argument>,
                                  <argument><expr><name>file_rev_handler</name></expr></argument>, <argument><expr>&amp;<name>frb</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>serr</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* We don't 'goto cleanup' because ap_fflush() tells httpd
         to write the HTTP headers out, and that includes whatever
         r-&gt;status is at that particular time.  When we call
         dav_svn__convert_err(), we don't immediately set r-&gt;status
         right then, so r-&gt;status remains 0, hence HTTP status 200
         would be misleadingly returned. */</comment>
      <return>return <expr>(<call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><name>serr</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
                                   <argument><expr><name><name>serr</name>-&gt;<name>message</name></name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>)</expr>;</return>
    }</block></then></if>

  <if>if <condition>(<expr>(<name>serr</name> = <call><name>maybe_send_header</name><argument_list>(<argument><expr>&amp;<name>frb</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>derr</name> = <call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><name>serr</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
                                  <argument><expr>"Error beginning REPORT reponse"</expr></argument>,
                                  <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>cleanup</name>;</goto>
    }</block></then></if>

  <if>if <condition>(<expr>(<name>serr</name> = <call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>frb</name>.<name>bb</name></name></expr></argument>, <argument><expr><name><name>frb</name>.<name>output</name></name></expr></argument>,
                                <argument><expr>"&lt;/S:file-revs-report&gt;" <name>DEBUG_CR</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>derr</name> = <call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><name>serr</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
                                  <argument><expr>"Error ending REPORT reponse"</expr></argument>,
                                  <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>cleanup</name>;</goto>
    }</block></then></if>

 <label><name>cleanup</name>:</label>

  <comment type="block">/* We've detected a 'high level' svn action to log. */</comment>
  <expr_stmt><expr><call><name>dav_svn__operational_log</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>info</name></name></expr></argument>,
                           <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>,
                                        <argument><expr>"get-file-revs %s r%ld:%ld%s"</expr></argument>,
                             <argument><expr><call><name>svn_path_uri_encode</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>,
                             <argument><expr>(<name>include_merged_revisions</name>
                              ? " include-merged-revisions" : "")</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Flush the contents of the brigade (returning an error only if we
     don't already have one). */</comment>
  <if>if <condition>(<expr>((<name>apr_err</name> = <call><name>ap_fflush</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name><name>frb</name>.<name>bb</name></name></expr></argument>)</argument_list></call>)) &amp;&amp; (! <name>derr</name>)</expr>)</condition><then>
    <expr_stmt><expr><name>derr</name> = <call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
                                <argument><expr>"Error flushing brigade"</expr></argument>,
                                <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <return>return <expr><name>derr</name></expr>;</return>
}</block></function>
</unit>
