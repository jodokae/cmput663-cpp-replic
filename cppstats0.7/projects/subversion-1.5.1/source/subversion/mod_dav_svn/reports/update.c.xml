<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/mod_dav_svn/reports/update.c"><comment type="block">/*
 * update.c: handle the update-report request and response
 *
 * ====================================================================
 * Copyright (c) 2000-2007 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_xml.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_md5.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_request.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_log.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mod_dav.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_repos.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_md5.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_base64.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_xml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_dav.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_props.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../dav_svn.h"</cpp:file></cpp:include>


<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl>;</decl_stmt>

  <comment type="block">/* the revision we are updating to. used to generated IDs. */</comment>
  <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>rev_root</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>anchor</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl>;</decl_stmt>

  <comment type="block">/* if doing a regular update, then dst_path == anchor.  if this is a
     'switch' operation, then this field is the fs path that is being
     switched to.  This path needs to telescope in the update-editor
     just like 'anchor' above; it's used for retrieving CR's and
     vsn-url's during the edit. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_path</name></decl>;</decl_stmt>

  <comment type="block">/* this buffers the output for a bit and is automatically flushed,
     at appropriate times, by the Apache filter system. */</comment>
  <decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>

  <comment type="block">/* where to deliver the output */</comment>
  <decl_stmt><decl><type><name>ap_filter_t</name> *</type><name>output</name></decl>;</decl_stmt>

  <comment type="block">/* where do these editor paths *really* point to? */</comment>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>pathmap</name></decl>;</decl_stmt>

  <comment type="block">/* are we doing a resource walk? */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>resource_walk</name></decl>;</decl_stmt>

  <comment type="block">/* True iff we've already sent the open tag for the update. */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>started_update</name></decl>;</decl_stmt>

  <comment type="block">/* True iff client requested all data inline in the report. */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>send_all</name></decl>;</decl_stmt>

  <comment type="block">/* SVNDIFF version to send to client.  */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>svndiff_version</name></decl>;</decl_stmt>
}</block></struct></type> <name>update_ctx_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>item_baton_t</name> <block>{
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>update_ctx_t</name> *</type><name>uc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>item_baton_t</name> *</type><name>parent</name></decl>;</decl_stmt> <comment type="block">/* the parent of this item. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>    <comment type="block">/* the single-component name of this item */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>    <comment type="block">/* a telescoping extension of uc-&gt;anchor */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path2</name></decl>;</decl_stmt>   <comment type="block">/* a telescoping extension of uc-&gt;dst_path */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path3</name></decl>;</decl_stmt>   <comment type="block">/* a telescoping extension of uc-&gt;dst_path
                            without dst_path as prefix. */</comment>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_checksum</name></decl>;</decl_stmt>   <comment type="block">/* base_checksum (from apply_textdelta) */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>text_checksum</name></decl>;</decl_stmt>   <comment type="block">/* text_checksum (from close_file) */</comment>

  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>text_changed</name></decl>;</decl_stmt>        <comment type="block">/* Did the file's contents change? */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>added</name></decl>;</decl_stmt>               <comment type="block">/* File added? (Implies text_changed.) */</comment>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>copyfrom</name></decl>;</decl_stmt>            <comment type="block">/* File copied? */</comment>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>changed_props</name></decl>;</decl_stmt> <comment type="block">/* array of const char * prop names */</comment>
  <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>removed_props</name></decl>;</decl_stmt> <comment type="block">/* array of const char * prop names */</comment>

  <comment type="block">/* "entry props" */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>committed_rev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>committed_date</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>last_author</name></decl>;</decl_stmt>

}</block></struct></type> <name>item_baton_t</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIR_OR_FILE</name><parameter_list>(<param><type><name>is_dir</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((is_dir) ? "directory" : "file")</cpp:value></cpp:define>


<comment type="block">/* add PATH to the pathmap HASH with a repository path of LINKPATH.
   if LINKPATH is NULL, PATH will map to itself. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_to_path_map</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>hash</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>linkpath</name></decl></param>)</parameter_list>
<block>{
  <comment type="block">/* normalize 'root paths' to have a slash */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>norm_path</name> <init>= <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call> ? <name>path</name> : "/"</expr></init></decl>;</decl_stmt>

  <comment type="block">/* if there is an actual linkpath given, it is the repos path, else
     our path maps to itself. */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_path</name> <init>= <expr><name>linkpath</name> ? <name>linkpath</name> : <name>norm_path</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* now, geez, put the path in the map already! */</comment>
  <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>repos_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<comment type="block">/* return the actual repository path referred to by the editor's PATH,
   allocated in POOL, determined by examining the pathmap HASH. */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>get_from_path_map</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>hash</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>my_path</name></decl>;</decl_stmt>

  <comment type="block">/* no hash means no map.  that's easy enough. */</comment>
  <if>if <condition>(<expr>! <name>hash</name></expr>)</condition><then>
    <return>return <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <if>if <condition>(<expr>(<name>repos_path</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
    <block>{
      <comment type="block">/* what luck!  this path is a hash key!  if there is a linkpath,
         use that, else return the path itself. */</comment>
      <return>return <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>repos_path</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

  <comment type="block">/* bummer.  PATH wasn't a key in path map, so we get to start
     hacking off components and looking for a parent from which to
     derive a repos_path.  use a stringbuf for convenience. */</comment>
  <expr_stmt><expr><name>my_path</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <do>do
    <block>{
      <expr_stmt><expr><call><name>svn_path_remove_component</name><argument_list>(<argument><expr><name>my_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr>(<name>repos_path</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name><name>my_path</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>my_path</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
        <block>{
          <comment type="block">/* we found a mapping ... but of one of PATH's parents.
             soooo, we get to re-append the chunks of PATH that we
             broke off to the REPOS_PATH we found. */</comment>
          <return>return <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name>repos_path</name></expr></argument>, <argument><expr><name>path</name> + <name><name>my_path</name>-&gt;<name>len</name></name> + 1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
    }</block>
  while <condition>(<expr>! <call><name>svn_path_is_empty</name><argument_list>(<argument><expr><name><name>my_path</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call>
         &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>my_path</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr>"/"</expr></argument>)</argument_list></call> != 0</expr>)</condition>;</do>

  <comment type="block">/* well, we simply never found anything worth mentioning the map.
     PATH is its own default finding, then. */</comment>
  <return>return <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>item_baton_t</name> *</type>
<name>make_child_baton</name><parameter_list>(<param><decl><type><name>item_baton_t</name> *</type><name>parent</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>item_baton_t</name> *</type><name>baton</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>baton</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>baton</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>baton</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>baton</name>-&gt;<name>uc</name></name> = <name><name>parent</name>-&gt;<name>uc</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>baton</name>-&gt;<name>name</name></name> = <call><name>svn_path_basename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>baton</name>-&gt;<name>parent</name></name> = <name>parent</name></expr>;</expr_stmt>

  <comment type="block">/* Telescope the path based on uc-&gt;anchor.  */</comment>
  <expr_stmt><expr><name><name>baton</name>-&gt;<name>path</name></name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name><name>baton</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Telescope the path based on uc-&gt;dst_path in the exact same way. */</comment>
  <expr_stmt><expr><name><name>baton</name>-&gt;<name>path2</name></name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>path2</name></name></expr></argument>, <argument><expr><name><name>baton</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Telescope the third path:  it's relative, not absolute, to
     dst_path.  Now, we gotta be careful here, because if this
     operation had a target, and we're it, then we have to use the
     basename of our source reflection instead of our own.  */</comment>
  <if>if <condition>(<expr>(*<name><name>baton</name>-&gt;<name>uc</name>-&gt;<name>target</name></name>) &amp;&amp; (! <name><name>parent</name>-&gt;<name>parent</name></name>)</expr>)</condition><then>
    <expr_stmt><expr><name><name>baton</name>-&gt;<name>path3</name></name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>path3</name></name></expr></argument>, <argument><expr><name><name>baton</name>-&gt;<name>uc</name>-&gt;<name>target</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><name><name>baton</name>-&gt;<name>path3</name></name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>path3</name></name></expr></argument>, <argument><expr><name><name>baton</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

  <return>return <expr><name>baton</name></expr>;</return>
}</block></function>


<comment type="block">/* Get the real filesystem PATH for BATON, and return the value
   allocated from POOL.  This function juggles the craziness of
   updates, switches, and updates of switched things. */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>get_real_fs_path</name><parameter_list>(<param><decl><type><name>item_baton_t</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name> <init>= <expr><call><name>get_from_path_map</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>uc</name>-&gt;<name>pathmap</name></name></expr></argument>, <argument><expr><name><name>baton</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>baton</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call> ? <name>path</name> : <name><name>baton</name>-&gt;<name>path2</name></name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>send_vsn_url</name><parameter_list>(<param><decl><type><name>item_baton_t</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>href</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl>;</decl_stmt>

  <comment type="block">/* Try to use the CR, assuming the path exists in CR. */</comment>
  <expr_stmt><expr><name>path</name> = <call><name>get_real_fs_path</name><argument_list>(<argument><expr><name>baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>revision</name> = <call><name>dav_svn__get_safe_cr</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>uc</name>-&gt;<name>rev_root</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>href</name> = <call><name>dav_svn__build_uri</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>uc</name>-&gt;<name>resource</name>-&gt;<name>info</name>-&gt;<name>repos</name></name></expr></argument>,
                            <argument><expr><name>DAV_SVN__BUILD_URI_VERSION</name></expr></argument>,
                            <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr>0</expr></argument> <comment type="block">/* add_href */</comment>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>uc</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>baton</name>-&gt;<name>uc</name>-&gt;<name>output</name></name></expr></argument>,
                           <argument><expr>"&lt;D:checked-in&gt;&lt;D:href&gt;%s&lt;/D:href&gt;&lt;/D:checked-in&gt;"
                           <name>DEBUG_CR</name></expr></argument>, <argument><expr><call><name>apr_xml_quote_string</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>href</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>absent_helper</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name></type> <name>is_dir</name></decl></param>,
              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
              <param><decl><type><name>item_baton_t</name> *</type><name>parent</name></decl></param>,
              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>update_ctx_t</name> *</type><name>uc</name> <init>= <expr><name><name>parent</name>-&gt;<name>uc</name></name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr>! <name><name>uc</name>-&gt;<name>resource_walk</name></name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>elt</name> <init>= <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
                                     <argument><expr>"&lt;S:absent-%s name=\"%s\"/&gt;" <name>DEBUG_CR</name></expr></argument>,
                                     <argument><expr><call><name>DIR_OR_FILE</name><argument_list>(<argument><expr><name>is_dir</name></expr></argument>)</argument_list></call></expr></argument>,
                                     <argument><expr><call><name>apr_xml_quote_string</name>
                                       <argument_list>(<argument><expr><name>pool</name></expr></argument>,
                                        <argument><expr><call><name>svn_path_basename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
                                        <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>uc</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>uc</name>-&gt;<name>output</name></name></expr></argument>, <argument><expr>"%s"</expr></argument>, <argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>upd_absent_directory</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>absent_helper</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>parent_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>upd_absent_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>absent_helper</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>parent_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>add_helper</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name></type> <name>is_dir</name></decl></param>,
           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
           <param><decl><type><name>item_baton_t</name> *</type><name>parent</name></decl></param>,
           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl></param>,
           <param><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_revision</name></decl></param>,
           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
           <param><decl><type><name>void</name> **</type><name>child_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>item_baton_t</name> *</type><name>child</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>update_ctx_t</name> *</type><name>uc</name> <init>= <expr><name><name>parent</name>-&gt;<name>uc</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>bc_url</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>child</name> = <call><name>make_child_baton</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>child</name>-&gt;<name>added</name></name> = <name>TRUE</name></expr>;</expr_stmt>

  <if>if <condition>(<expr><name><name>uc</name>-&gt;<name>resource_walk</name></name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>uc</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>child</name>-&gt;<name>uc</name>-&gt;<name>output</name></name></expr></argument>,
                                <argument><expr>"&lt;S:resource path=\"%s\"&gt;" <name>DEBUG_CR</name></expr></argument>,
                                <argument><expr><call><name>apr_xml_quote_string</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>child</name>-&gt;<name>path3</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>qname</name> <init>= <expr><call><name>apr_xml_quote_string</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>child</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>elt</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>real_path</name> <init>= <expr><call><name>get_real_fs_path</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr>! <name>is_dir</name></expr>)</condition><then>
        <block>{
          <comment type="block">/* files have checksums */</comment>
          <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><name>APR_MD5_DIGESTSIZE</name></expr>]</index></name></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_file_md5_checksum</name>
                  <argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name><name>uc</name>-&gt;<name>rev_root</name></name></expr></argument>, <argument><expr><name>real_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><name><name>child</name>-&gt;<name>text_checksum</name></name> = <call><name>svn_md5_digest_to_cstring</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else
        <block>{
          <comment type="block">/* we send baseline-collection urls when we add a directory */</comment>
          <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl>;</decl_stmt>
          <expr_stmt><expr><name>revision</name> = <call><name>dav_svn__get_safe_cr</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>uc</name>-&gt;<name>rev_root</name></name></expr></argument>, <argument><expr><name>real_path</name></expr></argument>,
                                          <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>bc_url</name> = <call><name>dav_svn__build_uri</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>uc</name>-&gt;<name>resource</name>-&gt;<name>info</name>-&gt;<name>repos</name></name></expr></argument>,
                                      <argument><expr><name>DAV_SVN__BUILD_URI_BC</name></expr></argument>,
                                      <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>real_path</name></expr></argument>,
                                      <argument><expr>0</expr></argument> <comment type="block">/* add_href */</comment>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="block">/* ugh, build_uri ignores the path and just builds the root
             of the baseline collection.  we have to tack the
             real_path on manually, ignoring its leading slash. */</comment>
          <if>if <condition>(<expr><name>real_path</name> &amp;&amp; (! <call><name>svn_path_is_empty</name><argument_list>(<argument><expr><name>real_path</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
            <expr_stmt><expr><name>bc_url</name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name>bc_url</name></expr></argument>, <argument><expr><name>real_path</name>+1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

          <comment type="block">/* make sure that the BC_URL is xml attribute safe. */</comment>
          <expr_stmt><expr><name>bc_url</name> = <call><name>apr_xml_quote_string</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>bc_url</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>


      <if>if <condition>(<expr><name>copyfrom_path</name> == <name>NULL</name></expr>)</condition><then>
        <block>{
          <if>if <condition>(<expr><name>bc_url</name></expr>)</condition><then>
            <expr_stmt><expr><name>elt</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"&lt;S:add-%s name=\"%s\" "
                               "bc-url=\"%s\"&gt;" <name>DEBUG_CR</name></expr></argument>,
                               <argument><expr><call><name>DIR_OR_FILE</name><argument_list>(<argument><expr><name>is_dir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>qname</name></expr></argument>, <argument><expr><name>bc_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
          <else>else
            <expr_stmt><expr><name>elt</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"&lt;S:add-%s name=\"%s\"&gt;" <name>DEBUG_CR</name></expr></argument>,
                               <argument><expr><call><name>DIR_OR_FILE</name><argument_list>(<argument><expr><name>is_dir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>qname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
        }</block></then>
      <else>else
        <block>{
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>qcopy</name> <init>= <expr><call><name>apr_xml_quote_string</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>copyfrom_path</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <if>if <condition>(<expr><name>bc_url</name></expr>)</condition><then>
            <expr_stmt><expr><name>elt</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"&lt;S:add-%s name=\"%s\" "
                               "copyfrom-path=\"%s\" copyfrom-rev=\"%ld\" "
                               "bc-url=\"%s\"&gt;" <name>DEBUG_CR</name></expr></argument>,
                               <argument><expr><call><name>DIR_OR_FILE</name><argument_list>(<argument><expr><name>is_dir</name></expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><name>qname</name></expr></argument>, <argument><expr><name>qcopy</name></expr></argument>, <argument><expr><name>copyfrom_revision</name></expr></argument>,
                               <argument><expr><name>bc_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
          <else>else
            <expr_stmt><expr><name>elt</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"&lt;S:add-%s name=\"%s\" "
                               "copyfrom-path=\"%s\""
                               " copyfrom-rev=\"%ld\"&gt;" <name>DEBUG_CR</name></expr></argument>,
                               <argument><expr><call><name>DIR_OR_FILE</name><argument_list>(<argument><expr><name>is_dir</name></expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><name>qname</name></expr></argument>, <argument><expr><name>qcopy</name></expr></argument>, <argument><expr><name>copyfrom_revision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

          <expr_stmt><expr><name><name>child</name>-&gt;<name>copyfrom</name></name> = <name>TRUE</name></expr>;</expr_stmt>
        }</block></else></if>

      <comment type="block">/* Resist the temptation to pass 'elt' as the format string.
         Because it contains URIs, it might have sequences that look
         like format string insert placeholders.  For example,
         "this%20dir" is a valid printf() format string that means
         "this[insert an integer of width 20 here]ir". */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>uc</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>child</name>-&gt;<name>uc</name>-&gt;<name>output</name></name></expr></argument>, <argument><expr>"%s"</expr></argument>, <argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>send_vsn_url</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name><name>uc</name>-&gt;<name>resource_walk</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>uc</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>child</name>-&gt;<name>uc</name>-&gt;<name>output</name></name></expr></argument>,
                              <argument><expr>"&lt;/S:resource&gt;" <name>DEBUG_CR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <expr_stmt><expr>*<name>child_baton</name> = <name>child</name></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>open_helper</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name></type> <name>is_dir</name></decl></param>,
            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
            <param><decl><type><name>item_baton_t</name> *</type><name>parent</name></decl></param>,
            <param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
            <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
            <param><decl><type><name>void</name> **</type><name>child_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>item_baton_t</name> *</type><name>child</name> <init>= <expr><call><name>make_child_baton</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>qname</name> <init>= <expr><call><name>apr_xml_quote_string</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>child</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>uc</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>child</name>-&gt;<name>uc</name>-&gt;<name>output</name></name></expr></argument>,
                            <argument><expr>"&lt;S:open-%s name=\"%s\""
                            " rev=\"%ld\"&gt;" <name>DEBUG_CR</name></expr></argument>,
                            <argument><expr><call><name>DIR_OR_FILE</name><argument_list>(<argument><expr><name>is_dir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>qname</name></expr></argument>, <argument><expr><name>base_revision</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>send_vsn_url</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>child_baton</name> = <name>child</name></expr>;</expr_stmt>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>close_helper</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name></type> <name>is_dir</name></decl></param>, <param><decl><type><name>item_baton_t</name> *</type><name>baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>baton</name>-&gt;<name>uc</name>-&gt;<name>resource_walk</name></name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* ### ack!  binary names won't float here! */</comment>
  <comment type="block">/* If this is a copied file/dir, we can have removed props. */</comment>
  <if>if <condition>(<expr><name><name>baton</name>-&gt;<name>removed_props</name></name> &amp;&amp; (! <name><name>baton</name>-&gt;<name>added</name></name> || <name><name>baton</name>-&gt;<name>copyfrom</name></name>)</expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>qname</name></decl>;</decl_stmt>

      <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>baton</name>-&gt;<name>removed_props</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
        <block>{
          <comment type="block">/* We already XML-escaped the property name in change_xxx_prop. */</comment>
          <expr_stmt><expr><name>qname</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>removed_props</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>uc</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>baton</name>-&gt;<name>uc</name>-&gt;<name>output</name></name></expr></argument>,
                                    <argument><expr>"&lt;S:remove-prop name=\"%s\"/&gt;"
                                    <name>DEBUG_CR</name></expr></argument>, <argument><expr><name>qname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></then></if>

  <if>if <condition>(<expr>(! <name><name>baton</name>-&gt;<name>uc</name>-&gt;<name>send_all</name></name>) &amp;&amp; <name><name>baton</name>-&gt;<name>changed_props</name></name> &amp;&amp; (! <name><name>baton</name>-&gt;<name>added</name></name>)</expr>)</condition><then>
    <block>{
      <comment type="block">/* Tell the client to fetch all the props */</comment>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>uc</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>baton</name>-&gt;<name>uc</name>-&gt;<name>output</name></name></expr></argument>,
                                <argument><expr>"&lt;S:fetch-props/&gt;" <name>DEBUG_CR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>uc</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>baton</name>-&gt;<name>uc</name>-&gt;<name>output</name></name></expr></argument>, <argument><expr>"&lt;S:prop&gt;"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Both modern and non-modern clients need the checksum... */</comment>
  <if>if <condition>(<expr><name><name>baton</name>-&gt;<name>text_checksum</name></name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>uc</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>baton</name>-&gt;<name>uc</name>-&gt;<name>output</name></name></expr></argument>,
                                <argument><expr>"&lt;V:md5-checksum&gt;%s&lt;/V:md5-checksum&gt;"</expr></argument>,
                                <argument><expr><name><name>baton</name>-&gt;<name>text_checksum</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <comment type="block">/* ...but only non-modern clients want the 3 CR-related properties
     sent like here, because they can't handle receiving these special
     props inline like any other prop.
     ### later on, compress via the 'scattered table' solution as
     discussed with gstein.  -bmcs */</comment>
  <if>if <condition>(<expr>! <name><name>baton</name>-&gt;<name>uc</name>-&gt;<name>send_all</name></name></expr>)</condition><then>
    <block>{
      <comment type="block">/* ### grrr, these DAV: property names are already #defined in
         ra_dav.h, and statically defined in liveprops.c.  And now
         they're hardcoded here.  Isn't there some header file that both
         sides of the network can share?? */</comment>

      <comment type="block">/* ### special knowledge: svn_repos_dir_delta2 will never send
       *removals* of the commit-info "entry props". */</comment>
      <if>if <condition>(<expr><name><name>baton</name>-&gt;<name>committed_rev</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>uc</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>baton</name>-&gt;<name>uc</name>-&gt;<name>output</name></name></expr></argument>,
                                  <argument><expr>"&lt;D:version-name&gt;%s&lt;/D:version-name&gt;"</expr></argument>,
                                  <argument><expr><name><name>baton</name>-&gt;<name>committed_rev</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <if>if <condition>(<expr><name><name>baton</name>-&gt;<name>committed_date</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>uc</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>baton</name>-&gt;<name>uc</name>-&gt;<name>output</name></name></expr></argument>,
                                  <argument><expr>"&lt;D:creationdate&gt;%s&lt;/D:creationdate&gt;"</expr></argument>,
                                  <argument><expr><name><name>baton</name>-&gt;<name>committed_date</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

      <if>if <condition>(<expr><name><name>baton</name>-&gt;<name>last_author</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>uc</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>baton</name>-&gt;<name>uc</name>-&gt;<name>output</name></name></expr></argument>,
                                  <argument><expr>"&lt;D:creator-displayname&gt;%s"
                                  "&lt;/D:creator-displayname&gt;"</expr></argument>,
                                  <argument><expr><call><name>apr_xml_quote_string</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>pool</name></name></expr></argument>,
                                                       <argument><expr><name><name>baton</name>-&gt;<name>last_author</name></name></expr></argument>,
                                                       <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    }</block></then></if>

  <comment type="block">/* Close unconditionally, because we sent checksum unconditionally. */</comment>
  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>uc</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>baton</name>-&gt;<name>uc</name>-&gt;<name>output</name></name></expr></argument>, <argument><expr>"&lt;/S:prop&gt;\n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name><name>baton</name>-&gt;<name>added</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>uc</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>baton</name>-&gt;<name>uc</name>-&gt;<name>output</name></name></expr></argument>,
                              <argument><expr>"&lt;/S:add-%s&gt;" <name>DEBUG_CR</name></expr></argument>,
                              <argument><expr><call><name>DIR_OR_FILE</name><argument_list>(<argument><expr><name>is_dir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>uc</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>baton</name>-&gt;<name>uc</name>-&gt;<name>output</name></name></expr></argument>,
                              <argument><expr>"&lt;/S:open-%s&gt;" <name>DEBUG_CR</name></expr></argument>,
                              <argument><expr><call><name>DIR_OR_FILE</name><argument_list>(<argument><expr><name>is_dir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* Send the opening tag of the update-report if it hasn't been sent
   already. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>maybe_start_update_report</name><parameter_list>(<param><decl><type><name>update_ctx_t</name> *</type><name>uc</name></decl></param>)</parameter_list>
<block>{
  <if>if <condition>(<expr>(! <name><name>uc</name>-&gt;<name>resource_walk</name></name>) &amp;&amp; (! <name><name>uc</name>-&gt;<name>started_update</name></name>)</expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><macro><name>dav_svn__send_xml</name><argument_list>(<argument>uc-&gt;bb</argument>, <argument>uc-&gt;output</argument>,
                                <argument>DAV_XML_HEADER DEBUG_CR
                                "&lt;S:update-report xmlns:S=\""
                                SVN_XML_NAMESPACE "\" "
                                "xmlns:V=\"" SVN_DAV_PROP_NS_DAV "\" "
                                "xmlns:D=\"DAV:\" %s&gt;" DEBUG_CR</argument>,
                                <argument>uc-&gt;send_all ? "send-all=\"true\"" : ""</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>uc</name>-&gt;<name>started_update</name></name> = <name>TRUE</name></expr>;</expr_stmt>
    }</block></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>upd_set_target_revision</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
                        <param><decl><type><name>svn_revnum_t</name></type> <name>target_revision</name></decl></param>,
                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>update_ctx_t</name> *</type><name>uc</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>maybe_start_update_report</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr>! <name><name>uc</name>-&gt;<name>resource_walk</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>uc</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>uc</name>-&gt;<name>output</name></name></expr></argument>,
                              <argument><expr>"&lt;S:target-revision rev=\"%ld"
                              "\"/&gt;" <name>DEBUG_CR</name></expr></argument>, <argument><expr><name>target_revision</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>upd_open_root</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
              <param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
              <param><decl><type><name>void</name> **</type><name>root_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>update_ctx_t</name> *</type><name>uc</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>item_baton_t</name> *</type><name>b</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* note that we create a subpool; the root_baton is passed to the
     close_directory callback, where we will destroy the pool. */</comment>

  <expr_stmt><expr><name><name>b</name>-&gt;<name>uc</name></name> = <name>uc</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>b</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>b</name>-&gt;<name>path</name></name> = <name><name>uc</name>-&gt;<name>anchor</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>b</name>-&gt;<name>path2</name></name> = <name><name>uc</name>-&gt;<name>dst_path</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>b</name>-&gt;<name>path3</name></name> = ""</expr>;</expr_stmt>

  <expr_stmt><expr>*<name>root_baton</name> = <name>b</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>maybe_start_update_report</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name><name>uc</name>-&gt;<name>resource_walk</name></name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>qpath</name> <init>= <expr><call><name>apr_xml_quote_string</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>path3</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>uc</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>uc</name>-&gt;<name>output</name></name></expr></argument>,
                                <argument><expr>"&lt;S:resource path=\"%s\"&gt;" <name>DEBUG_CR</name></expr></argument>, <argument><expr><name>qpath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
  <else>else
    <block>{
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>uc</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>uc</name>-&gt;<name>output</name></name></expr></argument>,
                                <argument><expr>"&lt;S:open-directory rev=\"%ld\"&gt;"
                                <name>DEBUG_CR</name></expr></argument>, <argument><expr><name>base_revision</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

  <comment type="block">/* Only transmit the root directory's Version Resource URL if
     there's no target. */</comment>
  <if>if <condition>(<expr>! *<name><name>uc</name>-&gt;<name>target</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>send_vsn_url</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <if>if <condition>(<expr><name><name>uc</name>-&gt;<name>resource_walk</name></name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>uc</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>uc</name>-&gt;<name>output</name></name></expr></argument>,
                              <argument><expr>"&lt;/S:resource&gt;" <name>DEBUG_CR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>upd_delete_entry</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                 <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
                 <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>item_baton_t</name> *</type><name>parent</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>qname</name> <init>= <expr><call><name>apr_xml_quote_string</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
                                           <argument><expr><call><name>svn_path_basename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>uc</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>parent</name>-&gt;<name>uc</name>-&gt;<name>output</name></name></expr></argument>,
                           <argument><expr>"&lt;S:delete-entry name=\"%s\"/&gt;" <name>DEBUG_CR</name></expr></argument>, <argument><expr><name>qname</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>upd_add_directory</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                  <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl></param>,
                  <param><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_revision</name></decl></param>,
                  <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                  <param><decl><type><name>void</name> **</type><name>child_baton</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>add_helper</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument> <comment type="block">/* is_dir */</comment>,
                    <argument><expr><name>path</name></expr></argument>, <argument><expr><name>parent_baton</name></expr></argument>, <argument><expr><name>copyfrom_path</name></expr></argument>, <argument><expr><name>copyfrom_revision</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>,
                    <argument><expr><name>child_baton</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>upd_open_directory</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
                                        <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
                                        <param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
                                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                        <param><decl><type><name>void</name> **</type><name>child_baton</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>open_helper</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument> <comment type="block">/* is_dir */</comment>,
                     <argument><expr><name>path</name></expr></argument>, <argument><expr><name>parent_baton</name></expr></argument>, <argument><expr><name>base_revision</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>child_baton</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>upd_change_xxx_prop</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>item_baton_t</name> *</type><name>b</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>qname</name></decl>;</decl_stmt>

  <comment type="block">/* Resource walks say nothing about props. */</comment>
  <if>if <condition>(<expr><name><name>b</name>-&gt;<name>uc</name>-&gt;<name>resource_walk</name></name></expr>)</condition><then>
    <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* Else this not a resource walk, so either send props or cache them
     to send later, depending on whether this is a modern report
     response or not. */</comment>

  <expr_stmt><expr><name>qname</name> = <call><name>apr_xml_quote_string</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* apr_xml_quote_string doesn't realloc if there is nothing to
     quote, so dup the name, but only if necessary. */</comment>
  <if>if <condition>(<expr><name>qname</name> == <name>name</name></expr>)</condition><then>
    <expr_stmt><expr><name>qname</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>


  <if>if <condition>(<expr><name><name>b</name>-&gt;<name>uc</name>-&gt;<name>send_all</name></name></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><name>value</name></expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>qval</name></decl>;</decl_stmt>

          <if>if <condition>(<expr><call><name>svn_xml_is_xml_safe</name><argument_list>(<argument><expr><name><name>value</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>value</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
              <decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
              <expr_stmt><expr><call><name>svn_xml_escape_cdata_string</name><argument_list>(<argument><expr>&amp;<name>tmp</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>qval</name> = <name><name>tmp</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>uc</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>uc</name>-&gt;<name>output</name></name></expr></argument>,
                                        <argument><expr>"&lt;S:set-prop name=\"%s\"&gt;"</expr></argument>, <argument><expr><name>qname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
          <else>else
            <block>{
              <expr_stmt><expr><name>qval</name> = <call><name>svn_base64_encode_string</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>-&gt;<name>data</name></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>uc</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>uc</name>-&gt;<name>output</name></name></expr></argument>,
                                        <argument><expr>"&lt;S:set-prop name=\"%s\" "
                                        "encoding=\"base64\"&gt;" <name>DEBUG_CR</name></expr></argument>,
                                        <argument><expr><name>qname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>uc</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>uc</name>-&gt;<name>output</name></name></expr></argument>, <argument><expr>"%s"</expr></argument>, <argument><expr><name>qval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>uc</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>uc</name>-&gt;<name>output</name></name></expr></argument>,
                                    <argument><expr>"&lt;/S:set-prop&gt;" <name>DEBUG_CR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else  <comment type="block">/* value is null, so this is a prop removal */</comment>
        <block>{
          <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>uc</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>uc</name>-&gt;<name>output</name></name></expr></argument>,
                                    <argument><expr>"&lt;S:remove-prop name=\"%s\"/&gt;" <name>DEBUG_CR</name></expr></argument>,
                                    <argument><expr><name>qname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then>
  <else>else  <comment type="block">/* don't do inline response, just cache prop names for close_helper */</comment>
    <block>{
      <comment type="block">/* For now, store certain entry props, because we'll need to send
         them later as standard DAV ("D:") props.  ### this should go
         away and we should just tunnel those props on through for the
         client to deal with. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSLEN</name></cpp:macro> <cpp:value>(sizeof(SVN_PROP_ENTRY_PREFIX) - 1)</cpp:value></cpp:define>
      <if>if <condition>(<expr>! <call><name>strncmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_PROP_ENTRY_PREFIX</name></expr></argument>, <argument><expr><name>NSLEN</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
          <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_PROP_ENTRY_COMMITTED_REV</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
            <block>{
              <expr_stmt><expr><name><name>b</name>-&gt;<name>committed_rev</name></name> = <name>value</name> ?
                <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>value</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
            }</block></then>
          <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_PROP_ENTRY_COMMITTED_DATE</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
            <block>{
              <expr_stmt><expr><name><name>b</name>-&gt;<name>committed_date</name></name> = <name>value</name> ?
                <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>value</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
            }</block></then>
          <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_PROP_ENTRY_LAST_AUTHOR</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
            <block>{
              <expr_stmt><expr><name><name>b</name>-&gt;<name>last_author</name></name> = <name>value</name> ?
                <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>value</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
            }</block></then>
          <else>else <if>if <condition>(<expr>(<call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_PROP_ENTRY_LOCK_TOKEN</name></expr></argument>)</argument_list></call> == 0)
                   &amp;&amp; (! <name>value</name>)</expr>)</condition><then>
            <block>{
              <comment type="block">/* We only support delete of lock tokens, not add/modify. */</comment>
              <if>if <condition>(<expr>! <name><name>b</name>-&gt;<name>removed_props</name></name></expr>)</condition><then>
                <expr_stmt><expr><name><name>b</name>-&gt;<name>removed_props</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
              <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>removed_props</name></name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>qname</name></expr>;</expr_stmt>
            }</block></then></if></else></if></else></if></else></if>
          <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
        }</block></then></if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NSLEN</name></cpp:undef>

      <if>if <condition>(<expr><name>value</name></expr>)</condition><then>
        <block>{
          <if>if <condition>(<expr>! <name><name>b</name>-&gt;<name>changed_props</name></name></expr>)</condition><then>
            <expr_stmt><expr><name><name>b</name>-&gt;<name>changed_props</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

          <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>changed_props</name></name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>qname</name></expr>;</expr_stmt>
        }</block></then>
      <else>else
        <block>{
          <if>if <condition>(<expr>! <name><name>b</name>-&gt;<name>removed_props</name></name></expr>)</condition><then>
            <expr_stmt><expr><name><name>b</name>-&gt;<name>removed_props</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

          <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>removed_props</name></name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>qname</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></else></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>upd_close_directory</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>dir_baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>close_helper</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument> <comment type="block">/* is_dir */</comment>, <argument><expr><name>dir_baton</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>upd_add_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
             <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl></param>,
             <param><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_revision</name></decl></param>,
             <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
             <param><decl><type><name>void</name> **</type><name>file_baton</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>add_helper</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument> <comment type="block">/* is_dir */</comment>,
                    <argument><expr><name>path</name></expr></argument>, <argument><expr><name>parent_baton</name></expr></argument>, <argument><expr><name>copyfrom_path</name></expr></argument>, <argument><expr><name>copyfrom_revision</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>,
                    <argument><expr><name>file_baton</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>upd_open_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
              <param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
              <param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
              <param><decl><type><name>void</name> **</type><name>file_baton</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>open_helper</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument> <comment type="block">/* is_dir */</comment>,
                     <argument><expr><name>path</name></expr></argument>, <argument><expr><name>parent_baton</name></expr></argument>, <argument><expr><name>base_revision</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>file_baton</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<comment type="block">/* We have our own window handler and baton as a simple wrapper around
   the real handler (which converts vdelta windows to base64-encoded
   svndiff data).  The wrapper is responsible for sending the opening
   and closing XML tags around the svndiff data. */</comment>
<struct>struct <name>window_handler_baton</name>
<block>{
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>seen_first_window</name></decl>;</decl_stmt>  <comment type="block">/* False until first window seen. */</comment>
  <decl_stmt><decl><type><name>update_ctx_t</name> *</type><name>uc</name></decl>;</decl_stmt>

  <comment type="block">/* The _real_ window handler and baton. */</comment>
  <decl_stmt><decl><type><name>svn_txdelta_window_handler_t</name></type> <name>handler</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>handler_baton</name></decl>;</decl_stmt>
}</block>;</struct>


<comment type="block">/* This implements 'svn_txdelta_window_handler_t'. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>window_handler</name><parameter_list>(<param><decl><type><name>svn_txdelta_window_t</name> *</type><name>window</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type>struct <name>window_handler_baton</name> *</type><name>wb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr>! <name><name>wb</name>-&gt;<name>seen_first_window</name></name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name><name>wb</name>-&gt;<name>seen_first_window</name></name> = <name>TRUE</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>wb</name>-&gt;<name>uc</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>wb</name>-&gt;<name>uc</name>-&gt;<name>output</name></name></expr></argument>, <argument><expr>"&lt;S:txdelta&gt;"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>wb</name>-&gt;<name>handler</name></name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name><name>wb</name>-&gt;<name>handler_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if <condition>(<expr><name>window</name> == <name>NULL</name></expr>)</condition><then>
    <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>wb</name>-&gt;<name>uc</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>wb</name>-&gt;<name>uc</name>-&gt;<name>output</name></name></expr></argument>, <argument><expr>"&lt;/S:txdelta&gt;"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/* This implements 'svn_txdelta_window_handler_t'.
   During a resource walk, the driver sends an empty window as a
   boolean indicating that a change happened to this file, but we
   don't want to send anything over the wire as a result. */</comment>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>dummy_window_handler</name><parameter_list>(<param><decl><type><name>svn_txdelta_window_t</name> *</type><name>window</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>upd_apply_textdelta</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_checksum</name></decl></param>,
                    <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                    <param><decl><type><name>svn_txdelta_window_handler_t</name> *</type><name>handler</name></decl></param>,
                    <param><decl><type><name>void</name> **</type><name>handler_baton</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>item_baton_t</name> *</type><name>file</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type>struct <name>window_handler_baton</name> *</type><name>wb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>base64_stream</name></decl>;</decl_stmt>

  <comment type="block">/* Store the base checksum and the fact the file's text changed. */</comment>
  <expr_stmt><expr><name><name>file</name>-&gt;<name>base_checksum</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>file</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>base_checksum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>file</name>-&gt;<name>text_changed</name></name> = <name>TRUE</name></expr>;</expr_stmt>

  <comment type="block">/* If this is a resource walk, or if we're not in "send-all" mode,
     we don't actually want to transmit text-deltas. */</comment>
  <if>if <condition>(<expr><name><name>file</name>-&gt;<name>uc</name>-&gt;<name>resource_walk</name></name> || (! <name><name>file</name>-&gt;<name>uc</name>-&gt;<name>send_all</name></name>)</expr>)</condition><then>
    <block>{
      <expr_stmt><expr>*<name>handler</name> = <name>dummy_window_handler</name></expr>;</expr_stmt>
      <expr_stmt><expr>*<name>handler_baton</name> = <name>NULL</name></expr>;</expr_stmt>
      <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
    }</block></then></if>

  <expr_stmt><expr><name>wb</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>file</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>wb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>wb</name>-&gt;<name>seen_first_window</name></name> = <name>FALSE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>wb</name>-&gt;<name>uc</name></name> = <name><name>file</name>-&gt;<name>uc</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>base64_stream</name> = <call><name>dav_svn__make_base64_output_stream</name><argument_list>(<argument><expr><name><name>wb</name>-&gt;<name>uc</name>-&gt;<name>bb</name></name></expr></argument>,
                                                     <argument><expr><name><name>wb</name>-&gt;<name>uc</name>-&gt;<name>output</name></name></expr></argument>,
                                                     <argument><expr><name><name>file</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>svn_txdelta_to_svndiff2</name><argument_list>(<argument><expr>&amp;(<name><name>wb</name>-&gt;<name>handler</name></name>)</expr></argument>, <argument><expr>&amp;(<name><name>wb</name>-&gt;<name>handler_baton</name></name>)</expr></argument>,
                          <argument><expr><name>base64_stream</name></expr></argument>, <argument><expr><name><name>file</name>-&gt;<name>uc</name>-&gt;<name>svndiff_version</name></name></expr></argument>,
                          <argument><expr><name><name>file</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr>*<name>handler</name> = <name>window_handler</name></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>handler_baton</name> = <name>wb</name></expr>;</expr_stmt>

  <return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>upd_close_file</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>text_checksum</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>item_baton_t</name> *</type><name>file</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>file</name>-&gt;<name>text_checksum</name></name> = <name>text_checksum</name> ?
    <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>file</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>text_checksum</name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>

  <comment type="block">/* If we are not in "send all" mode, and this file is not a new
     addition or didn't otherwise have changed text, tell the client
     to fetch it. */</comment>
  <if>if <condition>(<expr>(! <name><name>file</name>-&gt;<name>uc</name>-&gt;<name>send_all</name></name>) &amp;&amp; (! <name><name>file</name>-&gt;<name>added</name></name>) &amp;&amp; <name><name>file</name>-&gt;<name>text_changed</name></name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>elt</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>elt</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"&lt;S:fetch-file%s%s%s/&gt;" <name>DEBUG_CR</name></expr></argument>,
                         <argument><expr><name><name>file</name>-&gt;<name>base_checksum</name></name> ? " base-checksum=\"" : ""</expr></argument>,
                         <argument><expr><name><name>file</name>-&gt;<name>base_checksum</name></name> ? <name><name>file</name>-&gt;<name>base_checksum</name></name> : ""</expr></argument>,
                         <argument><expr><name><name>file</name>-&gt;<name>base_checksum</name></name> ? "\"" : ""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>file</name>-&gt;<name>uc</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>file</name>-&gt;<name>uc</name>-&gt;<name>output</name></name></expr></argument>, <argument><expr>"%s"</expr></argument>, <argument><expr><name>elt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  <return>return <expr><call><name>close_helper</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument> <comment type="block">/* is_dir */</comment>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>upd_close_edit</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>update_ctx_t</name> *</type><name>uc</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Our driver will unconditionally close the update report... So if
     the report hasn't even been started yet, start it now. */</comment>
  <return>return <expr><call><name>maybe_start_update_report</name><argument_list>(<argument><expr><name>uc</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<comment type="block">/* Return a specific error associated with the contents of TAGNAME
   being malformed.  Use pool for allocations.  */</comment>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type>
<name>malformed_element_error</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tagname</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>errstr</name> <init>= <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"The request's '"</expr></argument>, <argument><expr><name>tagname</name></expr></argument>,
                                   <argument><expr>"' element is malformed; there "
                                   "is a problem with the client."</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>dav_svn__new_error_tag</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>HTTP_BAD_REQUEST</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>errstr</name></expr></argument>,
                                <argument><expr><name>SVN_DAV_ERROR_NAMESPACE</name></expr></argument>, <argument><expr><name>SVN_DAV_ERROR_TAG</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name>dav_error</name> *</type>
<name>dav_svn__update_report</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>apr_xml_doc</name> *</type><name>doc</name></decl></param>,
                       <param><decl><type><name>ap_filter_t</name> *</type><name>output</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_delta_editor_t</name> *</type><name>editor</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_xml_elem</name> *</type><name>child</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>rbaton</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>update_ctx_t</name></type> <name>uc</name> <init>= <expr><block>{ <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>revnum</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>from_revnum</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ns</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>entry_counter</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>entry_is_empty</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>serr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>dav_error</name> *</type><name>derr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_status_t</name></type> <name>apr_err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>dav_svn_repos</name> *</type><name>repos</name> <init>= <expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>repos</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name> <init>= <expr>""</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>text_deltas</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_depth_t</name></type> <name>requested_depth</name> <init>= <expr><name>svn_depth_unknown</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>saw_depth</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>saw_recursive</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>resource_walk</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>send_copyfrom_args</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>dav_svn__authz_read_baton</name></type> <name>arb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Construct the authz read check baton. */</comment>
  <expr_stmt><expr><name><name>arb</name>.<name>r</name></name> = <name><name>resource</name>-&gt;<name>info</name>-&gt;<name>r</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>arb</name>.<name>repos</name></name> = <name>repos</name></expr>;</expr_stmt>

  <if>if <condition>(<expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>restype</name></name> != <name>DAV_SVN_RESTYPE_VCC</name></expr>)</condition><then>
    <block>{
      <return>return <expr><call><name>dav_svn__new_error_tag</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_CONFLICT</name></expr></argument>, <argument><expr>0</expr></argument>,
                                    <argument><expr>"This report can only be run against "
                                    "a VCC."</expr></argument>,
                                    <argument><expr><name>SVN_DAV_ERROR_NAMESPACE</name></expr></argument>,
                                    <argument><expr><name>SVN_DAV_ERROR_TAG</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

  <expr_stmt><expr><name>ns</name> = <call><name>dav_svn__find_ns</name><argument_list>(<argument><expr><name><name>doc</name>-&gt;<name>namespaces</name></name></expr></argument>, <argument><expr><name>SVN_XML_NAMESPACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>ns</name> == -1</expr>)</condition><then>
    <block>{
      <return>return <expr><call><name>dav_svn__new_error_tag</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_BAD_REQUEST</name></expr></argument>, <argument><expr>0</expr></argument>,
                                    <argument><expr>"The request does not contain the 'svn:' "
                                    "namespace, so it is not going to have an "
                                    "svn:target-revision element. That element "
                                    "is required."</expr></argument>,
                                    <argument><expr><name>SVN_DAV_ERROR_NAMESPACE</name></expr></argument>,
                                    <argument><expr><name>SVN_DAV_ERROR_TAG</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

  <comment type="block">/* If server configuration permits bulk updates (a report with props
     and textdeltas inline, rather than placeholder tags that tell the
     client to do further fetches), look to see if client requested as
     much.  */</comment>
  <if>if <condition>(<expr><name><name>repos</name>-&gt;<name>bulk_updates</name></name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>apr_xml_attr</name> *</type><name>this_attr</name></decl>;</decl_stmt>

      <for>for (<init><expr><name>this_attr</name> = <name><name>doc</name>-&gt;<name>root</name>-&gt;<name>attr</name></name></expr>;</init> <condition><expr><name>this_attr</name></expr>;</condition> <incr><expr><name>this_attr</name> = <name><name>this_attr</name>-&gt;<name>next</name></name></expr></incr>)
        <block>{
          <if>if <condition>(<expr>(<call><name>strcmp</name><argument_list>(<argument><expr><name><name>this_attr</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"send-all"</expr></argument>)</argument_list></call> == 0)
              &amp;&amp; (<call><name>strcmp</name><argument_list>(<argument><expr><name><name>this_attr</name>-&gt;<name>value</name></name></expr></argument>, <argument><expr>"true"</expr></argument>)</argument_list></call> == 0)</expr>)</condition><then>
            <block>{
              <expr_stmt><expr><name><name>uc</name>.<name>send_all</name></name> = <name>TRUE</name></expr>;</expr_stmt>
              <break>break;</break>
            }</block></then></if>
        }</block></for>
    }</block></then></if>

  <for>for (<init><expr><name>child</name> = <name><name>doc</name>-&gt;<name>root</name>-&gt;<name>first_child</name></name></expr>;</init> <condition><expr><name>child</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>child</name> = <name><name>child</name>-&gt;<name>next</name></name></expr></incr>)
    <block>{
      <comment type="block">/* Note that child-&gt;name might not match any of the cases below.
         Thus, the check for non-empty cdata in each of these cases
         cannot be moved to the top of the loop, because then it would
         wrongly catch other elements that do allow empty cdata. */</comment>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cdata</name></decl>;</decl_stmt>

      <if>if <condition>(<expr><name><name>child</name>-&gt;<name>ns</name></name> == <name>ns</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"target-revision"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>cdata</name> = <call><name>dav_xml_get_cdata</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr>! *<name>cdata</name></expr>)</condition><then>
            <return>return <expr><call><name>malformed_element_error</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
          <expr_stmt><expr><name>revnum</name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name>cdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      <if>if <condition>(<expr><name><name>child</name>-&gt;<name>ns</name></name> == <name>ns</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"src-path"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>dav_svn__uri_info</name></type> <name>this_info</name></decl>;</decl_stmt>
          <expr_stmt><expr><name>cdata</name> = <call><name>dav_xml_get_cdata</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr>! *<name>cdata</name></expr>)</condition><then>
            <return>return <expr><call><name>malformed_element_error</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
          <if>if <condition>(<expr>(<name>derr</name> = <call><name>dav_svn__test_canonical</name><argument_list>(<argument><expr><name>cdata</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
            <return>return <expr><name>derr</name></expr>;</return></then></if>
          <if>if <condition>(<expr>(<name>serr</name> = <call><name>dav_svn__simple_parse_uri</name><argument_list>(<argument><expr>&amp;<name>this_info</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>,
                                                <argument><expr><name>cdata</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
            <return>return <expr><call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><name>serr</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
                                        <argument><expr>"Could not parse 'src-path' URL."</expr></argument>,
                                        <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
          <expr_stmt><expr><name>src_path</name> = <name><name>this_info</name>.<name>repos_path</name></name></expr>;</expr_stmt>
        }</block></then></if>
      <if>if <condition>(<expr><name><name>child</name>-&gt;<name>ns</name></name> == <name>ns</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"dst-path"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <block>{
          <decl_stmt><decl><type><name>dav_svn__uri_info</name></type> <name>this_info</name></decl>;</decl_stmt>
          <expr_stmt><expr><name>cdata</name> = <call><name>dav_xml_get_cdata</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr>! *<name>cdata</name></expr>)</condition><then>
            <return>return <expr><call><name>malformed_element_error</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
          <if>if <condition>(<expr>(<name>derr</name> = <call><name>dav_svn__test_canonical</name><argument_list>(<argument><expr><name>cdata</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
            <return>return <expr><name>derr</name></expr>;</return></then></if>
          <if>if <condition>(<expr>(<name>serr</name> = <call><name>dav_svn__simple_parse_uri</name><argument_list>(<argument><expr>&amp;<name>this_info</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>,
                                                <argument><expr><name>cdata</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
            <return>return <expr><call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><name>serr</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
                                        <argument><expr>"Could not parse 'dst-path' URL."</expr></argument>,
                                        <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
          <expr_stmt><expr><name>dst_path</name> = <name><name>this_info</name>.<name>repos_path</name></name></expr>;</expr_stmt>
        }</block></then></if>
      <if>if <condition>(<expr><name><name>child</name>-&gt;<name>ns</name></name> == <name>ns</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"update-target"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>cdata</name> = <call><name>dav_xml_get_cdata</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr>(<name>derr</name> = <call><name>dav_svn__test_canonical</name><argument_list>(<argument><expr><name>cdata</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
            <return>return <expr><name>derr</name></expr>;</return></then></if>
          <expr_stmt><expr><name>target</name> = <name>cdata</name></expr>;</expr_stmt>
        }</block></then></if>
      <if>if <condition>(<expr><name><name>child</name>-&gt;<name>ns</name></name> == <name>ns</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"depth"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>cdata</name> = <call><name>dav_xml_get_cdata</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr>! *<name>cdata</name></expr>)</condition><then>
            <return>return <expr><call><name>malformed_element_error</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
          <expr_stmt><expr><name>requested_depth</name> = <call><name>svn_depth_from_word</name><argument_list>(<argument><expr><name>cdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>saw_depth</name> = <name>TRUE</name></expr>;</expr_stmt>
        }</block></then></if>
      <if>if <condition>(<expr>(<name><name>child</name>-&gt;<name>ns</name></name> == <name>ns</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"recursive"</expr></argument>)</argument_list></call> == 0)
          &amp;&amp; (! <name>saw_depth</name>)</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>cdata</name> = <call><name>dav_xml_get_cdata</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr>! *<name>cdata</name></expr>)</condition><then>
            <return>return <expr><call><name>malformed_element_error</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
          <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cdata</name></expr></argument>, <argument><expr>"no"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
            <expr_stmt><expr><name>requested_depth</name> = <name>svn_depth_files</name></expr>;</expr_stmt></then>
          <else>else
            <expr_stmt><expr><name>requested_depth</name> = <name>svn_depth_infinity</name></expr>;</expr_stmt></else></if>
          <comment type="block">/* Note that even modern, depth-aware clients still transmit
             "no" for "recursive" (along with "files" for "depth") in
             the svn_depth_files case, and transmit "no" in the
             svn_depth_empty case.  This is because they don't know if
             they're talking to a depth-aware server or not, and they
             don't need to know -- all they have to do is transmit
             both, and the server will DTRT either way (although in
             the svn_depth_empty case, the client will still have some
             work to do in ignoring the files that come down).

             When both "depth" and "recursive" are sent, we don't
             bother to check if they're mutually consistent, we just
             let depth dominate. */</comment>
          <expr_stmt><expr><name>saw_recursive</name> = <name>TRUE</name></expr>;</expr_stmt>
        }</block></then></if>
      <if>if <condition>(<expr><name><name>child</name>-&gt;<name>ns</name></name> == <name>ns</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"ignore-ancestry"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>cdata</name> = <call><name>dav_xml_get_cdata</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr>! *<name>cdata</name></expr>)</condition><then>
            <return>return <expr><call><name>malformed_element_error</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
          <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cdata</name></expr></argument>, <argument><expr>"no"</expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
            <expr_stmt><expr><name>ignore_ancestry</name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
        }</block></then></if>
      <if>if <condition>(<expr><name><name>child</name>-&gt;<name>ns</name></name> == <name>ns</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"send-copyfrom-args"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>cdata</name> = <call><name>dav_xml_get_cdata</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr>! *<name>cdata</name></expr>)</condition><then>
            <return>return <expr><call><name>malformed_element_error</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
          <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cdata</name></expr></argument>, <argument><expr>"no"</expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
            <expr_stmt><expr><name>send_copyfrom_args</name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
        }</block></then></if>
      <if>if <condition>(<expr><name><name>child</name>-&gt;<name>ns</name></name> == <name>ns</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"resource-walk"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>cdata</name> = <call><name>dav_xml_get_cdata</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr>! *<name>cdata</name></expr>)</condition><then>
            <return>return <expr><call><name>malformed_element_error</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
          <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cdata</name></expr></argument>, <argument><expr>"no"</expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
            <expr_stmt><expr><name>resource_walk</name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
        }</block></then></if>
      <if>if <condition>(<expr><name><name>child</name>-&gt;<name>ns</name></name> == <name>ns</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"text-deltas"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>cdata</name> = <call><name>dav_xml_get_cdata</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr>! *<name>cdata</name></expr>)</condition><then>
            <return>return <expr><call><name>malformed_element_error</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
          <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cdata</name></expr></argument>, <argument><expr>"no"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
            <expr_stmt><expr><name>text_deltas</name> = <name>FALSE</name></expr>;</expr_stmt></then></if>
        }</block></then></if>
    }</block></for>

  <if>if <condition>(<expr>!<name>saw_depth</name> &amp;&amp; !<name>saw_recursive</name> &amp;&amp; (<name>requested_depth</name> == <name>svn_depth_unknown</name>)</expr>)</condition><then>
    <expr_stmt><expr><name>requested_depth</name> = <name>svn_depth_infinity</name></expr>;</expr_stmt></then></if>

  <comment type="block">/* If the client never sent a &lt;src-path&gt; element, it's old and
     sending a style of report that we no longer allow. */</comment>
  <if>if <condition>(<expr>! <name>src_path</name></expr>)</condition><then>
    <block>{
      <return>return <expr><call><name>dav_svn__new_error_tag</name>
        <argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_BAD_REQUEST</name></expr></argument>, <argument><expr>0</expr></argument>,
         <argument><expr>"The request did not contain the '&lt;src-path&gt;' element.\n"
         "This may indicate that your client is too old."</expr></argument>,
         <argument><expr><name>SVN_DAV_ERROR_NAMESPACE</name></expr></argument>,
         <argument><expr><name>SVN_DAV_ERROR_TAG</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

  <comment type="block">/* If a revision for this operation was not dictated to us, this
     means "update to whatever the current HEAD is now". */</comment>
  <if>if <condition>(<expr><name>revnum</name> == <name>SVN_INVALID_REVNUM</name></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr>(<name>serr</name> = <call><name>svn_fs_youngest_rev</name><argument_list>(<argument><expr>&amp;<name>revnum</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
        <return>return <expr><call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><name>serr</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
                                    <argument><expr>"Could not determine the youngest "
                                    "revision for the update process."</expr></argument>,
                                    <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
    }</block></then></if>

  <expr_stmt><expr><name><name>uc</name>.<name>svndiff_version</name></name> = <name><name>resource</name>-&gt;<name>info</name>-&gt;<name>svndiff_version</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>uc</name>.<name>resource</name></name> = <name>resource</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>uc</name>.<name>output</name></name> = <name>output</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>uc</name>.<name>anchor</name></name> = <name>src_path</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>uc</name>.<name>target</name></name> = <name>target</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>uc</name>.<name>bb</name></name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>output</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>uc</name>.<name>pathmap</name></name> = <name>NULL</name></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>dst_path</name></expr>)</condition><then> <comment type="block">/* we're doing a 'switch' */</comment>
    <block>{
      <if>if <condition>(<expr>*<name>target</name></expr>)</condition><then>
        <block>{
          <comment type="block">/* if the src is split into anchor/target, so must the
             telescoping dst_path be. */</comment>
          <expr_stmt><expr><name><name>uc</name>.<name>dst_path</name></name> = <call><name>svn_path_dirname</name><argument_list>(<argument><expr><name>dst_path</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="block">/* Also, the svn_repos_dir_delta2() is going to preserve our
             target's name, so we need a pathmap entry for that. */</comment>
          <if>if <condition>(<expr>! <name><name>uc</name>.<name>pathmap</name></name></expr>)</condition><then>
            <expr_stmt><expr><name><name>uc</name>.<name>pathmap</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
          <expr_stmt><expr><call><name>add_to_path_map</name><argument_list>(<argument><expr><name><name>uc</name>.<name>pathmap</name></name></expr></argument>,
                          <argument><expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>,
                          <argument><expr><name>dst_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else
        <block>{
          <expr_stmt><expr><name><name>uc</name>.<name>dst_path</name></name> = <name>dst_path</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then>
  <else>else  <comment type="block">/* we're doing an update, so src and dst are the same. */</comment>
    <expr_stmt><expr><name><name>uc</name>.<name>dst_path</name></name> = <name><name>uc</name>.<name>anchor</name></name></expr>;</expr_stmt></else></if>

  <comment type="block">/* Get the root of the revision we want to update to. This will be used
     to generated stable id values. */</comment>
  <if>if <condition>(<expr>(<name>serr</name> = <call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name><name>uc</name>.<name>rev_root</name></name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>fs</name></name></expr></argument>,
                                   <argument><expr><name>revnum</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
    <block>{
      <return>return <expr><call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><name>serr</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
                                  <argument><expr>"The revision root could not be created."</expr></argument>,
                                  <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

  <comment type="block">/* If the client did *not* request 'send-all' mode, then we will be
     sending only a "skelta" of the difference, which will not need to
     contain actual text deltas. */</comment>
  <if>if <condition>(<expr>! <name><name>uc</name>.<name>send_all</name></name></expr>)</condition><then>
    <expr_stmt><expr><name>text_deltas</name> = <name>FALSE</name></expr>;</expr_stmt></then></if>

  <comment type="block">/* When we call svn_repos_finish_report, it will ultimately run
     dir_delta() between REPOS_PATH/TARGET and TARGET_PATH.  In the
     case of an update or status, these paths should be identical.  In
     the case of a switch, they should be different. */</comment>
  <expr_stmt><expr><name>editor</name> = <call><name>svn_delta_default_editor</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>editor</name>-&gt;<name>set_target_revision</name></name> = <name>upd_set_target_revision</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>editor</name>-&gt;<name>open_root</name></name> = <name>upd_open_root</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>editor</name>-&gt;<name>delete_entry</name></name> = <name>upd_delete_entry</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>editor</name>-&gt;<name>add_directory</name></name> = <name>upd_add_directory</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>editor</name>-&gt;<name>open_directory</name></name> = <name>upd_open_directory</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>editor</name>-&gt;<name>change_dir_prop</name></name> = <name>upd_change_xxx_prop</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>editor</name>-&gt;<name>close_directory</name></name> = <name>upd_close_directory</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>editor</name>-&gt;<name>absent_directory</name></name> = <name>upd_absent_directory</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>editor</name>-&gt;<name>add_file</name></name> = <name>upd_add_file</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>editor</name>-&gt;<name>open_file</name></name> = <name>upd_open_file</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>editor</name>-&gt;<name>apply_textdelta</name></name> = <name>upd_apply_textdelta</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>editor</name>-&gt;<name>change_file_prop</name></name> = <name>upd_change_xxx_prop</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>editor</name>-&gt;<name>close_file</name></name> = <name>upd_close_file</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>editor</name>-&gt;<name>absent_file</name></name> = <name>upd_absent_file</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>editor</name>-&gt;<name>close_edit</name></name> = <name>upd_close_edit</name></expr>;</expr_stmt>
  <if>if <condition>(<expr>(<name>serr</name> = <call><name>svn_repos_begin_report2</name><argument_list>(<argument><expr>&amp;<name>rbaton</name></expr></argument>, <argument><expr><name>revnum</name></expr></argument>,
                                      <argument><expr><name><name>repos</name>-&gt;<name>repos</name></name></expr></argument>,
                                      <argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>target</name></expr></argument>,
                                      <argument><expr><name>dst_path</name></expr></argument>,
                                      <argument><expr><name>text_deltas</name></expr></argument>,
                                      <argument><expr><name>requested_depth</name></expr></argument>,
                                      <argument><expr><name>ignore_ancestry</name></expr></argument>,
                                      <argument><expr><name>send_copyfrom_args</name></expr></argument>,
                                      <argument><expr><name>editor</name></expr></argument>, <argument><expr>&amp;<name>uc</name></expr></argument>,
                                      <argument><expr><call><name>dav_svn__authz_read_func</name><argument_list>(<argument><expr>&amp;<name>arb</name></expr></argument>)</argument_list></call></expr></argument>,
                                      <argument><expr>&amp;<name>arb</name></expr></argument>,
                                      <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
    <block>{
      <return>return <expr><call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><name>serr</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
                                  <argument><expr>"The state report gatherer could not be "
                                  "created."</expr></argument>,
                                  <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

  <comment type="block">/* scan the XML doc for state information */</comment>
  <for>for (<init><expr><name>child</name> = <name><name>doc</name>-&gt;<name>root</name>-&gt;<name>first_child</name></name></expr>;</init> <condition><expr><name>child</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>child</name> = <name><name>child</name>-&gt;<name>next</name></name></expr></incr>)
    <if>if <condition>(<expr><name><name>child</name>-&gt;<name>ns</name></name> == <name>ns</name></expr>)</condition><then>
      <block>{
        <comment type="block">/* Clear our subpool. */</comment>
        <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"entry"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
          <block>{
            <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>saw_rev</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>linkpath</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>locktoken</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>start_empty</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>apr_xml_attr</name> *</type><name>this_attr</name> <init>= <expr><name><name>child</name>-&gt;<name>attr</name></name></expr></init></decl>;</decl_stmt>
            <comment type="block">/* Default to infinity, for old clients that don't send depth. */</comment>
            <decl_stmt><decl><type><name>svn_depth_t</name></type> <name>depth</name> <init>= <expr><name>svn_depth_infinity</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>entry_counter</name>++</expr>;</expr_stmt>

            <while>while <condition>(<expr><name>this_attr</name></expr>)</condition>
              <block>{
                <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>this_attr</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"rev"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
                  <block>{
                    <expr_stmt><expr><name>rev</name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name><name>this_attr</name>-&gt;<name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>saw_rev</name> = <name>TRUE</name></expr>;</expr_stmt>
                  }</block></then>
                <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>this_attr</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"depth"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
                  <expr_stmt><expr><name>depth</name> = <call><name>svn_depth_from_word</name><argument_list>(<argument><expr><name><name>this_attr</name>-&gt;<name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
                <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>this_attr</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"linkpath"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
                  <expr_stmt><expr><name>linkpath</name> = <name><name>this_attr</name>-&gt;<name>value</name></name></expr>;</expr_stmt></then>
                <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>this_attr</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"start-empty"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
                  <expr_stmt><expr><name>start_empty</name> = <name>entry_is_empty</name> = <name>TRUE</name></expr>;</expr_stmt></then>
                <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>this_attr</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"lock-token"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
                  <expr_stmt><expr><name>locktoken</name> = <name><name>this_attr</name>-&gt;<name>value</name></name></expr>;</expr_stmt></then></if></else></if></else></if></else></if></else></if>

                <expr_stmt><expr><name>this_attr</name> = <name><name>this_attr</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
              }</block></while>

            <comment type="block">/* we require the `rev' attribute for this to make sense */</comment>
            <if>if <condition>(<expr>! <name>saw_rev</name></expr>)</condition><then>
              <block>{
                <expr_stmt><expr><name>serr</name> = <call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_XML_ATTRIB_NOT_FOUND</name></expr></argument>,
                                        <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"Missing XML attribute: rev"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>derr</name> = <call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><name>serr</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
                                            <argument><expr>"A failure occurred while "
                                            "recording one of the items of "
                                            "working copy state."</expr></argument>,
                                            <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto>goto <name>cleanup</name>;</goto>
              }</block></then></if>

            <comment type="block">/* get cdata, stripping whitespace */</comment>
            <expr_stmt><expr><name>path</name> = <call><name>dav_xml_get_cdata</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* determine the "from rev" for revision range ops */</comment>
            <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
              <expr_stmt><expr><name>from_revnum</name> = <name>rev</name></expr>;</expr_stmt></then></if>

            <if>if <condition>(<expr>! <name>linkpath</name></expr>)</condition><then>
              <expr_stmt><expr><name>serr</name> = <call><name>svn_repos_set_path3</name><argument_list>(<argument><expr><name>rbaton</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>,
                                         <argument><expr><name>start_empty</name></expr></argument>, <argument><expr><name>locktoken</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else>else
              <expr_stmt><expr><name>serr</name> = <call><name>svn_repos_link_path3</name><argument_list>(<argument><expr><name>rbaton</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>linkpath</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>,
                                          <argument><expr><name>start_empty</name></expr></argument>, <argument><expr><name>locktoken</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
            <if>if <condition>(<expr><name>serr</name> != <name>NULL</name></expr>)</condition><then>
              <block>{
                <expr_stmt><expr><name>derr</name> = <call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><name>serr</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
                                            <argument><expr>"A failure occurred while "
                                            "recording one of the items of "
                                            "working copy state."</expr></argument>,
                                            <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto>goto <name>cleanup</name>;</goto>
              }</block></then></if>

            <comment type="block">/* now, add this path to our path map, but only if we are
               doing a regular update (not a `switch') */</comment>
            <if>if <condition>(<expr><name>linkpath</name> &amp;&amp; (! <name>dst_path</name>)</expr>)</condition><then>
              <block>{
                <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>this_path</name></decl>;</decl_stmt>
                <if>if <condition>(<expr>! <name><name>uc</name>.<name>pathmap</name></name></expr>)</condition><then>
                  <expr_stmt><expr><name><name>uc</name>.<name>pathmap</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                <expr_stmt><expr><name>this_path</name> = <call><name>svn_path_join_many</name><argument_list>(<argument><expr><call><name>apr_hash_pool_get</name><argument_list>(<argument><expr><name><name>uc</name>.<name>pathmap</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                               <argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>add_to_path_map</name><argument_list>(<argument><expr><name><name>uc</name>.<name>pathmap</name></name></expr></argument>, <argument><expr><name>this_path</name></expr></argument>, <argument><expr><name>linkpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              }</block></then></if>
          }</block></then>
        <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"missing"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
          <block>{
            <comment type="block">/* get cdata, stripping whitespace */</comment>
            <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name> <init>= <expr><call><name>dav_xml_get_cdata</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>serr</name> = <call><name>svn_repos_delete_path</name><argument_list>(<argument><expr><name>rbaton</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>serr</name> != <name>NULL</name></expr>)</condition><then>
              <block>{
                <expr_stmt><expr><name>derr</name> = <call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><name>serr</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
                                            <argument><expr>"A failure occurred while "
                                            "recording one of the (missing) "
                                            "items of working copy state."</expr></argument>,
                                            <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto>goto <name>cleanup</name>;</goto>
              }</block></then></if>
          }</block></then></if></else></if>
      }</block></then></if></for>

  <comment type="block">/* Try to deduce what sort of client command is being run, then
     make this guess available to apache's logging subsystem. */</comment>
  <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>action</name></decl>, *<decl><type ref="prev"/><name>spath</name></decl>, *<decl><type ref="prev"/><name>log_depth</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>requested_depth</name> == <name>svn_depth_unknown</name></expr>)</condition><then>
      <expr_stmt><expr><name>log_depth</name> = ""</expr>;</expr_stmt></then>
    <else>else
      <expr_stmt><expr><name>log_depth</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>" depth="</expr></argument>,
                              <argument><expr><call><name>svn_depth_to_word</name><argument_list>(<argument><expr><name>requested_depth</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

    <if>if <condition>(<expr><name>target</name></expr>)</condition><then>
      <expr_stmt><expr><name>spath</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else
      <expr_stmt><expr><name>spath</name> = <name>src_path</name></expr>;</expr_stmt></else></if>

    <comment type="block">/* If a second path was passed to svn_repos_dir_delta2(), then it
       must have been switch, diff, or merge.  */</comment>
    <if>if <condition>(<expr><name>dst_path</name></expr>)</condition><then>
      <block>{
        <comment type="block">/* diff/merge don't ask for inline text-deltas. */</comment>
        <if>if <condition>(<expr><name><name>uc</name>.<name>send_all</name></name></expr>)</condition><then>
          <expr_stmt><expr><name>action</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>,
                                <argument><expr>"switch %s %s@%ld%s"</expr></argument>,
                                <argument><expr><call><name>svn_path_uri_encode</name><argument_list>(<argument><expr><name>spath</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><call><name>svn_path_uri_encode</name><argument_list>(<argument><expr><name>dst_path</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><name>revnum</name></expr></argument>, <argument><expr><name>log_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else>else
          <block>{
            <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>spath</name></expr></argument>, <argument><expr><name>dst_path</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
              <expr_stmt><expr><name>action</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>,
                                    <argument><expr>"diff %s r%ld:%ld%s%s"</expr></argument>,
                                    <argument><expr><call><name>svn_path_uri_encode</name><argument_list>(<argument><expr><name>spath</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><name>from_revnum</name></expr></argument>,
                                    <argument><expr><name>revnum</name></expr></argument>, <argument><expr><name>log_depth</name></expr></argument>,
                                    <argument><expr><name>ignore_ancestry</name> ? " ignore-ancestry" : ""</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else>else
              <expr_stmt><expr><name>action</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>,
                                    <argument><expr>"diff %s@%ld %s@%ld%s%s"</expr></argument>,
                                    <argument><expr><call><name>svn_path_uri_encode</name><argument_list>(<argument><expr><name>spath</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><name>from_revnum</name></expr></argument>,
                                    <argument><expr><call><name>svn_path_uri_encode</name><argument_list>(<argument><expr><name>dst_path</name></expr></argument>,
                                                        <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><name>revnum</name></expr></argument>, <argument><expr><name>log_depth</name></expr></argument>,
                                    <argument><expr>(<name>ignore_ancestry</name>
                                     ? " ignore-ancestry"
                                     : "")</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
          }</block></else></if>
      }</block></then>

    <comment type="block">/* Otherwise, it must be checkout, export, update, or status -u. */</comment>
    <else>else
      <block>{
        <comment type="block">/* svn_client_checkout() creates a single root directory, then
           reports it (and it alone) to the server as being empty. */</comment>
        <if>if <condition>(<expr><name>entry_counter</name> == 1 &amp;&amp; <name>entry_is_empty</name></expr>)</condition><then>
          <expr_stmt><expr><name>action</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>,
                                <argument><expr>"checkout-or-export %s r%ld%s"</expr></argument>,
                                <argument><expr><call><name>svn_path_uri_encode</name><argument_list>(<argument><expr><name>spath</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><name>revnum</name></expr></argument>,
                                <argument><expr><name>log_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else>else
          <block>{
            <if>if <condition>(<expr><name>text_deltas</name></expr>)</condition><then>
              <expr_stmt><expr><name>action</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>,
                                    <argument><expr>"update %s r%ld%s%s"</expr></argument>,
                                    <argument><expr><call><name>svn_path_uri_encode</name><argument_list>(<argument><expr><name>spath</name></expr></argument>,
                                                        <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><name>revnum</name></expr></argument>,
                                    <argument><expr><name>log_depth</name></expr></argument>,
                                    <argument><expr>(<name>send_copyfrom_args</name>
                                     ? " send-copyfrom-args" : "")</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else>else
              <expr_stmt><expr><name>action</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>,
                                    <argument><expr>"status %s r%ld%s"</expr></argument>,
                                    <argument><expr><call><name>svn_path_uri_encode</name><argument_list>(<argument><expr><name>spath</name></expr></argument>,
                                                        <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><name>revnum</name></expr></argument>,
                                    <argument><expr><name>log_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
          }</block></else></if>
      }</block></else></if>

    <expr_stmt><expr><call><name>dav_svn__operational_log</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>info</name></name></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>

  <comment type="block">/* this will complete the report, and then drive our editor to generate
     the response to the client. */</comment>
  <expr_stmt><expr><name>serr</name> = <call><name>svn_repos_finish_report</name><argument_list>(<argument><expr><name>rbaton</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>serr</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>derr</name> = <call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><name>serr</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
                                  <argument><expr>"A failure occurred while "
                                  "driving the update report editor"</expr></argument>,
                                  <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>cleanup</name>;</goto>
    }</block></then></if>

  <comment type="block">/* We're finished with the report baton.  Note that so we don't try
     to abort this report later. */</comment>
  <expr_stmt><expr><name>rbaton</name> = <name>NULL</name></expr>;</expr_stmt>

  <comment type="block">/* ### Temporarily disable resource_walks for single-file switch
     operations.  It isn't strictly necessary. */</comment>
  <if>if <condition>(<expr><name>dst_path</name> &amp;&amp; <name>resource_walk</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* Sanity check: if we switched a file, we can't do a resource
         walk.  dir_delta would choke if we pass a filepath as the
         'target'.  Also, there's no need to do the walk, since the
         new vsn-rsc-url was already in the earlier part of the report. */</comment>
      <decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>dst_kind</name></decl>;</decl_stmt>
      <if>if <condition>(<expr>(<name>serr</name> = <call><name>svn_fs_check_path</name><argument_list>(<argument><expr>&amp;<name>dst_kind</name></expr></argument>, <argument><expr><name><name>uc</name>.<name>rev_root</name></name></expr></argument>, <argument><expr><name>dst_path</name></expr></argument>,
                                    <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>derr</name> = <call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><name>serr</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
                                      <argument><expr>"Failed checking destination path kind"</expr></argument>,
                                      <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <goto>goto <name>cleanup</name>;</goto>
        }</block></then></if>
      <if>if <condition>(<expr><name>dst_kind</name> != <name>svn_node_dir</name></expr>)</condition><then>
        <expr_stmt><expr><name>resource_walk</name> = <name>FALSE</name></expr>;</expr_stmt></then></if>
    }</block></then></if>

  <comment type="block">/* The potential "resource walk" part of the update-report. */</comment>
  <if>if <condition>(<expr><name>dst_path</name> &amp;&amp; <name>resource_walk</name></expr>)</condition><then>  <comment type="block">/* this was a 'switch' operation */</comment>
    <block>{
      <comment type="block">/* send a second embedded &lt;S:resource-walk&gt; tree that contains
         the new vsn-rsc-urls for the switched dir.  this walk
         contains essentially nothing but &lt;add&gt; tags. */</comment>
      <decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>zero_root</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>serr</name> = <call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>zero_root</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr>0</expr></argument>,
                                  <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>serr</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>derr</name> = <call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><name>serr</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
                                      <argument><expr>"Failed to find the revision root"</expr></argument>,
                                      <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <goto>goto <name>cleanup</name>;</goto>
        }</block></then></if>

      <expr_stmt><expr><name>serr</name> = <call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>uc</name>.<name>bb</name></name></expr></argument>, <argument><expr><name><name>uc</name>.<name>output</name></name></expr></argument>,
                               <argument><expr>"&lt;S:resource-walk&gt;" <name>DEBUG_CR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>serr</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>derr</name> = <call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><name>serr</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
                                      <argument><expr>"Unable to begin resource walk"</expr></argument>,
                                      <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <goto>goto <name>cleanup</name>;</goto>
        }</block></then></if>

      <expr_stmt><expr><name><name>uc</name>.<name>resource_walk</name></name> = <name>TRUE</name></expr>;</expr_stmt>

      <comment type="block">/* Compare subtree DST_PATH within a pristine revision to
         revision 0.  This should result in nothing but 'add' calls
         to the editor. */</comment>
      <expr_stmt><expr><name>serr</name> = <call><name>svn_repos_dir_delta2</name><argument_list>(<argument><expr><name>zero_root</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>target</name></expr></argument>,
                                  <argument><expr><name><name>uc</name>.<name>rev_root</name></name></expr></argument>, <argument><expr><name>dst_path</name></expr></argument>,
                                  <comment type="block">/* re-use the editor */</comment>
                                  <argument><expr><name>editor</name></expr></argument>, <argument><expr>&amp;<name>uc</name></expr></argument>,
                                  <argument><expr><call><name>dav_svn__authz_read_func</name><argument_list>(<argument><expr>&amp;<name>arb</name></expr></argument>)</argument_list></call></expr></argument>,
                                  <argument><expr>&amp;<name>arb</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument> <comment type="block">/* text-deltas */</comment>,
                                  <argument><expr><name>requested_depth</name></expr></argument>,
                                  <argument><expr><name>TRUE</name></expr></argument> <comment type="block">/* entryprops */</comment>,
                                  <argument><expr><name>FALSE</name></expr></argument> <comment type="block">/* ignore-ancestry */</comment>,
                                  <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>serr</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>derr</name> = <call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><name>serr</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
                                      <argument><expr>"Resource walk failed."</expr></argument>,
                                      <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <goto>goto <name>cleanup</name>;</goto>
        }</block></then></if>

      <expr_stmt><expr><name>serr</name> = <call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>uc</name>.<name>bb</name></name></expr></argument>, <argument><expr><name><name>uc</name>.<name>output</name></name></expr></argument>,
                               <argument><expr>"&lt;/S:resource-walk&gt;" <name>DEBUG_CR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>serr</name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>derr</name> = <call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><name>serr</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
                                      <argument><expr>"Unable to complete resource walk."</expr></argument>,
                                      <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <goto>goto <name>cleanup</name>;</goto>
        }</block></then></if>
    }</block></then></if>

  <comment type="block">/* Close the report body, unless some error prevented it from being
     started in the first place. */</comment>
  <if>if <condition>(<expr><name><name>uc</name>.<name>started_update</name></name></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr>(<name>serr</name> = <call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>uc</name>.<name>bb</name></name></expr></argument>, <argument><expr><name><name>uc</name>.<name>output</name></name></expr></argument>,
                                    <argument><expr>"&lt;/S:update-report&gt;" <name>DEBUG_CR</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>derr</name> = <call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><name>serr</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
                                      <argument><expr>"Unable to complete update report."</expr></argument>,
                                      <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <goto>goto <name>cleanup</name>;</goto>
        }</block></then></if>
    }</block></then></if>

 <label><name>cleanup</name>:</label>

  <comment type="block">/* Flush the contents of the brigade (returning an error only if we
     don't already have one). */</comment>
  <if>if <condition>(<expr>(! <name>derr</name>) &amp;&amp; ((<name>apr_err</name> = <call><name>ap_fflush</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name><name>uc</name>.<name>bb</name></name></expr></argument>)</argument_list></call>))</expr>)</condition><then>
    <expr_stmt><expr><name>derr</name> = <call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
                                <argument><expr>"Error flushing brigade."</expr></argument>,
                                <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <comment type="block">/* if an error was produced EITHER by the dir_delta drive or the
     resource-walker... */</comment>
  <if>if <condition>(<expr><name>derr</name></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><name>rbaton</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name>svn_repos_abort_report</name><argument_list>(<argument><expr><name>rbaton</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
      <return>return <expr><name>derr</name></expr>;</return>
    }</block></then></if>

  <comment type="block">/* Destroy our subpool. */</comment>
  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
</unit>
