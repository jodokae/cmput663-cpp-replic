<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/mod_dav_svn/reports/get-locks.c"><comment type="block">/*
 * version.c: mod_dav_svn versioning provider functions for Subversion
 *
 * ====================================================================
 * Copyright (c) 2000-2006 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_tables.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_uuid.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;httpd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_log.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mod_dav.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_xml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_repos.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_dav.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_props.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_dav.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_base64.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../dav_svn.h"</cpp:file></cpp:include>


<comment type="block">/* Respond to a get-locks-report request.  See description of this
   report in libsvn_ra_dav/fetch.c.  */</comment>
<function><type><name>dav_error</name> *</type>
<name>dav_svn__get_locks_report</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>apr_xml_doc</name> *</type><name>doc</name></decl></param>,
                          <param><decl><type><name>ap_filter_t</name> *</type><name>output</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_status_t</name></type> <name>apr_err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>locks</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>dav_svn__authz_read_baton</name></type> <name>arb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name></decl>;</decl_stmt>

  <comment type="block">/* The request URI should be a public one representing an fs path. */</comment>
  <if>if <condition>(<expr>(! <name><name>resource</name>-&gt;<name>info</name>-&gt;<name>repos_path</name></name>)
      || (! <name><name>resource</name>-&gt;<name>info</name>-&gt;<name>repos</name>-&gt;<name>repos</name></name>)</expr>)</condition><then>
    <return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_BAD_REQUEST</name></expr></argument>, <argument><expr>0</expr></argument>,
                         <argument><expr>"get-locks-report run on resource which doesn't "
                         "represent a path within a repository."</expr></argument>)</argument_list></call></expr>;</return></then></if>

  <expr_stmt><expr><name><name>arb</name>.<name>r</name></name> = <name><name>resource</name>-&gt;<name>info</name>-&gt;<name>r</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>arb</name>.<name>repos</name></name> = <name><name>resource</name>-&gt;<name>info</name>-&gt;<name>repos</name></name></expr>;</expr_stmt>

  <comment type="block">/* Fetch the locks, but allow authz_read checks to happen on each. */</comment>
  <if>if <condition>(<expr>(<name>err</name> = <call><name>svn_repos_fs_get_locks</name><argument_list>(<argument><expr>&amp;<name>locks</name></expr></argument>,
                                    <argument><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>repos</name>-&gt;<name>repos</name></name></expr></argument>,
                                    <argument><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>repos_path</name></name></expr></argument>,
                                    <argument><expr><call><name>dav_svn__authz_read_func</name><argument_list>(<argument><expr>&amp;<name>arb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>arb</name></expr></argument>,
                                    <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>) != <name>SVN_NO_ERROR</name></expr>)</condition><then>
    <return>return <expr><call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
                                <argument><expr><name><name>err</name>-&gt;<name>message</name></name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <expr_stmt><expr><name>bb</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>output</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* start sending report */</comment>
  <expr_stmt><expr><name>apr_err</name> = <macro><name>ap_fprintf</name><argument_list>(<argument>output</argument>, <argument>bb</argument>,
                       <argument>DAV_XML_HEADER DEBUG_CR
                       "&lt;S:get-locks-report xmlns:S=\"" SVN_XML_NAMESPACE "\" "
                       "xmlns:D=\"DAV:\"&gt;" DEBUG_CR</argument>)</argument_list></macro></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>apr_err</name></expr>)</condition><then>
    <return>return <expr><call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
                                <argument><expr>"Error writing REPORT response."</expr></argument>,
                                <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <comment type="block">/* stream the locks */</comment>
  <expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>locks</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>)
    <block>{
      <decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>svn_lock_t</name> *</type><name>lock</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path_quoted</name></decl>, *<decl><type ref="prev"/><name>token_quoted</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>creation_str</name></decl>, *<decl><type ref="prev"/><name>expiration_str</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>owner_to_send</name></decl>, *<decl><type ref="prev"/><name>comment_to_send</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>owner_base64</name> <init>= <expr><name>FALSE</name></expr></init>, <name>comment_base64</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>lock</name> = <name>val</name></expr>;</expr_stmt>

      <expr_stmt><expr><name>path_quoted</name> = <call><name>apr_xml_quote_string</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><name><name>lock</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>token_quoted</name> = <call><name>apr_xml_quote_string</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><name><name>lock</name>-&gt;<name>token</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>creation_str</name> = <call><name>svn_time_to_cstring</name><argument_list>(<argument><expr><name><name>lock</name>-&gt;<name>creation_date</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>apr_err</name> = <call><name>ap_fprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>,
                           <argument><expr>"&lt;S:lock&gt;" <name>DEBUG_CR</name>
                           "&lt;S:path&gt;%s&lt;/S:path&gt;" <name>DEBUG_CR</name>
                           "&lt;S:token&gt;%s&lt;/S:token&gt;" <name>DEBUG_CR</name>
                           "&lt;S:creationdate&gt;%s&lt;/S:creationdate&gt;" <name>DEBUG_CR</name></expr></argument>,
                           <argument><expr><name>path_quoted</name></expr></argument>, <argument><expr><name>token_quoted</name></expr></argument>, <argument><expr><name>creation_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>apr_err</name></expr>)</condition><then>
        <return>return <expr><call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
                                    <argument><expr>"Error writing REPORT response."</expr></argument>,
                                    <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>

      <if>if <condition>(<expr><name><name>lock</name>-&gt;<name>expiration_date</name></name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>expiration_str</name> = <call><name>svn_time_to_cstring</name><argument_list>(<argument><expr><name><name>lock</name>-&gt;<name>expiration_date</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>apr_err</name> = <call><name>ap_fprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>,
                               <argument><expr>"&lt;S:expirationdate&gt;%s&lt;/S:expirationdate&gt;"
                               <name>DEBUG_CR</name></expr></argument>, <argument><expr><name>expiration_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>apr_err</name></expr>)</condition><then>
            <return>return <expr><call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
                                        <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
                                        <argument><expr>"Error writing REPORT response."</expr></argument>,
                                        <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
        }</block></then></if>

      <if>if <condition>(<expr><call><name>svn_xml_is_xml_safe</name><argument_list>(<argument><expr><name><name>lock</name>-&gt;<name>owner</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>lock</name>-&gt;<name>owner</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><name>owner_to_send</name> = <call><name>apr_xml_quote_string</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><name><name>lock</name>-&gt;<name>owner</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
      <else>else
        <block>{
          <decl_stmt><decl><type><name>svn_string_t</name></type> <name>owner_string</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>encoded_owner</name></decl>;</decl_stmt>

          <expr_stmt><expr><name><name>owner_string</name>.<name>data</name></name> = <name><name>lock</name>-&gt;<name>owner</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>owner_string</name>.<name>len</name></name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>lock</name>-&gt;<name>owner</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>encoded_owner</name> = <call><name>svn_base64_encode_string</name><argument_list>(<argument><expr>&amp;<name>owner_string</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>owner_to_send</name> = <name><name>encoded_owner</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name>owner_base64</name> = <name>TRUE</name></expr>;</expr_stmt>
        }</block></else></if>

      <expr_stmt><expr><name>apr_err</name> = <call><name>ap_fprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>,
                           <argument><expr>"&lt;S:owner %s&gt;%s&lt;/S:owner&gt;" <name>DEBUG_CR</name></expr></argument>,
                           <argument><expr><name>owner_base64</name> ? "encoding=\"base64\"" : ""</expr></argument>,
                           <argument><expr><name>owner_to_send</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>apr_err</name></expr>)</condition><then>
        <return>return <expr><call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
                                    <argument><expr>"Error writing REPORT response."</expr></argument>,
                                    <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>

      <if>if <condition>(<expr><name><name>lock</name>-&gt;<name>comment</name></name></expr>)</condition><then>
        <block>{
          <if>if <condition>(<expr><call><name>svn_xml_is_xml_safe</name><argument_list>(<argument><expr><name><name>lock</name>-&gt;<name>comment</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>lock</name>-&gt;<name>comment</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
              <expr_stmt><expr><name>comment_to_send</name> = <call><name>apr_xml_quote_string</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>,
                                                     <argument><expr><name><name>lock</name>-&gt;<name>comment</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
          <else>else
            <block>{
              <decl_stmt><decl><type><name>svn_string_t</name></type> <name>comment_string</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>encoded_comment</name></decl>;</decl_stmt>

              <expr_stmt><expr><name><name>comment_string</name>.<name>data</name></name> = <name><name>lock</name>-&gt;<name>comment</name></name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>comment_string</name>.<name>len</name></name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>lock</name>-&gt;<name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>encoded_comment</name> = <call><name>svn_base64_encode_string</name><argument_list>(<argument><expr>&amp;<name>comment_string</name></expr></argument>,
                                                         <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>comment_to_send</name> = <name><name>encoded_comment</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
              <expr_stmt><expr><name>comment_base64</name> = <name>TRUE</name></expr>;</expr_stmt>
            }</block></else></if>

          <expr_stmt><expr><name>apr_err</name> = <call><name>ap_fprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>,
                               <argument><expr>"&lt;S:comment %s&gt;%s&lt;/S:comment&gt;" <name>DEBUG_CR</name></expr></argument>,
                               <argument><expr><name>comment_base64</name> ? "encoding=\"base64\"" : ""</expr></argument>,
                               <argument><expr><name>comment_to_send</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>apr_err</name></expr>)</condition><then>
            <return>return <expr><call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
                                        <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
                                        <argument><expr>"Error writing REPORT response."</expr></argument>,
                                        <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
        }</block></then></if>

      <expr_stmt><expr><name>apr_err</name> = <call><name>ap_fprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr>"&lt;/S:lock&gt;" <name>DEBUG_CR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>apr_err</name></expr>)</condition><then>
        <return>return <expr><call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
                                    <argument><expr>"Error writing REPORT response."</expr></argument>,
                                    <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
    }</block></for> <comment type="block">/* end of hash loop */</comment>
  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* finish the report */</comment>
  <expr_stmt><expr><name>apr_err</name> = <call><name>ap_fprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr>"&lt;/S:get-locks-report&gt;" <name>DEBUG_CR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>apr_err</name></expr>)</condition><then>
    <return>return <expr><call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
                                <argument><expr>"Error writing REPORT response."</expr></argument>,
                                <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <comment type="block">/* Flush the contents of the brigade (returning an error only if we
     don't already have one). */</comment>
  <if>if <condition>(<expr>(<name>apr_err</name> = <call><name>ap_fflush</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
    <return>return <expr><call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
                                <argument><expr>"Error flushing brigade."</expr></argument>,
                                <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
</unit>
