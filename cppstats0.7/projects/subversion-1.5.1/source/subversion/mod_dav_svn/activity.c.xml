<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/source/subversion/mod_dav_svn/activity.c"><comment type="block">/*
 * activity.c: DeltaV activity handling
 *
 * ====================================================================
 * Copyright (c) 2000-2004 CollabNet.  All rights reserved.
 *
 * This software is licensed as described in the file COPYING, which
 * you should have received as part of this distribution.  The terms
 * are also available at http://subversion.tigris.org/license-1.html.
 * If newer versions of this license are posted there, you may use a
 * newer version instead, at your option.
 *
 * This software consists of voluntary contributions made by many
 * individuals.  For exact contribution history, see the revision
 * history and logs, available at http://subversion.tigris.org/.
 * ====================================================================
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_md5.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;httpd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mod_dav.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_md5.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_repos.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_fs_private.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dav_svn.h"</cpp:file></cpp:include>


<comment type="block">/* Escape ACTIVITY_ID to be safely usable as a filename.  Simply
   returns the MD5 checksum of the id.
*/</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>escape_activity</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>activity_id</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><name>APR_MD5_DIGESTSIZE</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>apr_md5</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name>activity_id</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>activity_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>svn_md5_digest_to_cstring_display</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* Return filename for ACTIVITY_ID under the repository in REPOS. */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>activity_pathname</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_svn_repos</name> *</type><name>repos</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>activity_id</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>repos</name>-&gt;<name>activities_db</name></name></expr></argument>,
                       <argument><expr><call><name>escape_activity</name><argument_list>(<argument><expr><name>activity_id</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>,
                       <argument><expr><name><name>repos</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* Return the transaction name of the activity stored in file
   PATHNAME, or NULL if PATHNAME cannot be read for any reason. */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>read_txn</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pathname</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>apr_file_t</name> *</type><name>activity_file</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iterpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>txn_name</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>SVN_FS__TXN_MAX_LEN</name>+1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <comment type="block">/* Try up to 10 times to read the txn name, retrying on ESTALE
     (stale NFS file handle because of dav_svn__store_activity
     renaming the activity file into place).
   */</comment>
  <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 10</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
    <block>{
      <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>err</name> = <call><name>svn_io_file_open</name><argument_list>(<argument><expr>&amp;<name>activity_file</name></expr></argument>, <argument><expr><name>pathname</name></expr></argument>,
                             <argument><expr><name>APR_READ</name>  | <name>APR_BUFFERED</name></expr></argument>,
                             <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
        <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ESTALE</name></cpp:ifdef>
          <if>if <condition>(<expr><call><name>APR_TO_OS_ERROR</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>apr_err</name></name></expr></argument>)</argument_list></call> == <name>ESTALE</name></expr>)</condition><then>
            <comment type="block">/* Retry on ESTALE... */</comment>
            <continue>continue;</continue></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
          <comment type="block">/* ...else bail. */</comment>
          <break>break;</break>
        }</block></then></if>

      <expr_stmt><expr><name>len</name> = <name>SVN_FS__TXN_MAX_LEN</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>err</name> = <call><name>svn_io_read_length_line</name><argument_list>(<argument><expr><name>activity_file</name></expr></argument>, <argument><expr><name>txn_name</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
        <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ESTALE</name></cpp:ifdef>
          <if>if <condition>(<expr><call><name>APR_TO_OS_ERROR</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>apr_err</name></name></expr></argument>)</argument_list></call> == <name>ESTALE</name></expr>)</condition><then>
            <continue>continue;</continue></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
          <break>break;</break>
        }</block></then></if>

      <expr_stmt><expr><name>err</name> = <call><name>svn_io_file_close</name><argument_list>(<argument><expr><name>activity_file</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ESTALE</name></cpp:ifdef>
      <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
        <block>{
          <if>if <condition>(<expr><call><name>APR_TO_OS_ERROR</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>apr_err</name></name></expr></argument>)</argument_list></call> == <name>ESTALE</name></expr>)</condition><then>
            <block>{
              <comment type="block">/* No retry, just completely ignore this ESTALE. */</comment>
              <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>err</name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

      <comment type="block">/* We have a txn_name or had a non-ESTALE close failure; either
         way, we're finished. */</comment>
      <break>break;</break>
    }</block></for>
  <expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* ### let's just assume that any error means the
     ### activity/transaction doesn't exist */</comment>
  <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

  <return>return <expr><name>txn_name</name></expr>;</return>
}</block></function>


<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>dav_svn__get_txn</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_svn_repos</name> *</type><name>repos</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>activity_id</name></decl></param>)</parameter_list>
<block>{
  <return>return <expr><call><name>read_txn</name><argument_list>(<argument><expr><call><name>activity_pathname</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>activity_id</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name>dav_error</name> *</type>
<name>dav_svn__delete_activity</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_svn_repos</name> *</type><name>repos</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>activity_id</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pathname</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_name</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>serr</name></decl>;</decl_stmt>

  <comment type="block">/* gstein sez: If the activity ID is not in the database, return a
     404.  If the transaction is not present or is immutable, return a
     204.  For all other failures, return a 500. */</comment>

  <expr_stmt><expr><name>pathname</name> = <call><name>activity_pathname</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>activity_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>txn_name</name> = <call><name>read_txn</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>txn_name</name> == <name>NULL</name></expr>)</condition><then>
    <block>{
      <return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name><name>repos</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_NOT_FOUND</name></expr></argument>, <argument><expr>0</expr></argument>,
                           <argument><expr>"could not find activity."</expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

  <comment type="block">/* After this point, we have to cleanup the value and database. */</comment>

  <comment type="block">/* An empty txn_name indicates the transaction has been committed,
     so don't try to clean it up. */</comment>
  <if>if <condition>(<expr>*<name>txn_name</name></expr>)</condition><then>
    <block>{
      <comment type="block">/* Now, we attempt to delete TXN_NAME from the Subversion
         repository.  If we fail only because the transaction doesn't
         exist, don't sweat it (but then, also don't try to remove it). */</comment>
      <if>if <condition>(<expr>(<name>serr</name> = <call><name>svn_fs_open_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name>txn_name</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
        <block>{
          <if>if <condition>(<expr><name><name>serr</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_NO_SUCH_TRANSACTION</name></expr>)</condition><then>
            <block>{
              <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>serr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>serr</name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt>
            }</block></then>
          <else>else
            <block>{
              <expr_stmt><expr><name>err</name> = <call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><name>serr</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
                                         <argument><expr>"could not open transaction."</expr></argument>,
                                         <argument><expr><name><name>repos</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <return>return <expr><name>err</name></expr>;</return>
            }</block></else></if>
        }</block></then>
      <else>else
        <block>{
          <expr_stmt><expr><name>serr</name> = <call><name>svn_fs_abort_txn</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>serr</name></expr>)</condition><then>
            <block>{
              <expr_stmt><expr><name>err</name> = <call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><name>serr</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
                                         <argument><expr>"could not abort transaction."</expr></argument>,
                                         <argument><expr><name><name>repos</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <return>return <expr><name>err</name></expr>;</return>
            }</block></then></if>
        }</block></else></if>
    }</block></then></if>

  <comment type="block">/* Finally, we remove the activity from the activities database. */</comment>
  <expr_stmt><expr><name>serr</name> = <call><name>svn_io_remove_file</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>serr</name></expr>)</condition><then>
    <expr_stmt><expr><name>err</name> = <call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><name>serr</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
                               <argument><expr>"unable to remove activity."</expr></argument>,
                               <argument><expr><name><name>repos</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

  <return>return <expr><name>err</name></expr>;</return>
}</block></function>


<function><type><name>dav_error</name> *</type>
<name>dav_svn__store_activity</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_svn_repos</name> *</type><name>repos</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>activity_id</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_name</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>final_path</name></decl>, *<decl><type ref="prev"/><name>tmp_path</name></decl>, *<decl><type ref="prev"/><name>activity_contents</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>apr_file_t</name> *</type><name>activity_file</name></decl>;</decl_stmt>

  <comment type="block">/* Create activities directory if it does not yet exist. */</comment>
  <expr_stmt><expr><name>err</name> = <call><name>svn_io_make_dir_recursively</name><argument_list>(<argument><expr><name><name>repos</name>-&gt;<name>activities_db</name></name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then>
    <return>return <expr><call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
                                <argument><expr>"could not initialize activity db."</expr></argument>,
                                <argument><expr><name><name>repos</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>

  <expr_stmt><expr><name>final_path</name> = <call><name>activity_pathname</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>activity_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>err</name> = <call><name>svn_io_open_unique_file2</name><argument_list>(<argument><expr>&amp;<name>activity_file</name></expr></argument>, <argument><expr>&amp;<name>tmp_path</name></expr></argument>, <argument><expr><name>final_path</name></expr></argument>,
                                 <argument><expr>".tmp"</expr></argument>, <argument><expr><name>svn_io_file_del_none</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>serr</name> <init>= <expr><call><name>svn_error_quick_wrap</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr>"Can't open activity db"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><name>serr</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
                                  <argument><expr>"could not open files."</expr></argument>,
                                  <argument><expr><name><name>repos</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

  <expr_stmt><expr><name>activity_contents</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>repos</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"%s\n%s\n"</expr></argument>,
                                   <argument><expr><name>txn_name</name></expr></argument>, <argument><expr><name>activity_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>err</name> = <call><name>svn_io_file_write_full</name><argument_list>(<argument><expr><name>activity_file</name></expr></argument>, <argument><expr><name>activity_contents</name></expr></argument>,
                               <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>activity_contents</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>serr</name> <init>= <expr><call><name>svn_error_quick_wrap</name><argument_list>(<argument><expr><name>err</name></expr></argument>,
                                               <argument><expr>"Can't write to activity db"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <comment type="block">/* Try to remove the tmp file, but we already have an error... */</comment>
      <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name>svn_io_file_close</name><argument_list>(<argument><expr><name>activity_file</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name>svn_io_remove_file</name><argument_list>(<argument><expr><name>tmp_path</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><name>serr</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
                                  <argument><expr>"could not write files."</expr></argument>,
                                  <argument><expr><name><name>repos</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

  <expr_stmt><expr><name>err</name> = <call><name>svn_io_file_close</name><argument_list>(<argument><expr><name>activity_file</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name>svn_io_remove_file</name><argument_list>(<argument><expr><name>tmp_path</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
                                  <argument><expr>"could not close files."</expr></argument>,
                                  <argument><expr><name><name>repos</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

  <expr_stmt><expr><name>err</name> = <call><name>svn_io_file_rename</name><argument_list>(<argument><expr><name>tmp_path</name></expr></argument>, <argument><expr><name>final_path</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name>svn_io_remove_file</name><argument_list>(<argument><expr><name>tmp_path</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
                                  <argument><expr>"could not replace files."</expr></argument>,
                                  <argument><expr><name><name>repos</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

  <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>


<function><type><name>dav_error</name> *</type>
<name>dav_svn__create_activity</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_svn_repos</name> *</type><name>repos</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>ptxn_name</name></decl></param>,
                         <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>svn_error_t</name> *</type><name>serr</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>serr</name> = <call><name>svn_fs_youngest_rev</name><argument_list>(<argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>serr</name> != <name>NULL</name></expr>)</condition><then>
    <block>{
      <return>return <expr><call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><name>serr</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
                                  <argument><expr>"could not determine youngest revision"</expr></argument>,
                                  <argument><expr><name><name>repos</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

  <expr_stmt><expr><name>serr</name> = <call><name>svn_repos_fs_begin_txn_for_commit</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>repos</name></name></expr></argument>, <argument><expr><name>rev</name></expr></argument>,
                                           <argument><expr><name><name>repos</name>-&gt;<name>username</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                           <argument><expr><name><name>repos</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>serr</name> != <name>NULL</name></expr>)</condition><then>
    <block>{
      <return>return <expr><call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><name>serr</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
                                  <argument><expr>"could not begin a transaction"</expr></argument>,
                                  <argument><expr><name><name>repos</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

  <expr_stmt><expr><name>serr</name> = <call><name>svn_fs_txn_name</name><argument_list>(<argument><expr><name>ptxn_name</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>serr</name> != <name>NULL</name></expr>)</condition><then>
    <block>{
      <return>return <expr><call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><name>serr</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
                                  <argument><expr>"could not fetch transaction name"</expr></argument>,
                                  <argument><expr><name><name>repos</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

  <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
</unit>
