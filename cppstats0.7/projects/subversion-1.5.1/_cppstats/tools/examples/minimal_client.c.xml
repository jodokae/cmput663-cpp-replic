<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="tools/examples/minimal_client.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_cmdline.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_fs.h"</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>prompt_and_read_line</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prompt</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>buffer</name></decl></param>,
<param><decl><type><name>size_t</name></type> <name>max</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"%s: "</expr></argument>, <argument><expr><name>prompt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"error reading stdin"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>len</name> &gt; 0 &amp;&amp; <name><name>buffer</name><index>[<expr><name>len</name>-1</expr>]</index></name> == '\n'</expr>)</condition><then>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>len</name>-1</expr>]</index></name> = 0</expr>;</expr_stmt></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>my_simple_prompt_callback</name> <parameter_list>(<param><decl><type><name>svn_auth_cred_simple_t</name> **</type><name>cred</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>username</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>may_save</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_auth_cred_simple_t</name> *</type><name>ret</name> <init>= <expr><call><name>apr_pcalloc</name> <argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>*<name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>answerbuf</name><index>[<expr>100</expr>]</index></name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>realm</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr>"Authentication realm: %s\n"</expr></argument>, <argument><expr><name>realm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>username</name></expr>)</condition><then>
<expr_stmt><expr><name><name>ret</name>-&gt;<name>username</name></name> = <call><name>apr_pstrdup</name> <argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><call><name>SVN_ERR</name> <argument_list>(<argument><expr><call><name>prompt_and_read_line</name><argument_list>(<argument><expr>"Username"</expr></argument>, <argument><expr><name>answerbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>answerbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name>-&gt;<name>username</name></name> = <call><name>apr_pstrdup</name> <argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>answerbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name> <argument_list>(<argument><expr><call><name>prompt_and_read_line</name><argument_list>(<argument><expr>"Password"</expr></argument>, <argument><expr><name>answerbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>answerbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name>-&gt;<name>password</name></name> = <call><name>apr_pstrdup</name> <argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>answerbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>cred</name> = <name>ret</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>my_username_prompt_callback</name> <parameter_list>(<param><decl><type><name>svn_auth_cred_username_t</name> **</type><name>cred</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>may_save</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_auth_cred_username_t</name> *</type><name>ret</name> <init>= <expr><call><name>apr_pcalloc</name> <argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr>*<name>ret</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>answerbuf</name><index>[<expr>100</expr>]</index></name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>realm</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr>"Authentication realm: %s\n"</expr></argument>, <argument><expr><name>realm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name> <argument_list>(<argument><expr><call><name>prompt_and_read_line</name><argument_list>(<argument><expr>"Username"</expr></argument>, <argument><expr><name>answerbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>answerbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name>-&gt;<name>username</name></name> = <call><name>apr_pstrdup</name> <argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>answerbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>cred</name> = <name>ret</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>main</name> <parameter_list>(<param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>argv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_opt_revision_t</name></type> <name>revision</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>dirents</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>URL</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>argc</name> &lt;= 1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr>"Usage: %s URL\n"</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
}</block></then> <else>else
<expr_stmt><expr><name>URL</name> = <name><name>argv</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><call><name>svn_cmdline_init</name> <argument_list>(<argument><expr>"minimal_client"</expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call> != <name>EXIT_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>EXIT_FAILURE</name></expr>;</return></then></if>
<expr_stmt><expr><name>pool</name> = <call><name>svn_pool_create</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_fs_initialize</name> <argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_handle_error2</name> <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr>"minimal_client: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>err</name> = <call><name>svn_config_ensure</name> <argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_handle_error2</name> <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr>"minimal_client: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
}</block></then></if>
<block>{
<if>if <condition>(<expr>(<name>err</name> = <call><name>svn_client_create_context</name> <argument_list>(<argument><expr>&amp;<name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_handle_error2</name> <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr>"minimal_client: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>err</name> = <call><name>svn_config_get_config</name> <argument_list>(<argument><expr>&amp;(<name><name>ctx</name>-&gt;<name>config</name></name>)</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_handle_error2</name> <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr>"minimal_client: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>getenv</name> <argument_list>(<argument><expr>"SVN_ASP_DOT_NET_HACK"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>svn_wc_set_adm_dir</name> <argument_list>(<argument><expr>"_svn"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_handle_error2</name> <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr>"minimal_client: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<decl_stmt><decl><type><name>svn_auth_provider_object_t</name> *</type><name>provider</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>providers</name>
<init>= <expr><call><name>apr_array_make</name> <argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>svn_auth_provider_object_t</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_auth_get_simple_prompt_provider</name> <argument_list>(<argument><expr>&amp;<name>provider</name></expr></argument>,
<argument><expr><name>my_simple_prompt_callback</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr>2</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name> <argument_list>(<argument><expr><name>providers</name></expr></argument>, <argument><expr><name>svn_auth_provider_object_t</name> *</expr></argument>)</argument_list></call> = <name>provider</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_auth_get_username_prompt_provider</name> <argument_list>(<argument><expr>&amp;<name>provider</name></expr></argument>,
<argument><expr><name>my_username_prompt_callback</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr>2</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name> <argument_list>(<argument><expr><name>providers</name></expr></argument>, <argument><expr><name>svn_auth_provider_object_t</name> *</expr></argument>)</argument_list></call> = <name>provider</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_auth_open</name> <argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>auth_baton</name></name></expr></argument>, <argument><expr><name>providers</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
}</block>
<expr_stmt><expr><name><name>revision</name>.<name>kind</name></name> = <name>svn_opt_revision_head</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_client_ls</name> <argument_list>(<argument><expr>&amp;<name>dirents</name></expr></argument>,
<argument><expr><name>URL</name></expr></argument>, <argument><expr>&amp;<name>revision</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_handle_error2</name> <argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr>"minimal_client: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name> <argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>dirents</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name> <argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>entryname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_dirent_t</name> *</type><name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name> <argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>(<name>void</name> *) &amp;<name>entryname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>(<name>void</name> *) &amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr>" %s\n"</expr></argument>, <argument><expr><name>entryname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>EXIT_SUCCESS</name></expr>;</return>
}</block></function>
</unit>
