<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="contrib/client-side/svnmucc/svnmucc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_cmdline.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_ra.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_error</name><parameter_list>(<param><decl><type><name>svn_error_t</name> *</type><name>err</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_handle_error2</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr>"svnmucc: "</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>pool</name></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_pool_t</name> *</type>
<name>init</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>application</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_allocator_t</name> *</type><name>allocator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_version_checklist_t</name></type> <name><name>checklist</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"svn_client"</expr>, <expr><name>svn_client_version</name></expr>}</block></expr>,
<expr><block>{<expr>"svn_subr"</expr>, <expr><name>svn_subr_version</name></expr>}</block></expr>,
<expr><block>{<expr>"svn_ra"</expr>, <expr><name>svn_ra_version</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_VERSION_DEFINE</name><argument_list>(<argument><expr><name>my_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>svn_cmdline_init</name><argument_list>(<argument><expr><name>application</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call>
|| <call><name>apr_allocator_create</name><argument_list>(<argument><expr>&amp;<name>allocator</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>err</name> = <call><name>svn_ver_check_list</name><argument_list>(<argument><expr>&amp;<name>my_version</name></expr></argument>, <argument><expr><name>checklist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<expr_stmt><expr><call><name>handle_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>apr_allocator_max_free_set</name><argument_list>(<argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>SVN_ALLOCATOR_RECOMMENDED_MAX_FREE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pool</name> = <call><name>svn_pool_create_ex</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_allocator_owner_set</name><argument_list>(<argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>pool</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>open_tmp_file</name><parameter_list>(<param><decl><type><name>apr_file_t</name> **</type><name>fp</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>callback_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>temp_dir</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_temp_dir</name><argument_list>(<argument><expr>&amp;<name>temp_dir</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_io_open_unique_file2</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name>temp_dir</name></expr></argument>, <argument><expr>"svnmucc"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>".tmp"</expr></argument>, <argument><expr><name>svn_io_file_del_on_close</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_ra_callbacks_t</name> *</type>
<name>ra_callbacks</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>username</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>password</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>non_interactive</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_callbacks_t</name> *</type><name>callbacks</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>callbacks</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_cmdline_setup_auth_baton</name><argument_list>(<argument><expr>&amp;<name><name>callbacks</name>-&gt;<name>auth_baton</name></name></expr></argument>, <argument><expr><name>non_interactive</name></expr></argument>,
<argument><expr><name>username</name></expr></argument>, <argument><expr><name>password</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>callbacks</name>-&gt;<name>open_tmp_file</name></name> = <name>open_tmp_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>callbacks</name>-&gt;<name>get_wc_prop</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>callbacks</name>-&gt;<name>set_wc_prop</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>callbacks</name>-&gt;<name>push_wc_prop</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>callbacks</name>-&gt;<name>invalidate_wc_props</name></name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>callbacks</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>commit_callback</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>date</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>author</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"r%ld committed by %s at %s\n"</expr></argument>,
<argument><expr><name>revision</name></expr></argument>, <argument><expr><name>author</name> ? <name>author</name> : "(no author)"</expr></argument>,
<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<typedef>typedef <type><enum>enum <block>{
<decl><name>ACTION_MV</name></decl>,
<decl><name>ACTION_MKDIR</name></decl>,
<decl><name>ACTION_CP</name></decl>,
<decl><name>ACTION_PROPSET</name></decl>,
<decl><name>ACTION_PROPDEL</name></decl>,
<decl><name>ACTION_PUT</name></decl>,
<decl><name>ACTION_RM</name></decl>
}</block></enum></type> <name>action_code_t</name>;</typedef>
<struct>struct <name>operation</name> <block>{
<enum>enum <block>{
<decl><name>OP_OPEN</name></decl>,
<decl><name>OP_DELETE</name></decl>,
<decl><name>OP_ADD</name></decl>,
<decl><name>OP_REPLACE</name></decl>,
<decl><name>OP_PROPSET</name></decl>
}</block> <decl><name>operation</name></decl>;</enum>
<decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>children</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>props</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>baton</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>driver_state</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>editor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name>*</type> <name>err</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>set_props</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>rec</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>driver_state</name> *</type><name>d_state</name> <init>= <expr>(struct <name>driver_state</name>*)<name>rec</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>value_svnstring</name>
<init>= <expr><name>value</name> ? <call><name>svn_string_create</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>d_state</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call> : <name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>d_state</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name></expr>)</condition><then>
<expr_stmt><expr><name><name>d_state</name>-&gt;<name>err</name></name> = <call><name><name>d_state</name>-&gt;<name>editor</name>-&gt;<name>change_dir_prop</name></name><argument_list>(<argument><expr><name><name>d_state</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>,
<argument><expr><name>value_svnstring</name></expr></argument>,
<argument><expr><name><name>d_state</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>d_state</name>-&gt;<name>err</name></name> = <call><name><name>d_state</name>-&gt;<name>editor</name>-&gt;<name>change_file_prop</name></name><argument_list>(<argument><expr><name><name>d_state</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>,
<argument><expr><name>value_svnstring</name></expr></argument>,
<argument><expr><name><name>d_state</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name><name>d_state</name>-&gt;<name>err</name></name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>drive</name><parameter_list>(<param><decl><type>struct <name>operation</name> *</type><name>operation</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>head</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>editor</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>driver_state</name></type> <name>state</name></decl>;</decl_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>operation</name>-&gt;<name>children</name></name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>operation</name> *</type><name>child</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>file_baton</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>child</name> = <name>val</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>child</name>-&gt;<name>operation</name></name> == <name>OP_DELETE</name> || <name><name>child</name>-&gt;<name>operation</name></name> == <name>OP_REPLACE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>editor</name>-&gt;<name>delete_entry</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>head</name></expr></argument>, <argument><expr><name><name>operation</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>child</name>-&gt;<name>operation</name></name> == <name>OP_OPEN</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>child</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>editor</name>-&gt;<name>open_directory</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>operation</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name>head</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>, <argument><expr>&amp;<name><name>child</name>-&gt;<name>baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>editor</name>-&gt;<name>open_file</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>operation</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name>head</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>, <argument><expr>&amp;<name>file_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>child</name>-&gt;<name>operation</name></name> == <name>OP_ADD</name> || <name><name>child</name>-&gt;<name>operation</name></name> == <name>OP_REPLACE</name>
|| <name><name>child</name>-&gt;<name>operation</name></name> == <name>OP_PROPSET</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>child</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>editor</name>-&gt;<name>add_directory</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>operation</name>-&gt;<name>baton</name></name></expr></argument>,
<argument><expr><name><name>child</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name><name>child</name>-&gt;<name>rev</name></name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>, <argument><expr>&amp;<name><name>child</name>-&gt;<name>baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>editor</name>-&gt;<name>add_file</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>operation</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name><name>child</name>-&gt;<name>url</name></name></expr></argument>,
<argument><expr><name><name>child</name>-&gt;<name>rev</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>, <argument><expr>&amp;<name>file_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<if>if <condition>(<expr>(<name><name>child</name>-&gt;<name>src_file</name></name>) &amp;&amp; (<name>file_baton</name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_txdelta_window_handler_t</name></type> <name>handler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>handler_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>contents</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>editor</name>-&gt;<name>apply_textdelta</name></name><argument_list>(<argument><expr><name>file_baton</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>,
<argument><expr>&amp;<name>handler</name></expr></argument>, <argument><expr>&amp;<name>handler_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_open</name><argument_list>(<argument><expr>&amp;<name>f</name></expr></argument>, <argument><expr><name><name>child</name>-&gt;<name>src_file</name></name></expr></argument>, <argument><expr><name>APR_READ</name></expr></argument>,
<argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>contents</name> = <call><name>svn_stream_from_aprfile</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_txdelta_send_stream</name><argument_list>(<argument><expr><name>contents</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>,
<argument><expr><name>handler_baton</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_close</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>file_baton</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name><name>child</name>-&gt;<name>kind</name></name> == <name>svn_node_file</name>)
&amp;&amp; (! <call><name>apr_is_empty_table</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>props</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>state</name>.<name>baton</name></name> = <name>file_baton</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>.<name>pool</name></name> = <name>subpool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>.<name>editor</name></name> = <name>editor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>.<name>kind</name></name> = <name><name>child</name>-&gt;<name>kind</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>! <call><name>apr_table_do</name><argument_list>(<argument><expr><name>set_props</name></expr></argument>, <argument><expr>&amp;<name>state</name></expr></argument>, <argument><expr><name><name>child</name>-&gt;<name>props</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><name><name>state</name>.<name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>editor</name>-&gt;<name>close_file</name></name><argument_list>(<argument><expr><name>file_baton</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name><name>child</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name>)
&amp;&amp; (<name><name>child</name>-&gt;<name>operation</name></name> == <name>OP_OPEN</name>
|| <name><name>child</name>-&gt;<name>operation</name></name> == <name>OP_ADD</name>
|| <name><name>child</name>-&gt;<name>operation</name></name> == <name>OP_REPLACE</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>drive</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>head</name></expr></argument>, <argument><expr><name>editor</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name><name>child</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name>)
&amp;&amp; (! <call><name>apr_is_empty_table</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>props</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>state</name>.<name>baton</name></name> = <name><name>child</name>-&gt;<name>baton</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>.<name>pool</name></name> = <name>subpool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>.<name>editor</name></name> = <name>editor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>.<name>kind</name></name> = <name><name>child</name>-&gt;<name>kind</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>! <call><name>apr_table_do</name><argument_list>(<argument><expr><name>set_props</name></expr></argument>, <argument><expr>&amp;<name>state</name></expr></argument>, <argument><expr><name><name>child</name>-&gt;<name>props</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><name><name>state</name>.<name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>editor</name>-&gt;<name>close_directory</name></name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> struct <name>operation</name> *</type>
<name>get_operation</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type>struct <name>operation</name> *</type><name>operation</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>operation</name> *</type><name>child</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>operation</name>-&gt;<name>children</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>! <name>child</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>child</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>child</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name>-&gt;<name>children</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name>-&gt;<name>operation</name></name> = <name>OP_OPEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name>-&gt;<name>rev</name></name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name>-&gt;<name>kind</name></name> = <name>svn_node_dir</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child</name>-&gt;<name>props</name></name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>operation</name>-&gt;<name>children</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>child</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>subtract_anchor</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>anchor</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>! <call><name>strcmp</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>""</expr>;</return></then>
<else>else
<return>return <expr><call><name>svn_path_uri_decode</name><argument_list>(<argument><expr><call><name>svn_path_is_child</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>build</name><parameter_list>(<param><decl><type><name>action_code_t</name></type> <name>action</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prop_name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prop_value</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_file</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>head</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>anchor</name></decl></param>,
<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
<param><decl><type>struct <name>operation</name> *</type><name>operation</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>path_bits</name> <init>= <expr><call><name>svn_path_decompose</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path_so_far</name> <init>= <expr>""</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copy_src</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>copy_rev</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>path_bits</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path_bit</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>path_bits</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>path_so_far</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>path_so_far</name></expr></argument>, <argument><expr><name>path_bit</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>operation</name> = <call><name>get_operation</name><argument_list>(<argument><expr><name>path_so_far</name></expr></argument>, <argument><expr><name>operation</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>operation</name>-&gt;<name>url</name></name>
&amp;&amp; <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name><name>operation</name>-&gt;<name>rev</name></name></expr></argument>)</argument_list></call>
&amp;&amp; (<name><name>operation</name>-&gt;<name>operation</name></name> == <name>OP_REPLACE</name>
|| <name><name>operation</name>-&gt;<name>operation</name></name> == <name>OP_ADD</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>copy_src</name> = <call><name>subtract_anchor</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>, <argument><expr><name><name>operation</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>copy_rev</name> = <name><name>operation</name>-&gt;<name>rev</name></name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>copy_src</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>copy_src</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>copy_src</name></expr></argument>, <argument><expr><name>path_bit</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
}</block></for>
<if>if <condition>(<expr><name>prop_name</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>operation</name>-&gt;<name>operation</name></name> == <name>OP_DELETE</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_BAD_URL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"cannot set properties on a location being"
" deleted ('%s')"</expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_check_path</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
<argument><expr><name>copy_src</name> ? <name>copy_src</name> : <name>path</name></expr></argument>,
<argument><expr><name>copy_src</name> ? <name>copy_rev</name> : <name>head</name></expr></argument>,
<argument><expr>&amp;<name><name>operation</name>-&gt;<name>kind</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>operation</name>-&gt;<name>kind</name></name> == <name>svn_node_none</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_BAD_URL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"propset: '%s' not found"</expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else <if>if <condition>(<expr>(<name><name>operation</name>-&gt;<name>kind</name></name> == <name>svn_node_file</name>)
&amp;&amp; (<name><name>operation</name>-&gt;<name>operation</name></name> == <name>OP_OPEN</name>)</expr>)</condition><then>
<expr_stmt><expr><name><name>operation</name>-&gt;<name>operation</name></name> = <name>OP_PROPSET</name></expr>;</expr_stmt></then></if></else></if>
<expr_stmt><expr><call><name>apr_table_set</name><argument_list>(<argument><expr><name><name>operation</name>-&gt;<name>props</name></name></expr></argument>, <argument><expr><name>prop_name</name></expr></argument>, <argument><expr><name>prop_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>operation</name>-&gt;<name>rev</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>operation</name>-&gt;<name>rev</name></name> = <name>rev</name></expr>;</expr_stmt></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>operation</name>-&gt;<name>operation</name></name> != <name>OP_OPEN</name>
&amp;&amp; <name><name>operation</name>-&gt;<name>operation</name></name> != <name>OP_PROPSET</name>
&amp;&amp; <name><name>operation</name>-&gt;<name>operation</name></name> != <name>OP_DELETE</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_BAD_URL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"unsupported multiple operations on '%s'"</expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>action</name> == <name>ACTION_RM</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>operation</name>-&gt;<name>operation</name></name> = <name>OP_DELETE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_check_path</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
<argument><expr><name>copy_src</name> ? <name>copy_src</name> : <name>path</name></expr></argument>,
<argument><expr><name>copy_src</name> ? <name>copy_rev</name> : <name>head</name></expr></argument>,
<argument><expr>&amp;<name><name>operation</name>-&gt;<name>kind</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>operation</name>-&gt;<name>kind</name></name> == <name>svn_node_none</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>copy_src</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>copy_src</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_BAD_URL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"'%s' (from '%s:%ld') not found"</expr></argument>,
<argument><expr><name>path</name></expr></argument>, <argument><expr><name>copy_src</name></expr></argument>, <argument><expr><name>copy_rev</name></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_BAD_URL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"'%s' not found"</expr></argument>,
<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></then></if>
}</block></then>
<else>else <if>if <condition>(<expr><name>action</name> == <name>ACTION_CP</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>rev</name> &gt; <name>head</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CL_ARG_PARSING_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"Copy source revision cannot be younger "
"than base revision"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name><name>operation</name>-&gt;<name>operation</name></name> =
<name><name>operation</name>-&gt;<name>operation</name></name> == <name>OP_DELETE</name> ? <name>OP_REPLACE</name> : <name>OP_ADD</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_check_path</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name>subtract_anchor</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>rev</name></expr></argument>, <argument><expr>&amp;<name><name>operation</name>-&gt;<name>kind</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>operation</name>-&gt;<name>kind</name></name> == <name>svn_node_none</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_BAD_URL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"'%s' not found"</expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name><name>operation</name>-&gt;<name>url</name></name> = <name>url</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>operation</name>-&gt;<name>rev</name></name> = <name>rev</name></expr>;</expr_stmt>
}</block></then>
<else>else <if>if <condition>(<expr><name>action</name> == <name>ACTION_MKDIR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>operation</name>-&gt;<name>operation</name></name> =
<name><name>operation</name>-&gt;<name>operation</name></name> == <name>OP_DELETE</name> ? <name>OP_REPLACE</name> : <name>OP_ADD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>operation</name>-&gt;<name>kind</name></name> = <name>svn_node_dir</name></expr>;</expr_stmt>
}</block></then>
<else>else <if>if <condition>(<expr><name>action</name> == <name>ACTION_PUT</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>operation</name>-&gt;<name>operation</name></name> == <name>OP_DELETE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>operation</name>-&gt;<name>operation</name></name> = <name>OP_REPLACE</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_check_path</name><argument_list>(<argument><expr><name>session</name></expr></argument>,
<argument><expr><name>copy_src</name> ? <name>copy_src</name> : <name>path</name></expr></argument>,
<argument><expr><name>copy_src</name> ? <name>copy_rev</name> : <name>head</name></expr></argument>,
<argument><expr>&amp;<name><name>operation</name>-&gt;<name>kind</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>operation</name>-&gt;<name>kind</name></name> == <name>svn_node_file</name></expr>)</condition><then>
<expr_stmt><expr><name><name>operation</name>-&gt;<name>operation</name></name> = <name>OP_OPEN</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>operation</name>-&gt;<name>kind</name></name> == <name>svn_node_none</name></expr>)</condition><then>
<expr_stmt><expr><name><name>operation</name>-&gt;<name>operation</name></name> = <name>OP_ADD</name></expr>;</expr_stmt></then>
<else>else
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_BAD_URL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"'%s' is not a file"</expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return></else></if></else></if>
}</block></else></if>
<expr_stmt><expr><name><name>operation</name>-&gt;<name>kind</name></name> = <name>svn_node_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>operation</name>-&gt;<name>src_file</name></name> = <name>src_file</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if></else></if></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<struct>struct <name>action</name> <block>{
<decl_stmt><decl><type><name>action_code_t</name></type> <name>action</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name><name>path</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prop_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prop_value</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>execute</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>actions</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>anchor</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>message</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>username</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>password</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>config_dir</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>non_interactive</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>head</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>editor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>editor_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>operation</name></type> <name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>config</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_config_get_config</name><argument_list>(<argument><expr>&amp;<name>config</name></expr></argument>, <argument><expr><name>config_dir</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_open</name><argument_list>(<argument><expr>&amp;<name>session</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>,
<argument><expr><call><name>ra_callbacks</name><argument_list>(<argument><expr><name>username</name></expr></argument>, <argument><expr><name>password</name></expr></argument>, <argument><expr><name>non_interactive</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>config</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_latest_revnum</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>&amp;<name>head</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>base_revision</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>base_revision</name> &gt; <name>head</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_FS_NO_SUCH_REVISION</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"No such revision %ld (youngest is %ld)"</expr></argument>,
<argument><expr><name>base_revision</name></expr></argument>, <argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>head</name> = <name>base_revision</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>root</name>.<name>children</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>root</name>.<name>operation</name></name> = <name>OP_OPEN</name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>actions</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type>struct <name>action</name> *</type><name>action</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>actions</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument>struct <expr><name>action</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>action</name>-&gt;<name>action</name></name></expr>)</condition> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path1</name></decl>, *<decl><type ref="prev"/><name>path2</name></decl>;</decl_stmt>
<case>case <expr><name>ACTION_MV</name></expr>:
<expr_stmt><expr><name>path1</name> = <call><name>subtract_anchor</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>, <argument><expr><name><name>action</name>-&gt;<name>path</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>path2</name> = <call><name>subtract_anchor</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>, <argument><expr><name><name>action</name>-&gt;<name>path</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>build</name><argument_list>(<argument><expr><name>ACTION_RM</name></expr></argument>, <argument><expr><name>path1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>head</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>,
<argument><expr><name>session</name></expr></argument>, <argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>build</name><argument_list>(<argument><expr><name>ACTION_CP</name></expr></argument>, <argument><expr><name>path2</name></expr></argument>, <argument><expr><name><name>action</name>-&gt;<name>path</name><index>[<expr>0</expr>]</index></name></expr></argument>,
<argument><expr><name>head</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>head</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>,
<argument><expr><name>session</name></expr></argument>, <argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>ACTION_CP</name></expr>:
<expr_stmt><expr><name>path1</name> = <call><name>subtract_anchor</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>, <argument><expr><name><name>action</name>-&gt;<name>path</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>path2</name> = <call><name>subtract_anchor</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>, <argument><expr><name><name>action</name>-&gt;<name>path</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>action</name>-&gt;<name>rev</name></name> == <name>SVN_INVALID_REVNUM</name></expr>)</condition><then>
<expr_stmt><expr><name><name>action</name>-&gt;<name>rev</name></name> = <name>head</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>build</name><argument_list>(<argument><expr><name>ACTION_CP</name></expr></argument>, <argument><expr><name>path2</name></expr></argument>, <argument><expr><name><name>action</name>-&gt;<name>path</name><index>[<expr>0</expr>]</index></name></expr></argument>,
<argument><expr><name><name>action</name>-&gt;<name>rev</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>head</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>,
<argument><expr><name>session</name></expr></argument>, <argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>ACTION_RM</name></expr>:
<expr_stmt><expr><name>path1</name> = <call><name>subtract_anchor</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>, <argument><expr><name><name>action</name>-&gt;<name>path</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>build</name><argument_list>(<argument><expr><name>ACTION_RM</name></expr></argument>, <argument><expr><name>path1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>head</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>,
<argument><expr><name>session</name></expr></argument>, <argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>ACTION_MKDIR</name></expr>:
<expr_stmt><expr><name>path1</name> = <call><name>subtract_anchor</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>, <argument><expr><name><name>action</name>-&gt;<name>path</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>build</name><argument_list>(<argument><expr><name>ACTION_MKDIR</name></expr></argument>, <argument><expr><name>path1</name></expr></argument>, <argument><expr><name><name>action</name>-&gt;<name>path</name><index>[<expr>0</expr>]</index></name></expr></argument>,
<argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>head</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>,
<argument><expr><name>session</name></expr></argument>, <argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>ACTION_PUT</name></expr>:
<expr_stmt><expr><name>path1</name> = <call><name>subtract_anchor</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>, <argument><expr><name><name>action</name>-&gt;<name>path</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>build</name><argument_list>(<argument><expr><name>ACTION_PUT</name></expr></argument>, <argument><expr><name>path1</name></expr></argument>, <argument><expr><name><name>action</name>-&gt;<name>path</name><index>[<expr>0</expr>]</index></name></expr></argument>,
<argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>action</name>-&gt;<name>path</name><index>[<expr>1</expr>]</index></name></expr></argument>,
<argument><expr><name>head</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>ACTION_PROPSET</name></expr>:
</case><case>case <expr><name>ACTION_PROPDEL</name></expr>:
<expr_stmt><expr><name>path1</name> = <call><name>subtract_anchor</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>, <argument><expr><name><name>action</name>-&gt;<name>path</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>build</name><argument_list>(<argument><expr><name><name>action</name>-&gt;<name>action</name></name></expr></argument>, <argument><expr><name>path1</name></expr></argument>, <argument><expr><name><name>action</name>-&gt;<name>path</name><index>[<expr>0</expr>]</index></name></expr></argument>,
<argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
<argument><expr><name><name>action</name>-&gt;<name>prop_name</name></name></expr></argument>, <argument><expr><name><name>action</name>-&gt;<name>prop_value</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>head</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case>}</block></switch>
}</block></for>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_commit_editor</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>&amp;<name>editor</name></expr></argument>, <argument><expr>&amp;<name>editor_baton</name></expr></argument>, <argument><expr><name>message</name></expr></argument>,
<argument><expr><name>commit_callback</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>editor</name>-&gt;<name>open_root</name></name><argument_list>(<argument><expr><name>editor_baton</name></expr></argument>, <argument><expr><name>head</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>&amp;<name><name>root</name>.<name>baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>drive</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>head</name></expr></argument>, <argument><expr><name>editor</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>err</name></expr>)</condition><then>
<expr_stmt><expr><name>err</name> = <call><name><name>editor</name>-&gt;<name>close_edit</name></name><argument_list>(<argument><expr><name>editor_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name><name>editor</name>-&gt;<name>abort_edit</name></name><argument_list>(<argument><expr><name>editor_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>usage</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>int</name></type> <name>exit_val</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>FILE</name> *</type><name>stream</name> <init>= <expr><name>exit_val</name> == <name>EXIT_SUCCESS</name> ? <name>stdout</name> : <name>stderr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>msg</name><index>[]</index></name> <init>=
<expr>"Multiple URL Command Client (for Subversion)\n"
"\nUsage: svnmucc [OPTION]... [ACTION]...\n"
"\nActions:\n"
" cp REV URL1 URL2 copy URL1@REV to URL2\n"
" mkdir URL create new directory URL\n"
" mv URL1 URL2 move URL1 to URL2\n"
" rm URL delete URL\n"
" put SRC-FILE URL add or modify file URL with contents copied\n"
" from SRC-FILE\n"
" propset NAME VAL URL Set property NAME on URL to value VAL\n"
" propdel NAME URL Delete property NAME from URL\n"
"\nOptions:\n"
" -h, --help display this text\n"
" -m, --message ARG use ARG as a log message\n"
" -F, --file ARG read log message from file ARG\n"
" -u, --username ARG commit the changes as username ARG\n"
" -p, --password ARG use ARG as the password\n"
" -U, --root-url ARG interpret all action URLs are relative to ARG\n"
" -r, --revision ARG use revision ARG as baseline for changes\n"
" -n, --non-interactive don't prompt the user about anything\n"
" -X, --extra-args ARG append arguments from file ARG (one per line;\n"
" use \"-\" to read from standard input)\n"
" --config-dir ARG use ARG to override the config directory\n"</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name>svn_cmdline_fputs</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>exit_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>insufficient</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>handle_error</name><argument_list>(<argument><expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_INCORRECT_PARAMS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"insufficient arguments"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type>
<name>main</name><parameter_list>(<param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>argv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name> <init>= <expr><call><name>init</name><argument_list>(<argument><expr>"svnmucc"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>actions</name> <init>= <expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>action</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>anchor</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_getopt_t</name> *</type><name>getopt</name></decl>;</decl_stmt>
<enum>enum <block>{
<decl><name>config_dir_opt</name> <init>= <expr><name>SVN_OPT_FIRST_LONGOPT_ID</name></expr></init></decl>
}</block>;</enum>
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_getopt_option_t</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"message"</expr>, <expr>'m'</expr>, <expr>1</expr>, <expr>""</expr>}</block></expr>,
<expr><block>{<expr>"file"</expr>, <expr>'F'</expr>, <expr>1</expr>, <expr>""</expr>}</block></expr>,
<expr><block>{<expr>"username"</expr>, <expr>'u'</expr>, <expr>1</expr>, <expr>""</expr>}</block></expr>,
<expr><block>{<expr>"password"</expr>, <expr>'p'</expr>, <expr>1</expr>, <expr>""</expr>}</block></expr>,
<expr><block>{<expr>"root-url"</expr>, <expr>'U'</expr>, <expr>1</expr>, <expr>""</expr>}</block></expr>,
<expr><block>{<expr>"revision"</expr>, <expr>'r'</expr>, <expr>1</expr>, <expr>""</expr>}</block></expr>,
<expr><block>{<expr>"extra-args"</expr>, <expr>'X'</expr>, <expr>1</expr>, <expr>""</expr>}</block></expr>,
<expr><block>{<expr>"help"</expr>, <expr>'h'</expr>, <expr>0</expr>, <expr>""</expr>}</block></expr>,
<expr><block>{<expr>"non-interactive"</expr>, <expr>'n'</expr>, <expr>0</expr>, <expr>""</expr>}</block></expr>,
<expr><block>{<expr>"config-dir"</expr>, <expr><name>config_dir_opt</name></expr>, <expr>1</expr>, <expr>""</expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr>0</expr>, <expr>0</expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>message</name> <init>= <expr>"committed using svnmucc"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>username</name> <init>= <expr><name>NULL</name></expr></init>, *<name>password</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>root_url</name> <init>= <expr><name>NULL</name></expr></init>, *<name>extra_args_file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>config_dir</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>non_interactive</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>action_args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_getopt_init</name><argument_list>(<argument><expr>&amp;<name>getopt</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>getopt</name>-&gt;<name>interleave</name></name> = 1</expr>;</expr_stmt>
<while>while <condition>(<expr>1</expr>)</condition> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>opt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><call><name>apr_getopt_long</name><argument_list>(<argument><expr><name>getopt</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr>&amp;<name>opt</name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_EOF</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<break>break;</break></then></if>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<expr_stmt><expr><call><name>handle_error</name><argument_list>(<argument><expr><call><name>svn_error_wrap_apr</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr>"getopt failure"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<switch>switch<condition>(<expr><name>opt</name></expr>)</condition> <block>{
<case>case <expr>'m'</expr>:
<expr_stmt><expr><name>err</name> = <call><name>svn_utf_cstring_to_utf8</name><argument_list>(<argument><expr>&amp;<name>message</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<expr_stmt><expr><call><name>handle_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<break>break;</break>
</case><case>case <expr>'F'</expr>: <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg_utf8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>contents</name></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_utf_cstring_to_utf8</name><argument_list>(<argument><expr>&amp;<name>arg_utf8</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>err</name></expr>)</condition><then>
<expr_stmt><expr><name>err</name> = <call><name>svn_stringbuf_from_file</name><argument_list>(<argument><expr>&amp;<name>contents</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>! <name>err</name></expr>)</condition><then>
<expr_stmt><expr><name>err</name> = <call><name>svn_utf_cstring_to_utf8</name><argument_list>(<argument><expr>&amp;<name>message</name></expr></argument>, <argument><expr><name><name>contents</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<expr_stmt><expr><call><name>handle_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block>
<break>break;</break>
</case><case>case <expr>'u'</expr>:
<expr_stmt><expr><name>username</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'p'</expr>:
<expr_stmt><expr><name>password</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'U'</expr>:
<expr_stmt><expr><name>err</name> = <call><name>svn_utf_cstring_to_utf8</name><argument_list>(<argument><expr>&amp;<name>root_url</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<expr_stmt><expr><call><name>handle_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>root_url</name> = <call><name>svn_path_canonicalize</name><argument_list>(<argument><expr><name>root_url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <call><name>svn_path_is_url</name><argument_list>(<argument><expr><name>root_url</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>handle_error</name><argument_list>(<argument><expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_INCORRECT_PARAMS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"'%s' is not a URL\n"</expr></argument>, <argument><expr><name>root_url</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<break>break;</break>
</case><case>case <expr>'r'</expr>: <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>digits_end</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>base_revision</name> = <call><name>strtol</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>&amp;<name>digits_end</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(! <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>base_revision</name></expr></argument>)</argument_list></call>)
|| (! <name>digits_end</name>)
|| *<name>digits_end</name></expr>)</condition><then>
<expr_stmt><expr><call><name>handle_error</name><argument_list>(<argument><expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CL_ARG_PARSING_ERROR</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr>"Invalid revision number"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block>
<break>break;</break>
</case><case>case <expr>'X'</expr>:
<expr_stmt><expr><name>extra_args_file</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'n'</expr>:
<expr_stmt><expr><name>non_interactive</name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>config_dir_opt</name></expr>:
<expr_stmt><expr><name>err</name> = <call><name>svn_utf_cstring_to_utf8</name><argument_list>(<argument><expr>&amp;<name>config_dir</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<expr_stmt><expr><call><name>handle_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<break>break;</break>
</case><case>case <expr>'h'</expr>:
<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>EXIT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</case>}</block></switch>
}</block></while>
<expr_stmt><expr><name>action_args</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>getopt</name>-&gt;<name>argc</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>getopt</name>-&gt;<name>ind</name></name> &lt; <name><name>getopt</name>-&gt;<name>argc</name></name></expr>)</condition> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name> <init>= <expr><name><name>getopt</name>-&gt;<name>argv</name><index>[<expr><name><name>getopt</name>-&gt;<name>ind</name></name>++</expr>]</index></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>svn_utf_cstring_to_utf8</name><argument_list>(<argument><expr>&amp;(<call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>action_args</name></expr></argument>,
<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call>)</expr></argument>,
<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<expr_stmt><expr><call><name>handle_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></while>
<if>if <condition>(<expr><name>extra_args_file</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>extra_args_file_utf8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>contents</name></decl>, *<decl><type ref="prev"/><name>contents_utf8</name></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_utf_cstring_to_utf8</name><argument_list>(<argument><expr>&amp;<name>extra_args_file_utf8</name></expr></argument>,
<argument><expr><name>extra_args_file</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>err</name></expr>)</condition><then>
<expr_stmt><expr><name>err</name> = <call><name>svn_stringbuf_from_file2</name><argument_list>(<argument><expr>&amp;<name>contents</name></expr></argument>, <argument><expr><name>extra_args_file_utf8</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>! <name>err</name></expr>)</condition><then>
<expr_stmt><expr><name>err</name> = <call><name>svn_utf_stringbuf_to_utf8</name><argument_list>(<argument><expr>&amp;<name>contents_utf8</name></expr></argument>, <argument><expr><name>contents</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<expr_stmt><expr><call><name>handle_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>svn_cstring_split_append</name><argument_list>(<argument><expr><name>action_args</name></expr></argument>, <argument><expr><name><name>contents_utf8</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr>"\n\r"</expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>action_args</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr/>) <block>{
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>num_url_args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>action_string</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>action_args</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>action</name> *</type><name>action</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>action</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>! <call><name>strcmp</name><argument_list>(<argument><expr><name>action_string</name></expr></argument>, <argument><expr>"mv"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>action</name>-&gt;<name>action</name></name> = <name>ACTION_MV</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>! <call><name>strcmp</name><argument_list>(<argument><expr><name>action_string</name></expr></argument>, <argument><expr>"cp"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>action</name>-&gt;<name>action</name></name> = <name>ACTION_CP</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>! <call><name>strcmp</name><argument_list>(<argument><expr><name>action_string</name></expr></argument>, <argument><expr>"mkdir"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>action</name>-&gt;<name>action</name></name> = <name>ACTION_MKDIR</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>! <call><name>strcmp</name><argument_list>(<argument><expr><name>action_string</name></expr></argument>, <argument><expr>"rm"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>action</name>-&gt;<name>action</name></name> = <name>ACTION_RM</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>! <call><name>strcmp</name><argument_list>(<argument><expr><name>action_string</name></expr></argument>, <argument><expr>"put"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>action</name>-&gt;<name>action</name></name> = <name>ACTION_PUT</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>! <call><name>strcmp</name><argument_list>(<argument><expr><name>action_string</name></expr></argument>, <argument><expr>"propset"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>action</name>-&gt;<name>action</name></name> = <name>ACTION_PROPSET</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>! <call><name>strcmp</name><argument_list>(<argument><expr><name>action_string</name></expr></argument>, <argument><expr>"propdel"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>action</name>-&gt;<name>action</name></name> = <name>ACTION_PROPDEL</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>handle_error</name><argument_list>(<argument><expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_INCORRECT_PARAMS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"'%s' is not an action\n"</expr></argument>,
<argument><expr><name>action_string</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
<if>if <condition>(<expr>++<name>i</name> == <name><name>action_args</name>-&gt;<name>nelts</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>insufficient</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>action</name>-&gt;<name>action</name></name> == <name>ACTION_CP</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rev_str</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>action_args</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>rev_str</name></expr></argument>, <argument><expr>"head"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name><name>action</name>-&gt;<name>rev</name></name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>rev_str</name></expr></argument>, <argument><expr>"HEAD"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name><name>action</name>-&gt;<name>rev</name></name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt></then>
<else>else <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>end</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>action</name>-&gt;<name>rev</name></name> = <call><name>strtol</name><argument_list>(<argument><expr><name>rev_str</name></expr></argument>, <argument><expr>&amp;<name>end</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>end</name></expr>)</condition><then>
<expr_stmt><expr><call><name>handle_error</name><argument_list>(<argument><expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_INCORRECT_PARAMS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"'%s' is not a revision\n"</expr></argument>,
<argument><expr><name>rev_str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></else></if></else></if>
<if>if <condition>(<expr>++<name>i</name> == <name><name>action_args</name>-&gt;<name>nelts</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>insufficient</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>action</name>-&gt;<name>rev</name></name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>action</name>-&gt;<name>action</name></name> == <name>ACTION_PUT</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>action</name>-&gt;<name>path</name><index>[<expr>1</expr>]</index></name> = <call><name>svn_path_canonicalize</name><argument_list>(<argument><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>action_args</name></expr></argument>,
<argument><expr><name>i</name></expr></argument>,
<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>++<name>i</name> == <name><name>action_args</name>-&gt;<name>nelts</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>insufficient</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
<if>if <condition>(<expr>(<name><name>action</name>-&gt;<name>action</name></name> == <name>ACTION_PROPSET</name>)
|| (<name><name>action</name>-&gt;<name>action</name></name> == <name>ACTION_PROPDEL</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>action</name>-&gt;<name>prop_name</name></name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>action_args</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>++<name>i</name> == <name><name>action_args</name>-&gt;<name>nelts</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>insufficient</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>action</name>-&gt;<name>action</name></name> == <name>ACTION_PROPDEL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>action</name>-&gt;<name>prop_value</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>action</name>-&gt;<name>prop_value</name></name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>action_args</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>++<name>i</name> == <name><name>action_args</name>-&gt;<name>nelts</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>insufficient</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></else></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>action</name>-&gt;<name>action</name></name> == <name>ACTION_RM</name>
|| <name><name>action</name>-&gt;<name>action</name></name> == <name>ACTION_MKDIR</name>
|| <name><name>action</name>-&gt;<name>action</name></name> == <name>ACTION_PUT</name>
|| <name><name>action</name>-&gt;<name>action</name></name> == <name>ACTION_PROPSET</name>
|| <name><name>action</name>-&gt;<name>action</name></name> == <name>ACTION_PROPDEL</name></expr>)</condition><then>
<expr_stmt><expr><name>num_url_args</name> = 1</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>num_url_args</name> = 2</expr>;</expr_stmt></else></if>
<for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name>num_url_args</name></expr>;</condition> <incr><expr>++<name>j</name></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>action_args</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>root_url</name></expr>)</condition><then>
<expr_stmt><expr><name>url</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>root_url</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>! <call><name>svn_path_is_url</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>handle_error</name><argument_list>(<argument><expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_INCORRECT_PARAMS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"'%s' is not a URL\n"</expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></else></if>
<expr_stmt><expr><name>url</name> = <call><name>svn_path_uri_from_iri</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>url</name> = <call><name>svn_path_uri_autoescape</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>url</name> = <call><name>svn_path_canonicalize</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>action</name>-&gt;<name>path</name><index>[<expr><name>j</name></expr>]</index></name> = <name>url</name></expr>;</expr_stmt>
<if>if <condition>(<expr>! (<name><name>action</name>-&gt;<name>action</name></name> == <name>ACTION_CP</name> &amp;&amp; <name>j</name> == 0)</expr>)</condition><then>
<expr_stmt><expr><name>url</name> = <call><name>svn_path_dirname</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>! <name>anchor</name></expr>)</condition><then>
<expr_stmt><expr><name>anchor</name> = <name>url</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>anchor</name> = <call><name>svn_path_get_longest_ancestor</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr>(++<name>i</name> == <name><name>action_args</name>-&gt;<name>nelts</name></name>) &amp;&amp; (<name>j</name> &gt;= <name>num_url_args</name>)</expr>)</condition><then>
<expr_stmt><expr><call><name>insufficient</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></for>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>actions</name></expr></argument>, <argument>struct <expr><name>action</name> *</expr></argument>)</argument_list></call> = <name>action</name></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr>! <name><name>actions</name>-&gt;<name>nelts</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>(<name>err</name> = <call><name>execute</name><argument_list>(<argument><expr><name>actions</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>username</name></expr></argument>, <argument><expr><name>password</name></expr></argument>,
<argument><expr><name>config_dir</name></expr></argument>, <argument><expr><name>non_interactive</name></expr></argument>, <argument><expr><name>base_revision</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<expr_stmt><expr><call><name>handle_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>EXIT_SUCCESS</name></expr>;</return>
}</block></function>
</unit>
