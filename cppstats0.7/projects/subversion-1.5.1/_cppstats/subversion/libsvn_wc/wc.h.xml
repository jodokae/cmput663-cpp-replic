<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/libsvn_wc/wc.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SVN_LIBSVN_WC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_LIBSVN_WC_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_hash.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_wc.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__TMP_EXT</name></cpp:macro> <cpp:value>".tmp"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__PROP_REJ_EXT</name></cpp:macro> <cpp:value>".prej"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__BASE_EXT</name></cpp:macro> <cpp:value>".svn-base"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__WORK_EXT</name></cpp:macro> <cpp:value>".svn-work"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__REVERT_EXT</name></cpp:macro> <cpp:value>".svn-revert"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__VERSION</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__NO_PROPCACHING_VERSION</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__XML_ENTRIES_VERSION</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__WCPROPS_MANY_FILES_VERSION</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<struct>struct <name>svn_wc_traversal_info_t</name> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>externals_old</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>externals_new</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>depths</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__TIMESTAMP_WC</name></cpp:macro> <cpp:value>"working"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__WORKING_SIZE_WC</name></cpp:macro> <cpp:value>"working"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ADM_FORMAT</name></cpp:macro> <cpp:value>"format"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ADM_ENTRIES</name></cpp:macro> <cpp:value>"entries"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ADM_LOCK</name></cpp:macro> <cpp:value>"lock"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ADM_TMP</name></cpp:macro> <cpp:value>"tmp"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ADM_TEXT_BASE</name></cpp:macro> <cpp:value>"text-base"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ADM_PROPS</name></cpp:macro> <cpp:value>"props"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ADM_PROP_BASE</name></cpp:macro> <cpp:value>"prop-base"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ADM_DIR_PROPS</name></cpp:macro> <cpp:value>"dir-props"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ADM_DIR_PROP_BASE</name></cpp:macro> <cpp:value>"dir-prop-base"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ADM_DIR_PROP_REVERT</name></cpp:macro> <cpp:value>"dir-prop-revert"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ADM_WCPROPS</name></cpp:macro> <cpp:value>"wcprops"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ADM_DIR_WCPROPS</name></cpp:macro> <cpp:value>"dir-wcprops"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ADM_ALL_WCPROPS</name></cpp:macro> <cpp:value>"all-wcprops"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ADM_LOG</name></cpp:macro> <cpp:value>"log"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ADM_KILLME</name></cpp:macro> <cpp:value>"KILLME"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ADM_README</name></cpp:macro> <cpp:value>"README.txt"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__ADM_EMPTY_FILE</name></cpp:macro> <cpp:value>"empty-file"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__THIS_DIR_PREJ</name></cpp:macro> <cpp:value>"dir_conflicts"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__KILL_ADM_ONLY</name></cpp:macro> <cpp:value>"adm-only"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__CACHABLE_PROPS</name></cpp:macro> <cpp:value>SVN_PROP_SPECIAL " " SVN_PROP_EXTERNALS " " SVN_PROP_NEEDS_LOCK</cpp:value></cpp:define>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_wc__ensure_directory</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<typedef>typedef <type><struct>struct <name>svn_wc__compat_notify_baton_t</name> <block>{
<decl_stmt><decl><type><name>svn_wc_notify_func_t</name></type> <name>func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>baton</name></decl>;</decl_stmt>
}</block></struct></type> <name>svn_wc__compat_notify_baton_t</name>;</typedef>
<function_decl><type><name>void</name></type> <name>svn_wc__compat_call_notify_func</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_wc_notify_t</name> *</type><name>notify</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc__text_modified_internal_p</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>modified_p</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>force_comparison</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>compare_textbases</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>svn_error_t</name> *</type>
<name>svn_wc__merge_internal</name><argument_list>(<argument><expr><name>svn_stringbuf_t</name> **<name>log_accum</name></expr></argument>,
<argument>enum <expr><name>svn_wc_merge_outcome_t</name> *<name>merge_outcome</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>left</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>right</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>merge_target</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>copyfrom_text</name></expr></argument>,
<argument><expr><name>svn_wc_adm_access_t</name> *<name>adm_access</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>left_label</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>right_label</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>target_label</name></expr></argument>,
<argument><expr><name>svn_boolean_t</name> <name>dry_run</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>diff3_cmd</name></expr></argument>,
<argument><expr>const <name>apr_array_header_t</name> *<name>merge_options</name></expr></argument>,
<argument><expr>const <name>apr_array_header_t</name> *<name>prop_diff</name></expr></argument>,
<argument><expr><name>svn_wc_conflict_resolver_func_t</name> <name>conflict_func</name></expr></argument>,
<argument><expr><name>void</name> *<name>conflict_baton</name></expr></argument>,
<argument><expr><name>apr_pool_t</name> *<name>pool</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc__walker_default_error_handler</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_error_t</name> *</type><name>err</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>walk_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc__ambient_depth_filter_editor</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>wrapped_editor</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>wrapped_edit_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>anchor</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
