<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/libsvn_wc/entries.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_xml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_ctype.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"adm_files.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"adm_ops.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"entries.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_wc_private.h"</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>svn_wc_entry_t</name> *</type>
<name>alloc_entry</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_wc_entry_t</name> *</type><name>entry</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>revision</name></name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>copyfrom_rev</name></name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>cmt_rev</name></name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>kind</name></name> = <name>svn_node_none</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>working_size</name></name> = <name>SVN_WC_ENTRY_WORKING_SIZE_UNKNOWN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>depth</name></name> = <name>svn_depth_infinity</name></expr>;</expr_stmt>
<return>return <expr><name>entry</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>do_bool_attr</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>entry_flag</name></decl></param>,
<param><decl><type><name>apr_uint64_t</name> *</type><name>modify_flags</name></decl></param>, <param><decl><type><name>apr_uint64_t</name></type> <name>modify_flag</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>atts</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>attr_name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>entry_name</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>str</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>attr_name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>entry_flag</name> = <name>FALSE</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>str</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr>"true"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr>*<name>entry_flag</name> = <name>TRUE</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr>"false"</expr></argument>)</argument_list></call> == 0 || <call><name>strcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr>*<name>entry_flag</name> = <name>FALSE</name></expr>;</expr_stmt></then>
<else>else
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_ENTRY_ATTRIBUTE_INVALID</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Entry '%s' has invalid '%s' value"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>(<name>entry_name</name> ? <name>entry_name</name> : <name>SVN_WC_ENTRY_THIS_DIR</name>)</expr></argument>, <argument><expr><name>attr_name</name></expr></argument>)</argument_list></call></expr>;</return></else></if></else></if>
<expr_stmt><expr>*<name>modify_flags</name> |= <name>modify_flag</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>read_escaped</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>result</name></decl></param>, <param><decl><type><name>char</name> **</type><name>buf</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>end</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_uint64_t</name></type> <name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>digits</name><index>[<expr>3</expr>]</index></name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>end</name> - *<name>buf</name> &lt; 3 || **<name>buf</name> != 'x' || ! <call><name>svn_ctype_isxdigit</name><argument_list>(<argument><expr>(*<name>buf</name>)<index>[<expr>1</expr>]</index></expr></argument>)</argument_list></call>
|| ! <call><name>svn_ctype_isxdigit</name><argument_list>(<argument><expr>(*<name>buf</name>)<index>[<expr>2</expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_WC_CORRUPT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Invalid escape sequence"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr>(*<name>buf</name>)++</expr>;</expr_stmt>
<expr_stmt><expr><name><name>digits</name><index>[<expr>0</expr>]</index></name> = *((*<name>buf</name>)++)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>digits</name><index>[<expr>1</expr>]</index></name> = *((*<name>buf</name>)++)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>digits</name><index>[<expr>2</expr>]</index></name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>val</name> = <call><name>apr_strtoi64</name><argument_list>(<argument><expr><name>digits</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>16</expr></argument>)</argument_list></call>) == 0</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_WC_CORRUPT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Invalid escaped character"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr>*<name>result</name> = (<name>char</name>) <name>val</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>read_str</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>result</name></decl></param>,
<param><decl><type><name>char</name> **</type><name>buf</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>end</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>start</name></decl>;</decl_stmt>
<if>if <condition>(<expr>*<name>buf</name> == <name>end</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_WC_CORRUPT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Unexpected end of entry"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>**<name>buf</name> == '\n'</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>result</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr>(*<name>buf</name>)++</expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>start</name> = *<name>buf</name></expr>;</expr_stmt>
<while>while <condition>(<expr>*<name>buf</name> != <name>end</name> &amp;&amp; **<name>buf</name> != '\n'</expr>)</condition> <block>{
<if>if <condition>(<expr>**<name>buf</name> == '\\'</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
<if>if <condition>(<expr>! <name>s</name></expr>)</condition><then>
<expr_stmt><expr><name>s</name> = <call><name>svn_stringbuf_ncreate</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr>*<name>buf</name> - <name>start</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr>*<name>buf</name> - <name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr>(*<name>buf</name>)++</expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_escaped</name><argument_list>(<argument><expr>&amp;<name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>start</name> = *<name>buf</name></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr>(*<name>buf</name>)++</expr>;</expr_stmt></else></if>
}</block></while>
<if>if <condition>(<expr>*<name>buf</name> == <name>end</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_WC_CORRUPT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Unexpected end of entry"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>s</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr>*<name>buf</name> - <name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>result</name> = <name><name>s</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr>*<name>result</name> = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr>*<name>buf</name> - <name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr>(*<name>buf</name>)++</expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>read_path</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>result</name></decl></param>,
<param><decl><type><name>char</name> **</type><name>buf</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>end</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_str</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>result</name> &amp;&amp; **<name>result</name> &amp;&amp; (! <call><name>svn_path_is_canonical</name><argument_list>(<argument><expr>*<name>result</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_WC_CORRUPT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Entry contains non-canonical path '%s'"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>*<name>result</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>read_val</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>result</name></decl></param>,
<param><decl><type><name>char</name> **</type><name>buf</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>end</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>start</name> <init>= <expr>*<name>buf</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>*<name>buf</name> == <name>end</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_WC_CORRUPT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Unexpected end of entry"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>**<name>buf</name> == '\n'</expr>)</condition><then> <block>{
<expr_stmt><expr>(*<name>buf</name>)++</expr>;</expr_stmt>
<expr_stmt><expr>*<name>result</name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<while>while <condition>(<expr>*<name>buf</name> != <name>end</name> &amp;&amp; **<name>buf</name> != '\n'</expr>)</condition>
<expr_stmt><expr>(*<name>buf</name>)++</expr>;</expr_stmt></while>
<if>if <condition>(<expr>*<name>buf</name> == <name>end</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_WC_CORRUPT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Unexpected end of entry"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr>**<name>buf</name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr>*<name>result</name> = <name>start</name></expr>;</expr_stmt>
<expr_stmt><expr>(*<name>buf</name>)++</expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>read_bool</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>result</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>field_name</name></decl></param>,
<param><decl><type><name>char</name> **</type><name>buf</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>end</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_val</name><argument_list>(<argument><expr>&amp;<name>val</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>val</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>field_name</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_WC_CORRUPT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Invalid value for field '%s'"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>field_name</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr>*<name>result</name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr>*<name>result</name> = <name>FALSE</name></expr>;</expr_stmt></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>read_revnum</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name> *</type><name>result</name></decl></param>,
<param><decl><type><name>char</name> **</type><name>buf</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>end</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_val</name><argument_list>(<argument><expr>&amp;<name>val</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>val</name></expr>)</condition><then>
<expr_stmt><expr>*<name>result</name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr>*<name>result</name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>read_time</name><parameter_list>(<param><decl><type><name>apr_time_t</name> *</type><name>result</name></decl></param>,
<param><decl><type><name>char</name> **</type><name>buf</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>end</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_val</name><argument_list>(<argument><expr>&amp;<name>val</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>val</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_time_from_cstring</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr>*<name>result</name> = 0</expr>;</expr_stmt></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>read_entry</name><parameter_list>(<param><decl><type><name>svn_wc_entry_t</name> **</type><name>new_entry</name></decl></param>,
<param><decl><type><name>char</name> **</type><name>buf</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>end</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_wc_entry_t</name> *</type><name>entry</name> <init>= <expr><call><name>alloc_entry</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAYBE_DONE</name></cpp:macro> <cpp:value>if (**buf == '\f') goto done</cpp:value></cpp:define>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_path</name><argument_list>(<argument><expr>&amp;<name>name</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>name</name></name> = <name>name</name> ? <name>name</name> : <name>SVN_WC_ENTRY_THIS_DIR</name></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>kindstr</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_val</name><argument_list>(<argument><expr>&amp;<name>kindstr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>kindstr</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>! <call><name>strcmp</name><argument_list>(<argument><expr><name>kindstr</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRIES_ATTR_FILE_STR</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>kind</name></name> = <name>svn_node_file</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>! <call><name>strcmp</name><argument_list>(<argument><expr><name>kindstr</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRIES_ATTR_DIR_STR</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>kind</name></name> = <name>svn_node_dir</name></expr>;</expr_stmt></then>
<else>else
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_NODE_UNKNOWN_KIND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Entry '%s' has invalid node kind"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>(<name>name</name> ? <name>name</name> : <name>SVN_WC_ENTRY_THIS_DIR</name>)</expr></argument>)</argument_list></call></expr>;</return></else></if></else></if>
}</block></then> <else>else
<expr_stmt><expr><name><name>entry</name>-&gt;<name>kind</name></name> = <name>svn_node_none</name></expr>;</expr_stmt></else></if>
}</block>
<expr_stmt><expr><name>MAYBE_DONE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_revnum</name><argument_list>(<argument><expr>&amp;<name><name>entry</name>-&gt;<name>revision</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MAYBE_DONE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_path</name><argument_list>(<argument><expr>&amp;<name><name>entry</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MAYBE_DONE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_path</name><argument_list>(<argument><expr>&amp;<name><name>entry</name>-&gt;<name>repos</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>repos</name></name> &amp;&amp; <name><name>entry</name>-&gt;<name>url</name></name>
&amp;&amp; ! <call><name>svn_path_is_ancestor</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>repos</name></name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>url</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_WC_CORRUPT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Entry for '%s' has invalid repository "
"root"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>name</name> ? <name>name</name> : <name>SVN_WC_ENTRY_THIS_DIR</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>MAYBE_DONE</name></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>schedulestr</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_val</name><argument_list>(<argument><expr>&amp;<name>schedulestr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>schedule</name></name> = <name>svn_wc_schedule_normal</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>schedulestr</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>! <call><name>strcmp</name><argument_list>(<argument><expr><name>schedulestr</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_VALUE_ADD</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>schedule</name></name> = <name>svn_wc_schedule_add</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>! <call><name>strcmp</name><argument_list>(<argument><expr><name>schedulestr</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_VALUE_DELETE</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>schedule</name></name> = <name>svn_wc_schedule_delete</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>! <call><name>strcmp</name><argument_list>(<argument><expr><name>schedulestr</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_VALUE_REPLACE</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>schedule</name></name> = <name>svn_wc_schedule_replace</name></expr>;</expr_stmt></then>
<else>else
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_ENTRY_ATTRIBUTE_INVALID</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Entry '%s' has invalid '%s' value"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>(<name>name</name> ? <name>name</name> : <name>SVN_WC_ENTRY_THIS_DIR</name>)</expr></argument>,
<argument><expr><name>SVN_WC__ENTRY_ATTR_SCHEDULE</name></expr></argument>)</argument_list></call></expr>;</return></else></if></else></if></else></if>
}</block></then></if>
}</block>
<expr_stmt><expr><name>MAYBE_DONE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_time</name><argument_list>(<argument><expr>&amp;<name><name>entry</name>-&gt;<name>text_time</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MAYBE_DONE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_str</name><argument_list>(<argument><expr>&amp;<name><name>entry</name>-&gt;<name>checksum</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MAYBE_DONE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_time</name><argument_list>(<argument><expr>&amp;<name><name>entry</name>-&gt;<name>cmt_date</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MAYBE_DONE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_revnum</name><argument_list>(<argument><expr>&amp;<name><name>entry</name>-&gt;<name>cmt_rev</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MAYBE_DONE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_str</name><argument_list>(<argument><expr>&amp;<name><name>entry</name>-&gt;<name>cmt_author</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MAYBE_DONE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_bool</name><argument_list>(<argument><expr>&amp;<name><name>entry</name>-&gt;<name>has_props</name></name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_HAS_PROPS</name></expr></argument>,
<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MAYBE_DONE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_bool</name><argument_list>(<argument><expr>&amp;<name><name>entry</name>-&gt;<name>has_prop_mods</name></name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_HAS_PROP_MODS</name></expr></argument>,
<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MAYBE_DONE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_val</name><argument_list>(<argument><expr>&amp;<name><name>entry</name>-&gt;<name>cachable_props</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>cachable_props</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>cachable_props</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>cachable_props</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>MAYBE_DONE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_val</name><argument_list>(<argument><expr>&amp;<name><name>entry</name>-&gt;<name>present_props</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>present_props</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>present_props</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>present_props</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>MAYBE_DONE</name></expr>;</expr_stmt>
<block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_path</name><argument_list>(<argument><expr>&amp;<name><name>entry</name>-&gt;<name>prejfile</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MAYBE_DONE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_path</name><argument_list>(<argument><expr>&amp;<name><name>entry</name>-&gt;<name>conflict_old</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MAYBE_DONE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_path</name><argument_list>(<argument><expr>&amp;<name><name>entry</name>-&gt;<name>conflict_new</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MAYBE_DONE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_path</name><argument_list>(<argument><expr>&amp;<name><name>entry</name>-&gt;<name>conflict_wrk</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MAYBE_DONE</name></expr>;</expr_stmt>
}</block>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_bool</name><argument_list>(<argument><expr>&amp;<name><name>entry</name>-&gt;<name>copied</name></name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_COPIED</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MAYBE_DONE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_path</name><argument_list>(<argument><expr>&amp;<name><name>entry</name>-&gt;<name>copyfrom_url</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MAYBE_DONE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_revnum</name><argument_list>(<argument><expr>&amp;<name><name>entry</name>-&gt;<name>copyfrom_rev</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MAYBE_DONE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_bool</name><argument_list>(<argument><expr>&amp;<name><name>entry</name>-&gt;<name>deleted</name></name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_DELETED</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MAYBE_DONE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_bool</name><argument_list>(<argument><expr>&amp;<name><name>entry</name>-&gt;<name>absent</name></name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_ABSENT</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MAYBE_DONE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_bool</name><argument_list>(<argument><expr>&amp;<name><name>entry</name>-&gt;<name>incomplete</name></name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_INCOMPLETE</name></expr></argument>,
<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MAYBE_DONE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_str</name><argument_list>(<argument><expr>&amp;<name><name>entry</name>-&gt;<name>uuid</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MAYBE_DONE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_str</name><argument_list>(<argument><expr>&amp;<name><name>entry</name>-&gt;<name>lock_token</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MAYBE_DONE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_str</name><argument_list>(<argument><expr>&amp;<name><name>entry</name>-&gt;<name>lock_owner</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MAYBE_DONE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_str</name><argument_list>(<argument><expr>&amp;<name><name>entry</name>-&gt;<name>lock_comment</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MAYBE_DONE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_time</name><argument_list>(<argument><expr>&amp;<name><name>entry</name>-&gt;<name>lock_creation_date</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MAYBE_DONE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_str</name><argument_list>(<argument><expr>&amp;<name><name>entry</name>-&gt;<name>changelist</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MAYBE_DONE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_bool</name><argument_list>(<argument><expr>&amp;<name><name>entry</name>-&gt;<name>keep_local</name></name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_KEEP_LOCAL</name></expr></argument>,
<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>MAYBE_DONE</name></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_val</name><argument_list>(<argument><expr>&amp;<name>val</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>val</name></expr>)</condition><then>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>working_size</name></name> = (<name>apr_off_t</name>)<call><name>apr_strtoi64</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block>
<expr_stmt><expr><name>MAYBE_DONE</name></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_val</name><argument_list>(<argument><expr>&amp;<name>result</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name></expr>)</condition><then>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>depth</name></name> = <call><name>svn_depth_from_word</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>entry</name>-&gt;<name>depth</name></name> = <name>svn_depth_infinity</name></expr>;</expr_stmt></else></if>
}</block>
<expr_stmt><expr><name>MAYBE_DONE</name></expr>;</expr_stmt>
<label><name>done</name>:</label>
<expr_stmt><expr>*<name>new_entry</name> = <name>entry</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__atts_to_entry</name><parameter_list>(<param><decl><type><name>svn_wc_entry_t</name> **</type><name>new_entry</name></decl></param>,
<param><decl><type><name>apr_uint64_t</name> *</type><name>modify_flags</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>atts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_wc_entry_t</name> *</type><name>entry</name> <init>= <expr><call><name>alloc_entry</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>modify_flags</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_NAME</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>name</name></name> = <name>name</name> ? <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> : <name>SVN_WC_ENTRY_THIS_DIR</name></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>revision_str</name>
<init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_REVISION</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>revision_str</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>entry</name>-&gt;<name>revision</name></name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name>revision_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>modify_flags</name> |= <name>SVN_WC__ENTRY_MODIFY_REVISION</name></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name><name>entry</name>-&gt;<name>revision</name></name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt></else></if>
}</block>
<block>{
<expr_stmt><expr><name><name>entry</name>-&gt;<name>url</name></name>
= <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_URL</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>url</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>modify_flags</name> |= <name>SVN_WC__ENTRY_MODIFY_URL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>url</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block>
<block>{
<expr_stmt><expr><name><name>entry</name>-&gt;<name>repos</name></name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_REPOS</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>repos</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>url</name></name> &amp;&amp; ! <call><name>svn_path_is_ancestor</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>repos</name></name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>url</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_WC_CORRUPT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Entry for '%s' has invalid repository "
"root"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>name</name> ? <name>name</name> : <name>SVN_WC_ENTRY_THIS_DIR</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr>*<name>modify_flags</name> |= <name>SVN_WC__ENTRY_MODIFY_REPOS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>repos</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>repos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>kindstr</name>
<init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_KIND</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>kind</name></name> = <name>svn_node_none</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>kindstr</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>! <call><name>strcmp</name><argument_list>(<argument><expr><name>kindstr</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRIES_ATTR_FILE_STR</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>kind</name></name> = <name>svn_node_file</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>! <call><name>strcmp</name><argument_list>(<argument><expr><name>kindstr</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRIES_ATTR_DIR_STR</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>kind</name></name> = <name>svn_node_dir</name></expr>;</expr_stmt></then>
<else>else
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_NODE_UNKNOWN_KIND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Entry '%s' has invalid node kind"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>(<name>name</name> ? <name>name</name> : <name>SVN_WC_ENTRY_THIS_DIR</name>)</expr></argument>)</argument_list></call></expr>;</return></else></if></else></if>
<expr_stmt><expr>*<name>modify_flags</name> |= <name>SVN_WC__ENTRY_MODIFY_KIND</name></expr>;</expr_stmt>
}</block></then></if>
}</block>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>schedulestr</name>
<init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_SCHEDULE</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>schedule</name></name> = <name>svn_wc_schedule_normal</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>schedulestr</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>! <call><name>strcmp</name><argument_list>(<argument><expr><name>schedulestr</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_VALUE_ADD</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>schedule</name></name> = <name>svn_wc_schedule_add</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>! <call><name>strcmp</name><argument_list>(<argument><expr><name>schedulestr</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_VALUE_DELETE</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>schedule</name></name> = <name>svn_wc_schedule_delete</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>! <call><name>strcmp</name><argument_list>(<argument><expr><name>schedulestr</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_VALUE_REPLACE</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>schedule</name></name> = <name>svn_wc_schedule_replace</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>! <call><name>strcmp</name><argument_list>(<argument><expr><name>schedulestr</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>schedule</name></name> = <name>svn_wc_schedule_normal</name></expr>;</expr_stmt></then>
<else>else
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_ENTRY_ATTRIBUTE_INVALID</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Entry '%s' has invalid '%s' value"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>(<name>name</name> ? <name>name</name> : <name>SVN_WC_ENTRY_THIS_DIR</name>)</expr></argument>,
<argument><expr><name>SVN_WC__ENTRY_ATTR_SCHEDULE</name></expr></argument>)</argument_list></call></expr>;</return></else></if></else></if></else></if></else></if>
<expr_stmt><expr>*<name>modify_flags</name> |= <name>SVN_WC__ENTRY_MODIFY_SCHEDULE</name></expr>;</expr_stmt>
}</block></then></if>
}</block>
<block>{
<if>if <condition>(<expr>(<name><name>entry</name>-&gt;<name>prejfile</name></name>
= <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_PREJFILE</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>modify_flags</name> |= <name>SVN_WC__ENTRY_MODIFY_PREJFILE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>prejfile</name></name> = *(<name><name>entry</name>-&gt;<name>prejfile</name></name>)
? <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>prejfile</name></name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name><name>entry</name>-&gt;<name>conflict_old</name></name>
= <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_CONFLICT_OLD</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>modify_flags</name> |= <name>SVN_WC__ENTRY_MODIFY_CONFLICT_OLD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>conflict_old</name></name> =
*(<name><name>entry</name>-&gt;<name>conflict_old</name></name>)
? <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>conflict_old</name></name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name><name>entry</name>-&gt;<name>conflict_new</name></name>
= <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_CONFLICT_NEW</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>modify_flags</name> |= <name>SVN_WC__ENTRY_MODIFY_CONFLICT_NEW</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>conflict_new</name></name> =
*(<name><name>entry</name>-&gt;<name>conflict_new</name></name>)
? <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>conflict_new</name></name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name><name>entry</name>-&gt;<name>conflict_wrk</name></name>
= <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_CONFLICT_WRK</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>modify_flags</name> |= <name>SVN_WC__ENTRY_MODIFY_CONFLICT_WRK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>conflict_wrk</name></name> =
*(<name><name>entry</name>-&gt;<name>conflict_wrk</name></name>)
? <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>conflict_wrk</name></name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
}</block>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>do_bool_attr</name><argument_list>(<argument><expr>&amp;<name><name>entry</name>-&gt;<name>copied</name></name></expr></argument>,
<argument><expr><name>modify_flags</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_MODIFY_COPIED</name></expr></argument>,
<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_COPIED</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>revstr</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>copyfrom_url</name></name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_COPYFROM_URL</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>copyfrom_url</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>modify_flags</name> |= <name>SVN_WC__ENTRY_MODIFY_COPYFROM_URL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>copyfrom_url</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>copyfrom_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>revstr</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_COPYFROM_REV</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>revstr</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>entry</name>-&gt;<name>copyfrom_rev</name></name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name>revstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>modify_flags</name> |= <name>SVN_WC__ENTRY_MODIFY_COPYFROM_REV</name></expr>;</expr_stmt>
}</block></then></if>
}</block>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>do_bool_attr</name><argument_list>(<argument><expr>&amp;<name><name>entry</name>-&gt;<name>deleted</name></name></expr></argument>,
<argument><expr><name>modify_flags</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_MODIFY_DELETED</name></expr></argument>,
<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_DELETED</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>do_bool_attr</name><argument_list>(<argument><expr>&amp;<name><name>entry</name>-&gt;<name>absent</name></name></expr></argument>,
<argument><expr><name>modify_flags</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_MODIFY_ABSENT</name></expr></argument>,
<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_ABSENT</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>do_bool_attr</name><argument_list>(<argument><expr>&amp;<name><name>entry</name>-&gt;<name>incomplete</name></name></expr></argument>,
<argument><expr><name>modify_flags</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_MODIFY_INCOMPLETE</name></expr></argument>,
<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_INCOMPLETE</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>do_bool_attr</name><argument_list>(<argument><expr>&amp;<name><name>entry</name>-&gt;<name>keep_local</name></name></expr></argument>,
<argument><expr><name>modify_flags</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_MODIFY_KEEP_LOCAL</name></expr></argument>,
<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_KEEP_LOCAL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>text_timestr</name></decl>, *<decl><type ref="prev"/><name>prop_timestr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>text_timestr</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_TEXT_TIME</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>text_timestr</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>! <call><name>strcmp</name><argument_list>(<argument><expr><name>text_timestr</name></expr></argument>, <argument><expr><name>SVN_WC__TIMESTAMP_WC</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
}</block></then> <else>else
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_time_from_cstring</name><argument_list>(<argument><expr>&amp;<name><name>entry</name>-&gt;<name>text_time</name></name></expr></argument>, <argument><expr><name>text_timestr</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr>*<name>modify_flags</name> |= <name>SVN_WC__ENTRY_MODIFY_TEXT_TIME</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>prop_timestr</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_PROP_TIME</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>prop_timestr</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>! <call><name>strcmp</name><argument_list>(<argument><expr><name>prop_timestr</name></expr></argument>, <argument><expr><name>SVN_WC__TIMESTAMP_WC</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
}</block></then> <else>else
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_time_from_cstring</name><argument_list>(<argument><expr>&amp;<name><name>entry</name>-&gt;<name>prop_time</name></name></expr></argument>, <argument><expr><name>prop_timestr</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr>*<name>modify_flags</name> |= <name>SVN_WC__ENTRY_MODIFY_PROP_TIME</name></expr>;</expr_stmt>
}</block></then></if>
}</block>
<block>{
<expr_stmt><expr><name><name>entry</name>-&gt;<name>checksum</name></name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_CHECKSUM</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>checksum</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>modify_flags</name> |= <name>SVN_WC__ENTRY_MODIFY_CHECKSUM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>checksum</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>checksum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block>
<block>{
<expr_stmt><expr><name><name>entry</name>-&gt;<name>uuid</name></name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_UUID</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>uuid</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>modify_flags</name> |= <name>SVN_WC__ENTRY_MODIFY_UUID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>uuid</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>uuid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cmt_datestr</name></decl>, *<decl><type ref="prev"/><name>cmt_revstr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cmt_datestr</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_CMT_DATE</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cmt_datestr</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_time_from_cstring</name><argument_list>(<argument><expr>&amp;<name><name>entry</name>-&gt;<name>cmt_date</name></name></expr></argument>, <argument><expr><name>cmt_datestr</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>modify_flags</name> |= <name>SVN_WC__ENTRY_MODIFY_CMT_DATE</name></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name><name>entry</name>-&gt;<name>cmt_date</name></name> = 0</expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>cmt_revstr</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_CMT_REV</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cmt_revstr</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>entry</name>-&gt;<name>cmt_rev</name></name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name>cmt_revstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>modify_flags</name> |= <name>SVN_WC__ENTRY_MODIFY_CMT_REV</name></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name><name>entry</name>-&gt;<name>cmt_rev</name></name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>cmt_author</name></name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_CMT_AUTHOR</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>cmt_author</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>modify_flags</name> |= <name>SVN_WC__ENTRY_MODIFY_CMT_AUTHOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>cmt_author</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>cmt_author</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>lock_token</name></name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_LOCK_TOKEN</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>lock_token</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>modify_flags</name> |= <name>SVN_WC__ENTRY_MODIFY_LOCK_TOKEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>lock_token</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>lock_token</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>lock_owner</name></name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_LOCK_OWNER</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>lock_owner</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>modify_flags</name> |= <name>SVN_WC__ENTRY_MODIFY_LOCK_OWNER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>lock_owner</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>lock_owner</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>lock_comment</name></name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_LOCK_COMMENT</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>lock_comment</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>modify_flags</name> |= <name>SVN_WC__ENTRY_MODIFY_LOCK_COMMENT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>lock_comment</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>lock_comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cdate_str</name> <init>=
<expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_LOCK_CREATION_DATE</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>cdate_str</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_time_from_cstring</name><argument_list>(<argument><expr>&amp;<name><name>entry</name>-&gt;<name>lock_creation_date</name></name></expr></argument>,
<argument><expr><name>cdate_str</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>modify_flags</name> |= <name>SVN_WC__ENTRY_MODIFY_LOCK_CREATION_DATE</name></expr>;</expr_stmt>
}</block></then></if>
}</block>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>changelist</name></name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_CHANGELIST</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>changelist</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>modify_flags</name> |= <name>SVN_WC__ENTRY_MODIFY_CHANGELIST</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>changelist</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>changelist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>do_bool_attr</name><argument_list>(<argument><expr>&amp;<name><name>entry</name>-&gt;<name>has_props</name></name></expr></argument>,
<argument><expr><name>modify_flags</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_MODIFY_HAS_PROPS</name></expr></argument>,
<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_HAS_PROPS</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>has_prop_mods_str</name>
<init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_HAS_PROP_MODS</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>has_prop_mods_str</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>has_prop_mods_str</name></expr></argument>, <argument><expr>"true"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>has_prop_mods</name></name> = <name>TRUE</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>has_prop_mods_str</name></expr></argument>, <argument><expr>"false"</expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_ENTRY_ATTRIBUTE_INVALID</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Entry '%s' has invalid '%s' value"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>(<name>name</name> ? <name>name</name> : <name>SVN_WC_ENTRY_THIS_DIR</name>)</expr></argument>,
<argument><expr><name>SVN_WC__ENTRY_ATTR_HAS_PROP_MODS</name></expr></argument>)</argument_list></call></expr>;</return></then></if></else></if>
<expr_stmt><expr>*<name>modify_flags</name> |= <name>SVN_WC__ENTRY_MODIFY_HAS_PROP_MODS</name></expr>;</expr_stmt>
}</block></then></if>
}</block>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>cachable_props</name></name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>atts</name></expr></argument>,
<argument><expr><name>SVN_WC__ENTRY_ATTR_CACHABLE_PROPS</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>cachable_props</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>modify_flags</name> |= <name>SVN_WC__ENTRY_MODIFY_CACHABLE_PROPS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>cachable_props</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>cachable_props</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>present_props</name></name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>atts</name></expr></argument>,
<argument><expr><name>SVN_WC__ENTRY_ATTR_PRESENT_PROPS</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>present_props</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>modify_flags</name> |= <name>SVN_WC__ENTRY_MODIFY_PRESENT_PROPS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>present_props</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>present_props</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name>
<init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>atts</name></expr></argument>,
<argument><expr><name>SVN_WC__ENTRY_ATTR_WORKING_SIZE</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>val</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>! <call><name>strcmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>SVN_WC__WORKING_SIZE_WC</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
}</block></then> <else>else
<expr_stmt><expr><name><name>entry</name>-&gt;<name>working_size</name></name> = (<name>apr_off_t</name>)<call><name>apr_strtoi64</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr>*<name>modify_flags</name> |= <name>SVN_WC__ENTRY_MODIFY_WORKING_SIZE</name></expr>;</expr_stmt>
}</block></then></if>
}</block>
<expr_stmt><expr>*<name>new_entry</name> = <name>entry</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<struct>struct <name>entries_accumulator</name> <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>entries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_xml_parser_t</name> *</type><name>parser</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>show_hidden</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>scratch_pool</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>handle_start_tag</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>userData</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tagname</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>atts</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>entries_accumulator</name> *</type><name>accum</name> <init>= <expr><name>userData</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>attributes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint64_t</name></type> <name>modify_flags</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>tagname</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRIES_ENTRY</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name><name>accum</name>-&gt;<name>scratch_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>attributes</name> = <call><name>svn_xml_make_att_hash</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name><name>accum</name>-&gt;<name>scratch_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_wc__atts_to_entry</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr>&amp;<name>modify_flags</name></expr></argument>, <argument><expr><name>attributes</name></expr></argument>, <argument><expr><name><name>accum</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_xml_signal_bailout</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name><name>accum</name>-&gt;<name>parser</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name><name>entry</name>-&gt;<name>deleted</name></name> || <name><name>entry</name>-&gt;<name>absent</name></name>)
&amp;&amp; (<name><name>entry</name>-&gt;<name>schedule</name></name> != <name>svn_wc_schedule_add</name>)
&amp;&amp; (<name><name>entry</name>-&gt;<name>schedule</name></name> != <name>svn_wc_schedule_replace</name>)
&amp;&amp; (! <name><name>accum</name>-&gt;<name>show_hidden</name></name>)</expr>)</condition><then>
<empty_stmt>;</empty_stmt></then>
<else>else
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>accum</name>-&gt;<name>entries</name></name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>parse_entries_xml</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>entries</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>show_hidden</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>buf</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>size</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_xml_parser_t</name> *</type><name>svn_parser</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>entries_accumulator</name></type> <name>accum</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>accum</name>.<name>entries</name></name> = <name>entries</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>accum</name>.<name>show_hidden</name></name> = <name>show_hidden</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>accum</name>.<name>pool</name></name> = <call><name>svn_wc_adm_access_pool</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>accum</name>.<name>scratch_pool</name></name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>svn_parser</name> = <call><name>svn_xml_make_parser</name><argument_list>(<argument><expr>&amp;<name>accum</name></expr></argument>,
<argument><expr><name>handle_start_tag</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>accum</name>.<name>parser</name></name> = <name>svn_parser</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR_W</name><argument_list>(<argument><expr><call><name>svn_xml_parse</name><argument_list>(<argument><expr><name>svn_parser</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"XML parser failed in '%s'"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_path_local_style</name>
<argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name><name>accum</name>.<name>scratch_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_xml_free_parser</name><argument_list>(<argument><expr><name>svn_parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>take_from_entry</name><parameter_list>(<param><decl><type><name>svn_wc_entry_t</name> *</type><name>src</name></decl></param>, <param><decl><type><name>svn_wc_entry_t</name> *</type><name>dst</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>(<name><name>dst</name>-&gt;<name>revision</name></name> == <name>SVN_INVALID_REVNUM</name>) &amp;&amp; (<name><name>dst</name>-&gt;<name>kind</name></name> != <name>svn_node_dir</name>)</expr>)</condition><then>
<expr_stmt><expr><name><name>dst</name>-&gt;<name>revision</name></name> = <name><name>src</name>-&gt;<name>revision</name></name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>! <name><name>dst</name>-&gt;<name>url</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>dst</name>-&gt;<name>url</name></name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>src</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name><name>dst</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>! <name><name>dst</name>-&gt;<name>repos</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>dst</name>-&gt;<name>repos</name></name> = <name><name>src</name>-&gt;<name>repos</name></name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>(! <name><name>dst</name>-&gt;<name>uuid</name></name>)
&amp;&amp; (! ((<name><name>dst</name>-&gt;<name>schedule</name></name> == <name>svn_wc_schedule_add</name>)
|| (<name><name>dst</name>-&gt;<name>schedule</name></name> == <name>svn_wc_schedule_replace</name>)))</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dst</name>-&gt;<name>uuid</name></name> = <name><name>src</name>-&gt;<name>uuid</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>! <name><name>dst</name>-&gt;<name>cachable_props</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>dst</name>-&gt;<name>cachable_props</name></name> = <name><name>src</name>-&gt;<name>cachable_props</name></name></expr>;</expr_stmt></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>resolve_to_defaults</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>entries</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_entry_t</name> *</type><name>default_entry</name>
<init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>SVN_WC_ENTRY_THIS_DIR</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>! <name>default_entry</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_ENTRY_NOT_FOUND</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Missing default entry"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>default_entry</name>-&gt;<name>revision</name></name> == <name>SVN_INVALID_REVNUM</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_ENTRY_MISSING_REVISION</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Default entry has no revision number"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>! <name><name>default_entry</name>-&gt;<name>url</name></name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_ENTRY_MISSING_URL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Default entry is missing URL"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_entry_t</name> *</type><name>this_entry</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>this_entry</name> = <name>val</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>this_entry</name> == <name>default_entry</name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<if>if <condition>(<expr><name><name>this_entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<if>if <condition>(<expr><name><name>this_entry</name>-&gt;<name>kind</name></name> == <name>svn_node_file</name></expr>)</condition><then>
<expr_stmt><expr><call><name>take_from_entry</name><argument_list>(<argument><expr><name>default_entry</name></expr></argument>, <argument><expr><name>this_entry</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></for>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>read_entries</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>show_hidden</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name> <init>= <expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>infile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>buf</name> <init>= <expr><call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>entries</name> <init>= <expr><call><name>apr_hash_make</name><argument_list>(<argument><expr><call><name>svn_wc_adm_access_pool</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>curp</name></decl>, *<decl><type ref="prev"/><name>endp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>entryno</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__open_adm_file</name><argument_list>(<argument><expr>&amp;<name>infile</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
<argument><expr><name>SVN_WC__ADM_ENTRIES</name></expr></argument>, <argument><expr><name>APR_READ</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stringbuf_from_aprfile</name><argument_list>(<argument><expr>&amp;<name>buf</name></expr></argument>, <argument><expr><name>infile</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>curp</name> = <name><name>buf</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>endp</name> = <name><name>buf</name>-&gt;<name>data</name></name> + <name><name>buf</name>-&gt;<name>len</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>curp</name> != <name>endp</name> &amp;&amp; !<call><name>svn_ctype_isdigit</name><argument_list>(<argument><expr>*<name>curp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>parse_entries_xml</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>, <argument><expr><name>show_hidden</name></expr></argument>,
<argument><expr><name><name>buf</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>buf</name>-&gt;<name>len</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><name>curp</name> = <call><name>memchr</name><argument_list>(<argument><expr><name>curp</name></expr></argument>, <argument><expr>'\n'</expr></argument>, <argument><expr><name><name>buf</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>curp</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_WC_CORRUPT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Invalid version line in entries file "
"of '%s'"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr>++<name>curp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>entryno</name> = 1</expr>;</expr_stmt>
<while>while <condition>(<expr><name>curp</name> != <name>endp</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><call><name>read_entry</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr>&amp;<name>curp</name></expr></argument>, <argument><expr><name>endp</name></expr></argument>,
<argument><expr><call><name>svn_wc_adm_access_pool</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>! <name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>curp</name> = <call><name>memchr</name><argument_list>(<argument><expr><name>curp</name></expr></argument>, <argument><expr>'\f'</expr></argument>, <argument><expr><name>endp</name> - <name>curp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>curp</name></expr>)</condition><then>
<expr_stmt><expr><name>err</name> = <call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_WC_CORRUPT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Missing entry terminator"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>! <name>err</name> &amp;&amp; (<name>curp</name> == <name>endp</name> || *(++<name>curp</name>) != '\n')</expr>)</condition><then>
<expr_stmt><expr><name>err</name> = <call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_WC_CORRUPT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Invalid entry terminator"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>apr_err</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Error at entry %d in entries file for "
"'%s':"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>entryno</name></expr></argument>, <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr>++<name>curp</name></expr>;</expr_stmt>
<expr_stmt><expr>++<name>entryno</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name><name>entry</name>-&gt;<name>deleted</name></name> || <name><name>entry</name>-&gt;<name>absent</name></name>)
&amp;&amp; (<name><name>entry</name>-&gt;<name>schedule</name></name> != <name>svn_wc_schedule_add</name>)
&amp;&amp; (<name><name>entry</name>-&gt;<name>schedule</name></name> != <name>svn_wc_schedule_replace</name>)
&amp;&amp; (! <name>show_hidden</name>)</expr>)</condition><then>
<empty_stmt>;</empty_stmt></then>
<else>else
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></while>
}</block></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__close_adm_file</name><argument_list>(<argument><expr><name>infile</name></expr></argument>, <argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>SVN_WC__ADM_ENTRIES</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>resolve_to_defaults</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><call><name>svn_wc_adm_access_pool</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_wc__adm_access_set_entries</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>show_hidden</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_entry</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> **</type><name>entry</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>show_hidden</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>entry_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>dir_access</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__adm_retrieve_internal</name><argument_list>(<argument><expr>&amp;<name>dir_access</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>dir_access</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dir_path</name></decl>, *<decl><type ref="prev"/><name>base_name</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_path_split</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>&amp;<name>dir_path</name></expr></argument>, <argument><expr>&amp;<name>base_name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__adm_retrieve_internal</name><argument_list>(<argument><expr>&amp;<name>dir_access</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>dir_path</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>entry_name</name> = <name>base_name</name></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name>entry_name</name> = <name>SVN_WC_ENTRY_THIS_DIR</name></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>dir_access</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>entries</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entries_read</name><argument_list>(<argument><expr>&amp;<name>entries</name></expr></argument>, <argument><expr><name>dir_access</name></expr></argument>, <argument><expr><name>show_hidden</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>entry</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>entry_name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr>*<name>entry</name> = <name>NULL</name></expr>;</expr_stmt></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__entry_versioned_internal</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> **</type><name>entry</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>show_hidden</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>caller_filename</name></decl></param>,
<param><decl><type><name>int</name></type> <name>caller_lineno</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>show_hidden</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! *<name>entry</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name>
<init>= <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_ENTRY_NOT_FOUND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s' is not under version control"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>err</name>-&gt;<name>file</name></name> = <name>caller_filename</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>err</name>-&gt;<name>line</name></name> = <name>caller_lineno</name></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
static svn_error_t *
check_entries(apr_hash_t *entries,
const char *path,
apr_pool_t *pool) {
svn_wc_entry_t *default_entry;
apr_hash_index_t *hi;
default_entry = apr_hash_get(entries,
SVN_WC_ENTRY_THIS_DIR,
APR_HASH_KEY_STRING);
if (! default_entry)
return svn_error_createf
(SVN_ERR_WC_CORRUPT, NULL,
_("Corrupt working copy: '%s' has no default entry"),
svn_path_local_style(path, pool));
switch (default_entry-&gt;schedule) {
case svn_wc_schedule_normal:
case svn_wc_schedule_add:
case svn_wc_schedule_delete:
case svn_wc_schedule_replace:
break;
default:
return svn_error_createf
(SVN_ERR_WC_CORRUPT, NULL,
_("Corrupt working copy: directory '%s' has an invalid schedule"),
svn_path_local_style(path, pool));
}
for (hi = apr_hash_first(pool, entries); hi; hi = apr_hash_next(hi)) {
const void *key;
const char *name;
void *val;
svn_wc_entry_t *this_entry;
apr_hash_this(hi, &amp;key, NULL, &amp;val);
this_entry = val;
name = key;
if (! strcmp(name, SVN_WC_ENTRY_THIS_DIR ))
continue;
switch (this_entry-&gt;schedule) {
case svn_wc_schedule_normal:
case svn_wc_schedule_add:
case svn_wc_schedule_delete:
case svn_wc_schedule_replace:
break;
default:
return svn_error_createf
(SVN_ERR_WC_CORRUPT, NULL,
_("Corrupt working copy: "
"'%s' in directory '%s' has an invalid schedule"),
name, svn_path_local_style(path, pool));
}
if ((default_entry-&gt;schedule == svn_wc_schedule_add)
&amp;&amp; (this_entry-&gt;schedule != svn_wc_schedule_add))
return svn_error_createf
(SVN_ERR_WC_CORRUPT, NULL,
_("Corrupt working copy: '%s' in directory '%s' (which is "
"scheduled for addition) is not itself scheduled for addition"),
name, svn_path_local_style(path, pool));
if ((default_entry-&gt;schedule == svn_wc_schedule_delete)
&amp;&amp; (this_entry-&gt;schedule != svn_wc_schedule_delete))
return svn_error_createf
(SVN_ERR_WC_CORRUPT, NULL,
_("Corrupt working copy: '%s' in directory '%s' (which is "
"scheduled for deletion) is not itself scheduled for deletion"),
name, svn_path_local_style(path, pool));
if ((default_entry-&gt;schedule == svn_wc_schedule_replace)
&amp;&amp; (this_entry-&gt;schedule == svn_wc_schedule_normal))
return svn_error_createf
(SVN_ERR_WC_CORRUPT, NULL,
_("Corrupt working copy: '%s' in directory '%s' (which is "
"scheduled for replacement) has an invalid schedule"),
name, svn_path_local_style(path, pool));
}
return SVN_NO_ERROR;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_entries_read</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>entries</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>show_hidden</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>new_entries</name></decl>;</decl_stmt>
<expr_stmt><expr><name>new_entries</name> = <call><name>svn_wc__adm_access_entries</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>show_hidden</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>new_entries</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_entries</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new_entries</name> = <call><name>svn_wc__adm_access_entries</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>show_hidden</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>*<name>entries</name> = <name>new_entries</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>write_str</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> *</type><name>buf</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>str</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>start</name> <init>= <expr><name>str</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>str</name></expr>)</condition><then> <block>{
<while>while <condition>(<expr>*<name>str</name></expr>)</condition> <block>{
<if>if <condition>(<expr><call><name>svn_ctype_iscntrl</name><argument_list>(<argument><expr>*<name>str</name></expr></argument>)</argument_list></call> || *<name>str</name> == '\\'</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>str</name> - <name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"\\x%02x"</expr></argument>, <argument><expr>*<name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>start</name> = <name>str</name> + 1</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>++<name>str</name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>str</name> - <name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>write_val</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> *</type><name>buf</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>val</name></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>write_bool</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> *</type><name>buf</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>field_name</name></decl></param>, <param><decl><type><name>svn_boolean_t</name></type> <name>val</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>write_val</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>val</name> ? <name>field_name</name> : <name>NULL</name></expr></argument>, <argument><expr><name>val</name> ? <call><name>strlen</name><argument_list>(<argument><expr><name>field_name</name></expr></argument>)</argument_list></call> : 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>write_revnum</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>svn_revnum_t</name></type> <name>revnum</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>revnum</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>apr_ltoa</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>revnum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>write_time</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>apr_time_t</name></type> <name>val</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>val</name></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>svn_time_to_cstring</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>write_entry</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> *</type><name>buf</name></decl></param>,
<param><decl><type><name>svn_wc_entry_t</name> *</type><name>entry</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><name>svn_wc_entry_t</name> *</type><name>this_dir</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>valuestr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>valuerev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>is_this_dir</name> <init>= <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_WC_ENTRY_THIS_DIR</name></expr></argument>)</argument_list></call> == 0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>is_subdir</name> <init>= <expr>! <name>is_this_dir</name> &amp;&amp; (<name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name>)</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>entry</name>-&gt;<name>kind</name></name></expr>)</condition> <block>{
<case>case <expr><name>svn_node_dir</name></expr>:
<expr_stmt><expr><call><name>write_val</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRIES_ATTR_DIR_STR</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVN_WC__ENTRIES_ATTR_DIR_STR</name></expr></argument>)</argument_list></sizeof> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>svn_node_none</name></expr>:
<expr_stmt><expr><call><name>write_val</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>svn_node_file</name></expr>:
</case><case>case <expr><name>svn_node_unknown</name></expr>:
</case><default>default:
<expr_stmt><expr><call><name>write_val</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRIES_ATTR_FILE_STR</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVN_WC__ENTRIES_ATTR_FILE_STR</name></expr></argument>)</argument_list></sizeof> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
<if>if <condition>(<expr><name>is_this_dir</name> || (! <name>is_subdir</name> &amp;&amp; <name><name>entry</name>-&gt;<name>revision</name></name> != <name><name>this_dir</name>-&gt;<name>revision</name></name>)</expr>)</condition><then>
<expr_stmt><expr><name>valuerev</name> = <name><name>entry</name>-&gt;<name>revision</name></name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>valuerev</name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>write_revnum</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>valuerev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>is_this_dir</name> ||
(! <name>is_subdir</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>this_dir</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>entry</name>-&gt;<name>url</name></name></expr></argument>)</argument_list></call> != 0)</expr>)</condition><then>
<expr_stmt><expr><name>valuestr</name> = <name><name>entry</name>-&gt;<name>url</name></name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>valuestr</name> = <name>NULL</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>write_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>valuestr</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>is_subdir</name>
&amp;&amp; (<name>is_this_dir</name>
|| (<name><name>this_dir</name>-&gt;<name>repos</name></name> == <name>NULL</name>
|| (<name><name>entry</name>-&gt;<name>repos</name></name>
&amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>this_dir</name>-&gt;<name>repos</name></name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>repos</name></name></expr></argument>)</argument_list></call> != 0)))</expr>)</condition><then>
<expr_stmt><expr><name>valuestr</name> = <name><name>entry</name>-&gt;<name>repos</name></name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>valuestr</name> = <name>NULL</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>write_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>valuestr</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>entry</name>-&gt;<name>schedule</name></name></expr>)</condition> <block>{
<case>case <expr><name>svn_wc_schedule_add</name></expr>:
<expr_stmt><expr><call><name>write_val</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_VALUE_ADD</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVN_WC__ENTRY_VALUE_ADD</name></expr></argument>)</argument_list></sizeof> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>svn_wc_schedule_delete</name></expr>:
<expr_stmt><expr><call><name>write_val</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_VALUE_DELETE</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVN_WC__ENTRY_VALUE_DELETE</name></expr></argument>)</argument_list></sizeof> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>svn_wc_schedule_replace</name></expr>:
<expr_stmt><expr><call><name>write_val</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_VALUE_REPLACE</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVN_WC__ENTRY_VALUE_REPLACE</name></expr></argument>)</argument_list></sizeof> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>svn_wc_schedule_normal</name></expr>:
</case><default>default:
<expr_stmt><expr><call><name>write_val</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
<expr_stmt><expr><call><name>write_time</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>text_time</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_val</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>checksum</name></name></expr></argument>,
<argument><expr><name><name>entry</name>-&gt;<name>checksum</name></name> ? <call><name>strlen</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>checksum</name></name></expr></argument>)</argument_list></call> : 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_time</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>cmt_date</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_revnum</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>cmt_rev</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>cmt_author</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_bool</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_HAS_PROPS</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>has_props</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_bool</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_HAS_PROP_MODS</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>has_prop_mods</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>is_this_dir</name>
|| ! <name><name>this_dir</name>-&gt;<name>cachable_props</name></name> || ! <name><name>entry</name>-&gt;<name>cachable_props</name></name>
|| <call><name>strcmp</name><argument_list>(<argument><expr><name><name>this_dir</name>-&gt;<name>cachable_props</name></name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>cachable_props</name></name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<expr_stmt><expr><name>valuestr</name> = <name><name>entry</name>-&gt;<name>cachable_props</name></name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>valuestr</name> = <name>NULL</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>write_val</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>valuestr</name></expr></argument>, <argument><expr><name>valuestr</name> ? <call><name>strlen</name><argument_list>(<argument><expr><name>valuestr</name></expr></argument>)</argument_list></call> : 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_val</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>present_props</name></name></expr></argument>,
<argument><expr><name><name>entry</name>-&gt;<name>present_props</name></name> ? <call><name>strlen</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>present_props</name></name></expr></argument>)</argument_list></call> : 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>prejfile</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>conflict_old</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>conflict_new</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>conflict_wrk</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_bool</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_COPIED</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>copied</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>copyfrom_url</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_revnum</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>copyfrom_rev</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_bool</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_DELETED</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>deleted</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_bool</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_ABSENT</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>absent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_bool</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_INCOMPLETE</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>incomplete</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>is_this_dir</name> || ! <name><name>this_dir</name>-&gt;<name>uuid</name></name> || ! <name><name>entry</name>-&gt;<name>uuid</name></name>
|| <call><name>strcmp</name><argument_list>(<argument><expr><name><name>this_dir</name>-&gt;<name>uuid</name></name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>uuid</name></name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<expr_stmt><expr><name>valuestr</name> = <name><name>entry</name>-&gt;<name>uuid</name></name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>valuestr</name> = <name>NULL</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>write_val</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>valuestr</name></expr></argument>, <argument><expr><name>valuestr</name> ? <call><name>strlen</name><argument_list>(<argument><expr><name>valuestr</name></expr></argument>)</argument_list></call> : 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>lock_token</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>lock_owner</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>lock_comment</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_time</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>lock_creation_date</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_str</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>changelist</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_bool</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_KEEP_LOCAL</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>keep_local</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name>
<init>= <expr>(<name><name>entry</name>-&gt;<name>working_size</name></name> != <name>SVN_WC_ENTRY_WORKING_SIZE_UNKNOWN</name>)
? <call><name>apr_off_t_toa</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>working_size</name></name></expr></argument>)</argument_list></call> : ""</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>write_val</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<if>if <condition>(<expr><name>is_subdir</name> || <name><name>entry</name>-&gt;<name>depth</name></name> == <name>svn_depth_infinity</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>write_val</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name> <init>= <expr><call><name>svn_depth_to_word</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>depth</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>write_val</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<while>while <condition>(<expr><name><name>buf</name>-&gt;<name>len</name></name> &gt; 1 &amp;&amp; <name><name>buf</name>-&gt;<name>data</name><index>[<expr><name><name>buf</name>-&gt;<name>len</name></name> - 2</expr>]</index></name> == '\n'</expr>)</condition>
<expr_stmt><expr><name><name>buf</name>-&gt;<name>len</name></name>--</expr>;</expr_stmt></while>
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>"\f\n"</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>write_entry_xml</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> **</type><name>output</name></decl></param>,
<param><decl><type><name>svn_wc_entry_t</name> *</type><name>entry</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><name>svn_wc_entry_t</name> *</type><name>this_dir</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>atts</name> <init>= <expr><call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>valuestr</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_NAME</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><name><name>entry</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>revision</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_REVISION</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%ld"</expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>revision</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>url</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_URL</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><name><name>entry</name>-&gt;<name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>repos</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_REPOS</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><name><name>entry</name>-&gt;<name>repos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<switch>switch <condition>(<expr><name><name>entry</name>-&gt;<name>kind</name></name></expr>)</condition> <block>{
<case>case <expr><name>svn_node_dir</name></expr>:
<expr_stmt><expr><name>valuestr</name> = <name>SVN_WC__ENTRIES_ATTR_DIR_STR</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>svn_node_none</name></expr>:
<expr_stmt><expr><name>valuestr</name> = <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>svn_node_file</name></expr>:
</case><case>case <expr><name>svn_node_unknown</name></expr>:
</case><default>default:
<expr_stmt><expr><name>valuestr</name> = <name>SVN_WC__ENTRIES_ATTR_FILE_STR</name></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_KIND</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>valuestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>entry</name>-&gt;<name>schedule</name></name></expr>)</condition> <block>{
<case>case <expr><name>svn_wc_schedule_add</name></expr>:
<expr_stmt><expr><name>valuestr</name> = <name>SVN_WC__ENTRY_VALUE_ADD</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>svn_wc_schedule_delete</name></expr>:
<expr_stmt><expr><name>valuestr</name> = <name>SVN_WC__ENTRY_VALUE_DELETE</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>svn_wc_schedule_replace</name></expr>:
<expr_stmt><expr><name>valuestr</name> = <name>SVN_WC__ENTRY_VALUE_REPLACE</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>svn_wc_schedule_normal</name></expr>:
</case><default>default:
<expr_stmt><expr><name>valuestr</name> = <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_SCHEDULE</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><name>valuestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>conflict_old</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_CONFLICT_OLD</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><name><name>entry</name>-&gt;<name>conflict_old</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>conflict_new</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_CONFLICT_NEW</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><name><name>entry</name>-&gt;<name>conflict_new</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>conflict_wrk</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_CONFLICT_WRK</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><name><name>entry</name>-&gt;<name>conflict_wrk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>prejfile</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_PREJFILE</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><name><name>entry</name>-&gt;<name>prejfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_COPIED</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr>(<name><name>entry</name>-&gt;<name>copied</name></name> ? "true" : <name>NULL</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>copyfrom_rev</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_COPYFROM_REV</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%ld"</expr></argument>,
<argument><expr><name><name>entry</name>-&gt;<name>copyfrom_rev</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>copyfrom_url</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_COPYFROM_URL</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><name><name>entry</name>-&gt;<name>copyfrom_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_DELETED</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr>(<name><name>entry</name>-&gt;<name>deleted</name></name> ? "true" : <name>NULL</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_ABSENT</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr>(<name><name>entry</name>-&gt;<name>absent</name></name> ? "true" : <name>NULL</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_INCOMPLETE</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr>(<name><name>entry</name>-&gt;<name>incomplete</name></name> ? "true" : <name>NULL</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>text_time</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_TEXT_TIME</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><call><name>svn_time_to_cstring</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>text_time</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>prop_time</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_PROP_TIME</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><call><name>svn_time_to_cstring</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>prop_time</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>checksum</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_CHECKSUM</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><name><name>entry</name>-&gt;<name>checksum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>cmt_rev</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_CMT_REV</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%ld"</expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>cmt_rev</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>cmt_author</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_CMT_AUTHOR</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><name><name>entry</name>-&gt;<name>cmt_author</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>uuid</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_UUID</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><name><name>entry</name>-&gt;<name>uuid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>cmt_date</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_CMT_DATE</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><call><name>svn_time_to_cstring</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>cmt_date</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>lock_token</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_LOCK_TOKEN</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><name><name>entry</name>-&gt;<name>lock_token</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>lock_owner</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_LOCK_OWNER</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><name><name>entry</name>-&gt;<name>lock_owner</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>lock_comment</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_LOCK_COMMENT</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><name><name>entry</name>-&gt;<name>lock_comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>lock_creation_date</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_LOCK_CREATION_DATE</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><call><name>svn_time_to_cstring</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>lock_creation_date</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_HAS_PROPS</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr>(<name><name>entry</name>-&gt;<name>has_props</name></name> ? "true" : <name>NULL</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>has_prop_mods</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_HAS_PROP_MODS</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr>"true"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>cachable_props</name></name> &amp;&amp; *<name><name>entry</name>-&gt;<name>cachable_props</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_CACHABLE_PROPS</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>cachable_props</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>present_props</name></name>
&amp;&amp; *<name><name>entry</name>-&gt;<name>present_props</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_PRESENT_PROPS</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>present_props</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_WC_ENTRY_THIS_DIR</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr>! <call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"."</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_REVISION</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_URL</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_REPOS</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_UUID</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>revision</name></name> == <name><name>this_dir</name>-&gt;<name>revision</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_REVISION</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>uuid</name></name> &amp;&amp; <name><name>this_dir</name>-&gt;<name>uuid</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>uuid</name></name></expr></argument>, <argument><expr><name><name>this_dir</name>-&gt;<name>uuid</name></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_UUID</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>url</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>url</name></name></expr></argument>,
<argument><expr><call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>this_dir</name>-&gt;<name>url</name></name></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_URL</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>repos</name></name> &amp;&amp; <name><name>this_dir</name>-&gt;<name>repos</name></name>
&amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>repos</name></name></expr></argument>, <argument><expr><name><name>this_dir</name>-&gt;<name>repos</name></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_REPOS</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>cachable_props</name></name> &amp;&amp; <name><name>this_dir</name>-&gt;<name>cachable_props</name></name>
&amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>cachable_props</name></name></expr></argument>, <argument><expr><name><name>this_dir</name>-&gt;<name>cachable_props</name></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>atts</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_CACHABLE_PROPS</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><call><name>svn_xml_make_open_tag_hash</name><argument_list>(<argument><expr><name>output</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>,
<argument><expr><name>svn_xml_self_closing</name></expr></argument>,
<argument><expr><name>SVN_WC__ENTRIES_ENTRY</name></expr></argument>,
<argument><expr><name>atts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>write_entries_xml</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> **</type><name>output</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>entries</name></decl></param>,
<param><decl><type><name>svn_wc_entry_t</name> *</type><name>this_dir</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_xml_make_header</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_xml_make_open_tag</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>svn_xml_normal</name></expr></argument>,
<argument><expr><name>SVN_WC__ENTRIES_TOPLEVEL</name></expr></argument>,
<argument><expr>"xmlns"</expr></argument>,
<argument><expr><name>SVN_XML_NAMESPACE</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_entry_xml</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>this_dir</name></expr></argument>, <argument><expr><name>SVN_WC_ENTRY_THIS_DIR</name></expr></argument>, <argument><expr><name>this_dir</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_entry_t</name> *</type><name>this_entry</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>this_entry</name> = <name>val</name></expr>;</expr_stmt>
<if>if <condition>(<expr>! <call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>SVN_WC_ENTRY_THIS_DIR</name></expr></argument> )</argument_list></call></expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><call><name>write_entry_xml</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>this_entry</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>this_dir</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>svn_xml_make_close_tag</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRIES_TOPLEVEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__entries_write</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>entries</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>bigstr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>outfile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_entry_t</name> *</type><name>this_dir</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__adm_write_check</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>this_dir</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>SVN_WC_ENTRY_THIS_DIR</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>this_dir</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_ENTRY_NOT_FOUND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"No default entry in directory '%s'"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_path_local_style</name>
<argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__open_adm_file</name><argument_list>(<argument><expr>&amp;<name>outfile</name></expr></argument>,
<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>SVN_WC__ADM_ENTRIES</name></expr></argument>,
<argument><expr>(<name>APR_WRITE</name> | <name>APR_CREATE</name>)</expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>svn_wc__adm_wc_format</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call> &gt; <name>SVN_WC__XML_ENTRIES_VERSION</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>bigstr</name> = <call><name>svn_stringbuf_createf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%d\n"</expr></argument>,
<argument><expr><call><name>svn_wc__adm_wc_format</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_entry</name><argument_list>(<argument><expr><name>bigstr</name></expr></argument>, <argument><expr><name>this_dir</name></expr></argument>, <argument><expr><name>SVN_WC_ENTRY_THIS_DIR</name></expr></argument>, <argument><expr><name>this_dir</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_entry_t</name> *</type><name>this_entry</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>this_entry</name> = <name>val</name></expr>;</expr_stmt>
<if>if <condition>(<expr>! <call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>SVN_WC_ENTRY_THIS_DIR</name></expr></argument> )</argument_list></call></expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><call><name>write_entry</name><argument_list>(<argument><expr><name>bigstr</name></expr></argument>, <argument><expr><name>this_entry</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>this_dir</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><call><name>write_entries_xml</name><argument_list>(<argument><expr>&amp;<name>bigstr</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>, <argument><expr><name>this_dir</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>SVN_ERR_W</name><argument_list>(<argument><expr><call><name>svn_io_file_write_full</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>, <argument><expr><name><name>bigstr</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr><name><name>bigstr</name>-&gt;<name>len</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Error writing to '%s'"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_path_local_style</name>
<argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_wc__close_adm_file</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>,
<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>SVN_WC__ADM_ENTRIES</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_wc__adm_access_set_entries</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_wc__adm_access_set_entries</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>fold_entry</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>entries</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><name>apr_uint64_t</name></type> <name>modify_flags</name></decl></param>,
<param><decl><type><name>svn_wc_entry_t</name> *</type><name>entry</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_wc_entry_t</name> *</type><name>cur_entry</name>
<init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>name</name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>cur_entry</name></expr>)</condition><then>
<expr_stmt><expr><name>cur_entry</name> = <call><name>alloc_entry</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>! <name><name>cur_entry</name>-&gt;<name>name</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>cur_entry</name>-&gt;<name>name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>modify_flags</name> &amp; <name>SVN_WC__ENTRY_MODIFY_REVISION</name></expr>)</condition><then>
<expr_stmt><expr><name><name>cur_entry</name>-&gt;<name>revision</name></name> = <name><name>entry</name>-&gt;<name>revision</name></name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>modify_flags</name> &amp; <name>SVN_WC__ENTRY_MODIFY_URL</name></expr>)</condition><then>
<expr_stmt><expr><name><name>cur_entry</name>-&gt;<name>url</name></name> = <name><name>entry</name>-&gt;<name>url</name></name> ? <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>url</name></name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>modify_flags</name> &amp; <name>SVN_WC__ENTRY_MODIFY_REPOS</name></expr>)</condition><then>
<expr_stmt><expr><name><name>cur_entry</name>-&gt;<name>repos</name></name> = <name><name>entry</name>-&gt;<name>repos</name></name> ? <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>repos</name></name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>modify_flags</name> &amp; <name>SVN_WC__ENTRY_MODIFY_KIND</name></expr>)</condition><then>
<expr_stmt><expr><name><name>cur_entry</name>-&gt;<name>kind</name></name> = <name><name>entry</name>-&gt;<name>kind</name></name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>modify_flags</name> &amp; <name>SVN_WC__ENTRY_MODIFY_SCHEDULE</name></expr>)</condition><then>
<expr_stmt><expr><name><name>cur_entry</name>-&gt;<name>schedule</name></name> = <name><name>entry</name>-&gt;<name>schedule</name></name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>modify_flags</name> &amp; <name>SVN_WC__ENTRY_MODIFY_CHECKSUM</name></expr>)</condition><then>
<expr_stmt><expr><name><name>cur_entry</name>-&gt;<name>checksum</name></name> = <name><name>entry</name>-&gt;<name>checksum</name></name>
? <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>checksum</name></name></expr></argument>)</argument_list></call>
: <name>NULL</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>modify_flags</name> &amp; <name>SVN_WC__ENTRY_MODIFY_COPIED</name></expr>)</condition><then>
<expr_stmt><expr><name><name>cur_entry</name>-&gt;<name>copied</name></name> = <name><name>entry</name>-&gt;<name>copied</name></name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>modify_flags</name> &amp; <name>SVN_WC__ENTRY_MODIFY_COPYFROM_URL</name></expr>)</condition><then>
<expr_stmt><expr><name><name>cur_entry</name>-&gt;<name>copyfrom_url</name></name> = <name><name>entry</name>-&gt;<name>copyfrom_url</name></name>
? <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>copyfrom_url</name></name></expr></argument>)</argument_list></call>
: <name>NULL</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>modify_flags</name> &amp; <name>SVN_WC__ENTRY_MODIFY_COPYFROM_REV</name></expr>)</condition><then>
<expr_stmt><expr><name><name>cur_entry</name>-&gt;<name>copyfrom_rev</name></name> = <name><name>entry</name>-&gt;<name>copyfrom_rev</name></name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>modify_flags</name> &amp; <name>SVN_WC__ENTRY_MODIFY_DELETED</name></expr>)</condition><then>
<expr_stmt><expr><name><name>cur_entry</name>-&gt;<name>deleted</name></name> = <name><name>entry</name>-&gt;<name>deleted</name></name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>modify_flags</name> &amp; <name>SVN_WC__ENTRY_MODIFY_ABSENT</name></expr>)</condition><then>
<expr_stmt><expr><name><name>cur_entry</name>-&gt;<name>absent</name></name> = <name><name>entry</name>-&gt;<name>absent</name></name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>modify_flags</name> &amp; <name>SVN_WC__ENTRY_MODIFY_INCOMPLETE</name></expr>)</condition><then>
<expr_stmt><expr><name><name>cur_entry</name>-&gt;<name>incomplete</name></name> = <name><name>entry</name>-&gt;<name>incomplete</name></name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>modify_flags</name> &amp; <name>SVN_WC__ENTRY_MODIFY_TEXT_TIME</name></expr>)</condition><then>
<expr_stmt><expr><name><name>cur_entry</name>-&gt;<name>text_time</name></name> = <name><name>entry</name>-&gt;<name>text_time</name></name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>modify_flags</name> &amp; <name>SVN_WC__ENTRY_MODIFY_PROP_TIME</name></expr>)</condition><then>
<expr_stmt><expr><name><name>cur_entry</name>-&gt;<name>prop_time</name></name> = <name><name>entry</name>-&gt;<name>prop_time</name></name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>modify_flags</name> &amp; <name>SVN_WC__ENTRY_MODIFY_CONFLICT_OLD</name></expr>)</condition><then>
<expr_stmt><expr><name><name>cur_entry</name>-&gt;<name>conflict_old</name></name> = <name><name>entry</name>-&gt;<name>conflict_old</name></name>
? <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>conflict_old</name></name></expr></argument>)</argument_list></call>
: <name>NULL</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>modify_flags</name> &amp; <name>SVN_WC__ENTRY_MODIFY_CONFLICT_NEW</name></expr>)</condition><then>
<expr_stmt><expr><name><name>cur_entry</name>-&gt;<name>conflict_new</name></name> = <name><name>entry</name>-&gt;<name>conflict_new</name></name>
? <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>conflict_new</name></name></expr></argument>)</argument_list></call>
: <name>NULL</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>modify_flags</name> &amp; <name>SVN_WC__ENTRY_MODIFY_CONFLICT_WRK</name></expr>)</condition><then>
<expr_stmt><expr><name><name>cur_entry</name>-&gt;<name>conflict_wrk</name></name> = <name><name>entry</name>-&gt;<name>conflict_wrk</name></name>
? <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>conflict_wrk</name></name></expr></argument>)</argument_list></call>
: <name>NULL</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>modify_flags</name> &amp; <name>SVN_WC__ENTRY_MODIFY_PREJFILE</name></expr>)</condition><then>
<expr_stmt><expr><name><name>cur_entry</name>-&gt;<name>prejfile</name></name> = <name><name>entry</name>-&gt;<name>prejfile</name></name>
? <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>prejfile</name></name></expr></argument>)</argument_list></call>
: <name>NULL</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>modify_flags</name> &amp; <name>SVN_WC__ENTRY_MODIFY_CMT_REV</name></expr>)</condition><then>
<expr_stmt><expr><name><name>cur_entry</name>-&gt;<name>cmt_rev</name></name> = <name><name>entry</name>-&gt;<name>cmt_rev</name></name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>modify_flags</name> &amp; <name>SVN_WC__ENTRY_MODIFY_CMT_DATE</name></expr>)</condition><then>
<expr_stmt><expr><name><name>cur_entry</name>-&gt;<name>cmt_date</name></name> = <name><name>entry</name>-&gt;<name>cmt_date</name></name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>modify_flags</name> &amp; <name>SVN_WC__ENTRY_MODIFY_CMT_AUTHOR</name></expr>)</condition><then>
<expr_stmt><expr><name><name>cur_entry</name>-&gt;<name>cmt_author</name></name> = <name><name>entry</name>-&gt;<name>cmt_author</name></name>
? <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>cmt_author</name></name></expr></argument>)</argument_list></call>
: <name>NULL</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>modify_flags</name> &amp; <name>SVN_WC__ENTRY_MODIFY_UUID</name></expr>)</condition><then>
<expr_stmt><expr><name><name>cur_entry</name>-&gt;<name>uuid</name></name> = <name><name>entry</name>-&gt;<name>uuid</name></name>
? <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>uuid</name></name></expr></argument>)</argument_list></call>
: <name>NULL</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>modify_flags</name> &amp; <name>SVN_WC__ENTRY_MODIFY_LOCK_TOKEN</name></expr>)</condition><then>
<expr_stmt><expr><name><name>cur_entry</name>-&gt;<name>lock_token</name></name> = (<name><name>entry</name>-&gt;<name>lock_token</name></name>
? <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>lock_token</name></name></expr></argument>)</argument_list></call>
: <name>NULL</name>)</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>modify_flags</name> &amp; <name>SVN_WC__ENTRY_MODIFY_LOCK_OWNER</name></expr>)</condition><then>
<expr_stmt><expr><name><name>cur_entry</name>-&gt;<name>lock_owner</name></name> = (<name><name>entry</name>-&gt;<name>lock_owner</name></name>
? <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>lock_owner</name></name></expr></argument>)</argument_list></call>
: <name>NULL</name>)</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>modify_flags</name> &amp; <name>SVN_WC__ENTRY_MODIFY_LOCK_COMMENT</name></expr>)</condition><then>
<expr_stmt><expr><name><name>cur_entry</name>-&gt;<name>lock_comment</name></name> = (<name><name>entry</name>-&gt;<name>lock_comment</name></name>
? <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>lock_comment</name></name></expr></argument>)</argument_list></call>
: <name>NULL</name>)</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>modify_flags</name> &amp; <name>SVN_WC__ENTRY_MODIFY_LOCK_CREATION_DATE</name></expr>)</condition><then>
<expr_stmt><expr><name><name>cur_entry</name>-&gt;<name>lock_creation_date</name></name> = <name><name>entry</name>-&gt;<name>lock_creation_date</name></name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>modify_flags</name> &amp; <name>SVN_WC__ENTRY_MODIFY_CHANGELIST</name></expr>)</condition><then>
<expr_stmt><expr><name><name>cur_entry</name>-&gt;<name>changelist</name></name> = (<name><name>entry</name>-&gt;<name>changelist</name></name>
? <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>changelist</name></name></expr></argument>)</argument_list></call>
: <name>NULL</name>)</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>modify_flags</name> &amp; <name>SVN_WC__ENTRY_MODIFY_HAS_PROPS</name></expr>)</condition><then>
<expr_stmt><expr><name><name>cur_entry</name>-&gt;<name>has_props</name></name> = <name><name>entry</name>-&gt;<name>has_props</name></name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>modify_flags</name> &amp; <name>SVN_WC__ENTRY_MODIFY_HAS_PROP_MODS</name></expr>)</condition><then>
<expr_stmt><expr><name><name>cur_entry</name>-&gt;<name>has_prop_mods</name></name> = <name><name>entry</name>-&gt;<name>has_prop_mods</name></name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>modify_flags</name> &amp; <name>SVN_WC__ENTRY_MODIFY_CACHABLE_PROPS</name></expr>)</condition><then>
<expr_stmt><expr><name><name>cur_entry</name>-&gt;<name>cachable_props</name></name> = (<name><name>entry</name>-&gt;<name>cachable_props</name></name>
? <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>cachable_props</name></name></expr></argument>)</argument_list></call>
: <name>NULL</name>)</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>modify_flags</name> &amp; <name>SVN_WC__ENTRY_MODIFY_PRESENT_PROPS</name></expr>)</condition><then>
<expr_stmt><expr><name><name>cur_entry</name>-&gt;<name>present_props</name></name> = (<name><name>entry</name>-&gt;<name>present_props</name></name>
? <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>present_props</name></name></expr></argument>)</argument_list></call>
: <name>NULL</name>)</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>modify_flags</name> &amp; <name>SVN_WC__ENTRY_MODIFY_KEEP_LOCAL</name></expr>)</condition><then>
<expr_stmt><expr><name><name>cur_entry</name>-&gt;<name>keep_local</name></name> = <name><name>entry</name>-&gt;<name>keep_local</name></name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>cur_entry</name>-&gt;<name>kind</name></name> != <name>svn_node_dir</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_wc_entry_t</name> *</type><name>default_entry</name>
<init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>SVN_WC_ENTRY_THIS_DIR</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>default_entry</name></expr>)</condition><then>
<expr_stmt><expr><call><name>take_from_entry</name><argument_list>(<argument><expr><name>default_entry</name></expr></argument>, <argument><expr><name>cur_entry</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>modify_flags</name> &amp; <name>SVN_WC__ENTRY_MODIFY_SCHEDULE</name>
&amp;&amp; <name><name>entry</name>-&gt;<name>schedule</name></name> == <name>svn_wc_schedule_delete</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cur_entry</name>-&gt;<name>copied</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur_entry</name>-&gt;<name>copyfrom_rev</name></name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur_entry</name>-&gt;<name>copyfrom_url</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>modify_flags</name> &amp; <name>SVN_WC__ENTRY_MODIFY_WORKING_SIZE</name></expr>)</condition><then>
<expr_stmt><expr><name><name>cur_entry</name>-&gt;<name>working_size</name></name> = <name><name>entry</name>-&gt;<name>working_size</name></name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>modify_flags</name> &amp; <name>SVN_WC__ENTRY_MODIFY_SCHEDULE</name>
&amp;&amp; <name><name>entry</name>-&gt;<name>schedule</name></name> != <name>svn_wc_schedule_delete</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cur_entry</name>-&gt;<name>keep_local</name></name> = <name>FALSE</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name><name>cur_entry</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>cur_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type>
<name>svn_wc__entry_remove</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>entries</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>fold_scheduling</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>entries</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><name>apr_uint64_t</name> *</type><name>modify_flags</name></decl></param>,
<param><decl><type><name>svn_wc_schedule_t</name> *</type><name>schedule</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_wc_entry_t</name> *</type><name>entry</name></decl>, *<decl><type ref="prev"/><name>this_dir_entry</name></decl>;</decl_stmt>
<if>if <condition>(<expr>! (*<name>modify_flags</name> &amp; <name>SVN_WC__ENTRY_MODIFY_SCHEDULE</name>)</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>entry</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>modify_flags</name> &amp; <name>SVN_WC__ENTRY_MODIFY_FORCE</name></expr>)</condition><then> <block>{
<switch>switch <condition>(<expr>*<name>schedule</name></expr>)</condition> <block>{
<case>case <expr><name>svn_wc_schedule_add</name></expr>:
</case><case>case <expr><name>svn_wc_schedule_delete</name></expr>:
</case><case>case <expr><name>svn_wc_schedule_replace</name></expr>:
</case><case>case <expr><name>svn_wc_schedule_normal</name></expr>:
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
</case><default>default:
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_WC_SCHEDULE_CONFLICT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</default>}</block></switch>
}</block></then></if>
<if>if <condition>(<expr>! <name>entry</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>*<name>schedule</name> == <name>svn_wc_schedule_add</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then>
<else>else
<return>return
<expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_WC_SCHEDULE_CONFLICT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s' is not under version control"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></then></if>
<expr_stmt><expr><name>this_dir_entry</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>SVN_WC_ENTRY_THIS_DIR</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>entry</name> != <name>this_dir_entry</name>)
&amp;&amp; (<name><name>this_dir_entry</name>-&gt;<name>schedule</name></name> == <name>svn_wc_schedule_delete</name>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr>*<name>schedule</name> == <name>svn_wc_schedule_add</name></expr>)</condition><then>
<return>return
<expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_WC_SCHEDULE_CONFLICT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Can't add '%s' to deleted directory; "
"try undeleting its parent directory first"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>*<name>schedule</name> == <name>svn_wc_schedule_replace</name></expr>)</condition><then>
<return>return
<expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_WC_SCHEDULE_CONFLICT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Can't replace '%s' in deleted directory; "
"try undeleting its parent directory first"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>absent</name></name> &amp;&amp; (*<name>schedule</name> == <name>svn_wc_schedule_add</name>)</expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_WC_SCHEDULE_CONFLICT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s' is marked as absent, so it cannot be scheduled for addition"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<switch>switch <condition>(<expr><name><name>entry</name>-&gt;<name>schedule</name></name></expr>)</condition> <block>{
<case>case <expr><name>svn_wc_schedule_normal</name></expr>:
<switch>switch <condition>(<expr>*<name>schedule</name></expr>)</condition> <block>{
<case>case <expr><name>svn_wc_schedule_normal</name></expr>:
<expr_stmt><expr>*<name>modify_flags</name> &amp;= ~<name>SVN_WC__ENTRY_MODIFY_SCHEDULE</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
</case><case>case <expr><name>svn_wc_schedule_delete</name></expr>:
</case><case>case <expr><name>svn_wc_schedule_replace</name></expr>:
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
</case><case>case <expr><name>svn_wc_schedule_add</name></expr>:
<if>if <condition>(<expr>! <name><name>entry</name>-&gt;<name>deleted</name></name></expr>)</condition><then>
<return>return
<expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_WC_SCHEDULE_CONFLICT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Entry '%s' is already under version control"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
</case>}</block></switch>
<break>break;</break>
</case><case>case <expr><name>svn_wc_schedule_add</name></expr>:
<switch>switch <condition>(<expr>*<name>schedule</name></expr>)</condition> <block>{
<case>case <expr><name>svn_wc_schedule_normal</name></expr>:
</case><case>case <expr><name>svn_wc_schedule_add</name></expr>:
</case><case>case <expr><name>svn_wc_schedule_replace</name></expr>:
<expr_stmt><expr>*<name>modify_flags</name> &amp;= ~<name>SVN_WC__ENTRY_MODIFY_SCHEDULE</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
</case><case>case <expr><name>svn_wc_schedule_delete</name></expr>:
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>entry</name> != <name>this_dir_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name><name>entry</name>-&gt;<name>deleted</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr>*<name>schedule</name> = <name>svn_wc_schedule_normal</name></expr>;</expr_stmt></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
</case>}</block></switch>
<break>break;</break>
</case><case>case <expr><name>svn_wc_schedule_delete</name></expr>:
<switch>switch <condition>(<expr>*<name>schedule</name></expr>)</condition> <block>{
<case>case <expr><name>svn_wc_schedule_normal</name></expr>:
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
</case><case>case <expr><name>svn_wc_schedule_delete</name></expr>:
<expr_stmt><expr>*<name>modify_flags</name> &amp;= ~<name>SVN_WC__ENTRY_MODIFY_SCHEDULE</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
</case><case>case <expr><name>svn_wc_schedule_add</name></expr>:
<expr_stmt><expr>*<name>schedule</name> = <name>svn_wc_schedule_replace</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
</case><case>case <expr><name>svn_wc_schedule_replace</name></expr>:
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
</case>}</block></switch>
<break>break;</break>
</case><case>case <expr><name>svn_wc_schedule_replace</name></expr>:
<switch>switch <condition>(<expr>*<name>schedule</name></expr>)</condition> <block>{
<case>case <expr><name>svn_wc_schedule_normal</name></expr>:
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
</case><case>case <expr><name>svn_wc_schedule_add</name></expr>:
</case><case>case <expr><name>svn_wc_schedule_replace</name></expr>:
<expr_stmt><expr>*<name>modify_flags</name> &amp;= ~<name>SVN_WC__ENTRY_MODIFY_SCHEDULE</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
</case><case>case <expr><name>svn_wc_schedule_delete</name></expr>:
<expr_stmt><expr>*<name>schedule</name> = <name>svn_wc_schedule_delete</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
</case>}</block></switch>
<break>break;</break>
</case><default>default:
<return>return
<expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_WC_SCHEDULE_CONFLICT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Entry '%s' has illegal schedule"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</default>}</block></switch>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__entry_modify</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><name>svn_wc_entry_t</name> *</type><name>entry</name></decl></param>,
<param><decl><type><name>apr_uint64_t</name></type> <name>modify_flags</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>do_sync</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>entries</name></decl>, *<decl><type ref="prev"/><name>entries_nohidden</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>entry_was_deleted_p</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entries_read</name><argument_list>(<argument><expr>&amp;<name>entries</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entries_read</name><argument_list>(<argument><expr>&amp;<name>entries_nohidden</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>name</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>name</name> = <name>SVN_WC_ENTRY_THIS_DIR</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>modify_flags</name> &amp; <name>SVN_WC__ENTRY_MODIFY_SCHEDULE</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_wc_entry_t</name> *</type><name>entry_before</name></decl>, *<decl><type ref="prev"/><name>entry_after</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint64_t</name></type> <name>orig_modify_flags</name> <init>= <expr><name>modify_flags</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_schedule_t</name></type> <name>orig_schedule</name> <init>= <expr><name><name>entry</name>-&gt;<name>schedule</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>entry_before</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>fold_scheduling</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>&amp;<name>modify_flags</name></expr></argument>,
<argument><expr>&amp;<name><name>entry</name>-&gt;<name>schedule</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>entries</name> != <name>entries_nohidden</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>fold_scheduling</name><argument_list>(<argument><expr><name>entries_nohidden</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>&amp;<name>orig_modify_flags</name></expr></argument>,
<argument><expr>&amp;<name>orig_schedule</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>orig_modify_flags</name> == <name>modify_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>orig_schedule</name> == <name><name>entry</name>-&gt;<name>schedule</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>entry_after</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>entry_before</name> &amp;&amp; (! <name>entry_after</name>)</expr>)</condition><then>
<expr_stmt><expr><name>entry_was_deleted_p</name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
}</block></then></if>
<if>if <condition>(<expr>! <name>entry_was_deleted_p</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fold_entry</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>modify_flags</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>,
<argument><expr><call><name>svn_wc_adm_access_pool</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>entries</name> != <name>entries_nohidden</name></expr>)</condition><then>
<expr_stmt><expr><call><name>fold_entry</name><argument_list>(<argument><expr><name>entries_nohidden</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>modify_flags</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>,
<argument><expr><call><name>svn_wc_adm_access_pool</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>do_sync</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entries_write</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_wc_entry_t</name> *</type>
<name>svn_wc_entry_dup</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_wc_entry_t</name> *</type><name>dupentry</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>dupentry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>dupentry</name> = *<name>entry</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>name</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>dupentry</name>-&gt;<name>name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>url</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>dupentry</name>-&gt;<name>url</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>repos</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>dupentry</name>-&gt;<name>repos</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>repos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>uuid</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>dupentry</name>-&gt;<name>uuid</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>uuid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>copyfrom_url</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>dupentry</name>-&gt;<name>copyfrom_url</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>copyfrom_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>conflict_old</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>dupentry</name>-&gt;<name>conflict_old</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>conflict_old</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>conflict_new</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>dupentry</name>-&gt;<name>conflict_new</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>conflict_new</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>conflict_wrk</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>dupentry</name>-&gt;<name>conflict_wrk</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>conflict_wrk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>prejfile</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>dupentry</name>-&gt;<name>prejfile</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>prejfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>checksum</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>dupentry</name>-&gt;<name>checksum</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>checksum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>cmt_author</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>dupentry</name>-&gt;<name>cmt_author</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>cmt_author</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>lock_token</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>dupentry</name>-&gt;<name>lock_token</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>lock_token</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>lock_owner</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>dupentry</name>-&gt;<name>lock_owner</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>lock_owner</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>lock_comment</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>dupentry</name>-&gt;<name>lock_comment</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>lock_comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>changelist</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>dupentry</name>-&gt;<name>changelist</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>changelist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>cachable_props</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>dupentry</name>-&gt;<name>cachable_props</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>cachable_props</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>present_props</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>dupentry</name>-&gt;<name>present_props</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>present_props</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>dupentry</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__tweak_entry</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>entries</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>new_url</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>new_rev</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>allow_removal</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name> *</type><name>write_required</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
<expr_stmt><expr><name>entry</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>entry</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_ENTRY_NOT_FOUND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"No such entry: '%s'"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>new_url</name> != <name>NULL</name>
&amp;&amp; (! <name><name>entry</name>-&gt;<name>url</name></name> || <call><name>strcmp</name><argument_list>(<argument><expr><name>new_url</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>url</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>write_required</name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>url</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>new_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>repos</name> != <name>NULL</name>
&amp;&amp; (! <name><name>entry</name>-&gt;<name>repos</name></name> || <call><name>strcmp</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>repos</name></name></expr></argument>)</argument_list></call>)
&amp;&amp; <name><name>entry</name>-&gt;<name>url</name></name>
&amp;&amp; <call><name>svn_path_is_ancestor</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>url</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>set_repos</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>SVN_WC_ENTRY_THIS_DIR</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition>
<incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>child_entry</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>child_entry</name> = <name>value</name></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name><name>child_entry</name>-&gt;<name>repos</name></name> &amp;&amp; <name><name>child_entry</name>-&gt;<name>url</name></name>
&amp;&amp; ! <call><name>svn_path_is_ancestor</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name><name>child_entry</name>-&gt;<name>url</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>set_repos</name> = <name>FALSE</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></for>
}</block></then></if>
<if>if <condition>(<expr><name>set_repos</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>write_required</name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>repos</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>(<call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>new_rev</name></expr></argument>)</argument_list></call>)
&amp;&amp; (<name><name>entry</name>-&gt;<name>schedule</name></name> != <name>svn_wc_schedule_add</name>)
&amp;&amp; (<name><name>entry</name>-&gt;<name>schedule</name></name> != <name>svn_wc_schedule_replace</name>)
&amp;&amp; (<name><name>entry</name>-&gt;<name>copied</name></name> != <name>TRUE</name>)
&amp;&amp; (<name><name>entry</name>-&gt;<name>revision</name></name> != <name>new_rev</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>write_required</name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>revision</name></name> = <name>new_rev</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>allow_removal</name>
&amp;&amp; (<name><name>entry</name>-&gt;<name>deleted</name></name> || (<name><name>entry</name>-&gt;<name>absent</name></name> &amp;&amp; <name><name>entry</name>-&gt;<name>revision</name></name> != <name>new_rev</name>))</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>write_required</name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__entries_init</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>uuid</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>initial_rev</name></decl></param>,
<param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>accum</name> <init>= <expr><call><name>svn_stringbuf_createf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%d\n"</expr></argument>,
<argument><expr><name>SVN_WC__VERSION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_entry_t</name> *</type><name>entry</name> <init>= <expr><call><name>alloc_entry</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>! <name>repos</name> || <call><name>svn_path_is_ancestor</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>depth</name> == <name>svn_depth_empty</name>
|| <name>depth</name> == <name>svn_depth_files</name>
|| <name>depth</name> == <name>svn_depth_immediates</name>
|| <name>depth</name> == <name>svn_depth_infinity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__open_adm_file</name><argument_list>(<argument><expr>&amp;<name>f</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>SVN_WC__ADM_ENTRIES</name></expr></argument>,
<argument><expr>(<name>APR_WRITE</name> | <name>APR_CREATE</name> | <name>APR_EXCL</name>)</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>kind</name></name> = <name>svn_node_dir</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>url</name></name> = <name>url</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>revision</name></name> = <name>initial_rev</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>uuid</name></name> = <name>uuid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>repos</name></name> = <name>repos</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>depth</name></name> = <name>depth</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>initial_rev</name> &gt; 0</expr>)</condition><then>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>incomplete</name></name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>cachable_props</name></name> = <name>SVN_WC__CACHABLE_PROPS</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>write_entry</name><argument_list>(<argument><expr><name>accum</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>SVN_WC_ENTRY_THIS_DIR</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR_W</name><argument_list>(<argument><expr><call><name>svn_io_file_write_full</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>accum</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>accum</name>-&gt;<name>len</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Error writing entries file for '%s'"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__close_adm_file</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>SVN_WC__ADM_ENTRIES</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>walker_helper</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dirpath</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_wc_entry_callbacks2_t</name> *</type><name>walk_callbacks</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>walk_baton</name></decl></param>,
<param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>show_hidden</name></decl></param>,
<param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>entries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_entry_t</name> *</type><name>dot_entry</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>walk_callbacks</name>-&gt;<name>handle_error</name></name>
<argument_list>(<argument><expr><name>dirpath</name></expr></argument>, <argument><expr><call><name>svn_wc_entries_read</name><argument_list>(<argument><expr>&amp;<name>entries</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>show_hidden</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>walk_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dot_entry</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>SVN_WC_ENTRY_THIS_DIR</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>dot_entry</name></expr>)</condition><then>
<return>return <expr><call><name><name>walk_callbacks</name>-&gt;<name>handle_error</name></name>
<argument_list>(<argument><expr><name>dirpath</name></expr></argument>, <argument><expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_ENTRY_NOT_FOUND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Directory '%s' has no THIS_DIR entry"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>dirpath</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>walk_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>walk_callbacks</name>-&gt;<name>handle_error</name></name>
<argument_list>(<argument><expr><name>dirpath</name></expr></argument>,
<argument><expr><call><name><name>walk_callbacks</name>-&gt;<name>found_entry</name></name><argument_list>(<argument><expr><name>dirpath</name></expr></argument>, <argument><expr><name>dot_entry</name></expr></argument>, <argument><expr><name>walk_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>walk_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>depth</name> == <name>svn_depth_empty</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>current_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>entrypath</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cancel_func</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>cancel_func</name><argument_list>(<argument><expr><name>cancel_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>current_entry</name> = <name>val</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>current_entry</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>SVN_WC_ENTRY_THIS_DIR</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><name>entrypath</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>dirpath</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>current_entry</name>-&gt;<name>kind</name></name> == <name>svn_node_file</name>
|| <name>depth</name> &gt;= <name>svn_depth_immediates</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>walk_callbacks</name>-&gt;<name>handle_error</name></name>
<argument_list>(<argument><expr><name>entrypath</name></expr></argument>,
<argument><expr><call><name><name>walk_callbacks</name>-&gt;<name>found_entry</name></name><argument_list>(<argument><expr><name>entrypath</name></expr></argument>, <argument><expr><name>current_entry</name></expr></argument>,
<argument><expr><name>walk_baton</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>walk_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>current_entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name>
&amp;&amp; <name>depth</name> &gt;= <name>svn_depth_immediates</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>entry_access</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_depth_t</name></type> <name>depth_below_here</name> <init>= <expr><name>depth</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>depth</name> == <name>svn_depth_immediates</name></expr>)</condition><then>
<expr_stmt><expr><name>depth_below_here</name> = <name>svn_depth_empty</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>walk_callbacks</name>-&gt;<name>handle_error</name></name>
<argument_list>(<argument><expr><name>entrypath</name></expr></argument>,
<argument><expr><call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr>&amp;<name>entry_access</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>entrypath</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>walk_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>entry_access</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>walker_helper</name><argument_list>(<argument><expr><name>entrypath</name></expr></argument>, <argument><expr><name>entry_access</name></expr></argument>,
<argument><expr><name>walk_callbacks</name></expr></argument>, <argument><expr><name>walk_baton</name></expr></argument>,
<argument><expr><name>depth_below_here</name></expr></argument>, <argument><expr><name>show_hidden</name></expr></argument>,
<argument><expr><name>cancel_func</name></expr></argument>, <argument><expr><name>cancel_baton</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_walk_entries</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_wc_entry_callbacks_t</name> *</type><name>walk_callbacks</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>walk_baton</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>show_hidden</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_wc_walk_entries2</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>walk_callbacks</name></expr></argument>,
<argument><expr><name>walk_baton</name></expr></argument>, <argument><expr><name>show_hidden</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__walker_default_error_handler</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_error_t</name> *</type><name>err</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>walk_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_walk_entries2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_wc_entry_callbacks_t</name> *</type><name>walk_callbacks</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>walk_baton</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>show_hidden</name></decl></param>,
<param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_wc_entry_callbacks2_t</name></type> <name>walk_cb2</name> <init>= <expr><block>{ <expr><name><name>walk_callbacks</name>-&gt;<name>found_entry</name></name></expr>,
<expr><name>svn_wc__walker_default_error_handler</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>svn_wc_walk_entries3</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr>&amp;<name>walk_cb2</name></expr></argument>, <argument><expr><name>walk_baton</name></expr></argument>, <argument><expr><name>svn_depth_infinity</name></expr></argument>,
<argument><expr><name>show_hidden</name></expr></argument>, <argument><expr><name>cancel_func</name></expr></argument>, <argument><expr><name>cancel_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_walk_entries3</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_wc_entry_callbacks2_t</name> *</type><name>walk_callbacks</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>walk_baton</name></decl></param>,
<param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>show_hidden</name></decl></param>,
<param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>show_hidden</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>entry</name></expr>)</condition><then>
<return>return <expr><call><name><name>walk_callbacks</name>-&gt;<name>handle_error</name></name>
<argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_UNVERSIONED_RESOURCE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s' is not under version control"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>walk_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_file</name></expr>)</condition><then>
<return>return <expr><call><name><name>walk_callbacks</name>-&gt;<name>handle_error</name></name>
<argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name><name>walk_callbacks</name>-&gt;<name>found_entry</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>walk_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>walk_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name></expr>)</condition><then>
<return>return <expr><call><name>walker_helper</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>walk_callbacks</name></expr></argument>, <argument><expr><name>walk_baton</name></expr></argument>,
<argument><expr><name>depth</name></expr></argument>, <argument><expr><name>show_hidden</name></expr></argument>, <argument><expr><name>cancel_func</name></expr></argument>, <argument><expr><name>cancel_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else
<return>return <expr><call><name><name>walk_callbacks</name>-&gt;<name>handle_error</name></name>
<argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_NODE_UNKNOWN_KIND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s' has an unrecognized node kind"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>walk_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return></else></if></else></if>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_mark_missing_deleted</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>parent</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>pkind</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_check_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>&amp;<name>pkind</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>pkind</name> == <name>svn_node_none</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>parent_path</name></decl>, *<decl><type ref="prev"/><name>bname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_entry_t</name></type> <name>newent</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>newent</name>.<name>deleted</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newent</name>.<name>schedule</name></name> = <name>svn_wc_schedule_normal</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_path_split</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>&amp;<name>parent_path</name></expr></argument>, <argument><expr>&amp;<name>bname</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>parent_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_modify</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>bname</name></expr></argument>, <argument><expr>&amp;<name>newent</name></expr></argument>,
<argument><expr>(<name>SVN_WC__ENTRY_MODIFY_DELETED</name>
| <name>SVN_WC__ENTRY_MODIFY_SCHEDULE</name>
| <name>SVN_WC__ENTRY_MODIFY_FORCE</name>)</expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then> <else>else
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_WC_PATH_FOUND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Unexpectedly found '%s': "
"path is marked 'missing'"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>
</unit>
