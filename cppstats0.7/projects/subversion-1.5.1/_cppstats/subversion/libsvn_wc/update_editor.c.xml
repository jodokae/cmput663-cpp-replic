<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/libsvn_wc/update_editor.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_hash.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_md5.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_tables.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_file_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_delta.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_xml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_md5.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"questions.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"adm_files.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"adm_ops.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"entries.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"props.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"translate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_wc_private.h"</cpp:file></cpp:include>
<function_decl><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>add_file_with_history</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_rev</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>file_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<struct>struct <name>edit_baton</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>anchor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>ext_patterns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name> *</type><name>target_revision</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_depth_t</name></type> <name>requested_depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>depth_is_sticky</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>use_commit_times</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>root_opened</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>target_deleted</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>allow_unver_obstructions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>switch_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>diff3_cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_traversal_info_t</name> *</type><name>traversal_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_notify_func2_t</name></type> <name>notify_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>notify_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>cancel_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_conflict_resolver_func_t</name></type> <name>conflict_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>conflict_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_get_file_t</name></type> <name>fetch_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>fetch_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>skipped_paths</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>dir_baton</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>new_URL</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>edit_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>parent_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>added</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>existed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>add_existed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>propchanges</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>bump_dir_info</name> *</type><name>bump_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>log_number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>log_accum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_depth_t</name></type> <name>ambient_depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>bump_dir_info</name> <block>{
<decl_stmt><decl><type>struct <name>bump_dir_info</name> *</type><name>parent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ref_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>skipped</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>handler_baton</name> <block>{
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>source</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>dest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_txdelta_window_handler_t</name></type> <name>apply_handler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>apply_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>fb</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>get_entry_url</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>associated_access</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dir</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name>associated_access</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><call><name>svn_path_join_many</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>err</name> || (! <name>entry</name>) || (! <name><name>entry</name>-&gt;<name>url</name></name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><name><name>entry</name>-&gt;<name>url</name></name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>flush_log</name><parameter_list>(<param><decl><type>struct <name>dir_baton</name> *</type><name>db</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>! <call><name>svn_stringbuf_isempty</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>log_accum</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>edit_baton</name>-&gt;<name>adm_access</name></name></expr></argument>,
<argument><expr><name><name>db</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__write_log</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>log_number</name></name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>log_accum</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>db</name>-&gt;<name>log_number</name></name>++</expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_setempty</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>log_accum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type>
<name>cleanup_dir_baton</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>dir_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>db</name> <init>= <expr><name>dir_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>apr_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name> <init>= <expr><call><name>apr_pool_parent_get</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> = <call><name>flush_log</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>err</name> &amp;&amp; <name><name>db</name>-&gt;<name>log_number</name></name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>edit_baton</name>-&gt;<name>adm_access</name></name></expr></argument>,
<argument><expr><name><name>db</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>svn_wc__run_log</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>err</name></expr>)</condition><then>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return></then></if>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<expr_stmt><expr><name>apr_err</name> = <name><name>err</name>-&gt;<name>apr_err</name></name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>apr_err</name> = <name>APR_SUCCESS</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>apr_err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type>
<name>cleanup_dir_baton_child</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>dir_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>db</name> <init>= <expr><name>dir_baton</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_pool_cleanup_kill</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>cleanup_dir_baton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>make_dir_baton</name><parameter_list>(<param><decl><type>struct <name>dir_baton</name> **</type><name>d_p</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type>struct <name>edit_baton</name> *</type><name>eb</name></decl></param>,
<param><decl><type>struct <name>dir_baton</name> *</type><name>pb</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>added</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>bump_dir_info</name> *</type><name>bdi</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>pb</name> &amp;&amp; (! <name>path</name>)</expr>)</condition><then>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>d</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>d</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name>-&gt;<name>path</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>anchor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>path</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d</name>-&gt;<name>path</name></name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>d</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name>-&gt;<name>name</name></name> = <call><name>svn_path_basename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>d</name>-&gt;<name>name</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>eb</name>-&gt;<name>switch_url</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>! <name>pb</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>! *<name><name>eb</name>-&gt;<name>target</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>d</name>-&gt;<name>new_URL</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>switch_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>d</name>-&gt;<name>new_URL</name></name> = <call><name>svn_path_dirname</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>switch_url</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></then>
<else>else <block>{
<if>if <condition>(<expr>*<name><name>eb</name>-&gt;<name>target</name></name> &amp;&amp; (! <name><name>pb</name>-&gt;<name>parent_baton</name></name>)</expr>)</condition><then>
<expr_stmt><expr><name><name>d</name>-&gt;<name>new_URL</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>switch_url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>d</name>-&gt;<name>new_URL</name></name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>pb</name>-&gt;<name>new_URL</name></name></expr></argument>,
<argument><expr><name><name>d</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>d</name>-&gt;<name>new_URL</name></name> = <call><name>get_entry_url</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>adm_access</name></name></expr></argument>, <argument><expr><name><name>d</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(! <name><name>d</name>-&gt;<name>new_URL</name></name>) &amp;&amp; <name>pb</name></expr>)</condition><then>
<expr_stmt><expr><name><name>d</name>-&gt;<name>new_URL</name></name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>pb</name>-&gt;<name>new_URL</name></name></expr></argument>, <argument><expr><name><name>d</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></else></if>
<expr_stmt><expr><name>bdi</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>bdi</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bdi</name>-&gt;<name>parent</name></name> = <name>pb</name> ? <name><name>pb</name>-&gt;<name>bump_info</name></name> : <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bdi</name>-&gt;<name>ref_count</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>bdi</name>-&gt;<name>path</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>d</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bdi</name>-&gt;<name>skipped</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>pb</name></expr>)</condition><then>
<expr_stmt><expr>++<name><name>bdi</name>-&gt;<name>parent</name>-&gt;<name>ref_count</name></name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>d</name>-&gt;<name>edit_baton</name></name> = <name>eb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name>-&gt;<name>parent_baton</name></name> = <name>pb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name>-&gt;<name>pool</name></name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name>-&gt;<name>propchanges</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_prop_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name>-&gt;<name>added</name></name> = <name>added</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name>-&gt;<name>existed</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name>-&gt;<name>add_existed</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name>-&gt;<name>bump_info</name></name> = <name>bdi</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name>-&gt;<name>log_number</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name>-&gt;<name>log_accum</name></name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name>-&gt;<name>ambient_depth</name></name> = <name>svn_depth_unknown</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name><name>d</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>cleanup_dir_baton</name></expr></argument>,
<argument><expr><name>cleanup_dir_baton_child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>d_p</name> = <name>d</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>complete_directory</name><parameter_list>(<param><decl><type>struct <name>edit_baton</name> *</type><name>eb</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>is_root_dir</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>entries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_entry_t</name> *</type><name>current_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>is_root_dir</name> &amp;&amp; *<name><name>eb</name>-&gt;<name>target</name></name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>adm_access</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entries_read</name><argument_list>(<argument><expr>&amp;<name>entries</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>entry</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>SVN_WC_ENTRY_THIS_DIR</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>entry</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_ENTRY_NOT_FOUND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"No '.' entry in: '%s'"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>incomplete</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>eb</name>-&gt;<name>depth_is_sticky</name></name> &amp;&amp;
(<name><name>eb</name>-&gt;<name>requested_depth</name></name> == <name>svn_depth_infinity</name>
|| (<call><name>strcmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>anchor</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>target</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> == 0
&amp;&amp; <name><name>eb</name>-&gt;<name>requested_depth</name></name> &gt; <name><name>entry</name>-&gt;<name>depth</name></name>))</expr>)</condition><then>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>depth</name></name> = <name><name>eb</name>-&gt;<name>requested_depth</name></name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> = <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name>current_entry</name> = <name>val</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>current_entry</name>-&gt;<name>deleted</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>current_entry</name>-&gt;<name>schedule</name></name> != <name>svn_wc_schedule_add</name></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_wc__entry_remove</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<decl_stmt><decl><type><name>svn_wc_entry_t</name></type> <name>tmpentry</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>tmpentry</name>.<name>deleted</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_modify</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name><name>current_entry</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr>&amp;<name>tmpentry</name></expr></argument>,
<argument><expr><name>SVN_WC__ENTRY_MODIFY_DELETED</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then>
<else>else <if>if <condition>(<expr><name><name>current_entry</name>-&gt;<name>absent</name></name>
&amp;&amp; (<name><name>current_entry</name>-&gt;<name>revision</name></name> != *(<name><name>eb</name>-&gt;<name>target_revision</name></name>))</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_wc__entry_remove</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>current_entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>child_path</name> <init>= <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<call><name>svn_wc__adm_missing</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>child_path</name></expr></argument>)</argument_list></call>)
&amp;&amp; (! <name><name>current_entry</name>-&gt;<name>absent</name></name>)
&amp;&amp; (<name><name>current_entry</name>-&gt;<name>schedule</name></name> != <name>svn_wc_schedule_add</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_wc__entry_remove</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>eb</name>-&gt;<name>notify_func</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_wc_notify_t</name> *</type><name>notify</name>
<init>= <expr><call><name>svn_wc_create_notify</name><argument_list>(<argument><expr><name>child_path</name></expr></argument>,
<argument><expr><name>svn_wc_notify_update_delete</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>notify</name>-&gt;<name>kind</name></name> = <name><name>current_entry</name>-&gt;<name>kind</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call>(* <name><name>eb</name>-&gt;<name>notify_func</name></name>)<argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>notify_baton</name></name></expr></argument>, <argument><expr><name>notify</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></then></if></else></if></else></if>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entries_write</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>maybe_bump_dir_info</name><parameter_list>(<param><decl><type>struct <name>edit_baton</name> *</type><name>eb</name></decl></param>,
<param><decl><type>struct <name>bump_dir_info</name> *</type><name>bdi</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<for>for ( <init>;</init> <condition><expr><name>bdi</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>bdi</name> = <name><name>bdi</name>-&gt;<name>parent</name></name></expr></incr>) <block>{
<if>if <condition>(<expr>--<name><name>bdi</name>-&gt;<name>ref_count</name></name> &gt; 0</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<if>if <condition>(<expr>! <name><name>bdi</name>-&gt;<name>skipped</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>complete_directory</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name><name>bdi</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr><name><name>bdi</name>-&gt;<name>parent</name></name> ? <name>FALSE</name> : <name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></for>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<struct>struct <name>file_baton</name> <block>{
<decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>edit_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>dir_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>new_URL</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>added</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>added_with_history</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>skipped</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>existed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>add_existed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>text_base_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>new_text_base_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copied_text_base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copied_working_text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>copied_base_props</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>copied_working_props</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>received_textdelta</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>propchanges</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>last_changed_date</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>bump_dir_info</name> *</type><name>bump_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><name>APR_MD5_DIGESTSIZE</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>make_file_baton</name><parameter_list>(<param><decl><type>struct <name>file_baton</name> **</type><name>f_p</name></decl></param>,
<param><decl><type>struct <name>dir_baton</name> *</type><name>pb</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>adding</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>f</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>f</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>! <name>path</name></expr>)</condition><then>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>f</name>-&gt;<name>path</name></name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>pb</name>-&gt;<name>edit_baton</name>-&gt;<name>anchor</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name>-&gt;<name>name</name></name> = <call><name>svn_path_basename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>pb</name>-&gt;<name>edit_baton</name>-&gt;<name>switch_url</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>f</name>-&gt;<name>new_URL</name></name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>pb</name>-&gt;<name>new_URL</name></name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>f</name>-&gt;<name>new_URL</name></name> = <call><name>get_entry_url</name><argument_list>(<argument><expr><name><name>pb</name>-&gt;<name>edit_baton</name>-&gt;<name>adm_access</name></name></expr></argument>,
<argument><expr><name><name>pb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>f</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name>-&gt;<name>edit_baton</name></name> = <name><name>pb</name>-&gt;<name>edit_baton</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name>-&gt;<name>propchanges</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_prop_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name>-&gt;<name>bump_info</name></name> = <name><name>pb</name>-&gt;<name>bump_info</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name>-&gt;<name>added</name></name> = <name>adding</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name>-&gt;<name>existed</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name>-&gt;<name>add_existed</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name>-&gt;<name>dir_baton</name></name> = <name>pb</name></expr>;</expr_stmt>
<expr_stmt><expr>++<name><name>f</name>-&gt;<name>bump_info</name>-&gt;<name>ref_count</name></name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>f_p</name> = <name>f</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>window_handler</name><parameter_list>(<param><decl><type><name>svn_txdelta_window_t</name> *</type><name>window</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>handler_baton</name> *</type><name>hb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>fb</name> <init>= <expr><name><name>hb</name>-&gt;<name>fb</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>, *<decl><type ref="prev"/><name>err2</name></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> = <call><name><name>hb</name>-&gt;<name>apply_handler</name></name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name><name>hb</name>-&gt;<name>apply_baton</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>window</name> != <name>NULL</name> &amp;&amp; !<name>err</name></expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>hb</name>-&gt;<name>source</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>fb</name>-&gt;<name>copied_text_base</name></name></expr>)</condition><then>
<expr_stmt><expr><name>err2</name> = <call><name>svn_io_file_close</name><argument_list>(<argument><expr><name><name>hb</name>-&gt;<name>source</name></name></expr></argument>, <argument><expr><name><name>hb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>err2</name> = <call><name>svn_wc__close_text_base</name><argument_list>(<argument><expr><name><name>hb</name>-&gt;<name>source</name></name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>hb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>err2</name> &amp;&amp; !<name>err</name></expr>)</condition><then>
<expr_stmt><expr><name>err</name> = <name>err2</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></then></if>
<expr_stmt><expr><name>err2</name> = <call><name>svn_wc__close_text_base</name><argument_list>(<argument><expr><name><name>hb</name>-&gt;<name>dest</name></name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>hb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err2</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name>err</name></expr>)</condition><then>
<expr_stmt><expr><name>err</name> = <name>err2</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></then></if>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name>svn_io_remove_file</name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>new_text_base_path</name></name></expr></argument>, <argument><expr><name><name>hb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fb</name>-&gt;<name>new_text_base_path</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name><name>hb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>prep_directory</name><parameter_list>(<param><decl><type>struct <name>dir_baton</name> *</type><name>db</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ancestor_url</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>ancestor_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__ensure_directory</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>db</name>-&gt;<name>edit_baton</name>-&gt;<name>repos</name></name>
&amp;&amp; <call><name>svn_path_is_ancestor</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>edit_baton</name>-&gt;<name>repos</name></name></expr></argument>, <argument><expr><name>ancestor_url</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>repos</name> = <name><name>db</name>-&gt;<name>edit_baton</name>-&gt;<name>repos</name></name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>repos</name> = <name>NULL</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_ensure_adm3</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>ancestor_url</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>,
<argument><expr><name>ancestor_revision</name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>ambient_depth</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name><name>db</name>-&gt;<name>edit_baton</name>-&gt;<name>adm_access</name></name>
|| <call><name>strcmp</name><argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>edit_baton</name>-&gt;<name>adm_access</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>db</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>adm_access_pool</name>
<init>= <expr><name><name>db</name>-&gt;<name>edit_baton</name>-&gt;<name>adm_access</name></name>
? <call><name>svn_wc_adm_access_pool</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>edit_baton</name>-&gt;<name>adm_access</name></name></expr></argument>)</argument_list></call>
: <name><name>db</name>-&gt;<name>edit_baton</name>-&gt;<name>pool</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><call><name>svn_wc_adm_open3</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>,
<argument><expr><name><name>db</name>-&gt;<name>edit_baton</name>-&gt;<name>adm_access</name></name></expr></argument>,
<argument><expr><name><name>db</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>adm_access_pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> &amp;&amp; <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_WC_LOCKED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>,
<argument><expr><name><name>db</name>-&gt;<name>edit_baton</name>-&gt;<name>adm_access</name></name></expr></argument>,
<argument><expr><name><name>db</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>adm_access_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>db</name>-&gt;<name>edit_baton</name>-&gt;<name>adm_access</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>db</name>-&gt;<name>edit_baton</name>-&gt;<name>adm_access</name></name> = <name>adm_access</name></expr>;</expr_stmt></then></if>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>accumulate_entry_props</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> *</type><name>log_accum</name></decl></param>,
<param><decl><type><name>svn_wc_notify_lock_state_t</name> *</type><name>lock_state</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>entry_props</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_entry_t</name></type> <name>tmp_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint64_t</name></type> <name>flags</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>lock_state</name></expr>)</condition><then>
<expr_stmt><expr>*<name>lock_state</name> = <name>svn_wc_notify_lock_state_unchanged</name></expr>;</expr_stmt></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>entry_props</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_prop_t</name> *</type><name>prop</name> <init>= <expr>&amp;<call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>entry_props</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_prop_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl>;</decl_stmt>
<if>if <condition>(<expr>! <call><name>strcmp</name><argument_list>(<argument><expr><name><name>prop</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>SVN_PROP_ENTRY_LOCK_TOKEN</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__loggy_delete_lock</name>
<argument_list>(<argument><expr>&amp;<name>log_accum</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>lock_state</name></expr>)</condition><then>
<expr_stmt><expr>*<name>lock_state</name> = <name>svn_wc_notify_lock_state_unlocked</name></expr>;</expr_stmt></then></if>
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr>! <name><name>prop</name>-&gt;<name>value</name></name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><name>val</name> = <name><name>prop</name>-&gt;<name>value</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>! <call><name>strcmp</name><argument_list>(<argument><expr><name><name>prop</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>SVN_PROP_ENTRY_LAST_AUTHOR</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>flags</name> |= <name>SVN_WC__ENTRY_MODIFY_CMT_AUTHOR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp_entry</name>.<name>cmt_author</name></name> = <name>val</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>! <call><name>strcmp</name><argument_list>(<argument><expr><name><name>prop</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>SVN_PROP_ENTRY_COMMITTED_REV</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>flags</name> |= <name>SVN_WC__ENTRY_MODIFY_CMT_REV</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp_entry</name>.<name>cmt_rev</name></name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>! <call><name>strcmp</name><argument_list>(<argument><expr><name><name>prop</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>SVN_PROP_ENTRY_COMMITTED_DATE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>flags</name> |= <name>SVN_WC__ENTRY_MODIFY_CMT_DATE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_time_from_cstring</name><argument_list>(<argument><expr>&amp;<name><name>tmp_entry</name>.<name>cmt_date</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>! <call><name>strcmp</name><argument_list>(<argument><expr><name><name>prop</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>SVN_PROP_ENTRY_UUID</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>flags</name> |= <name>SVN_WC__ENTRY_MODIFY_UUID</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp_entry</name>.<name>uuid</name></name> = <name>val</name></expr>;</expr_stmt>
}</block></then></if></else></if></else></if></else></if>
}</block></for>
<if>if <condition>(<expr><name>flags</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__loggy_entry_modify</name><argument_list>(<argument><expr>&amp;<name>log_accum</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
<argument><expr>&amp;<name>tmp_entry</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>accumulate_wcprops</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> *</type><name>log_accum</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>wcprops</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>wcprops</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_prop_t</name> *</type><name>prop</name> <init>= <expr>&amp;<call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>wcprops</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_prop_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__loggy_modify_wcprop</name>
<argument_list>(<argument><expr>&amp;<name>log_accum</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
<argument><expr><name><name>prop</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>prop</name>-&gt;<name>value</name></name> ? <name><name>prop</name>-&gt;<name>value</name>-&gt;<name>data</name></name> : <name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>check_path_under_root</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>add_path</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>full_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>path_status</name></decl>;</decl_stmt>
<expr_stmt><expr><name>path_status</name> = <call><name>apr_filepath_merge</name>
<argument_list>(<argument><expr>&amp;<name>full_path</name></expr></argument>, <argument><expr><name>base_path</name></expr></argument>, <argument><expr><name>add_path</name></expr></argument>,
<argument><expr><name>APR_FILEPATH_NOTABOVEROOT</name> | <name>APR_FILEPATH_SECUREROOTTEST</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>path_status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_WC_OBSTRUCTED_UPDATE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Path '%s' is not in the working copy"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name>base_path</name></expr></argument>, <argument><expr><name>add_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>set_target_revision</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>target_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*(<name><name>eb</name>-&gt;<name>target_revision</name></name>) = <name>target_revision</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>open_root</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>dir_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>d</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>root_opened</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>make_dir_baton</name><argument_list>(<argument><expr>&amp;<name>d</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>eb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>dir_baton</name> = <name>d</name></expr>;</expr_stmt>
<if>if <condition>(<expr>! *<name><name>eb</name>-&gt;<name>target</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_entry_t</name></type> <name>tmp_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint64_t</name></type> <name>flags</name> <init>= <expr><name>SVN_WC__ENTRY_MODIFY_REVISION</name> |
<name>SVN_WC__ENTRY_MODIFY_URL</name> | <name>SVN_WC__ENTRY_MODIFY_INCOMPLETE</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name><name>d</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>adm_access</name></name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>entry</name></expr>)</condition><then>
<expr_stmt><expr><name><name>d</name>-&gt;<name>ambient_depth</name></name> = <name><name>entry</name>-&gt;<name>depth</name></name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>tmp_entry</name>.<name>revision</name></name> = *(<name><name>eb</name>-&gt;<name>target_revision</name></name>)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp_entry</name>.<name>url</name></name> = <name><name>d</name>-&gt;<name>new_URL</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>eb</name>-&gt;<name>repos</name></name> &amp;&amp; <call><name>svn_path_is_ancestor</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>repos</name></name></expr></argument>, <argument><expr><name><name>d</name>-&gt;<name>new_URL</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>tmp_entry</name>.<name>repos</name></name> = <name><name>eb</name>-&gt;<name>repos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> |= <name>SVN_WC__ENTRY_MODIFY_REPOS</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>tmp_entry</name>.<name>incomplete</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>adm_access</name></name></expr></argument>,
<argument><expr><name><name>d</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_modify</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> ,
<argument><expr>&amp;<name>tmp_entry</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument> ,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>leftmod_error_chain</name><parameter_list>(<param><decl><type><name>svn_error_t</name> *</type><name>err</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>logfile</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>tmp_err</name></decl>;</decl_stmt>
<if>if <condition>(<expr>! <name>err</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<for>for (<init><expr><name>tmp_err</name> = <name>err</name></expr>;</init> <condition><expr><name>tmp_err</name></expr>;</condition> <incr><expr><name>tmp_err</name> = <name><name>tmp_err</name>-&gt;<name>child</name></name></expr></incr>)
<if>if <condition>(<expr><name><name>tmp_err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_WC_LEFT_LOCAL_MOD</name></expr>)</condition><then>
<break>break;</break></then></if></for>
<if>if <condition>(<expr><name>tmp_err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name>svn_io_remove_file</name><argument_list>(<argument><expr><name>logfile</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_WC_OBSTRUCTED_UPDATE</name></expr></argument>, <argument><expr><name>tmp_err</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Won't delete locally modified directory '%s'"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>do_entry_deletion</name><parameter_list>(<param><decl><type>struct <name>edit_baton</name> *</type><name>eb</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>parent_path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>int</name> *</type><name>log_number</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>full_path</name> <init>= <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>anchor</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>log_item</name> <init>= <expr><call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>adm_access</name></name></expr></argument>,
<argument><expr><name>parent_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__loggy_delete_entry</name><argument_list>(<argument><expr>&amp;<name>log_item</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>full_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_versioned</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name>full_path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>target</name></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_wc_entry_t</name></type> <name>tmp_entry</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>tmp_entry</name>.<name>revision</name></name> = *(<name><name>eb</name>-&gt;<name>target_revision</name></name>)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp_entry</name>.<name>kind</name></name> =
(<name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_file</name>) ? <name>svn_node_file</name> : <name>svn_node_dir</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp_entry</name>.<name>deleted</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__loggy_entry_modify</name><argument_list>(<argument><expr>&amp;<name>log_item</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>full_path</name></expr></argument>, <argument><expr>&amp;<name>tmp_entry</name></expr></argument>,
<argument><expr><name>SVN_WC__ENTRY_MODIFY_REVISION</name>
| <name>SVN_WC__ENTRY_MODIFY_KIND</name>
| <name>SVN_WC__ENTRY_MODIFY_DELETED</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>target_deleted</name></name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__write_log</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr>*<name>log_number</name></expr></argument>, <argument><expr><name>log_item</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>eb</name>-&gt;<name>switch_url</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>child_access</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>logfile_path</name>
<init>= <expr><call><name>svn_wc__adm_path</name><argument_list>(<argument><expr><name>parent_path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>,
<argument><expr><call><name>svn_wc__logfile_path</name><argument_list>(<argument><expr>*<name>log_number</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_retrieve</name>
<argument_list>(<argument><expr>&amp;<name>child_access</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>adm_access</name></name></expr></argument>,
<argument><expr><name>full_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>leftmod_error_chain</name>
<argument_list>(<argument><expr><call><name>svn_wc_remove_from_revision_control</name>
<argument_list>(<argument><expr><name>child_access</name></expr></argument>,
<argument><expr><name>SVN_WC_ENTRY_THIS_DIR</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>,
<argument><expr><name><name>eb</name>-&gt;<name>cancel_func</name></name></expr></argument>,
<argument><expr><name><name>eb</name>-&gt;<name>cancel_baton</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>logfile_path</name></expr></argument>, <argument><expr><name>parent_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__run_log</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>log_number</name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>eb</name>-&gt;<name>notify_func</name></name></expr>)</condition><then>
<expr_stmt><expr><call>(*<name><name>eb</name>-&gt;<name>notify_func</name></name>)
<argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>notify_baton</name></name></expr></argument>,
<argument><expr><call><name>svn_wc_create_notify</name><argument_list>(<argument><expr><name>full_path</name></expr></argument>,
<argument><expr><name>svn_wc_notify_update_delete</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>delete_entry</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_path_under_root</name><argument_list>(<argument><expr><name><name>pb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><call><name>svn_path_basename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>do_entry_deletion</name><argument_list>(<argument><expr><name><name>pb</name>-&gt;<name>edit_baton</name></name></expr></argument>, <argument><expr><name><name>pb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr>&amp;<name><name>pb</name>-&gt;<name>log_number</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>add_directory</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>child_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>pb</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>db</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>make_dir_baton</name><argument_list>(<argument><expr>&amp;<name>db</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>eb</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>child_baton</name> = <name>db</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>target</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>db</name>-&gt;<name>ambient_depth</name></name> = (<name><name>eb</name>-&gt;<name>requested_depth</name></name> == <name>svn_depth_unknown</name>)
? <name>svn_depth_infinity</name> : <name><name>eb</name>-&gt;<name>requested_depth</name></name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>eb</name>-&gt;<name>requested_depth</name></name> == <name>svn_depth_immediates</name>
|| (<name><name>eb</name>-&gt;<name>requested_depth</name></name> == <name>svn_depth_unknown</name>
&amp;&amp; <name><name>pb</name>-&gt;<name>ambient_depth</name></name> == <name>svn_depth_immediates</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>db</name>-&gt;<name>ambient_depth</name></name> = <name>svn_depth_empty</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>db</name>-&gt;<name>ambient_depth</name></name> = <name>svn_depth_infinity</name></expr>;</expr_stmt>
}</block></else></if></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>flush_log</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>copyfrom_path</name> &amp;&amp; (! <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>copyfrom_revision</name></expr></argument>)</argument_list></call>))
|| ((! <name>copyfrom_path</name>) &amp;&amp; (<call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>copyfrom_revision</name></expr></argument>)</argument_list></call>))</expr>)</condition><then>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_path_under_root</name><argument_list>(<argument><expr><name><name>pb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_check_path</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>kind</name> == <name>svn_node_file</name> || <name>kind</name> == <name>svn_node_unknown</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_WC_OBSTRUCTED_UPDATE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Failed to add directory '%s': a non-directory object of the "
"same name already exists"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>kind</name> == <name>svn_node_dir</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><call><name>svn_wc_adm_open3</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name><name>db</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> &amp;&amp; <name><name>err</name>-&gt;<name>apr_err</name></name> != <name>SVN_ERR_WC_NOT_DIRECTORY</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>eb</name>-&gt;<name>allow_unver_obstructions</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>db</name>-&gt;<name>existed</name></name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_WC_OBSTRUCTED_UPDATE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Failed to add directory '%s': an unversioned "
"directory of the same name already exists"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>entry</name>
&amp;&amp; <name><name>entry</name>-&gt;<name>schedule</name></name> == <name>svn_wc_schedule_add</name>
&amp;&amp; ! <name><name>entry</name>-&gt;<name>copied</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>db</name>-&gt;<name>add_existed</name></name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_WC_OBSTRUCTED_UPDATE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Failed to add directory '%s': a versioned "
"directory of the same name already exists"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
}</block></else></if></else></if>
}</block></then></if>
<if>if <condition>(<expr><call><name>svn_wc_is_adm_dir</name><argument_list>(<argument><expr><call><name>svn_path_basename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_WC_OBSTRUCTED_UPDATE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Failed to add directory '%s': object of the same name as the "
"administrative directory"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>copyfrom_path</name> || <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>copyfrom_revision</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_UNSUPPORTED_FEATURE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Failed to add directory '%s': "
"copyfrom arguments not yet supported"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_entry_t</name></type> <name>tmp_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint64_t</name></type> <name>modify_flags</name> <init>= <expr><name>SVN_WC__ENTRY_MODIFY_KIND</name> |
<name>SVN_WC__ENTRY_MODIFY_DELETED</name> | <name>SVN_WC__ENTRY_MODIFY_ABSENT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>adm_access</name></name></expr></argument>,
<argument><expr><name><name>pb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp_entry</name>.<name>kind</name></name> = <name>svn_node_dir</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp_entry</name>.<name>deleted</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp_entry</name>.<name>absent</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>db</name>-&gt;<name>add_existed</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>tmp_entry</name>.<name>schedule</name></name> = <name>svn_wc_schedule_normal</name></expr>;</expr_stmt>
<expr_stmt><expr><name>modify_flags</name> |= <name>SVN_WC__ENTRY_MODIFY_SCHEDULE</name> |
<name>SVN_WC__ENTRY_MODIFY_FORCE</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_modify</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>&amp;<name>tmp_entry</name></expr></argument>,
<argument><expr><name>modify_flags</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument> , <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>db</name>-&gt;<name>add_existed</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>modify_flags</name> = <name>SVN_WC__ENTRY_MODIFY_SCHEDULE</name>
| <name>SVN_WC__ENTRY_MODIFY_FORCE</name> | <name>SVN_WC__ENTRY_MODIFY_REVISION</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>,
<argument><expr><name><name>db</name>-&gt;<name>edit_baton</name>-&gt;<name>adm_access</name></name></expr></argument>,
<argument><expr><name><name>db</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp_entry</name>.<name>revision</name></name> = *(<name><name>eb</name>-&gt;<name>target_revision</name></name>)</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>eb</name>-&gt;<name>switch_url</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>tmp_entry</name>.<name>url</name></name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>switch_url</name></name></expr></argument>,
<argument><expr><name><name>db</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>modify_flags</name> |= <name>SVN_WC__ENTRY_MODIFY_URL</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_modify</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>tmp_entry</name></expr></argument>,
<argument><expr><name>modify_flags</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument> , <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>prep_directory</name><argument_list>(<argument><expr><name>db</name></expr></argument>,
<argument><expr><name><name>db</name>-&gt;<name>new_URL</name></name></expr></argument>,
<argument><expr>*(<name><name>eb</name>-&gt;<name>target_revision</name></name>)</expr></argument>,
<argument><expr><name><name>db</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>eb</name>-&gt;<name>notify_func</name></name> &amp;&amp; !(<name><name>db</name>-&gt;<name>add_existed</name></name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_wc_notify_t</name> *</type><name>notify</name> <init>= <expr><call><name>svn_wc_create_notify</name><argument_list>(
<argument><expr><name><name>db</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr><name><name>db</name>-&gt;<name>existed</name></name> ?
<name>svn_wc_notify_exists</name> : <name>svn_wc_notify_update_add</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>notify</name>-&gt;<name>kind</name></name> = <name>svn_node_dir</name></expr>;</expr_stmt>
<expr_stmt><expr><call>(*<name><name>eb</name>-&gt;<name>notify_func</name></name>)<argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>notify_baton</name></name></expr></argument>, <argument><expr><name>notify</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>open_directory</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>child_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>db</name></decl>, *<decl><type ref="prev"/><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>pb</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_entry_t</name></type> <name>tmp_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint64_t</name></type> <name>flags</name> <init>= <expr><name>SVN_WC__ENTRY_MODIFY_REVISION</name> |
<name>SVN_WC__ENTRY_MODIFY_URL</name> | <name>SVN_WC__ENTRY_MODIFY_INCOMPLETE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>make_dir_baton</name><argument_list>(<argument><expr>&amp;<name>db</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>eb</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>child_baton</name> = <name>db</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>flush_log</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_path_under_root</name><argument_list>(<argument><expr><name><name>pb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>adm_access</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>entry</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>text_conflicted</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>prop_conflicted</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>db</name>-&gt;<name>ambient_depth</name></name> = <name><name>entry</name>-&gt;<name>depth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_conflicted_p</name><argument_list>(<argument><expr>&amp;<name>text_conflicted</name></expr></argument>, <argument><expr>&amp;<name>prop_conflicted</name></expr></argument>,
<argument><expr><name><name>db</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>! <name>text_conflicted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>prop_conflicted</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>db</name>-&gt;<name>bump_info</name>-&gt;<name>skipped</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>skipped_paths</name></name></expr></argument>, <argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr>(<name>void</name>*)1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>eb</name>-&gt;<name>notify_func</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_wc_notify_t</name> *</type><name>notify</name>
<init>= <expr><call><name>svn_wc_create_notify</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>svn_wc_notify_skip</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>notify</name>-&gt;<name>kind</name></name> = <name>svn_node_dir</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>notify</name>-&gt;<name>prop_state</name></name> = <name>svn_wc_notify_state_conflicted</name></expr>;</expr_stmt>
<expr_stmt><expr><call>(*<name><name>eb</name>-&gt;<name>notify_func</name></name>)<argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>notify_baton</name></name></expr></argument>, <argument><expr><name>notify</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name><name>tmp_entry</name>.<name>revision</name></name> = *(<name><name>eb</name>-&gt;<name>target_revision</name></name>)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp_entry</name>.<name>url</name></name> = <name><name>db</name>-&gt;<name>new_URL</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>eb</name>-&gt;<name>repos</name></name> &amp;&amp; <call><name>svn_path_is_ancestor</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>repos</name></name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>new_URL</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>tmp_entry</name>.<name>repos</name></name> = <name><name>eb</name>-&gt;<name>repos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> |= <name>SVN_WC__ENTRY_MODIFY_REPOS</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>tmp_entry</name>.<name>incomplete</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>adm_access</name></name></expr></argument>,
<argument><expr><name><name>db</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_modify</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> ,
<argument><expr>&amp;<name>tmp_entry</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument> ,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>change_dir_prop</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>dir_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_prop_t</name> *</type><name>propchange</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>db</name> <init>= <expr><name>dir_baton</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>db</name>-&gt;<name>bump_info</name>-&gt;<name>skipped</name></name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>propchange</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>propchanges</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>propchange</name>-&gt;<name>name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>propchange</name>-&gt;<name>value</name></name> = <name>value</name> ? <call><name>svn_string_dup</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_prop_t</name> *</type>
<name>externals_prop_changed</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> *</type><name>propchanges</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>propchanges</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_prop_t</name> *</type><name>p</name> <init>= <expr>&amp;(<call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>propchanges</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_prop_t</name></expr></argument>)</argument_list></call>)</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>p</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>SVN_PROP_EXTERNALS</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>p</name></expr>;</return></then></if>
}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>close_directory</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>dir_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>db</name> <init>= <expr><name>dir_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_notify_state_t</name></type> <name>prop_state</name> <init>= <expr><name>svn_wc_notify_state_unknown</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>entry_props</name></decl>, *<decl><type ref="prev"/><name>wc_props</name></decl>, *<decl><type ref="prev"/><name>regular_props</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_categorize_props</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>propchanges</name></name></expr></argument>, <argument><expr>&amp;<name>entry_props</name></expr></argument>, <argument><expr>&amp;<name>wc_props</name></expr></argument>,
<argument><expr>&amp;<name>regular_props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>edit_baton</name>-&gt;<name>adm_access</name></name></expr></argument>,
<argument><expr><name><name>db</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>regular_props</name>-&gt;<name>nelts</name></name> || <name><name>entry_props</name>-&gt;<name>nelts</name></name> || <name><name>wc_props</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>dirprop_log</name> <init>= <expr><call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>regular_props</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>db</name>-&gt;<name>edit_baton</name>-&gt;<name>traversal_info</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_wc_traversal_info_t</name> *</type><name>ti</name> <init>= <expr><name><name>db</name>-&gt;<name>edit_baton</name>-&gt;<name>traversal_info</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_prop_t</name> *</type><name>change</name> <init>= <expr><call><name>externals_prop_changed</name><argument_list>(<argument><expr><name>regular_props</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>change</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>new_val_s</name> <init>= <expr><name><name>change</name>-&gt;<name>value</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>old_val_s</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_prop_get</name>
<argument_list>(<argument><expr>&amp;<name>old_val_s</name></expr></argument>, <argument><expr><name>SVN_PROP_EXTERNALS</name></expr></argument>,
<argument><expr><name><name>db</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>new_val_s</name> == <name>NULL</name>) &amp;&amp; (<name>old_val_s</name> == <name>NULL</name>)</expr>)</condition><then>
<empty_stmt>;</empty_stmt></then>
<else>else <if>if <condition>(<expr><name>new_val_s</name> &amp;&amp; <name>old_val_s</name>
&amp;&amp; (<call><name>svn_string_compare</name><argument_list>(<argument><expr><name>old_val_s</name></expr></argument>, <argument><expr><name>new_val_s</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<empty_stmt>;</empty_stmt></then>
<else>else <if>if <condition>(<expr><name>old_val_s</name> || <name>new_val_s</name></expr>)</condition><then>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>d_path</name> <init>= <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>ti</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>ti</name>-&gt;<name>depths</name></name></expr></argument>, <argument><expr><name>d_path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><call><name>svn_depth_to_word</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>ambient_depth</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>old_val_s</name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>ti</name>-&gt;<name>externals_old</name></name></expr></argument>, <argument><expr><name>d_path</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name><name>ti</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>old_val_s</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr><name><name>old_val_s</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>new_val_s</name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>ti</name>-&gt;<name>externals_new</name></name></expr></argument>, <argument><expr><name>d_path</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name><name>ti</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>new_val_s</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr><name><name>new_val_s</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if></else></if></else></if>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR_W</name><argument_list>(<argument><expr><call><name>svn_wc__merge_props</name><argument_list>(<argument><expr>&amp;<name>prop_state</name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument> ,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>regular_props</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name><name>db</name>-&gt;<name>edit_baton</name>-&gt;<name>conflict_func</name></name></expr></argument>,
<argument><expr><name><name>db</name>-&gt;<name>edit_baton</name>-&gt;<name>conflict_baton</name></name></expr></argument>,
<argument><expr><name><name>db</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>dirprop_log</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Couldn't do property merge"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>accumulate_entry_props</name><argument_list>(<argument><expr><name>dirprop_log</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr><name>entry_props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>accumulate_wcprops</name><argument_list>(<argument><expr><name>dirprop_log</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name><name>db</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>wc_props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendstr</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>log_accum</name></name></expr></argument>, <argument><expr><name>dirprop_log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>flush_log</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__run_log</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>edit_baton</name>-&gt;<name>diff3_cmd</name></name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>db</name>-&gt;<name>log_number</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>maybe_bump_dir_info</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>edit_baton</name></name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>bump_info</name></name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name><name>db</name>-&gt;<name>bump_info</name>-&gt;<name>skipped</name></name> &amp;&amp; (<name><name>db</name>-&gt;<name>add_existed</name></name> || (! <name><name>db</name>-&gt;<name>added</name></name>))
&amp;&amp; (<name><name>db</name>-&gt;<name>edit_baton</name>-&gt;<name>notify_func</name></name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_wc_notify_t</name> *</type><name>notify</name>
<init>= <expr><call><name>svn_wc_create_notify</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr><name><name>db</name>-&gt;<name>existed</name></name> || <name><name>db</name>-&gt;<name>add_existed</name></name>
? <name>svn_wc_notify_exists</name>
: <name>svn_wc_notify_update_update</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>notify</name>-&gt;<name>kind</name></name> = <name>svn_node_dir</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>notify</name>-&gt;<name>prop_state</name></name> = <name>prop_state</name></expr>;</expr_stmt>
<expr_stmt><expr><call>(*<name><name>db</name>-&gt;<name>edit_baton</name>-&gt;<name>notify_func</name></name>)<argument_list>(<argument><expr><name><name>db</name>-&gt;<name>edit_baton</name>-&gt;<name>notify_baton</name></name></expr></argument>,
<argument><expr><name>notify</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>absent_file_or_dir</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name> <init>= <expr><call><name>svn_path_basename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>pb</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>entries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>ent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_entry_t</name></type> <name>tmp_entry</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>adm_access</name></name></expr></argument>, <argument><expr><name><name>pb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entries_read</name><argument_list>(<argument><expr>&amp;<name>entries</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ent</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ent</name> &amp;&amp; (<name><name>ent</name>-&gt;<name>schedule</name></name> == <name>svn_wc_schedule_add</name>)</expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_WC_OBSTRUCTED_UPDATE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Failed to mark '%s' absent: item of the same name is already "
"scheduled for addition"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name><name>tmp_entry</name>.<name>kind</name></name> = <name>kind</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp_entry</name>.<name>deleted</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp_entry</name>.<name>revision</name></name> = *(<name><name>eb</name>-&gt;<name>target_revision</name></name>)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp_entry</name>.<name>absent</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_modify</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>&amp;<name>tmp_entry</name></expr></argument>,
<argument><expr>(<name>SVN_WC__ENTRY_MODIFY_KIND</name> |
<name>SVN_WC__ENTRY_MODIFY_REVISION</name> |
<name>SVN_WC__ENTRY_MODIFY_DELETED</name> |
<name>SVN_WC__ENTRY_MODIFY_ABSENT</name>)</expr></argument>,
<argument><expr><name>TRUE</name></expr></argument> , <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>absent_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>absent_file_or_dir</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>svn_node_file</name></expr></argument>, <argument><expr><name>parent_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>absent_directory</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>absent_file_or_dir</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>svn_node_dir</name></expr></argument>, <argument><expr><name>parent_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>add_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_rev</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>file_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>pb</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>fb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>copyfrom_path</name> || <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>copyfrom_rev</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr>! (<name>copyfrom_path</name> &amp;&amp; <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>copyfrom_rev</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_WC_INVALID_OP_ON_CWD</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Bad copyfrom arguments received"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><call><name>add_file_with_history</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>parent_baton</name></expr></argument>,
<argument><expr><name>copyfrom_path</name></expr></argument>, <argument><expr><name>copyfrom_rev</name></expr></argument>,
<argument><expr><name>file_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>make_file_baton</name><argument_list>(<argument><expr>&amp;<name>fb</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>file_baton</name> = <name>fb</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_path_under_root</name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>dir_baton</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_check_path</name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>adm_access</name></name></expr></argument>,
<argument><expr><name><name>pb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>kind</name> != <name>svn_node_none</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>eb</name>-&gt;<name>allow_unver_obstructions</name></name>
|| (<name>entry</name> &amp;&amp; <name><name>entry</name>-&gt;<name>schedule</name></name> == <name>svn_wc_schedule_add</name>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>entry</name> &amp;&amp; <name><name>entry</name>-&gt;<name>copied</name></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_WC_OBSTRUCTED_UPDATE</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Failed to add file '%s': a "
"file of the same name is "
"already scheduled for addition "
"with history"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>kind</name> != <name>svn_node_file</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_WC_OBSTRUCTED_UPDATE</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Failed to add file '%s': "
"a non-file object of the same "
"name already exists"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>entry</name></expr>)</condition><then>
<expr_stmt><expr><name><name>fb</name>-&gt;<name>add_existed</name></name> = <name>TRUE</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>fb</name>-&gt;<name>existed</name></name> = <name>TRUE</name></expr>;</expr_stmt></else></if>
}</block></then> <else>else <block>{
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_WC_OBSTRUCTED_UPDATE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Failed to add file '%s': object of the same name "
"already exists"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>open_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>file_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>pb</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>fb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>text_conflicted</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>prop_conflicted</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>make_file_baton</name><argument_list>(<argument><expr>&amp;<name>fb</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>file_baton</name> = <name>fb</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_path_under_root</name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>dir_baton</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_check_path</name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>adm_access</name></name></expr></argument>,
<argument><expr><name><name>pb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>entry</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_UNVERSIONED_RESOURCE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"File '%s' in directory '%s' "
"is not a versioned resource"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>fb</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name><name>pb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_conflicted_p</name><argument_list>(<argument><expr>&amp;<name>text_conflicted</name></expr></argument>, <argument><expr>&amp;<name>prop_conflicted</name></expr></argument>,
<argument><expr><name><name>pb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>text_conflicted</name> || <name>prop_conflicted</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>fb</name>-&gt;<name>skipped</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>skipped_paths</name></name></expr></argument>, <argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr>(<name>void</name>*)1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>eb</name>-&gt;<name>notify_func</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_wc_notify_t</name> *</type><name>notify</name>
<init>= <expr><call><name>svn_wc_create_notify</name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>svn_wc_notify_skip</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>notify</name>-&gt;<name>kind</name></name> = <name>svn_node_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>notify</name>-&gt;<name>content_state</name></name> = <name>text_conflicted</name>
? <name>svn_wc_notify_state_conflicted</name>
: <name>svn_wc_notify_state_unknown</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>notify</name>-&gt;<name>prop_state</name></name> = <name>prop_conflicted</name>
? <name>svn_wc_notify_state_conflicted</name>
: <name>svn_wc_notify_state_unknown</name></expr>;</expr_stmt>
<expr_stmt><expr><call>(*<name><name>eb</name>-&gt;<name>notify_func</name></name>)<argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>notify_baton</name></name></expr></argument>, <argument><expr><name>notify</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>choose_base_paths</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>checksum_p</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name> *</type><name>replaced_p</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name> *</type><name>use_revert_base_p</name></decl></param>,
<param><decl><type>struct <name>file_baton</name> *</type><name>fb</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>fb</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>ent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>replaced</name></decl>, <decl><type ref="prev"/><name>use_revert_base</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>adm_access</name></name></expr></argument>,
<argument><expr><call><name>svn_path_dirname</name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>ent</name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>replaced</name> = <name>ent</name> &amp;&amp; <name><name>ent</name>-&gt;<name>schedule</name></name> == <name>svn_wc_schedule_replace</name></expr>;</expr_stmt>
<expr_stmt><expr><name>use_revert_base</name> = <name>replaced</name> &amp;&amp; (<name><name>ent</name>-&gt;<name>copyfrom_url</name></name> != <name>NULL</name>)</expr>;</expr_stmt>
<if>if <condition>(<expr><name>use_revert_base</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>fb</name>-&gt;<name>text_base_path</name></name> = <call><name>svn_wc__text_revert_path</name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fb</name>-&gt;<name>new_text_base_path</name></name> = <call><name>svn_wc__text_revert_path</name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
<argument><expr><name><name>fb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>fb</name>-&gt;<name>text_base_path</name></name> = <call><name>svn_wc__text_base_path</name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fb</name>-&gt;<name>new_text_base_path</name></name> = <call><name>svn_wc__text_base_path</name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
<argument><expr><name><name>fb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>checksum_p</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>checksum_p</name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ent</name></expr>)</condition><then>
<expr_stmt><expr>*<name>checksum_p</name> = <name><name>ent</name>-&gt;<name>checksum</name></name></expr>;</expr_stmt></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>replaced_p</name></expr>)</condition><then>
<expr_stmt><expr>*<name>replaced_p</name> = <name>replaced</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>use_revert_base_p</name></expr>)</condition><then>
<expr_stmt><expr>*<name>use_revert_base_p</name> = <name>use_revert_base</name></expr>;</expr_stmt></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>apply_textdelta</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_checksum</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><name>svn_txdelta_window_handler_t</name> *</type><name>handler</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>handler_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>fb</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>handler_pool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>handler_baton</name> *</type><name>hb</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>handler_pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>hb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>checksum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>replaced</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>use_revert_base</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>fb</name>-&gt;<name>skipped</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>handler</name> = <name>svn_delta_noop_window_handler</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>handler_baton</name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>fb</name>-&gt;<name>received_textdelta</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>choose_base_paths</name><argument_list>(<argument><expr>&amp;<name>checksum</name></expr></argument>, <argument><expr>&amp;<name>replaced</name></expr></argument>, <argument><expr>&amp;<name>use_revert_base</name></expr></argument>,
<argument><expr><name>fb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>checksum</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><name>APR_MD5_DIGESTSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>hex_digest</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_checksum</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>text_base_path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hex_digest</name> = <call><name>svn_md5_digest_to_cstring_display</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>base_checksum</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>hex_digest</name></expr></argument>, <argument><expr><name>base_checksum</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_WC_CORRUPT_TEXT_BASE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Checksum mismatch for '%s'; expected: '%s', actual: '%s'"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>text_base_path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>base_checksum</name></expr></argument>,
<argument><expr><name>hex_digest</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></then></if>
<if>if <condition>(<expr>! <name>replaced</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name>hex_digest</name></expr></argument>, <argument><expr><name>checksum</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_WC_CORRUPT_TEXT_BASE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Checksum mismatch for '%s'; recorded: '%s', actual: '%s'"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>text_base_path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>checksum</name></expr></argument>,
<argument><expr><name>hex_digest</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>! <name><name>fb</name>-&gt;<name>added</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>use_revert_base</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__open_revert_base</name><argument_list>(<argument><expr>&amp;<name><name>hb</name>-&gt;<name>source</name></name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr><name>APR_READ</name></expr></argument>,
<argument><expr><name>handler_pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__open_text_base</name><argument_list>(<argument><expr>&amp;<name><name>hb</name>-&gt;<name>source</name></name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>APR_READ</name></expr></argument>,
<argument><expr><name>handler_pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name><name>fb</name>-&gt;<name>copied_text_base</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_open</name><argument_list>(<argument><expr>&amp;<name><name>hb</name>-&gt;<name>source</name></name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>copied_text_base</name></name></expr></argument>,
<argument><expr><name>APR_READ</name></expr></argument>, <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>handler_pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>hb</name>-&gt;<name>source</name></name> = <name>NULL</name></expr>;</expr_stmt></else></if>
}</block></else></if>
<if>if <condition>(<expr><name>use_revert_base</name></expr>)</condition><then>
<expr_stmt><expr><name>err</name> = <call><name>svn_wc__open_revert_base</name><argument_list>(<argument><expr>&amp;<name><name>hb</name>-&gt;<name>dest</name></name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr>(<name>APR_WRITE</name> | <name>APR_TRUNCATE</name> | <name>APR_CREATE</name>)</expr></argument>,
<argument><expr><name>handler_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>err</name> = <call><name>svn_wc__open_text_base</name><argument_list>(<argument><expr>&amp;<name><name>hb</name>-&gt;<name>dest</name></name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr>(<name>APR_WRITE</name> | <name>APR_TRUNCATE</name> | <name>APR_CREATE</name>)</expr></argument>,
<argument><expr><name>handler_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>handler_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>svn_txdelta_apply</name><argument_list>(<argument><expr><call><name>svn_stream_from_aprfile</name><argument_list>(<argument><expr><name><name>hb</name>-&gt;<name>source</name></name></expr></argument>, <argument><expr><name>handler_pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_stream_from_aprfile</name><argument_list>(<argument><expr><name><name>hb</name>-&gt;<name>dest</name></name></expr></argument>, <argument><expr><name>handler_pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>fb</name>-&gt;<name>digest</name></name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>new_text_base_path</name></name></expr></argument>, <argument><expr><name>handler_pool</name></expr></argument>,
<argument><expr>&amp;<name><name>hb</name>-&gt;<name>apply_handler</name></name></expr></argument>, <argument><expr>&amp;<name><name>hb</name>-&gt;<name>apply_baton</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hb</name>-&gt;<name>pool</name></name> = <name>handler_pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hb</name>-&gt;<name>fb</name></name> = <name>fb</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>handler_baton</name> = <name>hb</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>handler</name> = <name>window_handler</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>change_file_prop</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>fb</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>fb</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_prop_t</name> *</type><name>propchange</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>fb</name>-&gt;<name>skipped</name></name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>propchange</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>propchanges</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>propchange</name>-&gt;<name>name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>propchange</name>-&gt;<name>value</name></name> = <name>value</name> ? <call><name>svn_string_dup</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>eb</name>-&gt;<name>use_commit_times</name></name>
&amp;&amp; (<call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_PROP_ENTRY_COMMITTED_DATE</name></expr></argument>)</argument_list></call> == 0)
&amp;&amp; <name>value</name></expr>)</condition><then>
<expr_stmt><expr><name><name>fb</name>-&gt;<name>last_changed_date</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>value</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>merge_props</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> *</type><name>log_accum</name></decl></param>,
<param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>prop_state</name></decl></param>,
<param><decl><type><name>svn_wc_notify_lock_state_t</name> *</type><name>lock_state</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file_path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>prop_changes</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>base_props</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>working_props</name></decl></param>,
<param><decl><type><name>svn_wc_conflict_resolver_func_t</name></type> <name>conflict_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>conflict_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>regular_props</name> <init>= <expr><name>NULL</name></expr></init>, *<name>wc_props</name> <init>= <expr><name>NULL</name></expr></init>,
*<name>entry_props</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_categorize_props</name><argument_list>(<argument><expr><name>prop_changes</name></expr></argument>,
<argument><expr>&amp;<name>entry_props</name></expr></argument>, <argument><expr>&amp;<name>wc_props</name></expr></argument>, <argument><expr>&amp;<name>regular_props</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>prop_state</name> = <name>svn_wc_notify_state_unknown</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>regular_props</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__merge_props</name><argument_list>(<argument><expr><name>prop_state</name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>file_path</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument> ,
<argument><expr><name>base_props</name></expr></argument>,
<argument><expr><name>working_props</name></expr></argument>,
<argument><expr><name>regular_props</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>conflict_func</name></expr></argument>, <argument><expr><name>conflict_baton</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>, <argument><expr>&amp;<name>log_accum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>entry_props</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>accumulate_entry_props</name><argument_list>(<argument><expr><name>log_accum</name></expr></argument>, <argument><expr><name>lock_state</name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>file_path</name></expr></argument>,
<argument><expr><name>entry_props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr>*<name>lock_state</name> = <name>svn_wc_notify_lock_state_unchanged</name></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>wc_props</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>accumulate_wcprops</name><argument_list>(<argument><expr><name>log_accum</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>file_path</name></expr></argument>, <argument><expr><name>wc_props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>loggy_tweak_entry</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> *</type><name>log_accum</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>new_revision</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>new_URL</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_wc_entry_t</name></type> <name>tmp_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint64_t</name></type> <name>modify_flags</name> <init>= <expr><name>SVN_WC__ENTRY_MODIFY_KIND</name>
| <name>SVN_WC__ENTRY_MODIFY_REVISION</name>
| <name>SVN_WC__ENTRY_MODIFY_DELETED</name>
| <name>SVN_WC__ENTRY_MODIFY_ABSENT</name>
| <name>SVN_WC__ENTRY_MODIFY_TEXT_TIME</name>
| <name>SVN_WC__ENTRY_MODIFY_WORKING_SIZE</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>tmp_entry</name>.<name>revision</name></name> = <name>new_revision</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp_entry</name>.<name>kind</name></name> = <name>svn_node_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp_entry</name>.<name>deleted</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp_entry</name>.<name>absent</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp_entry</name>.<name>working_size</name></name> = <name>SVN_WC_ENTRY_WORKING_SIZE_UNKNOWN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp_entry</name>.<name>text_time</name></name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><name>new_URL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>tmp_entry</name>.<name>url</name></name> = <name>new_URL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>modify_flags</name> |= <name>SVN_WC__ENTRY_MODIFY_URL</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__loggy_entry_modify</name><argument_list>(<argument><expr>&amp;<name>log_accum</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>path</name></expr></argument>, <argument><expr>&amp;<name>tmp_entry</name></expr></argument>, <argument><expr><name>modify_flags</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>merge_file</name><parameter_list>(<param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>content_state</name></decl></param>,
<param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>prop_state</name></decl></param>,
<param><decl><type><name>svn_wc_notify_lock_state_t</name> *</type><name>lock_state</name></decl></param>,
<param><decl><type>struct <name>file_baton</name> *</type><name>fb</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>parent_dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>fb</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>log_accum</name> <init>= <expr><call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>is_locally_modified</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>is_replaced</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>magic_props_changed</name></decl>;</decl_stmt>
<enum>enum <name>svn_wc_merge_outcome_t</name> <name>merge_outcome</name> <expr_stmt><expr>= <name>svn_wc_merge_unchanged</name></expr>;</expr_stmt></enum>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_entry_t</name></type> <name>tmp_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint64_t</name></type> <name>flags</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_path_split</name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr>&amp;<name>parent_dir</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>adm_access</name></name></expr></argument>,
<argument><expr><name>parent_dir</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>entry</name> &amp;&amp; ! <name><name>fb</name>-&gt;<name>added</name></name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(
<argument><expr><name>SVN_ERR_UNVERSIONED_RESOURCE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s' is not under version control"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>magic_props_changed</name> = <call><name>svn_wc__has_magic_property</name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>propchanges</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>merge_props</name><argument_list>(<argument><expr><name>log_accum</name></expr></argument>, <argument><expr><name>prop_state</name></expr></argument>, <argument><expr><name>lock_state</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>propchanges</name></name></expr></argument>,
<argument><expr><name><name>fb</name>-&gt;<name>copied_base_props</name></name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>copied_working_props</name></name></expr></argument>,
<argument><expr><name><name>eb</name>-&gt;<name>conflict_func</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>conflict_baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>fb</name>-&gt;<name>copied_working_text</name></name></expr>)</condition><then>
<expr_stmt><expr><name>is_locally_modified</name> = <name>TRUE</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>! <name><name>fb</name>-&gt;<name>existed</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__text_modified_internal_p</name><argument_list>(<argument><expr>&amp;<name>is_locally_modified</name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>fb</name>-&gt;<name>new_text_base_path</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__versioned_file_modcheck</name><argument_list>(<argument><expr>&amp;<name>is_locally_modified</name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name><name>fb</name>-&gt;<name>new_text_base_path</name></name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>is_locally_modified</name> = <name>FALSE</name></expr>;</expr_stmt></else></if></else></if></else></if>
<if>if <condition>(<expr><name>entry</name> &amp;&amp; <name><name>entry</name>-&gt;<name>schedule</name></name> == <name>svn_wc_schedule_replace</name></expr>)</condition><then>
<expr_stmt><expr><name>is_replaced</name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>fb</name>-&gt;<name>add_existed</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>tmp_entry</name>.<name>schedule</name></name> = <name>svn_wc_schedule_normal</name></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> |= (<name>SVN_WC__ENTRY_MODIFY_SCHEDULE</name> |
<name>SVN_WC__ENTRY_MODIFY_FORCE</name>)</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>loggy_tweak_entry</name><argument_list>(<argument><expr><name>log_accum</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr>*<name><name>eb</name>-&gt;<name>target_revision</name></name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>new_URL</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>fb</name>-&gt;<name>new_text_base_path</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>! <name>is_locally_modified</name> &amp;&amp; ! <name>is_replaced</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__loggy_copy</name><argument_list>(<argument><expr>&amp;<name>log_accum</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>svn_wc__copy_translate</name></expr></argument>,
<argument><expr><name><name>fb</name>-&gt;<name>new_text_base_path</name></name></expr></argument>,
<argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>wfile_kind</name> <init>= <expr><name>svn_node_unknown</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_check_path</name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr>&amp;<name>wfile_kind</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>wfile_kind</name> == <name>svn_node_none</name> &amp;&amp; ! <name><name>fb</name>-&gt;<name>added_with_history</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__loggy_copy</name><argument_list>(<argument><expr>&amp;<name>log_accum</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>svn_wc__copy_translate</name></expr></argument>,
<argument><expr><name><name>fb</name>-&gt;<name>new_text_base_path</name></name></expr></argument>,
<argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>! <name><name>fb</name>-&gt;<name>existed</name></name></expr>)</condition><then>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>oldrev_str</name></decl>, *<decl><type ref="prev"/><name>newrev_str</name></decl>, *<decl><type ref="prev"/><name>mine_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>merge_left</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path_ext</name> <init>= <expr>""</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>eb</name>-&gt;<name>ext_patterns</name></name> &amp;&amp; <name><name>eb</name>-&gt;<name>ext_patterns</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_path_splitext</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>path_ext</name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! (*<name>path_ext</name>
&amp;&amp; <call><name>svn_cstring_match_glob_list</name><argument_list>(<argument><expr><name>path_ext</name></expr></argument>,
<argument><expr><name><name>eb</name>-&gt;<name>ext_patterns</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<expr_stmt><expr><name>path_ext</name> = ""</expr>;</expr_stmt></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>fb</name>-&gt;<name>added_with_history</name></name></expr>)</condition><then>
<expr_stmt><expr><name>oldrev_str</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>".copied%s%s"</expr></argument>,
<argument><expr>*<name>path_ext</name> ? "." : ""</expr></argument>,
<argument><expr>*<name>path_ext</name> ? <name>path_ext</name> : ""</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>oldrev_str</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>".r%ld%s%s"</expr></argument>,
<argument><expr><name><name>entry</name>-&gt;<name>revision</name></name></expr></argument>,
<argument><expr>*<name>path_ext</name> ? "." : ""</expr></argument>,
<argument><expr>*<name>path_ext</name> ? <name>path_ext</name> : ""</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>newrev_str</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>".r%ld%s%s"</expr></argument>,
<argument><expr>*<name><name>eb</name>-&gt;<name>target_revision</name></name></expr></argument>,
<argument><expr>*<name>path_ext</name> ? "." : ""</expr></argument>,
<argument><expr>*<name>path_ext</name> ? <name>path_ext</name> : ""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mine_str</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>".mine%s%s"</expr></argument>,
<argument><expr>*<name>path_ext</name> ? "." : ""</expr></argument>,
<argument><expr>*<name>path_ext</name> ? <name>path_ext</name> : ""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>fb</name>-&gt;<name>add_existed</name></name> &amp;&amp; ! <name>is_replaced</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_create_tmp_file2</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>merge_left</name></expr></argument>,
<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(
<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>svn_io_file_del_none</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>fb</name>-&gt;<name>copied_text_base</name></name></expr>)</condition><then>
<expr_stmt><expr><name>merge_left</name> = <name><name>fb</name>-&gt;<name>copied_text_base</name></name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>merge_left</name> = <name><name>fb</name>-&gt;<name>text_base_path</name></name></expr>;</expr_stmt></else></if></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__merge_internal</name>
<argument_list>(<argument><expr>&amp;<name>log_accum</name></expr></argument>, <argument><expr>&amp;<name>merge_outcome</name></expr></argument>,
<argument><expr><name>merge_left</name></expr></argument>,
<argument><expr><name><name>fb</name>-&gt;<name>new_text_base_path</name></name></expr></argument>,
<argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr><name><name>fb</name>-&gt;<name>copied_working_text</name></name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>oldrev_str</name></expr></argument>, <argument><expr><name>newrev_str</name></expr></argument>, <argument><expr><name>mine_str</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>diff3_cmd</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>propchanges</name></name></expr></argument>,
<argument><expr><name><name>eb</name>-&gt;<name>conflict_func</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>conflict_baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>merge_left</name> != <name><name>fb</name>-&gt;<name>text_base_path</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__loggy_remove</name><argument_list>(<argument><expr>&amp;<name>log_accum</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>merge_left</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>fb</name>-&gt;<name>copied_working_text</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__loggy_remove</name><argument_list>(<argument><expr>&amp;<name>log_accum</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name><name>fb</name>-&gt;<name>copied_working_text</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if></else></if>
}</block></else></if>
}</block></then>
<else>else <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>keywords</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__get_keywords</name><argument_list>(<argument><expr>&amp;<name>keywords</name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>magic_props_changed</name> || <name>keywords</name></expr>)</condition><then>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmptext</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_translated_file2</name><argument_list>(<argument><expr>&amp;<name>tmptext</name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>SVN_WC_TRANSLATE_TO_NF</name>
| <name>SVN_WC_TRANSLATE_NO_OUTPUT_CLEANUP</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__loggy_copy</name><argument_list>(<argument><expr>&amp;<name>log_accum</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>svn_wc__copy_translate</name></expr></argument>,
<argument><expr><name>tmptext</name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>*<name>lock_state</name> == <name>svn_wc_notify_lock_state_unlocked</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__loggy_maybe_set_readonly</name><argument_list>(<argument><expr>&amp;<name>log_accum</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></else></if>
<if>if <condition>(<expr><name><name>fb</name>-&gt;<name>new_text_base_path</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__loggy_move</name><argument_list>(<argument><expr>&amp;<name>log_accum</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>new_text_base_path</name></name></expr></argument>,
<argument><expr><name><name>fb</name>-&gt;<name>text_base_path</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__loggy_set_readonly</name><argument_list>(<argument><expr>&amp;<name>log_accum</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name><name>fb</name>-&gt;<name>text_base_path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>is_replaced</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>tmp_entry</name>.<name>checksum</name></name> = <call><name>svn_md5_digest_to_cstring</name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>digest</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> |= <name>SVN_WC__ENTRY_MODIFY_CHECKSUM</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__loggy_entry_modify</name><argument_list>(<argument><expr>&amp;<name>log_accum</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr>&amp;<name>tmp_entry</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>is_locally_modified</name> &amp;&amp;
(<name><name>fb</name>-&gt;<name>added</name></name> || <name><name>entry</name>-&gt;<name>schedule</name></name> == <name>svn_wc_schedule_normal</name>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>fb</name>-&gt;<name>last_changed_date</name></name> &amp;&amp; !<name><name>fb</name>-&gt;<name>existed</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__loggy_set_timestamp</name><argument_list>(<argument><expr>&amp;<name>log_accum</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>last_changed_date</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>fb</name>-&gt;<name>new_text_base_path</name></name> || <name>magic_props_changed</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__loggy_set_entry_timestamp_from_wc</name>
<argument_list>(<argument><expr>&amp;<name>log_accum</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_TEXT_TIME</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__loggy_set_entry_working_size_from_wc</name>
<argument_list>(<argument><expr>&amp;<name>log_accum</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>fb</name>-&gt;<name>copied_text_base</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__loggy_remove</name><argument_list>(<argument><expr>&amp;<name>log_accum</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name><name>fb</name>-&gt;<name>copied_text_base</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>merge_outcome</name> == <name>svn_wc_merge_conflict</name></expr>)</condition><then>
<expr_stmt><expr>*<name>content_state</name> = <name>svn_wc_notify_state_conflicted</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>fb</name>-&gt;<name>new_text_base_path</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>is_locally_modified</name></expr>)</condition><then>
<expr_stmt><expr>*<name>content_state</name> = <name>svn_wc_notify_state_merged</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr>*<name>content_state</name> = <name>svn_wc_notify_state_changed</name></expr>;</expr_stmt></else></if>
}</block></then> <else>else
<expr_stmt><expr>*<name>content_state</name> = <name>svn_wc_notify_state_unchanged</name></expr>;</expr_stmt></else></if></else></if>
<expr_stmt><expr><call><name>svn_stringbuf_appendstr</name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>dir_baton</name>-&gt;<name>log_accum</name></name></expr></argument>, <argument><expr><name>log_accum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>close_file</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>text_checksum</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>fb</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>fb</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_notify_state_t</name></type> <name>content_state</name></decl>, <decl><type ref="prev"/><name>prop_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_notify_lock_state_t</name></type> <name>lock_state</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>fb</name>-&gt;<name>skipped</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>maybe_bump_dir_info</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>bump_info</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>fb</name>-&gt;<name>added_with_history</name></name> &amp;&amp; ! <name><name>fb</name>-&gt;<name>received_textdelta</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>! <name><name>fb</name>-&gt;<name>text_base_path</name></name> &amp;&amp; ! <name><name>fb</name>-&gt;<name>new_text_base_path</name></name>
&amp;&amp; <name><name>fb</name>-&gt;<name>copied_text_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>choose_base_paths</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_copy_file</name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>copied_text_base</name></name></expr></argument>,
<argument><expr><name><name>fb</name>-&gt;<name>new_text_base_path</name></name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_checksum</name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>digest</name></name></expr></argument>,
<argument><expr><name><name>fb</name>-&gt;<name>new_text_base_path</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>fb</name>-&gt;<name>new_text_base_path</name></name> &amp;&amp; <name>text_checksum</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>real_sum</name> <init>= <expr><call><name>svn_md5_digest_to_cstring</name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>digest</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>real_sum</name> &amp;&amp; (<call><name>strcmp</name><argument_list>(<argument><expr><name>text_checksum</name></expr></argument>, <argument><expr><name>real_sum</name></expr></argument>)</argument_list></call> != 0)</expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_CHECKSUM_MISMATCH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Checksum mismatch for '%s'; expected: '%s', actual: '%s'"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>text_checksum</name></expr></argument>, <argument><expr><name>real_sum</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>merge_file</name><argument_list>(<argument><expr>&amp;<name>content_state</name></expr></argument>, <argument><expr>&amp;<name>prop_state</name></expr></argument>, <argument><expr>&amp;<name>lock_state</name></expr></argument>, <argument><expr><name>fb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>maybe_bump_dir_info</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>bump_info</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>((<name>content_state</name> != <name>svn_wc_notify_state_unchanged</name>) ||
(<name>prop_state</name> != <name>svn_wc_notify_state_unchanged</name>) ||
(<name>lock_state</name> != <name>svn_wc_notify_lock_state_unchanged</name>))
&amp;&amp; <name><name>eb</name>-&gt;<name>notify_func</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_wc_notify_t</name> *</type><name>notify</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_notify_action_t</name></type> <name>action</name> <init>= <expr><name>svn_wc_notify_update_update</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>fb</name>-&gt;<name>existed</name></name> || <name><name>fb</name>-&gt;<name>add_existed</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>content_state</name> != <name>svn_wc_notify_state_conflicted</name></expr>)</condition><then>
<expr_stmt><expr><name>action</name> = <name>svn_wc_notify_exists</name></expr>;</expr_stmt></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name><name>fb</name>-&gt;<name>added</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>action</name> = <name>svn_wc_notify_update_add</name></expr>;</expr_stmt>
}</block></then></if></else></if>
<expr_stmt><expr><name>notify</name> = <call><name>svn_wc_create_notify</name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>notify</name>-&gt;<name>kind</name></name> = <name>svn_node_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>notify</name>-&gt;<name>content_state</name></name> = <name>content_state</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>notify</name>-&gt;<name>prop_state</name></name> = <name>prop_state</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>notify</name>-&gt;<name>lock_state</name></name> = <name>lock_state</name></expr>;</expr_stmt>
<expr_stmt><expr><call>(*<name><name>eb</name>-&gt;<name>notify_func</name></name>)<argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>notify_baton</name></name></expr></argument>, <argument><expr><name>notify</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>locate_copyfrom</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_rev</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dest_dir</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>dest_entry</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>return_path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> **</type><name>return_entry</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> **</type><name>return_access</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dest_fs_path</name></decl>, *<decl><type ref="prev"/><name>ancestor_fs_path</name></decl>, *<decl><type ref="prev"/><name>ancestor_url</name></decl>, *<decl><type ref="prev"/><name>file_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_parent</name></decl>, *<decl><type ref="prev"/><name>copyfrom_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>abs_dest_dir</name></decl>, *<decl><type ref="prev"/><name>extra_components</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>ancestor_entry</name></decl>, *<decl><type ref="prev"/><name>file_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>ancestor_access</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>levels_up</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>cwd</name></decl>, *<decl><type ref="prev"/><name>cwd_parent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>return_path</name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(! <name><name>dest_entry</name>-&gt;<name>repos</name></name>) || (! <name><name>dest_entry</name>-&gt;<name>url</name></name>)</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_WC_COPYFROM_PATH_NOT_FOUND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Destination directory of add-with-history "
"is missing a URL"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>svn_path_split</name><argument_list>(<argument><expr><name>copyfrom_path</name></expr></argument>, <argument><expr>&amp;<name>copyfrom_parent</name></expr></argument>, <argument><expr>&amp;<name>copyfrom_file</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_path_get_absolute</name><argument_list>(<argument><expr>&amp;<name>abs_dest_dir</name></expr></argument>, <argument><expr><name>dest_dir</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dest_fs_path</name> = <call><name>svn_path_is_child</name><argument_list>(<argument><expr><name><name>dest_entry</name>-&gt;<name>repos</name></name></expr></argument>, <argument><expr><name><name>dest_entry</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>dest_fs_path</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>dest_entry</name>-&gt;<name>repos</name></name></expr></argument>, <argument><expr><name><name>dest_entry</name>-&gt;<name>url</name></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name>dest_fs_path</name> = ""</expr>;</expr_stmt></then>
<else>else
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_WC_COPYFROM_PATH_NOT_FOUND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Destination URLs are broken"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></then></if>
<expr_stmt><expr><name>dest_fs_path</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"/"</expr></argument>, <argument><expr><name>dest_fs_path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dest_fs_path</name> = <call><name>svn_path_canonicalize</name><argument_list>(<argument><expr><name>dest_fs_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ancestor_fs_path</name> = <call><name>svn_path_get_longest_ancestor</name><argument_list>(<argument><expr><name>dest_fs_path</name></expr></argument>,
<argument><expr><name>copyfrom_parent</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>ancestor_fs_path</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>levels_up</name> = <call><name>svn_path_component_count</name><argument_list>(<argument><expr><name>dest_fs_path</name></expr></argument>)</argument_list></call>
- <call><name>svn_path_component_count</name><argument_list>(<argument><expr><name>ancestor_fs_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cwd</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr><name>dest_dir</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_path_remove_components</name><argument_list>(<argument><expr><name>cwd</name></expr></argument>, <argument><expr><name>levels_up</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_check_path</name><argument_list>(<argument><expr><name><name>cwd</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>kind</name> != <name>svn_node_dir</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>err</name> = <call><name>svn_wc_adm_open3</name><argument_list>(<argument><expr>&amp;<name>ancestor_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>cwd</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>,
<argument><expr>0</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> &amp;&amp; <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_WC_NOT_DIRECTORY</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then></if></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>ancestor_entry</name></expr></argument>, <argument><expr><name><name>cwd</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>ancestor_access</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>dest_entry</name>-&gt;<name>uuid</name></name> &amp;&amp; <name><name>ancestor_entry</name>-&gt;<name>uuid</name></name>
&amp;&amp; (<call><name>strcmp</name><argument_list>(<argument><expr><name><name>dest_entry</name>-&gt;<name>uuid</name></name></expr></argument>, <argument><expr><name><name>ancestor_entry</name>-&gt;<name>uuid</name></name></expr></argument>)</argument_list></call> != 0)</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>ancestor_url</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>,
<argument><expr><name><name>dest_entry</name>-&gt;<name>repos</name></name></expr></argument>, <argument><expr><name>ancestor_fs_path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>ancestor_url</name></expr></argument>, <argument><expr><name><name>ancestor_entry</name>-&gt;<name>url</name></name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>extra_components</name> = <call><name>svn_path_is_child</name><argument_list>(<argument><expr><name>ancestor_fs_path</name></expr></argument>,
<argument><expr><name>copyfrom_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_path_add_component</name><argument_list>(<argument><expr><name>cwd</name></expr></argument>, <argument><expr><name>extra_components</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cwd_parent</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr><name><name>cwd</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_path_remove_component</name><argument_list>(<argument><expr><name>cwd_parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_check_path</name><argument_list>(<argument><expr><name><name>cwd</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>kind</name> != <name>svn_node_file</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>err</name> = <call><name>svn_wc_adm_open3</name><argument_list>(<argument><expr>&amp;<name>ancestor_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>cwd_parent</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>,
<argument><expr>0</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> &amp;&amp; <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_WC_NOT_DIRECTORY</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then></if></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>file_entry</name></expr></argument>, <argument><expr><name><name>cwd</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>ancestor_access</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>file_entry</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>file_entry</name>-&gt;<name>uuid</name></name> &amp;&amp; <name><name>dest_entry</name>-&gt;<name>uuid</name></name>
&amp;&amp; (<call><name>strcmp</name><argument_list>(<argument><expr><name><name>file_entry</name>-&gt;<name>uuid</name></name></expr></argument>, <argument><expr><name><name>dest_entry</name>-&gt;<name>uuid</name></name></expr></argument>)</argument_list></call> != 0)</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>file_url</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><name><name>file_entry</name>-&gt;<name>repos</name></name></expr></argument>, <argument><expr><name>copyfrom_path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>file_url</name></expr></argument>, <argument><expr><name><name>file_entry</name>-&gt;<name>url</name></name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<if>if <condition>(<expr>! (<call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name><name>file_entry</name>-&gt;<name>cmt_rev</name></name></expr></argument>)</argument_list></call>
&amp;&amp; <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name><name>file_entry</name>-&gt;<name>revision</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<if>if <condition>(<expr>! ((<name><name>file_entry</name>-&gt;<name>cmt_rev</name></name> &lt;= <name>copyfrom_rev</name>)
&amp;&amp; (<name>copyfrom_rev</name> &lt;= <name><name>file_entry</name>-&gt;<name>revision</name></name>))</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr>*<name>return_path</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>cwd</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>return_entry</name> = <name>file_entry</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>return_access</name> = <name>ancestor_access</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_hash_t</name> *</type>
<name>copy_regular_props</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>props_in</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>props_out</name> <init>= <expr><call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>props_in</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>propname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>propval</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>propname</name> = <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name>propval</name> = <name>val</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>svn_property_kind</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>propname</name></expr></argument>)</argument_list></call> == <name>svn_prop_regular_kind</name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>props_out</name></expr></argument>, <argument><expr><name>propname</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>propval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></for>
<return>return <expr><name>props_out</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>add_file_with_history</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_rev</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>file_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>fb</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>tfb</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>pb</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>, *<decl><type ref="prev"/><name>src_access</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>src_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>base_props</name></decl>, *<decl><type ref="prev"/><name>working_props</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>path_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>add_file</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>parent_baton</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>&amp;<name>fb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tfb</name> = (struct <name>file_baton</name> *)<name>fb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tfb</name>-&gt;<name>added_with_history</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>path_entry</name></expr></argument>, <argument><expr><name><name>pb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>adm_access</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>locate_copyfrom</name><argument_list>(<argument><expr><name>copyfrom_path</name></expr></argument>, <argument><expr><name>copyfrom_rev</name></expr></argument>,
<argument><expr><name><name>pb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>path_entry</name></expr></argument>,
<argument><expr>&amp;<name>src_path</name></expr></argument>, <argument><expr>&amp;<name>src_entry</name></expr></argument>, <argument><expr>&amp;<name>src_access</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> &amp;&amp; <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_WC_COPYFROM_PATH_NOT_FOUND</name></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then></if></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name><name>pb</name>-&gt;<name>edit_baton</name>-&gt;<name>adm_access</name></name></expr></argument>,
<argument><expr><name><name>pb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_create_tmp_file2</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name><name>tfb</name>-&gt;<name>copied_text_base</name></name></expr></argument>,
<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>svn_io_file_del_none</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>src_path</name> != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_text_base_path</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>src_entry</name>-&gt;<name>schedule</name></name> == <name>svn_wc_schedule_replace</name>
&amp;&amp; <name><name>src_entry</name>-&gt;<name>copyfrom_url</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>src_text_base_path</name> = <call><name>svn_wc__text_revert_path</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__load_props</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>base_props</name></expr></argument>,
<argument><expr><name>src_access</name></expr></argument>, <argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>working_props</name> = <name>base_props</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>src_text_base_path</name> = <call><name>svn_wc__text_base_path</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__load_props</name><argument_list>(<argument><expr>&amp;<name>base_props</name></expr></argument>, <argument><expr>&amp;<name>working_props</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>src_access</name></expr></argument>, <argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_copy_file</name><argument_list>(<argument><expr><name>src_text_base_path</name></expr></argument>, <argument><expr><name><name>tfb</name>-&gt;<name>copied_text_base</name></name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>textbase_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>textbase_stream</name></decl>;</decl_stmt>
<if>if <condition>(<expr>! <name><name>eb</name>-&gt;<name>fetch_func</name></name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_WC_INVALID_OP_ON_CWD</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"No fetch_func supplied to update_editor"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_open</name><argument_list>(<argument><expr>&amp;<name>textbase_file</name></expr></argument>, <argument><expr><name><name>tfb</name>-&gt;<name>copied_text_base</name></name></expr></argument>,
<argument><expr>(<name>APR_WRITE</name> | <name>APR_TRUNCATE</name> | <name>APR_CREATE</name>)</expr></argument>,
<argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>textbase_stream</name> = <call><name>svn_stream_from_aprfile2</name><argument_list>(<argument><expr><name>textbase_file</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>eb</name>-&gt;<name>fetch_func</name></name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>fetch_baton</name></name></expr></argument>, <argument><expr><name>copyfrom_path</name> + 1</expr></argument>, <argument><expr><name>copyfrom_rev</name></expr></argument>,
<argument><expr><name>textbase_stream</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>base_props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_close</name><argument_list>(<argument><expr><name>textbase_stream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>working_props</name> = <name>base_props</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>tfb</name>-&gt;<name>copied_base_props</name></name> = <call><name>copy_regular_props</name><argument_list>(<argument><expr><name>base_props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tfb</name>-&gt;<name>copied_working_props</name></name> = <call><name>copy_regular_props</name><argument_list>(<argument><expr><name>working_props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>src_path</name> != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>text_changed</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_text_modified_p</name><argument_list>(<argument><expr>&amp;<name>text_changed</name></expr></argument>, <argument><expr><name>src_path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>src_access</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>text_changed</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_create_tmp_file2</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name><name>tfb</name>-&gt;<name>copied_working_text</name></name></expr></argument>,
<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>svn_io_file_del_none</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_copy_file</name><argument_list>(<argument><expr><name>src_path</name></expr></argument>, <argument><expr><name><name>tfb</name>-&gt;<name>copied_working_text</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>file_baton</name> = <name>tfb</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>close_edit</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target_path</name> <init>= <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>anchor</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>target</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>log_number</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(*<name><name>eb</name>-&gt;<name>target</name></name>) &amp;&amp; (<call><name>svn_wc__adm_missing</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>adm_access</name></name></expr></argument>, <argument><expr><name>target_path</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>do_entry_deletion</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>anchor</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>target</name></name></expr></argument>, <argument><expr>&amp;<name>log_number</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>! <name><name>eb</name>-&gt;<name>root_opened</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>complete_directory</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>anchor</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>! <name><name>eb</name>-&gt;<name>target_deleted</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__do_update_cleanup</name><argument_list>(<argument><expr><name>target_path</name></expr></argument>,
<argument><expr><name><name>eb</name>-&gt;<name>adm_access</name></name></expr></argument>,
<argument><expr><name><name>eb</name>-&gt;<name>requested_depth</name></name></expr></argument>,
<argument><expr><name><name>eb</name>-&gt;<name>switch_url</name></name></expr></argument>,
<argument><expr><name><name>eb</name>-&gt;<name>repos</name></name></expr></argument>,
<argument><expr>*(<name><name>eb</name>-&gt;<name>target_revision</name></name>)</expr></argument>,
<argument><expr><name><name>eb</name>-&gt;<name>notify_func</name></name></expr></argument>,
<argument><expr><name><name>eb</name>-&gt;<name>notify_baton</name></name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>skipped_paths</name></name></expr></argument>,
<argument><expr><name><name>eb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>make_editor</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name> *</type><name>target_revision</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>anchor</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>use_commit_times</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>switch_url</name></decl></param>,
<param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>depth_is_sticky</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>allow_unver_obstructions</name></decl></param>,
<param><decl><type><name>svn_wc_notify_func2_t</name></type> <name>notify_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>notify_baton</name></decl></param>,
<param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
<param><decl><type><name>svn_wc_conflict_resolver_func_t</name></type> <name>conflict_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>conflict_baton</name></decl></param>,
<param><decl><type><name>svn_wc_get_file_t</name></type> <name>fetch_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>fetch_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>diff3_cmd</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>preserved_exts</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
<param><decl><type><name>svn_wc_traversal_info_t</name> *</type><name>traversal_info</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>inner_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_delta_editor_t</name> *</type><name>tree_editor</name> <init>= <expr><call><name>svn_delta_default_editor</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>inner_editor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>depth</name> == <name>svn_depth_unknown</name></expr>)</condition><then>
<expr_stmt><expr><name>depth_is_sticky</name> = <name>FALSE</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>switch_url</name> &amp;&amp; <name>entry</name> &amp;&amp; <name><name>entry</name>-&gt;<name>repos</name></name> &amp;&amp;
! <call><name>svn_path_is_ancestor</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>repos</name></name></expr></argument>, <argument><expr><name>switch_url</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_WC_INVALID_SWITCH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s'\n"
"is not the same repository as\n"
"'%s'"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>switch_url</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>repos</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>eb</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>eb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>pool</name></name> = <name>subpool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>use_commit_times</name></name> = <name>use_commit_times</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>target_revision</name></name> = <name>target_revision</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>switch_url</name></name> = <name>switch_url</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>repos</name></name> = <name>entry</name> ? <name><name>entry</name>-&gt;<name>repos</name></name> : <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>adm_access</name></name> = <name>adm_access</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>anchor</name></name> = <name>anchor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>target</name></name> = <name>target</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>requested_depth</name></name> = <name>depth</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>depth_is_sticky</name></name> = <name>depth_is_sticky</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>notify_func</name></name> = <name>notify_func</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>notify_baton</name></name> = <name>notify_baton</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>traversal_info</name></name> = <name>traversal_info</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>diff3_cmd</name></name> = <name>diff3_cmd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>cancel_func</name></name> = <name>cancel_func</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>cancel_baton</name></name> = <name>cancel_baton</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>conflict_func</name></name> = <name>conflict_func</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>conflict_baton</name></name> = <name>conflict_baton</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>fetch_func</name></name> = <name>fetch_func</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>fetch_baton</name></name> = <name>fetch_baton</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>allow_unver_obstructions</name></name> = <name>allow_unver_obstructions</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>skipped_paths</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>ext_patterns</name></name> = <name>preserved_exts</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>set_target_revision</name></name> = <name>set_target_revision</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>open_root</name></name> = <name>open_root</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>delete_entry</name></name> = <name>delete_entry</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>add_directory</name></name> = <name>add_directory</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>open_directory</name></name> = <name>open_directory</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>change_dir_prop</name></name> = <name>change_dir_prop</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>close_directory</name></name> = <name>close_directory</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>absent_directory</name></name> = <name>absent_directory</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>add_file</name></name> = <name>add_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>open_file</name></name> = <name>open_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>apply_textdelta</name></name> = <name>apply_textdelta</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>change_file_prop</name></name> = <name>change_file_prop</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>close_file</name></name> = <name>close_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>absent_file</name></name> = <name>absent_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>close_edit</name></name> = <name>close_edit</name></expr>;</expr_stmt>
<expr_stmt><expr><name>inner_editor</name> = <name>tree_editor</name></expr>;</expr_stmt>
<expr_stmt><expr><name>inner_baton</name> = <name>eb</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>depth_is_sticky</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>target_entry</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>target_entry</name></expr></argument>, <argument><expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>target_entry</name> &amp;&amp; (<name><name>target_entry</name>-&gt;<name>depth</name></name> &gt; <name>depth</name>)</expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_UNSUPPORTED_FEATURE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Shallowing of working copy depths is not "
"yet supported"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__ambient_depth_filter_editor</name><argument_list>(<argument><expr>&amp;<name>inner_editor</name></expr></argument>,
<argument><expr>&amp;<name>inner_baton</name></expr></argument>,
<argument><expr><name>inner_editor</name></expr></argument>,
<argument><expr><name>inner_baton</name></expr></argument>,
<argument><expr><name>anchor</name></expr></argument>,
<argument><expr><name>target</name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_delta_get_cancellation_editor</name><argument_list>(<argument><expr><name>cancel_func</name></expr></argument>,
<argument><expr><name>cancel_baton</name></expr></argument>,
<argument><expr><name>inner_editor</name></expr></argument>,
<argument><expr><name>inner_baton</name></expr></argument>,
<argument><expr><name>editor</name></expr></argument>,
<argument><expr><name>edit_baton</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_get_update_editor3</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name> *</type><name>target_revision</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>anchor</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>use_commit_times</name></decl></param>,
<param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>depth_is_sticky</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>allow_unver_obstructions</name></decl></param>,
<param><decl><type><name>svn_wc_notify_func2_t</name></type> <name>notify_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>notify_baton</name></decl></param>,
<param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
<param><decl><type><name>svn_wc_conflict_resolver_func_t</name></type> <name>conflict_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>conflict_baton</name></decl></param>,
<param><decl><type><name>svn_wc_get_file_t</name></type> <name>fetch_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>fetch_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>diff3_cmd</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>preserved_exts</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
<param><decl><type><name>svn_wc_traversal_info_t</name> *</type><name>traversal_info</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>make_editor</name><argument_list>(<argument><expr><name>target_revision</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>, <argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>target</name></expr></argument>, <argument><expr><name>use_commit_times</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>depth_is_sticky</name></expr></argument>,
<argument><expr><name>allow_unver_obstructions</name></expr></argument>, <argument><expr><name>notify_func</name></expr></argument>, <argument><expr><name>notify_baton</name></expr></argument>,
<argument><expr><name>cancel_func</name></expr></argument>, <argument><expr><name>cancel_baton</name></expr></argument>, <argument><expr><name>conflict_func</name></expr></argument>, <argument><expr><name>conflict_baton</name></expr></argument>,
<argument><expr><name>fetch_func</name></expr></argument>, <argument><expr><name>fetch_baton</name></expr></argument>,
<argument><expr><name>diff3_cmd</name></expr></argument>, <argument><expr><name>preserved_exts</name></expr></argument>, <argument><expr><name>editor</name></expr></argument>, <argument><expr><name>edit_baton</name></expr></argument>,
<argument><expr><name>traversal_info</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_get_update_editor2</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name> *</type><name>target_revision</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>anchor</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>use_commit_times</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
<param><decl><type><name>svn_wc_notify_func2_t</name></type> <name>notify_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>notify_baton</name></decl></param>,
<param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>diff3_cmd</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
<param><decl><type><name>svn_wc_traversal_info_t</name> *</type><name>traversal_info</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_wc_get_update_editor3</name><argument_list>(<argument><expr><name>target_revision</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>target</name></expr></argument>,
<argument><expr><name>use_commit_times</name></expr></argument>,
<argument><expr><call><name>SVN_DEPTH_INFINITY_OR_FILES</name><argument_list>(<argument><expr><name>recurse</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>notify_func</name></expr></argument>, <argument><expr><name>notify_baton</name></expr></argument>,
<argument><expr><name>cancel_func</name></expr></argument>, <argument><expr><name>cancel_baton</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>diff3_cmd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>editor</name></expr></argument>, <argument><expr><name>edit_baton</name></expr></argument>,
<argument><expr><name>traversal_info</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_get_update_editor</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name> *</type><name>target_revision</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>anchor</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>use_commit_times</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
<param><decl><type><name>svn_wc_notify_func_t</name></type> <name>notify_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>notify_baton</name></decl></param>,
<param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>diff3_cmd</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
<param><decl><type><name>svn_wc_traversal_info_t</name> *</type><name>traversal_info</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_wc__compat_notify_baton_t</name> *</type><name>nb</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>nb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>nb</name>-&gt;<name>func</name></name> = <name>notify_func</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nb</name>-&gt;<name>baton</name></name> = <name>notify_baton</name></expr>;</expr_stmt>
<return>return <expr><call><name>svn_wc_get_update_editor3</name><argument_list>(<argument><expr><name>target_revision</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>target</name></expr></argument>,
<argument><expr><name>use_commit_times</name></expr></argument>,
<argument><expr><call><name>SVN_DEPTH_INFINITY_OR_FILES</name><argument_list>(<argument><expr><name>recurse</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>svn_wc__compat_call_notify_func</name></expr></argument>, <argument><expr><name>nb</name></expr></argument>,
<argument><expr><name>cancel_func</name></expr></argument>, <argument><expr><name>cancel_baton</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>diff3_cmd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>editor</name></expr></argument>, <argument><expr><name>edit_baton</name></expr></argument>,
<argument><expr><name>traversal_info</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_get_switch_editor3</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name> *</type><name>target_revision</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>anchor</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>switch_url</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>use_commit_times</name></decl></param>,
<param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>depth_is_sticky</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>allow_unver_obstructions</name></decl></param>,
<param><decl><type><name>svn_wc_notify_func2_t</name></type> <name>notify_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>notify_baton</name></decl></param>,
<param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
<param><decl><type><name>svn_wc_conflict_resolver_func_t</name></type> <name>conflict_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>conflict_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>diff3_cmd</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>preserved_exts</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
<param><decl><type><name>svn_wc_traversal_info_t</name> *</type><name>traversal_info</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>switch_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>make_editor</name><argument_list>(<argument><expr><name>target_revision</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>, <argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>target</name></expr></argument>, <argument><expr><name>use_commit_times</name></expr></argument>, <argument><expr><name>switch_url</name></expr></argument>,
<argument><expr><name>depth</name></expr></argument>, <argument><expr><name>depth_is_sticky</name></expr></argument>, <argument><expr><name>allow_unver_obstructions</name></expr></argument>,
<argument><expr><name>notify_func</name></expr></argument>, <argument><expr><name>notify_baton</name></expr></argument>, <argument><expr><name>cancel_func</name></expr></argument>, <argument><expr><name>cancel_baton</name></expr></argument>,
<argument><expr><name>conflict_func</name></expr></argument>, <argument><expr><name>conflict_baton</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>diff3_cmd</name></expr></argument>, <argument><expr><name>preserved_exts</name></expr></argument>,
<argument><expr><name>editor</name></expr></argument>, <argument><expr><name>edit_baton</name></expr></argument>, <argument><expr><name>traversal_info</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_get_switch_editor2</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name> *</type><name>target_revision</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>anchor</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>switch_url</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>use_commit_times</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
<param><decl><type><name>svn_wc_notify_func2_t</name></type> <name>notify_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>notify_baton</name></decl></param>,
<param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>diff3_cmd</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
<param><decl><type><name>svn_wc_traversal_info_t</name> *</type><name>traversal_info</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>switch_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_wc_get_switch_editor3</name><argument_list>(<argument><expr><name>target_revision</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>target</name></expr></argument>,
<argument><expr><name>switch_url</name></expr></argument>, <argument><expr><name>use_commit_times</name></expr></argument>,
<argument><expr><call><name>SVN_DEPTH_INFINITY_OR_FILES</name><argument_list>(<argument><expr><name>recurse</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>notify_func</name></expr></argument>, <argument><expr><name>notify_baton</name></expr></argument>,
<argument><expr><name>cancel_func</name></expr></argument>, <argument><expr><name>cancel_baton</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>diff3_cmd</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>editor</name></expr></argument>, <argument><expr><name>edit_baton</name></expr></argument>, <argument><expr><name>traversal_info</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_get_switch_editor</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name> *</type><name>target_revision</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>anchor</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>switch_url</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>use_commit_times</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
<param><decl><type><name>svn_wc_notify_func_t</name></type> <name>notify_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>notify_baton</name></decl></param>,
<param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>diff3_cmd</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
<param><decl><type><name>svn_wc_traversal_info_t</name> *</type><name>traversal_info</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_wc__compat_notify_baton_t</name> *</type><name>nb</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>nb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>nb</name>-&gt;<name>func</name></name> = <name>notify_func</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nb</name>-&gt;<name>baton</name></name> = <name>notify_baton</name></expr>;</expr_stmt>
<return>return <expr><call><name>svn_wc_get_switch_editor3</name><argument_list>(<argument><expr><name>target_revision</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>target</name></expr></argument>,
<argument><expr><name>switch_url</name></expr></argument>, <argument><expr><name>use_commit_times</name></expr></argument>,
<argument><expr><call><name>SVN_DEPTH_INFINITY_OR_FILES</name><argument_list>(<argument><expr><name>recurse</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>svn_wc__compat_call_notify_func</name></expr></argument>, <argument><expr><name>nb</name></expr></argument>,
<argument><expr><name>cancel_func</name></expr></argument>, <argument><expr><name>cancel_baton</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>diff3_cmd</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>editor</name></expr></argument>, <argument><expr><name>edit_baton</name></expr></argument>, <argument><expr><name>traversal_info</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_wc_traversal_info_t</name> *</type>
<name>svn_wc_init_traversal_info</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_wc_traversal_info_t</name> *</type><name>ti</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>ti</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ti</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ti</name>-&gt;<name>externals_old</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ti</name>-&gt;<name>externals_new</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ti</name>-&gt;<name>depths</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ti</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>svn_wc_edited_externals</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>externals_old</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> **</type><name>externals_new</name></decl></param>,
<param><decl><type><name>svn_wc_traversal_info_t</name> *</type><name>traversal_info</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>*<name>externals_old</name> = <name><name>traversal_info</name>-&gt;<name>externals_old</name></name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>externals_new</name> = <name><name>traversal_info</name>-&gt;<name>externals_new</name></name></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type>
<name>svn_wc_traversed_depths</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>depths</name></decl></param>,
<param><decl><type><name>svn_wc_traversal_info_t</name> *</type><name>traversal_info</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>*<name>depths</name> = <name><name>traversal_info</name>-&gt;<name>depths</name></name></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>check_wc_root</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>wc_root</name></decl></param>,
<param><decl><type><name>svn_node_kind_t</name> *</type><name>kind</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>parent</name></decl>, *<decl><type ref="prev"/><name>base_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>p_entry</name></decl>, *<decl><type ref="prev"/><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>p_access</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>wc_root</name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>kind</name></expr>)</condition><then>
<expr_stmt><expr>*<name>kind</name> = <name>entry</name> ? <name><name>entry</name>-&gt;<name>kind</name></name> : <name>svn_node_file</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><call><name>svn_path_is_empty</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>svn_dirent_is_root</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>p_entry</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_path_split</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>&amp;<name>parent</name></expr></argument>, <argument><expr>&amp;<name>base_name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__adm_retrieve_internal</name><argument_list>(<argument><expr>&amp;<name>p_access</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>p_access</name></expr>)</condition><then>
<expr_stmt><expr><name>err</name> = <call><name>svn_wc_adm_probe_open3</name><argument_list>(<argument><expr>&amp;<name>p_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>! <name>err</name></expr>)</condition><then>
<expr_stmt><expr><name>err</name> = <call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>p_entry</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>err</name> || (! <name>p_entry</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>! <name><name>p_entry</name>-&gt;<name>url</name></name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_ENTRY_MISSING_URL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s' has no ancestry information"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>entry</name> &amp;&amp; <name><name>entry</name>-&gt;<name>url</name></name>
&amp;&amp; (<call><name>strcmp</name><argument_list>(<argument><expr><call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>p_entry</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name>base_name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>entry</name>-&gt;<name>url</name></name></expr></argument>)</argument_list></call> != 0)</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>p_entry</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>p_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>p_entry</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr>*<name>wc_root</name> = <name>FALSE</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_is_wc_root</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>wc_root</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>check_wc_root</name><argument_list>(<argument><expr><name>wc_root</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_get_actual_target</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>anchor</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>target</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>is_wc_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_probe_open3</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_wc_root</name><argument_list>(<argument><expr>&amp;<name>is_wc_root</name></expr></argument>, <argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_close</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(! <name>is_wc_root</name>) || (<name>kind</name> == <name>svn_node_file</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_path_split</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>anchor</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>target</name> = ""</expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>install_added_props</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> *</type><name>log_accum</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_path</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>new_base_props</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>new_props</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>regular_props</name> <init>= <expr><name>NULL</name></expr></init>, *<name>wc_props</name> <init>= <expr><name>NULL</name></expr></init>,
*<name>entry_props</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>prop_array</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_prop_diffs</name><argument_list>(<argument><expr>&amp;<name>prop_array</name></expr></argument>, <argument><expr><name>new_base_props</name></expr></argument>,
<argument><expr><call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_categorize_props</name><argument_list>(<argument><expr><name>prop_array</name></expr></argument>,
<argument><expr>&amp;<name>entry_props</name></expr></argument>, <argument><expr>&amp;<name>wc_props</name></expr></argument>, <argument><expr>&amp;<name>regular_props</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new_base_props</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>regular_props</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_prop_t</name> *</type><name>prop</name> <init>= <expr>&amp;<call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>regular_props</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_prop_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>new_base_props</name></expr></argument>, <argument><expr><name><name>prop</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><name><name>prop</name>-&gt;<name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__install_props</name><argument_list>(<argument><expr>&amp;<name>log_accum</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>dst_path</name></expr></argument>,
<argument><expr><name>new_base_props</name></expr></argument>,
<argument><expr><name>new_props</name> ? <name>new_props</name> : <name>new_base_props</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>accumulate_entry_props</name><argument_list>(<argument><expr><name>log_accum</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>dst_path</name></expr></argument>,
<argument><expr><name>entry_props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>accumulate_wcprops</name><argument_list>(<argument><expr><name>log_accum</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>dst_path</name></expr></argument>, <argument><expr><name>wc_props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_add_repos_file2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_path</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>new_text_base_path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>new_text_path</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>new_base_props</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>new_props</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_url</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_rev</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>new_URL</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>adm_path</name> <init>= <expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmp_text_base_path</name> <init>=
<expr><call><name>svn_wc__text_base_path</name><argument_list>(<argument><expr><name>dst_path</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>text_base_path</name> <init>=
<expr><call><name>svn_wc__text_base_path</name><argument_list>(<argument><expr><name>dst_path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>ent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>dst_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>log_accum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dir_name</name></decl>, *<decl><type ref="prev"/><name>base_name</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_path_split</name><argument_list>(<argument><expr><name>dst_path</name></expr></argument>, <argument><expr>&amp;<name>dir_name</name></expr></argument>, <argument><expr>&amp;<name>base_name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_versioned</name><argument_list>(<argument><expr>&amp;<name>ent</name></expr></argument>, <argument><expr><name>dir_name</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new_URL</name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>ent</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name>base_name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>copyfrom_url</name> &amp;&amp; <name><name>ent</name>-&gt;<name>repos</name></name> &amp;&amp;
! <call><name>svn_path_is_ancestor</name><argument_list>(<argument><expr><name><name>ent</name>-&gt;<name>repos</name></name></expr></argument>, <argument><expr><name>copyfrom_url</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_UNSUPPORTED_FEATURE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Copyfrom-url '%s' has different repository"
" root than '%s'"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>copyfrom_url</name></expr></argument>, <argument><expr><name><name>ent</name>-&gt;<name>repos</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block>
<expr_stmt><expr><name>log_accum</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>dst_entry</name></expr></argument>, <argument><expr><name>dst_path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>dst_entry</name> &amp;&amp; <name><name>dst_entry</name>-&gt;<name>schedule</name></name> == <name>svn_wc_schedule_delete</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_rtext</name> <init>= <expr><call><name>svn_wc__text_revert_path</name><argument_list>(<argument><expr><name>dst_path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_txtb</name> <init>= <expr><call><name>svn_wc__text_base_path</name><argument_list>(<argument><expr><name>dst_path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__loggy_move</name><argument_list>(<argument><expr>&amp;<name>log_accum</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>dst_txtb</name></expr></argument>, <argument><expr><name>dst_rtext</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__loggy_revert_props_create</name><argument_list>(<argument><expr>&amp;<name>log_accum</name></expr></argument>,
<argument><expr><name>dst_path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<block>{
<decl_stmt><decl><type><name>svn_wc_entry_t</name></type> <name>tmp_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint64_t</name></type> <name>modify_flags</name> <init>= <expr><name>SVN_WC__ENTRY_MODIFY_SCHEDULE</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>tmp_entry</name>.<name>schedule</name></name> = <name>svn_wc_schedule_add</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>copyfrom_url</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>copyfrom_rev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp_entry</name>.<name>copyfrom_url</name></name> = <name>copyfrom_url</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp_entry</name>.<name>copyfrom_rev</name></name> = <name>copyfrom_rev</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp_entry</name>.<name>copied</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>modify_flags</name> |= <name>SVN_WC__ENTRY_MODIFY_COPYFROM_URL</name>
| <name>SVN_WC__ENTRY_MODIFY_COPYFROM_REV</name>
| <name>SVN_WC__ENTRY_MODIFY_COPIED</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__loggy_entry_modify</name><argument_list>(<argument><expr>&amp;<name>log_accum</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>dst_path</name></expr></argument>, <argument><expr>&amp;<name>tmp_entry</name></expr></argument>,
<argument><expr><name>modify_flags</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>loggy_tweak_entry</name><argument_list>(<argument><expr><name>log_accum</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>dst_path</name></expr></argument>,
<argument><expr><name>dst_entry</name> ? <name><name>dst_entry</name>-&gt;<name>revision</name></name> : <name><name>ent</name>-&gt;<name>revision</name></name></expr></argument>,
<argument><expr><name>new_URL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>install_added_props</name><argument_list>(<argument><expr><name>log_accum</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>dst_path</name></expr></argument>,
<argument><expr><name>new_base_props</name></expr></argument>, <argument><expr><name>new_props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>tmp_text_base_path</name></expr></argument>, <argument><expr><name>new_text_base_path</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_move</name><argument_list>(<argument><expr><name>new_text_base_path</name></expr></argument>, <argument><expr><name>tmp_text_base_path</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>new_text_path</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmp_text_path</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_create_tmp_file2</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>tmp_text_path</name></expr></argument>, <argument><expr><name>adm_path</name></expr></argument>,
<argument><expr><name>svn_io_file_del_none</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_move</name><argument_list>(<argument><expr><name>new_text_path</name></expr></argument>, <argument><expr><name>tmp_text_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>svn_wc__has_special_property</name><argument_list>(<argument><expr><name>new_base_props</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__loggy_copy</name><argument_list>(<argument><expr>&amp;<name>log_accum</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>svn_wc__copy_translate_special_only</name></expr></argument>,
<argument><expr><name>tmp_text_path</name></expr></argument>,
<argument><expr><name>dst_path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__loggy_remove</name><argument_list>(<argument><expr>&amp;<name>log_accum</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>tmp_text_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__loggy_move</name><argument_list>(<argument><expr>&amp;<name>log_accum</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>tmp_text_path</name></expr></argument>, <argument><expr><name>dst_path</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__loggy_maybe_set_readonly</name><argument_list>(<argument><expr>&amp;<name>log_accum</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>dst_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__loggy_copy</name><argument_list>(<argument><expr>&amp;<name>log_accum</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>svn_wc__copy_translate</name></expr></argument>,
<argument><expr><name>tmp_text_base_path</name></expr></argument>, <argument><expr><name>dst_path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__loggy_set_entry_timestamp_from_wc</name>
<argument_list>(<argument><expr>&amp;<name>log_accum</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>dst_path</name></expr></argument>, <argument><expr><name>SVN_WC__ENTRY_ATTR_TEXT_TIME</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__loggy_set_entry_working_size_from_wc</name>
<argument_list>(<argument><expr>&amp;<name>log_accum</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>dst_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><name>APR_MD5_DIGESTSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_entry_t</name></type> <name>tmp_entry</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__loggy_move</name><argument_list>(<argument><expr>&amp;<name>log_accum</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>tmp_text_base_path</name></expr></argument>,
<argument><expr><name>text_base_path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__loggy_set_readonly</name><argument_list>(<argument><expr>&amp;<name>log_accum</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>text_base_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_checksum</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name>tmp_text_base_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp_entry</name>.<name>checksum</name></name> = <call><name>svn_md5_digest_to_cstring</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__loggy_entry_modify</name><argument_list>(<argument><expr>&amp;<name>log_accum</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>dst_path</name></expr></argument>, <argument><expr>&amp;<name>tmp_entry</name></expr></argument>,
<argument><expr><name>SVN_WC__ENTRY_MODIFY_CHECKSUM</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__write_log</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>log_accum</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__run_log</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_add_repos_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_path</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>new_text_path</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>new_props</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_url</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_rev</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_wc_add_repos_file2</name><argument_list>(<argument><expr><name>dst_path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>new_text_path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>new_props</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>copyfrom_url</name></expr></argument>, <argument><expr><name>copyfrom_rev</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
</unit>
