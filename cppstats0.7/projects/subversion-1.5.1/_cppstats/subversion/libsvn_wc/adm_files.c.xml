<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/libsvn_wc/adm_files.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_file_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"adm_files.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"entries.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_wc_private.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>default_adm_dir_name</name><index>[]</index></name> <init>= <expr>".svn"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>adm_dir_name</name> <init>= <expr><name>default_adm_dir_name</name></expr></init></decl>;</decl_stmt>
<function><type><name>svn_boolean_t</name></type>
<name>svn_wc_is_adm_dir</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr>(0 == <call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>adm_dir_name</name></expr></argument>)</argument_list></call>
|| 0 == <call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>default_adm_dir_name</name></expr></argument>)</argument_list></call>)</expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_wc_get_adm_dir</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name>adm_dir_name</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_set_adm_dir</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name><name>valid_dir_names</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>default_adm_dir_name</name></expr>,
<expr>"_svn"</expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>dir_name</name></decl>;</decl_stmt>
<for>for (<init><expr><name>dir_name</name> = <name>valid_dir_names</name></expr>;</init> <condition><expr>*<name>dir_name</name></expr>;</condition> <incr><expr>++<name>dir_name</name></expr></incr>)
<if>if <condition>(<expr>0 == <call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>*<name>dir_name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>adm_dir_name</name> = *<name>dir_name</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if></for>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_BAD_FILENAME</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s' is not a valid administrative directory name"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>v_extend_with_adm_name</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>extension</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>use_tmp</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><name>va_list</name></type> <name>ap</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>this</name></decl>;</decl_stmt>
<expr_stmt><expr><name>path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_dir_name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>use_tmp</name></expr>)</condition><then>
<expr_stmt><expr><name>path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>SVN_WC__ADM_TMP</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<while>while <condition>(<expr>(<name>this</name> = <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition> <block>{
<if>if <condition>(<expr><name><name>this</name><index>[<expr>0</expr>]</index></name> == '\0'</expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><name>path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name>extension</name></expr>)</condition><then>
<expr_stmt><expr><name>path</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>extension</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>path</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>extend_with_adm_name</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>extension</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>use_tmp</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type>...</type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> = <call><name>v_extend_with_adm_name</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>extension</name></expr></argument>, <argument><expr><name>use_tmp</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>path</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_wc__adm_path</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>tmp</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type>...</type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> = <call><name>v_extend_with_adm_name</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>path</name></expr>;</return>
}</block></function>
<function><type><name>svn_boolean_t</name></type>
<name>svn_wc__adm_path_exists</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>tmp</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type>...</type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> = <call><name>v_extend_with_adm_name</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_io_check_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>kind</name> == <name>svn_node_none</name></expr>)</condition><then>
<return>return <expr><name>FALSE</name></expr>;</return></then>
<else>else
<return>return <expr><name>TRUE</name></expr>;</return></else></if>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__make_adm_thing</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>thing</name></decl></param>,
<param><decl><type><name>svn_node_kind_t</name></type> <name>type</name></decl></param>,
<param><decl><type><name>apr_fileperms_t</name></type> <name>perms</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>tmp</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__adm_write_check</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> = <call><name>extend_with_adm_name</name><argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>thing</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>type</name> == <name>svn_node_file</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_open</name><argument_list>(<argument><expr>&amp;<name>f</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
<argument><expr>(<name>APR_WRITE</name> | <name>APR_CREATE</name> | <name>APR_EXCL</name>)</expr></argument>,
<argument><expr><name>perms</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_close</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>type</name> == <name>svn_node_dir</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_dir_make</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>perms</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>err</name> = <call><name>svn_error_create</name>
<argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Bad type indicator"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__make_killme</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>adm_only</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__adm_write_check</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> = <call><name>extend_with_adm_name</name><argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>SVN_WC__ADM_KILLME</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_io_file_create</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_only</name> ? <name>SVN_WC__KILL_ADM_ONLY</name> : ""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__check_killme</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name> *</type><name>exists</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name> *</type><name>kill_adm_only</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>contents</name></decl>;</decl_stmt>
<expr_stmt><expr><name>path</name> = <call><name>extend_with_adm_name</name><argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>SVN_WC__ADM_KILLME</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_stringbuf_from_file</name><argument_list>(<argument><expr>&amp;<name>contents</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>APR_STATUS_IS_ENOENT</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>apr_err</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>exists</name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>exists</name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>kill_adm_only</name> = <call><name>svn_string_compare_stringbuf</name>
<argument_list>(<argument><expr><call><name>svn_string_create</name><argument_list>(<argument><expr><name>SVN_WC__KILL_ADM_ONLY</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>contents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>sync_adm_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>extension</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type>...</type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmp_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_path</name> = <call><name>v_extend_with_adm_name</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>extension</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> = <call><name>v_extend_with_adm_name</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>extension</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_rename</name><argument_list>(<argument><expr><name>tmp_path</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_set_file_read_only</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__sync_text_base</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>parent_path</name></decl>, *<decl><type ref="prev"/><name>base_name</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_path_split</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>&amp;<name>parent_path</name></expr></argument>, <argument><expr>&amp;<name>base_name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>sync_adm_file</name><argument_list>(<argument><expr><name>parent_path</name></expr></argument>,
<argument><expr><name>SVN_WC__BASE_EXT</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>,
<argument><expr><name>SVN_WC__ADM_TEXT_BASE</name></expr></argument>,
<argument><expr><name>base_name</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_wc__text_base_path</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>tmp</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>newpath</name></decl>, *<decl><type ref="prev"/><name>base_name</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_path_split</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>&amp;<name>newpath</name></expr></argument>, <argument><expr>&amp;<name>base_name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>extend_with_adm_name</name><argument_list>(<argument><expr><name>newpath</name></expr></argument>,
<argument><expr><name>SVN_WC__BASE_EXT</name></expr></argument>,
<argument><expr><name>tmp</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>,
<argument><expr><name>SVN_WC__ADM_TEXT_BASE</name></expr></argument>,
<argument><expr><name>base_name</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_wc__text_revert_path</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>tmp</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>newpath</name></decl>, *<decl><type ref="prev"/><name>base_name</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_path_split</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>&amp;<name>newpath</name></expr></argument>, <argument><expr>&amp;<name>base_name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>extend_with_adm_name</name><argument_list>(<argument><expr><name>newpath</name></expr></argument>,
<argument><expr><name>SVN_WC__REVERT_EXT</name></expr></argument>,
<argument><expr><name>tmp</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>,
<argument><expr><name>SVN_WC__ADM_TEXT_BASE</name></expr></argument>,
<argument><expr><name>base_name</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__prop_path</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>prop_path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_node_kind_t</name></type> <name>node_kind</name></decl></param>,
<param><decl><type><name>svn_wc__props_kind_t</name></type> <name>props_kind</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>tmp</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>node_kind</name> == <name>svn_node_dir</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type> <name><name>names</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>SVN_WC__ADM_DIR_PROP_BASE</name></expr>,
<expr><name>SVN_WC__ADM_DIR_PROP_REVERT</name></expr>,
<expr><name>SVN_WC__ADM_DIR_WCPROPS</name></expr>,
<expr><name>SVN_WC__ADM_DIR_PROPS</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>prop_path</name> = <call><name>extend_with_adm_name</name>
<argument_list>(<argument><expr><name>path</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>tmp</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>,
<argument><expr><name><name>names</name><index>[<expr><name>props_kind</name></expr>]</index></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type> <name><name>extensions</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>SVN_WC__BASE_EXT</name></expr>,
<expr><name>SVN_WC__REVERT_EXT</name></expr>,
<expr><name>SVN_WC__WORK_EXT</name></expr>,
<expr><name>SVN_WC__WORK_EXT</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type> <name><name>dirs</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>SVN_WC__ADM_PROP_BASE</name></expr>,
<expr><name>SVN_WC__ADM_PROP_BASE</name></expr>,
<expr><name>SVN_WC__ADM_WCPROPS</name></expr>,
<expr><name>SVN_WC__ADM_PROPS</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_name</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_path_split</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>prop_path</name></expr></argument>, <argument><expr>&amp;<name>base_name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>prop_path</name> = <call><name>extend_with_adm_name</name>
<argument_list>(<argument><expr>*<name>prop_path</name></expr></argument>,
<argument><expr><name><name>extensions</name><index>[<expr><name>props_kind</name></expr>]</index></name></expr></argument>,
<argument><expr><name>tmp</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>,
<argument><expr><name><name>dirs</name><index>[<expr><name>props_kind</name></expr>]</index></name></expr></argument>,
<argument><expr><name>base_name</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>open_adm_file</name><parameter_list>(<param><decl><type><name>apr_file_t</name> **</type><name>handle</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>extension</name></decl></param>,
<param><decl><type><name>apr_fileperms_t</name></type> <name>protection</name></decl></param>,
<param><decl><type><name>apr_int32_t</name></type> <name>flags</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type>...</type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>flags</name> &amp; <name>APR_WRITE</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>flags</name> &amp; <name>APR_APPEND</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>SVN_ERR_UNSUPPORTED_FEATURE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"APR_APPEND not supported for adm files"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>flags</name> |= <name>APR_EXCL</name> | <name>APR_CREATE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> = <call><name>v_extend_with_adm_name</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>extension</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> = <call><name>v_extend_with_adm_name</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>extension</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>err</name> = <call><name>svn_io_file_open</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>protection</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>flags</name> &amp; <name>APR_WRITE</name>) &amp;&amp; <name>err</name> &amp;&amp; <call><name>APR_STATUS_IS_EEXIST</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>apr_err</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_remove_file</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_io_file_open</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>protection</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>handle</name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_ENOENT</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>apr_err</name></name></expr></argument>)</argument_list></call> &amp;&amp; (<name>flags</name> &amp; <name>APR_WRITE</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>svn_error_quick_wrap</name><argument_list>(<argument><expr><name>err</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Your .svn/tmp directory may be missing or "
"corrupt; run 'svn cleanup' and try again"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>close_adm_file</name><parameter_list>(<param><decl><type><name>apr_file_t</name> *</type><name>fp</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>extension</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>sync</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type>...</type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmp_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_path</name> = <call><name>v_extend_with_adm_name</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>extension</name></expr></argument>, <argument><expr><name>sync</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_close</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>sync</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> = <call><name>v_extend_with_adm_name</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>extension</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_rename</name><argument_list>(<argument><expr><name>tmp_path</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_set_file_read_only</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__open_adm_file</name><parameter_list>(<param><decl><type><name>apr_file_t</name> **</type><name>handle</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fname</name></decl></param>,
<param><decl><type><name>apr_int32_t</name></type> <name>flags</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>open_adm_file</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>,
<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__close_adm_file</name><parameter_list>(<param><decl><type><name>apr_file_t</name> *</type><name>fp</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fname</name></decl></param>,
<param><decl><type><name>int</name></type> <name>sync</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>close_adm_file</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sync</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__remove_adm_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type>...</type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> = <call><name>v_extend_with_adm_name</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_remove_file</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__open_text_base</name><parameter_list>(<param><decl><type><name>apr_file_t</name> **</type><name>handle</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>apr_int32_t</name></type> <name>flags</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>parent_path</name></decl>, *<decl><type ref="prev"/><name>base_name</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_path_split</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>&amp;<name>parent_path</name></expr></argument>, <argument><expr>&amp;<name>base_name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>open_adm_file</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>parent_path</name></expr></argument>, <argument><expr><name>SVN_WC__BASE_EXT</name></expr></argument>, <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>SVN_WC__ADM_TEXT_BASE</name></expr></argument>, <argument><expr><name>base_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__open_revert_base</name><parameter_list>(<param><decl><type><name>apr_file_t</name> **</type><name>handle</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>apr_int32_t</name></type> <name>flags</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>parent_path</name></decl>, *<decl><type ref="prev"/><name>base_name</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_path_split</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>&amp;<name>parent_path</name></expr></argument>, <argument><expr>&amp;<name>base_name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>open_adm_file</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>parent_path</name></expr></argument>, <argument><expr><name>SVN_WC__REVERT_EXT</name></expr></argument>, <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>SVN_WC__ADM_TEXT_BASE</name></expr></argument>, <argument><expr><name>base_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__close_text_base</name><parameter_list>(<param><decl><type><name>apr_file_t</name> *</type><name>fp</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>int</name></type> <name>write</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>parent_path</name></decl>, *<decl><type ref="prev"/><name>base_name</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_path_split</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>&amp;<name>parent_path</name></expr></argument>, <argument><expr>&amp;<name>base_name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>close_adm_file</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>parent_path</name></expr></argument>, <argument><expr><name>SVN_WC__BASE_EXT</name></expr></argument>, <argument><expr><name>write</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>,
<argument><expr><name>SVN_WC__ADM_TEXT_BASE</name></expr></argument>, <argument><expr><name>base_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__close_revert_base</name><parameter_list>(<param><decl><type><name>apr_file_t</name> *</type><name>fp</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>int</name></type> <name>write</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>parent_path</name></decl>, *<decl><type ref="prev"/><name>base_name</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_path_split</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>&amp;<name>parent_path</name></expr></argument>, <argument><expr>&amp;<name>base_name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>close_adm_file</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>parent_path</name></expr></argument>, <argument><expr><name>SVN_WC__REVERT_EXT</name></expr></argument>, <argument><expr><name>write</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>,
<argument><expr><name>SVN_WC__ADM_TEXT_BASE</name></expr></argument>, <argument><expr><name>base_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__open_props</name><parameter_list>(<param><decl><type><name>apr_file_t</name> **</type><name>handle</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl></param>,
<param><decl><type><name>apr_int32_t</name></type> <name>flags</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>base</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>wcprops</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>parent_dir</name></decl>, *<decl><type ref="prev"/><name>base_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wc_format_version</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>kind</name> == <name>svn_node_dir</name></expr>)</condition><then>
<expr_stmt><expr><name>parent_dir</name> = <name>path</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>svn_path_split</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>&amp;<name>parent_dir</name></expr></argument>, <argument><expr>&amp;<name>base_name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_check_wc</name><argument_list>(<argument><expr><name>parent_dir</name></expr></argument>, <argument><expr>&amp;<name>wc_format_version</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>wc_format_version</name> == 0</expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_WC_OBSTRUCTED_UPDATE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s' is not a working copy"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>parent_dir</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>base</name> &amp;&amp; <name>wcprops</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_WC_PATH_NOT_FOUND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"No such thing as 'base' "
"working copy properties!"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else <if>if <condition>(<expr><name>base</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>kind</name> == <name>svn_node_dir</name></expr>)</condition><then>
<return>return <expr><call><name>open_adm_file</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>parent_dir</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>SVN_WC__ADM_DIR_PROP_BASE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else
<return>return <expr><call><name>open_adm_file</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>parent_dir</name></expr></argument>, <argument><expr><name>SVN_WC__BASE_EXT</name></expr></argument>,
<argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>,
<argument><expr><name>SVN_WC__ADM_PROP_BASE</name></expr></argument>, <argument><expr><name>base_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></then> <else>else <if>if <condition>(<expr><name>wcprops</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>kind</name> == <name>svn_node_dir</name></expr>)</condition><then>
<return>return <expr><call><name>open_adm_file</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>parent_dir</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>SVN_WC__ADM_DIR_WCPROPS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else <block>{
<return>return <expr><call><name>open_adm_file</name>
<argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>parent_dir</name></expr></argument>,
<argument><expr><name>SVN_WC__WORK_EXT</name></expr></argument>, <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>SVN_WC__ADM_WCPROPS</name></expr></argument>, <argument><expr><name>base_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>kind</name> == <name>svn_node_dir</name></expr>)</condition><then>
<return>return <expr><call><name>open_adm_file</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>parent_dir</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>SVN_WC__ADM_DIR_PROPS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else <block>{
<return>return <expr><call><name>open_adm_file</name>
<argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>parent_dir</name></expr></argument>,
<argument><expr><name>SVN_WC__WORK_EXT</name></expr></argument>, <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>SVN_WC__ADM_PROPS</name></expr></argument>, <argument><expr><name>base_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
}</block></else></if></else></if></else></if>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__close_props</name><parameter_list>(<param><decl><type><name>apr_file_t</name> *</type><name>fp</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>base</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>wcprops</name></decl></param>,
<param><decl><type><name>int</name></type> <name>sync</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>parent_dir</name></decl>, *<decl><type ref="prev"/><name>base_name</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>kind</name> == <name>svn_node_dir</name></expr>)</condition><then>
<expr_stmt><expr><name>parent_dir</name> = <name>path</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>svn_path_split</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>&amp;<name>parent_dir</name></expr></argument>, <argument><expr>&amp;<name>base_name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>base</name> &amp;&amp; <name>wcprops</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_WC_PATH_NOT_FOUND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"No such thing as 'base' "
"working copy properties!"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else <if>if <condition>(<expr><name>base</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>kind</name> == <name>svn_node_dir</name></expr>)</condition><then>
<return>return <expr><call><name>close_adm_file</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>parent_dir</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sync</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>,
<argument><expr><name>SVN_WC__ADM_DIR_PROP_BASE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else
<return>return <expr><call><name>close_adm_file</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>parent_dir</name></expr></argument>, <argument><expr><name>SVN_WC__BASE_EXT</name></expr></argument>, <argument><expr><name>sync</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>,
<argument><expr><name>SVN_WC__ADM_PROP_BASE</name></expr></argument>, <argument><expr><name>base_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></then> <else>else <if>if <condition>(<expr><name>wcprops</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>kind</name> == <name>svn_node_dir</name></expr>)</condition><then>
<return>return <expr><call><name>close_adm_file</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>parent_dir</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sync</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>,
<argument><expr><name>SVN_WC__ADM_DIR_WCPROPS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else
<return>return <expr><call><name>close_adm_file</name>
<argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>parent_dir</name></expr></argument>,
<argument><expr><name>SVN_WC__WORK_EXT</name></expr></argument>,
<argument><expr><name>sync</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>SVN_WC__ADM_WCPROPS</name></expr></argument>, <argument><expr><name>base_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>kind</name> == <name>svn_node_dir</name></expr>)</condition><then>
<return>return <expr><call><name>close_adm_file</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>parent_dir</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sync</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>,
<argument><expr><name>SVN_WC__ADM_DIR_PROPS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else
<return>return <expr><call><name>close_adm_file</name>
<argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>parent_dir</name></expr></argument>,
<argument><expr><name>SVN_WC__WORK_EXT</name></expr></argument>,
<argument><expr><name>sync</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>SVN_WC__ADM_PROPS</name></expr></argument>, <argument><expr><name>base_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></else></if></else></if></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>check_adm_exists</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>exists</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_wc_adm_open3</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> &amp;&amp; <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_WC_NOT_DIRECTORY</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>exists</name> = <name>FALSE</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_versioned</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_close</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>schedule</name></name> != <name>svn_wc_schedule_delete</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>revision</name></name> != <name>revision</name></expr>)</condition><then>
<return>return
<expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_WC_OBSTRUCTED_UPDATE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Revision %ld doesn't match existing revision %ld in '%s'"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>revision</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>revision</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<return>return
<expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_WC_OBSTRUCTED_UPDATE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"URL '%s' doesn't match existing URL '%s' in '%s'"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>url</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></then></if>
<expr_stmt><expr>*<name>exists</name> = <name>TRUE</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>make_empty_adm</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name>path</name> = <call><name>extend_with_adm_name</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_dir_make_hidden</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>init_adm_tmp_area</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_fileperms_t</name></type> <name>perms</name> <init>= <expr><name>APR_OS_DEFAULT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__make_adm_thing</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>SVN_WC__ADM_TMP</name></expr></argument>,
<argument><expr><name>svn_node_dir</name></expr></argument>, <argument><expr><name>perms</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__make_adm_thing</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>SVN_WC__ADM_TEXT_BASE</name></expr></argument>,
<argument><expr><name>svn_node_dir</name></expr></argument>, <argument><expr><name>perms</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__make_adm_thing</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>SVN_WC__ADM_PROP_BASE</name></expr></argument>,
<argument><expr><name>svn_node_dir</name></expr></argument>, <argument><expr><name>perms</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__make_adm_thing</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>SVN_WC__ADM_PROPS</name></expr></argument>,
<argument><expr><name>svn_node_dir</name></expr></argument>, <argument><expr><name>perms</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>init_adm</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>uuid</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>initial_rev</name></decl></param>,
<param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_fileperms_t</name></type> <name>perms</name> <init>= <expr><name>APR_OS_DEFAULT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>make_empty_adm</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__adm_pre_open</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__make_adm_thing</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>SVN_WC__ADM_TEXT_BASE</name></expr></argument>,
<argument><expr><name>svn_node_dir</name></expr></argument>, <argument><expr><name>perms</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__make_adm_thing</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>SVN_WC__ADM_PROP_BASE</name></expr></argument>,
<argument><expr><name>svn_node_dir</name></expr></argument>, <argument><expr><name>perms</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__make_adm_thing</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>SVN_WC__ADM_PROPS</name></expr></argument>,
<argument><expr><name>svn_node_dir</name></expr></argument>, <argument><expr><name>perms</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>init_adm_tmp_area</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entries_init</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>uuid</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>,
<argument><expr><name>initial_rev</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_write_version_file</name>
<argument_list>(<argument><expr><call><name>extend_with_adm_name</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>,
<argument><expr><name>SVN_WC__ADM_FORMAT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>SVN_WC__VERSION</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_close</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_ensure_adm3</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>uuid</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
<param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>exists_already</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_adm_exists</name><argument_list>(<argument><expr>&amp;<name>exists_already</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>exists_already</name> ? <name>SVN_NO_ERROR</name> :
<call><name>init_adm</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>uuid</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>)</expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_ensure_adm2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>uuid</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_wc_ensure_adm3</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>uuid</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>,
<argument><expr><name>svn_depth_infinity</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_ensure_adm</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>uuid</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_wc_ensure_adm2</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>uuid</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__adm_destroy</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__adm_write_check</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> = <call><name>extend_with_adm_name</name><argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_remove_dir2</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_close</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc__adm_cleanup_tmp_area</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmp_path</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__adm_write_check</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_path</name> = <call><name>extend_with_adm_name</name><argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>SVN_WC__ADM_TMP</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_remove_dir2</name><argument_list>(<argument><expr><name>tmp_path</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>init_adm_tmp_area</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_create_tmp_file2</name><parameter_list>(<param><decl><type><name>apr_file_t</name> **</type><name>fp</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>new_name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_io_file_del_t</name></type> <name>delete_when</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>file</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>fp</name> || <name>new_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> = <call><name>svn_wc__adm_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"tempfile"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_open_unique_file2</name><argument_list>(<argument><expr>&amp;<name>file</name></expr></argument>, <argument><expr><name>new_name</name></expr></argument>,
<argument><expr><name>path</name></expr></argument>, <argument><expr>".tmp"</expr></argument>, <argument><expr><name>delete_when</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>fp</name></expr>)</condition><then>
<expr_stmt><expr>*<name>fp</name> = <name>file</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_close</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_create_tmp_file</name><parameter_list>(<param><decl><type><name>apr_file_t</name> **</type><name>fp</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>delete_on_close</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_wc_create_tmp_file2</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
<argument><expr><name>delete_on_close</name>
? <name>svn_io_file_del_on_close</name>
: <name>svn_io_file_del_none</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
</unit>
