<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/libsvn_wc/status.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_file_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_hash.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_delta.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"props.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"translate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_wc_private.h"</cpp:file></cpp:include>
<struct>struct <name>edit_baton</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>anchor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_depth_t</name></type> <name>default_depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>get_all</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>no_ignore</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name> *</type><name>target_revision</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_status_func2_t</name></type> <name>status_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>status_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>cancel_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>ignores</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_traversal_info_t</name> *</type><name>traversal_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>externals</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_status2_t</name> *</type><name>anchor_status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>root_opened</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>repos_locks</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>dir_baton</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>edit_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>parent_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>excluded</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>added</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>prop_changed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>text_changed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>statii</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>ood_last_cmt_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>ood_last_cmt_date</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>ood_kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ood_last_cmt_author</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>file_baton</name> <block>{
<decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>edit_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>dir_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>added</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>text_changed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>prop_changed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>ood_last_cmt_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>ood_last_cmt_date</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>ood_kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ood_last_cmt_author</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>assemble_status</name><parameter_list>(<param><decl><type><name>svn_wc_status2_t</name> **</type><name>status</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>parent_entry</name></decl></param>,
<param><decl><type><name>svn_node_kind_t</name></type> <name>path_kind</name></decl></param>, <param><decl><type><name>svn_boolean_t</name></type> <name>path_special</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>get_all</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>is_ignored</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>repos_locks</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_root</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_wc_status2_t</name> *</type><name>stat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>has_props</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>text_modified_p</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>prop_modified_p</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>locked_p</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>switched_p</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYMLINK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>wc_special</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<enum>enum <name>svn_wc_status_kind</name> <name>final_text_status</name> <expr_stmt><expr>= <name>svn_wc_status_normal</name></expr>;</expr_stmt></enum>
<enum>enum <name>svn_wc_status_kind</name> <name>final_prop_status</name> <expr_stmt><expr>= <name>svn_wc_status_none</name></expr>;</expr_stmt></enum>
<decl_stmt><decl><type><name>svn_lock_t</name> *</type><name>repos_lock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>repos_locks</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>abs_path</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>entry</name> &amp;&amp; <name><name>entry</name>-&gt;<name>url</name></name></expr>)</condition><then>
<expr_stmt><expr><name>abs_path</name> = <name><name>entry</name>-&gt;<name>url</name></name> + <call><name>strlen</name><argument_list>(<argument><expr><name>repos_root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>parent_entry</name> &amp;&amp; <name><name>parent_entry</name>-&gt;<name>url</name></name></expr>)</condition><then>
<expr_stmt><expr><name>abs_path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>parent_entry</name>-&gt;<name>url</name></name> + <call><name>strlen</name><argument_list>(<argument><expr><name>repos_root</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_path_basename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>abs_path</name> = <name>NULL</name></expr>;</expr_stmt></else></if></else></if>
<if>if <condition>(<expr><name>abs_path</name></expr>)</condition><then>
<expr_stmt><expr><name>repos_lock</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>repos_locks</name></expr></argument>,
<argument><expr><call><name>svn_path_uri_decode</name><argument_list>(<argument><expr><name>abs_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>path_kind</name> == <name>svn_node_unknown</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_check_special_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>&amp;<name>path_kind</name></expr></argument>, <argument><expr>&amp;<name>path_special</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>! <name>entry</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>stat</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>stat</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stat</name>-&gt;<name>entry</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stat</name>-&gt;<name>text_status</name></name> = <name>svn_wc_status_none</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stat</name>-&gt;<name>prop_status</name></name> = <name>svn_wc_status_none</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stat</name>-&gt;<name>repos_text_status</name></name> = <name>svn_wc_status_none</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stat</name>-&gt;<name>repos_prop_status</name></name> = <name>svn_wc_status_none</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stat</name>-&gt;<name>locked</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stat</name>-&gt;<name>copied</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stat</name>-&gt;<name>switched</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>path_kind</name> != <name>svn_node_none</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>is_ignored</name></expr>)</condition><then>
<expr_stmt><expr><name><name>stat</name>-&gt;<name>text_status</name></name> = <name>svn_wc_status_ignored</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>stat</name>-&gt;<name>text_status</name></name> = <name>svn_wc_status_unversioned</name></expr>;</expr_stmt></else></if>
}</block></then></if>
<expr_stmt><expr><name><name>stat</name>-&gt;<name>repos_lock</name></name> = <name>repos_lock</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stat</name>-&gt;<name>url</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stat</name>-&gt;<name>ood_last_cmt_rev</name></name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stat</name>-&gt;<name>ood_last_cmt_date</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>stat</name>-&gt;<name>ood_kind</name></name> = <name>svn_node_none</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stat</name>-&gt;<name>ood_last_cmt_author</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>status</name> = <name>stat</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>path_kind</name> == <name>svn_node_dir</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>svn_wc__adm_missing</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>final_text_status</name> = <name>svn_wc_status_obstructed</name></expr>;</expr_stmt></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name>path_kind</name> != <name>svn_node_none</name></expr>)</condition><then>
<expr_stmt><expr><name>final_text_status</name> = <name>svn_wc_status_obstructed</name></expr>;</expr_stmt></then></if></else></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>url</name></name> &amp;&amp; <name>parent_entry</name> &amp;&amp; <name><name>parent_entry</name>-&gt;<name>url</name></name> &amp;&amp;
<name>entry</name> != <name>parent_entry</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>svn_path_uri_encode</name><argument_list>(<argument><expr><call><name>svn_path_basename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_path_basename</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>switched_p</name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>! <name>switched_p</name>
&amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><call><name>svn_path_dirname</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>parent_entry</name>-&gt;<name>url</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>switched_p</name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>final_text_status</name> != <name>svn_wc_status_obstructed</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__has_props</name><argument_list>(<argument><expr>&amp;<name>has_props</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>has_props</name></expr>)</condition><then>
<expr_stmt><expr><name>final_prop_status</name> = <name>svn_wc_status_normal</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_props_modified_p</name><argument_list>(<argument><expr>&amp;<name>prop_modified_p</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYMLINK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>has_props</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__get_special</name><argument_list>(<argument><expr>&amp;<name>wc_special</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>wc_special</name> = <name>FALSE</name></expr>;</expr_stmt></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>(<name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_file</name>)
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYMLINK</name></expr></argument>)</argument_list></call></expr></cpp:if>
&amp;&amp; (<name>wc_special</name> == <name>path_special</name>)</expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_text_modified_p</name><argument_list>(<argument><expr>&amp;<name>text_modified_p</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>text_modified_p</name></expr>)</condition><then>
<expr_stmt><expr><name>final_text_status</name> = <name>svn_wc_status_modified</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>prop_modified_p</name></expr>)</condition><then>
<expr_stmt><expr><name>final_prop_status</name> = <name>svn_wc_status_modified</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>prejfile</name></name> || <name><name>entry</name>-&gt;<name>conflict_old</name></name> ||
<name><name>entry</name>-&gt;<name>conflict_new</name></name> || <name><name>entry</name>-&gt;<name>conflict_wrk</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>text_conflict_p</name></decl>, <decl><type ref="prev"/><name>prop_conflict_p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>parent_dir</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name></expr>)</condition><then>
<expr_stmt><expr><name>parent_dir</name> = <name>path</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>parent_dir</name> = <call><name>svn_path_dirname</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_conflicted_p</name><argument_list>(<argument><expr>&amp;<name>text_conflict_p</name></expr></argument>, <argument><expr>&amp;<name>prop_conflict_p</name></expr></argument>,
<argument><expr><name>parent_dir</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>text_conflict_p</name></expr>)</condition><then>
<expr_stmt><expr><name>final_text_status</name> = <name>svn_wc_status_conflicted</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>prop_conflict_p</name></expr>)</condition><then>
<expr_stmt><expr><name>final_prop_status</name> = <name>svn_wc_status_conflicted</name></expr>;</expr_stmt></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>schedule</name></name> == <name>svn_wc_schedule_add</name>
&amp;&amp; <name>final_text_status</name> != <name>svn_wc_status_conflicted</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>final_text_status</name> = <name>svn_wc_status_added</name></expr>;</expr_stmt>
<expr_stmt><expr><name>final_prop_status</name> = <name>svn_wc_status_none</name></expr>;</expr_stmt>
}</block></then>
<else>else <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>schedule</name></name> == <name>svn_wc_schedule_replace</name>
&amp;&amp; <name>final_text_status</name> != <name>svn_wc_status_conflicted</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>final_text_status</name> = <name>svn_wc_status_replaced</name></expr>;</expr_stmt>
<expr_stmt><expr><name>final_prop_status</name> = <name>svn_wc_status_none</name></expr>;</expr_stmt>
}</block></then>
<else>else <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>schedule</name></name> == <name>svn_wc_schedule_delete</name>
&amp;&amp; <name>final_text_status</name> != <name>svn_wc_status_conflicted</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>final_text_status</name> = <name>svn_wc_status_deleted</name></expr>;</expr_stmt>
<expr_stmt><expr><name>final_prop_status</name> = <name>svn_wc_status_none</name></expr>;</expr_stmt>
}</block></then></if></else></if></else></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>incomplete</name></name>
&amp;&amp; (<name>final_text_status</name> != <name>svn_wc_status_deleted</name>)
&amp;&amp; (<name>final_text_status</name> != <name>svn_wc_status_added</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>final_text_status</name> = <name>svn_wc_status_incomplete</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>path_kind</name> == <name>svn_node_none</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>final_text_status</name> != <name>svn_wc_status_deleted</name></expr>)</condition><then>
<expr_stmt><expr><name>final_text_status</name> = <name>svn_wc_status_missing</name></expr>;</expr_stmt></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name>path_kind</name> != <name><name>entry</name>-&gt;<name>kind</name></name></expr>)</condition><then>
<expr_stmt><expr><name>final_text_status</name> = <name>svn_wc_status_obstructed</name></expr>;</expr_stmt></then>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SYMLINK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else <if>if <condition>(<expr>((! <name>wc_special</name>) &amp;&amp; (<name>path_special</name>))
|| (<name>wc_special</name> &amp;&amp; (! <name>path_special</name>))</expr>
)</condition><then>
<expr_stmt><expr><name>final_text_status</name> = <name>svn_wc_status_obstructed</name></expr>;</expr_stmt></then></if></else></if></else></if></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>path_kind</name> == <name>svn_node_dir</name> &amp;&amp; <name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_locked</name><argument_list>(<argument><expr>&amp;<name>locked_p</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
<if>if <condition>(<expr>! <name>get_all</name></expr>)</condition><then>
<if>if <condition>(<expr>((<name>final_text_status</name> == <name>svn_wc_status_none</name>)
|| (<name>final_text_status</name> == <name>svn_wc_status_normal</name>))
&amp;&amp; ((<name>final_prop_status</name> == <name>svn_wc_status_none</name>)
|| (<name>final_prop_status</name> == <name>svn_wc_status_normal</name>))
&amp;&amp; (! <name>locked_p</name>) &amp;&amp; (! <name>switched_p</name>) &amp;&amp; (! <name><name>entry</name>-&gt;<name>lock_token</name></name>)
&amp;&amp; (! <name>repos_lock</name>) &amp;&amp; (! <name><name>entry</name>-&gt;<name>changelist</name></name>)</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>status</name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if></then></if>
<expr_stmt><expr><name>stat</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>**<name>status</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stat</name>-&gt;<name>entry</name></name> = <call><name>svn_wc_entry_dup</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stat</name>-&gt;<name>text_status</name></name> = <name>final_text_status</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stat</name>-&gt;<name>prop_status</name></name> = <name>final_prop_status</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stat</name>-&gt;<name>repos_text_status</name></name> = <name>svn_wc_status_none</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stat</name>-&gt;<name>repos_prop_status</name></name> = <name>svn_wc_status_none</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stat</name>-&gt;<name>locked</name></name> = <name>locked_p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stat</name>-&gt;<name>switched</name></name> = <name>switched_p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stat</name>-&gt;<name>copied</name></name> = <name><name>entry</name>-&gt;<name>copied</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stat</name>-&gt;<name>repos_lock</name></name> = <name>repos_lock</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stat</name>-&gt;<name>url</name></name> = (<name><name>entry</name>-&gt;<name>url</name></name> ? <name><name>entry</name>-&gt;<name>url</name></name> : <name>NULL</name>)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>stat</name>-&gt;<name>ood_last_cmt_rev</name></name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stat</name>-&gt;<name>ood_last_cmt_date</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>stat</name>-&gt;<name>ood_kind</name></name> = <name>svn_node_none</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stat</name>-&gt;<name>ood_last_cmt_author</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>status</name> = <name>stat</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>send_status_structure</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>parent_entry</name></decl></param>,
<param><decl><type><name>svn_node_kind_t</name></type> <name>path_kind</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>path_special</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>get_all</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>is_ignored</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>repos_locks</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_root</name></decl></param>,
<param><decl><type><name>svn_wc_status_func2_t</name></type> <name>status_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>status_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_wc_status2_t</name> *</type><name>statstruct</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>assemble_status</name><argument_list>(<argument><expr>&amp;<name>statstruct</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>parent_entry</name></expr></argument>,
<argument><expr><name>path_kind</name></expr></argument>, <argument><expr><name>path_special</name></expr></argument>, <argument><expr><name>get_all</name></expr></argument>, <argument><expr><name>is_ignored</name></expr></argument>,
<argument><expr><name>repos_locks</name></expr></argument>, <argument><expr><name>repos_root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>statstruct</name> &amp;&amp; (<name>status_func</name>)</expr>)</condition><then>
<expr_stmt><expr><call>(*<name>status_func</name>)<argument_list>(<argument><expr><name>status_baton</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>statstruct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>collect_ignore_patterns</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>patterns</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>ignores</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>patterns</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>ignores</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ignore</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>ignores</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr>*<name>patterns</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>ignore</name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_prop_get</name><argument_list>(<argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>SVN_PROP_IGNORE</name></expr></argument>,
<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>value</name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_cstring_split_append</name><argument_list>(<argument><expr>*<name>patterns</name></expr></argument>, <argument><expr><name><name>value</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr>"\n\r"</expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_boolean_t</name></type>
<name>is_external_path</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>externals</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>externals</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>TRUE</name></expr>;</return></then></if>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>externals</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>svn_path_is_child</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>TRUE</name></expr>;</return></then></if>
}</block></for>
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>send_unversioned_item</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><name>svn_node_kind_t</name></type> <name>path_kind</name></decl></param>, <param><decl><type><name>svn_boolean_t</name></type> <name>path_special</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>patterns</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>externals</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>no_ignore</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>repos_locks</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_root</name></decl></param>,
<param><decl><type><name>svn_wc_status_func2_t</name></type> <name>status_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>status_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>ignore_me</name> <init>= <expr><call><name>svn_wc_match_ignore_list</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>patterns</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name> <init>= <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_external</name> <init>= <expr><call><name>is_external_path</name><argument_list>(<argument><expr><name>externals</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_status2_t</name> *</type><name>status</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>assemble_status</name><argument_list>(<argument><expr>&amp;<name>status</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>path_kind</name></expr></argument>, <argument><expr><name>path_special</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>ignore_me</name></expr></argument>,
<argument><expr><name>repos_locks</name></expr></argument>, <argument><expr><name>repos_root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>is_external</name></expr>)</condition><then>
<expr_stmt><expr><name><name>status</name>-&gt;<name>text_status</name></name> = <name>svn_wc_status_external</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>no_ignore</name> || (! <name>ignore_me</name>) || <name>is_external</name> || <name><name>status</name>-&gt;<name>repos_lock</name></name></expr>)</condition><then>
<expr_stmt><expr><call>(<name>status_func</name>)<argument_list>(<argument><expr><name>status_baton</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function_decl><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>get_dir_status</name><parameter_list>(<param><decl><type>struct <name>edit_baton</name> *</type><name>eb</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>parent_entry</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>entry</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>ignores</name></decl></param>,
<param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>get_all</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>no_ignore</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>skip_this_dir</name></decl></param>,
<param><decl><type><name>svn_wc_status_func2_t</name></type> <name>status_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>status_baton</name></decl></param>,
<param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>handle_dir_entry</name><parameter_list>(<param><decl><type>struct <name>edit_baton</name> *</type><name>eb</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>dir_entry</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl></param>,
<param><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>special</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>ignores</name></decl></param>,
<param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>get_all</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>no_ignore</name></decl></param>,
<param><decl><type><name>svn_wc_status_func2_t</name></type> <name>status_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>status_baton</name></decl></param>,
<param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dirname</name> <init>= <expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name> <init>= <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name>dirname</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>kind</name> == <name>svn_node_dir</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>full_entry</name> <init>= <expr><name>entry</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>kind</name></name> == <name>kind</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_versioned</name><argument_list>(<argument><expr>&amp;<name>full_entry</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>full_entry</name> != <name>entry</name>
&amp;&amp; (<name>depth</name> == <name>svn_depth_unknown</name>
|| <name>depth</name> == <name>svn_depth_immediates</name>
|| <name>depth</name> == <name>svn_depth_infinity</name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>dir_access</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr>&amp;<name>dir_access</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_dir_status</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name>dir_entry</name></expr></argument>, <argument><expr><name>dir_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ignores</name></expr></argument>,
<argument><expr><name>depth</name></expr></argument>, <argument><expr><name>get_all</name></expr></argument>, <argument><expr><name>no_ignore</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>status_func</name></expr></argument>, <argument><expr><name>status_baton</name></expr></argument>, <argument><expr><name>cancel_func</name></expr></argument>,
<argument><expr><name>cancel_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>send_status_structure</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>full_entry</name></expr></argument>,
<argument><expr><name>dir_entry</name></expr></argument>, <argument><expr><name>kind</name></expr></argument>, <argument><expr><name>special</name></expr></argument>, <argument><expr><name>get_all</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>repos_locks</name></name></expr></argument>,
<argument><expr><name><name>eb</name>-&gt;<name>repos_root</name></name></expr></argument>,
<argument><expr><name>status_func</name></expr></argument>, <argument><expr><name>status_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>send_status_structure</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>dir_entry</name></expr></argument>,
<argument><expr><name>kind</name></expr></argument>, <argument><expr><name>special</name></expr></argument>, <argument><expr><name>get_all</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name><name>eb</name>-&gt;<name>repos_locks</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>repos_root</name></name></expr></argument>,
<argument><expr><name>status_func</name></expr></argument>, <argument><expr><name>status_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>get_dir_status</name><parameter_list>(<param><decl><type>struct <name>edit_baton</name> *</type><name>eb</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>parent_entry</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>entry</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>ignore_patterns</name></decl></param>,
<param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>get_all</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>no_ignore</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>skip_this_dir</name></decl></param>,
<param><decl><type><name>svn_wc_status_func2_t</name></type> <name>status_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>status_baton</name></decl></param>,
<param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>entries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>dir_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name> <init>= <expr><call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>dirents</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>patterns</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iterpool</name></decl>, *<decl><type ref="prev"/><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>cancel_func</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>cancel_func</name><argument_list>(<argument><expr><name>cancel_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>depth</name> == <name>svn_depth_unknown</name></expr>)</condition><then>
<expr_stmt><expr><name>depth</name> = <name>svn_depth_infinity</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entries_read</name><argument_list>(<argument><expr>&amp;<name>entries</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_get_dirents2</name><argument_list>(<argument><expr>&amp;<name>dirents</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>dir_entry</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>prop_val</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_prop_get</name><argument_list>(<argument><expr>&amp;<name>prop_val</name></expr></argument>, <argument><expr><name>SVN_PROP_EXTERNALS</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>prop_val</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>ext_items</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>eb</name>-&gt;<name>traversal_info</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>dup_pool</name> <init>= <expr><name><name>eb</name>-&gt;<name>traversal_info</name>-&gt;<name>pool</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dup_path</name> <init>= <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>dup_pool</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dup_val</name> <init>= <expr><call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name>dup_pool</name></expr></argument>, <argument><expr><name><name>prop_val</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr><name><name>prop_val</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>traversal_info</name>-&gt;<name>externals_old</name></name></expr></argument>,
<argument><expr><name>dup_path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>dup_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>traversal_info</name>-&gt;<name>externals_new</name></name></expr></argument>,
<argument><expr><name>dup_path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>dup_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>traversal_info</name>-&gt;<name>depths</name></name></expr></argument>,
<argument><expr><name>dup_path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><call><name>svn_depth_to_word</name><argument_list>(<argument><expr><name><name>dir_entry</name>-&gt;<name>depth</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_parse_externals_description3</name><argument_list>(<argument><expr>&amp;<name>ext_items</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
<argument><expr><name><name>prop_val</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>ext_items</name> &amp;&amp; <name>i</name> &lt; <name><name>ext_items</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_wc_external_item2_t</name> *</type><name>item</name></decl>;</decl_stmt>
<expr_stmt><expr><name>item</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>ext_items</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_wc_external_item2_t</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>externals</name></name></expr></argument>, <argument><expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name>path</name></expr></argument>,
<argument><expr><name><name>item</name>-&gt;<name>target_dir</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></then></if>
}</block>
<if>if <condition>(<expr><name>entry</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_io_dirent_t</name>*</type> <name>dirent_p</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>dirents</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>entry_entry</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>entry_entry</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>handle_dir_entry</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>dir_entry</name></expr></argument>,
<argument><expr><name>entry_entry</name></expr></argument>,
<argument><expr><name>dirent_p</name> ? <name><name>dirent_p</name>-&gt;<name>kind</name></name> : <name>svn_node_none</name></expr></argument>,
<argument><expr><name>dirent_p</name> ? <name><name>dirent_p</name>-&gt;<name>special</name></name> : <name>FALSE</name></expr></argument>,
<argument><expr><name>ignore_patterns</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>get_all</name></expr></argument>,
<argument><expr><name>no_ignore</name></expr></argument>, <argument><expr><name>status_func</name></expr></argument>, <argument><expr><name>status_baton</name></expr></argument>,
<argument><expr><name>cancel_func</name></expr></argument>, <argument><expr><name>cancel_baton</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then>
<else>else <if>if <condition>(<expr><name>dirent_p</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>ignore_patterns</name> &amp;&amp; ! <name>patterns</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>collect_ignore_patterns</name><argument_list>(<argument><expr>&amp;<name>patterns</name></expr></argument>, <argument><expr><name>ignore_patterns</name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>send_unversioned_item</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>dirent_p</name>-&gt;<name>kind</name></name></expr></argument>,
<argument><expr><name><name>dirent_p</name>-&gt;<name>special</name></name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>patterns</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>externals</name></name></expr></argument>, <argument><expr><name>no_ignore</name></expr></argument>,
<argument><expr><name><name>eb</name>-&gt;<name>repos_locks</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>repos_root</name></name></expr></argument>,
<argument><expr><name>status_func</name></expr></argument>, <argument><expr><name>status_baton</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>! <name>skip_this_dir</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>send_status_structure</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>dir_entry</name></expr></argument>,
<argument><expr><name>parent_entry</name></expr></argument>, <argument><expr><name>svn_node_dir</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>get_all</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>repos_locks</name></name></expr></argument>,
<argument><expr><name><name>eb</name>-&gt;<name>repos_root</name></name></expr></argument>, <argument><expr><name>status_func</name></expr></argument>, <argument><expr><name>status_baton</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>depth</name> == <name>svn_depth_empty</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>iterpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><name>dirents</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_ssize_t</name></type> <name>klen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_io_dirent_t</name> *</type><name>dirent_p</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>klen</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>)</argument_list></call>
|| <call><name>svn_wc_is_adm_dir</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><name>dirent_p</name> = <name>val</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>depth</name> == <name>svn_depth_files</name> &amp;&amp; <name><name>dirent_p</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<if>if <condition>(<expr><name>ignore_patterns</name> &amp;&amp; ! <name>patterns</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>collect_ignore_patterns</name><argument_list>(<argument><expr>&amp;<name>patterns</name></expr></argument>, <argument><expr><name>ignore_patterns</name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>send_unversioned_item</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>dirent_p</name>-&gt;<name>kind</name></name></expr></argument>, <argument><expr><name><name>dirent_p</name>-&gt;<name>special</name></name></expr></argument>,
<argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>patterns</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>externals</name></name></expr></argument>, <argument><expr><name>no_ignore</name></expr></argument>,
<argument><expr><name><name>eb</name>-&gt;<name>repos_locks</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>repos_root</name></name></expr></argument>,
<argument><expr><name>status_func</name></expr></argument>, <argument><expr><name>status_baton</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_io_dirent_t</name> *</type><name>dirent_p</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dirent_p</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>dirents</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>SVN_WC_ENTRY_THIS_DIR</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<continue>continue;</continue></then></if>
<if>if <condition>(<expr><name>depth</name> == <name>svn_depth_files</name>
&amp;&amp; <name>dirent_p</name> &amp;&amp; <name><name>dirent_p</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>handle_dir_entry</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>dir_entry</name></expr></argument>, <argument><expr><name>val</name></expr></argument>,
<argument><expr><name>dirent_p</name> ? <name><name>dirent_p</name>-&gt;<name>kind</name></name> : <name>svn_node_none</name></expr></argument>,
<argument><expr><name>dirent_p</name> ? <name><name>dirent_p</name>-&gt;<name>special</name></name> : <name>FALSE</name></expr></argument>,
<argument><expr><name>ignore_patterns</name></expr></argument>,
<argument><expr><name>depth</name> == <name>svn_depth_infinity</name> ? <name>depth</name>
: <name>svn_depth_empty</name></expr></argument>,
<argument><expr><name>get_all</name></expr></argument>, <argument><expr><name>no_ignore</name></expr></argument>,
<argument><expr><name>status_func</name></expr></argument>, <argument><expr><name>status_baton</name></expr></argument>, <argument><expr><name>cancel_func</name></expr></argument>,
<argument><expr><name>cancel_baton</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>hash_stash</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_wc_status2_t</name> *</type><name>status</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>stat_hash</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>hash_pool</name> <init>= <expr><call><name>apr_hash_pool_get</name><argument_list>(<argument><expr><name>stat_hash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>! <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>stat_hash</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>stat_hash</name></expr></argument>, <argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>hash_pool</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><call><name>svn_wc_dup_status2</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>hash_pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>tweak_statushash</name><argument_list>(<argument><expr><name>void</name> *<name>baton</name></expr></argument>,
<argument><expr><name>void</name> *<name>this_dir_baton</name></expr></argument>,
<argument><expr><name>svn_boolean_t</name> <name>is_dir_baton</name></expr></argument>,
<argument><expr><name>svn_wc_adm_access_t</name> *<name>adm_access</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>path</name></expr></argument>,
<argument><expr><name>svn_boolean_t</name> <name>is_dir</name></expr></argument>,
<argument>enum <expr><name>svn_wc_status_kind</name> <name>repos_text_status</name></expr></argument>,
<argument>enum <expr><name>svn_wc_status_kind</name> <name>repos_prop_status</name></expr></argument>,
<argument><expr><name>svn_revnum_t</name> <name>deleted_rev</name></expr></argument>,
<argument><expr><name>svn_lock_t</name> *<name>repos_lock</name></expr></argument>)</argument_list> <block>{
<decl_stmt><decl><type><name>svn_wc_status2_t</name> *</type><name>statstruct</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>statushash</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>is_dir_baton</name></expr>)</condition><then>
<expr_stmt><expr><name>statushash</name> = ((struct <name>dir_baton</name> *) <name>baton</name>)-&gt;<name>statii</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>statushash</name> = ((struct <name>file_baton</name> *) <name>baton</name>)-&gt;<name><name>dir_baton</name>-&gt;<name>statii</name></name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>pool</name> = <call><name>apr_hash_pool_get</name><argument_list>(<argument><expr><name>statushash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>statstruct</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>statushash</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>statstruct</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>repos_text_status</name> != <name>svn_wc_status_added</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_status2</name><argument_list>(<argument><expr>&amp;<name>statstruct</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>statstruct</name>-&gt;<name>repos_lock</name></name> = <name>repos_lock</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>statushash</name></expr></argument>, <argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>statstruct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name>repos_text_status</name> == <name>svn_wc_status_added</name>)
&amp;&amp; (<name><name>statstruct</name>-&gt;<name>repos_text_status</name></name> == <name>svn_wc_status_deleted</name>)</expr>)</condition><then>
<expr_stmt><expr><name>repos_text_status</name> = <name>svn_wc_status_replaced</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>repos_text_status</name></expr>)</condition><then>
<expr_stmt><expr><name><name>statstruct</name>-&gt;<name>repos_text_status</name></name> = <name>repos_text_status</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>repos_prop_status</name></expr>)</condition><then>
<expr_stmt><expr><name><name>statstruct</name>-&gt;<name>repos_prop_status</name></name> = <name>repos_prop_status</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>is_dir_baton</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>b</name> <init>= <expr><name>this_dir_baton</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>b</name>-&gt;<name>url</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>statstruct</name>-&gt;<name>repos_text_status</name></name> == <name>svn_wc_status_deleted</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>statstruct</name>-&gt;<name>url</name></name> =
<call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>url</name></name></expr></argument>,
<argument><expr><call><name>svn_path_basename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name><name>statstruct</name>-&gt;<name>url</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>statstruct</name>-&gt;<name>repos_text_status</name></name> == <name>svn_wc_status_deleted</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>statstruct</name>-&gt;<name>ood_kind</name></name> = <name>is_dir</name> ? <name>svn_node_dir</name> : <name>svn_node_file</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>deleted_rev</name> == <name>SVN_INVALID_REVNUM</name></expr>)</condition><then>
<expr_stmt><expr><name><name>statstruct</name>-&gt;<name>ood_last_cmt_rev</name></name> =
((struct <name>dir_baton</name> *) <name>baton</name>)-&gt;<name>ood_last_cmt_rev</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>statstruct</name>-&gt;<name>ood_last_cmt_rev</name></name> = <name>deleted_rev</name></expr>;</expr_stmt></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>statstruct</name>-&gt;<name>ood_kind</name></name> = <name><name>b</name>-&gt;<name>ood_kind</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>statstruct</name>-&gt;<name>ood_last_cmt_rev</name></name> = <name><name>b</name>-&gt;<name>ood_last_cmt_rev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>statstruct</name>-&gt;<name>ood_last_cmt_date</name></name> = <name><name>b</name>-&gt;<name>ood_last_cmt_date</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>b</name>-&gt;<name>ood_last_cmt_author</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>statstruct</name>-&gt;<name>ood_last_cmt_author</name></name> =
<call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>ood_last_cmt_author</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></else></if>
}</block></then> <else>else <block>{
<decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>b</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>b</name>-&gt;<name>url</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>statstruct</name>-&gt;<name>url</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>statstruct</name>-&gt;<name>ood_last_cmt_rev</name></name> = <name><name>b</name>-&gt;<name>ood_last_cmt_rev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>statstruct</name>-&gt;<name>ood_last_cmt_date</name></name> = <name><name>b</name>-&gt;<name>ood_last_cmt_date</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>statstruct</name>-&gt;<name>ood_kind</name></name> = <name><name>b</name>-&gt;<name>ood_kind</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>b</name>-&gt;<name>ood_last_cmt_author</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>statstruct</name>-&gt;<name>ood_last_cmt_author</name></name> =
<call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>ood_last_cmt_author</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></decl></decl_stmt>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>find_dir_url</name><parameter_list>(<param><decl><type><specifier>const</specifier> struct <name>dir_baton</name> *</type><name>db</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>! <name><name>db</name>-&gt;<name>name</name></name></expr>)</condition><then>
<return>return <expr><name><name>db</name>-&gt;<name>edit_baton</name>-&gt;<name>anchor_status</name>-&gt;<name>entry</name>-&gt;<name>url</name></name></expr>;</return></then>
<else>else <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>pb</name> <init>= <expr><name><name>db</name>-&gt;<name>parent_baton</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_status2_t</name> *</type><name>status</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>pb</name>-&gt;<name>statii</name></name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>status</name> &amp;&amp; <name><name>status</name>-&gt;<name>entry</name></name> &amp;&amp; <name><name>status</name>-&gt;<name>entry</name>-&gt;<name>url</name></name></expr>)</condition><then>
<return>return <expr><name><name>status</name>-&gt;<name>entry</name>-&gt;<name>url</name></name></expr>;</return></then></if>
<expr_stmt><expr><name>url</name> = <call><name>find_dir_url</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>url</name></expr>)</condition><then>
<return>return <expr><call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else
<return>return <expr><name>NULL</name></expr>;</return></else></if>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>make_dir_baton</name><parameter_list>(<param><decl><type><name>void</name> **</type><name>dir_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type>struct <name>edit_baton</name> *</type><name>edit_baton</name></decl></param>,
<param><decl><type>struct <name>dir_baton</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>d</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>d</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>full_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_status2_t</name> *</type><name>status_in_parent</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>pb</name> &amp;&amp; (! <name>path</name>)</expr>)</condition><then>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>pb</name></expr>)</condition><then>
<expr_stmt><expr><name>full_path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>anchor</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>full_path</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>anchor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name><name>d</name>-&gt;<name>path</name></name> = <name>full_path</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name>-&gt;<name>name</name></name> = <name>path</name> ? (<call><name>svn_path_basename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>) : <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name>-&gt;<name>edit_baton</name></name> = <name>edit_baton</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name>-&gt;<name>parent_baton</name></name> = <name>parent_baton</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name>-&gt;<name>statii</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name>-&gt;<name>url</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>find_dir_url</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name>-&gt;<name>ood_last_cmt_rev</name></name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name>-&gt;<name>ood_last_cmt_date</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name>-&gt;<name>ood_kind</name></name> = <name>svn_node_dir</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name>-&gt;<name>ood_last_cmt_author</name></name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>pb</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>pb</name>-&gt;<name>excluded</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>d</name>-&gt;<name>excluded</name></name> = <name>TRUE</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>pb</name>-&gt;<name>depth</name></name> == <name>svn_depth_immediates</name></expr>)</condition><then>
<expr_stmt><expr><name><name>d</name>-&gt;<name>depth</name></name> = <name>svn_depth_empty</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>pb</name>-&gt;<name>depth</name></name> == <name>svn_depth_files</name> || <name><name>pb</name>-&gt;<name>depth</name></name> == <name>svn_depth_empty</name></expr>)</condition><then>
<expr_stmt><expr><name><name>d</name>-&gt;<name>excluded</name></name> = <name>TRUE</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>pb</name>-&gt;<name>depth</name></name> == <name>svn_depth_unknown</name></expr>)</condition><then>
<expr_stmt><expr><name><name>d</name>-&gt;<name>depth</name></name> = <name>svn_depth_unknown</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>d</name>-&gt;<name>depth</name></name> = <name>svn_depth_infinity</name></expr>;</expr_stmt></else></if></else></if></else></if></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>d</name>-&gt;<name>depth</name></name> = <name><name>eb</name>-&gt;<name>default_depth</name></name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>pb</name></expr>)</condition><then>
<expr_stmt><expr><name>status_in_parent</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>pb</name>-&gt;<name>statii</name></name></expr></argument>, <argument><expr><name><name>d</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>status_in_parent</name> = <name><name>eb</name>-&gt;<name>anchor_status</name></name></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>status_in_parent</name>
&amp;&amp; (<name><name>status_in_parent</name>-&gt;<name>text_status</name></name> != <name>svn_wc_status_unversioned</name>)
&amp;&amp; (<name><name>status_in_parent</name>-&gt;<name>text_status</name></name> != <name>svn_wc_status_missing</name>)
&amp;&amp; (<name><name>status_in_parent</name>-&gt;<name>text_status</name></name> != <name>svn_wc_status_obstructed</name>)
&amp;&amp; (<name><name>status_in_parent</name>-&gt;<name>text_status</name></name> != <name>svn_wc_status_external</name>)
&amp;&amp; (<name><name>status_in_parent</name>-&gt;<name>text_status</name></name> != <name>svn_wc_status_ignored</name>)
&amp;&amp; (<name><name>status_in_parent</name>-&gt;<name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name>)
&amp;&amp; (! <name><name>d</name>-&gt;<name>excluded</name></name>)
&amp;&amp; (<name><name>d</name>-&gt;<name>depth</name></name> == <name>svn_depth_unknown</name>
|| <name><name>d</name>-&gt;<name>depth</name></name> == <name>svn_depth_infinity</name>
|| <name><name>d</name>-&gt;<name>depth</name></name> == <name>svn_depth_files</name>
|| <name><name>d</name>-&gt;<name>depth</name></name> == <name>svn_depth_immediates</name>)</expr>
)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>dir_access</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_status2_t</name> *</type><name>this_dir_status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>ignores</name> <init>= <expr><name><name>eb</name>-&gt;<name>ignores</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr>&amp;<name>dir_access</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>adm_access</name></name></expr></argument>,
<argument><expr><name><name>d</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_dir_status</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name><name>status_in_parent</name>-&gt;<name>entry</name></name></expr></argument>, <argument><expr><name>dir_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>ignores</name></expr></argument>, <argument><expr><name><name>d</name>-&gt;<name>depth</name></name> == <name>svn_depth_files</name> ?
<name>svn_depth_files</name> : <name>svn_depth_immediates</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>hash_stash</name></expr></argument>, <argument><expr><name><name>d</name>-&gt;<name>statii</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>this_dir_status</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>d</name>-&gt;<name>statii</name></name></expr></argument>, <argument><expr><name><name>d</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>this_dir_status</name> &amp;&amp; <name><name>this_dir_status</name>-&gt;<name>entry</name></name>
&amp;&amp; (<name><name>d</name>-&gt;<name>depth</name></name> == <name>svn_depth_unknown</name>
|| <name><name>d</name>-&gt;<name>depth</name></name> &gt; <name><name>status_in_parent</name>-&gt;<name>entry</name>-&gt;<name>depth</name></name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d</name>-&gt;<name>depth</name></name> = <name><name>this_dir_status</name>-&gt;<name>entry</name>-&gt;<name>depth</name></name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr>*<name>dir_baton</name> = <name>d</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> struct <name>file_baton</name> *</type>
<name>make_file_baton</name><parameter_list>(<param><decl><type>struct <name>dir_baton</name> *</type><name>parent_dir_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>pb</name> <init>= <expr><name>parent_dir_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>pb</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>f</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>f</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>full_path</name></decl>;</decl_stmt>
<expr_stmt><expr><name>full_path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>anchor</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name>-&gt;<name>path</name></name> = <name>full_path</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name>-&gt;<name>name</name></name> = <call><name>svn_path_basename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name>-&gt;<name>dir_baton</name></name> = <name>pb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name>-&gt;<name>edit_baton</name></name> = <name>eb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name>-&gt;<name>url</name></name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><call><name>find_dir_url</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_path_basename</name><argument_list>(<argument><expr><name>full_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name>-&gt;<name>ood_last_cmt_rev</name></name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name>-&gt;<name>ood_last_cmt_date</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name>-&gt;<name>ood_kind</name></name> = <name>svn_node_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name>-&gt;<name>ood_last_cmt_author</name></name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>f</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_boolean_t</name></type>
<name>is_sendable_status</name><parameter_list>(<param><decl><type><name>svn_wc_status2_t</name> *</type><name>status</name></decl></param>,
<param><decl><type>struct <name>edit_baton</name> *</type><name>eb</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>status</name>-&gt;<name>repos_text_status</name></name> != <name>svn_wc_status_none</name></expr>)</condition><then>
<return>return <expr><name>TRUE</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>status</name>-&gt;<name>repos_prop_status</name></name> != <name>svn_wc_status_none</name></expr>)</condition><then>
<return>return <expr><name>TRUE</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>status</name>-&gt;<name>repos_lock</name></name></expr>)</condition><then>
<return>return <expr><name>TRUE</name></expr>;</return></then></if>
<if>if <condition>(<expr>(<name><name>status</name>-&gt;<name>text_status</name></name> == <name>svn_wc_status_ignored</name>) &amp;&amp; (! <name><name>eb</name>-&gt;<name>no_ignore</name></name>)</expr>)</condition><then>
<return>return <expr><name>FALSE</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>eb</name>-&gt;<name>get_all</name></name></expr>)</condition><then>
<return>return <expr><name>TRUE</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>status</name>-&gt;<name>text_status</name></name> == <name>svn_wc_status_unversioned</name></expr>)</condition><then>
<return>return <expr><name>TRUE</name></expr>;</return></then></if>
<if>if <condition>(<expr>(<name><name>status</name>-&gt;<name>text_status</name></name> != <name>svn_wc_status_none</name>)
&amp;&amp; (<name><name>status</name>-&gt;<name>text_status</name></name> != <name>svn_wc_status_normal</name>)</expr>)</condition><then>
<return>return <expr><name>TRUE</name></expr>;</return></then></if>
<if>if <condition>(<expr>(<name><name>status</name>-&gt;<name>prop_status</name></name> != <name>svn_wc_status_none</name>)
&amp;&amp; (<name><name>status</name>-&gt;<name>prop_status</name></name> != <name>svn_wc_status_normal</name>)</expr>)</condition><then>
<return>return <expr><name>TRUE</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>status</name>-&gt;<name>locked</name></name></expr>)</condition><then>
<return>return <expr><name>TRUE</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>status</name>-&gt;<name>switched</name></name></expr>)</condition><then>
<return>return <expr><name>TRUE</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>status</name>-&gt;<name>entry</name></name> &amp;&amp; <name><name>status</name>-&gt;<name>entry</name>-&gt;<name>lock_token</name></name></expr>)</condition><then>
<return>return <expr><name>TRUE</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>status</name>-&gt;<name>entry</name></name> &amp;&amp; <name><name>status</name>-&gt;<name>entry</name>-&gt;<name>changelist</name></name></expr>)</condition><then>
<return>return <expr><name>TRUE</name></expr>;</return></then></if>
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></function>
<struct>struct <name>status_baton</name> <block>{
<decl_stmt><decl><type><name>svn_wc_status_func2_t</name></type> <name>real_status_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>real_status_baton</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>mark_deleted</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_wc_status2_t</name> *</type><name>status</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>status_baton</name> *</type><name>sb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>status</name>-&gt;<name>repos_text_status</name></name> = <name>svn_wc_status_deleted</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>sb</name>-&gt;<name>real_status_func</name></name><argument_list>(<argument><expr><name><name>sb</name>-&gt;<name>real_status_baton</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>handle_statii</name><parameter_list>(<param><decl><type>struct <name>edit_baton</name> *</type><name>eb</name></decl></param>,
<param><decl><type><name>svn_wc_entry_t</name> *</type><name>dir_entry</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dir_path</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>statii</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>dir_was_deleted</name></decl></param>,
<param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>ignores</name> <init>= <expr><name><name>eb</name>-&gt;<name>ignores</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_status_func2_t</name></type> <name>status_func</name> <init>= <expr><name><name>eb</name>-&gt;<name>status_func</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>status_baton</name> <init>= <expr><name><name>eb</name>-&gt;<name>status_baton</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>status_baton</name></type> <name>sb</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>dir_was_deleted</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>sb</name>.<name>real_status_func</name></name> = <name><name>eb</name>-&gt;<name>status_func</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sb</name>.<name>real_status_baton</name></name> = <name><name>eb</name>-&gt;<name>status_baton</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>status_func</name> = <name>mark_deleted</name></expr>;</expr_stmt>
<expr_stmt><expr><name>status_baton</name> = &amp;<name>sb</name></expr>;</expr_stmt>
}</block></then></if>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>statii</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_status2_t</name> *</type><name>status</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>status</name>-&gt;<name>text_status</name></name> != <name>svn_wc_status_obstructed</name>
&amp;&amp; <name><name>status</name>-&gt;<name>text_status</name></name> != <name>svn_wc_status_missing</name>
&amp;&amp; <name><name>status</name>-&gt;<name>entry</name></name> &amp;&amp; <name><name>status</name>-&gt;<name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name>
&amp;&amp; (<name>depth</name> == <name>svn_depth_unknown</name>
|| <name>depth</name> == <name>svn_depth_infinity</name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>dir_access</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr>&amp;<name>dir_access</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>adm_access</name></name></expr></argument>,
<argument><expr><name>key</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_dir_status</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name>dir_entry</name></expr></argument>, <argument><expr><name>dir_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>ignores</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>get_all</name></name></expr></argument>,
<argument><expr><name><name>eb</name>-&gt;<name>no_ignore</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>status_func</name></expr></argument>,
<argument><expr><name>status_baton</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>cancel_func</name></name></expr></argument>,
<argument><expr><name><name>eb</name>-&gt;<name>cancel_baton</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>dir_was_deleted</name></expr>)</condition><then>
<expr_stmt><expr><name><name>status</name>-&gt;<name>repos_text_status</name></name> = <name>svn_wc_status_deleted</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><call><name>is_sendable_status</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call>(<name><name>eb</name>-&gt;<name>status_func</name></name>)<argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>status_baton</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>set_target_revision</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>target_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*(<name><name>eb</name>-&gt;<name>target_revision</name></name>) = <name>target_revision</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>open_root</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>dir_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>root_opened</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<return>return <expr><call><name>make_dir_baton</name><argument_list>(<argument><expr><name>dir_baton</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>eb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>delete_entry</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>db</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>db</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>entries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name> <init>= <expr><call><name>svn_path_basename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>full_path</name> <init>= <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>anchor</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dir_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>hash_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_versioned</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name>full_path</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>adm_access</name></name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>dir_path</name> = <name>full_path</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hash_key</name> = <name>SVN_WC_ENTRY_THIS_DIR</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>dir_path</name> = <call><name>svn_path_dirname</name><argument_list>(<argument><expr><name>full_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hash_key</name> = <name>name</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>err</name> = <call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr>&amp;<name>adm_access</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>adm_access</name></name></expr></argument>, <argument><expr><name>dir_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_check_path</name><argument_list>(<argument><expr><name>full_path</name></expr></argument>, <argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>kind</name> == <name>svn_node_none</name>) &amp;&amp; (<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_WC_NOT_LOCKED</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then> <else>else
<return>return <expr><name>err</name></expr>;</return></else></if>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entries_read</name><argument_list>(<argument><expr>&amp;<name>entries</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>hash_key</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>tweak_statushash</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>adm_access</name></name></expr></argument>,
<argument><expr><name>full_path</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name></expr></argument>,
<argument><expr><name>svn_wc_status_deleted</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>db</name>-&gt;<name>parent_baton</name></name> &amp;&amp; (! *<name><name>eb</name>-&gt;<name>target</name></name>)</expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>tweak_statushash</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>parent_baton</name></name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>adm_access</name></name></expr></argument>,
<argument><expr><name><name>db</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name></expr></argument>,
<argument><expr><name>svn_wc_status_modified</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>add_directory</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>child_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>pb</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>new_db</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>make_dir_baton</name><argument_list>(<argument><expr><name>child_baton</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>eb</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new_db</name> = *<name>child_baton</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_db</name>-&gt;<name>added</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pb</name>-&gt;<name>text_changed</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>open_directory</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>child_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>make_dir_baton</name><argument_list>(<argument><expr><name>child_baton</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>pb</name>-&gt;<name>edit_baton</name></name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>change_dir_prop</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>dir_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>db</name> <init>= <expr><name>dir_baton</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>svn_wc_is_normal_prop</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>db</name>-&gt;<name>prop_changed</name></name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>value</name> != <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_PROP_ENTRY_COMMITTED_REV</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name><name>db</name>-&gt;<name>ood_last_cmt_rev</name></name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name><name>value</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_PROP_ENTRY_LAST_AUTHOR</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name><name>db</name>-&gt;<name>ood_last_cmt_author</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>value</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_PROP_ENTRY_COMMITTED_DATE</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>tm</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_time_from_cstring</name><argument_list>(<argument><expr>&amp;<name>tm</name></expr></argument>, <argument><expr><name><name>value</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>db</name>-&gt;<name>ood_last_cmt_date</name></name> = <name>tm</name></expr>;</expr_stmt>
}</block></then></if></else></if></else></if>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>close_directory</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>dir_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>db</name> <init>= <expr><name>dir_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>pb</name> <init>= <expr><name><name>db</name>-&gt;<name>parent_baton</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name><name>db</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_status2_t</name> *</type><name>dir_status</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>db</name>-&gt;<name>added</name></name> || <name><name>db</name>-&gt;<name>prop_changed</name></name> || <name><name>db</name>-&gt;<name>text_changed</name></name>
|| <name><name>db</name>-&gt;<name>ood_last_cmt_rev</name></name> != <name>SVN_INVALID_REVNUM</name></expr>)</condition><then> <block>{
<enum>enum <name>svn_wc_status_kind</name> <name>repos_text_status</name>;</enum>
<enum>enum <name>svn_wc_status_kind</name> <name>repos_prop_status</name>;</enum>
<if>if <condition>(<expr><name><name>db</name>-&gt;<name>added</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>repos_text_status</name> = <name>svn_wc_status_added</name></expr>;</expr_stmt>
<expr_stmt><expr><name>repos_prop_status</name> = <name><name>db</name>-&gt;<name>prop_changed</name></name> ? <name>svn_wc_status_added</name>
: <name>svn_wc_status_none</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>repos_text_status</name> = <name><name>db</name>-&gt;<name>text_changed</name></name> ? <name>svn_wc_status_modified</name>
: <name>svn_wc_status_none</name></expr>;</expr_stmt>
<expr_stmt><expr><name>repos_prop_status</name> = <name><name>db</name>-&gt;<name>prop_changed</name></name> ? <name>svn_wc_status_modified</name>
: <name>svn_wc_status_none</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>pb</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>tweak_statushash</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
<argument><expr><name><name>eb</name>-&gt;<name>adm_access</name></name></expr></argument>,
<argument><expr><name><name>db</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
<argument><expr><name>repos_text_status</name></expr></argument>,
<argument><expr><name>repos_prop_status</name></expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>eb</name>-&gt;<name>anchor_status</name>-&gt;<name>repos_prop_status</name></name> = <name>repos_prop_status</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>anchor_status</name>-&gt;<name>repos_text_status</name></name> = <name>repos_text_status</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>db</name>-&gt;<name>ood_last_cmt_rev</name></name> != <name><name>eb</name>-&gt;<name>anchor_status</name>-&gt;<name>entry</name>-&gt;<name>revision</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>eb</name>-&gt;<name>anchor_status</name>-&gt;<name>ood_last_cmt_rev</name></name> = <name><name>db</name>-&gt;<name>ood_last_cmt_rev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>anchor_status</name>-&gt;<name>ood_last_cmt_date</name></name> = <name><name>db</name>-&gt;<name>ood_last_cmt_date</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>anchor_status</name>-&gt;<name>ood_kind</name></name> = <name><name>db</name>-&gt;<name>ood_kind</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>anchor_status</name>-&gt;<name>ood_last_cmt_author</name></name> =
<call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>ood_last_cmt_author</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
}</block></then></if>
<if>if <condition>(<expr><name>pb</name> &amp;&amp; ! <name><name>db</name>-&gt;<name>excluded</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>was_deleted</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>dir_status</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>pb</name>-&gt;<name>statii</name></name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>dir_status</name> &amp;&amp;
((<name><name>dir_status</name>-&gt;<name>repos_text_status</name></name> == <name>svn_wc_status_deleted</name>)
|| (<name><name>dir_status</name>-&gt;<name>repos_text_status</name></name> == <name>svn_wc_status_replaced</name>))</expr>)</condition><then>
<expr_stmt><expr><name>was_deleted</name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>handle_statii</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name>dir_status</name> ? <name><name>dir_status</name>-&gt;<name>entry</name></name> : <name>NULL</name></expr></argument>,
<argument><expr><name><name>db</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>statii</name></name></expr></argument>, <argument><expr><name>was_deleted</name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>depth</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>dir_status</name> &amp;&amp; <call><name>is_sendable_status</name><argument_list>(<argument><expr><name>dir_status</name></expr></argument>, <argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call>(<name><name>eb</name>-&gt;<name>status_func</name></name>)<argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>status_baton</name></name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>dir_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>pb</name>-&gt;<name>statii</name></name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>! <name>pb</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>*<name><name>eb</name>-&gt;<name>target</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_wc_status2_t</name> *</type><name>tgt_status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name> <init>= <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>anchor</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>target</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>dir_status</name> = <name><name>eb</name>-&gt;<name>anchor_status</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tgt_status</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>statii</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>tgt_status</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>tgt_status</name>-&gt;<name>entry</name></name>
&amp;&amp; <name><name>tgt_status</name>-&gt;<name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>dir_access</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr>&amp;<name>dir_access</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>adm_access</name></name></expr></argument>,
<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_dir_status</name>
<argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name><name>tgt_status</name>-&gt;<name>entry</name></name></expr></argument>, <argument><expr><name>dir_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name><name>eb</name>-&gt;<name>ignores</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>default_depth</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>get_all</name></name></expr></argument>,
<argument><expr><name><name>eb</name>-&gt;<name>no_ignore</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
<argument><expr><name><name>eb</name>-&gt;<name>status_func</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>status_baton</name></name></expr></argument>,
<argument><expr><name><name>eb</name>-&gt;<name>cancel_func</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>cancel_baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>is_sendable_status</name><argument_list>(<argument><expr><name>tgt_status</name></expr></argument>, <argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call>(<name><name>eb</name>-&gt;<name>status_func</name></name>)<argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>status_baton</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>tgt_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>handle_statii</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>anchor_status</name>-&gt;<name>entry</name></name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr><name><name>db</name>-&gt;<name>statii</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>default_depth</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>is_sendable_status</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>anchor_status</name></name></expr></argument>, <argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call>(<name><name>eb</name>-&gt;<name>status_func</name></name>)<argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>status_baton</name></name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>anchor_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>anchor_status</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>add_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>file_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>new_fb</name> <init>= <expr><call><name>make_file_baton</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pb</name>-&gt;<name>text_changed</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_fb</name>-&gt;<name>added</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>file_baton</name> = <name>new_fb</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>open_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>file_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>dir_baton</name> *</type><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>new_fb</name> <init>= <expr><call><name>make_file_baton</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>file_baton</name> = <name>new_fb</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>apply_textdelta</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_checksum</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><name>svn_txdelta_window_handler_t</name> *</type><name>handler</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>handler_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>fb</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>fb</name>-&gt;<name>text_changed</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>handler_baton</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>handler</name> = <name>svn_delta_noop_window_handler</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>change_file_prop</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>fb</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>svn_wc_is_normal_prop</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>fb</name>-&gt;<name>prop_changed</name></name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>value</name> != <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_PROP_ENTRY_COMMITTED_REV</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name><name>fb</name>-&gt;<name>ood_last_cmt_rev</name></name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name><name>value</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_PROP_ENTRY_LAST_AUTHOR</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name><name>fb</name>-&gt;<name>ood_last_cmt_author</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>dir_baton</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>value</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_PROP_ENTRY_COMMITTED_DATE</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>tm</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_time_from_cstring</name><argument_list>(<argument><expr>&amp;<name>tm</name></expr></argument>, <argument><expr><name><name>value</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr><name><name>fb</name>-&gt;<name>dir_baton</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fb</name>-&gt;<name>ood_last_cmt_date</name></name> = <name>tm</name></expr>;</expr_stmt>
}</block></then></if></else></if></else></if>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>close_file</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>text_checksum</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>file_baton</name> *</type><name>fb</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>
<enum>enum <name>svn_wc_status_kind</name> <name>repos_text_status</name>;</enum>
<enum>enum <name>svn_wc_status_kind</name> <name>repos_prop_status</name>;</enum>
<decl_stmt><decl><type><name>svn_lock_t</name> *</type><name>repos_lock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>! (<name><name>fb</name>-&gt;<name>added</name></name> || <name><name>fb</name>-&gt;<name>prop_changed</name></name> || <name><name>fb</name>-&gt;<name>text_changed</name></name>)</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>fb</name>-&gt;<name>added</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl>;</decl_stmt>
<expr_stmt><expr><name>repos_text_status</name> = <name>svn_wc_status_added</name></expr>;</expr_stmt>
<expr_stmt><expr><name>repos_prop_status</name> = <name><name>fb</name>-&gt;<name>prop_changed</name></name> ? <name>svn_wc_status_added</name> : 0</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>fb</name>-&gt;<name>edit_baton</name>-&gt;<name>repos_locks</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>url</name> = <call><name>find_dir_url</name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>dir_baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>url</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>url</name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>repos_lock</name> = <call><name>apr_hash_get</name>
<argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>edit_baton</name>-&gt;<name>repos_locks</name></name></expr></argument>,
<argument><expr><call><name>svn_path_uri_decode</name><argument_list>(<argument><expr><name>url</name> +
<call><name>strlen</name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>edit_baton</name>-&gt;<name>repos_root</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>repos_text_status</name> = <name><name>fb</name>-&gt;<name>text_changed</name></name> ? <name>svn_wc_status_modified</name> : 0</expr>;</expr_stmt>
<expr_stmt><expr><name>repos_prop_status</name> = <name><name>fb</name>-&gt;<name>prop_changed</name></name> ? <name>svn_wc_status_modified</name> : 0</expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>tweak_statushash</name><argument_list>(<argument><expr><name>fb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name><name>fb</name>-&gt;<name>edit_baton</name>-&gt;<name>adm_access</name></name></expr></argument>,
<argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>repos_text_status</name></expr></argument>,
<argument><expr><name>repos_prop_status</name></expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
<argument><expr><name>repos_lock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>close_edit</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>ignores</name> <init>= <expr><name><name>eb</name>-&gt;<name>ignores</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>eb</name>-&gt;<name>root_opened</name></name></expr>)</condition><then>
<goto>goto <name>cleanup</name>;</goto></then></if>
<if>if <condition>(<expr>*<name><name>eb</name>-&gt;<name>target</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>full_path</name> <init>= <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>anchor</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>target</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_io_check_path</name><argument_list>(<argument><expr><name>full_path</name></expr></argument>, <argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <goto>goto <name>cleanup</name>;</goto></then></if>
<if>if <condition>(<expr><name>kind</name> == <name>svn_node_dir</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>tgt_access</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>tgt_entry</name></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>tgt_entry</name></expr></argument>, <argument><expr><name>full_path</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>adm_access</name></name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <goto>goto <name>cleanup</name>;</goto></then></if>
<if>if <condition>(<expr>! <name>tgt_entry</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>get_dir_status</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>adm_access</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>target</name></name></expr></argument>,
<argument><expr><name>ignores</name></expr></argument>, <argument><expr><name>svn_depth_empty</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>get_all</name></name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
<argument><expr><name><name>eb</name>-&gt;<name>status_func</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>status_baton</name></name></expr></argument>,
<argument><expr><name><name>eb</name>-&gt;<name>cancel_func</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>cancel_baton</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <goto>goto <name>cleanup</name>;</goto></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>err</name> = <call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr>&amp;<name>tgt_access</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>adm_access</name></name></expr></argument>,
<argument><expr><name>full_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <goto>goto <name>cleanup</name>;</goto></then></if>
<expr_stmt><expr><name>err</name> = <call><name>get_dir_status</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tgt_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ignores</name></expr></argument>,
<argument><expr><name><name>eb</name>-&gt;<name>default_depth</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>get_all</name></name></expr></argument>,
<argument><expr><name><name>eb</name>-&gt;<name>no_ignore</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name><name>eb</name>-&gt;<name>status_func</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>status_baton</name></name></expr></argument>,
<argument><expr><name><name>eb</name>-&gt;<name>cancel_func</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>cancel_baton</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <goto>goto <name>cleanup</name>;</goto></then></if>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>err</name> = <call><name>get_dir_status</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>adm_access</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>target</name></name></expr></argument>,
<argument><expr><name>ignores</name></expr></argument>, <argument><expr><name>svn_depth_empty</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>get_all</name></name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>status_func</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>status_baton</name></name></expr></argument>,
<argument><expr><name><name>eb</name>-&gt;<name>cancel_func</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>cancel_baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <goto>goto <name>cleanup</name>;</goto></then></if>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>err</name> = <call><name>get_dir_status</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>adm_access</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ignores</name></expr></argument>,
<argument><expr><name><name>eb</name>-&gt;<name>default_depth</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>get_all</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>no_ignore</name></name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>status_func</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>status_baton</name></name></expr></argument>,
<argument><expr><name><name>eb</name>-&gt;<name>cancel_func</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>cancel_baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <goto>goto <name>cleanup</name>;</goto></then></if>
}</block></else></if>
<label><name>cleanup</name>:</label>
<if>if <condition>(<expr><name><name>eb</name>-&gt;<name>traversal_info</name></name> &amp;&amp; *<name><name>eb</name>-&gt;<name>target</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>traversal_info</name>-&gt;<name>externals_old</name></name></expr></argument>,
<argument><expr><name><name>eb</name>-&gt;<name>anchor</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>traversal_info</name>-&gt;<name>externals_new</name></name></expr></argument>,
<argument><expr><name><name>eb</name>-&gt;<name>anchor</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>traversal_info</name>-&gt;<name>depths</name></name></expr></argument>,
<argument><expr><name><name>eb</name>-&gt;<name>anchor</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_get_status_editor3</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>set_locks_baton</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name> *</type><name>edit_revision</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>anchor</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
<param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>get_all</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>no_ignore</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>ignore_patterns</name></decl></param>,
<param><decl><type><name>svn_wc_status_func2_t</name></type> <name>status_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>status_baton</name></decl></param>,
<param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
<param><decl><type><name>svn_wc_traversal_info_t</name> *</type><name>traversal_info</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_delta_editor_t</name> *</type><name>tree_editor</name> <init>= <expr><call><name>svn_delta_default_editor</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>eb</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>eb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>default_depth</name></name> = <name>depth</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>target_revision</name></name> = <name>edit_revision</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>adm_access</name></name> = <name>anchor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>get_all</name></name> = <name>get_all</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>no_ignore</name></name> = <name>no_ignore</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>status_func</name></name> = <name>status_func</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>status_baton</name></name> = <name>status_baton</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>cancel_func</name></name> = <name>cancel_func</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>cancel_baton</name></name> = <name>cancel_baton</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>traversal_info</name></name> = <name>traversal_info</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>externals</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>anchor</name></name> = <call><name>svn_wc_adm_access_path</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>target</name></name> = <name>target</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>root_opened</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>repos_locks</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>repos_root</name></name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ignore_patterns</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>eb</name>-&gt;<name>ignores</name></name> = <name>ignore_patterns</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>eb</name>-&gt;<name>ignores</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>16</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_cstring_split_append</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>ignores</name></name></expr></argument>, <argument><expr><name>SVN_CONFIG_DEFAULT_GLOBAL_IGNORES</name></expr></argument>,
<argument><expr>"\n\r\t\v "</expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_status2</name><argument_list>(<argument><expr>&amp;(<name><name>eb</name>-&gt;<name>anchor_status</name></name>)</expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>anchor</name></name></expr></argument>, <argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>set_target_revision</name></name> = <name>set_target_revision</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>open_root</name></name> = <name>open_root</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>delete_entry</name></name> = <name>delete_entry</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>add_directory</name></name> = <name>add_directory</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>open_directory</name></name> = <name>open_directory</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>change_dir_prop</name></name> = <name>change_dir_prop</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>close_directory</name></name> = <name>close_directory</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>add_file</name></name> = <name>add_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>open_file</name></name> = <name>open_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>apply_textdelta</name></name> = <name>apply_textdelta</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>change_file_prop</name></name> = <name>change_file_prop</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>close_file</name></name> = <name>close_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>close_edit</name></name> = <name>close_edit</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_delta_get_cancellation_editor</name><argument_list>(<argument><expr><name>cancel_func</name></expr></argument>, <argument><expr><name>cancel_baton</name></expr></argument>,
<argument><expr><name>tree_editor</name></expr></argument>, <argument><expr><name>eb</name></expr></argument>, <argument><expr><name>editor</name></expr></argument>,
<argument><expr><name>edit_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>set_locks_baton</name></expr>)</condition><then>
<expr_stmt><expr>*<name>set_locks_baton</name> = <name>eb</name></expr>;</expr_stmt></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_get_status_editor2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>set_locks_baton</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name> *</type><name>edit_revision</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>anchor</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>config</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>get_all</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>no_ignore</name></decl></param>,
<param><decl><type><name>svn_wc_status_func2_t</name></type> <name>status_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>status_baton</name></decl></param>,
<param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
<param><decl><type><name>svn_wc_traversal_info_t</name> *</type><name>traversal_info</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>ignores</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_get_default_ignores</name><argument_list>(<argument><expr>&amp;<name>ignores</name></expr></argument>, <argument><expr><name>config</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_wc_get_status_editor3</name><argument_list>(<argument><expr><name>editor</name></expr></argument>,
<argument><expr><name>edit_baton</name></expr></argument>,
<argument><expr><name>set_locks_baton</name></expr></argument>,
<argument><expr><name>edit_revision</name></expr></argument>,
<argument><expr><name>anchor</name></expr></argument>,
<argument><expr><name>target</name></expr></argument>,
<argument><expr><call><name>SVN_DEPTH_INFINITY_OR_IMMEDIATES</name><argument_list>(<argument><expr><name>recurse</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>get_all</name></expr></argument>,
<argument><expr><name>no_ignore</name></expr></argument>,
<argument><expr><name>ignores</name></expr></argument>,
<argument><expr><name>status_func</name></expr></argument>,
<argument><expr><name>status_baton</name></expr></argument>,
<argument><expr><name>cancel_func</name></expr></argument>,
<argument><expr><name>cancel_baton</name></expr></argument>,
<argument><expr><name>traversal_info</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<struct>struct <name>old_status_func_cb_baton</name> <block>{
<decl_stmt><decl><type><name>svn_wc_status_func_t</name></type> <name>original_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>original_baton</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>void</name></type> <name>old_status_func_cb</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_wc_status2_t</name> *</type><name>status</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>old_status_func_cb_baton</name> *</type><name>b</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_status_t</name> *</type><name>stat</name> <init>= <expr>(<name>svn_wc_status_t</name> *) <name>status</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>b</name>-&gt;<name>original_func</name></name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>original_baton</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_get_status_editor</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name> *</type><name>edit_revision</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>anchor</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>config</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>get_all</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>no_ignore</name></decl></param>,
<param><decl><type><name>svn_wc_status_func_t</name></type> <name>status_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>status_baton</name></decl></param>,
<param><decl><type><name>svn_cancel_func_t</name></type> <name>cancel_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>,
<param><decl><type><name>svn_wc_traversal_info_t</name> *</type><name>traversal_info</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>old_status_func_cb_baton</name> *</type><name>b</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>ignores</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>original_func</name></name> = <name>status_func</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>original_baton</name></name> = <name>status_baton</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_get_default_ignores</name><argument_list>(<argument><expr>&amp;<name>ignores</name></expr></argument>, <argument><expr><name>config</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_wc_get_status_editor3</name><argument_list>(<argument><expr><name>editor</name></expr></argument>, <argument><expr><name>edit_baton</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>edit_revision</name></expr></argument>,
<argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>target</name></expr></argument>,
<argument><expr><call><name>SVN_DEPTH_INFINITY_OR_IMMEDIATES</name><argument_list>(<argument><expr><name>recurse</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>get_all</name></expr></argument>, <argument><expr><name>no_ignore</name></expr></argument>, <argument><expr><name>ignores</name></expr></argument>,
<argument><expr><name>old_status_func_cb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>,
<argument><expr><name>cancel_func</name></expr></argument>, <argument><expr><name>cancel_baton</name></expr></argument>,
<argument><expr><name>traversal_info</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_status_set_repos_locks</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>locks</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_root</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>edit_baton</name> *</type><name>eb</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>repos_locks</name></name> = <name>locks</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>repos_root</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>repos_root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_get_default_ignores</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>patterns</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>config</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_config_t</name> *</type><name>cfg</name> <init>= <expr><name>config</name> ? <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>config</name></expr></argument>,
<argument><expr><name>SVN_CONFIG_CATEGORY_CONFIG</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call> : <name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_config_get</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>, <argument><expr><name>SVN_CONFIG_SECTION_MISCELLANY</name></expr></argument>,
<argument><expr><name>SVN_CONFIG_OPTION_GLOBAL_IGNORES</name></expr></argument>,
<argument><expr><name>SVN_CONFIG_DEFAULT_GLOBAL_IGNORES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>patterns</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>16</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_cstring_split_append</name><argument_list>(<argument><expr>*<name>patterns</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr>"\n\r\t\v "</expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_status2</name><parameter_list>(<param><decl><type><name>svn_wc_status2_t</name> **</type><name>status</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>parent_entry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>adm_access</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>entry</name> &amp;&amp; ! <call><name>svn_path_is_empty</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>parent_path</name> <init>= <expr><call><name>svn_path_dirname</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>parent_access</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__adm_retrieve_internal</name><argument_list>(<argument><expr>&amp;<name>parent_access</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>parent_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>parent_access</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>parent_entry</name></expr></argument>, <argument><expr><name>parent_path</name></expr></argument>, <argument><expr><name>parent_access</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>assemble_status</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>parent_entry</name></expr></argument>,
<argument><expr><name>svn_node_unknown</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_status</name><parameter_list>(<param><decl><type><name>svn_wc_status_t</name> **</type><name>status</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_wc_status2_t</name> *</type><name>stat2</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_status2</name><argument_list>(<argument><expr>&amp;<name>stat2</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>status</name> = (<name>svn_wc_status_t</name> *) <name>stat2</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_wc_status2_t</name> *</type>
<name>svn_wc_dup_status2</name><parameter_list>(<param><decl><type><name>svn_wc_status2_t</name> *</type><name>orig_stat</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_wc_status2_t</name> *</type><name>new_stat</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>new_stat</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>new_stat</name> = *<name>orig_stat</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>orig_stat</name>-&gt;<name>entry</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>new_stat</name>-&gt;<name>entry</name></name> = <call><name>svn_wc_entry_dup</name><argument_list>(<argument><expr><name><name>orig_stat</name>-&gt;<name>entry</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>orig_stat</name>-&gt;<name>repos_lock</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>new_stat</name>-&gt;<name>repos_lock</name></name> = <call><name>svn_lock_dup</name><argument_list>(<argument><expr><name><name>orig_stat</name>-&gt;<name>repos_lock</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>orig_stat</name>-&gt;<name>url</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>new_stat</name>-&gt;<name>url</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>orig_stat</name>-&gt;<name>url</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>orig_stat</name>-&gt;<name>ood_last_cmt_author</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>new_stat</name>-&gt;<name>ood_last_cmt_author</name></name>
= <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>orig_stat</name>-&gt;<name>ood_last_cmt_author</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>new_stat</name></expr>;</return>
}</block></function>
<function><type><name>svn_wc_status_t</name> *</type>
<name>svn_wc_dup_status</name><parameter_list>(<param><decl><type><name>svn_wc_status_t</name> *</type><name>orig_stat</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_wc_status_t</name> *</type><name>new_stat</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>new_stat</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>new_stat</name> = *<name>orig_stat</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>orig_stat</name>-&gt;<name>entry</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>new_stat</name>-&gt;<name>entry</name></name> = <call><name>svn_wc_entry_dup</name><argument_list>(<argument><expr><name><name>orig_stat</name>-&gt;<name>entry</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>new_stat</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_get_ignores</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>patterns</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>config</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>default_ignores</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_get_default_ignores</name><argument_list>(<argument><expr>&amp;<name>default_ignores</name></expr></argument>, <argument><expr><name>config</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>collect_ignore_patterns</name><argument_list>(<argument><expr><name>patterns</name></expr></argument>, <argument><expr><name>default_ignores</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
