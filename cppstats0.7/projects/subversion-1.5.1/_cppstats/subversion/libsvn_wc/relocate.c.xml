<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/libsvn_wc/relocate.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_wc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"wc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"entries.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"props.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>relocate_entry</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>from</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>to</name></decl></param>,
<param><decl><type><name>svn_wc_relocation_validator3_t</name></type> <name>validator</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>validator_baton</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>do_sync</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_wc_entry_t</name></type> <name>entry2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint64_t</name></type> <name>flags</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>from_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>url</name></name> &amp;&amp; ! <call><name>strncmp</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>url</name></name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>from_len</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>entry2</name>.<name>url</name></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>url</name></name> + <name>from_len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>uuid</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>validator</name><argument_list>(<argument><expr><name>validator_baton</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>uuid</name></name></expr></argument>, <argument><expr><name><name>entry2</name>.<name>url</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>flags</name> |= <name>SVN_WC__ENTRY_MODIFY_URL</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>repos</name></name> &amp;&amp; (<name>flags</name> &amp; <name>SVN_WC__ENTRY_MODIFY_URL</name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>repos_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>repos</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>from_len</name> &gt;= <name>repos_len</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>to_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>fs_path_len</name> <init>= <expr><name>from_len</name> - <name>repos_len</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>to_len</name> &lt; <name>fs_path_len</name>
|| <call><name>strncmp</name><argument_list>(<argument><expr><name>from</name> + <name>repos_len</name></expr></argument>, <argument><expr><name>to</name> + (<name>to_len</name> - <name>fs_path_len</name>)</expr></argument>,
<argument><expr><name>fs_path_len</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_WC_INVALID_RELOCATION</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Relocate can only change the "
"repository part of an URL"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>from_len</name> = <name>repos_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>to</name> = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>to_len</name> - <name>fs_path_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>repos</name></name></expr></argument>, <argument><expr><name>from_len</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>entry2</name>.<name>repos</name></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>repos</name></name> + <name>from_len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> |= <name>SVN_WC__ENTRY_MODIFY_REPOS</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>validator</name><argument_list>(<argument><expr><name>validator_baton</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>uuid</name></name></expr></argument>, <argument><expr><name><name>entry2</name>.<name>url</name></name></expr></argument>,
<argument><expr><name><name>entry2</name>.<name>repos</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>copyfrom_url</name></name> &amp;&amp; ! <call><name>strncmp</name><argument_list>(<argument><expr><name><name>entry</name>-&gt;<name>copyfrom_url</name></name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>from_len</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>entry2</name>.<name>copyfrom_url</name></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>to</name></expr></argument>,
<argument><expr><name><name>entry</name>-&gt;<name>copyfrom_url</name></name> + <name>from_len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>uuid</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>validator</name><argument_list>(<argument><expr><name>validator_baton</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>uuid</name></name></expr></argument>,
<argument><expr><name><name>entry2</name>.<name>copyfrom_url</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>flags</name> |= <name>SVN_WC__ENTRY_MODIFY_COPYFROM_URL</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>flags</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entry_modify</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr>&amp;<name>entry2</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>do_sync</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_relocate3</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>from</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>to</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
<param><decl><type><name>svn_wc_relocation_validator3_t</name></type> <name>validator</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>validator_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>entries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entry</name><argument_list>(<argument><expr>&amp;<name>entry</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>entry</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_ENTRY_NOT_FOUND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_file</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>relocate_entry</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>,
<argument><expr><name>validator</name></expr></argument>, <argument><expr><name>validator_baton</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument> ,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_entries_read</name><argument_list>(<argument><expr>&amp;<name>entries</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>entry</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>SVN_WC_ENTRY_THIS_DIR</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>relocate_entry</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>,
<argument><expr><name>validator</name></expr></argument>, <argument><expr><name>validator_baton</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>entry</name> = <name>val</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>SVN_WC_ENTRY_THIS_DIR</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>recurse</name> &amp;&amp; (<name><name>entry</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name>)
&amp;&amp; (! <name><name>entry</name>-&gt;<name>deleted</name></name> || (<name><name>entry</name>-&gt;<name>schedule</name></name> == <name>svn_wc_schedule_add</name>))
&amp;&amp; ! <name><name>entry</name>-&gt;<name>absent</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_wc_adm_access_t</name> *</type><name>subdir_access</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>subdir</name> <init>= <expr><call><name>svn_path_join</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>svn_wc__adm_missing</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>subdir</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_adm_retrieve</name><argument_list>(<argument><expr>&amp;<name>subdir_access</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>,
<argument><expr><name>subdir</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc_relocate3</name><argument_list>(<argument><expr><name>subdir</name></expr></argument>, <argument><expr><name>subdir_access</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>,
<argument><expr><name>recurse</name></expr></argument>, <argument><expr><name>validator</name></expr></argument>,
<argument><expr><name>validator_baton</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>relocate_entry</name><argument_list>(<argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>,
<argument><expr><name>validator</name></expr></argument>, <argument><expr><name>validator_baton</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__props_delete</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>svn_wc__props_wcprop</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_wc__entries_write</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<struct>struct <name>compat2_baton</name> <block>{
<decl_stmt><decl><type><name>svn_wc_relocation_validator2_t</name></type> <name>validator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>baton</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>compat_baton</name> <block>{
<decl_stmt><decl><type><name>svn_wc_relocation_validator_t</name></type> <name>validator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>baton</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>compat2_validator</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>uuid</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>root_url</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>compat2_baton</name> *</type><name>cb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name><name>cb</name>-&gt;<name>validator</name></name><argument_list>(<argument><expr><name><name>cb</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name>uuid</name></expr></argument>,
<argument><expr>(<name>root_url</name> ? <name>root_url</name> : <name>url</name>)</expr></argument>, <argument><expr>(<name>root_url</name> ? <name>TRUE</name> : <name>FALSE</name>)</expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>compat_validator</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>uuid</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>root_url</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>compat_baton</name> *</type><name>cb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>uuid</name></expr>)</condition><then>
<return>return <expr><call><name><name>cb</name>-&gt;<name>validator</name></name><argument_list>(<argument><expr><name><name>cb</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name>uuid</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_relocate2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>from</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>to</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
<param><decl><type><name>svn_wc_relocation_validator2_t</name></type> <name>validator</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>validator_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>compat2_baton</name></type> <name>cb</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cb</name>.<name>validator</name></name> = <name>validator</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name>.<name>baton</name></name> = <name>validator_baton</name></expr>;</expr_stmt>
<return>return <expr><call><name>svn_wc_relocate3</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>recurse</name></expr></argument>,
<argument><expr><name>compat2_validator</name></expr></argument>, <argument><expr>&amp;<name>cb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_wc_relocate</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>from</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>to</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>recurse</name></decl></param>,
<param><decl><type><name>svn_wc_relocation_validator_t</name></type> <name>validator</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>validator_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>compat_baton</name></type> <name>cb</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cb</name>.<name>validator</name></name> = <name>validator</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cb</name>.<name>baton</name></name> = <name>validator_baton</name></expr>;</expr_stmt>
<return>return <expr><call><name>svn_wc_relocate3</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>adm_access</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>recurse</name></expr></argument>,
<argument><expr><name>compat_validator</name></expr></argument>, <argument><expr>&amp;<name>cb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
</unit>
