<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/svn/cl.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SVN_CL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CL_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_tables.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_getopt.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_wc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_auth.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_cmdline.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><enum>enum <block>{
<decl><name>svn_cl__accept_invalid</name> <init>= <expr>-2</expr></init></decl>,
<decl><name>svn_cl__accept_unspecified</name> <init>= <expr>-1</expr></init></decl>,
<decl><name>svn_cl__accept_postpone</name></decl>,
<decl><name>svn_cl__accept_base</name></decl>,
<decl><name>svn_cl__accept_working</name></decl>,
<decl><name>svn_cl__accept_mine_conflict</name></decl>,
<decl><name>svn_cl__accept_theirs_conflict</name></decl>,
<decl><name>svn_cl__accept_mine_full</name></decl>,
<decl><name>svn_cl__accept_theirs_full</name></decl>,
<decl><name>svn_cl__accept_edit</name></decl>,
<decl><name>svn_cl__accept_launch</name></decl>,
}</block></enum></type> <name>svn_cl__accept_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CL__ACCEPT_POSTPONE</name></cpp:macro> <cpp:value>"postpone"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CL__ACCEPT_BASE</name></cpp:macro> <cpp:value>"base"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CL__ACCEPT_WORKING</name></cpp:macro> <cpp:value>"working"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CL__ACCEPT_MINE_CONFLICT</name></cpp:macro> <cpp:value>"mine-conflict"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CL__ACCEPT_THEIRS_CONFLICT</name></cpp:macro> <cpp:value>"theirs-conflict"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CL__ACCEPT_MINE_FULL</name></cpp:macro> <cpp:value>"mine-full"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CL__ACCEPT_THEIRS_FULL</name></cpp:macro> <cpp:value>"theirs-full"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CL__ACCEPT_EDIT</name></cpp:macro> <cpp:value>"edit"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CL__ACCEPT_LAUNCH</name></cpp:macro> <cpp:value>"launch"</cpp:value></cpp:define>
<function_decl><type><name>svn_cl__accept_t</name></type>
<name>svn_cl__accept_from_word</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>word</name></decl></param>)</parameter_list>;</function_decl>
<typedef>typedef <type><enum>enum <block>{
<decl><name>svn_cl__show_revs_invalid</name> <init>= <expr>-1</expr></init></decl>,
<decl><name>svn_cl__show_revs_merged</name></decl>,
<decl><name>svn_cl__show_revs_eligible</name></decl>
}</block></enum></type> <name>svn_cl__show_revs_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CL__SHOW_REVS_MERGED</name></cpp:macro> <cpp:value>"merged"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CL__SHOW_REVS_ELIGIBLE</name></cpp:macro> <cpp:value>"eligible"</cpp:value></cpp:define>
<function_decl><type><name>svn_cl__show_revs_t</name></type>
<name>svn_cl__show_revs_from_word</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>word</name></decl></param>)</parameter_list>;</function_decl>
<typedef>typedef <type><struct>struct <name>svn_cl__opt_state_t</name> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>revision_ranges</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_opt_revision_t</name></type> <name>start_revision</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_opt_revision_t</name></type> <name>end_revision</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>used_change_arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>no_unlock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>message</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ancestor_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>force</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>force_log</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>incremental</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>quiet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>non_interactive</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>verbose</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>update</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>strict</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>filedata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>encoding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>help</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>auth_username</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>auth_password</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>extensions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>targets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>xml</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>no_ignore</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>no_auth_cache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>no_diff_deleted</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>notice_ancestry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>ignore_externals</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>stop_on_copy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>dry_run</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>revprop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>diff_cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>merge_cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>editor_cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>record_only</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>old_target</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>new_target</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>relocate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>config_dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>autoprops</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>no_autoprops</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>native_eol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>summarize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>remove</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>changelists</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>changelist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>keep_changelists</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>keep_local</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>all_revprops</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>revprop_table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>parents</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>use_merge_history</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_cl__accept_t</name></type> <name>accept_which</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_cl__show_revs_t</name></type> <name>show_revs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_depth_t</name></type> <name>set_depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>reintegrate</name></decl>;</decl_stmt>
}</block></struct></type> <name>svn_cl__opt_state_t</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>svn_cl__opt_state_t</name> *</type><name>opt_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl>;</decl_stmt>
}</block></struct></type> <name>svn_cl__cmd_baton_t</name>;</typedef>
<decl_stmt><decl><type><name>svn_opt_subcommand_t</name></type>
<name>svn_cl__add</name></decl>,
<decl><type ref="prev"/><name>svn_cl__blame</name></decl>,
<decl><type ref="prev"/><name>svn_cl__cat</name></decl>,
<decl><type ref="prev"/><name>svn_cl__changelist</name></decl>,
<decl><type ref="prev"/><name>svn_cl__checkout</name></decl>,
<decl><type ref="prev"/><name>svn_cl__cleanup</name></decl>,
<decl><type ref="prev"/><name>svn_cl__commit</name></decl>,
<decl><type ref="prev"/><name>svn_cl__copy</name></decl>,
<decl><type ref="prev"/><name>svn_cl__delete</name></decl>,
<decl><type ref="prev"/><name>svn_cl__diff</name></decl>,
<decl><type ref="prev"/><name>svn_cl__export</name></decl>,
<decl><type ref="prev"/><name>svn_cl__help</name></decl>,
<decl><type ref="prev"/><name>svn_cl__import</name></decl>,
<decl><type ref="prev"/><name>svn_cl__info</name></decl>,
<decl><type ref="prev"/><name>svn_cl__lock</name></decl>,
<decl><type ref="prev"/><name>svn_cl__log</name></decl>,
<decl><type ref="prev"/><name>svn_cl__list</name></decl>,
<decl><type ref="prev"/><name>svn_cl__merge</name></decl>,
<decl><type ref="prev"/><name>svn_cl__mergeinfo</name></decl>,
<decl><type ref="prev"/><name>svn_cl__mkdir</name></decl>,
<decl><type ref="prev"/><name>svn_cl__move</name></decl>,
<decl><type ref="prev"/><name>svn_cl__propdel</name></decl>,
<decl><type ref="prev"/><name>svn_cl__propedit</name></decl>,
<decl><type ref="prev"/><name>svn_cl__propget</name></decl>,
<decl><type ref="prev"/><name>svn_cl__proplist</name></decl>,
<decl><type ref="prev"/><name>svn_cl__propset</name></decl>,
<decl><type ref="prev"/><name>svn_cl__revert</name></decl>,
<decl><type ref="prev"/><name>svn_cl__resolve</name></decl>,
<decl><type ref="prev"/><name>svn_cl__resolved</name></decl>,
<decl><type ref="prev"/><name>svn_cl__status</name></decl>,
<decl><type ref="prev"/><name>svn_cl__switch</name></decl>,
<decl><type ref="prev"/><name>svn_cl__unlock</name></decl>,
<decl><type ref="prev"/><name>svn_cl__update</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>svn_opt_subcommand_desc2_t</name></type> <name><name>svn_cl__cmd_table</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>svn_cl__global_options</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>apr_getopt_option_t</name></type> <name><name>svn_cl__options</name><index>[]</index></name></decl>;</decl_stmt>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_cl__try</name><parameter_list>(<param><decl><type><name>svn_error_t</name> *</type><name>err</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name> *</type><name>success</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>quiet</name></decl></param>,
<param><decl><type>...</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_cl__check_cancel</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list>;</function_decl>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>svn_cl__accept_t</name></type> <name>accept_which</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>config</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>editor_cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>external_failed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_cmdline_prompt_baton_t</name> *</type><name>pb</name></decl>;</decl_stmt>
}</block></struct></type> <name>svn_cl__conflict_baton_t</name>;</typedef>
<function_decl><type><name>svn_cl__conflict_baton_t</name> *</type>
<name>svn_cl__conflict_baton_make</name><parameter_list>(<param><decl><type><name>svn_cl__accept_t</name></type> <name>accept_which</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>config</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>editor_cmd</name></decl></param>,
<param><decl><type><name>svn_cmdline_prompt_baton_t</name> *</type><name>pb</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_cl__conflict_handler</name><parameter_list>(<param><decl><type><name>svn_wc_conflict_result_t</name> **</type><name>result</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_wc_conflict_description_t</name> *</type><name>desc</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_cl__print_commit_info</name><parameter_list>(<param><decl><type><name>svn_commit_info_t</name> *</type><name>commit_info</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_cl__time_cstring_to_human_cstring</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>human_cstring</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_cl__print_status</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_wc_status2_t</name> *</type><name>status</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>detailed</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>show_last_committed</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>skip_unrecognized</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>repos_locks</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_cl__print_status_xml</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_wc_status2_t</name> *</type><name>status</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_cl__print_prop_hash</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>prop_hash</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>names_only</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>
<name>svn_cl__print_xml_prop</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> **</type><name>outstr</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>propname</name></decl></param>,
<param><decl><type><name>svn_string_t</name> *</type><name>propval</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_cl__print_xml_prop_hash</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> **</type><name>outstr</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>prop_hash</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>names_only</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>
<name>svn_cl__print_xml_commit</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> **</type><name>outstr</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>author</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>date</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_cl__revprop_prepare</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>targets</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>URL</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_cl__edit_string_externally</name><parameter_list>(<param><decl><type><name>svn_string_t</name> **</type><name>edited_contents</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>tmpfile_left</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>editor_cmd</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_dir</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>contents</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prefix</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>config</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>as_text</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>encoding</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_cl__edit_file_externally</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>editor_cmd</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>config</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_cl__merge_file_externally</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>their_path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>my_path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>merged_path</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>config</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>svn_cl__get_notifier</name><parameter_list>(<param><decl><type><name>svn_wc_notify_func2_t</name> *</type><name>notify_func_p</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>notify_baton_p</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>is_checkout</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>is_export</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>suppress_final_line</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_cl__make_log_msg_baton</name><parameter_list>(<param><decl><type><name>void</name> **</type><name>baton</name></decl></param>,
<param><decl><type><name>svn_cl__opt_state_t</name> *</type><name>opt_state</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_dir</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>config</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_cl__get_log_message</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>log_msg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>tmp_file</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>commit_items</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_cl__cleanup_log_msg</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>log_msg_baton</name></decl></param>,
<param><decl><type><name>svn_error_t</name> *</type><name>commit_err</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_cl__may_need_force</name><parameter_list>(<param><decl><type><name>svn_error_t</name> *</type><name>err</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_cl__error_checked_fputs</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>string</name></decl></param>,
<param><decl><type><name>FILE</name>*</type> <name>stream</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>svn_cl__xml_tagged_cdata</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> **</type><name>sb</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tagname</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>string</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_cl__xml_print_header</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tagname</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_cl__xml_print_footer</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tagname</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>svn_cl__node_kind_str</name><parameter_list>(<param><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>svn_cl__check_boolean_prop_val</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>propname</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>propval</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_cl__changelist_paths</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>paths</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>changelists</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>targets</name></decl></param>,
<param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_cl__args_to_target_array_print_reserved</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>targets_p</name></decl></param>,
<param><decl><type><name>apr_getopt_t</name> *</type><name>os</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>known_targets</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
