<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/svn/status.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_cmdline.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_wc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_xml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type>
<name>generate_status_code</name><argument_list>(<argument>enum <expr><name>svn_wc_status_kind</name> <name>status</name></expr></argument>)</argument_list> <block>{
<switch>switch <condition>(<expr><name>status</name></expr>)</condition> <block>{
<case>case <expr><name>svn_wc_status_none</name></expr>:
<return>return <expr>' '</expr>;</return>
</case><case>case <expr><name>svn_wc_status_normal</name></expr>:
<return>return <expr>' '</expr>;</return>
</case><case>case <expr><name>svn_wc_status_added</name></expr>:
<return>return <expr>'A'</expr>;</return>
</case><case>case <expr><name>svn_wc_status_missing</name></expr>:
<return>return <expr>'!'</expr>;</return>
</case><case>case <expr><name>svn_wc_status_incomplete</name></expr>:
<return>return <expr>'!'</expr>;</return>
</case><case>case <expr><name>svn_wc_status_deleted</name></expr>:
<return>return <expr>'D'</expr>;</return>
</case><case>case <expr><name>svn_wc_status_replaced</name></expr>:
<return>return <expr>'R'</expr>;</return>
</case><case>case <expr><name>svn_wc_status_modified</name></expr>:
<return>return <expr>'M'</expr>;</return>
</case><case>case <expr><name>svn_wc_status_merged</name></expr>:
<return>return <expr>'G'</expr>;</return>
</case><case>case <expr><name>svn_wc_status_conflicted</name></expr>:
<return>return <expr>'C'</expr>;</return>
</case><case>case <expr><name>svn_wc_status_obstructed</name></expr>:
<return>return <expr>'~'</expr>;</return>
</case><case>case <expr><name>svn_wc_status_ignored</name></expr>:
<return>return <expr>'I'</expr>;</return>
</case><case>case <expr><name>svn_wc_status_external</name></expr>:
<return>return <expr>'X'</expr>;</return>
</case><case>case <expr><name>svn_wc_status_unversioned</name></expr>:
<return>return <expr>'?'</expr>;</return>
</case><default>default:
<return>return <expr>'?'</expr>;</return>
</default>}</block></switch>
}</block></decl></decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>generate_status_desc</name><argument_list>(<argument>enum <expr><name>svn_wc_status_kind</name> <name>status</name></expr></argument>)</argument_list> <block>{
<switch>switch <condition>(<expr><name>status</name></expr>)</condition> <block>{
<case>case <expr><name>svn_wc_status_none</name></expr>:
<return>return <expr>"none"</expr>;</return>
</case><case>case <expr><name>svn_wc_status_normal</name></expr>:
<return>return <expr>"normal"</expr>;</return>
</case><case>case <expr><name>svn_wc_status_added</name></expr>:
<return>return <expr>"added"</expr>;</return>
</case><case>case <expr><name>svn_wc_status_missing</name></expr>:
<return>return <expr>"missing"</expr>;</return>
</case><case>case <expr><name>svn_wc_status_incomplete</name></expr>:
<return>return <expr>"incomplete"</expr>;</return>
</case><case>case <expr><name>svn_wc_status_deleted</name></expr>:
<return>return <expr>"deleted"</expr>;</return>
</case><case>case <expr><name>svn_wc_status_replaced</name></expr>:
<return>return <expr>"replaced"</expr>;</return>
</case><case>case <expr><name>svn_wc_status_modified</name></expr>:
<return>return <expr>"modified"</expr>;</return>
</case><case>case <expr><name>svn_wc_status_merged</name></expr>:
<return>return <expr>"merged"</expr>;</return>
</case><case>case <expr><name>svn_wc_status_conflicted</name></expr>:
<return>return <expr>"conflicted"</expr>;</return>
</case><case>case <expr><name>svn_wc_status_obstructed</name></expr>:
<return>return <expr>"obstructed"</expr>;</return>
</case><case>case <expr><name>svn_wc_status_ignored</name></expr>:
<return>return <expr>"ignored"</expr>;</return>
</case><case>case <expr><name>svn_wc_status_external</name></expr>:
<return>return <expr>"external"</expr>;</return>
</case><case>case <expr><name>svn_wc_status_unversioned</name></expr>:
<return>return <expr>"unversioned"</expr>;</return>
</case><default>default:
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</default>}</block></switch>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></decl></decl_stmt>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>print_status</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>detailed</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>show_last_committed</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>repos_locks</name></decl></param>,
<param><decl><type><name>svn_wc_status2_t</name> *</type><name>status</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>detailed</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name></type> <name>ood_status</name></decl>, <decl><type ref="prev"/><name>lock_status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>working_rev</name></decl>;</decl_stmt>
<if>if <condition>(<expr>! <name><name>status</name>-&gt;<name>entry</name></name></expr>)</condition><then>
<expr_stmt><expr><name>working_rev</name> = ""</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>! <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name><name>status</name>-&gt;<name>entry</name>-&gt;<name>revision</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>working_rev</name> = " ? "</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>status</name>-&gt;<name>copied</name></name></expr>)</condition><then>
<expr_stmt><expr><name>working_rev</name> = "-"</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>working_rev</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%ld"</expr></argument>, <argument><expr><name><name>status</name>-&gt;<name>entry</name>-&gt;<name>revision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if></else></if>
<if>if <condition>(<expr><name><name>status</name>-&gt;<name>repos_text_status</name></name> != <name>svn_wc_status_none</name>
|| <name><name>status</name>-&gt;<name>repos_prop_status</name></name> != <name>svn_wc_status_none</name></expr>)</condition><then>
<expr_stmt><expr><name>ood_status</name> = '*'</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>ood_status</name> = ' '</expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>repos_locks</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>status</name>-&gt;<name>repos_lock</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>status</name>-&gt;<name>entry</name></name> &amp;&amp; <name><name>status</name>-&gt;<name>entry</name>-&gt;<name>lock_token</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>status</name>-&gt;<name>repos_lock</name>-&gt;<name>token</name></name></expr></argument>, <argument><expr><name><name>status</name>-&gt;<name>entry</name>-&gt;<name>lock_token</name></name></expr></argument>)</argument_list></call>
== 0</expr>)</condition><then>
<expr_stmt><expr><name>lock_status</name> = 'K'</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>lock_status</name> = 'T'</expr>;</expr_stmt></else></if>
}</block></then> <else>else
<expr_stmt><expr><name>lock_status</name> = 'O'</expr>;</expr_stmt></else></if>
}</block></then> <else>else <if>if <condition>(<expr><name><name>status</name>-&gt;<name>entry</name></name> &amp;&amp; <name><name>status</name>-&gt;<name>entry</name>-&gt;<name>lock_token</name></name></expr>)</condition><then>
<expr_stmt><expr><name>lock_status</name> = 'B'</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>lock_status</name> = ' '</expr>;</expr_stmt></else></if></else></if>
}</block></then> <else>else
<expr_stmt><expr><name>lock_status</name> = (<name><name>status</name>-&gt;<name>entry</name></name> &amp;&amp; <name><name>status</name>-&gt;<name>entry</name>-&gt;<name>lock_token</name></name>) ? 'K' : ' '</expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>show_last_committed</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>commit_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>commit_author</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>status</name>-&gt;<name>entry</name></name> &amp;&amp; <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name><name>status</name>-&gt;<name>entry</name>-&gt;<name>cmt_rev</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>commit_rev</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%ld"</expr></argument>, <argument><expr><name><name>status</name>-&gt;<name>entry</name>-&gt;<name>cmt_rev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>status</name>-&gt;<name>entry</name></name></expr>)</condition><then>
<expr_stmt><expr><name>commit_rev</name> = " ? "</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>commit_rev</name> = ""</expr>;</expr_stmt></else></if></else></if>
<if>if <condition>(<expr><name><name>status</name>-&gt;<name>entry</name></name> &amp;&amp; <name><name>status</name>-&gt;<name>entry</name>-&gt;<name>cmt_author</name></name></expr>)</condition><then>
<expr_stmt><expr><name>commit_author</name> = <name><name>status</name>-&gt;<name>entry</name>-&gt;<name>cmt_author</name></name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>status</name>-&gt;<name>entry</name></name></expr>)</condition><then>
<expr_stmt><expr><name>commit_author</name> = " ? "</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>commit_author</name> = ""</expr>;</expr_stmt></else></if></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name>
<argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr>"%c%c%c%c%c%c %c %6s %6s %-12s %s\n"</expr></argument>,
<argument><expr><call><name>generate_status_code</name><argument_list>(<argument><expr><name><name>status</name>-&gt;<name>text_status</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>generate_status_code</name><argument_list>(<argument><expr><name><name>status</name>-&gt;<name>prop_status</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>status</name>-&gt;<name>locked</name></name> ? 'L' : ' '</expr></argument>,
<argument><expr><name><name>status</name>-&gt;<name>copied</name></name> ? '+' : ' '</expr></argument>,
<argument><expr><name><name>status</name>-&gt;<name>switched</name></name> ? 'S' : ' '</expr></argument>,
<argument><expr><name>lock_status</name></expr></argument>,
<argument><expr><name>ood_status</name></expr></argument>,
<argument><expr><name>working_rev</name></expr></argument>,
<argument><expr><name>commit_rev</name></expr></argument>,
<argument><expr><name>commit_author</name></expr></argument>,
<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><call><name>SVN_ERR</name>
<argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%c%c%c%c%c%c %c %6s %s\n"</expr></argument>,
<argument><expr><call><name>generate_status_code</name><argument_list>(<argument><expr><name><name>status</name>-&gt;<name>text_status</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>generate_status_code</name><argument_list>(<argument><expr><name><name>status</name>-&gt;<name>prop_status</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>status</name>-&gt;<name>locked</name></name> ? 'L' : ' '</expr></argument>,
<argument><expr><name><name>status</name>-&gt;<name>copied</name></name> ? '+' : ' '</expr></argument>,
<argument><expr><name><name>status</name>-&gt;<name>switched</name></name> ? 'S' : ' '</expr></argument>,
<argument><expr><name>lock_status</name></expr></argument>,
<argument><expr><name>ood_status</name></expr></argument>,
<argument><expr><name>working_rev</name></expr></argument>,
<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></then> <else>else
<expr_stmt><expr><call><name>SVN_ERR</name>
<argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%c%c%c%c%c%c %s\n"</expr></argument>,
<argument><expr><call><name>generate_status_code</name><argument_list>(<argument><expr><name><name>status</name>-&gt;<name>text_status</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>generate_status_code</name><argument_list>(<argument><expr><name><name>status</name>-&gt;<name>prop_status</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>status</name>-&gt;<name>locked</name></name> ? 'L' : ' '</expr></argument>,
<argument><expr><name><name>status</name>-&gt;<name>copied</name></name> ? '+' : ' '</expr></argument>,
<argument><expr><name><name>status</name>-&gt;<name>switched</name></name> ? 'S' : ' '</expr></argument>,
<argument><expr>((<name><name>status</name>-&gt;<name>entry</name></name> &amp;&amp; <name><name>status</name>-&gt;<name>entry</name>-&gt;<name>lock_token</name></name>)
? 'K' : ' ')</expr></argument>,
<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_cl__print_status_xml</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_wc_status2_t</name> *</type><name>status</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>sb</name> <init>= <expr><call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>att_hash</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>status</name>-&gt;<name>text_status</name></name> == <name>svn_wc_status_none</name>
&amp;&amp; <name><name>status</name>-&gt;<name>repos_text_status</name></name> == <name>svn_wc_status_none</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>svn_xml_make_open_tag</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>svn_xml_normal</name></expr></argument>, <argument><expr>"entry"</expr></argument>,
<argument><expr>"path"</expr></argument>, <argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>att_hash</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>att_hash</name></expr></argument>, <argument><expr>"item"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><call><name>generate_status_desc</name><argument_list>(<argument><expr><name><name>status</name>-&gt;<name>text_status</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>att_hash</name></expr></argument>, <argument><expr>"props"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><call><name>generate_status_desc</name><argument_list>(<argument><expr><name><name>status</name>-&gt;<name>prop_status</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>status</name>-&gt;<name>locked</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>att_hash</name></expr></argument>, <argument><expr>"wc-locked"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr>"true"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>status</name>-&gt;<name>copied</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>att_hash</name></expr></argument>, <argument><expr>"copied"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr>"true"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>status</name>-&gt;<name>switched</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>att_hash</name></expr></argument>, <argument><expr>"switched"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr>"true"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>status</name>-&gt;<name>entry</name></name> &amp;&amp; ! <name><name>status</name>-&gt;<name>entry</name>-&gt;<name>copied</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>att_hash</name></expr></argument>, <argument><expr>"revision"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%ld"</expr></argument>, <argument><expr><name><name>status</name>-&gt;<name>entry</name>-&gt;<name>revision</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>svn_xml_make_open_tag_hash</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>svn_xml_normal</name></expr></argument>, <argument><expr>"wc-status"</expr></argument>,
<argument><expr><name>att_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>status</name>-&gt;<name>entry</name></name> &amp;&amp; <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name><name>status</name>-&gt;<name>entry</name>-&gt;<name>cmt_rev</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_cl__print_xml_commit</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name><name>status</name>-&gt;<name>entry</name>-&gt;<name>cmt_rev</name></name></expr></argument>,
<argument><expr><name><name>status</name>-&gt;<name>entry</name>-&gt;<name>cmt_author</name></name></expr></argument>,
<argument><expr><call><name>svn_time_to_cstring</name><argument_list>(<argument><expr><name><name>status</name>-&gt;<name>entry</name>-&gt;<name>cmt_date</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>status</name>-&gt;<name>entry</name></name> &amp;&amp; <name><name>status</name>-&gt;<name>entry</name>-&gt;<name>lock_token</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_xml_make_open_tag</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>svn_xml_normal</name></expr></argument>, <argument><expr>"lock"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_cl__xml_tagged_cdata</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"token"</expr></argument>, <argument><expr><name><name>status</name>-&gt;<name>entry</name>-&gt;<name>lock_token</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>status</name>-&gt;<name>entry</name>-&gt;<name>lock_owner</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_cl__xml_tagged_cdata</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"owner"</expr></argument>,
<argument><expr><name><name>status</name>-&gt;<name>entry</name>-&gt;<name>lock_owner</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_WC_CORRUPT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s' has lock token, but no lock owner"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></else></if>
<expr_stmt><expr><call><name>svn_cl__xml_tagged_cdata</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"comment"</expr></argument>,
<argument><expr><name><name>status</name>-&gt;<name>entry</name>-&gt;<name>lock_comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_cl__xml_tagged_cdata</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"created"</expr></argument>,
<argument><expr><call><name>svn_time_to_cstring</name>
<argument_list>(<argument><expr><name><name>status</name>-&gt;<name>entry</name>-&gt;<name>lock_creation_date</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_xml_make_close_tag</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"lock"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>svn_xml_make_close_tag</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"wc-status"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>status</name>-&gt;<name>repos_text_status</name></name> != <name>svn_wc_status_none</name>
|| <name><name>status</name>-&gt;<name>repos_prop_status</name></name> != <name>svn_wc_status_none</name>
|| <name><name>status</name>-&gt;<name>repos_lock</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_xml_make_open_tag</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>svn_xml_normal</name></expr></argument>, <argument><expr>"repos-status"</expr></argument>,
<argument><expr>"item"</expr></argument>,
<argument><expr><call><name>generate_status_desc</name><argument_list>(<argument><expr><name><name>status</name>-&gt;<name>repos_text_status</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"props"</expr></argument>,
<argument><expr><call><name>generate_status_desc</name><argument_list>(<argument><expr><name><name>status</name>-&gt;<name>repos_prop_status</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>status</name>-&gt;<name>repos_lock</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_xml_make_open_tag</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>svn_xml_normal</name></expr></argument>, <argument><expr>"lock"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_cl__xml_tagged_cdata</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"token"</expr></argument>,
<argument><expr><name><name>status</name>-&gt;<name>repos_lock</name>-&gt;<name>token</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_cl__xml_tagged_cdata</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"owner"</expr></argument>,
<argument><expr><name><name>status</name>-&gt;<name>repos_lock</name>-&gt;<name>owner</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_cl__xml_tagged_cdata</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"comment"</expr></argument>,
<argument><expr><name><name>status</name>-&gt;<name>repos_lock</name>-&gt;<name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_cl__xml_tagged_cdata</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"created"</expr></argument>,
<argument><expr><call><name>svn_time_to_cstring</name>
<argument_list>(<argument><expr><name><name>status</name>-&gt;<name>repos_lock</name>-&gt;<name>creation_date</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>status</name>-&gt;<name>repos_lock</name>-&gt;<name>expiration_date</name></name> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_cl__xml_tagged_cdata</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"expires"</expr></argument>,
<argument><expr><call><name>svn_time_to_cstring</name>
<argument_list>(<argument><expr><name><name>status</name>-&gt;<name>repos_lock</name>-&gt;<name>expiration_date</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>svn_xml_make_close_tag</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"lock"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>svn_xml_make_close_tag</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"repos-status"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>svn_xml_make_close_tag</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"entry"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_cl__error_checked_fputs</name><argument_list>(<argument><expr><name><name>sb</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_cl__print_status</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_wc_status2_t</name> *</type><name>status</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>detailed</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>show_last_committed</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>skip_unrecognized</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>repos_locks</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>! <name>status</name>
|| (<name>skip_unrecognized</name> &amp;&amp; ! <name><name>status</name>-&gt;<name>entry</name></name>)
|| (<name><name>status</name>-&gt;<name>text_status</name></name> == <name>svn_wc_status_none</name>
&amp;&amp; <name><name>status</name>-&gt;<name>repos_text_status</name></name> == <name>svn_wc_status_none</name>)</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<return>return <expr><call><name>print_status</name><argument_list>(<argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>detailed</name></expr></argument>, <argument><expr><name>show_last_committed</name></expr></argument>, <argument><expr><name>repos_locks</name></expr></argument>, <argument><expr><name>status</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
</unit>
