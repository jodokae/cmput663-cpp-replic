<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/svn/client_errors.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SVN_CLIENT_ERRORS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CLIENT_ERRORS_H</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SVN_ERROR_BUILD_ARRAY</name></expr></argument>)</argument_list></call> || !<call><name>defined</name><argument_list>(<argument><expr><name>SVN_CMDLINE_ERROR_ENUM_DEFINED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SVN_ERROR_BUILD_ARRAY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_ERROR_START</name></cpp:macro> <cpp:value>static const err_defn error_table[] = { { SVN_ERR_CDMLINE__WARNING, "Warning" },</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_ERRDEF</name><parameter_list>(<param><type><name>n</name></type></param>, <param><type><name>s</name></type></param>)</parameter_list></cpp:macro> <cpp:value>{ n, s },</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_ERROR_END</name></cpp:macro> <cpp:value>{ 0, NULL } };</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SVN_CMDLINE_ERROR_ENUM_DEFINED</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_ERROR_START</name></cpp:macro> <cpp:value>typedef enum svn_client_errno_t { SVN_ERR_CDMLINE__WARNING = SVN_ERR_LAST + 1,</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_ERRDEF</name><parameter_list>(<param><type><name>n</name></type></param>, <param><type><name>s</name></type></param>)</parameter_list></cpp:macro> <cpp:value>n,</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_ERROR_END</name></cpp:macro> <cpp:value>SVN_ERR_CMDLINE__ERR_LAST } svn_client_errno_t;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CMDLINE_ERROR_ENUM_DEFINED</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>SVN_ERROR_START</name></type>
<name>SVN_ERRDEF</name><argument_list>(<argument><expr><name>SVN_ERR_CMDLINE__TMPFILE_WRITE</name></expr></argument>,
<argument><expr>"Failed writing to temporary file."</expr></argument>)</argument_list>
<name>SVN_ERRDEF</name><argument_list>(<argument><expr><name>SVN_ERR_CMDLINE__TMPFILE_STAT</name></expr></argument>,
<argument><expr>"Failed getting info about temporary file."</expr></argument>)</argument_list>
<name>SVN_ERRDEF</name><argument_list>(<argument><expr><name>SVN_ERR_CMDLINE__TMPFILE_OPEN</name></expr></argument>,
<argument><expr>"Failed opening temporary file."</expr></argument>)</argument_list>
<name>SVN_ERROR_END</name></decl></decl_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SVN_ERROR_START</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SVN_ERRDEF</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SVN_ERROR_END</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
