<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/svn/blame-cmd.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_cmdline.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_xml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>svn_cl__opt_state_t</name> *</type><name>opt_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>sbuf</name></decl>;</decl_stmt>
}</block></struct></type> <name>blame_baton_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>blame_receiver_xml</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_int64_t</name></type> <name>line_no</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>author</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>date</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>merged_revision</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>merged_author</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>merged_date</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>merged_path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>line</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_cl__opt_state_t</name> *</type><name>opt_state</name> <init>=
<expr>((<name>blame_baton_t</name> *) <name>baton</name>)-&gt;<name>opt_state</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>sb</name> <init>= <expr>((<name>blame_baton_t</name> *) <name>baton</name>)-&gt;<name>sbuf</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_xml_make_open_tag</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>svn_xml_normal</name></expr></argument>, <argument><expr>"entry"</expr></argument>,
<argument><expr>"line-number"</expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%" <name>APR_INT64_T_FMT</name></expr></argument>,
<argument><expr><name>line_no</name> + 1</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>revision</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_cl__print_xml_commit</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>author</name></expr></argument>, <argument><expr><name>date</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>use_merge_history</name></name> &amp;&amp; <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>merged_revision</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_xml_make_open_tag</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>svn_xml_normal</name></expr></argument>, <argument><expr>"merged"</expr></argument>,
<argument><expr>"path"</expr></argument>, <argument><expr><name>merged_path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_cl__print_xml_commit</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>merged_revision</name></expr></argument>, <argument><expr><name>merged_author</name></expr></argument>,
<argument><expr><name>merged_date</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_xml_make_close_tag</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"merged"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>svn_xml_make_close_tag</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"entry"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__error_checked_fputs</name><argument_list>(<argument><expr><name><name>sb</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_setempty</name><argument_list>(<argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>print_line_info</name><parameter_list>(<param><decl><type><name>svn_stream_t</name> *</type><name>out</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>author</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>date</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>verbose</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>time_utf8</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>time_stdout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rev_str</name> <init>= <expr><call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>revision</name></expr></argument>)</argument_list></call>
? <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%6ld"</expr></argument>, <argument><expr><name>revision</name></expr></argument>)</argument_list></call>
: " -"</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>verbose</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>date</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__time_cstring_to_human_cstring</name><argument_list>(<argument><expr>&amp;<name>time_utf8</name></expr></argument>,
<argument><expr><name>date</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_cstring_from_utf8</name><argument_list>(<argument><expr>&amp;<name>time_stdout</name></expr></argument>, <argument><expr><name>time_utf8</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name>time_stdout</name> = " -"</expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s %10s %s "</expr></argument>, <argument><expr><name>rev_str</name></expr></argument>,
<argument><expr><name>author</name> ? <name>author</name> : " -"</expr></argument>,
<argument><expr><name>time_stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>path</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"%-14s "</expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then> <else>else <block>{
<return>return <expr><call><name>svn_stream_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s %10s "</expr></argument>, <argument><expr><name>rev_str</name></expr></argument>,
<argument><expr><name>author</name> ? <name>author</name> : " -"</expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>blame_receiver</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_int64_t</name></type> <name>line_no</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>author</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>date</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>merged_revision</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>merged_author</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>merged_date</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>merged_path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>line</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_cl__opt_state_t</name> *</type><name>opt_state</name> <init>=
<expr>((<name>blame_baton_t</name> *) <name>baton</name>)-&gt;<name>opt_state</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>out</name> <init>= <expr>((<name>blame_baton_t</name> *)<name>baton</name>)-&gt;<name>out</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>use_merged</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>use_merge_history</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>merged_revision</name> &lt; <name>revision</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_stream_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"G "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>use_merged</name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><call><name>svn_stream_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>" "</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></then></if>
<if>if <condition>(<expr><name>use_merged</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>print_line_info</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>merged_revision</name></expr></argument>, <argument><expr><name>merged_author</name></expr></argument>, <argument><expr><name>merged_date</name></expr></argument>,
<argument><expr><name>merged_path</name></expr></argument>, <argument><expr><name><name>opt_state</name>-&gt;<name>verbose</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>print_line_info</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>author</name></expr></argument>, <argument><expr><name>date</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>verbose</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<return>return <expr><call><name>svn_stream_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s%s"</expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>APR_EOL_STR</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_cl__blame</name><parameter_list>(<param><decl><type><name>apr_getopt_t</name> *</type><name>os</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_cl__opt_state_t</name> *</type><name>opt_state</name> <init>= <expr>((<name>svn_cl__cmd_baton_t</name> *) <name>baton</name>)-&gt;<name>opt_state</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name> <init>= <expr>((<name>svn_cl__cmd_baton_t</name> *) <name>baton</name>)-&gt;<name>ctx</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>targets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>blame_baton_t</name></type> <name>bl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>end_revision_unspecified</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_diff_file_options_t</name> *</type><name>diff_options</name> <init>= <expr><call><name>svn_diff_file_options_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__args_to_target_array_print_reserved</name><argument_list>(<argument><expr>&amp;<name>targets</name></expr></argument>, <argument><expr><name>os</name></expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>targets</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name><name>targets</name>-&gt;<name>nelts</name></name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CL_INSUFFICIENT_ARGS</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>end_revision</name>.<name>kind</name></name> == <name>svn_opt_revision_unspecified</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>start_revision</name>.<name>kind</name></name> != <name>svn_opt_revision_unspecified</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>opt_state</name>-&gt;<name>end_revision</name></name> = <name><name>opt_state</name>-&gt;<name>start_revision</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt_state</name>-&gt;<name>start_revision</name>.<name>kind</name></name> = <name>svn_opt_revision_number</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt_state</name>-&gt;<name>start_revision</name>.<name>value</name>.<name>number</name></name> = 1</expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name>end_revision_unspecified</name> = <name>TRUE</name></expr>;</expr_stmt></else></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>start_revision</name>.<name>kind</name></name> == <name>svn_opt_revision_unspecified</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>opt_state</name>-&gt;<name>start_revision</name>.<name>kind</name></name> = <name>svn_opt_revision_number</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt_state</name>-&gt;<name>start_revision</name>.<name>value</name>.<name>number</name></name> = 1</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>! <name><name>opt_state</name>-&gt;<name>xml</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_for_stdout</name><argument_list>(<argument><expr>&amp;<name><name>bl</name>.<name>out</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>bl</name>.<name>sbuf</name></name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name><name>bl</name>.<name>opt_state</name></name> = <name>opt_state</name></expr>;</expr_stmt>
<expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>extensions</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>opts</name></decl>;</decl_stmt>
<expr_stmt><expr><name>opts</name> = <call><name>svn_cstring_split</name><argument_list>(<argument><expr><name><name>opt_state</name>-&gt;<name>extensions</name></name></expr></argument>, <argument><expr>" \t\n\r"</expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_diff_file_options_parse</name><argument_list>(<argument><expr><name>diff_options</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>xml</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>verbose</name></name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CL_ARG_PARSING_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"'verbose' option invalid in XML mode"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>! <name><name>opt_state</name>-&gt;<name>incremental</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__xml_print_header</name><argument_list>(<argument><expr>"blame"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>incremental</name></name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CL_ARG_PARSING_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"'incremental' option only valid in XML "
"mode"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></else></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>targets</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>targets</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>truepath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_opt_revision_t</name></type> <name>peg_revision</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_client_blame_receiver2_t</name></type> <name>receiver</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__check_cancel</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_opt_parse_path</name><argument_list>(<argument><expr>&amp;<name>peg_revision</name></expr></argument>, <argument><expr>&amp;<name>truepath</name></expr></argument>, <argument><expr><name>target</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>end_revision_unspecified</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>peg_revision</name>.<name>kind</name></name> != <name>svn_opt_revision_unspecified</name></expr>)</condition><then>
<expr_stmt><expr><name><name>opt_state</name>-&gt;<name>end_revision</name></name> = <name>peg_revision</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>svn_path_is_url</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>opt_state</name>-&gt;<name>end_revision</name>.<name>kind</name></name> = <name>svn_opt_revision_head</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>opt_state</name>-&gt;<name>end_revision</name>.<name>kind</name></name> = <name>svn_opt_revision_base</name></expr>;</expr_stmt></else></if></else></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>xml</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>outpath</name> <init>= <expr><name>truepath</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>! <call><name>svn_path_is_url</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>outpath</name> = <call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>truepath</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>svn_xml_make_open_tag</name><argument_list>(<argument><expr>&amp;<name><name>bl</name>.<name>sbuf</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>svn_xml_normal</name></expr></argument>, <argument><expr>"target"</expr></argument>,
<argument><expr>"path"</expr></argument>, <argument><expr><name>outpath</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>receiver</name> = <name>blame_receiver_xml</name></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name>receiver</name> = <name>blame_receiver</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>err</name> = <call><name>svn_client_blame4</name><argument_list>(<argument><expr><name>truepath</name></expr></argument>,
<argument><expr>&amp;<name>peg_revision</name></expr></argument>,
<argument><expr>&amp;<name><name>opt_state</name>-&gt;<name>start_revision</name></name></expr></argument>,
<argument><expr>&amp;<name><name>opt_state</name>-&gt;<name>end_revision</name></name></expr></argument>,
<argument><expr><name>diff_options</name></expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>force</name></name></expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>use_merge_history</name></name></expr></argument>,
<argument><expr><name>receiver</name></expr></argument>,
<argument><expr>&amp;<name>bl</name></expr></argument>,
<argument><expr><name>ctx</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_CLIENT_IS_BINARY_FILE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Skipping binary file: '%s'\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></else></if>
}</block></then> <else>else <if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>xml</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_xml_make_close_tag</name><argument_list>(<argument><expr>&amp;(<name><name>bl</name>.<name>sbuf</name></name>)</expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"target"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__error_checked_fputs</name><argument_list>(<argument><expr><name><name>bl</name>.<name>sbuf</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>xml</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_stringbuf_setempty</name><argument_list>(<argument><expr><name><name>bl</name>.<name>sbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>xml</name></name> &amp;&amp; ! <name><name>opt_state</name>-&gt;<name>incremental</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__xml_print_footer</name><argument_list>(<argument><expr>"blame"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
