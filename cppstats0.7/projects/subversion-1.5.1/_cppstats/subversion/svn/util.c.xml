<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/svn/util.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_env.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_file_info.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_tables.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_general.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_ctype.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_cmdline.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_utf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_subst.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_xml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cl.h"</cpp:file></cpp:include>
<function><type><name>svn_error_t</name> *</type>
<name>svn_cl__print_commit_info</name><parameter_list>(<param><decl><type><name>svn_commit_info_t</name> *</type><name>commit_info</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name><name>commit_info</name>-&gt;<name>revision</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"\nCommitted revision %ld.\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>commit_info</name>-&gt;<name>revision</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>commit_info</name>-&gt;<name>post_commit_err</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"\nWarning: %s\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>commit_info</name>-&gt;<name>post_commit_err</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>find_editor_binary</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>editor</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>editor_cmd</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>config</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>svn_config_t</name> *</type><name>cfg</name></decl>;</decl_stmt>
<expr_stmt><expr><name>e</name> = <name>editor_cmd</name></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>e</name></expr>)</condition><then>
<expr_stmt><expr><name>e</name> = <call><name>getenv</name><argument_list>(<argument><expr>"SVN_EDITOR"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>! <name>e</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>cfg</name> = <name>config</name> ? <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>SVN_CONFIG_CATEGORY_CONFIG</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_config_get</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr>&amp;<name>e</name></expr></argument>, <argument><expr><name>SVN_CONFIG_SECTION_HELPERS</name></expr></argument>,
<argument><expr><name>SVN_CONFIG_OPTION_EDITOR_CMD</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>! <name>e</name></expr>)</condition><then>
<expr_stmt><expr><name>e</name> = <call><name>getenv</name><argument_list>(<argument><expr>"VISUAL"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>! <name>e</name></expr>)</condition><then>
<expr_stmt><expr><name>e</name> = <call><name>getenv</name><argument_list>(<argument><expr>"EDITOR"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SVN_CLIENT_EDITOR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr>! <name>e</name></expr>)</condition><then>
<expr_stmt><expr><name>e</name> = <name>SVN_CLIENT_EDITOR</name></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>e</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>c</name></decl>;</decl_stmt>
<for>for (<init><expr><name>c</name> = <name>e</name></expr>;</init> <condition><expr>*<name>c</name></expr>;</condition> <incr><expr><name>c</name>++</expr></incr>)
<if>if <condition>(<expr>!<call><name>svn_ctype_isspace</name><argument_list>(<argument><expr>*<name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<break>break;</break></then></if></for>
<if>if <condition>(<expr>! *<name>c</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>SVN_ERR_CL_NO_EXTERNAL_EDITOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"The EDITOR, SVN_EDITOR or VISUAL environment variable or "
"'editor-cmd' run-time configuration option is empty or "
"consists solely of whitespace. Expected a shell command."</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></then> <else>else
<return>return <expr><call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>SVN_ERR_CL_NO_EXTERNAL_EDITOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"None of the environment variables SVN_EDITOR, VISUAL or EDITOR are "
"set, and no 'editor-cmd' run-time configuration option was found"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></else></if>
<expr_stmt><expr>*<name>editor</name> = <name>e</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_cl__edit_file_externally</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>editor_cmd</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>config</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>editor</name></decl>, *<decl><type ref="prev"/><name>cmd</name></decl>, *<decl><type ref="prev"/><name>base_dir</name></decl>, *<decl><type ref="prev"/><name>file_name</name></decl>, *<decl><type ref="prev"/><name>base_dir_apr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>old_cwd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sys_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>apr_err</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_path_split</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>&amp;<name>base_dir</name></expr></argument>, <argument><expr>&amp;<name>file_name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>find_editor_binary</name><argument_list>(<argument><expr>&amp;<name>editor</name></expr></argument>, <argument><expr><name>editor_cmd</name></expr></argument>, <argument><expr><name>config</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>apr_err</name> = <call><name>apr_filepath_get</name><argument_list>(<argument><expr>&amp;<name>old_cwd</name></expr></argument>, <argument><expr><name>APR_FILEPATH_NATIVE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>apr_err</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_wrap_apr</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Can't get working directory"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>base_dir</name><index>[<expr>0</expr>]</index></name> == '\0'</expr>)</condition><then>
<expr_stmt><expr><name>base_dir_apr</name> = "."</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_path_cstring_from_utf8</name><argument_list>(<argument><expr>&amp;<name>base_dir_apr</name></expr></argument>, <argument><expr><name>base_dir</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>apr_err</name> = <call><name>apr_filepath_set</name><argument_list>(<argument><expr><name>base_dir_apr</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>apr_err</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_wrap_apr</name>
<argument_list>(<argument><expr><name>apr_err</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Can't change working directory to '%s'"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>base_dir</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>cmd</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s %s"</expr></argument>, <argument><expr><name>editor</name></expr></argument>, <argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sys_err</name> = <call><name>system</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>apr_err</name> = <call><name>apr_filepath_set</name><argument_list>(<argument><expr><name>old_cwd</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>apr_err</name></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_handle_error2</name><argument_list>(<argument><expr><call><name>svn_error_wrap_apr</name>
<argument_list>(<argument><expr><name>apr_err</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Can't restore working directory"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument> , <argument><expr>"svn: "</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>sys_err</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_EXTERNAL_PROGRAM</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"system('%s') returned %d"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>sys_err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_cl__merge_file_externally</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>their_path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>my_path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>merged_path</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>config</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>merge_tool</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>apr_env_get</name><argument_list>(<argument><expr>&amp;<name>merge_tool</name></expr></argument>, <argument><expr>"SVN_MERGE"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type>struct <name>svn_config_t</name> *</type><name>cfg</name></decl>;</decl_stmt>
<expr_stmt><expr><name>merge_tool</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cfg</name> = <name>config</name> ? <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>SVN_CONFIG_CATEGORY_CONFIG</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_config_get</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr>(const <name>char</name> **)&amp;<name>merge_tool</name></expr></argument>,
<argument><expr><name>SVN_CONFIG_SECTION_HELPERS</name></expr></argument>,
<argument><expr><name>SVN_CONFIG_OPTION_MERGE_TOOL_CMD</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>merge_tool</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>c</name></decl>;</decl_stmt>
<for>for (<init><expr><name>c</name> = <name>merge_tool</name></expr>;</init> <condition><expr>*<name>c</name></expr>;</condition> <incr><expr><name>c</name>++</expr></incr>)
<if>if <condition>(<expr>!<call><name>svn_ctype_isspace</name><argument_list>(<argument><expr>*<name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<break>break;</break></then></if></for>
<if>if <condition>(<expr>! *<name>c</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>SVN_ERR_CL_NO_EXTERNAL_MERGE_TOOL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"The SVN_MERGE environment variable is empty or "
"consists solely of whitespace. Expected a shell command.\n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></then> <else>else
<return>return <expr><call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>SVN_ERR_CL_NO_EXTERNAL_MERGE_TOOL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"The environment variable SVN_MERGE and the merge-tool-cmd run-time "
"configuration option were not set.\n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></else></if>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name><name>arguments</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>merge_tool</name></expr>, <expr><name>base_path</name></expr>, <expr><name>their_path</name></expr>,
<expr><name>my_path</name></expr>, <expr><name>merged_path</name></expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>cwd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><call><name>apr_filepath_get</name><argument_list>(<argument><expr>&amp;<name>cwd</name></expr></argument>, <argument><expr><name>APR_FILEPATH_NATIVE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>status</name> != 0</expr>)</condition><then>
<return>return <expr><call><name>svn_error_wrap_apr</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><call><name>svn_io_run_cmd</name><argument_list>(<argument><expr><call><name>svn_path_internal_style</name><argument_list>(<argument><expr><name>cwd</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>merge_tool</name></expr></argument>,
<argument><expr><name>arguments</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_cl__edit_string_externally</name><parameter_list>(<param><decl><type><name>svn_string_t</name> **</type><name>edited_contents</name></decl></param> ,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>tmpfile_left</name></decl></param> ,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>editor_cmd</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_dir</name></decl></param> ,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>contents</name></decl></param> ,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prefix</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>config</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>as_text</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>encoding</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>editor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>tmp_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmpfile_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmpfile_native</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmpfile_apr</name></decl>, *<decl><type ref="prev"/><name>base_dir_apr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>translated_contents</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>apr_err</name></decl>, <decl><type ref="prev"/><name>apr_err2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>written</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>finfo_before</name></decl>, <decl><type ref="prev"/><name>finfo_after</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init>, *<name>err2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>old_cwd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sys_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>remove_file</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>find_editor_binary</name><argument_list>(<argument><expr>&amp;<name>editor</name></expr></argument>, <argument><expr><name>editor_cmd</name></expr></argument>, <argument><expr><name>config</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>as_text</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>translated</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_subst_translate_cstring2</name><argument_list>(<argument><expr><name><name>contents</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr>&amp;<name>translated</name></expr></argument>,
<argument><expr><name>APR_EOL_STR</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>translated_contents</name> = <call><name>svn_string_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>encoding</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_utf_cstring_from_utf8_ex2</name><argument_list>(<argument><expr>&amp;<name><name>translated_contents</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr><name>translated</name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_utf_cstring_from_utf8</name><argument_list>(<argument><expr>&amp;<name><name>translated_contents</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr><name>translated</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name><name>translated_contents</name>-&gt;<name>len</name></name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>translated_contents</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name>translated_contents</name> = <call><name>svn_string_dup</name><argument_list>(<argument><expr><name>contents</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>apr_err</name> = <call><name>apr_filepath_get</name><argument_list>(<argument><expr>&amp;<name>old_cwd</name></expr></argument>, <argument><expr><name>APR_FILEPATH_NATIVE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>apr_err</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_wrap_apr</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Can't get working directory"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>base_dir</name><index>[<expr>0</expr>]</index></name> == '\0'</expr>)</condition><then>
<expr_stmt><expr><name>base_dir_apr</name> = "."</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_path_cstring_from_utf8</name><argument_list>(<argument><expr>&amp;<name>base_dir_apr</name></expr></argument>, <argument><expr><name>base_dir</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>apr_err</name> = <call><name>apr_filepath_set</name><argument_list>(<argument><expr><name>base_dir_apr</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>apr_err</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_wrap_apr</name>
<argument_list>(<argument><expr><name>apr_err</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Can't change working directory to '%s'"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>base_dir</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>err</name> = <call><name>svn_io_open_unique_file2</name><argument_list>(<argument><expr>&amp;<name>tmp_file</name></expr></argument>, <argument><expr>&amp;<name>tmpfile_name</name></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>, <argument><expr>".tmp"</expr></argument>, <argument><expr><name>svn_io_file_del_none</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> &amp;&amp; (<call><name>APR_STATUS_IS_EACCES</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>apr_err</name></name></expr></argument>)</argument_list></call> || <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>EROFS</name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>temp_dir_apr</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_temp_dir</name><argument_list>(<argument><expr>&amp;<name>base_dir</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_path_cstring_from_utf8</name><argument_list>(<argument><expr>&amp;<name>temp_dir_apr</name></expr></argument>, <argument><expr><name>base_dir</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>apr_err</name> = <call><name>apr_filepath_set</name><argument_list>(<argument><expr><name>temp_dir_apr</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>apr_err</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_wrap_apr</name>
<argument_list>(<argument><expr><name>apr_err</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Can't change working directory to '%s'"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>base_dir</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>err</name> = <call><name>svn_io_open_unique_file2</name><argument_list>(<argument><expr>&amp;<name>tmp_file</name></expr></argument>, <argument><expr>&amp;<name>tmpfile_name</name></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>, <argument><expr>".tmp"</expr></argument>,
<argument><expr><name>svn_io_file_del_none</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<goto>goto <name>cleanup2</name>;</goto></then></if>
<expr_stmt><expr><name>apr_err</name> = <call><name>apr_file_write_full</name><argument_list>(<argument><expr><name>tmp_file</name></expr></argument>, <argument><expr><name><name>translated_contents</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr><name><name>translated_contents</name>-&gt;<name>len</name></name></expr></argument>, <argument><expr>&amp;<name>written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>apr_err2</name> = <call><name>apr_file_close</name><argument_list>(<argument><expr><name>tmp_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>apr_err</name></expr>)</condition><then>
<expr_stmt><expr><name>apr_err</name> = <name>apr_err2</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>apr_err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>svn_error_wrap_apr</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Can't write to '%s'"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>tmpfile_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>err</name> = <call><name>svn_path_cstring_from_utf8</name><argument_list>(<argument><expr>&amp;<name>tmpfile_apr</name></expr></argument>, <argument><expr><name>tmpfile_name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<goto>goto <name>cleanup</name>;</goto></then></if>
<expr_stmt><expr><name>apr_err</name> = <call><name>apr_stat</name><argument_list>(<argument><expr>&amp;<name>finfo_before</name></expr></argument>, <argument><expr><name>tmpfile_apr</name></expr></argument>,
<argument><expr><name>APR_FINFO_MTIME</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>apr_err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>svn_error_wrap_apr</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Can't stat '%s'"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tmpfile_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
}</block></then></if>
<expr_stmt><expr><call><name>apr_file_mtime_set</name><argument_list>(<argument><expr><name>tmpfile_apr</name></expr></argument>, <argument><expr><name><name>finfo_before</name>.<name>mtime</name></name> - 2000</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>apr_err</name> = <call><name>apr_stat</name><argument_list>(<argument><expr>&amp;<name>finfo_before</name></expr></argument>, <argument><expr><name>tmpfile_apr</name></expr></argument>,
<argument><expr><name>APR_FINFO_MTIME</name> | <name>APR_FINFO_SIZE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>apr_err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>svn_error_wrap_apr</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Can't stat '%s'"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tmpfile_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>err</name> = <call><name>svn_utf_cstring_from_utf8</name><argument_list>(<argument><expr>&amp;<name>tmpfile_native</name></expr></argument>, <argument><expr><name>tmpfile_name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<goto>goto <name>cleanup</name>;</goto></then></if>
<expr_stmt><expr><name>cmd</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s %s"</expr></argument>, <argument><expr><name>editor</name></expr></argument>, <argument><expr><name>tmpfile_native</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sys_err</name> = <call><name>system</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>sys_err</name> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_EXTERNAL_PROGRAM</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"system('%s') returned %d"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>sys_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>apr_err</name> = <call><name>apr_stat</name><argument_list>(<argument><expr>&amp;<name>finfo_after</name></expr></argument>, <argument><expr><name>tmpfile_apr</name></expr></argument>,
<argument><expr><name>APR_FINFO_MTIME</name> | <name>APR_FINFO_SIZE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>apr_err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>svn_error_wrap_apr</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Can't stat '%s'"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tmpfile_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
}</block></then></if>
<if>if <condition>(<expr><name>tmpfile_left</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>tmpfile_left</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>base_dir</name></expr></argument>, <argument><expr><name>tmpfile_name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>remove_file</name> = <name>FALSE</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name><name>finfo_before</name>.<name>mtime</name></name> != <name><name>finfo_after</name>.<name>mtime</name></name>) ||
(<name><name>finfo_before</name>.<name>size</name></name> != <name><name>finfo_after</name>.<name>size</name></name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>edited_contents_s</name></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_stringbuf_from_file</name><argument_list>(<argument><expr>&amp;<name>edited_contents_s</name></expr></argument>, <argument><expr><name>tmpfile_name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<goto>goto <name>cleanup</name>;</goto></then></if>
<expr_stmt><expr>*<name>edited_contents</name> = <call><name>svn_string_create_from_buf</name><argument_list>(<argument><expr><name>edited_contents_s</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>as_text</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>svn_subst_translate_string</name><argument_list>(<argument><expr><name>edited_contents</name></expr></argument>, <argument><expr>*<name>edited_contents</name></expr></argument>,
<argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>svn_error_quick_wrap</name>
<argument_list>(<argument><expr><name>err</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Error normalizing edited contents to internal format"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
}</block></then></if>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>edited_contents</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></else></if>
<label><name>cleanup</name>:</label>
<if>if <condition>(<expr><name>remove_file</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err2</name> = <call><name>svn_io_remove_file</name><argument_list>(<argument><expr><name>tmpfile_name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>err</name> &amp;&amp; <name>err2</name></expr>)</condition><then>
<expr_stmt><expr><name>err</name> = <name>err2</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></then></if>
<label><name>cleanup2</name>:</label>
<expr_stmt><expr><name>apr_err</name> = <call><name>apr_filepath_set</name><argument_list>(<argument><expr><name>old_cwd</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>apr_err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_handle_error2</name><argument_list>(<argument><expr><call><name>svn_error_wrap_apr</name>
<argument_list>(<argument><expr><name>apr_err</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Can't restore working directory"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument> , <argument><expr>"svn: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<struct>struct <name>log_msg_baton</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>editor_cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>message</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>message_encoding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmpfile_left</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>non_interactive</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>config</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>keep_locks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><name>svn_error_t</name> *</type>
<name>svn_cl__make_log_msg_baton</name><parameter_list>(<param><decl><type><name>void</name> **</type><name>baton</name></decl></param>,
<param><decl><type><name>svn_cl__opt_state_t</name> *</type><name>opt_state</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_dir</name></decl></param> ,
<param><decl><type><name>apr_hash_t</name> *</type><name>config</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>log_msg_baton</name> *</type><name>lmb</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>lmb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>filedata</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>opt_state</name>-&gt;<name>filedata</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call> &lt; <name><name>opt_state</name>-&gt;<name>filedata</name>-&gt;<name>len</name></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CL_BAD_LOG_MESSAGE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Log message contains a zero byte"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>lmb</name>-&gt;<name>message</name></name> = <name><name>opt_state</name>-&gt;<name>filedata</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>lmb</name>-&gt;<name>message</name></name> = <name><name>opt_state</name>-&gt;<name>message</name></name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>lmb</name>-&gt;<name>editor_cmd</name></name> = <name><name>opt_state</name>-&gt;<name>editor_cmd</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>encoding</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>lmb</name>-&gt;<name>message_encoding</name></name> = <name><name>opt_state</name>-&gt;<name>encoding</name></name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>config</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_config_t</name> *</type><name>cfg</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>SVN_CONFIG_CATEGORY_CONFIG</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_config_get</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr>&amp;(<name><name>lmb</name>-&gt;<name>message_encoding</name></name>)</expr></argument>,
<argument><expr><name>SVN_CONFIG_SECTION_MISCELLANY</name></expr></argument>,
<argument><expr><name>SVN_CONFIG_OPTION_LOG_ENCODING</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<expr_stmt><expr><name><name>lmb</name>-&gt;<name>base_dir</name></name> = <name>base_dir</name> ? <name>base_dir</name> : ""</expr>;</expr_stmt>
<expr_stmt><expr><name><name>lmb</name>-&gt;<name>tmpfile_left</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lmb</name>-&gt;<name>config</name></name> = <name>config</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lmb</name>-&gt;<name>keep_locks</name></name> = <name><name>opt_state</name>-&gt;<name>no_unlock</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lmb</name>-&gt;<name>non_interactive</name></name> = <name><name>opt_state</name>-&gt;<name>non_interactive</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lmb</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>baton</name> = <name>lmb</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_cl__cleanup_log_msg</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>log_msg_baton</name></decl></param>,
<param><decl><type><name>svn_error_t</name> *</type><name>commit_err</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>log_msg_baton</name> *</type><name>lmb</name> <init>= <expr><name>log_msg_baton</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(! <name>lmb</name>) || (! <name><name>lmb</name>-&gt;<name>tmpfile_left</name></name>)</expr>)</condition><then>
<return>return <expr><name>commit_err</name></expr>;</return></then></if>
<if>if <condition>(<expr>! <name>commit_err</name></expr>)</condition><then>
<return>return <expr><call><name>svn_io_remove_file</name><argument_list>(<argument><expr><name><name>lmb</name>-&gt;<name>tmpfile_left</name></name></expr></argument>, <argument><expr><name><name>lmb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>svn_error_compose</name>
<argument_list>(<argument><expr><name>commit_err</name></expr></argument>,
<argument><expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name><name>commit_err</name>-&gt;<name>apr_err</name></name></expr></argument>,
<argument><expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name><name>commit_err</name>-&gt;<name>apr_err</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>" '%s'"</expr></argument>, <argument><expr><name><name>lmb</name>-&gt;<name>tmpfile_left</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Your commit message was left in "
"a temporary file:"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>commit_err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>truncate_buffer_at_prefix</name><parameter_list>(<param><decl><type><name>apr_size_t</name> *</type><name>new_len</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>buffer</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prefix</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>substring</name> <init>= <expr><name>buffer</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>buffer</name> &amp;&amp; <name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>new_len</name></expr>)</condition><then>
<expr_stmt><expr>*<name>new_len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<while>while <condition>(<expr>1</expr>)</condition> <block>{
<expr_stmt><expr><name>substring</name> = <call><name>strstr</name><argument_list>(<argument><expr><name>substring</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>substring</name></expr>)</condition><then>
<return>return;</return></then></if>
<if>if <condition>(<expr>(<name>substring</name> == <name>buffer</name>)
|| (*(<name>substring</name> - 1) == '\r')
|| (*(<name>substring</name> - 1) == '\n')</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>substring</name> = '\0'</expr>;</expr_stmt>
<if>if <condition>(<expr><name>new_len</name></expr>)</condition><then>
<expr_stmt><expr>*<name>new_len</name> = <name>substring</name> - <name>buffer</name></expr>;</expr_stmt></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name>substring</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>substring</name>++</expr>;</expr_stmt>
}</block></then></if></else></if>
}</block></while>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EDITOR_EOF_PREFIX</name></cpp:macro> <cpp:value>_("--This line, and those below, will be ignored--")</cpp:value></cpp:define>
<function><type><name>svn_error_t</name> *</type>
<name>svn_cl__get_log_message</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>log_msg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>tmp_file</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>commit_items</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>default_msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>log_msg_baton</name> *</type><name>lmb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>message</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>default_msg</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr><name>APR_EOL_STR</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>default_msg</name></expr></argument>, <argument><expr><name>EDITOR_EOF_PREFIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>svn_stringbuf_appendcstr</name><argument_list>(<argument>default_msg</argument>, <argument>APR_EOL_STR APR_EOL_STR</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr>*<name>tmp_file</name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>lmb</name>-&gt;<name>message</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>log_msg_string</name> <init>= <expr><call><name>svn_string_create</name><argument_list>(<argument><expr><name><name>lmb</name>-&gt;<name>message</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR_W</name><argument_list>(<argument><expr><call><name>svn_subst_translate_string</name><argument_list>(<argument><expr>&amp;<name>log_msg_string</name></expr></argument>, <argument><expr><name>log_msg_string</name></expr></argument>,
<argument><expr><name><name>lmb</name>-&gt;<name>message_encoding</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Error normalizing log message to internal format"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>log_msg</name> = <name><name>log_msg_string</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>truncate_buffer_at_prefix</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>(<name>char</name>*)*<name>log_msg</name></expr></argument>, <argument><expr><name>EDITOR_EOF_PREFIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AS400</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else
<return>return <expr><call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>SVN_ERR_CL_NO_EXTERNAL_EDITOR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Use of an external editor to fetch log message is not supported "
"on OS400; consider using the --message (-m) or --file (-F) "
"options"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>! <name><name>commit_items</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>log_msg</name> = ""</expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<while>while <condition>(<expr>! <name>message</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>tmp_message</name> <init>= <expr><call><name>svn_stringbuf_dup</name><argument_list>(<argument><expr><name>default_msg</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>msg_string</name> <init>= <expr><call><name>svn_string_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>commit_items</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_client_commit_item3_t</name> *</type><name>item</name>
<init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>commit_items</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_client_commit_item3_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name> <init>= <expr><name><name>item</name>-&gt;<name>path</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>text_mod</name> <init>= <expr>'_'</expr></init>, <name>prop_mod</name> <init>= <expr>' '</expr></init>, <name>unlock</name> <init>= <expr>' '</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>! <name>path</name></expr>)</condition><then>
<expr_stmt><expr><name>path</name> = <name><name>item</name>-&gt;<name>url</name></name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>! *<name>path</name></expr>)</condition><then>
<expr_stmt><expr><name>path</name> = "."</expr>;</expr_stmt></then></if></else></if>
<if>if <condition>(<expr><name>path</name> &amp;&amp; <name><name>lmb</name>-&gt;<name>base_dir</name></name></expr>)</condition><then>
<expr_stmt><expr><name>path</name> = <call><name>svn_path_is_child</name><argument_list>(<argument><expr><name><name>lmb</name>-&gt;<name>base_dir</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>! <name>path</name></expr>)</condition><then>
<expr_stmt><expr><name>path</name> = "."</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>(<name><name>item</name>-&gt;<name>state_flags</name></name> &amp; <name>SVN_CLIENT_COMMIT_ITEM_DELETE</name>)
&amp;&amp; (<name><name>item</name>-&gt;<name>state_flags</name></name> &amp; <name>SVN_CLIENT_COMMIT_ITEM_ADD</name>)</expr>)</condition><then>
<expr_stmt><expr><name>text_mod</name> = 'R'</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>item</name>-&gt;<name>state_flags</name></name> &amp; <name>SVN_CLIENT_COMMIT_ITEM_ADD</name></expr>)</condition><then>
<expr_stmt><expr><name>text_mod</name> = 'A'</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>item</name>-&gt;<name>state_flags</name></name> &amp; <name>SVN_CLIENT_COMMIT_ITEM_DELETE</name></expr>)</condition><then>
<expr_stmt><expr><name>text_mod</name> = 'D'</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>item</name>-&gt;<name>state_flags</name></name> &amp; <name>SVN_CLIENT_COMMIT_ITEM_TEXT_MODS</name></expr>)</condition><then>
<expr_stmt><expr><name>text_mod</name> = 'M'</expr>;</expr_stmt></then></if></else></if></else></if></else></if>
<if>if <condition>(<expr><name><name>item</name>-&gt;<name>state_flags</name></name> &amp; <name>SVN_CLIENT_COMMIT_ITEM_PROP_MODS</name></expr>)</condition><then>
<expr_stmt><expr><name>prop_mod</name> = 'M'</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>! <name><name>lmb</name>-&gt;<name>keep_locks</name></name>
&amp;&amp; <name><name>item</name>-&gt;<name>state_flags</name></name> &amp; <name>SVN_CLIENT_COMMIT_ITEM_LOCK_TOKEN</name></expr>)</condition><then>
<expr_stmt><expr><name>unlock</name> = 'U'</expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name>tmp_message</name></expr></argument>, <argument><expr>&amp;<name>text_mod</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name>tmp_message</name></expr></argument>, <argument><expr>&amp;<name>prop_mod</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name>tmp_message</name></expr></argument>, <argument><expr>&amp;<name>unlock</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>item</name>-&gt;<name>state_flags</name></name> &amp; <name>SVN_CLIENT_COMMIT_ITEM_IS_COPY</name></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>tmp_message</name></expr></argument>, <argument><expr>"+ "</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>tmp_message</name></expr></argument>, <argument><expr>" "</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>tmp_message</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>tmp_message</name></expr></argument>, <argument><expr><name>APR_EOL_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name><name>msg_string</name>-&gt;<name>data</name></name> = <name><name>tmp_message</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>msg_string</name>-&gt;<name>len</name></name> = <name><name>tmp_message</name>-&gt;<name>len</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name><name>lmb</name>-&gt;<name>non_interactive</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>svn_cl__edit_string_externally</name><argument_list>(<argument><expr>&amp;<name>msg_string</name></expr></argument>, <argument><expr>&amp;<name><name>lmb</name>-&gt;<name>tmpfile_left</name></name></expr></argument>,
<argument><expr><name><name>lmb</name>-&gt;<name>editor_cmd</name></name></expr></argument>, <argument><expr><name><name>lmb</name>-&gt;<name>base_dir</name></name></expr></argument>,
<argument><expr><name>msg_string</name></expr></argument>, <argument><expr>"svn-commit"</expr></argument>,
<argument><expr><name><name>lmb</name>-&gt;<name>config</name></name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
<argument><expr><name><name>lmb</name>-&gt;<name>message_encoding</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr><call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>SVN_ERR_CL_INSUFFICIENT_ARGS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Cannot invoke editor to get log message "
"when non-interactive"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
<expr_stmt><expr>*<name>tmp_file</name> = <name><name>lmb</name>-&gt;<name>tmpfile_left</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>lmb</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>lmb</name>-&gt;<name>tmpfile_left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_CL_NO_EXTERNAL_EDITOR</name></expr>)</condition><then>
<expr_stmt><expr><name>err</name> = <call><name>svn_error_quick_wrap</name>
<argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Could not use external editor to fetch log message; "
"consider setting the $SVN_EDITOR environment variable "
"or using the --message (-m) or --file (-F) options"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>msg_string</name></expr>)</condition><then>
<expr_stmt><expr><name>message</name> = <call><name>svn_stringbuf_create_from_string</name><argument_list>(<argument><expr><name>msg_string</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>message</name></expr>)</condition><then>
<expr_stmt><expr><call><name>truncate_buffer_at_prefix</name><argument_list>(<argument><expr>&amp;<name><name>message</name>-&gt;<name>len</name></name></expr></argument>, <argument><expr><name><name>message</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr><name>EDITOR_EOF_PREFIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>message</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<for>for (<init><expr><name>len</name> = <name><name>message</name>-&gt;<name>len</name></name> - 1</expr>;</init> <condition><expr><name>len</name> &gt;= 0</expr>;</condition> <incr><expr><name>len</name>--</expr></incr>) <block>{
<if>if <condition>(<expr>! <call><name>apr_isspace</name><argument_list>(<argument><expr><name><name>message</name>-&gt;<name>data</name><index>[<expr><name>len</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<break>break;</break></then></if>
}</block></for>
<if>if <condition>(<expr><name>len</name> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><name>message</name> = <name>NULL</name></expr>;</expr_stmt></then></if>
}</block></then></if>
<if>if <condition>(<expr>! <name>message</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>reply</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_prompt_user</name>
<argument_list>(<argument><expr>&amp;<name>reply</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"\nLog message unchanged or not specified\n"
"(a)bort, (c)ontinue, (e)dit :\n"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>reply</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name></type> <name>letter</name> <init>= <expr><call><name>apr_tolower</name><argument_list>(<argument><expr><name><name>reply</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>'a' == <name>letter</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_remove_file</name><argument_list>(<argument><expr><name><name>lmb</name>-&gt;<name>tmpfile_left</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>tmp_file</name> = <name><name>lmb</name>-&gt;<name>tmpfile_left</name></name> = <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr>'c' == <name>letter</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_remove_file</name><argument_list>(<argument><expr><name><name>lmb</name>-&gt;<name>tmpfile_left</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>tmp_file</name> = <name><name>lmb</name>-&gt;<name>tmpfile_left</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>message</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></then></if>
}</block></while>
<expr_stmt><expr>*<name>log_msg</name> = <name>message</name> ? <name><name>message</name>-&gt;<name>data</name></name> : <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_cl__may_need_force</name><parameter_list>(<param><decl><type><name>svn_error_t</name> *</type><name>err</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>err</name>
&amp;&amp; (<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_UNVERSIONED_RESOURCE</name> ||
<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_CLIENT_MODIFIED</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>svn_error_quick_wrap</name>
<argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Use --force to override this restriction"</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_cl__error_checked_fputs</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>string</name></decl></param>, <param><decl><type><name>FILE</name>*</type> <name>stream</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name>errno</name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>fputs</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call> == <name>EOF</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>errno</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_wrap_apr</name><argument_list>(<argument><expr><name>errno</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Write error"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_IO_WRITE_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_cl__try</name><parameter_list>(<param><decl><type><name>svn_error_t</name> *</type><name>err</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name> *</type><name>success</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>quiet</name></decl></param>,
<param><decl><type>...</type></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>apr_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>success</name></expr>)</condition><then>
<expr_stmt><expr>*<name>success</name> = <name>FALSE</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>quiet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>(<name>apr_err</name> = <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>apr_status_t</name></expr></argument>)</argument_list></call>) != <name>SVN_NO_ERROR</name></expr>)</condition> <block>{
<if>if <condition>(<expr><name><name>err</name>-&gt;<name>apr_err</name></name> == <name>apr_err</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>! <name>quiet</name></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_handle_warning</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
}</block></while>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>success</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>success</name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then></if></else></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>svn_cl__xml_tagged_cdata</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> **</type><name>sb</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tagname</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>string</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>string</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_xml_make_open_tag</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>svn_xml_protect_pcdata</name></expr></argument>,
<argument><expr><name>tagname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_xml_escape_cdata_cstring</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_xml_make_close_tag</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>tagname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><name>void</name></type>
<name>svn_cl__print_xml_commit</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> **</type><name>sb</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>author</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>date</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>svn_xml_make_open_tag</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>svn_xml_normal</name></expr></argument>, <argument><expr>"commit"</expr></argument>,
<argument><expr>"revision"</expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%ld"</expr></argument>, <argument><expr><name>revision</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>author</name></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_cl__xml_tagged_cdata</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"author"</expr></argument>, <argument><expr><name>author</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>date</name></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_cl__xml_tagged_cdata</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"date"</expr></argument>, <argument><expr><name>date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>svn_xml_make_close_tag</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"commit"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_cl__xml_print_header</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tagname</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>sb</name> <init>= <expr><call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_xml_make_header</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_xml_make_open_tag</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>svn_xml_normal</name></expr></argument>, <argument><expr><name>tagname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_cl__error_checked_fputs</name><argument_list>(<argument><expr><name><name>sb</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_cl__xml_print_footer</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tagname</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>sb</name> <init>= <expr><call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_xml_make_close_tag</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>tagname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_cl__error_checked_fputs</name><argument_list>(<argument><expr><name><name>sb</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_cl__node_kind_str</name><parameter_list>(<param><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl></param>)</parameter_list> <block>{
<switch>switch <condition>(<expr><name>kind</name></expr>)</condition> <block>{
<case>case <expr><name>svn_node_dir</name></expr>:
<return>return <expr>"dir"</expr>;</return>
</case><case>case <expr><name>svn_node_file</name></expr>:
<return>return <expr>"file"</expr>;</return>
</case><default>default:
<return>return <expr>""</expr>;</return>
</default>}</block></switch>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_cl__args_to_target_array_print_reserved</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>targets</name></decl></param>,
<param><decl><type><name>apr_getopt_t</name> *</type><name>os</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>known_targets</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>error</name> <init>= <expr><call><name>svn_opt_args_to_target_array3</name><argument_list>(<argument><expr><name>targets</name></expr></argument>, <argument><expr><name>os</name></expr></argument>,
<argument><expr><name>known_targets</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>error</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>error</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_RESERVED_FILENAME_SPECIFIED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_handle_error2</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr>"svn: Skipping argument: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<return>return <expr><name>error</name></expr>;</return></else></if>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>changelist_receiver</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>changelist</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>paths</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>paths</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>paths</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_cl__changelist_paths</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>paths</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>changelists</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>targets</name></decl></param>,
<param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
<param><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>found</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>paths_hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr>! (<name>changelists</name> &amp;&amp; <name><name>changelists</name>-&gt;<name>nelts</name></name>)</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>paths</name> = (<name>apr_array_header_t</name> *)<name>targets</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>found</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>targets</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>targets</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client_get_changelists</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>changelists</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>,
<argument><expr><name>changelist_receiver</name></expr></argument>, <argument><expr>(<name>void</name> *)<name>found</name></expr></argument>,
<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_hash_from_cstring_keys</name><argument_list>(<argument><expr>&amp;<name>paths_hash</name></expr></argument>, <argument><expr><name>found</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_hash_keys</name><argument_list>(<argument><expr><name>paths</name></expr></argument>, <argument><expr><name>paths_hash</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_cl__show_revs_t</name></type>
<name>svn_cl__show_revs_from_word</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>word</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><name>SVN_CL__SHOW_REVS_MERGED</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>svn_cl__show_revs_merged</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><name>SVN_CL__SHOW_REVS_ELIGIBLE</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>svn_cl__show_revs_eligible</name></expr>;</return></then></if>
<return>return <expr><name>svn_cl__show_revs_invalid</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_cl__time_cstring_to_human_cstring</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>human_cstring</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>when</name></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_time_from_cstring</name><argument_list>(<argument><expr>&amp;<name>when</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> &amp;&amp; <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_BAD_DATE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>human_cstring</name> = <call><name>_</name><argument_list>(<argument><expr>"(invalid date)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then></if></else></if>
<expr_stmt><expr>*<name>human_cstring</name> = <call><name>svn_time_to_human_cstring</name><argument_list>(<argument><expr><name>when</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
