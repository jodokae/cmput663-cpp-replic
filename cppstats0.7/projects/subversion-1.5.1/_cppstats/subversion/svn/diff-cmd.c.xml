<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/svn/diff-cmd.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error_codes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_cmdline.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_xml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>char</name></type>
<name>kind_to_char</name><parameter_list>(<param><decl><type><name>svn_client_diff_summarize_kind_t</name></type> <name>kind</name></decl></param>)</parameter_list> <block>{
<switch>switch <condition>(<expr><name>kind</name></expr>)</condition> <block>{
<case>case <expr><name>svn_client_diff_summarize_kind_modified</name></expr>:
<return>return <expr>'M'</expr>;</return>
</case><case>case <expr><name>svn_client_diff_summarize_kind_added</name></expr>:
<return>return <expr>'A'</expr>;</return>
</case><case>case <expr><name>svn_client_diff_summarize_kind_deleted</name></expr>:
<return>return <expr>'D'</expr>;</return>
</case><default>default:
<return>return <expr>' '</expr>;</return>
</default>}</block></switch>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>kind_to_word</name><parameter_list>(<param><decl><type><name>svn_client_diff_summarize_kind_t</name></type> <name>kind</name></decl></param>)</parameter_list> <block>{
<switch>switch <condition>(<expr><name>kind</name></expr>)</condition> <block>{
<case>case <expr><name>svn_client_diff_summarize_kind_modified</name></expr>:
<return>return <expr>"modified"</expr>;</return>
</case><case>case <expr><name>svn_client_diff_summarize_kind_added</name></expr>:
<return>return <expr>"added"</expr>;</return>
</case><case>case <expr><name>svn_client_diff_summarize_kind_deleted</name></expr>:
<return>return <expr>"deleted"</expr>;</return>
</case><default>default:
<return>return <expr>"none"</expr>;</return>
</default>}</block></switch>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>summarize_xml</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_client_diff_summarize_t</name> *</type><name>summary</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>sb</name> <init>= <expr><call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>summary</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <call><name>svn_path_is_url</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>path</name> = <call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>svn_xml_make_open_tag</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>svn_xml_protect_pcdata</name></expr></argument>, <argument><expr>"path"</expr></argument>,
<argument><expr>"kind"</expr></argument>, <argument><expr><call><name>svn_cl__node_kind_str</name><argument_list>(<argument><expr><name><name>summary</name>-&gt;<name>node_kind</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"item"</expr></argument>, <argument><expr><call><name>kind_to_word</name><argument_list>(<argument><expr><name><name>summary</name>-&gt;<name>summarize_kind</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"props"</expr></argument>, <argument><expr><name><name>summary</name>-&gt;<name>prop_changed</name></name> ? "modified" : "none"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_xml_escape_cdata_cstring</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_xml_make_close_tag</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"path"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__error_checked_fputs</name><argument_list>(<argument><expr><name><name>sb</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>summarize_regular</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_client_diff_summarize_t</name> *</type><name>summary</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>summary</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <call><name>svn_path_is_url</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>path</name> = <call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr>"%c%c %s\n"</expr></argument>,
<argument><expr><call><name>kind_to_char</name><argument_list>(<argument><expr><name><name>summary</name>-&gt;<name>summarize_kind</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>summary</name>-&gt;<name>prop_changed</name></name> ? 'M' : ' '</expr></argument>,
<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_cl__diff</name><parameter_list>(<param><decl><type><name>apr_getopt_t</name> *</type><name>os</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_cl__opt_state_t</name> *</type><name>opt_state</name> <init>= <expr>((<name>svn_cl__cmd_baton_t</name> *) <name>baton</name>)-&gt;<name>opt_state</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>options</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>targets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>outfile</name></decl>, *<decl><type ref="prev"/><name>errfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>old_target</name></decl>, *<decl><type ref="prev"/><name>new_target</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iterpool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>pegged_diff</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_client_diff_summarize_func_t</name></type> <name>summarize_func</name> <init>=
<expr>(<name><name>opt_state</name>-&gt;<name>xml</name></name> ? <name>summarize_xml</name> : <name>summarize_regular</name>)</expr></init></decl>;</decl_stmt>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>optstr</name> <init>= <expr><name><name>opt_state</name>-&gt;<name>extensions</name></name> ? <name><name>opt_state</name>-&gt;<name>extensions</name></name> : ""</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>options</name> = <call><name>svn_cstring_split</name><argument_list>(<argument><expr><name>optstr</name></expr></argument>, <argument><expr>" \t\n\r"</expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<if>if <condition>(<expr>(<name>status</name> = <call><name>apr_file_open_stdout</name><argument_list>(<argument><expr>&amp;<name>outfile</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<return>return <expr><call><name>svn_error_wrap_apr</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Can't open stdout"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>(<name>status</name> = <call><name>apr_file_open_stderr</name><argument_list>(<argument><expr>&amp;<name>errfile</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<return>return <expr><call><name>svn_error_wrap_apr</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Can't open stderr"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>xml</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>sb</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>opt_state</name>-&gt;<name>summarize</name></name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CL_ARG_PARSING_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"'--xml' option only valid with "
"'--summarize' option"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__xml_print_header</name><argument_list>(<argument><expr>"diff"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sb</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_xml_make_open_tag</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>svn_xml_normal</name></expr></argument>, <argument><expr>"paths"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__error_checked_fputs</name><argument_list>(<argument><expr><name><name>sb</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__args_to_target_array_print_reserved</name><argument_list>(<argument><expr>&amp;<name>targets</name></expr></argument>, <argument><expr><name>os</name></expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>targets</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name><name>opt_state</name>-&gt;<name>old_target</name></name> &amp;&amp; ! <name><name>opt_state</name>-&gt;<name>new_target</name></name>
&amp;&amp; (<name><name>targets</name>-&gt;<name>nelts</name></name> == 2)
&amp;&amp; <call><name>svn_path_is_url</name><argument_list>(<argument><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>targets</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
&amp;&amp; <call><name>svn_path_is_url</name><argument_list>(<argument><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>targets</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
&amp;&amp; <name><name>opt_state</name>-&gt;<name>start_revision</name>.<name>kind</name></name> == <name>svn_opt_revision_unspecified</name>
&amp;&amp; <name><name>opt_state</name>-&gt;<name>end_revision</name>.<name>kind</name></name> == <name>svn_opt_revision_unspecified</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_opt_parse_path</name><argument_list>(<argument><expr>&amp;<name><name>opt_state</name>-&gt;<name>start_revision</name></name></expr></argument>, <argument><expr>&amp;<name>old_target</name></expr></argument>,
<argument><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>targets</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_opt_parse_path</name><argument_list>(<argument><expr>&amp;<name><name>opt_state</name>-&gt;<name>end_revision</name></name></expr></argument>, <argument><expr>&amp;<name>new_target</name></expr></argument>,
<argument><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>targets</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>targets</name>-&gt;<name>nelts</name></name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>start_revision</name>.<name>kind</name></name> == <name>svn_opt_revision_unspecified</name></expr>)</condition><then>
<expr_stmt><expr><name><name>opt_state</name>-&gt;<name>start_revision</name>.<name>kind</name></name> = <name>svn_opt_revision_head</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>end_revision</name>.<name>kind</name></name> == <name>svn_opt_revision_unspecified</name></expr>)</condition><then>
<expr_stmt><expr><name><name>opt_state</name>-&gt;<name>end_revision</name>.<name>kind</name></name> = <name>svn_opt_revision_head</name></expr>;</expr_stmt></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>old_target</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>tmp</name></decl>, *<decl><type ref="prev"/><name>tmp2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_opt_revision_t</name></type> <name>old_rev</name></decl>, <decl><type ref="prev"/><name>new_rev</name></decl>;</decl_stmt>
<expr_stmt><expr><name>tmp</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = (<name><name>opt_state</name>-&gt;<name>old_target</name></name>)</expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = (<name><name>opt_state</name>-&gt;<name>new_target</name></name>
? <name><name>opt_state</name>-&gt;<name>new_target</name></name>
: <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call>)</expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__args_to_target_array_print_reserved</name><argument_list>(<argument><expr>&amp;<name>tmp2</name></expr></argument>, <argument><expr><name>os</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_opt_parse_path</name><argument_list>(<argument><expr>&amp;<name>old_rev</name></expr></argument>, <argument><expr>&amp;<name>old_target</name></expr></argument>,
<argument><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>tmp2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>old_rev</name>.<name>kind</name></name> != <name>svn_opt_revision_unspecified</name></expr>)</condition><then>
<expr_stmt><expr><name><name>opt_state</name>-&gt;<name>start_revision</name></name> = <name>old_rev</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_opt_parse_path</name><argument_list>(<argument><expr>&amp;<name>new_rev</name></expr></argument>, <argument><expr>&amp;<name>new_target</name></expr></argument>,
<argument><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>tmp2</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>new_rev</name>.<name>kind</name></name> != <name>svn_opt_revision_unspecified</name></expr>)</condition><then>
<expr_stmt><expr><name><name>opt_state</name>-&gt;<name>end_revision</name></name> = <name>new_rev</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>start_revision</name>.<name>kind</name></name> == <name>svn_opt_revision_unspecified</name></expr>)</condition><then>
<expr_stmt><expr><name><name>opt_state</name>-&gt;<name>start_revision</name>.<name>kind</name></name> = <call><name>svn_path_is_url</name><argument_list>(<argument><expr><name>old_target</name></expr></argument>)</argument_list></call>
? <name>svn_opt_revision_head</name> : <name>svn_opt_revision_base</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>end_revision</name>.<name>kind</name></name> == <name>svn_opt_revision_unspecified</name></expr>)</condition><then>
<expr_stmt><expr><name><name>opt_state</name>-&gt;<name>end_revision</name>.<name>kind</name></name> = <call><name>svn_path_is_url</name><argument_list>(<argument><expr><name>new_target</name></expr></argument>)</argument_list></call>
? <name>svn_opt_revision_head</name> : <name>svn_opt_revision_working</name></expr>;</expr_stmt></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>new_target</name></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CL_ARG_PARSING_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"'--new' option only valid with "
"'--old' option"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>working_copy_present</name> <init>= <expr><name>FALSE</name></expr></init>, <name>url_present</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_opt_push_implicit_dot_target</name><argument_list>(<argument><expr><name>targets</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>old_target</name> = ""</expr>;</expr_stmt>
<expr_stmt><expr><name>new_target</name> = ""</expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>targets</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>targets</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>! <call><name>svn_path_is_url</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>working_copy_present</name> = <name>TRUE</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>url_present</name> = <name>TRUE</name></expr>;</expr_stmt></else></if>
}</block></for>
<if>if <condition>(<expr><name>url_present</name> &amp;&amp; <name>working_copy_present</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_UNSUPPORTED_FEATURE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Target lists to diff may not contain "
"both working copy paths and URLs"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>start_revision</name>.<name>kind</name></name> == <name>svn_opt_revision_unspecified</name>
&amp;&amp; <name>working_copy_present</name></expr>)</condition><then>
<expr_stmt><expr><name><name>opt_state</name>-&gt;<name>start_revision</name>.<name>kind</name></name> = <name>svn_opt_revision_base</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>end_revision</name>.<name>kind</name></name> == <name>svn_opt_revision_unspecified</name></expr>)</condition><then>
<expr_stmt><expr><name><name>opt_state</name>-&gt;<name>end_revision</name>.<name>kind</name></name> = <name>working_copy_present</name>
? <name>svn_opt_revision_working</name> : <name>svn_opt_revision_head</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>(<name><name>opt_state</name>-&gt;<name>start_revision</name>.<name>kind</name></name> != <name>svn_opt_revision_base</name>
&amp;&amp; <name><name>opt_state</name>-&gt;<name>start_revision</name>.<name>kind</name></name> != <name>svn_opt_revision_working</name>)
|| (<name><name>opt_state</name>-&gt;<name>end_revision</name>.<name>kind</name></name> != <name>svn_opt_revision_base</name>
&amp;&amp; <name><name>opt_state</name>-&gt;<name>end_revision</name>.<name>kind</name></name> != <name>svn_opt_revision_working</name>)</expr>)</condition><then>
<expr_stmt><expr><name>pegged_diff</name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
}</block></else></if></else></if></else></if>
<expr_stmt><expr><call><name>svn_opt_push_implicit_dot_target</name><argument_list>(<argument><expr><name>targets</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>iterpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>targets</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>targets</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target1</name></decl>, *<decl><type ref="prev"/><name>target2</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>pegged_diff</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>target1</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>old_target</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>target2</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>new_target</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>summarize</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client_diff_summarize2</name>
<argument_list>(<argument><expr><name>target1</name></expr></argument>,
<argument><expr>&amp;<name><name>opt_state</name>-&gt;<name>start_revision</name></name></expr></argument>,
<argument><expr><name>target2</name></expr></argument>,
<argument><expr>&amp;<name><name>opt_state</name>-&gt;<name>end_revision</name></name></expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>depth</name></name></expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>notice_ancestry</name></name> ? <name>FALSE</name> : <name>TRUE</name></expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>changelists</name></name></expr></argument>,
<argument><expr><name>summarize_func</name></expr></argument>,
<argument><expr>(<name>void</name> *) <name>target1</name></expr></argument>,
<argument><expr>((<name>svn_cl__cmd_baton_t</name> *)<name>baton</name>)-&gt;<name>ctx</name></expr></argument>,
<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client_diff4</name>
<argument_list>(<argument><expr><name>options</name></expr></argument>,
<argument><expr><name>target1</name></expr></argument>,
<argument><expr>&amp;(<name><name>opt_state</name>-&gt;<name>start_revision</name></name>)</expr></argument>,
<argument><expr><name>target2</name></expr></argument>,
<argument><expr>&amp;(<name><name>opt_state</name>-&gt;<name>end_revision</name></name>)</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>depth</name></name></expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>notice_ancestry</name></name> ? <name>FALSE</name> : <name>TRUE</name></expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>no_diff_deleted</name></name></expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>force</name></name></expr></argument>,
<argument><expr><call><name>svn_cmdline_output_encoding</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>outfile</name></expr></argument>,
<argument><expr><name>errfile</name></expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>changelists</name></name></expr></argument>,
<argument><expr>((<name>svn_cl__cmd_baton_t</name> *)<name>baton</name>)-&gt;<name>ctx</name></expr></argument>,
<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>truepath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_opt_revision_t</name></type> <name>peg_revision</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_opt_parse_path</name><argument_list>(<argument><expr>&amp;<name>peg_revision</name></expr></argument>, <argument><expr>&amp;<name>truepath</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>peg_revision</name>.<name>kind</name></name> == <name>svn_opt_revision_unspecified</name></expr>)</condition><then>
<expr_stmt><expr><name><name>peg_revision</name>.<name>kind</name></name> = <call><name>svn_path_is_url</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call>
? <name>svn_opt_revision_head</name> : <name>svn_opt_revision_working</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>summarize</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client_diff_summarize_peg2</name>
<argument_list>(<argument><expr><name>truepath</name></expr></argument>,
<argument><expr>&amp;<name>peg_revision</name></expr></argument>,
<argument><expr>&amp;<name><name>opt_state</name>-&gt;<name>start_revision</name></name></expr></argument>,
<argument><expr>&amp;<name><name>opt_state</name>-&gt;<name>end_revision</name></name></expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>depth</name></name></expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>notice_ancestry</name></name> ? <name>FALSE</name> : <name>TRUE</name></expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>changelists</name></name></expr></argument>,
<argument><expr><name>summarize_func</name></expr></argument>,
<argument><expr>(<name>void</name> *) <name>truepath</name></expr></argument>,
<argument><expr>((<name>svn_cl__cmd_baton_t</name> *)<name>baton</name>)-&gt;<name>ctx</name></expr></argument>,
<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client_diff_peg4</name>
<argument_list>(<argument><expr><name>options</name></expr></argument>,
<argument><expr><name>truepath</name></expr></argument>,
<argument><expr>&amp;<name>peg_revision</name></expr></argument>,
<argument><expr>&amp;<name><name>opt_state</name>-&gt;<name>start_revision</name></name></expr></argument>,
<argument><expr>&amp;<name><name>opt_state</name>-&gt;<name>end_revision</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>depth</name></name></expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>notice_ancestry</name></name> ? <name>FALSE</name> : <name>TRUE</name></expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>no_diff_deleted</name></name></expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>force</name></name></expr></argument>,
<argument><expr><call><name>svn_cmdline_output_encoding</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>outfile</name></expr></argument>,
<argument><expr><name>errfile</name></expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>changelists</name></name></expr></argument>,
<argument><expr>((<name>svn_cl__cmd_baton_t</name> *)<name>baton</name>)-&gt;<name>ctx</name></expr></argument>,
<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></else></if>
}</block></for>
<if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>xml</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>sb</name> <init>= <expr><call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_xml_make_close_tag</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"paths"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__error_checked_fputs</name><argument_list>(<argument><expr><name><name>sb</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__xml_print_footer</name><argument_list>(<argument><expr>"diff"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
