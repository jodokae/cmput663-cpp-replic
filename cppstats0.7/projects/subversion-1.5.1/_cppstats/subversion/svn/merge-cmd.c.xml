<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/svn/merge-cmd.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<function><type><name>svn_error_t</name> *</type>
<name>svn_cl__merge</name><parameter_list>(<param><decl><type><name>apr_getopt_t</name> *</type><name>os</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_cl__opt_state_t</name> *</type><name>opt_state</name> <init>= <expr>((<name>svn_cl__cmd_baton_t</name> *) <name>baton</name>)-&gt;<name>opt_state</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name> <init>= <expr>((<name>svn_cl__cmd_baton_t</name> *) <name>baton</name>)-&gt;<name>ctx</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>targets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>sourcepath1</name> <init>= <expr><name>NULL</name></expr></init>, *<name>sourcepath2</name> <init>= <expr><name>NULL</name></expr></init>, *<name>targetpath</name> <init>= <expr>""</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>two_sources_specified</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_opt_revision_t</name></type> <name>first_range_start</name></decl>, <decl><type ref="prev"/><name>first_range_end</name></decl>, <decl><type ref="prev"/><name>peg_revision1</name></decl>,
<decl><type ref="prev"/><name>peg_revision2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>options</name></decl>, *<decl><type ref="prev"/><name>ranges_to_merge</name> <init>= <expr><name><name>opt_state</name>-&gt;<name>revision_ranges</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__args_to_target_array_print_reserved</name><argument_list>(<argument><expr>&amp;<name>targets</name></expr></argument>, <argument><expr><name>os</name></expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>targets</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>targets</name>-&gt;<name>nelts</name></name> &lt; 1</expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CL_INSUFFICIENT_ARGS</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Merge source required"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_opt_parse_path</name><argument_list>(<argument><expr>&amp;<name>peg_revision1</name></expr></argument>, <argument><expr>&amp;<name>sourcepath1</name></expr></argument>,
<argument><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>targets</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>targets</name>-&gt;<name>nelts</name></name> &gt;= 2</expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_opt_parse_path</name><argument_list>(<argument><expr>&amp;<name>peg_revision2</name></expr></argument>, <argument><expr>&amp;<name>sourcepath2</name></expr></argument>,
<argument><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>targets</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></else></if>
<if>if <condition>(<expr><name><name>targets</name>-&gt;<name>nelts</name></name> &lt;= 1</expr>)</condition><then> <block>{
<expr_stmt><expr><name>two_sources_specified</name> = <name>FALSE</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>targets</name>-&gt;<name>nelts</name></name> == 2</expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>svn_path_is_url</name><argument_list>(<argument><expr><name>sourcepath1</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>svn_path_is_url</name><argument_list>(<argument><expr><name>sourcepath2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>two_sources_specified</name> = <name>FALSE</name></expr>;</expr_stmt></then></if>
}</block></then></if></else></if>
<if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>revision_ranges</name>-&gt;<name>nelts</name></name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>first_range_start</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>opt_state</name>-&gt;<name>revision_ranges</name></name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>svn_opt_revision_range_t</name> *</expr></argument>)</argument_list></call>-&gt;<name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name>first_range_end</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>opt_state</name>-&gt;<name>revision_ranges</name></name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>svn_opt_revision_range_t</name> *</expr></argument>)</argument_list></call>-&gt;<name>end</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>first_range_start</name>.<name>kind</name></name> = <name><name>first_range_end</name>.<name>kind</name></name> =
<name>svn_opt_revision_unspecified</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>first_range_start</name>.<name>kind</name></name> != <name>svn_opt_revision_unspecified</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>first_range_end</name>.<name>kind</name></name> == <name>svn_opt_revision_unspecified</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CL_INSUFFICIENT_ARGS</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Second revision required"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>two_sources_specified</name> = <name>FALSE</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>! <name>two_sources_specified</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>targets</name>-&gt;<name>nelts</name></name> &gt; 2</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CL_ARG_PARSING_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Too many arguments given"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>targets</name>-&gt;<name>nelts</name></name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>peg_revision1</name>.<name>kind</name></name> = <name>svn_opt_revision_head</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>sourcepath2</name> = <name>sourcepath1</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>peg_revision1</name>.<name>kind</name></name> == <name>svn_opt_revision_unspecified</name></expr>)</condition><then>
<expr_stmt><expr><name><name>peg_revision1</name>.<name>kind</name></name> = <call><name>svn_path_is_url</name><argument_list>(<argument><expr><name>sourcepath1</name></expr></argument>)</argument_list></call>
? <name>svn_opt_revision_head</name> : <name>svn_opt_revision_working</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>targets</name>-&gt;<name>nelts</name></name> == 2</expr>)</condition><then> <block>{
<expr_stmt><expr><name>targetpath</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>targets</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>svn_path_is_url</name><argument_list>(<argument><expr><name>targetpath</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CL_ARG_PARSING_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Cannot specify a revision range "
"with two URLs"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></then></if>
}</block></else></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name><name>targets</name>-&gt;<name>nelts</name></name> &lt; 2</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CL_INSUFFICIENT_ARGS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>targets</name>-&gt;<name>nelts</name></name> &gt; 3</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CL_ARG_PARSING_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Too many arguments given"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>first_range_start</name> = <name>peg_revision1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>first_range_end</name> = <name>peg_revision2</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name><name>first_range_start</name>.<name>kind</name></name> == <name>svn_opt_revision_unspecified</name>
&amp;&amp; ! <call><name>svn_path_is_url</name><argument_list>(<argument><expr><name>sourcepath1</name></expr></argument>)</argument_list></call>)
||
(<name><name>first_range_end</name>.<name>kind</name></name> == <name>svn_opt_revision_unspecified</name>
&amp;&amp; ! <call><name>svn_path_is_url</name><argument_list>(<argument><expr><name>sourcepath2</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>SVN_ERR_CLIENT_BAD_REVISION</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"A working copy merge source needs an explicit revision"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>first_range_start</name>.<name>kind</name></name> == <name>svn_opt_revision_unspecified</name></expr>)</condition><then>
<expr_stmt><expr><name><name>first_range_start</name>.<name>kind</name></name> = <name>svn_opt_revision_head</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>first_range_end</name>.<name>kind</name></name> == <name>svn_opt_revision_unspecified</name></expr>)</condition><then>
<expr_stmt><expr><name><name>first_range_end</name>.<name>kind</name></name> = <name>svn_opt_revision_head</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>targets</name>-&gt;<name>nelts</name></name> == 3</expr>)</condition><then>
<expr_stmt><expr><name>targetpath</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>targets</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></else></if>
<if>if <condition>(<expr><name>sourcepath1</name> &amp;&amp; <name>sourcepath2</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name>targetpath</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>svn_path_is_url</name><argument_list>(<argument><expr><name>sourcepath1</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>sp1_basename</name></decl>, *<decl><type ref="prev"/><name>sp2_basename</name></decl>;</decl_stmt>
<expr_stmt><expr><name>sp1_basename</name> = <call><name>svn_path_basename</name><argument_list>(<argument><expr><name>sourcepath1</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sp2_basename</name> = <call><name>svn_path_basename</name><argument_list>(<argument><expr><name>sourcepath2</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>sp1_basename</name></expr></argument>, <argument><expr><name>sp2_basename</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>decoded_path</name> <init>= <expr><call><name>svn_path_uri_decode</name><argument_list>(<argument><expr><name>sp1_basename</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_check_path</name><argument_list>(<argument><expr><name>decoded_path</name></expr></argument>, <argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>kind</name> == <name>svn_node_file</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>targetpath</name> = <name>decoded_path</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>sourcepath1</name></expr></argument>, <argument><expr><name>sourcepath2</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>decoded_path</name> <init>= <expr><call><name>svn_path_uri_decode</name><argument_list>(<argument><expr><name>sourcepath1</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_check_path</name><argument_list>(<argument><expr><name>decoded_path</name></expr></argument>, <argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>kind</name> == <name>svn_node_file</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>targetpath</name> = <name>decoded_path</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if></else></if>
}</block></then></if>
<if>if <condition>(<expr>! <name><name>opt_state</name>-&gt;<name>quiet</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_cl__get_notifier</name><argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>notify_func2</name></name></expr></argument>, <argument><expr>&amp;<name><name>ctx</name>-&gt;<name>notify_baton2</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>extensions</name></name></expr>)</condition><then>
<expr_stmt><expr><name>options</name> = <call><name>svn_cstring_split</name><argument_list>(<argument><expr><name><name>opt_state</name>-&gt;<name>extensions</name></name></expr></argument>, <argument><expr>" \t\n\r"</expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>options</name> = <name>NULL</name></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr>! <name>two_sources_specified</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>! <name>sourcepath1</name></expr>)</condition><then>
<expr_stmt><expr><name>sourcepath1</name> = <name>targetpath</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>(<name><name>first_range_start</name>.<name>kind</name></name> == <name>svn_opt_revision_unspecified</name>)
&amp;&amp; (<name><name>first_range_end</name>.<name>kind</name></name> == <name>svn_opt_revision_unspecified</name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_opt_revision_range_t</name> *</type><name>range</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>range</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ranges_to_merge</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name>-&gt;<name>start</name>.<name>kind</name></name> = <name>svn_opt_revision_number</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name>-&gt;<name>start</name>.<name>value</name>.<name>number</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>range</name>-&gt;<name>end</name></name> = <name>peg_revision1</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>ranges_to_merge</name></expr></argument>, <argument><expr><name>svn_opt_revision_range_t</name> *</expr></argument>)</argument_list></call> = <name>range</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>reintegrate</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>depth</name></name> != <name>svn_depth_unknown</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CL_MUTUALLY_EXCLUSIVE_ARGS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"--depth cannot be used with "
"--reintegrate"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>force</name></name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CL_MUTUALLY_EXCLUSIVE_ARGS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"--force cannot be used with "
"--reintegrate"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>err</name> = <call><name>svn_client_merge_reintegrate</name><argument_list>(<argument><expr><name>sourcepath1</name></expr></argument>,
<argument><expr>&amp;<name>peg_revision1</name></expr></argument>,
<argument><expr><name>targetpath</name></expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>dry_run</name></name></expr></argument>,
<argument><expr><name>options</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name>err</name> = <call><name>svn_client_merge_peg3</name><argument_list>(<argument><expr><name>sourcepath1</name></expr></argument>,
<argument><expr><name>ranges_to_merge</name></expr></argument>,
<argument><expr>&amp;<name>peg_revision1</name></expr></argument>,
<argument><expr><name>targetpath</name></expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>depth</name></name></expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>ignore_ancestry</name></name></expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>force</name></name></expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>record_only</name></name></expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>dry_run</name></name></expr></argument>,
<argument><expr><name>options</name></expr></argument>,
<argument><expr><name>ctx</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>err</name> = <call><name>svn_client_merge3</name><argument_list>(<argument><expr><name>sourcepath1</name></expr></argument>,
<argument><expr>&amp;<name>first_range_start</name></expr></argument>,
<argument><expr><name>sourcepath2</name></expr></argument>,
<argument><expr>&amp;<name>first_range_end</name></expr></argument>,
<argument><expr><name>targetpath</name></expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>depth</name></name></expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>ignore_ancestry</name></name></expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>force</name></name></expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>record_only</name></name></expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>dry_run</name></name></expr></argument>,
<argument><expr><name>options</name></expr></argument>,
<argument><expr><name>ctx</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>err</name> &amp;&amp; (! <name><name>opt_state</name>-&gt;<name>reintegrate</name></name>)</expr>)</condition><then>
<return>return <expr><call><name>svn_cl__may_need_force</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
</unit>
