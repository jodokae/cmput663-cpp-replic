<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/svn/status-cmd.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_wc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error_codes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_xml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_cmdline.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<struct>struct <name>status_baton</name> <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>detailed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>show_last_committed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>skip_unrecognized</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>repos_locks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>cached_changelists</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>cl_pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>had_print_error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>xml_mode</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>status_cache</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_wc_status2_t</name> *</type><name>status</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>print_start_target_xml</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>sb</name> <init>= <expr><call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_xml_make_open_tag</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>svn_xml_normal</name></expr></argument>, <argument><expr>"target"</expr></argument>,
<argument><expr>"path"</expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_cl__error_checked_fputs</name><argument_list>(<argument><expr><name><name>sb</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>print_finish_target_xml</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name></type> <name>repos_rev</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>sb</name> <init>= <expr><call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>repos_rev</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_rev_str</name></decl>;</decl_stmt>
<expr_stmt><expr><name>repos_rev_str</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%ld"</expr></argument>, <argument><expr><name>repos_rev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_xml_make_open_tag</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>svn_xml_self_closing</name></expr></argument>, <argument><expr>"against"</expr></argument>,
<argument><expr>"revision"</expr></argument>, <argument><expr><name>repos_rev_str</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>svn_xml_make_close_tag</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"target"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_cl__error_checked_fputs</name><argument_list>(<argument><expr><name><name>sb</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_status_normal_or_xml</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_wc_status2_t</name> *</type><name>status</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>status_baton</name> *</type><name>sb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>sb</name>-&gt;<name>xml_mode</name></name></expr>)</condition><then>
<expr_stmt><expr><name>err</name> = <call><name>svn_cl__print_status_xml</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>sb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>err</name> = <call><name>svn_cl__print_status</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>sb</name>-&gt;<name>detailed</name></name></expr></argument>,
<argument><expr><name><name>sb</name>-&gt;<name>show_last_committed</name></name></expr></argument>,
<argument><expr><name><name>sb</name>-&gt;<name>skip_unrecognized</name></name></expr></argument>,
<argument><expr><name><name>sb</name>-&gt;<name>repos_locks</name></name></expr></argument>,
<argument><expr><name><name>sb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name><name>sb</name>-&gt;<name>had_print_error</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>sb</name>-&gt;<name>had_print_error</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_handle_error2</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr>"svn: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_status</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_wc_status2_t</name> *</type><name>status</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>status_baton</name> *</type><name>sb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>status</name>-&gt;<name>entry</name></name> &amp;&amp; <name><name>status</name>-&gt;<name>entry</name>-&gt;<name>changelist</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>path_array</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cl_key</name> <init>= <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>sb</name>-&gt;<name>cl_pool</name></name></expr></argument>, <argument><expr><name><name>status</name>-&gt;<name>entry</name>-&gt;<name>changelist</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>status_cache</name> *</type><name>scache</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>sb</name>-&gt;<name>cl_pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>scache</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>scache</name>-&gt;<name>path</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>sb</name>-&gt;<name>cl_pool</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>scache</name>-&gt;<name>status</name></name> = <call><name>svn_wc_dup_status2</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>sb</name>-&gt;<name>cl_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>path_array</name> = (<name>apr_array_header_t</name> *)
<call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>sb</name>-&gt;<name>cached_changelists</name></name></expr></argument>, <argument><expr><name>cl_key</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>path_array</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>path_array</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>sb</name>-&gt;<name>cl_pool</name></name></expr></argument>, <argument><expr>1</expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>status_cache</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>sb</name>-&gt;<name>cached_changelists</name></name></expr></argument>, <argument><expr><name>cl_key</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>path_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>path_array</name></expr></argument>, <argument>struct <expr><name>status_cache</name> *</expr></argument>)</argument_list></call> = <name>scache</name></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><call><name>print_status_normal_or_xml</name><argument_list>(<argument><expr><name>baton</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_cl__status</name><parameter_list>(<param><decl><type><name>apr_getopt_t</name> *</type><name>os</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_cl__opt_state_t</name> *</type><name>opt_state</name> <init>= <expr>((<name>svn_cl__cmd_baton_t</name> *) <name>baton</name>)-&gt;<name>opt_state</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name> <init>= <expr>((<name>svn_cl__cmd_baton_t</name> *) <name>baton</name>)-&gt;<name>ctx</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>targets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>master_cl_hash</name> <init>= <expr><call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_opt_revision_t</name></type> <name>rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>status_baton</name></type> <name>sb</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__args_to_target_array_print_reserved</name><argument_list>(<argument><expr>&amp;<name>targets</name></expr></argument>, <argument><expr><name>os</name></expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>targets</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_opt_push_implicit_dot_target</name><argument_list>(<argument><expr><name>targets</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rev</name>.<name>kind</name></name> = <name>svn_opt_revision_head</name></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name><name>opt_state</name>-&gt;<name>xml</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_cl__get_notifier</name><argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>notify_func2</name></name></expr></argument>, <argument><expr>&amp;<name><name>ctx</name>-&gt;<name>notify_baton2</name></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sb</name>.<name>had_print_error</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>xml</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>! <name><name>opt_state</name>-&gt;<name>incremental</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__xml_print_header</name><argument_list>(<argument><expr>"status"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>incremental</name></name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CL_ARG_PARSING_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"'incremental' option only valid in XML "
"mode"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></else></if>
<expr_stmt><expr><name><name>sb</name>.<name>detailed</name></name> = (<name><name>opt_state</name>-&gt;<name>verbose</name></name> || <name><name>opt_state</name>-&gt;<name>update</name></name>)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>sb</name>.<name>show_last_committed</name></name> = <name><name>opt_state</name>-&gt;<name>verbose</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sb</name>.<name>skip_unrecognized</name></name> = <name><name>opt_state</name>-&gt;<name>quiet</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sb</name>.<name>repos_locks</name></name> = <name><name>opt_state</name>-&gt;<name>update</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sb</name>.<name>xml_mode</name></name> = <name><name>opt_state</name>-&gt;<name>xml</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sb</name>.<name>pool</name></name> = <name>subpool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sb</name>.<name>cached_changelists</name></name> = <name>master_cl_hash</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sb</name>.<name>cl_pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>targets</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>targets</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>repos_rev</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__check_cancel</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>xml</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>print_start_target_xml</name><argument_list>(<argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__try</name><argument_list>(<argument><expr><call><name>svn_client_status3</name><argument_list>(<argument><expr>&amp;<name>repos_rev</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr>&amp;<name>rev</name></expr></argument>,
<argument><expr><name>print_status</name></expr></argument>, <argument><expr>&amp;<name>sb</name></expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>depth</name></name></expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>verbose</name></name></expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>update</name></name></expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>no_ignore</name></name></expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>ignore_externals</name></name></expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>changelists</name></name></expr></argument>,
<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>opt_state</name>-&gt;<name>quiet</name></name></expr></argument>,
<argument><expr><name>SVN_ERR_WC_NOT_DIRECTORY</name></expr></argument>,
<argument><expr><name>SVN_NO_ERROR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>xml</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>print_finish_target_xml</name><argument_list>(<argument><expr><name>repos_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></for>
<if>if <condition>(<expr><call><name>apr_hash_count</name><argument_list>(<argument><expr><name>master_cl_hash</name></expr></argument>)</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>buf</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>xml</name></name></expr>)</condition><then>
<expr_stmt><expr><name>buf</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>master_cl_hash</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition>
<incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>changelist_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>path_array</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>changelist_name</name> = <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name>path_array</name> = <name>val</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>xml</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_stringbuf_set</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_xml_make_open_tag</name><argument_list>(<argument><expr>&amp;<name>buf</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>svn_xml_normal</name></expr></argument>, <argument><expr>"changelist"</expr></argument>,
<argument><expr>"name"</expr></argument>, <argument><expr><name>changelist_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__error_checked_fputs</name><argument_list>(<argument><expr><name><name>buf</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"\n--- Changelist '%s':\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>changelist_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name><name>path_array</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
<decl_stmt><decl><type>struct <name>status_cache</name> *</type><name>scache</name> <init>=
<expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>path_array</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument>struct <expr><name>status_cache</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>print_status_normal_or_xml</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name><name>scache</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name><name>scache</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>xml</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_stringbuf_set</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_xml_make_close_tag</name><argument_list>(<argument><expr>&amp;<name>buf</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"changelist"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__error_checked_fputs</name><argument_list>(<argument><expr><name><name>buf</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
}</block></then></if>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>xml</name></name> &amp;&amp; (! <name><name>opt_state</name>-&gt;<name>incremental</name></name>)</expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__xml_print_footer</name><argument_list>(<argument><expr>"status"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
