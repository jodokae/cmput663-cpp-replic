<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/svn/props.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_hash.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_cmdline.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_subst.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_props.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_xml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_base64.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<function><type><name>svn_error_t</name> *</type>
<name>svn_cl__revprop_prepare</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_opt_revision_t</name> *</type><name>revision</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>targets</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>URL</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>revision</name>-&gt;<name>kind</name></name> != <name>svn_opt_revision_number</name>
&amp;&amp; <name><name>revision</name>-&gt;<name>kind</name></name> != <name>svn_opt_revision_date</name>
&amp;&amp; <name><name>revision</name>-&gt;<name>kind</name></name> != <name>svn_opt_revision_head</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>SVN_ERR_CL_ARG_PARSING_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Must specify the revision as a number, a date or 'HEAD' "
"when operating on a revision property"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>targets</name>-&gt;<name>nelts</name></name> != 1</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CL_ARG_PARSING_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Wrong number of targets specified"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>target</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>targets</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client_url_from_path</name><argument_list>(<argument><expr><name>URL</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>URL</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>SVN_ERR_UNVERSIONED_RESOURCE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Either a URL or versioned item is required"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_cl__print_prop_hash</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>prop_hash</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>names_only</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>prop_hash</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>propval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pname_stdout</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pname</name> = <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name>propval</name> = <name>val</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>svn_prop_needs_translation</name><argument_list>(<argument><expr><name>pname</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_subst_detranslate_string</name><argument_list>(<argument><expr>&amp;<name>propval</name></expr></argument>, <argument><expr><name>propval</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_cstring_from_utf8</name><argument_list>(<argument><expr>&amp;<name>pname_stdout</name></expr></argument>, <argument><expr><name>pname</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>names_only</name></expr>)</condition><then>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" %s\n"</expr></argument>, <argument><expr><name>pname_stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" %s : %s\n"</expr></argument>, <argument><expr><name>pname_stdout</name></expr></argument>, <argument><expr><name><name>propval</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></for>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>svn_cl__print_xml_prop</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> **</type><name>outstr</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>propname</name></decl></param>,
<param><decl><type><name>svn_string_t</name> *</type><name>propval</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>xml_safe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>encoding</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>*<name>outstr</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr>*<name>outstr</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><call><name>svn_xml_is_xml_safe</name><argument_list>(<argument><expr><name><name>propval</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>propval</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>xml_esc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_xml_escape_cdata_string</name><argument_list>(<argument><expr>&amp;<name>xml_esc</name></expr></argument>, <argument><expr><name>propval</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>xml_safe</name> = <name><name>xml_esc</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>base64ed</name> <init>= <expr><call><name>svn_base64_encode_string</name><argument_list>(<argument><expr><name>propval</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>encoding</name> = "base64"</expr>;</expr_stmt>
<expr_stmt><expr><name>xml_safe</name> = <name><name>base64ed</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>encoding</name></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_xml_make_open_tag</name><argument_list>(<argument><expr><name>outstr</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>svn_xml_protect_pcdata</name></expr></argument>,
<argument><expr>"property"</expr></argument>, <argument><expr>"name"</expr></argument>, <argument><expr><name>propname</name></expr></argument>,
<argument><expr>"encoding"</expr></argument>, <argument><expr><name>encoding</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>svn_xml_make_open_tag</name><argument_list>(<argument><expr><name>outstr</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>svn_xml_protect_pcdata</name></expr></argument>,
<argument><expr>"property"</expr></argument>, <argument><expr>"name"</expr></argument>, <argument><expr><name>propname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr>*<name>outstr</name></expr></argument>, <argument><expr><name>xml_safe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_xml_make_close_tag</name><argument_list>(<argument><expr><name>outstr</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"property"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_cl__print_xml_prop_hash</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> **</type><name>outstr</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>prop_hash</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>names_only</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<if>if <condition>(<expr>*<name>outstr</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr>*<name>outstr</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>prop_hash</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>propval</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pname</name> = <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name>propval</name> = <name>val</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>names_only</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_xml_make_open_tag</name><argument_list>(<argument><expr><name>outstr</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>svn_xml_self_closing</name></expr></argument>, <argument><expr>"property"</expr></argument>,
<argument><expr>"name"</expr></argument>, <argument><expr><name>pname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pname_out</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>svn_prop_needs_translation</name><argument_list>(<argument><expr><name>pname</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_subst_detranslate_string</name><argument_list>(<argument><expr>&amp;<name>propval</name></expr></argument>, <argument><expr><name>propval</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_cstring_from_utf8</name><argument_list>(<argument><expr>&amp;<name>pname_out</name></expr></argument>, <argument><expr><name>pname</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_cl__print_xml_prop</name><argument_list>(<argument><expr><name>outstr</name></expr></argument>, <argument><expr><name>pname_out</name></expr></argument>, <argument><expr><name>propval</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></for>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>svn_cl__check_boolean_prop_val</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>propname</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>propval</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>propbuf</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>svn_prop_is_boolean</name><argument_list>(<argument><expr><name>propname</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>propbuf</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr><name>propval</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_strip_whitespace</name><argument_list>(<argument><expr><name>propbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>propbuf</name>-&gt;<name>data</name><index>[<expr>0</expr>]</index></name> == '\0'
|| <call><name>strcmp</name><argument_list>(<argument><expr><name><name>propbuf</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr>"no"</expr></argument>)</argument_list></call> == 0
|| <call><name>strcmp</name><argument_list>(<argument><expr><name><name>propbuf</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr>"off"</expr></argument>)</argument_list></call> == 0
|| <call><name>strcmp</name><argument_list>(<argument><expr><name><name>propbuf</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr>"false"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_BAD_PROPERTY_VALUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"To turn off the %s property, use 'svn propdel';\n"
"setting the property to '%s' will not turn it off."</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>propname</name></expr></argument>, <argument><expr><name>propval</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_handle_warning</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
</unit>
