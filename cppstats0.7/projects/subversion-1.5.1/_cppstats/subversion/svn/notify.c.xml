<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/svn/notify.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STDIO</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_want.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_cmdline.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<struct>struct <name>notify_baton</name> <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>received_some_change</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>is_checkout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>is_export</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>suppress_final_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>sent_first_txdelta</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>in_external</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>had_print_error</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>notify</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>svn_wc_notify_t</name> *</type><name>n</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>notify_baton</name> *</type><name>nb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>statchar_buf</name><index>[<expr>5</expr>]</index></name> <init>= <expr>" "</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path_local</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>svn_path_is_url</name><argument_list>(<argument><expr><name><name>n</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>path_local</name> = <name><name>n</name>-&gt;<name>path</name></name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>path_local</name> = <call><name>svn_path_local_style</name><argument_list>(<argument><expr><name><name>n</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<switch>switch <condition>(<expr><name><name>n</name>-&gt;<name>action</name></name></expr>)</condition> <block>{
<case>case <expr><name>svn_wc_notify_skip</name></expr>:
<if>if <condition>(<expr><name><name>n</name>-&gt;<name>content_state</name></name> == <name>svn_wc_notify_state_missing</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>err</name> = <call><name>svn_cmdline_printf</name>
<argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Skipped missing target: '%s'\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>path_local</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>print_error</name>;</goto></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr>(<name>err</name> = <call><name>svn_cmdline_printf</name>
<argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Skipped '%s'\n"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path_local</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>print_error</name>;</goto></then></if>
}</block></else></if>
<break>break;</break>
</case><case>case <expr><name>svn_wc_notify_update_delete</name></expr>:
<expr_stmt><expr><name><name>nb</name>-&gt;<name>received_some_change</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"D %s\n"</expr></argument>, <argument><expr><name>path_local</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>print_error</name>;</goto></then></if>
<break>break;</break>
</case><case>case <expr><name>svn_wc_notify_update_replace</name></expr>:
<expr_stmt><expr><name><name>nb</name>-&gt;<name>received_some_change</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"R %s\n"</expr></argument>, <argument><expr><name>path_local</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>print_error</name>;</goto></then></if>
<break>break;</break>
</case><case>case <expr><name>svn_wc_notify_update_add</name></expr>:
<expr_stmt><expr><name><name>nb</name>-&gt;<name>received_some_change</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>n</name>-&gt;<name>content_state</name></name> == <name>svn_wc_notify_state_conflicted</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>err</name> = <call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"C %s\n"</expr></argument>, <argument><expr><name>path_local</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>print_error</name>;</goto></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr>(<name>err</name> = <call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"A %s\n"</expr></argument>, <argument><expr><name>path_local</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>print_error</name>;</goto></then></if>
}</block></else></if>
<break>break;</break>
</case><case>case <expr><name>svn_wc_notify_exists</name></expr>:
<expr_stmt><expr><name><name>nb</name>-&gt;<name>received_some_change</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>n</name>-&gt;<name>content_state</name></name> == <name>svn_wc_notify_state_conflicted</name></expr>)</condition><then>
<expr_stmt><expr><name><name>statchar_buf</name><index>[<expr>0</expr>]</index></name> = 'C'</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>statchar_buf</name><index>[<expr>0</expr>]</index></name> = 'E'</expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name><name>n</name>-&gt;<name>prop_state</name></name> == <name>svn_wc_notify_state_conflicted</name></expr>)</condition><then>
<expr_stmt><expr><name><name>statchar_buf</name><index>[<expr>1</expr>]</index></name> = 'C'</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>n</name>-&gt;<name>prop_state</name></name> == <name>svn_wc_notify_state_merged</name></expr>)</condition><then>
<expr_stmt><expr><name><name>statchar_buf</name><index>[<expr>1</expr>]</index></name> = 'G'</expr>;</expr_stmt></then></if></else></if>
<if>if <condition>(<expr>(<name>err</name> = <call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s %s\n"</expr></argument>, <argument><expr><name>statchar_buf</name></expr></argument>, <argument><expr><name>path_local</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>print_error</name>;</goto></then></if>
<break>break;</break>
</case><case>case <expr><name>svn_wc_notify_restore</name></expr>:
<if>if <condition>(<expr>(<name>err</name> = <call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Restored '%s'\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>path_local</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>print_error</name>;</goto></then></if>
<break>break;</break>
</case><case>case <expr><name>svn_wc_notify_revert</name></expr>:
<if>if <condition>(<expr>(<name>err</name> = <call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Reverted '%s'\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>path_local</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>print_error</name>;</goto></then></if>
<break>break;</break>
</case><case>case <expr><name>svn_wc_notify_failed_revert</name></expr>:
<if>if <condition>(<expr>( <name>err</name> = <call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Failed to revert '%s' -- "
"try updating instead.\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>path_local</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>print_error</name>;</goto></then></if>
<break>break;</break>
</case><case>case <expr><name>svn_wc_notify_resolved</name></expr>:
<if>if <condition>(<expr>(<name>err</name> = <call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Resolved conflicted state of '%s'\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>path_local</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>print_error</name>;</goto></then></if>
<break>break;</break>
</case><case>case <expr><name>svn_wc_notify_add</name></expr>:
<if>if <condition>(<expr><name><name>n</name>-&gt;<name>mime_type</name></name> &amp;&amp; (<call><name>svn_mime_type_is_binary</name><argument_list>(<argument><expr><name><name>n</name>-&gt;<name>mime_type</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>err</name> = <call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"A (bin) %s\n"</expr></argument>,
<argument><expr><name>path_local</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>print_error</name>;</goto></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr>(<name>err</name> = <call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"A %s\n"</expr></argument>,
<argument><expr><name>path_local</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>print_error</name>;</goto></then></if>
}</block></else></if>
<break>break;</break>
</case><case>case <expr><name>svn_wc_notify_delete</name></expr>:
<expr_stmt><expr><name><name>nb</name>-&gt;<name>received_some_change</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"D %s\n"</expr></argument>,
<argument><expr><name>path_local</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>print_error</name>;</goto></then></if>
<break>break;</break>
</case><case>case <expr><name>svn_wc_notify_update_update</name></expr>: <block>{
<if>if <condition>(<expr>! ((<name><name>n</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name>)
&amp;&amp; ((<name><name>n</name>-&gt;<name>prop_state</name></name> == <name>svn_wc_notify_state_inapplicable</name>)
|| (<name><name>n</name>-&gt;<name>prop_state</name></name> == <name>svn_wc_notify_state_unknown</name>)
|| (<name><name>n</name>-&gt;<name>prop_state</name></name> == <name>svn_wc_notify_state_unchanged</name>)))</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>n</name>-&gt;<name>kind</name></name> == <name>svn_node_file</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>n</name>-&gt;<name>content_state</name></name> == <name>svn_wc_notify_state_conflicted</name></expr>)</condition><then>
<expr_stmt><expr><name><name>statchar_buf</name><index>[<expr>0</expr>]</index></name> = 'C'</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>n</name>-&gt;<name>content_state</name></name> == <name>svn_wc_notify_state_merged</name></expr>)</condition><then>
<expr_stmt><expr><name><name>statchar_buf</name><index>[<expr>0</expr>]</index></name> = 'G'</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>n</name>-&gt;<name>content_state</name></name> == <name>svn_wc_notify_state_changed</name></expr>)</condition><then>
<expr_stmt><expr><name><name>statchar_buf</name><index>[<expr>0</expr>]</index></name> = 'U'</expr>;</expr_stmt></then></if></else></if></else></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>n</name>-&gt;<name>prop_state</name></name> == <name>svn_wc_notify_state_conflicted</name></expr>)</condition><then>
<expr_stmt><expr><name><name>statchar_buf</name><index>[<expr>1</expr>]</index></name> = 'C'</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>n</name>-&gt;<name>prop_state</name></name> == <name>svn_wc_notify_state_merged</name></expr>)</condition><then>
<expr_stmt><expr><name><name>statchar_buf</name><index>[<expr>1</expr>]</index></name> = 'G'</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>n</name>-&gt;<name>prop_state</name></name> == <name>svn_wc_notify_state_changed</name></expr>)</condition><then>
<expr_stmt><expr><name><name>statchar_buf</name><index>[<expr>1</expr>]</index></name> = 'U'</expr>;</expr_stmt></then></if></else></if></else></if>
<if>if <condition>(<expr><name><name>n</name>-&gt;<name>lock_state</name></name> == <name>svn_wc_notify_lock_state_unlocked</name></expr>)</condition><then>
<expr_stmt><expr><name><name>statchar_buf</name><index>[<expr>2</expr>]</index></name> = 'B'</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>statchar_buf</name><index>[<expr>0</expr>]</index></name> != ' ' || <name><name>statchar_buf</name><index>[<expr>1</expr>]</index></name> != ' '</expr>)</condition><then>
<expr_stmt><expr><name><name>nb</name>-&gt;<name>received_some_change</name></name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>statchar_buf</name><index>[<expr>0</expr>]</index></name> != ' ' || <name><name>statchar_buf</name><index>[<expr>1</expr>]</index></name> != ' '
|| <name><name>statchar_buf</name><index>[<expr>2</expr>]</index></name> != ' '</expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>err</name> = <call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s %s\n"</expr></argument>,
<argument><expr><name>statchar_buf</name></expr></argument>, <argument><expr><name>path_local</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>print_error</name>;</goto></then></if>
}</block></then></if>
}</block></then></if>
}</block>
<break>break;</break>
</case><case>case <expr><name>svn_wc_notify_update_external</name></expr>:
<expr_stmt><expr><name><name>nb</name>-&gt;<name>in_external</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"\nFetching external item into '%s'\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>path_local</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>print_error</name>;</goto></then></if>
<break>break;</break>
</case><case>case <expr><name>svn_wc_notify_update_completed</name></expr>: <block>{
<if>if <condition>(<expr>! <name><name>nb</name>-&gt;<name>suppress_final_line</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name><name>n</name>-&gt;<name>revision</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>nb</name>-&gt;<name>is_export</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>err</name> = <call><name>svn_cmdline_printf</name>
<argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>nb</name>-&gt;<name>in_external</name></name>
? <call><name>_</name><argument_list>(<argument><expr>"Exported external at revision %ld.\n"</expr></argument>)</argument_list></call>
: <call><name>_</name><argument_list>(<argument><expr>"Exported revision %ld.\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>n</name>-&gt;<name>revision</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>print_error</name>;</goto></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name><name>nb</name>-&gt;<name>is_checkout</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>err</name> = <call><name>svn_cmdline_printf</name>
<argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>nb</name>-&gt;<name>in_external</name></name>
? <call><name>_</name><argument_list>(<argument><expr>"Checked out external at revision %ld.\n"</expr></argument>)</argument_list></call>
: <call><name>_</name><argument_list>(<argument><expr>"Checked out revision %ld.\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>n</name>-&gt;<name>revision</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>print_error</name>;</goto></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name><name>nb</name>-&gt;<name>received_some_change</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>err</name> = <call><name>svn_cmdline_printf</name>
<argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>nb</name>-&gt;<name>in_external</name></name>
? <call><name>_</name><argument_list>(<argument><expr>"Updated external to revision %ld.\n"</expr></argument>)</argument_list></call>
: <call><name>_</name><argument_list>(<argument><expr>"Updated to revision %ld.\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>n</name>-&gt;<name>revision</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>print_error</name>;</goto></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr>(<name>err</name> = <call><name>svn_cmdline_printf</name>
<argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>nb</name>-&gt;<name>in_external</name></name>
? <call><name>_</name><argument_list>(<argument><expr>"External at revision %ld.\n"</expr></argument>)</argument_list></call>
: <call><name>_</name><argument_list>(<argument><expr>"At revision %ld.\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>n</name>-&gt;<name>revision</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>print_error</name>;</goto></then></if>
}</block></else></if>
}</block></else></if></else></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name><name>nb</name>-&gt;<name>is_export</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>err</name> = <call><name>svn_cmdline_printf</name>
<argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>nb</name>-&gt;<name>in_external</name></name>
? <call><name>_</name><argument_list>(<argument><expr>"External export complete.\n"</expr></argument>)</argument_list></call>
: <call><name>_</name><argument_list>(<argument><expr>"Export complete.\n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>print_error</name>;</goto></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name><name>nb</name>-&gt;<name>is_checkout</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>err</name> = <call><name>svn_cmdline_printf</name>
<argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>nb</name>-&gt;<name>in_external</name></name>
? <call><name>_</name><argument_list>(<argument><expr>"External checkout complete.\n"</expr></argument>)</argument_list></call>
: <call><name>_</name><argument_list>(<argument><expr>"Checkout complete.\n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>print_error</name>;</goto></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr>(<name>err</name> = <call><name>svn_cmdline_printf</name>
<argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>nb</name>-&gt;<name>in_external</name></name>
? <call><name>_</name><argument_list>(<argument><expr>"External update complete.\n"</expr></argument>)</argument_list></call>
: <call><name>_</name><argument_list>(<argument><expr>"Update complete.\n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>print_error</name>;</goto></then></if>
}</block></else></if></else></if>
}</block></else></if>
}</block></then></if>
}</block>
<if>if <condition>(<expr><name><name>nb</name>-&gt;<name>in_external</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>nb</name>-&gt;<name>in_external</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"\n"</expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>print_error</name>;</goto></then></if>
}</block></then></if>
<break>break;</break>
</case><case>case <expr><name>svn_wc_notify_status_external</name></expr>:
<if>if <condition>(<expr>(<name>err</name> = <call><name>svn_cmdline_printf</name>
<argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"\nPerforming status on external item at '%s'\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>path_local</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>print_error</name>;</goto></then></if>
<break>break;</break>
</case><case>case <expr><name>svn_wc_notify_status_completed</name></expr>:
<if>if <condition>(<expr><call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name><name>n</name>-&gt;<name>revision</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<if>if <condition>(<expr>(<name>err</name> = <call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Status against revision: %6ld\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>n</name>-&gt;<name>revision</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>print_error</name>;</goto></then></if></then></if>
<break>break;</break>
</case><case>case <expr><name>svn_wc_notify_commit_modified</name></expr>:
<if>if <condition>(<expr>(<name>err</name> = <call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Sending %s\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>path_local</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>print_error</name>;</goto></then></if>
<break>break;</break>
</case><case>case <expr><name>svn_wc_notify_commit_added</name></expr>:
<if>if <condition>(<expr><name><name>n</name>-&gt;<name>mime_type</name></name> &amp;&amp; <call><name>svn_mime_type_is_binary</name><argument_list>(<argument><expr><name><name>n</name>-&gt;<name>mime_type</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>err</name> = <call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Adding (bin) %s\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>path_local</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>print_error</name>;</goto></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr>(<name>err</name> = <call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Adding %s\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>path_local</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>print_error</name>;</goto></then></if>
}</block></else></if>
<break>break;</break>
</case><case>case <expr><name>svn_wc_notify_commit_deleted</name></expr>:
<if>if <condition>(<expr>(<name>err</name> = <call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Deleting %s\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>path_local</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>print_error</name>;</goto></then></if>
<break>break;</break>
</case><case>case <expr><name>svn_wc_notify_commit_replaced</name></expr>:
<if>if <condition>(<expr>(<name>err</name> = <call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Replacing %s\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>path_local</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>print_error</name>;</goto></then></if>
<break>break;</break>
</case><case>case <expr><name>svn_wc_notify_commit_postfix_txdelta</name></expr>:
<if>if <condition>(<expr>! <name><name>nb</name>-&gt;<name>sent_first_txdelta</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>nb</name>-&gt;<name>sent_first_txdelta</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Transmitting file data "</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>print_error</name>;</goto></then></if>
}</block></then></if>
<if>if <condition>(<expr>(<name>err</name> = <call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"."</expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>print_error</name>;</goto></then></if>
<break>break;</break>
</case><case>case <expr><name>svn_wc_notify_locked</name></expr>:
<if>if <condition>(<expr>(<name>err</name> = <call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s' locked by user '%s'.\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>path_local</name></expr></argument>, <argument><expr><name><name>n</name>-&gt;<name>lock</name>-&gt;<name>owner</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>print_error</name>;</goto></then></if>
<break>break;</break>
</case><case>case <expr><name>svn_wc_notify_unlocked</name></expr>:
<if>if <condition>(<expr>(<name>err</name> = <call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s' unlocked.\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>path_local</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>print_error</name>;</goto></then></if>
<break>break;</break>
</case><case>case <expr><name>svn_wc_notify_failed_lock</name></expr>:
</case><case>case <expr><name>svn_wc_notify_failed_unlock</name></expr>:
<expr_stmt><expr><call><name>svn_handle_warning</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name><name>n</name>-&gt;<name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>svn_wc_notify_changelist_set</name></expr>:
<if>if <condition>(<expr>(<name>err</name> = <call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Path '%s' is now a member of "
"changelist '%s'.\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>path_local</name></expr></argument>, <argument><expr><name><name>n</name>-&gt;<name>changelist_name</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>print_error</name>;</goto></then></if>
<break>break;</break>
</case><case>case <expr><name>svn_wc_notify_changelist_clear</name></expr>:
<if>if <condition>(<expr>(<name>err</name> = <call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Path '%s' is no longer a member of "
"a changelist.\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>path_local</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>print_error</name>;</goto></then></if>
<break>break;</break>
</case><case>case <expr><name>svn_wc_notify_changelist_moved</name></expr>:
<expr_stmt><expr><call><name>svn_handle_warning</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name><name>n</name>-&gt;<name>err</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>svn_wc_notify_merge_begin</name></expr>:
<if>if <condition>(<expr><name><name>n</name>-&gt;<name>merge_range</name></name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>err</name> = <call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"--- Merging differences between "
"repository URLs into '%s':\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>path_local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>n</name>-&gt;<name>merge_range</name>-&gt;<name>start</name></name> == <name><name>n</name>-&gt;<name>merge_range</name>-&gt;<name>end</name></name> - 1
|| <name><name>n</name>-&gt;<name>merge_range</name>-&gt;<name>start</name></name> == <name><name>n</name>-&gt;<name>merge_range</name>-&gt;<name>end</name></name></expr>)</condition><then>
<expr_stmt><expr><name>err</name> = <call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"--- Merging r%ld into '%s':\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>n</name>-&gt;<name>merge_range</name>-&gt;<name>end</name></name></expr></argument>, <argument><expr><name>path_local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>n</name>-&gt;<name>merge_range</name>-&gt;<name>start</name></name> - 1 == <name><name>n</name>-&gt;<name>merge_range</name>-&gt;<name>end</name></name></expr>)</condition><then>
<expr_stmt><expr><name>err</name> = <call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"--- Reverse-merging r%ld into '%s':\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>n</name>-&gt;<name>merge_range</name>-&gt;<name>start</name></name></expr></argument>, <argument><expr><name>path_local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>n</name>-&gt;<name>merge_range</name>-&gt;<name>start</name></name> &lt; <name><name>n</name>-&gt;<name>merge_range</name>-&gt;<name>end</name></name></expr>)</condition><then>
<expr_stmt><expr><name>err</name> = <call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"--- Merging r%ld through r%ld into "
"'%s':\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>n</name>-&gt;<name>merge_range</name>-&gt;<name>start</name></name> + 1</expr></argument>,
<argument><expr><name><name>n</name>-&gt;<name>merge_range</name>-&gt;<name>end</name></name></expr></argument>, <argument><expr><name>path_local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>err</name> = <call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"--- Reverse-merging r%ld through r%ld "
"into '%s':\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>n</name>-&gt;<name>merge_range</name>-&gt;<name>start</name></name></expr></argument>,
<argument><expr><name><name>n</name>-&gt;<name>merge_range</name>-&gt;<name>end</name></name> + 1</expr></argument>, <argument><expr><name>path_local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if></else></if></else></if>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<goto>goto <name>print_error</name>;</goto></then></if>
<break>break;</break>
</case><case>case <expr><name>svn_wc_notify_foreign_merge_begin</name></expr>:
<if>if <condition>(<expr><name><name>n</name>-&gt;<name>merge_range</name></name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>err</name> = <call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"--- Merging differences between "
"foreign repository URLs into '%s':\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>path_local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>n</name>-&gt;<name>merge_range</name>-&gt;<name>start</name></name> == <name><name>n</name>-&gt;<name>merge_range</name>-&gt;<name>end</name></name> - 1
|| <name><name>n</name>-&gt;<name>merge_range</name>-&gt;<name>start</name></name> == <name><name>n</name>-&gt;<name>merge_range</name>-&gt;<name>end</name></name></expr>)</condition><then>
<expr_stmt><expr><name>err</name> = <call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"--- Merging (from foreign repository) "
"r%ld into '%s':\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>n</name>-&gt;<name>merge_range</name>-&gt;<name>end</name></name></expr></argument>, <argument><expr><name>path_local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>n</name>-&gt;<name>merge_range</name>-&gt;<name>start</name></name> - 1 == <name><name>n</name>-&gt;<name>merge_range</name>-&gt;<name>end</name></name></expr>)</condition><then>
<expr_stmt><expr><name>err</name> = <call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"--- Reverse-merging (from foreign "
"repository) r%ld into '%s':\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>n</name>-&gt;<name>merge_range</name>-&gt;<name>start</name></name></expr></argument>, <argument><expr><name>path_local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>n</name>-&gt;<name>merge_range</name>-&gt;<name>start</name></name> &lt; <name><name>n</name>-&gt;<name>merge_range</name>-&gt;<name>end</name></name></expr>)</condition><then>
<expr_stmt><expr><name>err</name> = <call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"--- Merging (from foreign repository) "
"r%ld through r%ld into '%s':\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>n</name>-&gt;<name>merge_range</name>-&gt;<name>start</name></name> + 1</expr></argument>,
<argument><expr><name><name>n</name>-&gt;<name>merge_range</name>-&gt;<name>end</name></name></expr></argument>, <argument><expr><name>path_local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>err</name> = <call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"--- Reverse-merging (from foreign "
"repository) r%ld through r%ld into "
"'%s':\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>n</name>-&gt;<name>merge_range</name>-&gt;<name>start</name></name></expr></argument>,
<argument><expr><name><name>n</name>-&gt;<name>merge_range</name>-&gt;<name>end</name></name> + 1</expr></argument>, <argument><expr><name>path_local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if></else></if></else></if>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<goto>goto <name>print_error</name>;</goto></then></if>
<break>break;</break>
</case><default>default:
<break>break;</break>
</default>}</block></switch>
<if>if <condition>(<expr>(<name>err</name> = <call><name>svn_cmdline_fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<goto>goto <name>print_error</name>;</goto></then></if>
<return>return;</return>
<label><name>print_error</name>:</label>
<if>if <condition>(<expr>!<name><name>nb</name>-&gt;<name>had_print_error</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>nb</name>-&gt;<name>had_print_error</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_handle_error2</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr>"svn: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type>
<name>svn_cl__get_notifier</name><parameter_list>(<param><decl><type><name>svn_wc_notify_func2_t</name> *</type><name>notify_func_p</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>notify_baton_p</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>is_checkout</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>is_export</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>suppress_final_line</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>notify_baton</name> *</type><name>nb</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>nb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>nb</name>-&gt;<name>received_some_change</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nb</name>-&gt;<name>sent_first_txdelta</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nb</name>-&gt;<name>is_checkout</name></name> = <name>is_checkout</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nb</name>-&gt;<name>is_export</name></name> = <name>is_export</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nb</name>-&gt;<name>suppress_final_line</name></name> = <name>suppress_final_line</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nb</name>-&gt;<name>in_external</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nb</name>-&gt;<name>had_print_error</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>notify_func_p</name> = <name>notify</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>notify_baton_p</name> = <name>nb</name></expr>;</expr_stmt>
}</block></function>
</unit>
