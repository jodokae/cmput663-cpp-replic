<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/svn/proplist-cmd.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_cmdline.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error_codes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_xml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>svn_cl__opt_state_t</name> *</type><name>opt_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>is_url</name></decl>;</decl_stmt>
}</block></struct></type> <name>proplist_baton_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>proplist_receiver_xml</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>prop_hash</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_cl__opt_state_t</name> *</type><name>opt_state</name> <init>= <expr>((<name>proplist_baton_t</name> *)<name>baton</name>)-&gt;<name>opt_state</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>is_url</name> <init>= <expr>((<name>proplist_baton_t</name> *)<name>baton</name>)-&gt;<name>is_url</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>sb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name_local</name></decl>;</decl_stmt>
<if>if <condition>(<expr>! <name>is_url</name></expr>)</condition><then>
<expr_stmt><expr><name>name_local</name> = <call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>name_local</name> = <name>path</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>svn_xml_make_open_tag</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>svn_xml_normal</name></expr></argument>, <argument><expr>"target"</expr></argument>,
<argument><expr>"path"</expr></argument>, <argument><expr><name>name_local</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__print_xml_prop_hash</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>prop_hash</name></expr></argument>, <argument><expr>(! <name><name>opt_state</name>-&gt;<name>verbose</name></name>)</expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_xml_make_close_tag</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"target"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__error_checked_fputs</name><argument_list>(<argument><expr><name><name>sb</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>proplist_receiver</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>prop_hash</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_cl__opt_state_t</name> *</type><name>opt_state</name> <init>= <expr>((<name>proplist_baton_t</name> *)<name>baton</name>)-&gt;<name>opt_state</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>is_url</name> <init>= <expr>((<name>proplist_baton_t</name> *)<name>baton</name>)-&gt;<name>is_url</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name_local</name></decl>;</decl_stmt>
<if>if <condition>(<expr>! <name>is_url</name></expr>)</condition><then>
<expr_stmt><expr><name>name_local</name> = <call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>name_local</name> = <name>path</name></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr>!<name><name>opt_state</name>-&gt;<name>quiet</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Properties on '%s':\n"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name_local</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__print_prop_hash</name><argument_list>(<argument><expr><name>prop_hash</name></expr></argument>, <argument><expr>(! <name><name>opt_state</name>-&gt;<name>verbose</name></name>)</expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_cl__proplist</name><parameter_list>(<param><decl><type><name>apr_getopt_t</name> *</type><name>os</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_cl__opt_state_t</name> *</type><name>opt_state</name> <init>= <expr>((<name>svn_cl__cmd_baton_t</name> *) <name>baton</name>)-&gt;<name>opt_state</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_client_ctx_t</name> *</type><name>ctx</name> <init>= <expr>((<name>svn_cl__cmd_baton_t</name> *) <name>baton</name>)-&gt;<name>ctx</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>targets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__args_to_target_array_print_reserved</name><argument_list>(<argument><expr>&amp;<name>targets</name></expr></argument>, <argument><expr><name>os</name></expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>targets</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_opt_push_implicit_dot_target</name><argument_list>(<argument><expr><name>targets</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>revprop</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>URL</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>proplist</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__revprop_prepare</name><argument_list>(<argument><expr>&amp;<name><name>opt_state</name>-&gt;<name>start_revision</name></name></expr></argument>, <argument><expr><name>targets</name></expr></argument>,
<argument><expr>&amp;<name>URL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_client_revprop_list</name><argument_list>(<argument><expr>&amp;<name>proplist</name></expr></argument>,
<argument><expr><name>URL</name></expr></argument>, <argument><expr>&amp;(<name><name>opt_state</name>-&gt;<name>start_revision</name></name>)</expr></argument>,
<argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>xml</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>sb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>revstr</name> <init>= <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%ld"</expr></argument>, <argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__xml_print_header</name><argument_list>(<argument><expr>"properties"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_xml_make_open_tag</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>svn_xml_normal</name></expr></argument>,
<argument><expr>"revprops"</expr></argument>,
<argument><expr>"rev"</expr></argument>, <argument><expr><name>revstr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__print_xml_prop_hash</name>
<argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>proplist</name></expr></argument>, <argument><expr>(! <name><name>opt_state</name>-&gt;<name>verbose</name></name>)</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_xml_make_close_tag</name><argument_list>(<argument><expr>&amp;<name>sb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"revprops"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__error_checked_fputs</name><argument_list>(<argument><expr><name><name>sb</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__xml_print_footer</name><argument_list>(<argument><expr>"properties"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>SVN_ERR</name>
<argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Unversioned properties on revision %ld:\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__print_prop_hash</name>
<argument_list>(<argument><expr><name>proplist</name></expr></argument>, <argument><expr>(! <name><name>opt_state</name>-&gt;<name>verbose</name></name>)</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_proplist_receiver_t</name></type> <name>pl_receiver</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>xml</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__xml_print_header</name><argument_list>(<argument><expr>"properties"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pl_receiver</name> = <name>proplist_receiver_xml</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>pl_receiver</name> = <name>proplist_receiver</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>depth</name></name> == <name>svn_depth_unknown</name></expr>)</condition><then>
<expr_stmt><expr><name><name>opt_state</name>-&gt;<name>depth</name></name> = <name>svn_depth_empty</name></expr>;</expr_stmt></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>targets</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>targets</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proplist_baton_t</name></type> <name>pl_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>truepath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_opt_revision_t</name></type> <name>peg_revision</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__check_cancel</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>cancel_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pl_baton</name>.<name>is_url</name></name> = <call><name>svn_path_is_url</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pl_baton</name>.<name>opt_state</name></name> = <name>opt_state</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_opt_parse_path</name><argument_list>(<argument><expr>&amp;<name>peg_revision</name></expr></argument>, <argument><expr>&amp;<name>truepath</name></expr></argument>, <argument><expr><name>target</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__try</name>
<argument_list>(<argument><expr><call><name>svn_client_proplist3</name><argument_list>(<argument><expr><name>truepath</name></expr></argument>, <argument><expr>&amp;<name>peg_revision</name></expr></argument>,
<argument><expr>&amp;(<name><name>opt_state</name>-&gt;<name>start_revision</name></name>)</expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>depth</name></name></expr></argument>,
<argument><expr><name><name>opt_state</name>-&gt;<name>changelists</name></name></expr></argument>,
<argument><expr><name>pl_receiver</name></expr></argument>, <argument><expr>&amp;<name>pl_baton</name></expr></argument>,
<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>opt_state</name>-&gt;<name>quiet</name></name></expr></argument>,
<argument><expr><name>SVN_ERR_UNVERSIONED_RESOURCE</name></expr></argument>,
<argument><expr><name>SVN_ERR_ENTRY_NOT_FOUND</name></expr></argument>,
<argument><expr><name>SVN_NO_ERROR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr><name><name>opt_state</name>-&gt;<name>xml</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cl__xml_print_footer</name><argument_list>(<argument><expr>"properties"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
