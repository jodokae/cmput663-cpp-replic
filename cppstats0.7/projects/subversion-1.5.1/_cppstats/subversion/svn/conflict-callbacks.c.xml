<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/svn/conflict-callbacks.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STDIO</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_want.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_cmdline.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<function><type><name>svn_cl__conflict_baton_t</name> *</type>
<name>svn_cl__conflict_baton_make</name><parameter_list>(<param><decl><type><name>svn_cl__accept_t</name></type> <name>accept_which</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>config</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>editor_cmd</name></decl></param>,
<param><decl><type><name>svn_cmdline_prompt_baton_t</name> *</type><name>pb</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_cl__conflict_baton_t</name> *</type><name>b</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>accept_which</name></name> = <name>accept_which</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>config</name></name> = <name>config</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>editor_cmd</name></name> = <name>editor_cmd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>external_failed</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>pb</name></name> = <name>pb</name></expr>;</expr_stmt>
<return>return <expr><name>b</name></expr>;</return>
}</block></function>
<function><type><name>svn_cl__accept_t</name></type>
<name>svn_cl__accept_from_word</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>word</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><name>SVN_CL__ACCEPT_POSTPONE</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>svn_cl__accept_postpone</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><name>SVN_CL__ACCEPT_BASE</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>svn_cl__accept_base</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><name>SVN_CL__ACCEPT_WORKING</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>svn_cl__accept_working</name></expr>;</return></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
if (strcmp(word, SVN_CL__ACCEPT_MINE_CONFLICT) == 0)
return svn_cl__accept_mine_conflict;
if (strcmp(word, SVN_CL__ACCEPT_THEIRS_CONFLICT) == 0)
return svn_cl__accept_theirs_conflict;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><name>SVN_CL__ACCEPT_MINE_FULL</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>svn_cl__accept_mine_full</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><name>SVN_CL__ACCEPT_THEIRS_FULL</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>svn_cl__accept_theirs_full</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><name>SVN_CL__ACCEPT_EDIT</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>svn_cl__accept_edit</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><name>SVN_CL__ACCEPT_LAUNCH</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>svn_cl__accept_launch</name></expr>;</return></then></if>
<return>return <expr><name>svn_cl__accept_invalid</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>show_diff</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>performed_edit</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_wc_conflict_description_t</name> *</type><name>desc</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path1</name></decl>, *<decl><type ref="prev"/><name>path2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_diff_t</name> *</type><name>diff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_diff_file_options_t</name> *</type><name>options</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>desc</name>-&gt;<name>merged_file</name></name> &amp;&amp; <name><name>desc</name>-&gt;<name>base_file</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>path1</name> = <name><name>desc</name>-&gt;<name>base_file</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>path2</name> = <name><name>desc</name>-&gt;<name>merged_file</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>path1</name> = <name><name>desc</name>-&gt;<name>their_file</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>path2</name> = <name><name>desc</name>-&gt;<name>my_file</name></name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>options</name> = <call><name>svn_diff_file_options_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>options</name>-&gt;<name>ignore_eol_style</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_for_stdout</name><argument_list>(<argument><expr>&amp;<name>output</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_diff_file_diff_2</name><argument_list>(<argument><expr>&amp;<name>diff</name></expr></argument>, <argument><expr><name>path1</name></expr></argument>, <argument><expr><name>path2</name></expr></argument>,
<argument><expr><name>options</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_diff_file_output_unified2</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>diff</name></expr></argument>,
<argument><expr><name>path1</name></expr></argument>, <argument><expr><name>path2</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>APR_LOCALE_CHARSET</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>performed_edit</name> = <name>TRUE</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>open_editor</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>performed_edit</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_wc_conflict_description_t</name> *</type><name>desc</name></decl></param>,
<param><decl><type><name>svn_cl__conflict_baton_t</name> *</type><name>b</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>desc</name>-&gt;<name>merged_file</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>svn_cl__edit_file_externally</name><argument_list>(<argument><expr><name><name>desc</name>-&gt;<name>merged_file</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>editor_cmd</name></name></expr></argument>,
<argument><expr><name><name>b</name>-&gt;<name>config</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> &amp;&amp; (<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_CL_NO_EXTERNAL_EDITOR</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s\n"</expr></argument>,
<argument><expr><name><name>err</name>-&gt;<name>message</name></name> ? <name><name>err</name>-&gt;<name>message</name></name> :
<call><name>_</name><argument_list>(<argument><expr>"No editor found."</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>err</name> &amp;&amp; (<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_EXTERNAL_PROGRAM</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s\n"</expr></argument>,
<argument><expr><name><name>err</name>-&gt;<name>message</name></name> ? <name><name>err</name>-&gt;<name>message</name></name> :
<call><name>_</name><argument_list>(<argument><expr>"Error running editor."</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then>
<else>else
<expr_stmt><expr>*<name>performed_edit</name> = <name>TRUE</name></expr>;</expr_stmt></else></if></else></if></else></if>
}</block></then> <else>else
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Invalid option; there's no "
"merged version to edit.\n\n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>launch_resolver</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>performed_edit</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_wc_conflict_description_t</name> *</type><name>desc</name></decl></param>,
<param><decl><type><name>svn_cl__conflict_baton_t</name> *</type><name>b</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_cl__merge_file_externally</name><argument_list>(<argument><expr><name><name>desc</name>-&gt;<name>base_file</name></name></expr></argument>, <argument><expr><name><name>desc</name>-&gt;<name>their_file</name></name></expr></argument>,
<argument><expr><name><name>desc</name>-&gt;<name>my_file</name></name></expr></argument>, <argument><expr><name><name>desc</name>-&gt;<name>merged_file</name></name></expr></argument>,
<argument><expr><name><name>b</name>-&gt;<name>config</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> &amp;&amp; <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_CL_NO_EXTERNAL_MERGE_TOOL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s\n"</expr></argument>,
<argument><expr><name><name>err</name>-&gt;<name>message</name></name> ? <name><name>err</name>-&gt;<name>message</name></name> :
<call><name>_</name><argument_list>(<argument><expr>"No merge tool found.\n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>err</name> &amp;&amp; <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_EXTERNAL_PROGRAM</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s\n"</expr></argument>,
<argument><expr><name><name>err</name>-&gt;<name>message</name></name> ? <name><name>err</name>-&gt;<name>message</name></name> :
<call><name>_</name><argument_list>(<argument><expr>"Error running merge tool."</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then>
<else>else <if>if <condition>(<expr><name>performed_edit</name></expr>)</condition><then>
<expr_stmt><expr>*<name>performed_edit</name> = <name>TRUE</name></expr>;</expr_stmt></then></if></else></if></else></if></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_cl__conflict_handler</name><parameter_list>(<param><decl><type><name>svn_wc_conflict_result_t</name> **</type><name>result</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_wc_conflict_description_t</name> *</type><name>desc</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_cl__conflict_baton_t</name> *</type><name>b</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>result</name> = <call><name>svn_wc_create_conflict_result</name><argument_list>(<argument><expr><name>svn_wc_conflict_choose_postpone</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>b</name>-&gt;<name>accept_which</name></name></expr>)</condition> <block>{
<case>case <expr><name>svn_cl__accept_invalid</name></expr>:
</case><case>case <expr><name>svn_cl__accept_unspecified</name></expr>:
<break>break;</break>
</case><case>case <expr><name>svn_cl__accept_postpone</name></expr>:
<expr_stmt><expr><name>(*<name>result</name>)-&gt;<name>choice</name></name> = <name>svn_wc_conflict_choose_postpone</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
</case><case>case <expr><name>svn_cl__accept_base</name></expr>:
<expr_stmt><expr><name>(*<name>result</name>)-&gt;<name>choice</name></name> = <name>svn_wc_conflict_choose_base</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
</case><case>case <expr><name>svn_cl__accept_working</name></expr>:
<expr_stmt><expr><name>(*<name>result</name>)-&gt;<name>choice</name></name> = <name>svn_wc_conflict_choose_merged</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
</case><case>case <expr><name>svn_cl__accept_mine_conflict</name></expr>:
<expr_stmt><expr><name>(*<name>result</name>)-&gt;<name>choice</name></name> = <name>svn_wc_conflict_choose_mine_conflict</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
</case><case>case <expr><name>svn_cl__accept_theirs_conflict</name></expr>:
<expr_stmt><expr><name>(*<name>result</name>)-&gt;<name>choice</name></name> = <name>svn_wc_conflict_choose_theirs_conflict</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
</case><case>case <expr><name>svn_cl__accept_mine_full</name></expr>:
<expr_stmt><expr><name>(*<name>result</name>)-&gt;<name>choice</name></name> = <name>svn_wc_conflict_choose_mine_full</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
</case><case>case <expr><name>svn_cl__accept_theirs_full</name></expr>:
<expr_stmt><expr><name>(*<name>result</name>)-&gt;<name>choice</name></name> = <name>svn_wc_conflict_choose_theirs_full</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
</case><case>case <expr><name>svn_cl__accept_edit</name></expr>:
<if>if <condition>(<expr><name><name>desc</name>-&gt;<name>merged_file</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>b</name>-&gt;<name>external_failed</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>(*<name>result</name>)-&gt;<name>choice</name></name> = <name>svn_wc_conflict_choose_postpone</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>err</name> = <call><name>svn_cl__edit_file_externally</name><argument_list>(<argument><expr><name><name>desc</name>-&gt;<name>merged_file</name></name></expr></argument>,
<argument><expr><name><name>b</name>-&gt;<name>editor_cmd</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>config</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> &amp;&amp; (<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_CL_NO_EXTERNAL_EDITOR</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s\n"</expr></argument>,
<argument><expr><name><name>err</name>-&gt;<name>message</name></name> ? <name><name>err</name>-&gt;<name>message</name></name> :
<call><name>_</name><argument_list>(<argument><expr>"No editor found,"
" leaving all conflicts."</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>external_failed</name></name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>err</name> &amp;&amp; (<name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_EXTERNAL_PROGRAM</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s\n"</expr></argument>,
<argument><expr><name><name>err</name>-&gt;<name>message</name></name> ? <name><name>err</name>-&gt;<name>message</name></name> :
<call><name>_</name><argument_list>(<argument><expr>"Error running editor,"
" leaving all conflicts."</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>external_failed</name></name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then></if></else></if></else></if>
<expr_stmt><expr><name>(*<name>result</name>)-&gt;<name>choice</name></name> = <name>svn_wc_conflict_choose_merged</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<break>break;</break>
</case><case>case <expr><name>svn_cl__accept_launch</name></expr>:
<if>if <condition>(<expr><name><name>desc</name>-&gt;<name>base_file</name></name> &amp;&amp; <name><name>desc</name>-&gt;<name>their_file</name></name>
&amp;&amp; <name><name>desc</name>-&gt;<name>my_file</name></name> &amp;&amp; <name><name>desc</name>-&gt;<name>merged_file</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>b</name>-&gt;<name>external_failed</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>(*<name>result</name>)-&gt;<name>choice</name></name> = <name>svn_wc_conflict_choose_postpone</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>err</name> = <call><name>svn_cl__merge_file_externally</name><argument_list>(<argument><expr><name><name>desc</name>-&gt;<name>base_file</name></name></expr></argument>,
<argument><expr><name><name>desc</name>-&gt;<name>their_file</name></name></expr></argument>,
<argument><expr><name><name>desc</name>-&gt;<name>my_file</name></name></expr></argument>,
<argument><expr><name><name>desc</name>-&gt;<name>merged_file</name></name></expr></argument>,
<argument><expr><name><name>b</name>-&gt;<name>config</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> &amp;&amp; <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_CL_NO_EXTERNAL_MERGE_TOOL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s\n"</expr></argument>,
<argument><expr><name><name>err</name>-&gt;<name>message</name></name> ? <name><name>err</name>-&gt;<name>message</name></name> :
<call><name>_</name><argument_list>(<argument><expr>"No merge tool found,"
" leaving all conflicts."</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>external_failed</name></name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>err</name> &amp;&amp; <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_EXTERNAL_PROGRAM</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s\n"</expr></argument>,
<argument><expr><name><name>err</name>-&gt;<name>message</name></name> ? <name><name>err</name>-&gt;<name>message</name></name> :
<call><name>_</name><argument_list>(<argument><expr>"Error running merge tool"
" leaving all conflicts."</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>external_failed</name></name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then></if></else></if></else></if>
<expr_stmt><expr><name>(*<name>result</name>)-&gt;<name>choice</name></name> = <name>svn_wc_conflict_choose_merged</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<break>break;</break>
</case>}</block></switch>
<expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>((<name><name>desc</name>-&gt;<name>node_kind</name></name> == <name>svn_node_file</name>)
&amp;&amp; (<name><name>desc</name>-&gt;<name>action</name></name> == <name>svn_wc_conflict_action_edit</name>)
&amp;&amp; (<name><name>desc</name>-&gt;<name>reason</name></name> == <name>svn_wc_conflict_reason_edited</name>))
|| (<name><name>desc</name>-&gt;<name>kind</name></name> == <name>svn_wc_conflict_kind_property</name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>answer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>prompt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>diff_allowed</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>performed_edit</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>desc</name>-&gt;<name>kind</name></name> == <name>svn_wc_conflict_kind_text</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Conflict discovered in '%s'.\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>desc</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>desc</name>-&gt;<name>kind</name></name> == <name>svn_wc_conflict_kind_property</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Conflict for property '%s' discovered"
" on '%s'.\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>desc</name>-&gt;<name>property_name</name></name></expr></argument>, <argument><expr><name><name>desc</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(!<name><name>desc</name>-&gt;<name>my_file</name></name> &amp;&amp; <name><name>desc</name>-&gt;<name>their_file</name></name>)
|| (<name><name>desc</name>-&gt;<name>my_file</name></name> &amp;&amp; !<name><name>desc</name>-&gt;<name>their_file</name></name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>myval</name> <init>= <expr><name>NULL</name></expr></init>, *<name>theirval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>desc</name>-&gt;<name>my_file</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stringbuf_from_file</name><argument_list>(<argument><expr>&amp;<name>myval</name></expr></argument>, <argument><expr><name><name>desc</name>-&gt;<name>my_file</name></name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"They want to delete the property, "
"you want to change the value to '%s'.\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>myval</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stringbuf_from_file</name><argument_list>(<argument><expr>&amp;<name>theirval</name></expr></argument>, <argument><expr><name><name>desc</name>-&gt;<name>their_file</name></name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"They want to change the property value to '%s', "
"you want to delete the property.\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>theirval</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
}</block></then> <else>else
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></else></if></else></if>
<if>if <condition>(<expr>(<name><name>desc</name>-&gt;<name>merged_file</name></name> &amp;&amp; <name><name>desc</name>-&gt;<name>base_file</name></name>)
|| (!<name><name>desc</name>-&gt;<name>base_file</name></name> &amp;&amp; <name><name>desc</name>-&gt;<name>my_file</name></name> &amp;&amp; <name><name>desc</name>-&gt;<name>their_file</name></name>)</expr>)</condition><then>
<expr_stmt><expr><name>diff_allowed</name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
<while>while <condition>(<expr><name>TRUE</name></expr>)</condition> <block>{
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prompt</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Select: (p) postpone"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>diff_allowed</name></expr>)</condition><then>
<expr_stmt><expr><name>prompt</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><name>prompt</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>", (df) diff-full, (e) edit"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>prompt</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><name>prompt</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>", (mf) mine-full, (tf) theirs-full"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>performed_edit</name></expr>)</condition><then>
<expr_stmt><expr><name>prompt</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><name>prompt</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>", (r) resolved"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>prompt</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><name>prompt</name></expr></argument>, <argument><expr>",\n "</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prompt</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><name>prompt</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"(h) help for more options: "</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_prompt_user2</name><argument_list>(<argument><expr>&amp;<name>answer</name></expr></argument>, <argument><expr><name>prompt</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>pb</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr>"h"</expr></argument>)</argument_list></call> == 0 || <call><name>strcmp</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr>"?"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>" (p) postpone - mark the conflict to be "
"resolved later\n"
" (df) diff-full - show all changes made to merged file\n"
" (e) edit - change merged file in an editor\n"
" (r) resolved - accept merged version of file\n"
" (mf) mine-full - accept my version of entire file "
"(ignore their changes)\n"
" (tf) theirs-full - accept their version of entire file "
"(lose my changes)\n"
" (l) launch - launch external tool to "
"resolve conflict\n"
" (h) help - show this list\n\n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr>"p"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>(*<name>result</name>)-&gt;<name>choice</name></name> = <name>svn_wc_conflict_choose_postpone</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr>"mc"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_fprintf</name>
<argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Sorry, '(mc) mine for conflicts' "
"is not yet implemented; see\n"
"http://subversion.tigris.org/issues/show_bug.cgi?id=3049\n\n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr>"tc"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_fprintf</name>
<argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Sorry, '(tc) theirs for conflicts' "
"is not yet implemented; see\n"
"http://subversion.tigris.org/issues/show_bug.cgi?id=3049\n\n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr>"mf"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>(*<name>result</name>)-&gt;<name>choice</name></name> = <name>svn_wc_conflict_choose_mine_full</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr>"tf"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>(*<name>result</name>)-&gt;<name>choice</name></name> = <name>svn_wc_conflict_choose_theirs_full</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr>"dc"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_fprintf</name>
<argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Sorry, '(dc) diff of conflicts' "
"is not yet implemented; see\n"
"http://subversion.tigris.org/issues/show_bug.cgi?id=3048\n\n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr>"df"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr>! <name>diff_allowed</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Invalid option; there's no "
"merged version to diff.\n\n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>show_diff</name><argument_list>(<argument><expr>&amp;<name>performed_edit</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr>"e"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>open_editor</name><argument_list>(<argument><expr>&amp;<name>performed_edit</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr>"l"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>desc</name>-&gt;<name>base_file</name></name> &amp;&amp; <name><name>desc</name>-&gt;<name>their_file</name></name> &amp;&amp; <name><name>desc</name>-&gt;<name>my_file</name></name>
&amp;&amp; <name><name>desc</name>-&gt;<name>merged_file</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>launch_resolver</name><argument_list>(<argument><expr>&amp;<name>performed_edit</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Invalid option.\n\n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr>"r"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>performed_edit</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>(*<name>result</name>)-&gt;<name>choice</name></name> = <name>svn_wc_conflict_choose_merged</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then> <else>else
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Invalid option.\n\n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
}</block></while>
}</block></then>
<else>else <if>if <condition>(<expr>(<name><name>desc</name>-&gt;<name>action</name></name> == <name>svn_wc_conflict_action_add</name>)
&amp;&amp; (<name><name>desc</name>-&gt;<name>reason</name></name> == <name>svn_wc_conflict_reason_obstructed</name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>answer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prompt</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_fprintf</name><argument_list>(
<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Conflict discovered when trying to add '%s'.\n"
"An object of the same name already exists.\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>desc</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prompt</name> = <call><name>_</name><argument_list>(<argument><expr>"Select: (p) postpone, (mf) mine-full, "
"(tf) theirs-full, (h) help:"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>1</expr>)</condition> <block>{
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_prompt_user2</name><argument_list>(<argument><expr>&amp;<name>answer</name></expr></argument>, <argument><expr><name>prompt</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>pb</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr>"h"</expr></argument>)</argument_list></call> == 0 || <call><name>strcmp</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr>"?"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>" (p) postpone - resolve the conflict later\n"
" (mf) mine-full - accept pre-existing item "
"(ignore upstream addition)\n"
" (tf) theirs-full - accept incoming item "
"(overwrite pre-existing item)\n"
" (h) help - show this list\n\n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr>"p"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>(*<name>result</name>)-&gt;<name>choice</name></name> = <name>svn_wc_conflict_choose_postpone</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr>"mf"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>(*<name>result</name>)-&gt;<name>choice</name></name> = <name>svn_wc_conflict_choose_mine_full</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr>"tf"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>(*<name>result</name>)-&gt;<name>choice</name></name> = <name>svn_wc_conflict_choose_theirs_full</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr>"mc"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_fprintf</name>
<argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Sorry, '(mc) mine for conflicts' "
"is not yet implemented; see\n"
"http://subversion.tigris.org/issues/show_bug.cgi?id=3049\n\n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>answer</name></expr></argument>, <argument><expr>"tc"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_fprintf</name>
<argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Sorry, '(tc) theirs for conflicts' "
"is not yet implemented; see\n"
"http://subversion.tigris.org/issues/show_bug.cgi?id=3049\n\n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
}</block></while>
}</block></then>
<else>else <block>{
<expr_stmt><expr><name>(*<name>result</name>)-&gt;<name>choice</name></name> = <name>svn_wc_conflict_choose_postpone</name></expr>;</expr_stmt>
}</block></else></if></else></if>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
