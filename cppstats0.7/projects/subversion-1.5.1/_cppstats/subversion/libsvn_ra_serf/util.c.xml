<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/libsvn_ra_serf/util.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_want.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_fnmatch.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;serf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;serf_bucket_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_xml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_dep_compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ra_serf.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>XML_STATUS_OK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XML_STATUS_OK</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XML_STATUS_ERROR</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>SERF_VERSION_AT_LEAST</name><argument_list>(<argument><expr>0,1,3</expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>apr_uint32_t</name></type> <name><name>serf_failure_map</name><index>[]</index><index>[<expr>2</expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>SERF_SSL_CERT_NOTYETVALID</name></expr>, <expr><name>SVN_AUTH_SSL_NOTYETVALID</name></expr> }</block></expr>,
<expr><block>{ <expr><name>SERF_SSL_CERT_EXPIRED</name></expr>, <expr><name>SVN_AUTH_SSL_EXPIRED</name></expr> }</block></expr>,
<expr><block>{ <expr><name>SERF_SSL_CERT_SELF_SIGNED</name></expr>, <expr><name>SVN_AUTH_SSL_UNKNOWNCA</name></expr> }</block></expr>,
<expr><block>{ <expr><name>SERF_SSL_CERT_UNKNOWNCA</name></expr>, <expr><name>SVN_AUTH_SSL_UNKNOWNCA</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>apr_uint32_t</name></type>
<name>ssl_convert_serf_failures</name><parameter_list>(<param><decl><type><name>int</name></type> <name>failures</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>svn_failures</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <sizeof>sizeof<argument_list>(<argument><expr><name>serf_failure_map</name></expr></argument>)</argument_list></sizeof> / (2 * <sizeof>sizeof<argument_list>(<argument><expr><name>apr_uint32_t</name></expr></argument>)</argument_list></sizeof>)</expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<if>if <condition>(<expr><name>failures</name> &amp; <name><name>serf_failure_map</name><index>[<expr><name>i</name></expr>]</index><index>[<expr>0</expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>svn_failures</name> |= <name><name>serf_failure_map</name><index>[<expr><name>i</name></expr>]</index><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>failures</name> &amp;= ~<name><name>serf_failure_map</name><index>[<expr><name>i</name></expr>]</index><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr><name>failures</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>svn_failures</name> |= <name>SVN_AUTH_SSL_OTHER</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>svn_failures</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>char</name> *</type>
<name>convert_organisation_to_str</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>org</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>str</name></decl>;</decl_stmt>
<expr_stmt><expr><name>str</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s, %s, %s, %s, %s (%s)"</expr></argument>,
<argument><expr>(<name>char</name>*)<call><name>apr_hash_get</name><argument_list>(<argument><expr><name>org</name></expr></argument>, <argument><expr>"OU"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>(<name>char</name>*)<call><name>apr_hash_get</name><argument_list>(<argument><expr><name>org</name></expr></argument>, <argument><expr>"O"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>(<name>char</name>*)<call><name>apr_hash_get</name><argument_list>(<argument><expr><name>org</name></expr></argument>, <argument><expr>"L"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>(<name>char</name>*)<call><name>apr_hash_get</name><argument_list>(<argument><expr><name>org</name></expr></argument>, <argument><expr>"ST"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>(<name>char</name>*)<call><name>apr_hash_get</name><argument_list>(<argument><expr><name>org</name></expr></argument>, <argument><expr>"C"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>(<name>char</name>*)<call><name>apr_hash_get</name><argument_list>(<argument><expr><name>org</name></expr></argument>, <argument><expr>"E"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>str</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type>
<name>ssl_server_cert</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>int</name></type> <name>failures</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>serf_ssl_certificate_t</name> *</type><name>cert</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>conn</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_auth_ssl_server_cert_info_t</name></type> <name>cert_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_auth_cred_ssl_server_trust_t</name> *</type><name>server_creds</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_auth_iterstate_t</name> *</type><name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realmstring</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>svn_failures</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>issuer</name></decl>, *<decl><type ref="prev"/><name>subject</name></decl>, *<decl><type ref="prev"/><name>serf_cert</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>creds</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>subpool</name></expr></argument>, <argument><expr><name><name>conn</name>-&gt;<name>session</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>realmstring</name> = <call><name>apr_uri_unparse</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>,
<argument><expr>&amp;<name><name>conn</name>-&gt;<name>session</name>-&gt;<name>repos_url</name></name></expr></argument>,
<argument><expr><name>APR_URI_UNP_OMITPATHINFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>subject</name> = <call><name>serf_ssl_cert_subject</name><argument_list>(<argument><expr><name>cert</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>issuer</name> = <call><name>serf_ssl_cert_issuer</name><argument_list>(<argument><expr><name>cert</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>serf_cert</name> = <call><name>serf_ssl_cert_certificate</name><argument_list>(<argument><expr><name>cert</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cert_info</name>.<name>hostname</name></name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>subject</name></expr></argument>, <argument><expr>"CN"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cert_info</name>.<name>fingerprint</name></name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>serf_cert</name></expr></argument>, <argument><expr>"sha1"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name><name>cert_info</name>.<name>fingerprint</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>cert_info</name>.<name>fingerprint</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr>"&lt;unknown&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>cert_info</name>.<name>valid_from</name></name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>serf_cert</name></expr></argument>, <argument><expr>"notBefore"</expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name><name>cert_info</name>.<name>valid_from</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>cert_info</name>.<name>valid_from</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr>"[invalid date]"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>cert_info</name>.<name>valid_until</name></name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>serf_cert</name></expr></argument>, <argument><expr>"notAfter"</expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name><name>cert_info</name>.<name>valid_until</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>cert_info</name>.<name>valid_until</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr>"[invalid date]"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>cert_info</name>.<name>issuer_dname</name></name> = <call><name>convert_organisation_to_str</name><argument_list>(<argument><expr><name>issuer</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cert_info</name>.<name>ascii_cert</name></name> = "ce"</expr>;</expr_stmt>
<expr_stmt><expr><name>svn_failures</name> = <call><name>ssl_convert_serf_failures</name><argument_list>(<argument><expr><name>failures</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cert_info</name>.<name>hostname</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>apr_fnmatch</name><argument_list>(<argument><expr><name><name>cert_info</name>.<name>hostname</name></name></expr></argument>, <argument><expr><name><name>conn</name>-&gt;<name>hostinfo</name></name></expr></argument>,
<argument><expr><name>APR_FNM_PERIOD</name></expr></argument>)</argument_list></call> == <name>APR_FNM_NOMATCH</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>svn_failures</name> |= <name>SVN_AUTH_SSL_CNMISMATCH</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>svn_auth_set_parameter</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>session</name>-&gt;<name>wc_callbacks</name>-&gt;<name>auth_baton</name></name></expr></argument>,
<argument><expr><name>SVN_AUTH_PARAM_SSL_SERVER_FAILURES</name></expr></argument>,
<argument><expr>&amp;<name>svn_failures</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_auth_set_parameter</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>session</name>-&gt;<name>wc_callbacks</name>-&gt;<name>auth_baton</name></name></expr></argument>,
<argument><expr><name>SVN_AUTH_PARAM_SSL_SERVER_CERT_INFO</name></expr></argument>,
<argument><expr>&amp;<name>cert_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_auth_first_credentials</name><argument_list>(<argument><expr>&amp;<name>creds</name></expr></argument>, <argument><expr>&amp;<name>state</name></expr></argument>,
<argument><expr><name>SVN_AUTH_CRED_SSL_SERVER_TRUST</name></expr></argument>,
<argument><expr><name>realmstring</name></expr></argument>,
<argument><expr><name><name>conn</name>-&gt;<name>session</name>-&gt;<name>wc_callbacks</name>-&gt;<name>auth_baton</name></name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> || ! <name>creds</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>server_creds</name> = <name>creds</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_auth_save_credentials</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
<expr_stmt><expr><call><name>svn_auth_set_parameter</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>session</name>-&gt;<name>wc_callbacks</name>-&gt;<name>auth_baton</name></name></expr></argument>,
<argument><expr><name>SVN_AUTH_PARAM_SSL_SERVER_CERT_INFO</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>server_creds</name> ? <name>APR_SUCCESS</name> : <name>SVN_ERR_RA_SERF_SSL_CERT_UNTRUSTED</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>load_authorities</name><parameter_list>(<param><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>conn</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>authorities</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>files</name></decl>, *<decl><type ref="prev"/><name>file</name></decl>, *<decl><type ref="prev"/><name>last</name></decl>;</decl_stmt>
<expr_stmt><expr><name>files</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>authorities</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>(<name>file</name> = <call><name>apr_strtok</name><argument_list>(<argument><expr><name>files</name></expr></argument>, <argument><expr>";"</expr></argument>, <argument><expr>&amp;<name>last</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>serf_ssl_certificate_t</name> *</type><name>ca_cert</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><call><name>serf_ssl_load_cert_file</name><argument_list>(<argument><expr>&amp;<name>ca_cert</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name></expr>)</condition><then>
<expr_stmt><expr><name>status</name> = <call><name>serf_ssl_trust_cert</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>ssl_context</name></name></expr></argument>, <argument><expr><name>ca_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_INVALID_CONFIG_VALUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Invalid config: unable to load certificate file '%s'"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>files</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>serf_bucket_t</name> *</type>
<name>svn_ra_serf__conn_setup</name><parameter_list>(<param><decl><type><name>apr_socket_t</name> *</type><name>sock</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>serf_bucket_t</name> *</type><name>bucket</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>conn</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>SERF_VERSION_AT_LEAST</name><argument_list>(<argument><expr>0,1,3</expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>bucket</name> = <call><name>serf_context_bucket_socket_create</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>session</name>-&gt;<name>context</name></name></expr></argument>,
<argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>conn</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>bucket</name> = <call><name>serf_bucket_socket_create</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>conn</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name><name>conn</name>-&gt;<name>using_ssl</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>bucket</name> = <call><name>serf_bucket_ssl_decrypt_create</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>, <argument><expr><name><name>conn</name>-&gt;<name>ssl_context</name></name></expr></argument>,
<argument><expr><name><name>conn</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>conn</name>-&gt;<name>ssl_context</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conn</name>-&gt;<name>ssl_context</name></name> = <call><name>serf_bucket_ssl_decrypt_context_get</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>SERF_VERSION_AT_LEAST</name><argument_list>(<argument><expr>0,1,1</expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>serf_ssl_client_cert_provider_set</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>ssl_context</name></name></expr></argument>,
<argument><expr><name>svn_ra_serf__handle_client_cert</name></expr></argument>,
<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>conn</name>-&gt;<name>session</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serf_ssl_client_cert_password_set</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>ssl_context</name></name></expr></argument>,
<argument><expr><name>svn_ra_serf__handle_client_cert_pw</name></expr></argument>,
<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>conn</name>-&gt;<name>session</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>SERF_VERSION_AT_LEAST</name><argument_list>(<argument><expr>0,1,3</expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>serf_ssl_server_cert_callback_set</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>ssl_context</name></name></expr></argument>,
<argument><expr><name>ssl_server_cert</name></expr></argument>,
<argument><expr><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>conn</name>-&gt;<name>session</name>-&gt;<name>trust_default_ca</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>serf_ssl_use_default_certificates</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>ssl_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>conn</name>-&gt;<name>session</name>-&gt;<name>ssl_authorities</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> = <call><name>load_authorities</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>conn</name>-&gt;<name>session</name>-&gt;<name>ssl_authorities</name></name></expr></argument>,
<argument><expr><name><name>conn</name>-&gt;<name>session</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>bucket</name></expr>;</return>
}</block></function>
<function><type><name>serf_bucket_t</name>*</type>
<name>svn_ra_serf__accept_response</name><parameter_list>(<param><decl><type><name>serf_request_t</name> *</type><name>request</name></decl></param>,
<param><decl><type><name>serf_bucket_t</name> *</type><name>stream</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>acceptor_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>serf_bucket_t</name> *</type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>serf_bucket_alloc_t</name> *</type><name>bkt_alloc</name></decl>;</decl_stmt>
<expr_stmt><expr><name>bkt_alloc</name> = <call><name>serf_request_get_alloc</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> = <call><name>serf_bucket_barrier_create</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>bkt_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>serf_bucket_response_create</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>bkt_alloc</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>serf_bucket_t</name>*</type>
<name>accept_head</name><parameter_list>(<param><decl><type><name>serf_request_t</name> *</type><name>request</name></decl></param>,
<param><decl><type><name>serf_bucket_t</name> *</type><name>stream</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>acceptor_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>serf_bucket_t</name> *</type><name>response</name></decl>;</decl_stmt>
<expr_stmt><expr><name>response</name> = <call><name>svn_ra_serf__accept_response</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>acceptor_baton</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serf_bucket_response_set_head</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>response</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>svn_ra_serf__conn_closed</name><parameter_list>(<param><decl><type><name>serf_connection_t</name> *</type><name>conn</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>closed_baton</name></decl></param>,
<param><decl><type><name>apr_status_t</name></type> <name>why</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>our_conn</name> <init>= <expr><name>closed_baton</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>why</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>our_conn</name>-&gt;<name>using_ssl</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>our_conn</name>-&gt;<name>ssl_context</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>our_conn</name>-&gt;<name>session</name>-&gt;<name>auth_protocol</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name><name>our_conn</name>-&gt;<name>session</name>-&gt;<name>auth_protocol</name>-&gt;<name>init_conn_func</name></name><argument_list>(<argument><expr><name><name>our_conn</name>-&gt;<name>session</name></name></expr></argument>,
<argument><expr><name>our_conn</name></expr></argument>,
<argument><expr><name><name>our_conn</name>-&gt;<name>session</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><name>apr_status_t</name></type>
<name>svn_ra_serf__cleanup_serf_session</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_serf__session_t</name> *</type><name>serf_sess</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>serf_sess</name>-&gt;<name>pending_error</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>serf_sess</name>-&gt;<name>num_conns</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>serf_sess</name>-&gt;<name>conns</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>serf_connection_close</name><argument_list>(<argument><expr><name><name>serf_sess</name>-&gt;<name>conns</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>serf_sess</name>-&gt;<name>conns</name><index>[<expr><name>i</name></expr>]</index></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>svn_ra_serf__handle_client_cert</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>cert_path</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>conn</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name> <init>= <expr><name><name>conn</name>-&gt;<name>session</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_port_t</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>creds</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>cert_path</name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>session</name>-&gt;<name>repos_url</name>.<name>port_str</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>port</name> = <name><name>session</name>-&gt;<name>repos_url</name>.<name>port</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>port</name> = <call><name>apr_uri_port_of_scheme</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>repos_url</name>.<name>scheme</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>realm</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"%s://%s:%d"</expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>repos_url</name>.<name>scheme</name></name></expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>repos_url</name>.<name>hostname</name></name></expr></argument>,
<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>conn</name>-&gt;<name>ssl_client_auth_state</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>svn_auth_first_credentials</name><argument_list>(<argument><expr>&amp;<name>creds</name></expr></argument>,
<argument><expr>&amp;<name><name>conn</name>-&gt;<name>ssl_client_auth_state</name></name></expr></argument>,
<argument><expr><name>SVN_AUTH_CRED_SSL_CLIENT_CERT</name></expr></argument>,
<argument><expr><name>realm</name></expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>wc_callbacks</name>-&gt;<name>auth_baton</name></name></expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>err</name> = <call><name>svn_auth_next_credentials</name><argument_list>(<argument><expr>&amp;<name>creds</name></expr></argument>,
<argument><expr><name><name>conn</name>-&gt;<name>ssl_client_auth_state</name></name></expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>session</name>-&gt;<name>pending_error</name></name> = <name>err</name></expr>;</expr_stmt>
<return>return <expr><name><name>err</name>-&gt;<name>apr_err</name></name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>creds</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_auth_cred_ssl_client_cert_t</name> *</type><name>client_creds</name></decl>;</decl_stmt>
<expr_stmt><expr><name>client_creds</name> = <name>creds</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>cert_path</name> = <name><name>client_creds</name>-&gt;<name>cert_file</name></name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>svn_ra_serf__handle_client_cert_pw</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cert_path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>password</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>conn</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name> <init>= <expr><name><name>conn</name>-&gt;<name>session</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>creds</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>password</name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>conn</name>-&gt;<name>ssl_client_pw_auth_state</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>svn_auth_first_credentials</name><argument_list>(<argument><expr>&amp;<name>creds</name></expr></argument>,
<argument><expr>&amp;<name><name>conn</name>-&gt;<name>ssl_client_pw_auth_state</name></name></expr></argument>,
<argument><expr><name>SVN_AUTH_CRED_SSL_CLIENT_CERT_PW</name></expr></argument>,
<argument><expr><name>cert_path</name></expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>wc_callbacks</name>-&gt;<name>auth_baton</name></name></expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>err</name> = <call><name>svn_auth_next_credentials</name><argument_list>(<argument><expr>&amp;<name>creds</name></expr></argument>,
<argument><expr><name><name>conn</name>-&gt;<name>ssl_client_pw_auth_state</name></name></expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>session</name>-&gt;<name>pending_error</name></name> = <name>err</name></expr>;</expr_stmt>
<return>return <expr><name><name>err</name>-&gt;<name>apr_err</name></name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>creds</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_auth_cred_ssl_client_cert_pw_t</name> *</type><name>pw_creds</name></decl>;</decl_stmt>
<expr_stmt><expr><name>pw_creds</name> = <name>creds</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>password</name> = <name><name>pw_creds</name>-&gt;<name>password</name></name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>svn_ra_serf__setup_serf_req</name><parameter_list>(<param><decl><type><name>serf_request_t</name> *</type><name>request</name></decl></param>,
<param><decl><type><name>serf_bucket_t</name> **</type><name>req_bkt</name></decl></param>,
<param><decl><type><name>serf_bucket_t</name> **</type><name>ret_hdrs_bkt</name></decl></param>,
<param><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>conn</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>method</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
<param><decl><type><name>serf_bucket_t</name> *</type><name>body_bkt</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>content_type</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>serf_bucket_t</name> *</type><name>hdrs_bkt</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>req_bkt</name> = <call><name>serf_bucket_request_create</name><argument_list>(<argument><expr><name>method</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>body_bkt</name></expr></argument>,
<argument><expr><call><name>serf_request_get_alloc</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hdrs_bkt</name> = <call><name>serf_bucket_request_get_headers</name><argument_list>(<argument><expr>*<name>req_bkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serf_bucket_headers_setn</name><argument_list>(<argument><expr><name>hdrs_bkt</name></expr></argument>, <argument><expr>"Host"</expr></argument>, <argument><expr><name><name>conn</name>-&gt;<name>hostinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serf_bucket_headers_setn</name><argument_list>(<argument><expr><name>hdrs_bkt</name></expr></argument>, <argument><expr>"User-Agent"</expr></argument>, <argument><expr><name><name>conn</name>-&gt;<name>useragent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>content_type</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>serf_bucket_headers_setn</name><argument_list>(<argument><expr><name>hdrs_bkt</name></expr></argument>, <argument><expr>"Content-Type"</expr></argument>, <argument><expr><name>content_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>conn</name>-&gt;<name>session</name>-&gt;<name>auth_protocol</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name><name>conn</name>-&gt;<name>session</name>-&gt;<name>auth_protocol</name>-&gt;<name>setup_request_func</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>hdrs_bkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>conn</name>-&gt;<name>session</name>-&gt;<name>proxy_auth_protocol</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name><name>conn</name>-&gt;<name>session</name>-&gt;<name>proxy_auth_protocol</name>-&gt;<name>setup_request_func</name></name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>hdrs_bkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>conn</name>-&gt;<name>using_ssl</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>req_bkt</name> = <call><name>serf_bucket_ssl_encrypt_create</name><argument_list>(<argument><expr>*<name>req_bkt</name></expr></argument>, <argument><expr><name><name>conn</name>-&gt;<name>ssl_context</name></name></expr></argument>,
<argument><expr><call><name>serf_request_get_alloc</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>conn</name>-&gt;<name>ssl_context</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conn</name>-&gt;<name>ssl_context</name></name> = <call><name>serf_bucket_ssl_encrypt_context_get</name><argument_list>(<argument><expr>*<name>req_bkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>SERF_VERSION_AT_LEAST</name><argument_list>(<argument><expr>0,1,1</expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>serf_ssl_client_cert_provider_set</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>ssl_context</name></name></expr></argument>,
<argument><expr><name>svn_ra_serf__handle_client_cert</name></expr></argument>,
<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>conn</name>-&gt;<name>session</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serf_ssl_client_cert_password_set</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>ssl_context</name></name></expr></argument>,
<argument><expr><name>svn_ra_serf__handle_client_cert_pw</name></expr></argument>,
<argument><expr><name>conn</name></expr></argument>, <argument><expr><name><name>conn</name>-&gt;<name>session</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></then></if>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>SERF_VERSION_AT_LEAST</name><argument_list>(<argument><expr>0,1,3</expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name><name>conn</name>-&gt;<name>session</name>-&gt;<name>using_proxy</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>root</name> <init>= <expr><call><name>apr_uri_unparse</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>session</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>&amp;<name><name>conn</name>-&gt;<name>session</name>-&gt;<name>repos_url</name></name></expr></argument>,
<argument><expr><name>APR_URI_UNP_OMITPATHINFO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>serf_bucket_request_set_root</name><argument_list>(<argument><expr>*<name>req_bkt</name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>ret_hdrs_bkt</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>ret_hdrs_bkt</name> = <name>hdrs_bkt</name></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__context_run_wait</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>done</name></decl></param>,
<param><decl><type><name>svn_ra_serf__session_t</name> *</type><name>sess</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sess</name>-&gt;<name>pending_error</name></name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt>
<while>while <condition>(<expr>!*<name>done</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>sess</name>-&gt;<name>wc_callbacks</name></name> &amp;&amp;
<name><name>sess</name>-&gt;<name>wc_callbacks</name>-&gt;<name>cancel_func</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call>(<name><name>sess</name>-&gt;<name>wc_callbacks</name>-&gt;<name>cancel_func</name></name>)<argument_list>(<argument><expr><name><name>sess</name>-&gt;<name>wc_callback_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>status</name> = <call><name>serf_context_run</name><argument_list>(<argument><expr><name><name>sess</name>-&gt;<name>context</name></name></expr></argument>, <argument><expr><name>SERF_DURATION_FOREVER</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_TIMEUP</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr><name><name>sess</name>-&gt;<name>pending_error</name></name></expr>)</condition><then> <block>{
<return>return <expr><name><name>sess</name>-&gt;<name>pending_error</name></name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>status</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_wrap_apr</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr>"Error running context"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>serf_debug__closed_conn</name><argument_list>(<argument><expr><name><name>sess</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>sess</name>-&gt;<name>num_conns</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>serf_debug__closed_conn</name><argument_list>(<argument><expr><name><name>sess</name>-&gt;<name>conns</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>bkt_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></while>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>! <call><name>SERF_VERSION_AT_LEAST</name><argument_list>(<argument><expr>0, 1, 3</expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>apr_status_t</name></type>
<name>svn_ra_serf__is_conn_closing</name><parameter_list>(<param><decl><type><name>serf_bucket_t</name> *</type><name>response</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>serf_bucket_t</name> *</type><name>hdrs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><name>hdrs</name> = <call><name>serf_bucket_response_get_headers</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> = <call><name>serf_bucket_headers_get</name><argument_list>(<argument><expr><name>hdrs</name></expr></argument>, <argument><expr>"Connection"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>val</name> &amp;&amp; <call><name>svn_cstring_casecmp</name><argument_list>(<argument><expr>"close"</expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<return>return <expr><name>SERF_ERROR_CLOSING</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>APR_EOF</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>start_error</name><parameter_list>(<param><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>userData</name></decl></param>,
<param><decl><type><name>svn_ra_serf__dav_props_t</name></type> <name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>attrs</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_serf__server_error_t</name> *</type><name>ctx</name> <init>= <expr><name>userData</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>ctx</name>-&gt;<name>in_error</name></name> &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>namespace</name></name></expr></argument>, <argument><expr>"DAV:"</expr></argument>)</argument_list></call> == 0 &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"error"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>in_error</name></name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>in_error</name></name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"human-readable"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err_code</name></decl>;</decl_stmt>
<expr_stmt><expr><name>err_code</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"errcode"</expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err_code</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>error</name>-&gt;<name>apr_err</name></name> = <call><name>apr_atoi64</name><argument_list>(<argument><expr><name>err_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>error</name>-&gt;<name>apr_err</name></name> = <name>APR_EGENERAL</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>svn_stringbuf_setempty</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>cdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>collect_cdata</name></name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then></if></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>end_error</name><parameter_list>(<param><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>userData</name></decl></param>,
<param><decl><type><name>svn_ra_serf__dav_props_t</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_serf__server_error_t</name> *</type><name>ctx</name> <init>= <expr><name>userData</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>in_error</name></name> &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>namespace</name></name></expr></argument>, <argument><expr>"DAV:"</expr></argument>)</argument_list></call> == 0 &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"error"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>in_error</name></name> = <name>FALSE</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>in_error</name></name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"human-readable"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cd</name> <init>= <expr><name><name>ctx</name>-&gt;<name>cdata</name>-&gt;<name>data</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>*<name>cd</name> == '\n'</expr>)</condition><then>
<expr_stmt><expr>++<name>cd</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>cd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>len</name> &gt; 0 &amp;&amp; <name><name>cd</name><index>[<expr><name>len</name>-1</expr>]</index></name> == '\n'</expr>)</condition><then>
<expr_stmt><expr>--<name>len</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>error</name>-&gt;<name>message</name></name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>error</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>cd</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>collect_cdata</name></name> = <name>FALSE</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>cdata_error</name><parameter_list>(<param><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>userData</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_serf__server_error_t</name> *</type><name>ctx</name> <init>= <expr><name>userData</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>collect_cdata</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>cdata</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type>
<name>svn_ra_serf__handle_discard_body</name><parameter_list>(<param><decl><type><name>serf_request_t</name> *</type><name>request</name></decl></param>,
<param><decl><type><name>serf_bucket_t</name> *</type><name>response</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__server_error_t</name> *</type><name>server_err</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>server_err</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name><name>server_err</name>-&gt;<name>init</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>serf_bucket_t</name> *</type><name>hdrs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>server_err</name>-&gt;<name>init</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hdrs</name> = <call><name>serf_bucket_response_get_headers</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> = <call><name>serf_bucket_headers_get</name><argument_list>(<argument><expr><name>hdrs</name></expr></argument>, <argument><expr>"Content-Type"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>val</name> &amp;&amp; <call><name>strncasecmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr>"text/xml"</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>"text/xml"</expr></argument>)</argument_list></sizeof> - 1</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>server_err</name>-&gt;<name>error</name></name> = <call><name>svn_error_create</name><argument_list>(<argument><expr><name>APR_SUCCESS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server_err</name>-&gt;<name>has_xml_response</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server_err</name>-&gt;<name>cdata</name></name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server_err</name>-&gt;<name>collect_cdata</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server_err</name>-&gt;<name>parser</name>.<name>pool</name></name> = <name><name>server_err</name>-&gt;<name>error</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server_err</name>-&gt;<name>parser</name>.<name>user_data</name></name> = <name>server_err</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server_err</name>-&gt;<name>parser</name>.<name>start</name></name> = <name>start_error</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server_err</name>-&gt;<name>parser</name>.<name>end</name></name> = <name>end_error</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server_err</name>-&gt;<name>parser</name>.<name>cdata</name></name> = <name>cdata_error</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server_err</name>-&gt;<name>parser</name>.<name>done</name></name> = &amp;<name><name>server_err</name>-&gt;<name>done</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server_err</name>-&gt;<name>parser</name>.<name>ignore_errors</name></name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>server_err</name>-&gt;<name>error</name></name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>server_err</name>-&gt;<name>has_xml_response</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>status</name> = <call><name>svn_ra_serf__handle_xml_parser</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>response</name></expr></argument>,
<argument><expr>&amp;<name><name>server_err</name>-&gt;<name>parser</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>server_err</name>-&gt;<name>done</name></name> &amp;&amp; <name><name>server_err</name>-&gt;<name>error</name>-&gt;<name>apr_err</name></name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name><name>server_err</name>-&gt;<name>error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server_err</name>-&gt;<name>error</name></name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>status</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<while>while <condition>(<expr>1</expr>)</condition> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><name>status</name> = <call><name>serf_bucket_read</name><argument_list>(<argument><expr><name>response</name></expr></argument>, <argument><expr><name>SERF_READ_ALL_AVAIL</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name></expr>)</condition><then> <block>{
<return>return <expr><name>status</name></expr>;</return>
}</block></then></if>
}</block></while>
}</block></function>
<function><type><name>apr_status_t</name></type>
<name>svn_ra_serf__handle_status_only</name><parameter_list>(<param><decl><type><name>serf_request_t</name> *</type><name>request</name></decl></param>,
<param><decl><type><name>serf_bucket_t</name> *</type><name>response</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__simple_request_context_t</name> *</type><name>ctx</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>status</name> = <call><name>svn_ra_serf__handle_discard_body</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>response</name></expr></argument>,
<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>server_error</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_EOF</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>serf_status_line</name></type> <name>sl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>serf_bucket_response_status</name><argument_list>(<argument><expr><name>response</name></expr></argument>, <argument><expr>&amp;<name>sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>status</name></name> = <name><name>sl</name>.<name>code</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>reason</name></name> = <name><name>sl</name>.<name>reason</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>done</name></name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>status</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>start_207</name><parameter_list>(<param><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>userData</name></decl></param>,
<param><decl><type><name>svn_ra_serf__dav_props_t</name></type> <name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>attrs</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_serf__server_error_t</name> *</type><name>ctx</name> <init>= <expr><name>userData</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>ctx</name>-&gt;<name>in_error</name></name> &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>namespace</name></name></expr></argument>, <argument><expr>"DAV:"</expr></argument>)</argument_list></call> == 0 &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"multistatus"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>in_error</name></name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>in_error</name></name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"responsedescription"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_stringbuf_setempty</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>cdata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>collect_cdata</name></name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then></if></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>end_207</name><parameter_list>(<param><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>userData</name></decl></param>,
<param><decl><type><name>svn_ra_serf__dav_props_t</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_serf__server_error_t</name> *</type><name>ctx</name> <init>= <expr><name>userData</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>in_error</name></name> &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>namespace</name></name></expr></argument>, <argument><expr>"DAV:"</expr></argument>)</argument_list></call> == 0 &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"multistatus"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>in_error</name></name> = <name>FALSE</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>in_error</name></name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"responsedescription"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>collect_cdata</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>error</name>-&gt;<name>message</name></name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>error</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>cdata</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>cdata</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>error</name>-&gt;<name>apr_err</name></name> = <name>SVN_ERR_RA_DAV_REQUEST_FAILED</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>cdata_207</name><parameter_list>(<param><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>userData</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_serf__server_error_t</name> *</type><name>ctx</name> <init>= <expr><name>userData</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>collect_cdata</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>cdata</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type>
<name>svn_ra_serf__handle_multistatus_only</name><parameter_list>(<param><decl><type><name>serf_request_t</name> *</type><name>request</name></decl></param>,
<param><decl><type><name>serf_bucket_t</name> *</type><name>response</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__simple_request_context_t</name> *</type><name>ctx</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__server_error_t</name> *</type><name>server_err</name> <init>= <expr>&amp;<name><name>ctx</name>-&gt;<name>server_error</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>server_err</name> &amp;&amp; !<name><name>server_err</name>-&gt;<name>init</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>serf_bucket_t</name> *</type><name>hdrs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>server_err</name>-&gt;<name>init</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hdrs</name> = <call><name>serf_bucket_response_get_headers</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> = <call><name>serf_bucket_headers_get</name><argument_list>(<argument><expr><name>hdrs</name></expr></argument>, <argument><expr>"Content-Type"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>val</name> &amp;&amp; <call><name>strncasecmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr>"text/xml"</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>"text/xml"</expr></argument>)</argument_list></sizeof> - 1</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>server_err</name>-&gt;<name>error</name></name> = <call><name>svn_error_create</name><argument_list>(<argument><expr><name>APR_SUCCESS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server_err</name>-&gt;<name>has_xml_response</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server_err</name>-&gt;<name>cdata</name></name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server_err</name>-&gt;<name>collect_cdata</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server_err</name>-&gt;<name>parser</name>.<name>pool</name></name> = <name><name>server_err</name>-&gt;<name>error</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server_err</name>-&gt;<name>parser</name>.<name>user_data</name></name> = <name>server_err</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server_err</name>-&gt;<name>parser</name>.<name>start</name></name> = <name>start_207</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server_err</name>-&gt;<name>parser</name>.<name>end</name></name> = <name>end_207</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server_err</name>-&gt;<name>parser</name>.<name>cdata</name></name> = <name>cdata_207</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server_err</name>-&gt;<name>parser</name>.<name>done</name></name> = &amp;<name><name>ctx</name>-&gt;<name>done</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server_err</name>-&gt;<name>parser</name>.<name>ignore_errors</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>svn_ra_serf__handle_xml_parser</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>response</name></expr></argument>,
<argument><expr>&amp;<name><name>server_err</name>-&gt;<name>parser</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>done</name></name> &amp;&amp; <name><name>server_err</name>-&gt;<name>error</name>-&gt;<name>apr_err</name></name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name><name>server_err</name>-&gt;<name>error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server_err</name>-&gt;<name>error</name></name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>done</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server_err</name>-&gt;<name>error</name></name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><name>status</name> = <call><name>svn_ra_serf__handle_discard_body</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>response</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_EOF</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>serf_status_line</name></type> <name>sl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>serf_bucket_response_status</name><argument_list>(<argument><expr><name>response</name></expr></argument>, <argument><expr>&amp;<name>sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>status</name></name> = <name><name>sl</name>.<name>code</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>reason</name></name> = <name><name>sl</name>.<name>reason</name></name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>status</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>start_xml</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>userData</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>raw_name</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>attrs</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser</name> <init>= <expr><name>userData</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__dav_props_t</name></type> <name>name</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>parser</name>-&gt;<name>error</name></name></expr>)</condition><then>
<return>return;</return></then></if>
<if>if <condition>(<expr>!<name><name>parser</name>-&gt;<name>state</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_ra_serf__xml_push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>svn_ra_serf__define_ns</name><argument_list>(<argument><expr>&amp;<name><name>parser</name>-&gt;<name>state</name>-&gt;<name>ns_list</name></name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> = <call><name>svn_ra_serf__expand_ns</name><argument_list>(<argument><expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>ns_list</name></name></expr></argument>, <argument><expr><name>raw_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name>-&gt;<name>error</name></name> = <call><name><name>parser</name>-&gt;<name>start</name></name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name>-&gt;<name>user_data</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>end_xml</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>userData</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>raw_name</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser</name> <init>= <expr><name>userData</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__dav_props_t</name></type> <name>name</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>parser</name>-&gt;<name>error</name></name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>name</name> = <call><name>svn_ra_serf__expand_ns</name><argument_list>(<argument><expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>ns_list</name></name></expr></argument>, <argument><expr><name>raw_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name>-&gt;<name>error</name></name> = <call><name><name>parser</name>-&gt;<name>end</name></name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name>-&gt;<name>user_data</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>cdata_xml</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>userData</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>int</name></type> <name>len</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser</name> <init>= <expr><name>userData</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>parser</name>-&gt;<name>error</name></name></expr>)</condition><then>
<return>return;</return></then></if>
<if>if <condition>(<expr>!<name><name>parser</name>-&gt;<name>state</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_ra_serf__xml_push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>parser</name>-&gt;<name>error</name></name> = <call><name><name>parser</name>-&gt;<name>cdata</name></name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name><name>parser</name>-&gt;<name>user_data</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>apr_status_t</name></type>
<name>svn_ra_serf__handle_xml_parser</name><parameter_list>(<param><decl><type><name>serf_request_t</name> *</type><name>request</name></decl></param>,
<param><decl><type><name>serf_bucket_t</name> *</type><name>response</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>serf_status_line</name></type> <name>sl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xml_status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>ctx</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>serf_bucket_response_status</name><argument_list>(<argument><expr><name>response</name></expr></argument>, <argument><expr>&amp;<name>sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>status_code</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name><name>ctx</name>-&gt;<name>status_code</name></name> = <name><name>sl</name>.<name>code</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>sl</name>.<name>code</name></name> == 404 &amp;&amp; <name><name>ctx</name>-&gt;<name>ignore_errors</name></name> == <name>FALSE</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name><name>ctx</name>-&gt;<name>status_code</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>*<name><name>ctx</name>-&gt;<name>done</name></name> == <name>FALSE</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name><name>ctx</name>-&gt;<name>done</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>done_list</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>done_item</name>-&gt;<name>data</name></name> = <name><name>ctx</name>-&gt;<name>user_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>done_item</name>-&gt;<name>next</name></name> = *<name><name>ctx</name>-&gt;<name>done_list</name></name></expr>;</expr_stmt>
<expr_stmt><expr>*<name><name>ctx</name>-&gt;<name>done_list</name></name> = <name><name>ctx</name>-&gt;<name>done_item</name></name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>error</name></name> = <call><name>svn_ra_serf__handle_server_error</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>response</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_ra_serf__handle_discard_body</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>response</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>ctx</name>-&gt;<name>xmlp</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>xmlp</name></name> = <call><name>XML_ParserCreate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XML_SetUserData</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>xmlp</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XML_SetElementHandler</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>xmlp</name></name></expr></argument>, <argument><expr><name>start_xml</name></expr></argument>, <argument><expr><name>end_xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>cdata</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>XML_SetCharacterDataHandler</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>xmlp</name></name></expr></argument>, <argument><expr><name>cdata_xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<while>while <condition>(<expr>1</expr>)</condition> <block>{
<expr_stmt><expr><name>status</name> = <call><name>serf_bucket_read</name><argument_list>(<argument><expr><name>response</name></expr></argument>, <argument><expr>8000</expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>SERF_BUCKET_READ_ERROR</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>status</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>xml_status</name> = <call><name>XML_Parse</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>xmlp</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>xml_status</name> == <name>XML_STATUS_ERROR</name> &amp;&amp; <name><name>ctx</name>-&gt;<name>ignore_errors</name></name> == <name>FALSE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>XML_ParserFree</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>xmlp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>ctx</name>-&gt;<name>status_code</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>*<name><name>ctx</name>-&gt;<name>done</name></name> == <name>FALSE</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name><name>ctx</name>-&gt;<name>done</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>done_list</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>done_item</name>-&gt;<name>data</name></name> = <name><name>ctx</name>-&gt;<name>user_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>done_item</name>-&gt;<name>next</name></name> = *<name><name>ctx</name>-&gt;<name>done_list</name></name></expr>;</expr_stmt>
<expr_stmt><expr>*<name><name>ctx</name>-&gt;<name>done_list</name></name> = <name><name>ctx</name>-&gt;<name>done_item</name></name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>error</name></name> = <call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"XML parsing failed: (%d %s)"</expr></argument>,
<argument><expr><name><name>sl</name>.<name>code</name></name></expr></argument>, <argument><expr><name><name>sl</name>.<name>reason</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>ctx</name>-&gt;<name>error</name>-&gt;<name>apr_err</name></name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>error</name></name> &amp;&amp; <name><name>ctx</name>-&gt;<name>ignore_errors</name></name> == <name>FALSE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>XML_ParserFree</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>xmlp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>ctx</name>-&gt;<name>error</name>-&gt;<name>apr_err</name></name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_EAGAIN</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>status</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_EOF</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>xml_status</name> = <call><name>XML_Parse</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>xmlp</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XML_ParserFree</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>xmlp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>xml_status</name> == <name>XML_STATUS_ERROR</name> &amp;&amp; <name><name>ctx</name>-&gt;<name>ignore_errors</name></name> == <name>FALSE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>*<name><name>ctx</name>-&gt;<name>done</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>done_list</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>done_item</name>-&gt;<name>data</name></name> = <name><name>ctx</name>-&gt;<name>user_data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>done_item</name>-&gt;<name>next</name></name> = *<name><name>ctx</name>-&gt;<name>done_list</name></name></expr>;</expr_stmt>
<expr_stmt><expr>*<name><name>ctx</name>-&gt;<name>done_list</name></name> = <name><name>ctx</name>-&gt;<name>done_item</name></name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>status</name></expr>;</return>
}</block></then></if>
}</block></while>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__handle_server_error</name><parameter_list>(<param><decl><type><name>serf_request_t</name> *</type><name>request</name></decl></param>,
<param><decl><type><name>serf_bucket_t</name> *</type><name>response</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_serf__server_error_t</name></type> <name>server_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>server_err</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>server_err</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>svn_ra_serf__handle_discard_body</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>response</name></expr></argument>,
<argument><expr>&amp;<name>server_err</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>! <call><name>SERF_VERSION_AT_LEAST</name><argument_list>(<argument><expr>0, 1, 3</expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_EOF</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>status</name> = <call><name>svn_ra_serf__is_conn_closing</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> == <name>SERF_ERROR_CLOSING</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>serf_connection_reset</name><argument_list>(<argument><expr><call><name>serf_request_get_conn</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name><name>server_err</name>.<name>error</name></name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type>
<name>handle_response</name><parameter_list>(<param><decl><type><name>serf_request_t</name> *</type><name>request</name></decl></param>,
<param><decl><type><name>serf_bucket_t</name> *</type><name>response</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_serf__handler_t</name> *</type><name>ctx</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>serf_status_line</name></type> <name>sl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>response</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>response_error</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>status</name> = <call><name><name>ctx</name>-&gt;<name>response_error</name></name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>response</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>response_error_baton</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name></expr>)</condition><then> <block>{
<return>return <expr><name>status</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>svn_ra_serf__request_create</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>status</name> = <call><name>serf_bucket_response_status</name><argument_list>(<argument><expr><name>response</name></expr></argument>, <argument><expr>&amp;<name>sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>SERF_BUCKET_READ_ERROR</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>status</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>sl</name>.<name>version</name></name> &amp;&amp; (<call><name>APR_STATUS_IS_EOF</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call> ||
<call><name>APR_STATUS_IS_EAGAIN</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>status</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>status</name> = <call><name>serf_bucket_response_wait_for_headers</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>APR_STATUS_IS_EOF</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>status</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>method</name></name></expr></argument>, <argument><expr>"HEAD"</expr></argument>)</argument_list></call> != 0 &amp;&amp; <name><name>sl</name>.<name>code</name></name> != 204 &amp;&amp; <name><name>sl</name>.<name>code</name></name> != 304</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>session</name>-&gt;<name>pending_error</name></name> =
<call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Premature EOF seen from server"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>conn</name>-&gt;<name>last_status_code</name></name> == 401 &amp;&amp; <name><name>sl</name>.<name>code</name></name> &lt; 400</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_auth_save_credentials</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>session</name>-&gt;<name>auth_state</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>session</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>session</name>-&gt;<name>auth_attempts</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>session</name>-&gt;<name>auth_state</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>session</name>-&gt;<name>realm</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>conn</name>-&gt;<name>last_status_code</name></name> = <name><name>sl</name>.<name>code</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>sl</name>.<name>code</name></name> == 401 || <name><name>sl</name>.<name>code</name></name> == 407</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_ra_serf__handle_auth</name><argument_list>(<argument><expr><name><name>sl</name>.<name>code</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>session</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>conn</name></name></expr></argument>,
<argument><expr><name>request</name></expr></argument>, <argument><expr><name>response</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>session</name>-&gt;<name>pending_error</name></name> = <name>err</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_ra_serf__handle_discard_body</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>response</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>ctx</name>-&gt;<name>session</name>-&gt;<name>pending_error</name>-&gt;<name>apr_err</name></name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>status</name> = <call><name>svn_ra_serf__handle_discard_body</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>response</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <call><name>APR_STATUS_IS_EAGAIN</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_ra_serf__priority_request_create</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
}</block></then> <else>else <if>if <condition>(<expr><name><name>sl</name>.<name>code</name></name> == 409 || <name><name>sl</name>.<name>code</name></name> &gt;= 500</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>session</name>-&gt;<name>pending_error</name></name> =
<call><name>svn_ra_serf__handle_server_error</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>response</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>ctx</name>-&gt;<name>session</name>-&gt;<name>pending_error</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>session</name>-&gt;<name>pending_error</name></name> =
<call><name>svn_error_create</name><argument_list>(<argument><expr><name>APR_EGENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Unspecified error message"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>status</name> = <call><name><name>ctx</name>-&gt;<name>response_handler</name></name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>response</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>response_baton</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>! <call><name>SERF_VERSION_AT_LEAST</name><argument_list>(<argument><expr>0, 1, 3</expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_EOF</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>status</name> = <call><name>svn_ra_serf__is_conn_closing</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>status</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type>
<name>setup_request</name><parameter_list>(<param><decl><type><name>serf_request_t</name> *</type><name>request</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>setup_baton</name></decl></param>,
<param><decl><type><name>serf_bucket_t</name> **</type><name>req_bkt</name></decl></param>,
<param><decl><type><name>serf_response_acceptor_t</name> *</type><name>acceptor</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>acceptor_baton</name></decl></param>,
<param><decl><type><name>serf_response_handler_t</name> *</type><name>handler</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>handler_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_serf__handler_t</name> *</type><name>ctx</name> <init>= <expr><name>setup_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>serf_bucket_t</name> *</type><name>headers_bkt</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>acceptor</name> = <name>svn_ra_serf__accept_response</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>acceptor_baton</name> = <name><name>ctx</name>-&gt;<name>session</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>delegate</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<expr_stmt><expr><name>status</name> = <call><name><name>ctx</name>-&gt;<name>delegate</name></name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>delegate_baton</name></name></expr></argument>, <argument><expr><name>req_bkt</name></expr></argument>,
<argument><expr><name>acceptor</name></expr></argument>, <argument><expr><name>acceptor_baton</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>, <argument><expr><name>handler_baton</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name></expr>)</condition><then> <block>{
<return>return <expr><name>status</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>response_handler</name></name> = *<name>handler</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>response_baton</name></name> = *<name>handler_baton</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>method</name></name></expr></argument>, <argument><expr>"HEAD"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>acceptor</name> = <name>accept_head</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>body_delegate</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>body_buckets</name></name> =
<call><name><name>ctx</name>-&gt;<name>body_delegate</name></name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>body_delegate_baton</name></name></expr></argument>,
<argument><expr><call><name>serf_request_get_alloc</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>svn_ra_serf__setup_serf_req</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>req_bkt</name></expr></argument>, <argument><expr>&amp;<name>headers_bkt</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>conn</name></name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>method</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>body_buckets</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>body_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>header_delegate</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name><name>ctx</name>-&gt;<name>header_delegate</name></name><argument_list>(<argument><expr><name>headers_bkt</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>header_delegate_baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
<expr_stmt><expr>*<name>handler</name> = <name>handle_response</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>handler_baton</name> = <name>ctx</name></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><name>serf_request_t</name> *</type>
<name>svn_ra_serf__request_create</name><parameter_list>(<param><decl><type><name>svn_ra_serf__handler_t</name> *</type><name>handler</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>serf_connection_request_create</name><argument_list>(<argument><expr><name><name>handler</name>-&gt;<name>conn</name>-&gt;<name>conn</name></name></expr></argument>,
<argument><expr><name>setup_request</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>serf_request_t</name> *</type>
<name>svn_ra_serf__priority_request_create</name><parameter_list>(<param><decl><type><name>svn_ra_serf__handler_t</name> *</type><name>handler</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>SERF_VERSION_AT_LEAST</name><argument_list>(<argument><expr>0,1,3</expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>serf_connection_priority_request_create</name><argument_list>(<argument><expr><name><name>handler</name>-&gt;<name>conn</name>-&gt;<name>conn</name></name></expr></argument>,
<argument><expr><name>setup_request</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>serf_connection_request_create</name><argument_list>(<argument><expr><name><name>handler</name>-&gt;<name>conn</name>-&gt;<name>conn</name></name></expr></argument>,
<argument><expr><name>setup_request</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__discover_root</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>vcc_url</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>rel_path</name></decl></param>,
<param><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name></decl></param>,
<param><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>conn</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>orig_path</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>, *<decl><type ref="prev"/><name>relative_path</name></decl>, *<decl><type ref="prev"/><name>present_path</name> <init>= <expr>""</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>session</name>-&gt;<name>vcc_url</name></name> &amp;&amp; !<name>rel_path</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>vcc_url</name> = <name><name>session</name>-&gt;<name>vcc_url</name></name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>props</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> = <name>orig_path</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>vcc_url</name> = <name>NULL</name></expr>;</expr_stmt>
<do>do <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_serf__retrieve_props</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>,
<argument><expr><name>path</name></expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
<argument><expr>"0"</expr></argument>, <argument><expr><name>base_props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>vcc_url</name> =
<call><name>svn_ra_serf__get_ver_prop</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
<argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
<argument><expr>"DAV:"</expr></argument>,
<argument><expr>"version-controlled-configuration"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>vcc_url</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>relative_path</name> = <call><name>svn_ra_serf__get_ver_prop</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
<argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
<argument><expr><name>SVN_DAV_PROP_NS_DAV</name></expr></argument>,
<argument><expr>"baseline-relative-path"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>present_path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><call><name>svn_path_basename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>present_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> = <call><name>svn_path_dirname</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block> while <condition>(<expr>!<call><name>svn_path_is_empty</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
<if>if <condition>(<expr>!*<name>vcc_url</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_OPTIONS_REQ_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"The OPTIONS response did not include the "
"requested version-controlled-configuration "
"value"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>session</name>-&gt;<name>vcc_url</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>session</name>-&gt;<name>vcc_url</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>*<name>vcc_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>session</name>-&gt;<name>repos_root_str</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>url_buf</name></decl>;</decl_stmt>
<expr_stmt><expr><name>url_buf</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_path_remove_components</name><argument_list>(<argument><expr><name>url_buf</name></expr></argument>,
<argument><expr><call><name>svn_path_component_count</name><argument_list>(<argument><expr><name>relative_path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>session</name>-&gt;<name>repos_root</name></name> = <name><name>session</name>-&gt;<name>repos_url</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>session</name>-&gt;<name>repos_root</name>.<name>path</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>url_buf</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>session</name>-&gt;<name>repos_root_str</name></name> =
<call><name>svn_path_canonicalize</name><argument_list>(<argument><expr><call><name>apr_uri_unparse</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>&amp;<name><name>session</name>-&gt;<name>repos_root</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>rel_path</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>present_path</name><index>[<expr>0</expr>]</index></name> != '\0'</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>rel_path</name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name>relative_path</name></expr></argument>,
<argument><expr><name>present_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>rel_path</name> = <name>relative_path</name></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
