<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/libsvn_ra_serf/log.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_uri.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;expat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;serf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_ra.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_dav.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_xml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libsvn_ra/ra_loader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_delta.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_dav_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ra_serf.h"</cpp:file></cpp:include>
<typedef>typedef <type><enum>enum <block>{
<decl><name>NONE</name> <init>= <expr>0</expr></init></decl>,
<decl><name>REPORT</name></decl>,
<decl><name>ITEM</name></decl>,
<decl><name>VERSION</name></decl>,
<decl><name>CREATOR</name></decl>,
<decl><name>DATE</name></decl>,
<decl><name>COMMENT</name></decl>,
<decl><name>REVPROP</name></decl>,
<decl><name>HAS_CHILDREN</name></decl>,
<decl><name>ADDED_PATH</name></decl>,
<decl><name>REPLACED_PATH</name></decl>,
<decl><name>DELETED_PATH</name></decl>,
<decl><name>MODIFIED_PATH</name></decl>,
}</block></enum></type> <name>log_state_e</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>tmp_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_log_changed_path_t</name> *</type><name>tmp_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_log_entry_t</name> *</type><name>log_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>revprop_name</name></decl>;</decl_stmt>
}</block></struct></type> <name>log_info_t</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nest_level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>changed_paths</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>done</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status_code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_log_entry_receiver_t</name></type> <name>receiver</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>receiver_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>want_author</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>want_date</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>want_message</name></decl>;</decl_stmt>
}</block></struct></type> <name>log_context_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>log_info_t</name> *</type>
<name>push_state</name><parameter_list>(<param><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser</name></decl></param>,
<param><decl><type><name>log_context_t</name> *</type><name>log_ctx</name></decl></param>,
<param><decl><type><name>log_state_e</name></type> <name>state</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>svn_ra_serf__xml_push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>state</name> == <name>ITEM</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>log_info_t</name> *</type><name>info</name></decl>;</decl_stmt>
<expr_stmt><expr><name>info</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>log_entry</name></name> = <call><name>svn_log_entry_create</name><argument_list>(<argument><expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>pool</name></name> = <name><name>parser</name>-&gt;<name>state</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>log_entry</name>-&gt;<name>revision</name></name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>private</name></name> = <name>info</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>state</name> == <name>ADDED_PATH</name> || <name>state</name> == <name>REPLACED_PATH</name> ||
<name>state</name> == <name>DELETED_PATH</name> || <name>state</name> == <name>MODIFIED_PATH</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>log_info_t</name> *</type><name>info</name> <init>= <expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>private</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>info</name>-&gt;<name>log_entry</name>-&gt;<name>changed_paths</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>info</name>-&gt;<name>log_entry</name>-&gt;<name>changed_paths</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>info</name>-&gt;<name>tmp_path</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name><name>info</name>-&gt;<name>tmp_path</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>tmp_path</name>-&gt;<name>copyfrom_rev</name></name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>state</name> == <name>CREATOR</name> || <name>state</name> == <name>DATE</name> || <name>state</name> == <name>COMMENT</name>
|| <name>state</name> == <name>REVPROP</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>log_info_t</name> *</type><name>info</name> <init>= <expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>private</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>info</name>-&gt;<name>log_entry</name>-&gt;<name>revprops</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>info</name>-&gt;<name>log_entry</name>-&gt;<name>revprops</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<return>return <expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>private</name></name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>start_log</name><parameter_list>(<param><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>userData</name></decl></param>,
<param><decl><type><name>svn_ra_serf__dav_props_t</name></type> <name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>attrs</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>log_context_t</name> *</type><name>log_ctx</name> <init>= <expr><name>userData</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>log_state_e</name></type> <name>state</name></decl>;</decl_stmt>
<expr_stmt><expr><name>state</name> = <name><name>parser</name>-&gt;<name>state</name>-&gt;<name>current_state</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>state</name> == <name>NONE</name> &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"log-report"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>REPORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>state</name> == <name>REPORT</name> &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"log-item"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>ITEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>state</name> == <name>ITEM</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>log_info_t</name> *</type><name>info</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr><name>SVN_DAV__VERSION_NAME</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"creator-displayname"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>CREATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"date"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>DATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"comment"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>COMMENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"revprop"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>info</name> = <call><name>push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>REVPROP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>revprop_name</name></name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"name"</expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>info</name>-&gt;<name>revprop_name</name></name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Missing name attr in revprop element"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"has-children"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>HAS_CHILDREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"added-path"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copy_path</name></decl>, *<decl><type ref="prev"/><name>copy_rev_str</name></decl>;</decl_stmt>
<expr_stmt><expr><name>info</name> = <call><name>push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>ADDED_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>tmp_path</name>-&gt;<name>action</name></name> = 'A'</expr>;</expr_stmt>
<expr_stmt><expr><name>copy_path</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"copyfrom-path"</expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>copy_rev_str</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"copyfrom-rev"</expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>copy_path</name> &amp;&amp; <name>copy_rev_str</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>copy_rev</name></decl>;</decl_stmt>
<expr_stmt><expr><name>copy_rev</name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name>copy_rev_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>copy_rev</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>info</name>-&gt;<name>tmp_path</name>-&gt;<name>copyfrom_path</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name>copy_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>tmp_path</name>-&gt;<name>copyfrom_rev</name></name> = <name>copy_rev</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"replaced-path"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copy_path</name></decl>, *<decl><type ref="prev"/><name>copy_rev_str</name></decl>;</decl_stmt>
<expr_stmt><expr><name>info</name> = <call><name>push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>REPLACED_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>tmp_path</name>-&gt;<name>action</name></name> = 'R'</expr>;</expr_stmt>
<expr_stmt><expr><name>copy_path</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"copyfrom-path"</expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>copy_rev_str</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"copyfrom-rev"</expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>copy_path</name> &amp;&amp; <name>copy_rev_str</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>copy_rev</name></decl>;</decl_stmt>
<expr_stmt><expr><name>copy_rev</name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name>copy_rev_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>copy_rev</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>info</name>-&gt;<name>tmp_path</name>-&gt;<name>copyfrom_path</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name>copy_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>tmp_path</name>-&gt;<name>copyfrom_rev</name></name> = <name>copy_rev</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"deleted-path"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>info</name> = <call><name>push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>DELETED_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>tmp_path</name>-&gt;<name>action</name></name> = 'D'</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"modified-path"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>info</name> = <call><name>push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>MODIFIED_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>tmp_path</name>-&gt;<name>action</name></name> = 'M'</expr>;</expr_stmt>
}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
}</block></then></if></else></if></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>end_log</name><parameter_list>(<param><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>userData</name></decl></param>,
<param><decl><type><name>svn_ra_serf__dav_props_t</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>log_context_t</name> *</type><name>log_ctx</name> <init>= <expr><name>userData</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>log_state_e</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>log_info_t</name> *</type><name>info</name></decl>;</decl_stmt>
<expr_stmt><expr><name>state</name> = <name><name>parser</name>-&gt;<name>state</name>-&gt;<name>current_state</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>info</name> = <name><name>parser</name>-&gt;<name>state</name>-&gt;<name>private</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>state</name> == <name>REPORT</name> &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"log-report"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_ra_serf__xml_pop_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>state</name> == <name>ITEM</name> &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"log-item"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>log_ctx</name>-&gt;<name>limit</name></name> &amp;&amp; (<name><name>log_ctx</name>-&gt;<name>nest_level</name></name> == 0)
&amp;&amp; (++<name><name>log_ctx</name>-&gt;<name>count</name></name> &gt; <name><name>log_ctx</name>-&gt;<name>limit</name></name>)</expr>)</condition><then> <block>{
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>log_ctx</name>-&gt;<name>receiver</name></name><argument_list>(<argument><expr><name><name>log_ctx</name>-&gt;<name>receiver_baton</name></name></expr></argument>,
<argument><expr><name><name>info</name>-&gt;<name>log_entry</name></name></expr></argument>,
<argument><expr><name><name>info</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>info</name>-&gt;<name>log_entry</name>-&gt;<name>has_children</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>log_ctx</name>-&gt;<name>nest_level</name></name>++</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>! <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>log_entry</name>-&gt;<name>revision</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>log_ctx</name>-&gt;<name>nest_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>log_ctx</name>-&gt;<name>nest_level</name></name>--</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>svn_ra_serf__xml_pop_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>state</name> == <name>VERSION</name> &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr><name>SVN_DAV__VERSION_NAME</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>info</name>-&gt;<name>log_entry</name>-&gt;<name>revision</name></name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>tmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>tmp_len</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_ra_serf__xml_pop_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>state</name> == <name>CREATOR</name> &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"creator-displayname"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>log_ctx</name>-&gt;<name>want_author</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>log_entry</name>-&gt;<name>revprops</name></name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_AUTHOR</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><call><name>svn_string_ncreate</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>tmp</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>tmp_len</name></name></expr></argument>,
<argument><expr><name><name>info</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>info</name>-&gt;<name>tmp_len</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_ra_serf__xml_pop_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>state</name> == <name>DATE</name> &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"date"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>log_ctx</name>-&gt;<name>want_date</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>log_entry</name>-&gt;<name>revprops</name></name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_DATE</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><call><name>svn_string_ncreate</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>tmp</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>tmp_len</name></name></expr></argument>,
<argument><expr><name><name>info</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>info</name>-&gt;<name>tmp_len</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_ra_serf__xml_pop_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>state</name> == <name>COMMENT</name> &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"comment"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>log_ctx</name>-&gt;<name>want_message</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>log_entry</name>-&gt;<name>revprops</name></name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_LOG</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><call><name>svn_string_ncreate</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>tmp</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>tmp_len</name></name></expr></argument>,
<argument><expr><name><name>info</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>info</name>-&gt;<name>tmp_len</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_ra_serf__xml_pop_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>state</name> == <name>REVPROP</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>log_entry</name>-&gt;<name>revprops</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>revprop_name</name></name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><call><name>svn_string_ncreate</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>tmp</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>tmp_len</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>tmp_len</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_ra_serf__xml_pop_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>state</name> == <name>HAS_CHILDREN</name> &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"has-children"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>info</name>-&gt;<name>log_entry</name>-&gt;<name>has_children</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_ra_serf__xml_pop_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>(<name>state</name> == <name>ADDED_PATH</name> &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"added-path"</expr></argument>)</argument_list></call> == 0) ||
(<name>state</name> == <name>DELETED_PATH</name> &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"deleted-path"</expr></argument>)</argument_list></call> == 0) ||
(<name>state</name> == <name>MODIFIED_PATH</name> &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"modified-path"</expr></argument>)</argument_list></call> == 0) ||
(<name>state</name> == <name>REPLACED_PATH</name> &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"replaced-path"</expr></argument>)</argument_list></call> == 0)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<expr_stmt><expr><name>path</name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>tmp</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>tmp_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>tmp_len</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>log_entry</name>-&gt;<name>changed_paths</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><name><name>info</name>-&gt;<name>tmp_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_ra_serf__xml_pop_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>cdata_log</name><parameter_list>(<param><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>userData</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>log_context_t</name> *</type><name>log_ctx</name> <init>= <expr><name>userData</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>log_state_e</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>log_info_t</name> *</type><name>info</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>UNUSED_CTX</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>state</name> = <name><name>parser</name>-&gt;<name>state</name>-&gt;<name>current_state</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>info</name> = <name><name>parser</name>-&gt;<name>state</name>-&gt;<name>private</name></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>state</name></expr>)</condition> <block>{
<case>case <expr><name>VERSION</name></expr>:
</case><case>case <expr><name>CREATOR</name></expr>:
</case><case>case <expr><name>DATE</name></expr>:
</case><case>case <expr><name>COMMENT</name></expr>:
</case><case>case <expr><name>REVPROP</name></expr>:
</case><case>case <expr><name>ADDED_PATH</name></expr>:
</case><case>case <expr><name>REPLACED_PATH</name></expr>:
</case><case>case <expr><name>DELETED_PATH</name></expr>:
</case><case>case <expr><name>MODIFIED_PATH</name></expr>:
<expr_stmt><expr><call><name>svn_ra_serf__expand_string</name><argument_list>(<argument><expr>&amp;<name><name>info</name>-&gt;<name>tmp</name></name></expr></argument>, <argument><expr>&amp;<name><name>info</name>-&gt;<name>tmp_len</name></name></expr></argument>,
<argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<break>break;</break>
</default>}</block></switch>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__get_log</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>paths</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>start</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>end</name></decl></param>,
<param><decl><type><name>int</name></type> <name>limit</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>discover_changed_paths</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>strict_node_history</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>include_merged_revisions</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>revprops</name></decl></param>,
<param><decl><type><name>svn_log_entry_receiver_t</name></type> <name>receiver</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>receiver_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>log_context_t</name> *</type><name>log_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name> <init>= <expr><name><name>ra_session</name>-&gt;<name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__handler_t</name> *</type><name>handler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>serf_bucket_t</name> *</type><name>buckets</name></decl>, *<decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>want_custom_revprops</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>peg_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>relative_url</name></decl>, *<decl><type ref="prev"/><name>basecoll_url</name></decl>, *<decl><type ref="prev"/><name>req_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><name>log_ctx</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>log_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>log_ctx</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>log_ctx</name>-&gt;<name>receiver</name></name> = <name>receiver</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>log_ctx</name>-&gt;<name>receiver_baton</name></name> = <name>receiver_baton</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>log_ctx</name>-&gt;<name>limit</name></name> = <name>limit</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>log_ctx</name>-&gt;<name>nest_level</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>log_ctx</name>-&gt;<name>changed_paths</name></name> = <name>discover_changed_paths</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>log_ctx</name>-&gt;<name>done</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buckets</name> = <call><name>serf_bucket_aggregate_create</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr>"&lt;S:log-report xmlns:S=\""</expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>"&lt;S:log-report xmlns:S=\""</expr></argument>)</argument_list></sizeof>-1</expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name>buckets</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr><name>SVN_XML_NAMESPACE</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVN_XML_NAMESPACE</name></expr></argument>)</argument_list></sizeof>-1</expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name>buckets</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr>"\"&gt;"</expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>"\"&gt;"</expr></argument>)</argument_list></sizeof>-1</expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name>buckets</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_ra_serf__add_tag_buckets</name><argument_list>(<argument><expr><name>buckets</name></expr></argument>,
<argument><expr>"S:start-revision"</expr></argument>, <argument><expr><call><name>apr_ltoa</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_ra_serf__add_tag_buckets</name><argument_list>(<argument><expr><name>buckets</name></expr></argument>,
<argument><expr>"S:end-revision"</expr></argument>, <argument><expr><call><name>apr_ltoa</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>limit</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_ra_serf__add_tag_buckets</name><argument_list>(<argument><expr><name>buckets</name></expr></argument>,
<argument><expr>"S:limit"</expr></argument>, <argument><expr><call><name>apr_ltoa</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>discover_changed_paths</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_ra_serf__add_tag_buckets</name><argument_list>(<argument><expr><name>buckets</name></expr></argument>,
<argument><expr>"S:discover-changed-paths"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>strict_node_history</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_ra_serf__add_tag_buckets</name><argument_list>(<argument><expr><name>buckets</name></expr></argument>,
<argument><expr>"S:strict-node-history"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>include_merged_revisions</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_ra_serf__add_tag_buckets</name><argument_list>(<argument><expr><name>buckets</name></expr></argument>,
<argument><expr>"S:include-merged-revisions"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>want_custom_revprops</name> = <name>FALSE</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>revprops</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>revprops</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>name</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>revprops</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_ra_serf__add_tag_buckets</name><argument_list>(<argument><expr><name>buckets</name></expr></argument>,
<argument><expr>"S:revprop"</expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_AUTHOR</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name><name>log_ctx</name>-&gt;<name>want_author</name></name> = <name>TRUE</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_DATE</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name><name>log_ctx</name>-&gt;<name>want_date</name></name> = <name>TRUE</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_LOG</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name><name>log_ctx</name>-&gt;<name>want_message</name></name> = <name>TRUE</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>want_custom_revprops</name> = <name>TRUE</name></expr>;</expr_stmt></else></if></else></if></else></if>
}</block></for>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>svn_ra_serf__add_tag_buckets</name><argument_list>(<argument><expr><name>buckets</name></expr></argument>,
<argument><expr>"S:all-revprops"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>log_ctx</name>-&gt;<name>want_author</name></name> = <name><name>log_ctx</name>-&gt;<name>want_date</name></name> = <name><name>log_ctx</name>-&gt;<name>want_message</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>want_custom_revprops</name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>want_custom_revprops</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>has_log_revprops</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_serf__has_capability</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>&amp;<name>has_log_revprops</name></expr></argument>,
<argument><expr><name>SVN_RA_CAPABILITY_LOG_REVPROPS</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>has_log_revprops</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_NOT_IMPLEMENTED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Server does not support custom revprops"
" via log"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>paths</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>paths</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>svn_ra_serf__add_tag_buckets</name><argument_list>(<argument><expr><name>buckets</name></expr></argument>,
<argument><expr>"S:path"</expr></argument>, <argument><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>paths</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument><expr>const <name>char</name>*</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></then></if>
<expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr>"&lt;/S:log-report&gt;"</expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>"&lt;/S:log-report&gt;"</expr></argument>)</argument_list></sizeof>-1</expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>bkt_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name>buckets</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>peg_rev</name> = (<name>start</name> &gt; <name>end</name>) ? <name>start</name> : <name>end</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_serf__get_baseline_info</name><argument_list>(<argument><expr>&amp;<name>basecoll_url</name></expr></argument>, <argument><expr>&amp;<name>relative_url</name></expr></argument>,
<argument><expr><name>session</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>peg_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>req_url</name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name>basecoll_url</name></expr></argument>, <argument><expr><name>relative_url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>handler</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>handler</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handler</name>-&gt;<name>method</name></name> = "REPORT"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>handler</name>-&gt;<name>path</name></name> = <name>req_url</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handler</name>-&gt;<name>body_buckets</name></name> = <name>buckets</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handler</name>-&gt;<name>body_type</name></name> = "text/xml"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>handler</name>-&gt;<name>conn</name></name> = <name><name>session</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handler</name>-&gt;<name>session</name></name> = <name>session</name></expr>;</expr_stmt>
<expr_stmt><expr><name>parser_ctx</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>parser_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>user_data</name></name> = <name>log_ctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>start</name></name> = <name>start_log</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>end</name></name> = <name>end_log</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>cdata</name></name> = <name>cdata_log</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>done</name></name> = &amp;<name><name>log_ctx</name>-&gt;<name>done</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>status_code</name></name> = &amp;<name><name>log_ctx</name>-&gt;<name>status_code</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handler</name>-&gt;<name>response_handler</name></name> = <name>svn_ra_serf__handle_xml_parser</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handler</name>-&gt;<name>response_baton</name></name> = <name>parser_ctx</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_ra_serf__request_create</name><argument_list>(<argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_ra_serf__context_run_wait</name><argument_list>(<argument><expr>&amp;<name><name>log_ctx</name>-&gt;<name>done</name></name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>parser_ctx</name>-&gt;<name>error</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><name><name>parser_ctx</name>-&gt;<name>error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
</unit>
