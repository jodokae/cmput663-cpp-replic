<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/libsvn_ra_serf/options.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_uri.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;expat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;serf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_ra.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_dav.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_xml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libsvn_ra/ra_loader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_delta.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ra_serf.h"</cpp:file></cpp:include>
<typedef>typedef <type><enum>enum <block>{
<decl><name>OPTIONS</name></decl>,
<decl><name>ACTIVITY_COLLECTION</name></decl>,
<decl><name>HREF</name></decl>,
}</block></enum></type> <name>options_state_e</name>;</typedef>
<typedef>typedef <type><struct>struct <name>options_state_list_t</name> <block>{
<decl_stmt><decl><type><name>options_state_e</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>options_state_list_t</name> *</type><name>prev</name></decl>;</decl_stmt>
}</block></struct></type> <name>options_state_list_t</name>;</typedef>
<struct>struct <name>svn_ra_serf__options_context_t</name> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>attr_val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>attr_val_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>collect_cdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>options_state_list_t</name> *</type><name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>options_state_list_t</name> *</type><name>free_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status_code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>done</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>conn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>activity_collection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>serf_response_acceptor_t</name></type> <name>acceptor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>serf_response_handler_t</name></type> <name>handler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser_ctx</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>push_state</name><parameter_list>(<param><decl><type><name>svn_ra_serf__options_context_t</name> *</type><name>options_ctx</name></decl></param>, <param><decl><type><name>options_state_e</name></type> <name>state</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>options_state_list_t</name> *</type><name>new_state</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>options_ctx</name>-&gt;<name>free_state</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>new_state</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>options_ctx</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name><name>options_ctx</name>-&gt;<name>state</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>new_state</name> = <name><name>options_ctx</name>-&gt;<name>free_state</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>options_ctx</name>-&gt;<name>free_state</name></name> = <name><name>options_ctx</name>-&gt;<name>free_state</name>-&gt;<name>prev</name></name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>new_state</name>-&gt;<name>state</name></name> = <name>state</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_state</name>-&gt;<name>prev</name></name> = <name><name>options_ctx</name>-&gt;<name>state</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>options_ctx</name>-&gt;<name>state</name></name> = <name>new_state</name></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>pop_state</name><parameter_list>(<param><decl><type><name>svn_ra_serf__options_context_t</name> *</type><name>options_ctx</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>options_state_list_t</name> *</type><name>free_state</name></decl>;</decl_stmt>
<expr_stmt><expr><name>free_state</name> = <name><name>options_ctx</name>-&gt;<name>state</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>options_ctx</name>-&gt;<name>state</name></name> = <name><name>options_ctx</name>-&gt;<name>state</name>-&gt;<name>prev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>free_state</name>-&gt;<name>prev</name></name> = <name><name>options_ctx</name>-&gt;<name>free_state</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>options_ctx</name>-&gt;<name>free_state</name></name> = <name>free_state</name></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>start_options</name><parameter_list>(<param><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>userData</name></decl></param>,
<param><decl><type><name>svn_ra_serf__dav_props_t</name></type> <name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>attrs</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_serf__options_context_t</name> *</type><name>options_ctx</name> <init>= <expr><name>userData</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>options_ctx</name>-&gt;<name>state</name></name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"options-response"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>push_state</name><argument_list>(<argument><expr><name>options_ctx</name></expr></argument>, <argument><expr><name>OPTIONS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<name><name>options_ctx</name>-&gt;<name>state</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name><name>options_ctx</name>-&gt;<name>state</name>-&gt;<name>state</name></name> == <name>OPTIONS</name> &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"activity-collection-set"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>push_state</name><argument_list>(<argument><expr><name>options_ctx</name></expr></argument>, <argument><expr><name>ACTIVITY_COLLECTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>options_ctx</name>-&gt;<name>state</name>-&gt;<name>state</name></name> == <name>ACTIVITY_COLLECTION</name> &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"href"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>options_ctx</name>-&gt;<name>collect_cdata</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>push_state</name><argument_list>(<argument><expr><name>options_ctx</name></expr></argument>, <argument><expr><name>HREF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if></else></if></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>end_options</name><parameter_list>(<param><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>userData</name></decl></param>,
<param><decl><type><name>svn_ra_serf__dav_props_t</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_serf__options_context_t</name> *</type><name>options_ctx</name> <init>= <expr><name>userData</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>options_state_list_t</name> *</type><name>cur_state</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>options_ctx</name>-&gt;<name>state</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>cur_state</name> = <name><name>options_ctx</name>-&gt;<name>state</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cur_state</name>-&gt;<name>state</name></name> == <name>OPTIONS</name> &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"options-response"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>pop_state</name><argument_list>(<argument><expr><name>options_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>cur_state</name>-&gt;<name>state</name></name> == <name>ACTIVITY_COLLECTION</name> &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"activity-collection-set"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>pop_state</name><argument_list>(<argument><expr><name>options_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>cur_state</name>-&gt;<name>state</name></name> == <name>HREF</name> &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"href"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>options_ctx</name>-&gt;<name>collect_cdata</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>options_ctx</name>-&gt;<name>activity_collection</name></name> = <name><name>options_ctx</name>-&gt;<name>attr_val</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pop_state</name><argument_list>(<argument><expr><name>options_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>cdata_options</name><parameter_list>(<param><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>userData</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_serf__options_context_t</name> *</type><name>ctx</name> <init>= <expr><name>userData</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>collect_cdata</name></name> == <name>TRUE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_ra_serf__expand_string</name><argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>attr_val</name></name></expr></argument>, <argument><expr>&amp;<name><name>ctx</name>-&gt;<name>attr_val_len</name></name></expr></argument>,
<argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPTIONS_BODY</name></cpp:macro> <cpp:value>"&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;D:options xmlns:D=\"DAV:\"&gt;&lt;D:activity-collection-set/&gt;&lt;/D:options&gt;"</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>serf_bucket_t</name>*</type>
<name>create_options_body</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>serf_bucket_alloc_t</name> *</type><name>alloc</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr><name>OPTIONS_BODY</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OPTIONS_BODY</name></expr></argument>)</argument_list></sizeof> - 1</expr></argument>, <argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_boolean_t</name>*</type>
<name>svn_ra_serf__get_options_done_ptr</name><parameter_list>(<param><decl><type><name>svn_ra_serf__options_context_t</name> *</type><name>ctx</name></decl></param>)</parameter_list> <block>{
<return>return <expr>&amp;<name><name>ctx</name>-&gt;<name>done</name></name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_ra_serf__options_get_activity_collection</name><parameter_list>(<param><decl><type><name>svn_ra_serf__options_context_t</name> *</type><name>ctx</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name><name>ctx</name>-&gt;<name>activity_collection</name></name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__get_options_error</name><parameter_list>(<param><decl><type><name>svn_ra_serf__options_context_t</name> *</type><name>ctx</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name><name>ctx</name>-&gt;<name>error</name></name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__get_options_parser_error</name><parameter_list>(<param><decl><type><name>svn_ra_serf__options_context_t</name> *</type><name>ctx</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name><name>ctx</name>-&gt;<name>parser_ctx</name>-&gt;<name>error</name></name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__create_options_req</name><parameter_list>(<param><decl><type><name>svn_ra_serf__options_context_t</name> **</type><name>opt_ctx</name></decl></param>,
<param><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name></decl></param>,
<param><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>conn</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_serf__options_context_t</name> *</type><name>new_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__handler_t</name> *</type><name>handler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser_ctx</name></decl>;</decl_stmt>
<expr_stmt><expr><name>new_ctx</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>new_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_ctx</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_ctx</name>-&gt;<name>path</name></name> = <name>path</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_ctx</name>-&gt;<name>session</name></name> = <name>session</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_ctx</name>-&gt;<name>conn</name></name> = <name>conn</name></expr>;</expr_stmt>
<expr_stmt><expr><name>handler</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>handler</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handler</name>-&gt;<name>method</name></name> = "OPTIONS"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>handler</name>-&gt;<name>path</name></name> = <name>path</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handler</name>-&gt;<name>body_delegate</name></name> = <name>create_options_body</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handler</name>-&gt;<name>body_type</name></name> = "text/xml"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>handler</name>-&gt;<name>conn</name></name> = <name>conn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handler</name>-&gt;<name>session</name></name> = <name>session</name></expr>;</expr_stmt>
<expr_stmt><expr><name>parser_ctx</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>parser_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>user_data</name></name> = <name>new_ctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>start</name></name> = <name>start_options</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>end</name></name> = <name>end_options</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>cdata</name></name> = <name>cdata_options</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>done</name></name> = &amp;<name><name>new_ctx</name>-&gt;<name>done</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>status_code</name></name> = &amp;<name><name>new_ctx</name>-&gt;<name>status_code</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handler</name>-&gt;<name>response_handler</name></name> = <name>svn_ra_serf__handle_xml_parser</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handler</name>-&gt;<name>response_baton</name></name> = <name>parser_ctx</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_ra_serf__request_create</name><argument_list>(<argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_ctx</name>-&gt;<name>parser_ctx</name></name> = <name>parser_ctx</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>opt_ctx</name> = <name>new_ctx</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
