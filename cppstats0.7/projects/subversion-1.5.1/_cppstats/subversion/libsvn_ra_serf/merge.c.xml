<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/libsvn_ra_serf/merge.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_uri.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;expat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;serf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_ra.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_dav.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_xml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libsvn_ra/ra_loader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_delta.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_dav_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ra_serf.h"</cpp:file></cpp:include>
<typedef>typedef <type><enum>enum <block>{
<decl><name>NONE</name> <init>= <expr>0</expr></init></decl>,
<decl><name>MERGE_RESPONSE</name></decl>,
<decl><name>UPDATED_SET</name></decl>,
<decl><name>RESPONSE</name></decl>,
<decl><name>HREF</name></decl>,
<decl><name>PROPSTAT</name></decl>,
<decl><name>PROP</name></decl>,
<decl><name>RESOURCE_TYPE</name></decl>,
<decl><name>AUTHOR</name></decl>,
<decl><name>NAME</name></decl>,
<decl><name>DATE</name></decl>,
<decl><name>IGNORE_PROP_NAME</name></decl>,
<decl><name>NEED_PROP_NAME</name></decl>,
<decl><name>PROP_VAL</name></decl>,
}</block></enum></type> <name>merge_state_e</name>;</typedef>
<typedef>typedef <type><enum>enum <block>{
<decl><name>UNSET</name></decl>,
<decl><name>BASELINE</name></decl>,
<decl><name>COLLECTION</name></decl>,
<decl><name>CHECKED_IN</name></decl>,
}</block></enum></type> <name>resource_type_e</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>resource_type_e</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prop_ns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prop_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prop_val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>prop_val_len</name></decl>;</decl_stmt>
}</block></struct></type> <name>merge_info_t</name>;</typedef>
<struct>struct <name>svn_ra_serf__merge_context_t</name> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>lock_tokens</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>keep_locks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>activity_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>activity_url_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>merge_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>done</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_commit_info_t</name> *</type><name>commit_info</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>merge_info_t</name> *</type>
<name>push_state</name><parameter_list>(<param><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser</name></decl></param>,
<param><decl><type><name>svn_ra_serf__merge_context_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>merge_state_e</name></type> <name>state</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>merge_info_t</name> *</type><name>info</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_ra_serf__xml_push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>state</name> == <name>RESPONSE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>info</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>pool</name></name> = <name><name>parser</name>-&gt;<name>state</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>props</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>private</name></name> = <name>info</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>private</name></name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>start_merge</name><parameter_list>(<param><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>userData</name></decl></param>,
<param><decl><type><name>svn_ra_serf__dav_props_t</name></type> <name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>attrs</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_serf__merge_context_t</name> *</type><name>ctx</name> <init>= <expr><name>userData</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>merge_state_e</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>merge_info_t</name> *</type><name>info</name></decl>;</decl_stmt>
<expr_stmt><expr><name>state</name> = <name><name>parser</name>-&gt;<name>state</name>-&gt;<name>current_state</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>state</name> == <name>NONE</name> &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"merge-response"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>MERGE_RESPONSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>state</name> == <name>NONE</name></expr>)</condition><then> <block>{
}</block></then> <else>else <if>if <condition>(<expr><name>state</name> == <name>MERGE_RESPONSE</name> &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"updated-set"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>UPDATED_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>state</name> == <name>UPDATED_SET</name> &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"response"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>RESPONSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>state</name> == <name>RESPONSE</name> &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"href"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>info</name> = <call><name>push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>PROP_VAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>prop_ns</name></name> = <name><name>name</name>.<name>namespace</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>prop_name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>prop_val</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>prop_val_len</name></name> = 0</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>state</name> == <name>RESPONSE</name> &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"propstat"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>PROPSTAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>state</name> == <name>PROPSTAT</name> &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"prop"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>PROP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>state</name> == <name>PROPSTAT</name> &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"status"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
}</block></then> <else>else <if>if <condition>(<expr><name>state</name> == <name>PROP</name> &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"resourcetype"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>info</name> = <call><name>push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>RESOURCE_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>type</name></name> = <name>UNSET</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>state</name> == <name>RESOURCE_TYPE</name> &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"baseline"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>info</name> = <name><name>parser</name>-&gt;<name>state</name>-&gt;<name>private</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>type</name></name> = <name>BASELINE</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>state</name> == <name>RESOURCE_TYPE</name> &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"collection"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>info</name> = <name><name>parser</name>-&gt;<name>state</name>-&gt;<name>private</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>type</name></name> = <name>COLLECTION</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>state</name> == <name>PROP</name> &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"checked-in"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>info</name> = <call><name>push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>IGNORE_PROP_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>prop_ns</name></name> = <name><name>name</name>.<name>namespace</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>prop_name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>prop_val</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>prop_val_len</name></name> = 0</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>state</name> == <name>PROP</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>PROP_VAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>state</name> == <name>IGNORE_PROP_NAME</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>PROP_VAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>state</name> == <name>NEED_PROP_NAME</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>info</name> = <call><name>push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>PROP_VAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>prop_ns</name></name> = <name><name>name</name>.<name>namespace</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>prop_name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>prop_val</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>prop_val_len</name></name> = 0</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>end_merge</name><parameter_list>(<param><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>userData</name></decl></param>,
<param><decl><type><name>svn_ra_serf__dav_props_t</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_serf__merge_context_t</name> *</type><name>ctx</name> <init>= <expr><name>userData</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>merge_state_e</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>merge_info_t</name> *</type><name>info</name></decl>;</decl_stmt>
<expr_stmt><expr><name>state</name> = <name><name>parser</name>-&gt;<name>state</name>-&gt;<name>current_state</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>info</name> = <name><name>parser</name>-&gt;<name>state</name>-&gt;<name>private</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>state</name> == <name>NONE</name></expr>)</condition><then> <block>{
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>state</name> == <name>RESPONSE</name> &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"response"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>info</name>-&gt;<name>type</name></name> == <name>BASELINE</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>str</name></decl>;</decl_stmt>
<expr_stmt><expr><name>str</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>props</name></name></expr></argument>, <argument><expr><name>SVN_DAV__VERSION_NAME</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>str</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>commit_info</name>-&gt;<name>revision</name></name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>commit_info</name>-&gt;<name>revision</name></name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>commit_info</name>-&gt;<name>date</name></name> =
<call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>props</name></name></expr></argument>, <argument><expr><name>SVN_DAV__CREATIONDATE</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>commit_info</name>-&gt;<name>author</name></name> =
<call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>props</name></name></expr></argument>, <argument><expr>"creator-displayname"</expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>commit_info</name>-&gt;<name>post_commit_err</name></name> =
<call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>props</name></name></expr></argument>,
<argument><expr>"post-commit-err"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>session</name>-&gt;<name>wc_callbacks</name>-&gt;<name>push_wc_prop</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>href</name></decl>, *<decl><type ref="prev"/><name>checked_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name></type> <name>checked_in_str</name></decl>;</decl_stmt>
<expr_stmt><expr><name>href</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>props</name></name></expr></argument>, <argument><expr>"href"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>checked_in</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>props</name></name></expr></argument>, <argument><expr>"checked-in"</expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <call><name>svn_path_is_ancestor</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>merge_url</name></name></expr></argument>, <argument><expr><name>href</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>APR_EGENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"A MERGE response for '%s' is not a child "
"of the destination ('%s')"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>href</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>merge_url</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>href</name> = <call><name>svn_path_is_child</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>merge_url</name></name></expr></argument>, <argument><expr><name>href</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>href</name></expr>)</condition><then>
<expr_stmt><expr><name>href</name> = ""</expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>checked_in_str</name>.<name>data</name></name> = <name>checked_in</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>checked_in_str</name>.<name>len</name></name> = <call><name>strlen</name><argument_list>(<argument><expr><name>checked_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>ctx</name>-&gt;<name>session</name>-&gt;<name>wc_callbacks</name>-&gt;<name>push_wc_prop</name></name><argument_list>(
<argument><expr><name><name>ctx</name>-&gt;<name>session</name>-&gt;<name>wc_callback_baton</name></name></expr></argument>,
<argument><expr><name>href</name></expr></argument>,
<argument><expr><name>SVN_RA_SERF__WC_CHECKED_IN_URL</name></expr></argument>,
<argument><expr>&amp;<name>checked_in_str</name></expr></argument>,
<argument><expr><name><name>info</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<expr_stmt><expr><call><name>svn_ra_serf__xml_pop_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>state</name> == <name>PROPSTAT</name> &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"propstat"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_ra_serf__xml_pop_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>state</name> == <name>PROP</name> &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"prop"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_ra_serf__xml_pop_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>state</name> == <name>RESOURCE_TYPE</name> &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"resourcetype"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_ra_serf__xml_pop_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>state</name> == <name>IGNORE_PROP_NAME</name> || <name>state</name> == <name>NEED_PROP_NAME</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_ra_serf__xml_pop_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>state</name> == <name>PROP_VAL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name><name>info</name>-&gt;<name>prop_name</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>info</name>-&gt;<name>prop_name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>info</name>-&gt;<name>prop_val</name></name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>prop_val</name></name></expr></argument>,
<argument><expr><name><name>info</name>-&gt;<name>prop_val_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>props</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>prop_name</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><name><name>info</name>-&gt;<name>prop_val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>prop_ns</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>prop_name</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>prop_val</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>prop_val_len</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_ra_serf__xml_pop_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if></else></if></else></if></else></if></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>cdata_merge</name><parameter_list>(<param><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>userData</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_serf__merge_context_t</name> *</type><name>ctx</name> <init>= <expr><name>userData</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>merge_state_e</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>merge_info_t</name> *</type><name>info</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>UNUSED_CTX</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>state</name> = <name><name>parser</name>-&gt;<name>state</name>-&gt;<name>current_state</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>info</name> = <name><name>parser</name>-&gt;<name>state</name>-&gt;<name>private</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>state</name> == <name>PROP_VAL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_ra_serf__expand_string</name><argument_list>(<argument><expr>&amp;<name><name>info</name>-&gt;<name>prop_val</name></name></expr></argument>, <argument><expr>&amp;<name><name>info</name>-&gt;<name>prop_val_len</name></name></expr></argument>,
<argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type>
<name>setup_merge_headers</name><parameter_list>(<param><decl><type><name>serf_bucket_t</name> *</type><name>headers</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_serf__merge_context_t</name> *</type><name>ctx</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>ctx</name>-&gt;<name>keep_locks</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>serf_bucket_headers_set</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><name>SVN_DAV_OPTIONS_HEADER</name></expr></argument>,
<argument><expr><name>SVN_DAV_OPTION_RELEASE_LOCKS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCK_HEADER</name></cpp:macro> <cpp:value>"&lt;S:lock-token-list xmlns:S=\"" SVN_XML_NAMESPACE "\"&gt;"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCK_TRAILER</name></cpp:macro> <cpp:value>"&lt;/S:lock-token-list&gt;"</cpp:value></cpp:define>
<function><type><name>void</name></type>
<name>svn_ra_serf__merge_lock_token_list</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>lock_tokens</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>parent</name></decl></param>,
<param><decl><type><name>serf_bucket_t</name> *</type><name>body</name></decl></param>,
<param><decl><type><name>serf_bucket_alloc_t</name> *</type><name>alloc</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>serf_bucket_t</name> *</type><name>tmp</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>lock_tokens</name> || <call><name>apr_hash_count</name><argument_list>(<argument><expr><name>lock_tokens</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr><name>LOCK_HEADER</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LOCK_HEADER</name></expr></argument>)</argument_list></sizeof> - 1</expr></argument>,
<argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>lock_tokens</name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>hi</name></expr>;</condition>
<incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_ssize_t</name></type> <name>klen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name></type> <name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>xml_path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>klen</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>path</name>.<name>data</name></name> = <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>path</name>.<name>len</name></name> = <name>klen</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>parent</name> &amp;&amp; !<call><name>svn_path_is_ancestor</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><call><name>svn_xml_escape_cdata_string</name><argument_list>(<argument><expr>&amp;<name>xml_path</name></expr></argument>, <argument><expr>&amp;<name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr>"&lt;S:lock&gt;"</expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>"&lt;S:lock&gt;"</expr></argument>)</argument_list></sizeof> - 1</expr></argument>,
<argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_ra_serf__add_tag_buckets</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr>"lock-path"</expr></argument>, <argument><expr><name><name>xml_path</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_ra_serf__add_tag_buckets</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr>"lock-token"</expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr>"&lt;/S:lock&gt;"</expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>"&lt;/S:lock&gt;"</expr></argument>)</argument_list></sizeof> - 1</expr></argument>,
<argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr><name>LOCK_TRAILER</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LOCK_TRAILER</name></expr></argument>)</argument_list></sizeof> - 1</expr></argument>,
<argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name>body</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MERGE_HEADER</name></cpp:macro> <cpp:value>"&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;D:merge xmlns:D=\"DAV:\"&gt;&lt;D:source&gt;&lt;D:href&gt;"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MERGE_BODY</name></cpp:macro> <cpp:value>"&lt;/D:href&gt;&lt;/D:source&gt;&lt;D:no-auto-merge/&gt;&lt;D:no-checkout/&gt;&lt;D:prop&gt;&lt;D:checked-in/&gt;&lt;D:" SVN_DAV__VERSION_NAME "/&gt;&lt;D:resourcetype/&gt;&lt;D:" SVN_DAV__CREATIONDATE "/&gt;&lt;D:creator-displayname/&gt;&lt;/D:prop&gt;"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MERGE_TRAILER</name></cpp:macro> <cpp:value>"&lt;/D:merge&gt;"</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>serf_bucket_t</name>*</type>
<name>create_merge_body</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>serf_bucket_alloc_t</name> *</type><name>alloc</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_serf__merge_context_t</name> *</type><name>ctx</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>serf_bucket_t</name> *</type><name>body_bkt</name></decl>, *<decl><type ref="prev"/><name>tmp_bkt</name></decl>;</decl_stmt>
<expr_stmt><expr><name>body_bkt</name> = <call><name>serf_bucket_aggregate_create</name><argument_list>(<argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_bkt</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr><name>MERGE_HEADER</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MERGE_HEADER</name></expr></argument>)</argument_list></sizeof> - 1</expr></argument>,
<argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name>body_bkt</name></expr></argument>, <argument><expr><name>tmp_bkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_bkt</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>activity_url</name></name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>activity_url_len</name></name></expr></argument>,
<argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name>body_bkt</name></expr></argument>, <argument><expr><name>tmp_bkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_bkt</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr><name>MERGE_BODY</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MERGE_BODY</name></expr></argument>)</argument_list></sizeof> - 1</expr></argument>,
<argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name>body_bkt</name></expr></argument>, <argument><expr><name>tmp_bkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_ra_serf__merge_lock_token_list</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>lock_tokens</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>body_bkt</name></expr></argument>, <argument><expr><name>alloc</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_bkt</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr><name>MERGE_TRAILER</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MERGE_TRAILER</name></expr></argument>)</argument_list></sizeof> - 1</expr></argument>,
<argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name>body_bkt</name></expr></argument>, <argument><expr><name>tmp_bkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>body_bkt</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__merge_create_req</name><parameter_list>(<param><decl><type><name>svn_ra_serf__merge_context_t</name> **</type><name>ret_ctx</name></decl></param>,
<param><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name></decl></param>,
<param><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>conn</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>activity_url</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>activity_url_len</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>lock_tokens</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>keep_locks</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_serf__merge_context_t</name> *</type><name>merge_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__handler_t</name> *</type><name>handler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser_ctx</name></decl>;</decl_stmt>
<expr_stmt><expr><name>merge_ctx</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>merge_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>merge_ctx</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>merge_ctx</name>-&gt;<name>session</name></name> = <name>session</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>merge_ctx</name>-&gt;<name>activity_url</name></name> = <name>activity_url</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>merge_ctx</name>-&gt;<name>activity_url_len</name></name> = <name>activity_url_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>merge_ctx</name>-&gt;<name>lock_tokens</name></name> = <name>lock_tokens</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>merge_ctx</name>-&gt;<name>keep_locks</name></name> = <name>keep_locks</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>merge_ctx</name>-&gt;<name>commit_info</name></name> = <call><name>svn_create_commit_info</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>merge_ctx</name>-&gt;<name>merge_url</name></name> = <name><name>session</name>-&gt;<name>repos_url</name>.<name>path</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>handler</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>handler</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handler</name>-&gt;<name>method</name></name> = "MERGE"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>handler</name>-&gt;<name>path</name></name> = <name><name>merge_ctx</name>-&gt;<name>merge_url</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handler</name>-&gt;<name>body_delegate</name></name> = <name>create_merge_body</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handler</name>-&gt;<name>body_delegate_baton</name></name> = <name>merge_ctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handler</name>-&gt;<name>conn</name></name> = <name>conn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handler</name>-&gt;<name>session</name></name> = <name>session</name></expr>;</expr_stmt>
<expr_stmt><expr><name>parser_ctx</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>parser_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>user_data</name></name> = <name>merge_ctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>start</name></name> = <name>start_merge</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>end</name></name> = <name>end_merge</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>cdata</name></name> = <name>cdata_merge</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>done</name></name> = &amp;<name><name>merge_ctx</name>-&gt;<name>done</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>status_code</name></name> = &amp;<name><name>merge_ctx</name>-&gt;<name>status</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handler</name>-&gt;<name>header_delegate</name></name> = <name>setup_merge_headers</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handler</name>-&gt;<name>header_delegate_baton</name></name> = <name>merge_ctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handler</name>-&gt;<name>response_handler</name></name> = <name>svn_ra_serf__handle_xml_parser</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handler</name>-&gt;<name>response_baton</name></name> = <name>parser_ctx</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_ra_serf__request_create</name><argument_list>(<argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>ret_ctx</name> = <name>merge_ctx</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_boolean_t</name>*</type>
<name>svn_ra_serf__merge_get_done_ptr</name><parameter_list>(<param><decl><type><name>svn_ra_serf__merge_context_t</name> *</type><name>ctx</name></decl></param>)</parameter_list> <block>{
<return>return <expr>&amp;<name><name>ctx</name>-&gt;<name>done</name></name></expr>;</return>
}</block></function>
<function><type><name>svn_commit_info_t</name>*</type>
<name>svn_ra_serf__merge_get_commit_info</name><parameter_list>(<param><decl><type><name>svn_ra_serf__merge_context_t</name> *</type><name>ctx</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name><name>ctx</name>-&gt;<name>commit_info</name></name></expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>svn_ra_serf__merge_get_status</name><parameter_list>(<param><decl><type><name>svn_ra_serf__merge_context_t</name> *</type><name>ctx</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name><name>ctx</name>-&gt;<name>status</name></name></expr>;</return>
}</block></function>
</unit>
