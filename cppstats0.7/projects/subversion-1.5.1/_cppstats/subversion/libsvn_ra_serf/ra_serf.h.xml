<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/libsvn_ra_serf/ra_serf.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SVN_LIBSVN_RA_SERF_RA_SERF_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_LIBSVN_RA_SERF_RA_SERF_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;serf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;expat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_uri.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_ra.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_delta.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_dav.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_dav_protocol.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNUSED_CTX</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((void)(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USER_AGENT</name></cpp:macro> <cpp:value>"SVN/" SVN_VERSION " serf/" APR_STRINGIFY(SERF_MAJOR_VERSION) "." APR_STRINGIFY(SERF_MINOR_VERSION) "." APR_STRINGIFY(SERF_PATCH_VERSION)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>SERF_VERSION_AT_LEAST</name><argument_list>(<argument><expr>0, 1, 3</expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_RA_SERF_SSPI_ENABLED</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type>struct <name>svn_ra_serf__session_t</name></type> <name>svn_ra_serf__session_t</name>;</typedef>
<typedef>typedef <type>struct <name>svn_ra_serf__auth_protocol_t</name></type> <name>svn_ra_serf__auth_protocol_t</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SVN_RA_SERF_SSPI_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type>struct <name>serf_sspi_context_t</name></type> <name>serf_sspi_context_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>serf_connection_t</name> *</type><name>conn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>serf_bucket_alloc_t</name> *</type><name>bkt_alloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>hostinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_sockaddr_t</name> *</type><name>address</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>using_ssl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>using_compression</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_status_code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>auth_header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>auth_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>serf_ssl_context_t</name> *</type><name>ssl_context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_auth_iterstate_t</name> *</type><name>ssl_client_auth_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_auth_iterstate_t</name> *</type><name>ssl_client_pw_auth_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SVN_RA_SERF_SSPI_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>serf_sspi_context_t</name> *</type><name>sspi_context</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>proxy_auth_header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>proxy_auth_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>useragent</name></decl>;</decl_stmt>
}</block></struct></type> <name>svn_ra_serf__connection_t</name>;</typedef>
<struct>struct <name>svn_ra_serf__session_t</name> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>serf_context_t</name> *</type><name>context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>serf_bucket_alloc_t</name> *</type><name>bkt_alloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>using_ssl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>using_compression</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__connection_t</name> **</type><name>conns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_conns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cur_conn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uri_t</name></type> <name>repos_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_url_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uri_t</name></type> <name>repos_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_root_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>vcc_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>cached_props</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>auth_header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>auth_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_auth_iterstate_t</name> *</type><name>auth_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>auth_attempts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_ra_callbacks2_t</name> *</type><name>wc_callbacks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>wc_callback_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_progress_notify_func_t</name></type> <name>wc_progress_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>wc_progress_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>pending_error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_ra_serf__auth_protocol_t</name> *</type><name>auth_protocol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>capabilities</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>using_proxy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>proxy_auth_header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>proxy_auth_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_ra_serf__auth_protocol_t</name> *</type><name>proxy_auth_protocol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>proxy_username</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>proxy_password</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>proxy_auth_attempts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>trust_default_ca</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_authorities</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>namespace</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
}</block></struct></type> <name>svn_ra_serf__dav_props_t</name>;</typedef>
<typedef>typedef <type><struct>struct <name>ns_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>namespace</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>ns_t</name> *</type><name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>svn_ra_serf__ns_t</name>;</typedef>
<typedef>typedef <type><struct>struct <name>ra_serf_list_t</name> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>ra_serf_list_t</name> *</type><name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>svn_ra_serf__list_t</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_ra_serf__dav_props_t</name></type> <name><name>base_props</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"DAV:"</expr>, <expr>"version-controlled-configuration"</expr> }</block></expr>,
<expr><block>{ <expr>"DAV:"</expr>, <expr>"resourcetype"</expr> }</block></expr>,
<expr><block>{ <expr><name>SVN_DAV_PROP_NS_DAV</name></expr>, <expr>"baseline-relative-path"</expr> }</block></expr>,
<expr><block>{ <expr><name>SVN_DAV_PROP_NS_DAV</name></expr>, <expr>"repository-uuid"</expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_ra_serf__dav_props_t</name></type> <name><name>checked_in_props</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"DAV:"</expr>, <expr>"checked-in"</expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_ra_serf__dav_props_t</name></type> <name><name>baseline_props</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"DAV:"</expr>, <expr>"baseline-collection"</expr> }</block></expr>,
<expr><block>{ <expr>"DAV:"</expr>, <expr><name>SVN_DAV__VERSION_NAME</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_ra_serf__dav_props_t</name></type> <name><name>all_props</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"DAV:"</expr>, <expr>"allprop"</expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_ra_serf__dav_props_t</name></type> <name><name>vcc_props</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"DAV:"</expr>, <expr>"version-controlled-configuration"</expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_ra_serf__dav_props_t</name></type> <name><name>check_path_props</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"DAV:"</expr>, <expr>"resourcetype"</expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_ra_serf__dav_props_t</name></type> <name><name>uuid_props</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>SVN_DAV_PROP_NS_DAV</name></expr>, <expr>"repository-uuid"</expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_ra_serf__dav_props_t</name></type> <name><name>repos_root_props</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>SVN_DAV_PROP_NS_DAV</name></expr>, <expr>"baseline-relative-path"</expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_ra_serf__dav_props_t</name></type> <name><name>href_props</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"DAV:"</expr>, <expr>"href"</expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_RA_SERF__WC_NAMESPACE</name></cpp:macro> <cpp:value>SVN_PROP_WC_PREFIX "ra_dav:"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_RA_SERF__WC_ACTIVITY_URL</name></cpp:macro> <cpp:value>SVN_RA_SERF__WC_NAMESPACE "activity-url"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_RA_SERF__WC_CHECKED_IN_URL</name></cpp:macro> <cpp:value>SVN_RA_SERF__WC_NAMESPACE "version-url"</cpp:value></cpp:define>
<function_decl><type><name>serf_bucket_t</name> *</type>
<name>svn_ra_serf__conn_setup</name><parameter_list>(<param><decl><type><name>apr_socket_t</name> *</type><name>sock</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>serf_bucket_t</name>*</type>
<name>svn_ra_serf__accept_response</name><parameter_list>(<param><decl><type><name>serf_request_t</name> *</type><name>request</name></decl></param>,
<param><decl><type><name>serf_bucket_t</name> *</type><name>stream</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>acceptor_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>
<name>svn_ra_serf__conn_closed</name><parameter_list>(<param><decl><type><name>serf_connection_t</name> *</type><name>conn</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>closed_baton</name></decl></param>,
<param><decl><type><name>apr_status_t</name></type> <name>why</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type>
<name>svn_ra_serf__is_conn_closing</name><parameter_list>(<param><decl><type><name>serf_bucket_t</name> *</type><name>response</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type>
<name>svn_ra_serf__cleanup_serf_session</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type>
<name>svn_ra_serf__handle_client_cert</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>cert_path</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type>
<name>svn_ra_serf__handle_client_cert_pw</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cert_path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>password</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>
<name>svn_ra_serf__setup_serf_req</name><parameter_list>(<param><decl><type><name>serf_request_t</name> *</type><name>request</name></decl></param>,
<param><decl><type><name>serf_bucket_t</name> **</type><name>req_bkt</name></decl></param>, <param><decl><type><name>serf_bucket_t</name> **</type><name>hdrs_bkt</name></decl></param>,
<param><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>conn</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>method</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
<param><decl><type><name>serf_bucket_t</name> *</type><name>body_bkt</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>content_type</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__context_run_wait</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>done</name></decl></param>,
<param><decl><type><name>svn_ra_serf__session_t</name> *</type><name>sess</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<typedef>typedef <function_decl><type><name>serf_bucket_t</name>*</type>
(*<name>svn_ra_serf__request_body_delegate_t</name>)<parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>serf_bucket_alloc_t</name> *</type><name>alloc</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>apr_status_t</name></type>
(*<name>svn_ra_serf__request_header_delegate_t</name>)<parameter_list>(<param><decl><type><name>serf_bucket_t</name> *</type><name>headers</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>apr_status_t</name></type>
(*<name>svn_ra_serf__response_error_t</name>)<parameter_list>(<param><decl><type><name>serf_request_t</name> *</type><name>request</name></decl></param>,
<param><decl><type><name>serf_bucket_t</name> *</type><name>response</name></decl></param>,
<param><decl><type><name>int</name></type> <name>status_code</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>method</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>serf_bucket_t</name> *</type><name>body_buckets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>body_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>serf_response_handler_t</name></type> <name>response_handler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>response_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__response_error_t</name></type> <name>response_error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>response_error_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>serf_request_setup_t</name></type> <name>delegate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>delegate_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__request_header_delegate_t</name></type> <name>header_delegate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>header_delegate_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__request_body_delegate_t</name></type> <name>body_delegate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>body_delegate_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>conn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name></decl>;</decl_stmt>
}</block></struct></type> <name>svn_ra_serf__handler_t</name>;</typedef>
<function_decl><type><name>serf_request_t</name>*</type>
<name>svn_ra_serf__request_create</name><parameter_list>(<param><decl><type><name>svn_ra_serf__handler_t</name> *</type><name>handler</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>serf_request_t</name>*</type>
<name>svn_ra_serf__priority_request_create</name><parameter_list>(<param><decl><type><name>svn_ra_serf__handler_t</name> *</type><name>handler</name></decl></param>)</parameter_list>;</function_decl>
<typedef>typedef <type><struct>struct <name>svn_ra_serf__xml_state_t</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>current_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>private</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__ns_t</name> *</type><name>ns_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>svn_ra_serf__xml_state_t</name> *</type><name>prev</name></decl>;</decl_stmt>
}</block></struct></type> <name>svn_ra_serf__xml_state_t</name>;</typedef>
<typedef>typedef <type>struct <name>svn_ra_serf__xml_parser_t</name></type> <name>svn_ra_serf__xml_parser_t</name>;</typedef>
<typedef>typedef <function_decl><type><name>svn_error_t</name> *</type>
(*<name>svn_ra_serf__xml_start_element_t</name>)<parameter_list>(<param><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>svn_ra_serf__dav_props_t</name></type> <name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>attrs</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>svn_error_t</name> *</type>
(*<name>svn_ra_serf__xml_end_element_t</name>)<parameter_list>(<param><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>svn_ra_serf__dav_props_t</name></type> <name>name</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>svn_error_t</name> *</type>
(*<name>svn_ra_serf__xml_cdata_chunk_handler_t</name>)<parameter_list>(<param><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>)</parameter_list>;</function_decl></typedef>
<struct>struct <name>svn_ra_serf__xml_parser_t</name> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>user_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__xml_start_element_t</name></type> <name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__xml_end_element_t</name></type> <name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__xml_cdata_chunk_handler_t</name></type> <name>cdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>XML_Parser</name></type> <name>xmlp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__xml_state_t</name> *</type><name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__xml_state_t</name> *</type><name>free_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> *</type><name>status_code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name> *</type><name>done</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__list_t</name> **</type><name>done_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__list_t</name> *</type><name>done_item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>ignore_errors</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>error</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>init</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>has_xml_response</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>done</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>in_error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>collect_cdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>cdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__xml_parser_t</name></type> <name>parser</name></decl>;</decl_stmt>
}</block></struct></type> <name>svn_ra_serf__server_error_t</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>reason</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>done</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__server_error_t</name></type> <name>server_error</name></decl>;</decl_stmt>
}</block></struct></type> <name>svn_ra_serf__simple_request_context_t</name>;</typedef>
<function_decl><type><name>apr_status_t</name></type>
<name>svn_ra_serf__handle_status_only</name><parameter_list>(<param><decl><type><name>serf_request_t</name> *</type><name>request</name></decl></param>,
<param><decl><type><name>serf_bucket_t</name> *</type><name>response</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type>
<name>svn_ra_serf__handle_discard_body</name><parameter_list>(<param><decl><type><name>serf_request_t</name> *</type><name>request</name></decl></param>,
<param><decl><type><name>serf_bucket_t</name> *</type><name>response</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__handle_server_error</name><parameter_list>(<param><decl><type><name>serf_request_t</name> *</type><name>request</name></decl></param>,
<param><decl><type><name>serf_bucket_t</name> *</type><name>response</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type>
<name>svn_ra_serf__handle_multistatus_only</name><parameter_list>(<param><decl><type><name>serf_request_t</name> *</type><name>request</name></decl></param>,
<param><decl><type><name>serf_bucket_t</name> *</type><name>response</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type>
<name>svn_ra_serf__handle_xml_parser</name><parameter_list>(<param><decl><type><name>serf_request_t</name> *</type><name>request</name></decl></param>,
<param><decl><type><name>serf_bucket_t</name> *</type><name>response</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>handler_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>
<name>svn_ra_serf__xml_push_state</name><parameter_list>(<param><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser</name></decl></param>,
<param><decl><type><name>int</name></type> <name>state</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>
<name>svn_ra_serf__xml_pop_state</name><parameter_list>(<param><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>
<name>svn_ra_serf__add_tag_buckets</name><parameter_list>(<param><decl><type><name>serf_bucket_t</name> *</type><name>agg_bucket</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tag</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>,
<param><decl><type><name>serf_bucket_alloc_t</name> *</type><name>bkt_alloc</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>
<name>svn_ra_serf__define_ns</name><parameter_list>(<param><decl><type><name>svn_ra_serf__ns_t</name> **</type><name>ns_list</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>attrs</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_ra_serf__dav_props_t</name></type>
<name>svn_ra_serf__expand_ns</name><parameter_list>(<param><decl><type><name>svn_ra_serf__ns_t</name> *</type><name>ns_list</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>
<name>svn_ra_serf__expand_string</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>cur</name></decl></param>, <param><decl><type><name>apr_size_t</name> *</type><name>cur_len</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>new</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>new_len</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<typedef>typedef <type>struct <name>svn_ra_serf__propfind_context_t</name></type> <name>svn_ra_serf__propfind_context_t</name>;</typedef>
<function_decl><type><name>svn_boolean_t</name></type>
<name>svn_ra_serf__propfind_is_done</name><parameter_list>(<param><decl><type><name>svn_ra_serf__propfind_context_t</name> *</type><name>ctx</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type>
<name>svn_ra_serf__propfind_status_code</name><parameter_list>(<param><decl><type><name>svn_ra_serf__propfind_context_t</name> *</type><name>ctx</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>serf_bucket_t</name> *</type>
<name>svn_ra_serf__bucket_propfind_create</name><parameter_list>(<param><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>conn</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>label</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>depth</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_ra_serf__dav_props_t</name> *</type><name>find_props</name></decl></param>,
<param><decl><type><name>serf_bucket_alloc_t</name> *</type><name>allocator</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__deliver_props</name><parameter_list>(<param><decl><type><name>svn_ra_serf__propfind_context_t</name> **</type><name>prop_ctx</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>prop_vals</name></decl></param>,
<param><decl><type><name>svn_ra_serf__session_t</name> *</type><name>sess</name></decl></param>,
<param><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>conn</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>depth</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_ra_serf__dav_props_t</name> *</type><name>lookup_props</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>cache_props</name></decl></param>,
<param><decl><type><name>svn_ra_serf__list_t</name> **</type><name>done_list</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__wait_for_props</name><parameter_list>(<param><decl><type><name>svn_ra_serf__propfind_context_t</name> *</type><name>prop_ctx</name></decl></param>,
<param><decl><type><name>svn_ra_serf__session_t</name> *</type><name>sess</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__search_for_base_props</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>remaining_path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>missing_path</name></decl></param>,
<param><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name></decl></param>,
<param><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>conn</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__retrieve_props</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>prop_vals</name></decl></param>,
<param><decl><type><name>svn_ra_serf__session_t</name> *</type><name>sess</name></decl></param>,
<param><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>conn</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>depth</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_ra_serf__dav_props_t</name> *</type><name>props</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>
<name>svn_ra_serf__set_ver_prop</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ns</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>val</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<typedef>typedef <function_decl><type><name>svn_error_t</name> *</type>
(*<name>svn_ra_serf__walker_visitor_t</name>)<parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ns</name></decl></param>, <param><decl><type><name>apr_ssize_t</name></type> <name>ns_len</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>apr_ssize_t</name></type> <name>name_len</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>val</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl></typedef>
<function_decl><type><name>void</name></type>
<name>svn_ra_serf__walk_all_props</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
<param><decl><type><name>svn_ra_serf__walker_visitor_t</name></type> <name>walker</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<typedef>typedef <function_decl><type><name>svn_error_t</name> *</type>
(*<name>svn_ra_serf__path_rev_walker_t</name>)<parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>apr_ssize_t</name></type> <name>path_len</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ns</name></decl></param>, <param><decl><type><name>apr_ssize_t</name></type> <name>ns_len</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>apr_ssize_t</name></type> <name>name_len</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>val</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl></typedef>
<function_decl><type><name>void</name></type>
<name>svn_ra_serf__walk_all_paths</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
<param><decl><type><name>svn_ra_serf__path_rev_walker_t</name></type> <name>walker</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<typedef>typedef <function_decl><type><name>svn_error_t</name> *</type> (*<name>svn_ra_serf__prop_set_t</name>)<parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl></typedef>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__set_baton_props</name><parameter_list>(<param><decl><type><name>svn_ra_serf__prop_set_t</name></type> <name>setprop</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ns</name></decl></param>, <param><decl><type><name>apr_ssize_t</name></type> <name>ns_len</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>apr_ssize_t</name></type> <name>name_len</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>val</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__set_flat_props</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ns</name></decl></param>, <param><decl><type><name>apr_ssize_t</name></type> <name>ns_len</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>apr_ssize_t</name></type> <name>name_len</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>val</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__set_bare_props</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ns</name></decl></param>, <param><decl><type><name>apr_ssize_t</name></type> <name>ns_len</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>apr_ssize_t</name></type> <name>name_len</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>val</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type>
<name>svn_ra_serf__get_ver_prop_string</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ns</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_ra_serf__get_ver_prop</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ns</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_ra_serf__get_prop</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ns</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>
<name>svn_ra_serf__set_rev_prop</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ns</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>val</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>
<name>svn_ra_serf__set_prop</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ns</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>val</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<typedef>typedef <type>struct <name>svn_ra_serf__merge_context_t</name></type> <name>svn_ra_serf__merge_context_t</name>;</typedef>
<function_decl><type><name>svn_boolean_t</name>*</type>
<name>svn_ra_serf__merge_get_done_ptr</name><parameter_list>(<param><decl><type><name>svn_ra_serf__merge_context_t</name> *</type><name>ctx</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_commit_info_t</name>*</type>
<name>svn_ra_serf__merge_get_commit_info</name><parameter_list>(<param><decl><type><name>svn_ra_serf__merge_context_t</name> *</type><name>ctx</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type>
<name>svn_ra_serf__merge_get_status</name><parameter_list>(<param><decl><type><name>svn_ra_serf__merge_context_t</name> *</type><name>ctx</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>
<name>svn_ra_serf__merge_lock_token_list</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>lock_tokens</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>parent</name></decl></param>,
<param><decl><type><name>serf_bucket_t</name> *</type><name>body</name></decl></param>,
<param><decl><type><name>serf_bucket_alloc_t</name> *</type><name>alloc</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__merge_create_req</name><parameter_list>(<param><decl><type><name>svn_ra_serf__merge_context_t</name> **</type><name>merge_ctx</name></decl></param>,
<param><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name></decl></param>,
<param><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>conn</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>activity_url</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>activity_url_len</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>lock_tokens</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>keep_locks</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<typedef>typedef <type>struct <name>svn_ra_serf__options_context_t</name></type> <name>svn_ra_serf__options_context_t</name>;</typedef>
<function_decl><type><name>svn_boolean_t</name>*</type>
<name>svn_ra_serf__get_options_done_ptr</name><parameter_list>(<param><decl><type><name>svn_ra_serf__options_context_t</name> *</type><name>ctx</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_ra_serf__options_get_activity_collection</name><parameter_list>(<param><decl><type><name>svn_ra_serf__options_context_t</name> *</type><name>ctx</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__get_options_error</name><parameter_list>(<param><decl><type><name>svn_ra_serf__options_context_t</name> *</type><name>ctx</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__get_options_parser_error</name><parameter_list>(<param><decl><type><name>svn_ra_serf__options_context_t</name> *</type><name>ctx</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__create_options_req</name><parameter_list>(<param><decl><type><name>svn_ra_serf__options_context_t</name> **</type><name>opt_ctx</name></decl></param>,
<param><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name></decl></param>,
<param><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>conn</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__discover_root</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>vcc_url</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>rel_path</name></decl></param>,
<param><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name></decl></param>,
<param><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>conn</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>orig_path</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__get_baseline_info</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>bc_url</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>bc_relative</name></decl></param>,
<param><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__get_log</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>paths</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>start</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>end</name></decl></param>,
<param><decl><type><name>int</name></type> <name>limit</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>discover_changed_paths</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>strict_node_history</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>include_merged_revisions</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>revprops</name></decl></param>,
<param><decl><type><name>svn_log_entry_receiver_t</name></type> <name>receiver</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>receiver_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__get_locations</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> **</type><name>locations</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>peg_revision</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>location_revisions</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__get_location_segments</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>peg_revision</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>start_rev</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>end_rev</name></decl></param>,
<param><decl><type><name>svn_location_segment_receiver_t</name></type> <name>receiver</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>receiver_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__do_diff</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_ra_reporter3_t</name> **</type><name>reporter</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>report_baton</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>diff_target</name></decl></param>,
<param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>ignore_ancestry</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>text_deltas</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>versus_url</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>diff_editor</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>diff_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__do_status</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_ra_reporter3_t</name> **</type><name>reporter</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>report_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>status_target</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
<param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>status_editor</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>status_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__do_update</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_ra_reporter3_t</name> **</type><name>reporter</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>report_baton</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision_to_update_to</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>update_target</name></decl></param>,
<param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>send_copyfrom_args</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>update_editor</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>update_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__do_switch</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_ra_reporter3_t</name> **</type><name>reporter</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>report_baton</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision_to_switch_to</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>switch_target</name></decl></param>,
<param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>switch_url</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>switch_editor</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>switch_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__get_file_revs</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>start</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>end</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>include_merged_revisions</name></decl></param>,
<param><decl><type><name>svn_file_rev_handler_t</name></type> <name>handler</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>handler_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__get_dated_revision</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name> *</type><name>revision</name></decl></param>,
<param><decl><type><name>apr_time_t</name></type> <name>tm</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__get_commit_editor</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>revprop_table</name></decl></param>,
<param><decl><type><name>svn_commit_callback2_t</name></type> <name>callback</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>callback_baton</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>lock_tokens</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>keep_locks</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__get_file</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
<param><decl><type><name>svn_stream_t</name> *</type><name>stream</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name> *</type><name>fetched_rev</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> **</type><name>props</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__change_rev_prop</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__replay</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>low_water_mark</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>text_deltas</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>editor</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__replay_range</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>start_revision</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>end_revision</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>low_water_mark</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>send_deltas</name></decl></param>,
<param><decl><type><name>svn_ra_replay_revstart_callback_t</name></type> <name>revstart_func</name></decl></param>,
<param><decl><type><name>svn_ra_replay_revfinish_callback_t</name></type> <name>revfinish_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>replay_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__lock</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>path_revs</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>comment</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>force</name></decl></param>,
<param><decl><type><name>svn_ra_lock_callback_t</name></type> <name>lock_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>lock_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__unlock</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>path_tokens</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>force</name></decl></param>,
<param><decl><type><name>svn_ra_lock_callback_t</name></type> <name>lock_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>lock_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__get_lock</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
<param><decl><type><name>svn_lock_t</name> **</type><name>lock</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__get_locks</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> **</type><name>locks</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type> <name>svn_ra_serf__get_mergeinfo</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> **</type><name>mergeinfo</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>paths</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
<param><decl><type><name>svn_mergeinfo_inheritance_t</name></type> <name>inherit</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>include_descendants</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__has_capability</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name> *</type><name>has</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>capability</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<typedef>typedef <function_decl><type><name>svn_error_t</name> *</type>
(*<name>svn_serf__auth_handler_func_t</name>)<parameter_list>(<param><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name></decl></param>,
<param><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>conn</name></decl></param>,
<param><decl><type><name>serf_request_t</name> *</type><name>request</name></decl></param>,
<param><decl><type><name>serf_bucket_t</name> *</type><name>response</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>auth_hdr</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>auth_attr</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>svn_error_t</name> *</type>
(*<name>svn_serf__init_conn_func_t</name>)<parameter_list>(<param><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name></decl></param>,
<param><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>conn</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>svn_error_t</name> *</type>
(*<name>svn_serf__setup_request_func_t</name>)<parameter_list>(<param><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>conn</name></decl></param>,
<param><decl><type><name>serf_bucket_t</name> *</type><name>hdrs_bkt</name></decl></param>)</parameter_list>;</function_decl></typedef>
<struct>struct <name>svn_ra_serf__auth_protocol_t</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>auth_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_serf__init_conn_func_t</name></type> <name>init_conn_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_serf__auth_handler_func_t</name></type> <name>handle_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_serf__setup_request_func_t</name></type> <name>setup_request_func</name></decl>;</decl_stmt>
}</block>;</struct>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__handle_auth</name><parameter_list>(<param><decl><type><name>int</name></type> <name>code</name></decl></param>,
<param><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name></decl></param>,
<param><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>conn</name></decl></param>,
<param><decl><type><name>serf_request_t</name> *</type><name>request</name></decl></param>,
<param><decl><type><name>serf_bucket_t</name> *</type><name>response</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>
<name>svn_ra_serf__encode_auth_header</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type> <name>protocol</name></decl></param>,
<param><decl><type><name>char</name> **</type><name>header</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type> <name>data</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>data_len</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
