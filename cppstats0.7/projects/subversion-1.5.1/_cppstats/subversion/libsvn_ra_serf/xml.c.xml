<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/libsvn_ra_serf/xml.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_uri.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;expat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;serf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_ra.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_dav.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_xml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libsvn_ra/ra_loader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_delta.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ra_serf.h"</cpp:file></cpp:include>
<function><type><name>void</name></type>
<name>svn_ra_serf__define_ns</name><parameter_list>(<param><decl><type><name>svn_ra_serf__ns_t</name> **</type><name>ns_list</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>attrs</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>tmp_attrs</name> <init>= <expr><name>attrs</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr>*<name>tmp_attrs</name></expr>)</condition> <block>{
<if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr>*<name>tmp_attrs</name></expr></argument>, <argument><expr>"xmlns"</expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_ra_serf__ns_t</name> *</type><name>new_ns</name></decl>, *<decl><type ref="prev"/><name>cur_ns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>cur_ns</name> = *<name>ns_list</name></expr>;</init> <condition><expr><name>cur_ns</name></expr>;</condition> <incr><expr><name>cur_ns</name> = <name><name>cur_ns</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>cur_ns</name>-&gt;<name>namespace</name></name></expr></argument>, <argument><expr><name><name>tmp_attrs</name><index>[<expr>0</expr>]</index></name> + 6</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>found</name> = 1</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr>!<name>found</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>new_ns</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>new_ns</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_ns</name>-&gt;<name>namespace</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>tmp_attrs</name><index>[<expr>0</expr>]</index></name> + 6</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_ns</name>-&gt;<name>url</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>tmp_attrs</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_ns</name>-&gt;<name>next</name></name> = *<name>ns_list</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>ns_list</name> = <name>new_ns</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>tmp_attrs</name> += 2</expr>;</expr_stmt>
}</block></while>
}</block></function>
<function><type><name>svn_ra_serf__dav_props_t</name></type>
<name>svn_ra_serf__expand_ns</name><parameter_list>(<param><decl><type><name>svn_ra_serf__ns_t</name> *</type><name>ns_list</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>colon</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__dav_props_t</name></type> <name>prop_name</name></decl>;</decl_stmt>
<expr_stmt><expr><name>colon</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>colon</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_ra_serf__ns_t</name> *</type><name>ns</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>prop_name</name>.<name>namespace</name></name> = <name>NULL</name></expr>;</expr_stmt>
<for>for (<init><expr><name>ns</name> = <name>ns_list</name></expr>;</init> <condition><expr><name>ns</name></expr>;</condition> <incr><expr><name>ns</name> = <name><name>ns</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>ns</name>-&gt;<name>namespace</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>colon</name> - <name>name</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>prop_name</name>.<name>namespace</name></name> = <name><name>ns</name>-&gt;<name>url</name></name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr>!<name><name>prop_name</name>.<name>namespace</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>prop_name</name>.<name>name</name></name> = <name>colon</name> + 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>prop_name</name>.<name>namespace</name></name> = ""</expr>;</expr_stmt>
<expr_stmt><expr><name><name>prop_name</name>.<name>name</name></name> = <name>name</name></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>prop_name</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>svn_ra_serf__expand_string</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>cur</name></decl></param>, <param><decl><type><name>apr_size_t</name> *</type><name>cur_len</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>new</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>new_len</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!*<name>cur</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>cur</name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>new</name></expr></argument>, <argument><expr><name>new_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>cur_len</name> = <name>new_len</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>new_cur</name></decl>;</decl_stmt>
<expr_stmt><expr><name>new_cur</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>*<name>cur_len</name> + <name>new_len</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new_cur</name></expr></argument>, <argument><expr>*<name>cur</name></expr></argument>, <argument><expr>*<name>cur_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new_cur</name> + *<name>cur_len</name></expr></argument>, <argument><expr><name>new</name></expr></argument>, <argument><expr><name>new_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_cur</name><index>[<expr>*<name>cur_len</name> + <name>new_len</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr>*<name>cur_len</name> += <name>new_len</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>cur</name> = <name>new_cur</name></expr>;</expr_stmt>
}</block></else></if>
}</block></function>
<function><type><name>void</name></type> <name>svn_ra_serf__add_tag_buckets</name><parameter_list>(<param><decl><type><name>serf_bucket_t</name> *</type><name>agg_bucket</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tag</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>,
<param><decl><type><name>serf_bucket_alloc_t</name> *</type><name>bkt_alloc</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>serf_bucket_t</name> *</type><name>tmp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr>"&lt;"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>bkt_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name>agg_bucket</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>bkt_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name>agg_bucket</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr>"&gt;"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>bkt_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name>agg_bucket</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>value</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>bkt_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name>agg_bucket</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr>"&lt;/"</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>bkt_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name>agg_bucket</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>bkt_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name>agg_bucket</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr>"&gt;"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>bkt_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name>agg_bucket</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type>
<name>svn_ra_serf__xml_push_state</name><parameter_list>(<param><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser</name></decl></param>,
<param><decl><type><name>int</name></type> <name>state</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_serf__xml_state_t</name> *</type><name>new_state</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>parser</name>-&gt;<name>free_state</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>new_state</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>parser</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>new_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name><name>new_state</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>parser</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>new_state</name> = <name><name>parser</name>-&gt;<name>free_state</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name>-&gt;<name>free_state</name></name> = <name><name>parser</name>-&gt;<name>free_state</name>-&gt;<name>prev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name><name>new_state</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>parser</name>-&gt;<name>state</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>new_state</name>-&gt;<name>private</name></name> = <name><name>parser</name>-&gt;<name>state</name>-&gt;<name>private</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_state</name>-&gt;<name>ns_list</name></name> = <name><name>parser</name>-&gt;<name>state</name>-&gt;<name>ns_list</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>new_state</name>-&gt;<name>private</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_state</name>-&gt;<name>ns_list</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>new_state</name>-&gt;<name>current_state</name></name> = <name>state</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_state</name>-&gt;<name>prev</name></name> = <name><name>parser</name>-&gt;<name>state</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name>-&gt;<name>state</name></name> = <name>new_state</name></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>svn_ra_serf__xml_pop_state</name><parameter_list>(<param><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_serf__xml_state_t</name> *</type><name>cur_state</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cur_state</name> = <name><name>parser</name>-&gt;<name>state</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name>-&gt;<name>state</name></name> = <name><name>cur_state</name>-&gt;<name>prev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur_state</name>-&gt;<name>prev</name></name> = <name><name>parser</name>-&gt;<name>free_state</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name>-&gt;<name>free_state</name></name> = <name>cur_state</name></expr>;</expr_stmt>
}</block></function>
</unit>
