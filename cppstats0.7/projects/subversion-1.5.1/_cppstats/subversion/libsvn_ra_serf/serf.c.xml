<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/libsvn_ra_serf/serf.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_want.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_uri.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;expat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;serf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_ra.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_dav.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_xml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libsvn_ra/ra_loader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_delta.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_dav_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_dep_compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ra_serf.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>capability_yes</name> <init>= <expr>"yes"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>capability_no</name> <init>= <expr>"no"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>capability_server_yes</name> <init>= <expr>"server-yes"</expr></init></decl>;</decl_stmt>
<struct>struct <name>capabilities_response_baton</name> <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>capabilities</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>done</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>capabilities_headers_iterator_callback</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>capabilities_response_baton</name> *</type><name>crb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>svn_cstring_casecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"dav"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>vals</name> <init>= <expr><call><name>svn_cstring_split</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr>","</expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name><name>crb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>svn_cstring_match_glob_list</name><argument_list>(<argument><expr><name>SVN_DAV_NS_DAV_SVN_DEPTH</name></expr></argument>, <argument><expr><name>vals</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>crb</name>-&gt;<name>capabilities</name></name></expr></argument>, <argument><expr><name>SVN_RA_CAPABILITY_DEPTH</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>capability_yes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>svn_cstring_match_glob_list</name><argument_list>(<argument><expr><name>SVN_DAV_NS_DAV_SVN_MERGEINFO</name></expr></argument>, <argument><expr><name>vals</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>crb</name>-&gt;<name>capabilities</name></name></expr></argument>, <argument><expr><name>SVN_RA_CAPABILITY_MERGEINFO</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>capability_server_yes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>svn_cstring_match_glob_list</name><argument_list>(<argument><expr><name>SVN_DAV_NS_DAV_SVN_LOG_REVPROPS</name></expr></argument>, <argument><expr><name>vals</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>crb</name>-&gt;<name>capabilities</name></name></expr></argument>, <argument><expr><name>SVN_RA_CAPABILITY_LOG_REVPROPS</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>capability_yes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>svn_cstring_match_glob_list</name><argument_list>(<argument><expr><name>SVN_DAV_NS_DAV_SVN_PARTIAL_REPLAY</name></expr></argument>, <argument><expr><name>vals</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>crb</name>-&gt;<name>capabilities</name></name></expr></argument>, <argument><expr><name>SVN_RA_CAPABILITY_PARTIAL_REPLAY</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>capability_yes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type>
<name>capabilities_response_handler</name><parameter_list>(<param><decl><type><name>serf_request_t</name> *</type><name>request</name></decl></param>,
<param><decl><type><name>serf_bucket_t</name> *</type><name>response</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>handler_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>capabilities_response_baton</name> *</type><name>crb</name> <init>= <expr><name>handler_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>serf_bucket_t</name> *</type><name>hdrs</name> <init>= <expr><call><name>serf_bucket_response_get_headers</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>crb</name>-&gt;<name>capabilities</name></name></expr></argument>, <argument><expr><name>SVN_RA_CAPABILITY_DEPTH</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>capability_no</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>crb</name>-&gt;<name>capabilities</name></name></expr></argument>, <argument><expr><name>SVN_RA_CAPABILITY_MERGEINFO</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>capability_no</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>crb</name>-&gt;<name>capabilities</name></name></expr></argument>, <argument><expr><name>SVN_RA_CAPABILITY_LOG_REVPROPS</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>capability_no</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serf_bucket_headers_do</name><argument_list>(<argument><expr><name>hdrs</name></expr></argument>, <argument><expr><name>capabilities_headers_iterator_callback</name></expr></argument>, <argument><expr><name>crb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>crb</name>-&gt;<name>done</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serf_request_set_handler</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>svn_ra_serf__handle_discard_body</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type>
<name>set_up_capabilities_headers</name><parameter_list>(<param><decl><type><name>serf_bucket_t</name> *</type><name>headers</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>serf_bucket_headers_set</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr>"DAV"</expr></argument>, <argument><expr><name>SVN_DAV_NS_DAV_SVN_DEPTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serf_bucket_headers_set</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr>"DAV"</expr></argument>, <argument><expr><name>SVN_DAV_NS_DAV_SVN_MERGEINFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serf_bucket_headers_set</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr>"DAV"</expr></argument>, <argument><expr><name>SVN_DAV_NS_DAV_SVN_LOG_REVPROPS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>exchange_capabilities</name><parameter_list>(<param><decl><type><name>svn_ra_serf__session_t</name> *</type><name>serf_sess</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_serf__handler_t</name> *</type><name>handler</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>capabilities_response_baton</name></type> <name>crb</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>crb</name>.<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>crb</name>.<name>done</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>crb</name>.<name>capabilities</name></name> = <name><name>serf_sess</name>-&gt;<name>capabilities</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>handler</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>handler</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handler</name>-&gt;<name>method</name></name> = "OPTIONS"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>handler</name>-&gt;<name>path</name></name> = <name><name>serf_sess</name>-&gt;<name>repos_url_str</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handler</name>-&gt;<name>body_buckets</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handler</name>-&gt;<name>response_handler</name></name> = <name>capabilities_response_handler</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handler</name>-&gt;<name>response_baton</name></name> = &amp;<name>crb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handler</name>-&gt;<name>header_delegate</name></name> = <name>set_up_capabilities_headers</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handler</name>-&gt;<name>session</name></name> = <name>serf_sess</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handler</name>-&gt;<name>conn</name></name> = <name><name>serf_sess</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_ra_serf__request_create</name><argument_list>(<argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_ra_serf__context_run_wait</name><argument_list>(<argument><expr>&amp;(<name><name>crb</name>.<name>done</name></name>)</expr></argument>, <argument><expr><name>serf_sess</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__has_capability</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name> *</type><name>has</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>capability</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_serf__session_t</name> *</type><name>serf_sess</name> <init>= <expr><name><name>ra_session</name>-&gt;<name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cap_result</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>capability</name></expr></argument>, <argument><expr><name>SVN_RA_CAPABILITY_COMMIT_REVPROPS</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>has</name> = <name>TRUE</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>cap_result</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>serf_sess</name>-&gt;<name>capabilities</name></name></expr></argument>,
<argument><expr><name>capability</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cap_result</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>exchange_capabilities</name><argument_list>(<argument><expr><name>serf_sess</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>cap_result</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>serf_sess</name>-&gt;<name>capabilities</name></name></expr></argument>,
<argument><expr><name>capability</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cap_result</name> == <name>capability_server_yes</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>capability</name></expr></argument>, <argument><expr><name>SVN_RA_CAPABILITY_MERGEINFO</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_mergeinfo_catalog_t</name></type> <name>ignored</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>paths</name> <init>= <expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>paths</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = ""</expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_ra_serf__get_mergeinfo</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>&amp;<name>ignored</name></expr></argument>, <argument><expr><name>paths</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_UNSUPPORTED_FEATURE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cap_result</name> = <name>capability_no</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_FS_NOT_FOUND</name>
|| <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_RA_DAV_PATH_NOT_FOUND</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cap_result</name> = <name>capability_yes</name></expr>;</expr_stmt>
}</block></then> <else>else
<return>return <expr><name>err</name></expr>;</return></else></if></else></if>
}</block></then> <else>else
<expr_stmt><expr><name>cap_result</name> = <name>capability_yes</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>serf_sess</name>-&gt;<name>capabilities</name></name></expr></argument>,
<argument><expr><name>SVN_RA_CAPABILITY_MERGEINFO</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><name>cap_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_UNKNOWN_CAPABILITY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Don't know how to handle '%s' for capability '%s'"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>capability_server_yes</name></expr></argument>, <argument><expr><name>capability</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
}</block></then></if>
<if>if <condition>(<expr><name>cap_result</name> == <name>capability_yes</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>has</name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>cap_result</name> == <name>capability_no</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>has</name> = <name>FALSE</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>cap_result</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_UNKNOWN_CAPABILITY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Don't know anything about capability '%s'"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>capability</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_OPTIONS_REQ_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Attempt to fetch capability '%s' resulted in '%s'"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>capability</name></expr></argument>, <argument><expr><name>cap_result</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if></else></if></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_version_t</name> *</type>
<name>ra_serf_version</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name>SVN_VERSION_BODY</name></expr>;</expr_stmt>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RA_SERF_DESCRIPTION</name></cpp:macro> <cpp:value>N_("Module for accessing a repository via WebDAV protocol using serf.")</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>ra_serf_get_description</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>_</name><argument_list>(<argument><expr><name>RA_SERF_DESCRIPTION</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> * <specifier>const</specifier> *</type>
<name>ra_serf_get_schemes</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name><name>serf_ssl</name><index>[]</index></name> <init>= <expr><block>{ <expr>"http"</expr>, <expr>"https"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
static const char *serf_no_ssl[] = { "http", NULL };
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>serf_ssl</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>load_config</name><parameter_list>(<param><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>config_hash</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_config_t</name> *</type><name>config</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>server_group</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>SERF_VERSION_AT_LEAST</name><argument_list>(<argument><expr>0, 1, 3</expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>proxy_host</name> <init>= <expr><name>NULL</name></expr></init>, *<name>port_str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>proxy_port</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>config</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>config_hash</name></expr></argument>, <argument><expr><name>SVN_CONFIG_CATEGORY_SERVERS</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_config_get_bool</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr>&amp;<name><name>session</name>-&gt;<name>using_compression</name></name></expr></argument>,
<argument><expr><name>SVN_CONFIG_SECTION_GLOBAL</name></expr></argument>,
<argument><expr><name>SVN_CONFIG_OPTION_HTTP_COMPRESSION</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_auth_set_parameter</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>wc_callbacks</name>-&gt;<name>auth_baton</name></name></expr></argument>,
<argument><expr><name>SVN_AUTH_PARAM_CONFIG</name></expr></argument>, <argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>SERF_VERSION_AT_LEAST</name><argument_list>(<argument><expr>0, 1, 3</expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>svn_config_get</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr>&amp;<name>proxy_host</name></expr></argument>, <argument><expr><name>SVN_CONFIG_SECTION_GLOBAL</name></expr></argument>,
<argument><expr><name>SVN_CONFIG_OPTION_HTTP_PROXY_HOST</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_config_get</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr>&amp;<name>port_str</name></expr></argument>, <argument><expr><name>SVN_CONFIG_SECTION_GLOBAL</name></expr></argument>,
<argument><expr><name>SVN_CONFIG_OPTION_HTTP_PROXY_PORT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_config_get</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr>&amp;<name><name>session</name>-&gt;<name>proxy_username</name></name></expr></argument>, <argument><expr><name>SVN_CONFIG_SECTION_GLOBAL</name></expr></argument>,
<argument><expr><name>SVN_CONFIG_OPTION_HTTP_PROXY_USERNAME</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_config_get</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr>&amp;<name><name>session</name>-&gt;<name>proxy_password</name></name></expr></argument>, <argument><expr><name>SVN_CONFIG_SECTION_GLOBAL</name></expr></argument>,
<argument><expr><name>SVN_CONFIG_OPTION_HTTP_PROXY_PASSWORD</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_config_get_bool</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr>&amp;<name><name>session</name>-&gt;<name>trust_default_ca</name></name></expr></argument>,
<argument><expr><name>SVN_CONFIG_SECTION_GLOBAL</name></expr></argument>,
<argument><expr><name>SVN_CONFIG_OPTION_SSL_TRUST_DEFAULT_CA</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_config_get</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr>&amp;<name><name>session</name>-&gt;<name>ssl_authorities</name></name></expr></argument>, <argument><expr><name>SVN_CONFIG_SECTION_GLOBAL</name></expr></argument>,
<argument><expr><name>SVN_CONFIG_OPTION_SSL_AUTHORITY_FILES</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>config</name></expr>)</condition><then>
<expr_stmt><expr><name>server_group</name> = <call><name>svn_config_find_group</name><argument_list>(<argument><expr><name>config</name></expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>repos_url</name>.<name>hostname</name></name></expr></argument>,
<argument><expr><name>SVN_CONFIG_SECTION_GROUPS</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>server_group</name> = <name>NULL</name></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>server_group</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_config_get_bool</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr>&amp;<name><name>session</name>-&gt;<name>using_compression</name></name></expr></argument>,
<argument><expr><name>server_group</name></expr></argument>,
<argument><expr><name>SVN_CONFIG_OPTION_HTTP_COMPRESSION</name></expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>using_compression</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_auth_set_parameter</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>wc_callbacks</name>-&gt;<name>auth_baton</name></name></expr></argument>,
<argument><expr><name>SVN_AUTH_PARAM_SERVER_GROUP</name></expr></argument>, <argument><expr><name>server_group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>SERF_VERSION_AT_LEAST</name><argument_list>(<argument><expr>0, 1, 3</expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>svn_config_get</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr>&amp;<name>proxy_host</name></expr></argument>, <argument><expr><name>server_group</name></expr></argument>,
<argument><expr><name>SVN_CONFIG_OPTION_HTTP_PROXY_HOST</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_config_get</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr>&amp;<name>port_str</name></expr></argument>, <argument><expr><name>server_group</name></expr></argument>,
<argument><expr><name>SVN_CONFIG_OPTION_HTTP_PROXY_PORT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_config_get</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr>&amp;<name><name>session</name>-&gt;<name>proxy_username</name></name></expr></argument>, <argument><expr><name>server_group</name></expr></argument>,
<argument><expr><name>SVN_CONFIG_OPTION_HTTP_PROXY_USERNAME</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_config_get</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr>&amp;<name><name>session</name>-&gt;<name>proxy_password</name></name></expr></argument>, <argument><expr><name>server_group</name></expr></argument>,
<argument><expr><name>SVN_CONFIG_OPTION_HTTP_PROXY_PASSWORD</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_config_get_bool</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr>&amp;<name><name>session</name>-&gt;<name>trust_default_ca</name></name></expr></argument>,
<argument><expr><name>server_group</name></expr></argument>,
<argument><expr><name>SVN_CONFIG_OPTION_SSL_TRUST_DEFAULT_CA</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_config_get</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr>&amp;<name><name>session</name>-&gt;<name>ssl_authorities</name></name></expr></argument>, <argument><expr><name>server_group</name></expr></argument>,
<argument><expr><name>SVN_CONFIG_OPTION_SSL_AUTHORITY_FILES</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>SERF_VERSION_AT_LEAST</name><argument_list>(<argument><expr>0, 1, 3</expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>port_str</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>endstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>int</name></type> <name>port</name> <init>= <expr><call><name>strtol</name><argument_list>(<argument><expr><name>port_str</name></expr></argument>, <argument><expr>&amp;<name>endstr</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>*<name>endstr</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_ILLEGAL_URL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Invalid URL: illegal character in proxy "
"port number"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>port</name> &lt; 0</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_ILLEGAL_URL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Invalid URL: negative proxy port number"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>port</name> &gt; 65535</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_ILLEGAL_URL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Invalid URL: proxy port number greater "
"than maximum TCP port number 65535"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>proxy_port</name> = <name>port</name></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name>proxy_port</name> = 80</expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>proxy_host</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_sockaddr_t</name> *</type><name>proxy_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<expr_stmt><expr><name>status</name> = <call><name>apr_sockaddr_info_get</name><argument_list>(<argument><expr>&amp;<name>proxy_addr</name></expr></argument>, <argument><expr><name>proxy_host</name></expr></argument>,
<argument><expr><name>APR_INET</name></expr></argument>, <argument><expr><name>proxy_port</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>session</name>-&gt;<name>using_proxy</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serf_config_proxy</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>context</name></name></expr></argument>, <argument><expr><name>proxy_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name><name>session</name>-&gt;<name>using_proxy</name></name> = <name>FALSE</name></expr>;</expr_stmt></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>SERF_VERSION_AT_LEAST</name><argument_list>(<argument><expr>0,1,3</expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>svn_ra_serf__progress</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>progress_baton</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>read</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>written</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_ra_serf__session_t</name> *</type><name>serf_sess</name> <init>= <expr><name>progress_baton</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>serf_sess</name>-&gt;<name>wc_progress_func</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name><name>serf_sess</name>-&gt;<name>wc_progress_func</name></name><argument_list>(<argument><expr><name>read</name> + <name>written</name></expr></argument>, <argument><expr>-1</expr></argument>,
<argument><expr><name><name>serf_sess</name>-&gt;<name>wc_progress_baton</name></name></expr></argument>,
<argument><expr><name><name>serf_sess</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>svn_ra_serf__open</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_URL</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_ra_callbacks2_t</name> *</type><name>callbacks</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>callback_baton</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>config</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__session_t</name> *</type><name>serf_sess</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uri_t</name></type> <name>url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>client_string</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>serf_sess</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>serf_sess</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name><name>serf_sess</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>serf_sess</name>-&gt;<name>bkt_alloc</name></name> = <call><name>serf_bucket_allocator_create</name><argument_list>(<argument><expr><name><name>serf_sess</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>serf_sess</name>-&gt;<name>cached_props</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name><name>serf_sess</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>serf_sess</name>-&gt;<name>wc_callbacks</name></name> = <name>callbacks</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>serf_sess</name>-&gt;<name>wc_callback_baton</name></name> = <name>callback_baton</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>serf_sess</name>-&gt;<name>wc_progress_baton</name></name> = <name><name>callbacks</name>-&gt;<name>progress_baton</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>serf_sess</name>-&gt;<name>wc_progress_func</name></name> = <name><name>callbacks</name>-&gt;<name>progress_func</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>serf_sess</name>-&gt;<name>context</name></name> = <call><name>serf_context_create</name><argument_list>(<argument><expr><name><name>serf_sess</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>apr_uri_parse</name><argument_list>(<argument><expr><name><name>serf_sess</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>repos_URL</name></expr></argument>, <argument><expr>&amp;<name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_ILLEGAL_URL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Illegal repository URL '%s'"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>repos_URL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>url</name>.<name>path</name></name> == <name>NULL</name> || <name><name>url</name>.<name>path</name><index>[<expr>0</expr>]</index></name> == '\0'</expr>)</condition><then>
<expr_stmt><expr><name><name>url</name>.<name>path</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>serf_sess</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"/"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>serf_sess</name>-&gt;<name>repos_url</name></name> = <name>url</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>serf_sess</name>-&gt;<name>repos_url_str</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>serf_sess</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>repos_URL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>url</name>.<name>port</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>url</name>.<name>port</name></name> = <call><name>apr_uri_port_of_scheme</name><argument_list>(<argument><expr><name><name>url</name>.<name>scheme</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>serf_sess</name>-&gt;<name>using_ssl</name></name> = (<call><name>svn_cstring_casecmp</name><argument_list>(<argument><expr><name><name>url</name>.<name>scheme</name></name></expr></argument>, <argument><expr>"https"</expr></argument>)</argument_list></call> == 0)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>serf_sess</name>-&gt;<name>capabilities</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name><name>serf_sess</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>load_config</name><argument_list>(<argument><expr><name>serf_sess</name></expr></argument>, <argument><expr><name>config</name></expr></argument>, <argument><expr><name><name>serf_sess</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name><name>serf_sess</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>serf_sess</name></expr></argument>,
<argument><expr><name>svn_ra_serf__cleanup_serf_session</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>serf_sess</name>-&gt;<name>conns</name></name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>serf_sess</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name><name>serf_sess</name>-&gt;<name>conns</name></name></expr></argument>)</argument_list></sizeof> * 4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>serf_sess</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>serf_sess</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name><name>serf_sess</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>serf_sess</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name>-&gt;<name>bkt_alloc</name> =
<call><name>serf_bucket_allocator_create</name><argument_list>(<argument><expr><name><name>serf_sess</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>serf_sess</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name>-&gt;<name>session</name> = <name>serf_sess</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>serf_sess</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name>-&gt;<name>last_status_code</name> = -1</expr>;</expr_stmt>
<if>if <condition>(<expr>! <name><name>serf_sess</name>-&gt;<name>using_proxy</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>status</name> = <call><name>apr_sockaddr_info_get</name><argument_list>(<argument><expr>&amp;<name><name>serf_sess</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name>-&gt;<name>address</name></expr></argument>,
<argument><expr><name><name>url</name>.<name>hostname</name></name></expr></argument>,
<argument><expr><name>APR_UNSPEC</name></expr></argument>, <argument><expr><name><name>url</name>.<name>port</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>serf_sess</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_wrap_apr</name><argument_list>(<argument><expr><name>status</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Could not lookup hostname `%s'"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>url</name>.<name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>apr_sockaddr_t</name> *</type><name>sa</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>serf_sess</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>apr_sockaddr_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sa</name>-&gt;<name>pool</name></name> = <name><name>serf_sess</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name>-&gt;<name>hostname</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>serf_sess</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>url</name>.<name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name>-&gt;<name>port</name></name> = <name><name>url</name>.<name>port</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sa</name>-&gt;<name>family</name></name> = <name>APR_UNSPEC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>serf_sess</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name>-&gt;<name>address</name> = <name>sa</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>serf_sess</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name>-&gt;<name>using_ssl</name> = <name><name>serf_sess</name>-&gt;<name>using_ssl</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>serf_sess</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name>-&gt;<name>using_compression</name> = <name><name>serf_sess</name>-&gt;<name>using_compression</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>serf_sess</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name>-&gt;<name>hostinfo</name> = <name><name>url</name>.<name>hostinfo</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>serf_sess</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name>-&gt;<name>auth_header</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>serf_sess</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name>-&gt;<name>auth_value</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>serf_sess</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name>-&gt;<name>useragent</name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>callbacks</name>-&gt;<name>get_client_string</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name><name>callbacks</name>-&gt;<name>get_client_string</name></name><argument_list>(<argument><expr><name>callback_baton</name></expr></argument>, <argument><expr>&amp;<name>client_string</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>client_string</name></expr>)</condition><then>
<expr_stmt><expr><name><name>serf_sess</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name>-&gt;<name>useragent</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>USER_AGENT</name></expr></argument>, <argument><expr>"/"</expr></argument>,
<argument><expr><name>client_string</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>serf_sess</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name>-&gt;<name>useragent</name> = <name>USER_AGENT</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name><name>serf_sess</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name>-&gt;<name>conn</name> =
<call><name>serf_connection_create</name><argument_list>(<argument><expr><name><name>serf_sess</name>-&gt;<name>context</name></name></expr></argument>, <argument><expr><name><name>serf_sess</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name>-&gt;<name>address</name></expr></argument>,
<argument><expr><name>svn_ra_serf__conn_setup</name></expr></argument>, <argument><expr><name><name>serf_sess</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name></expr></argument>,
<argument><expr><name>svn_ra_serf__conn_closed</name></expr></argument>, <argument><expr><name><name>serf_sess</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name></expr></argument>,
<argument><expr><name><name>serf_sess</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>SERF_VERSION_AT_LEAST</name><argument_list>(<argument><expr>0,1,3</expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>serf_context_set_progress_cb</name><argument_list>(<argument><expr><name><name>serf_sess</name>-&gt;<name>context</name></name></expr></argument>, <argument><expr><name>svn_ra_serf__progress</name></expr></argument>,
<argument><expr><name>serf_sess</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>serf_sess</name>-&gt;<name>num_conns</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>session</name>-&gt;<name>priv</name></name> = <name>serf_sess</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>exchange_capabilities</name><argument_list>(<argument><expr><name>serf_sess</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>svn_ra_serf__reparent</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name> <init>= <expr><name><name>ra_session</name>-&gt;<name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uri_t</name></type> <name>new_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>repos_url_str</name></name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>status</name> = <call><name>apr_uri_parse</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr>&amp;<name>new_url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_ILLEGAL_URL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Illegal repository URL '%s'"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>session</name>-&gt;<name>repos_url</name>.<name>path</name></name> = <name><name>new_url</name>.<name>path</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>session</name>-&gt;<name>repos_url_str</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>svn_ra_serf__get_session_url</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>url</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name> <init>= <expr><name><name>ra_session</name>-&gt;<name>priv</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>url</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>repos_url_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>svn_ra_serf__get_latest_revnum</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name> *</type><name>latest_revnum</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name> <init>= <expr><name><name>ra_session</name>-&gt;<name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>vcc_url</name></decl>, *<decl><type ref="prev"/><name>baseline_url</name></decl>, *<decl><type ref="prev"/><name>version_name</name></decl>;</decl_stmt>
<expr_stmt><expr><name>props</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_serf__discover_root</name><argument_list>(<argument><expr>&amp;<name>vcc_url</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name></expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>repos_url</name>.<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>vcc_url</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_OPTIONS_REQ_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"The OPTIONS response did not include the "
"requested version-controlled-configuration "
"value"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_serf__retrieve_props</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name></expr></argument>,
<argument><expr><name>vcc_url</name></expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>, <argument><expr>"0"</expr></argument>,
<argument><expr><name>checked_in_props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>baseline_url</name> = <call><name>svn_ra_serf__get_prop</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>vcc_url</name></expr></argument>,
<argument><expr>"DAV:"</expr></argument>, <argument><expr>"checked-in"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>baseline_url</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_OPTIONS_REQ_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"The OPTIONS response did not include the "
"requested checked-in value"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_serf__retrieve_props</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name></expr></argument>,
<argument><expr><name>baseline_url</name></expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
<argument><expr>"0"</expr></argument>, <argument><expr><name>baseline_props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>version_name</name> = <call><name>svn_ra_serf__get_prop</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>baseline_url</name></expr></argument>,
<argument><expr>"DAV:"</expr></argument>, <argument><expr><name>SVN_DAV__VERSION_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>version_name</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_OPTIONS_REQ_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"The OPTIONS response did not include the "
"requested version-name value"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>latest_revnum</name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name>version_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>svn_ra_serf__rev_proplist</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> **</type><name>ret_props</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name> <init>= <expr><name><name>ra_session</name>-&gt;<name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>vcc_url</name></decl>;</decl_stmt>
<expr_stmt><expr><name>props</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>ret_props</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_serf__discover_root</name><argument_list>(<argument><expr>&amp;<name>vcc_url</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name></expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>repos_url</name>.<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_serf__retrieve_props</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name></expr></argument>,
<argument><expr><name>vcc_url</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr>"0"</expr></argument>, <argument><expr><name>all_props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_ra_serf__walk_all_props</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>vcc_url</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>svn_ra_serf__set_bare_props</name></expr></argument>,
<argument><expr>*<name>ret_props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>svn_ra_serf__rev_prop</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><name>svn_string_t</name> **</type><name>value</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_serf__rev_proplist</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr>&amp;<name>props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>value</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>fetch_path_props</name><parameter_list>(<param><decl><type><name>svn_ra_serf__propfind_context_t</name> **</type><name>ret_prop_ctx</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> **</type><name>ret_props</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>ret_path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name> *</type><name>ret_revision</name></decl></param>,
<param><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rel_path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_ra_serf__dav_props_t</name> *</type><name>desired_props</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_serf__propfind_context_t</name> *</type><name>prop_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<expr_stmt><expr><name>path</name> = <name><name>session</name>-&gt;<name>repos_url</name>.<name>path</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rel_path</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>path</name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>rel_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>props</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prop_ctx</name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>revision</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_ra_serf__deliver_props</name><argument_list>(<argument><expr>&amp;<name>prop_ctx</name></expr></argument>, <argument><expr><name>props</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name></expr></argument>,
<argument><expr><name>path</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr>"0"</expr></argument>, <argument><expr><name>desired_props</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>vcc_url</name></decl>, *<decl><type ref="prev"/><name>relative_url</name></decl>, *<decl><type ref="prev"/><name>basecoll_url</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_serf__discover_root</name><argument_list>(<argument><expr>&amp;<name>vcc_url</name></expr></argument>, <argument><expr>&amp;<name>relative_url</name></expr></argument>,
<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name></expr></argument>,
<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_serf__retrieve_props</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name></expr></argument>,
<argument><expr><name>vcc_url</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>,
<argument><expr>"0"</expr></argument>, <argument><expr><name>baseline_props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>basecoll_url</name> = <call><name>svn_ra_serf__get_ver_prop</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>vcc_url</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>,
<argument><expr>"DAV:"</expr></argument>, <argument><expr>"baseline-collection"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>basecoll_url</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_OPTIONS_REQ_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"The OPTIONS response did not include the "
"requested baseline-collection value"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>prop_ctx</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name>basecoll_url</name></expr></argument>, <argument><expr><name>relative_url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>revision</name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_ra_serf__deliver_props</name><argument_list>(<argument><expr>&amp;<name>prop_ctx</name></expr></argument>, <argument><expr><name>props</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name></expr></argument>,
<argument><expr><name>path</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr>"0"</expr></argument>,
<argument><expr><name>desired_props</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>prop_ctx</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_serf__wait_for_props</name><argument_list>(<argument><expr><name>prop_ctx</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>*<name>ret_path</name> = <name>path</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>ret_prop_ctx</name> = <name>prop_ctx</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>ret_props</name> = <name>props</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>ret_revision</name> = <name>revision</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>svn_ra_serf__check_path</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rel_path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
<param><decl><type><name>svn_node_kind_t</name> *</type><name>kind</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name> <init>= <expr><name><name>ra_session</name>-&gt;<name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__propfind_context_t</name> *</type><name>prop_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>, *<decl><type ref="prev"/><name>res_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>fetched_rev</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>fetch_path_props</name><argument_list>(<argument><expr>&amp;<name>prop_ctx</name></expr></argument>, <argument><expr>&amp;<name>props</name></expr></argument>, <argument><expr>&amp;<name>path</name></expr></argument>, <argument><expr>&amp;<name>fetched_rev</name></expr></argument>,
<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rel_path</name></expr></argument>,
<argument><expr><name>revision</name></expr></argument>, <argument><expr><name>check_path_props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>prop_ctx</name> &amp;&amp; (<call><name>svn_ra_serf__propfind_status_code</name><argument_list>(<argument><expr><name>prop_ctx</name></expr></argument>)</argument_list></call> == 404)</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>kind</name> = <name>svn_node_none</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>res_type</name> = <call><name>svn_ra_serf__get_ver_prop</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>fetched_rev</name></expr></argument>,
<argument><expr>"DAV:"</expr></argument>, <argument><expr>"resourcetype"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>res_type</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_OPTIONS_REQ_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"The OPTIONS response did not include the "
"requested resourcetype value"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>res_type</name></expr></argument>, <argument><expr>"collection"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>kind</name> = <name>svn_node_dir</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>kind</name> = <name>svn_node_file</name></expr>;</expr_stmt>
}</block></else></if></else></if>
}</block></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>dirent_walker</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ns</name></decl></param>, <param><decl><type><name>apr_ssize_t</name></type> <name>ns_len</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>apr_ssize_t</name></type> <name>name_len</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>val</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_dirent_t</name> *</type><name>entry</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>SVN_DAV_PROP_NS_CUSTOM</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>entry</name>-&gt;<name>has_props</name></name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr><name>SVN_DAV_PROP_NS_SVN</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>entry</name>-&gt;<name>has_props</name></name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>ns</name></expr></argument>, <argument><expr>"DAV:"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_DAV__VERSION_NAME</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>entry</name>-&gt;<name>created_rev</name></name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name><name>val</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"creator-displayname"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>entry</name>-&gt;<name>last_author</name></name> = <name><name>val</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_DAV__CREATIONDATE</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_time_from_cstring</name><argument_list>(<argument><expr>&amp;<name><name>entry</name>-&gt;<name>time</name></name></expr></argument>, <argument><expr><name><name>val</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"getcontentlength"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>entry</name>-&gt;<name>size</name></name> = <call><name>apr_atoi64</name><argument_list>(<argument><expr><name><name>val</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"resourcetype"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>val</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr>"collection"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>entry</name>-&gt;<name>kind</name></name> = <name>svn_node_dir</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>entry</name>-&gt;<name>kind</name></name> = <name>svn_node_file</name></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if></else></if></else></if></else></if></else></if>
}</block></then></if></else></if></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<struct>struct <name>path_dirent_visitor_t</name> <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>full_paths</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>base_paths</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>orig_path</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>path_dirent_walker</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>apr_ssize_t</name></type> <name>path_len</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ns</name></decl></param>, <param><decl><type><name>apr_ssize_t</name></type> <name>ns_len</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>apr_ssize_t</name></type> <name>name_len</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>val</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>path_dirent_visitor_t</name> *</type><name>dirents</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_dirent_t</name> *</type><name>entry</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>dirents</name>-&gt;<name>orig_path</name></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>entry</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>dirents</name>-&gt;<name>full_paths</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>path_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>entry</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_name</name></decl>;</decl_stmt>
<expr_stmt><expr><name>entry</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>dirents</name>-&gt;<name>full_paths</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>path_len</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>base_name</name> = <call><name>svn_path_uri_decode</name><argument_list>(<argument><expr><call><name>svn_path_basename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>dirents</name>-&gt;<name>base_paths</name></name></expr></argument>, <argument><expr><name>base_name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><call><name>dirent_walker</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>ns</name></expr></argument>, <argument><expr><name>ns_len</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>svn_ra_serf__stat</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rel_path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
<param><decl><type><name>svn_dirent_t</name> **</type><name>dirent</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name> <init>= <expr><name><name>ra_session</name>-&gt;<name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__propfind_context_t</name> *</type><name>prop_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>fetched_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_dirent_t</name> *</type><name>entry</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>fetch_path_props</name><argument_list>(<argument><expr>&amp;<name>prop_ctx</name></expr></argument>, <argument><expr>&amp;<name>props</name></expr></argument>, <argument><expr>&amp;<name>path</name></expr></argument>, <argument><expr>&amp;<name>fetched_rev</name></expr></argument>,
<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rel_path</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>all_props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>entry</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_ra_serf__walk_all_props</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>fetched_rev</name></expr></argument>, <argument><expr><name>dirent_walker</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>dirent</name> = <name>entry</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>svn_ra_serf__get_dir</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> **</type><name>dirents</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name> *</type><name>fetched_rev</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> **</type><name>ret_props</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rel_path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
<param><decl><type><name>apr_uint32_t</name></type> <name>dirent_fields</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name> <init>= <expr><name><name>ra_session</name>-&gt;<name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<expr_stmt><expr><name>path</name> = <name><name>session</name>-&gt;<name>repos_url</name>.<name>path</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rel_path</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>path</name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>rel_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>props</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>revision</name></expr></argument>)</argument_list></call> || <name>fetched_rev</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>vcc_url</name></decl>, *<decl><type ref="prev"/><name>relative_url</name></decl>, *<decl><type ref="prev"/><name>basecoll_url</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_serf__discover_root</name><argument_list>(<argument><expr>&amp;<name>vcc_url</name></expr></argument>, <argument><expr>&amp;<name>relative_url</name></expr></argument>,
<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name></expr></argument>,
<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>revision</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_serf__get_latest_revnum</name><argument_list>(<argument><expr><name>ra_session</name></expr></argument>, <argument><expr>&amp;<name>revision</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_serf__retrieve_props</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name></expr></argument>,
<argument><expr><name>vcc_url</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>,
<argument><expr>"0"</expr></argument>, <argument><expr><name>baseline_props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>basecoll_url</name> = <call><name>svn_ra_serf__get_ver_prop</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>vcc_url</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>,
<argument><expr>"DAV:"</expr></argument>, <argument><expr>"baseline-collection"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>basecoll_url</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_OPTIONS_REQ_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"The OPTIONS response did not include the "
"requested baseline-collection value"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>fetched_rev</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>fetched_rev</name> = <name>revision</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>path</name> = <call><name>svn_path_url_add_component</name><argument_list>(<argument><expr><name>basecoll_url</name></expr></argument>, <argument><expr><name>relative_url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>revision</name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>dirents</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_ra_serf__propfind_context_t</name> *</type><name>prop_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>path_dirent_visitor_t</name></type> <name>dirent_walk</name></decl>;</decl_stmt>
<expr_stmt><expr><name>prop_ctx</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_ra_serf__deliver_props</name><argument_list>(<argument><expr>&amp;<name>prop_ctx</name></expr></argument>, <argument><expr><name>props</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name></expr></argument>,
<argument><expr><name>path</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr>"1"</expr></argument>, <argument><expr><name>all_props</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>prop_ctx</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_serf__wait_for_props</name><argument_list>(<argument><expr><name>prop_ctx</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>dirent_walk</name>.<name>full_paths</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dirent_walk</name>.<name>base_paths</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dirent_walk</name>.<name>orig_path</name></name> = <call><name>svn_path_canonicalize</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_ra_serf__walk_all_paths</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>path_dirent_walker</name></expr></argument>,
<argument><expr>&amp;<name>dirent_walk</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>dirents</name> = <name><name>dirent_walk</name>.<name>base_paths</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>ret_props</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>props</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>ret_props</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_serf__retrieve_props</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name></expr></argument>,
<argument><expr><name>path</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr>"0"</expr></argument>, <argument><expr><name>all_props</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_ra_serf__walk_all_props</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>,
<argument><expr><name>svn_ra_serf__set_flat_props</name></expr></argument>,
<argument><expr>*<name>ret_props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>svn_ra_serf__get_repos_root</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>url</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name> <init>= <expr><name><name>ra_session</name>-&gt;<name>priv</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>session</name>-&gt;<name>repos_root_str</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>vcc_url</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_serf__discover_root</name><argument_list>(<argument><expr>&amp;<name>vcc_url</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name></expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>repos_url</name>.<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>*<name>url</name> = <name><name>session</name>-&gt;<name>repos_root_str</name></name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>svn_ra_serf__get_uuid</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>uuid</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name> <init>= <expr><name><name>ra_session</name>-&gt;<name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl>;</decl_stmt>
<expr_stmt><expr><name>props</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_serf__retrieve_props</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name></expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>repos_url_str</name></name></expr></argument>,
<argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>, <argument><expr>"0"</expr></argument>, <argument><expr><name>uuid_props</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>uuid</name> = <call><name>svn_ra_serf__get_prop</name><argument_list>(<argument><expr><name>props</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>repos_url_str</name></name></expr></argument>,
<argument><expr><name>SVN_DAV_PROP_NS_DAV</name></expr></argument>, <argument><expr>"repository-uuid"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!*<name>uuid</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>APR_EGENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"The UUID property was not found on the "
"resource or any of its parents"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_ra__vtable_t</name></type> <name>serf_vtable</name> <init>= <expr><block>{
<expr><name>ra_serf_version</name></expr>,
<expr><name>ra_serf_get_description</name></expr>,
<expr><name>ra_serf_get_schemes</name></expr>,
<expr><name>svn_ra_serf__open</name></expr>,
<expr><name>svn_ra_serf__reparent</name></expr>,
<expr><name>svn_ra_serf__get_session_url</name></expr>,
<expr><name>svn_ra_serf__get_latest_revnum</name></expr>,
<expr><name>svn_ra_serf__get_dated_revision</name></expr>,
<expr><name>svn_ra_serf__change_rev_prop</name></expr>,
<expr><name>svn_ra_serf__rev_proplist</name></expr>,
<expr><name>svn_ra_serf__rev_prop</name></expr>,
<expr><name>svn_ra_serf__get_commit_editor</name></expr>,
<expr><name>svn_ra_serf__get_file</name></expr>,
<expr><name>svn_ra_serf__get_dir</name></expr>,
<expr><name>svn_ra_serf__get_mergeinfo</name></expr>,
<expr><name>svn_ra_serf__do_update</name></expr>,
<expr><name>svn_ra_serf__do_switch</name></expr>,
<expr><name>svn_ra_serf__do_status</name></expr>,
<expr><name>svn_ra_serf__do_diff</name></expr>,
<expr><name>svn_ra_serf__get_log</name></expr>,
<expr><name>svn_ra_serf__check_path</name></expr>,
<expr><name>svn_ra_serf__stat</name></expr>,
<expr><name>svn_ra_serf__get_uuid</name></expr>,
<expr><name>svn_ra_serf__get_repos_root</name></expr>,
<expr><name>svn_ra_serf__get_locations</name></expr>,
<expr><name>svn_ra_serf__get_location_segments</name></expr>,
<expr><name>svn_ra_serf__get_file_revs</name></expr>,
<expr><name>svn_ra_serf__lock</name></expr>,
<expr><name>svn_ra_serf__unlock</name></expr>,
<expr><name>svn_ra_serf__get_lock</name></expr>,
<expr><name>svn_ra_serf__get_locks</name></expr>,
<expr><name>svn_ra_serf__replay</name></expr>,
<expr><name>svn_ra_serf__has_capability</name></expr>,
<expr><name>svn_ra_serf__replay_range</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__init</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_version_t</name> *</type><name>loader_version</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_ra__vtable_t</name> **</type><name>vtable</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_version_checklist_t</name></type> <name><name>checklist</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"svn_subr"</expr>, <expr><name>svn_subr_version</name></expr> }</block></expr>,
<expr><block>{ <expr>"svn_delta"</expr>, <expr><name>svn_delta_version</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ver_check_list</name><argument_list>(<argument><expr><call><name>ra_serf_version</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>checklist</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>loader_version</name>-&gt;<name>major</name></name> != <name>SVN_VER_MAJOR</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_VERSION_MISMATCH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Unsupported RA loader version (%d) for ra_serf"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>loader_version</name>-&gt;<name>major</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>vtable</name> = &amp;<name>serf_vtable</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAME</name></cpp:macro> <cpp:value>"ra_serf"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DESCRIPTION</name></cpp:macro> <cpp:value>RA_SERF_DESCRIPTION</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VTBL</name></cpp:macro> <cpp:value>serf_vtable</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INITFUNC</name></cpp:macro> <cpp:value>svn_ra_serf__init</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPAT_INITFUNC</name></cpp:macro> <cpp:value>svn_ra_serf_init</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libsvn_ra/wrapper_template.h"</cpp:file></cpp:include>
</unit>
