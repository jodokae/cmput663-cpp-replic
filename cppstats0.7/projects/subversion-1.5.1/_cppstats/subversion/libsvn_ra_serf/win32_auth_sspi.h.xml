<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/libsvn_ra_serf/win32_auth_sspi.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SVN_LIBSVN_RA_SERF_WIN32_AUTH_SSPI_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_LIBSVN_RA_SERF_WIN32_AUTH_SSPI_H</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SVN_RA_SERF_SSPI_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>__SSPI_H__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECURITY_WIN32</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sspi.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ra_serf.h"</cpp:file></cpp:include>
<typedef>typedef <type><enum>enum <block>{
<decl><name>sspi_auth_not_started</name></decl>,
<decl><name>sspi_auth_in_progress</name></decl>,
<decl><name>sspi_auth_completed</name></decl>,
}</block></enum></type> <name>sspi_auth_state</name>;</typedef>
<struct>struct <name>serf_sspi_context_t</name> <block>{
<decl_stmt><decl><type><name>CtxtHandle</name></type> <name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sspi_auth_state</name></type> <name>state</name></decl>;</decl_stmt>
}</block>;</struct>
<function_decl><type><name>svn_error_t</name> *</type>
<name>handle_sspi_auth</name><parameter_list>(<param><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name></decl></param>,
<param><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>conn</name></decl></param>,
<param><decl><type><name>serf_request_t</name> *</type><name>request</name></decl></param>,
<param><decl><type><name>serf_bucket_t</name> *</type><name>response</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>auth_hdr</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>auth_attr</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type>
<name>init_sspi_connection</name><parameter_list>(<param><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name></decl></param>,
<param><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>conn</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type>
<name>setup_request_sspi_auth</name><parameter_list>(<param><decl><type><name>svn_ra_serf__connection_t</name> *</type><name>conn</name></decl></param>,
<param><decl><type><name>serf_bucket_t</name> *</type><name>hdrs_bkt</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type>
<name>sspi_get_credentials</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>token</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>token_len</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>buf</name></decl></param>,
<param><decl><type><name>apr_size_t</name> *</type><name>buf_len</name></decl></param>, <param><decl><type><name>serf_sspi_context_t</name> *</type><name>sspi_ctx</name></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
