<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/libsvn_ra_serf/replay.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_uri.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;expat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;serf.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_ra.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_dav.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_xml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libsvn_ra/ra_loader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_delta.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_base64.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ra_serf.h"</cpp:file></cpp:include>
<typedef>typedef <type><enum>enum <block>{
<decl><name>NONE</name> <init>= <expr>0</expr></init></decl>,
<decl><name>REPORT</name></decl>,
<decl><name>OPEN_DIR</name></decl>,
<decl><name>ADD_DIR</name></decl>,
<decl><name>OPEN_FILE</name></decl>,
<decl><name>ADD_FILE</name></decl>,
<decl><name>DELETE_ENTRY</name></decl>,
<decl><name>APPLY_TEXTDELTA</name></decl>,
<decl><name>CHANGE_PROP</name></decl>,
}</block></enum></type> <name>replay_state_e</name>;</typedef>
<typedef>typedef <type>struct <name>replay_info_t</name></type> <name>replay_info_t</name>;</typedef>
<struct>struct <name>replay_info_t</name> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>replay_info_t</name> *</type><name>parent</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <function_decl><type><name>svn_error_t</name> *</type>
(*<name>change_prop_t</name>)<parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>change_prop_t</name></type> <name>change</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>del_prop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>replay_info_t</name> *</type><name>parent</name></decl>;</decl_stmt>
}</block></struct></type> <name>prop_info_t</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>done</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__list_t</name> **</type><name>done_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__list_t</name></type> <name>done_item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_replay_revstart_callback_t</name></type> <name>revstart_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_replay_revfinish_callback_t</name></type> <name>revfinish_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>replay_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>editor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>editor_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>low_water_mark</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>send_deltas</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>vcc_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>revs_props</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser_ctx</name></decl>;</decl_stmt>
}</block></struct></type> <name>replay_context_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>void</name> *</type>
<name>push_state</name><parameter_list>(<param><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser</name></decl></param>,
<param><decl><type><name>replay_context_t</name> *</type><name>replay_ctx</name></decl></param>,
<param><decl><type><name>replay_state_e</name></type> <name>state</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>svn_ra_serf__xml_push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>state</name> == <name>OPEN_DIR</name> || <name>state</name> == <name>ADD_DIR</name> ||
<name>state</name> == <name>OPEN_FILE</name> || <name>state</name> == <name>ADD_FILE</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>replay_info_t</name> *</type><name>info</name></decl>;</decl_stmt>
<expr_stmt><expr><name>info</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>pool</name></name> = <name><name>parser</name>-&gt;<name>state</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>parent</name></name> = <name><name>parser</name>-&gt;<name>state</name>-&gt;<name>private</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>baton</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>stream</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>private</name></name> = <name>info</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>state</name> == <name>CHANGE_PROP</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>prop_info_t</name> *</type><name>info</name></decl>;</decl_stmt>
<expr_stmt><expr><name>info</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>pool</name></name> = <name><name>parser</name>-&gt;<name>state</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>parent</name></name> = <name><name>parser</name>-&gt;<name>state</name>-&gt;<name>private</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>private</name></name> = <name>info</name></expr>;</expr_stmt>
}</block></then></if></else></if>
<return>return <expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>private</name></name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>start_replay</name><parameter_list>(<param><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>userData</name></decl></param>,
<param><decl><type><name>svn_ra_serf__dav_props_t</name></type> <name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>attrs</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>replay_context_t</name> *</type><name>ctx</name> <init>= <expr><name>userData</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>replay_state_e</name></type> <name>state</name></decl>;</decl_stmt>
<expr_stmt><expr><name>state</name> = <name><name>parser</name>-&gt;<name>state</name>-&gt;<name>current_state</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>state</name> == <name>NONE</name> &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"editor-report"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>REPORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>props</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_ra_serf__walk_all_props</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>revs_props</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>vcc_url</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>revision</name></name></expr></argument>,
<argument><expr><name>svn_ra_serf__set_bare_props</name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>props</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>ctx</name>-&gt;<name>revstart_func</name></name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>revision</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>replay_baton</name></name></expr></argument>,
<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>editor</name></name></expr></argument>, <argument><expr>&amp;<name><name>ctx</name>-&gt;<name>editor_baton</name></name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>props</name></name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>state</name> == <name>REPORT</name> &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"target-revision"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rev</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rev</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"rev"</expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>rev</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Missing revision attr in target-revision element"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>ctx</name>-&gt;<name>editor</name>-&gt;<name>set_target_revision</name></name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>editor_baton</name></name></expr></argument>,
<argument><expr><call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>state</name> == <name>REPORT</name> &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"open-root"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>replay_info_t</name> *</type><name>info</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rev</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"rev"</expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>rev</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Missing revision attr in open-root element"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>info</name> = <call><name>push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>OPEN_DIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>ctx</name>-&gt;<name>editor</name>-&gt;<name>open_root</name></name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>editor_baton</name></name></expr></argument>,
<argument><expr><call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>&amp;<name><name>info</name>-&gt;<name>baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>(<name>state</name> == <name>OPEN_DIR</name> || <name>state</name> == <name>ADD_DIR</name>) &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"delete-entry"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file_name</name></decl>, *<decl><type ref="prev"/><name>rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>replay_info_t</name> *</type><name>info</name></decl>;</decl_stmt>
<expr_stmt><expr><name>file_name</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"name"</expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>file_name</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Missing name attr in delete-entry element"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rev</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"rev"</expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>rev</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Missing revision attr in delete-entry element"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>info</name> = <call><name>push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>DELETE_ENTRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>ctx</name>-&gt;<name>editor</name>-&gt;<name>delete_entry</name></name><argument_list>(<argument><expr><name>file_name</name></expr></argument>, <argument><expr><call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>info</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_ra_serf__xml_pop_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>(<name>state</name> == <name>OPEN_DIR</name> || <name>state</name> == <name>ADD_DIR</name>) &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"open-directory"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rev</name></decl>, *<decl><type ref="prev"/><name>dir_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>replay_info_t</name> *</type><name>info</name></decl>;</decl_stmt>
<expr_stmt><expr><name>dir_name</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"name"</expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>dir_name</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Missing name attr in open-directory element"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rev</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"rev"</expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>rev</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Missing revision attr in open-directory element"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>info</name> = <call><name>push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>OPEN_DIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>ctx</name>-&gt;<name>editor</name>-&gt;<name>open_directory</name></name><argument_list>(<argument><expr><name>dir_name</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>parent</name>-&gt;<name>baton</name></name></expr></argument>,
<argument><expr><call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name><name>info</name>-&gt;<name>baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>(<name>state</name> == <name>OPEN_DIR</name> || <name>state</name> == <name>ADD_DIR</name>) &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"add-directory"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dir_name</name></decl>, *<decl><type ref="prev"/><name>copyfrom</name></decl>, *<decl><type ref="prev"/><name>copyrev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>replay_info_t</name> *</type><name>info</name></decl>;</decl_stmt>
<expr_stmt><expr><name>dir_name</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"name"</expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>dir_name</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Missing name attr in add-directory element"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>copyfrom</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"copyfrom-path"</expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>copyrev</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"copyfrom-rev"</expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>copyrev</name></expr>)</condition><then>
<expr_stmt><expr><name>rev</name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name>copyrev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>rev</name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>info</name> = <call><name>push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ADD_DIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>ctx</name>-&gt;<name>editor</name>-&gt;<name>add_directory</name></name><argument_list>(<argument><expr><name>dir_name</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>parent</name>-&gt;<name>baton</name></name></expr></argument>,
<argument><expr><name>copyfrom</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>,
<argument><expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name><name>info</name>-&gt;<name>baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>(<name>state</name> == <name>OPEN_DIR</name> || <name>state</name> == <name>ADD_DIR</name>) &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"close-directory"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>replay_info_t</name> *</type><name>info</name> <init>= <expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>private</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>ctx</name>-&gt;<name>editor</name>-&gt;<name>close_directory</name></name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_ra_serf__xml_pop_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>(<name>state</name> == <name>OPEN_DIR</name> || <name>state</name> == <name>ADD_DIR</name>) &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"open-file"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file_name</name></decl>, *<decl><type ref="prev"/><name>rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>replay_info_t</name> *</type><name>info</name></decl>;</decl_stmt>
<expr_stmt><expr><name>file_name</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"name"</expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>file_name</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Missing name attr in open-file element"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rev</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"rev"</expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>rev</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Missing revision attr in open-file element"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>info</name> = <call><name>push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>OPEN_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>ctx</name>-&gt;<name>editor</name>-&gt;<name>open_file</name></name><argument_list>(<argument><expr><name>file_name</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>parent</name>-&gt;<name>baton</name></name></expr></argument>,
<argument><expr><call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name><name>info</name>-&gt;<name>baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>(<name>state</name> == <name>OPEN_DIR</name> || <name>state</name> == <name>ADD_DIR</name>) &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"add-file"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file_name</name></decl>, *<decl><type ref="prev"/><name>copyfrom</name></decl>, *<decl><type ref="prev"/><name>copyrev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>replay_info_t</name> *</type><name>info</name></decl>;</decl_stmt>
<expr_stmt><expr><name>file_name</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"name"</expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>file_name</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Missing name attr in add-file element"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>copyfrom</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"copyfrom-path"</expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>copyrev</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"copyfrom-rev"</expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>info</name> = <call><name>push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ADD_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>copyrev</name></expr>)</condition><then>
<expr_stmt><expr><name>rev</name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name>copyrev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>rev</name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>ctx</name>-&gt;<name>editor</name>-&gt;<name>add_file</name></name><argument_list>(<argument><expr><name>file_name</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>parent</name>-&gt;<name>baton</name></name></expr></argument>,
<argument><expr><name>copyfrom</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>,
<argument><expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name><name>info</name>-&gt;<name>baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>(<name>state</name> == <name>OPEN_FILE</name> || <name>state</name> == <name>ADD_FILE</name>) &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"apply-textdelta"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>checksum</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>replay_info_t</name> *</type><name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_txdelta_window_handler_t</name></type> <name>textdelta</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>textdelta_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>delta_stream</name></decl>;</decl_stmt>
<expr_stmt><expr><name>info</name> = <call><name>push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>APPLY_TEXTDELTA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>checksum</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"checksum"</expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>checksum</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>checksum</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>checksum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>ctx</name>-&gt;<name>editor</name>-&gt;<name>apply_textdelta</name></name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name>checksum</name></expr></argument>,
<argument><expr><name><name>info</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>&amp;<name>textdelta</name></expr></argument>,
<argument><expr>&amp;<name>textdelta_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>delta_stream</name> = <call><name>svn_txdelta_parse_svndiff</name><argument_list>(<argument><expr><name>textdelta</name></expr></argument>, <argument><expr><name>textdelta_baton</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>stream</name></name> = <call><name>svn_base64_decode</name><argument_list>(<argument><expr><name>delta_stream</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>(<name>state</name> == <name>OPEN_FILE</name> || <name>state</name> == <name>ADD_FILE</name>) &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"close-file"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>replay_info_t</name> *</type><name>info</name> <init>= <expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>private</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>checksum</name></decl>;</decl_stmt>
<expr_stmt><expr><name>checksum</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"checksum"</expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>ctx</name>-&gt;<name>editor</name>-&gt;<name>close_file</name></name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name>checksum</name></expr></argument>,
<argument><expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_ra_serf__xml_pop_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>((<name>state</name> == <name>OPEN_FILE</name> || <name>state</name> == <name>ADD_FILE</name>) &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"change-file-prop"</expr></argument>)</argument_list></call> == 0) ||
((<name>state</name> == <name>OPEN_DIR</name> || <name>state</name> == <name>ADD_DIR</name>) &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"change-dir-prop"</expr></argument>)</argument_list></call> == 0)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prop_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>prop_info_t</name> *</type><name>info</name></decl>;</decl_stmt>
<expr_stmt><expr><name>prop_name</name> = <call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"name"</expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>prop_name</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_MALFORMED_DATA</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Missing name attr in %s element"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>info</name> = <call><name>push_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>CHANGE_PROP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>prop_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>svn_xml_get_attr_value</name><argument_list>(<argument><expr>"del"</expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>info</name>-&gt;<name>del_prop</name></name> = <name>TRUE</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>info</name>-&gt;<name>del_prop</name></name> = <name>FALSE</name></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>state</name> == <name>OPEN_FILE</name> || <name>state</name> == <name>ADD_FILE</name></expr>)</condition><then>
<expr_stmt><expr><name><name>info</name>-&gt;<name>change</name></name> = <name><name>ctx</name>-&gt;<name>editor</name>-&gt;<name>change_file_prop</name></name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>info</name>-&gt;<name>change</name></name> = <name><name>ctx</name>-&gt;<name>editor</name>-&gt;<name>change_dir_prop</name></name></expr>;</expr_stmt></else></if>
}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>end_replay</name><parameter_list>(<param><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>userData</name></decl></param>,
<param><decl><type><name>svn_ra_serf__dav_props_t</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>replay_context_t</name> *</type><name>ctx</name> <init>= <expr><name>userData</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>replay_state_e</name></type> <name>state</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>UNUSED_CTX</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>state</name> = <name><name>parser</name>-&gt;<name>state</name>-&gt;<name>current_state</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>state</name> == <name>REPORT</name> &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"editor-report"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_ra_serf__xml_pop_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>ctx</name>-&gt;<name>revfinish_func</name></name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>revision</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>replay_baton</name></name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>editor</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>editor_baton</name></name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>props</name></name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>state</name> == <name>OPEN_DIR</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"open-directory"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
}</block></then> <else>else <if>if <condition>(<expr><name>state</name> == <name>ADD_DIR</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"add-directory"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
}</block></then> <else>else <if>if <condition>(<expr><name>state</name> == <name>OPEN_FILE</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"open-file"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
}</block></then> <else>else <if>if <condition>(<expr><name>state</name> == <name>ADD_FILE</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"add-file"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
}</block></then> <else>else <if>if <condition>(<expr>(<name>state</name> == <name>OPEN_FILE</name> || <name>state</name> == <name>ADD_FILE</name>) &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"close-file"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
}</block></then> <else>else <if>if <condition>(<expr>(<name>state</name> == <name>APPLY_TEXTDELTA</name>) &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"apply-textdelta"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>replay_info_t</name> *</type><name>info</name> <init>= <expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>private</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_close</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>stream</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_ra_serf__xml_pop_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>state</name> == <name>CHANGE_PROP</name> &amp;&amp;
(<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"change-file-prop"</expr></argument>)</argument_list></call> == 0 ||
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>name</name>.<name>name</name></name></expr></argument>, <argument><expr>"change-dir-prop"</expr></argument>)</argument_list></call> == 0)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>prop_info_t</name> *</type><name>info</name> <init>= <expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>private</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>prop_val</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>info</name>-&gt;<name>del_prop</name></name> == <name>TRUE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>prop_val</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>svn_string_t</name></type> <name>tmp_prop</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>tmp_prop</name>.<name>data</name></name> = <name><name>info</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp_prop</name>.<name>len</name></name> = <name><name>info</name>-&gt;<name>len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>prop_val</name> = <call><name>svn_base64_decode_string</name><argument_list>(<argument><expr>&amp;<name>tmp_prop</name></expr></argument>, <argument><expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>info</name>-&gt;<name>change</name></name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>parent</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>prop_val</name></expr></argument>,
<argument><expr><name><name>info</name>-&gt;<name>parent</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_ra_serf__xml_pop_state</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>cdata_replay</name><parameter_list>(<param><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>userData</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>replay_context_t</name> *</type><name>replay_ctx</name> <init>= <expr><name>userData</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>replay_state_e</name></type> <name>state</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>UNUSED_CTX</name><argument_list>(<argument><expr><name>replay_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>state</name> = <name><name>parser</name>-&gt;<name>state</name>-&gt;<name>current_state</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>state</name> == <name>APPLY_TEXTDELTA</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>replay_info_t</name> *</type><name>info</name> <init>= <expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>private</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>written</name></decl>;</decl_stmt>
<expr_stmt><expr><name>written</name> = <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_write</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>stream</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr>&amp;<name>written</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>written</name> != <name>len</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_STREAM_UNEXPECTED_EOF</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Error writing stream: unexpected EOF"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name>state</name> == <name>CHANGE_PROP</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>prop_info_t</name> *</type><name>info</name> <init>= <expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>private</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_ra_serf__expand_string</name><argument_list>(<argument><expr>&amp;<name><name>info</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr>&amp;<name><name>info</name>-&gt;<name>len</name></name></expr></argument>,
<argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>parser</name>-&gt;<name>state</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>serf_bucket_t</name> *</type>
<name>create_replay_body</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>serf_bucket_alloc_t</name> *</type><name>alloc</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>replay_context_t</name> *</type><name>ctx</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>serf_bucket_t</name> *</type><name>body_bkt</name></decl>, *<decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>body_bkt</name> = <call><name>serf_bucket_aggregate_create</name><argument_list>(<argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr>"&lt;S:replay-report xmlns:S=\""</expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>"&lt;S:replay-report xmlns:S=\""</expr></argument>)</argument_list></sizeof>-1</expr></argument>,
<argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name>body_bkt</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr><name>SVN_XML_NAMESPACE</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVN_XML_NAMESPACE</name></expr></argument>)</argument_list></sizeof>-1</expr></argument>,
<argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name>body_bkt</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr>"\"&gt;"</expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>"\"&gt;"</expr></argument>)</argument_list></sizeof>-1</expr></argument>,
<argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name>body_bkt</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_ra_serf__add_tag_buckets</name><argument_list>(<argument><expr><name>body_bkt</name></expr></argument>,
<argument><expr>"S:revision"</expr></argument>, <argument><expr><call><name>apr_ltoa</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>revision</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_ra_serf__add_tag_buckets</name><argument_list>(<argument><expr><name>body_bkt</name></expr></argument>,
<argument><expr>"S:low-water-mark"</expr></argument>,
<argument><expr><call><name>apr_ltoa</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>low_water_mark</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_ra_serf__add_tag_buckets</name><argument_list>(<argument><expr><name>body_bkt</name></expr></argument>,
<argument><expr>"S:send-deltas"</expr></argument>,
<argument><expr><call><name>apr_ltoa</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>send_deltas</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> = <call><name>SERF_BUCKET_SIMPLE_STRING_LEN</name><argument_list>(<argument><expr>"&lt;/S:replay-report&gt;"</expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>"&lt;/S:replay-report&gt;"</expr></argument>)</argument_list></sizeof>-1</expr></argument>,
<argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>serf_bucket_aggregate_append</name><argument_list>(<argument><expr><name>body_bkt</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>body_bkt</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__replay</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>low_water_mark</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>send_deltas</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>editor</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>replay_context_t</name> *</type><name>replay_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name> <init>= <expr><name><name>ra_session</name>-&gt;<name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__handler_t</name> *</type><name>handler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser_ctx</name></decl>;</decl_stmt>
<expr_stmt><expr><name>replay_ctx</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>replay_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>replay_ctx</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>replay_ctx</name>-&gt;<name>editor</name></name> = <name>editor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>replay_ctx</name>-&gt;<name>editor_baton</name></name> = <name>edit_baton</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>replay_ctx</name>-&gt;<name>done</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>replay_ctx</name>-&gt;<name>low_water_mark</name></name> = <name>low_water_mark</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>replay_ctx</name>-&gt;<name>send_deltas</name></name> = <name>send_deltas</name></expr>;</expr_stmt>
<expr_stmt><expr><name>handler</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>handler</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handler</name>-&gt;<name>method</name></name> = "REPORT"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>handler</name>-&gt;<name>path</name></name> = <name><name>session</name>-&gt;<name>repos_url_str</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handler</name>-&gt;<name>body_delegate</name></name> = <name>create_replay_body</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handler</name>-&gt;<name>body_delegate_baton</name></name> = <name>replay_ctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handler</name>-&gt;<name>body_type</name></name> = "text/xml"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>handler</name>-&gt;<name>conn</name></name> = <name><name>session</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handler</name>-&gt;<name>session</name></name> = <name>session</name></expr>;</expr_stmt>
<expr_stmt><expr><name>parser_ctx</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>parser_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>user_data</name></name> = <name>replay_ctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>start</name></name> = <name>start_replay</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>end</name></name> = <name>end_replay</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>cdata</name></name> = <name>cdata_replay</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>done</name></name> = &amp;<name><name>replay_ctx</name>-&gt;<name>done</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handler</name>-&gt;<name>response_handler</name></name> = <name>svn_ra_serf__handle_xml_parser</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handler</name>-&gt;<name>response_baton</name></name> = <name>parser_ctx</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_ra_serf__request_create</name><argument_list>(<argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_OUTSTANDING_REQUESTS</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>
<function><type><name>svn_error_t</name> *</type>
<name>svn_ra_serf__replay_range</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>ra_session</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>start_revision</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>end_revision</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>low_water_mark</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>send_deltas</name></decl></param>,
<param><decl><type><name>svn_ra_replay_revstart_callback_t</name></type> <name>revstart_func</name></decl></param>,
<param><decl><type><name>svn_ra_replay_revfinish_callback_t</name></type> <name>revfinish_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>replay_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_serf__session_t</name> *</type><name>session</name> <init>= <expr><name><name>ra_session</name>-&gt;<name>priv</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name> <init>= <expr><name>start_revision</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>vcc_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>active_reports</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_serf__discover_root</name><argument_list>(<argument><expr>&amp;<name>vcc_url</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name></expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>repos_url</name>.<name>path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>active_reports</name> || <name>rev</name> &lt;= <name>end_revision</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__list_t</name> *</type><name>done_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__list_t</name> *</type><name>done_reports</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>replay_context_t</name> *</type><name>replay_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status_code</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>rev</name> &lt;= <name>end_revision</name> &amp;&amp; <name>active_reports</name> &lt; <name>MAX_OUTSTANDING_REQUESTS</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_ra_serf__propfind_context_t</name> *</type><name>prop_ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__handler_t</name> *</type><name>handler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>ctx_pool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>replay_ctx</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>ctx_pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>replay_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>replay_ctx</name>-&gt;<name>pool</name></name> = <name>ctx_pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>replay_ctx</name>-&gt;<name>revstart_func</name></name> = <name>revstart_func</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>replay_ctx</name>-&gt;<name>revfinish_func</name></name> = <name>revfinish_func</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>replay_ctx</name>-&gt;<name>replay_baton</name></name> = <name>replay_baton</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>replay_ctx</name>-&gt;<name>done</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>replay_ctx</name>-&gt;<name>revision</name></name> = <name>rev</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>replay_ctx</name>-&gt;<name>low_water_mark</name></name> = <name>low_water_mark</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>replay_ctx</name>-&gt;<name>send_deltas</name></name> = <name>send_deltas</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>replay_ctx</name>-&gt;<name>done_item</name>.<name>data</name></name> = <name>replay_ctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>replay_ctx</name>-&gt;<name>vcc_url</name></name> = <name>vcc_url</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>replay_ctx</name>-&gt;<name>revs_props</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name><name>replay_ctx</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_serf__deliver_props</name><argument_list>(<argument><expr>&amp;<name>prop_ctx</name></expr></argument>,
<argument><expr><name><name>replay_ctx</name>-&gt;<name>revs_props</name></name></expr></argument>, <argument><expr><name>session</name></expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>vcc_url</name></expr></argument>,
<argument><expr><name>rev</name></expr></argument>, <argument><expr>"0"</expr></argument>, <argument><expr><name>all_props</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>replay_ctx</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>handler</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>replay_ctx</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>handler</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handler</name>-&gt;<name>method</name></name> = "REPORT"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>handler</name>-&gt;<name>path</name></name> = <name><name>session</name>-&gt;<name>repos_url_str</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handler</name>-&gt;<name>body_delegate</name></name> = <name>create_replay_body</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handler</name>-&gt;<name>body_delegate_baton</name></name> = <name>replay_ctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handler</name>-&gt;<name>conn</name></name> = <name><name>session</name>-&gt;<name>conns</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handler</name>-&gt;<name>session</name></name> = <name>session</name></expr>;</expr_stmt>
<expr_stmt><expr><name>parser_ctx</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>replay_ctx</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>parser_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>pool</name></name> = <name><name>replay_ctx</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>user_data</name></name> = <name>replay_ctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>start</name></name> = <name>start_replay</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>end</name></name> = <name>end_replay</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>cdata</name></name> = <name>cdata_replay</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>status_code</name></name> = &amp;<name>status_code</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>done</name></name> = &amp;<name><name>replay_ctx</name>-&gt;<name>done</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>done_list</name></name> = &amp;<name>done_reports</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parser_ctx</name>-&gt;<name>done_item</name></name> = &amp;<name><name>replay_ctx</name>-&gt;<name>done_item</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handler</name>-&gt;<name>response_handler</name></name> = <name>svn_ra_serf__handle_xml_parser</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handler</name>-&gt;<name>response_baton</name></name> = <name>parser_ctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>replay_ctx</name>-&gt;<name>parser_ctx</name></name> = <name>parser_ctx</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_ra_serf__request_create</name><argument_list>(<argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rev</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>active_reports</name>++</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>status</name> = <call><name>serf_context_run</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>context</name></name></expr></argument>, <argument><expr><name>SERF_DURATION_FOREVER</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>done_list</name> = <name>done_reports</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>done_list</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>replay_context_t</name> *</type><name>ctx</name> <init>= <expr>(<name>replay_context_t</name> *)<name><name>done_list</name>-&gt;<name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_serf__xml_parser_t</name> *</type><name>parser_ctx</name> <init>= <expr><name><name>ctx</name>-&gt;<name>parser_ctx</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>parser_ctx</name>-&gt;<name>error</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>pending_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>session</name>-&gt;<name>pending_error</name></name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><name><name>parser_ctx</name>-&gt;<name>error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>done_list</name> = <name><name>done_list</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>active_reports</name>--</expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name>status</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>pending_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_error_wrap_apr</name><argument_list>(<argument><expr><name>status</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Error retrieving replay REPORT (%d)"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>done_reports</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MAX_OUTSTANDING_REQUESTS</name></cpp:undef>
</unit>
