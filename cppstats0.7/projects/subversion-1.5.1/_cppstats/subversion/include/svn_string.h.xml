<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/include/svn_string.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SVN_STRING_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_STRING_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_tables.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><struct>struct <name>svn_string_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
}</block></struct></type> <name>svn_string_t</name>;</typedef>
<typedef>typedef <type><struct>struct <name>svn_stringbuf_t</name> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>blocksize</name></decl>;</decl_stmt>
}</block></struct></type> <name>svn_stringbuf_t</name>;</typedef>
<function_decl><type><name>svn_string_t</name> *</type><name>svn_string_create</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cstring</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_string_t</name> *</type><name>svn_string_ncreate</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>bytes</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>size</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_string_t</name> *</type><name>svn_string_create_from_buf</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_stringbuf_t</name> *</type><name>strbuf</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_string_t</name> *</type><name>svn_string_createf</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fmt</name></decl></param>,
<param><decl><type>...</type></decl></param>)</parameter_list>
__attribute__<parameter_list>(<param/></parameter_list>(format<parameter_list>(<param><decl><type><name>printf</name></type></decl></param>, <param/></parameter_list>2, 3</function_decl>)</block></extern>))<empty_stmt>;</empty_stmt>
<function_decl><type><name>svn_string_t</name> *</type><name>svn_string_createv</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fmt</name></decl></param>,
<param><decl><type><name>va_list</name></type> <name>ap</name></decl></param>)</parameter_list>
__attribute__<parameter_list>(<param/></parameter_list>(format<parameter_list>(<param><decl><type><name>printf</name></type></decl></param>, <param/></parameter_list>2, 0</function_decl>)))<empty_stmt>;</empty_stmt>
<function_decl><type><name>svn_boolean_t</name></type> <name>svn_string_isempty</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>str</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_string_t</name> *</type><name>svn_string_dup</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>original_string</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_boolean_t</name></type> <name>svn_string_compare</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>str1</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>str2</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_size_t</name></type> <name>svn_string_first_non_whitespace</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>str</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_size_t</name></type> <name>svn_string_find_char_backward</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>str</name></decl></param>, <param><decl><type><name>char</name></type> <name>ch</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_stringbuf_t</name> *</type><name>svn_stringbuf_create</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cstring</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_stringbuf_t</name> *</type><name>svn_stringbuf_ncreate</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>bytes</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>size</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_stringbuf_t</name> *</type><name>svn_stringbuf_create_from_string</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>str</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_stringbuf_t</name> *</type><name>svn_stringbuf_createf</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fmt</name></decl></param>,
<param><decl><type>...</type></decl></param>)</parameter_list>
__attribute__<parameter_list>(<param/></parameter_list>(format<parameter_list>(<param><decl><type><name>printf</name></type></decl></param>, <param/></parameter_list>2, 3</function_decl>)))<empty_stmt>;</empty_stmt>
<function_decl><type><name>svn_stringbuf_t</name> *</type><name>svn_stringbuf_createv</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fmt</name></decl></param>,
<param><decl><type><name>va_list</name></type> <name>ap</name></decl></param>)</parameter_list>
__attribute__<parameter_list>(<param/></parameter_list>(format<parameter_list>(<param><decl><type><name>printf</name></type></decl></param>, <param/></parameter_list>2, 0</function_decl>)))<empty_stmt>;</empty_stmt>
<function_decl><type><name>void</name></type> <name>svn_stringbuf_ensure</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> *</type><name>str</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>minimum_size</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>svn_stringbuf_set</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> *</type><name>str</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>svn_stringbuf_setempty</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> *</type><name>str</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_boolean_t</name></type> <name>svn_stringbuf_isempty</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_stringbuf_t</name> *</type><name>str</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>svn_stringbuf_chop</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> *</type><name>str</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>nbytes</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>svn_stringbuf_fillchar</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> *</type><name>str</name></decl></param>, <param><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>svn_stringbuf_appendbytes</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> *</type><name>targetstr</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>bytes</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>count</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>svn_stringbuf_appendstr</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> *</type><name>targetstr</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_stringbuf_t</name> *</type><name>appendstr</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>svn_stringbuf_appendcstr</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> *</type><name>targetstr</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cstr</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_stringbuf_t</name> *</type><name>svn_stringbuf_dup</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_stringbuf_t</name> *</type><name>original_string</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_boolean_t</name></type> <name>svn_stringbuf_compare</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_stringbuf_t</name> *</type><name>str1</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_stringbuf_t</name> *</type><name>str2</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_size_t</name></type> <name>svn_stringbuf_first_non_whitespace</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_stringbuf_t</name> *</type><name>str</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>svn_stringbuf_strip_whitespace</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> *</type><name>str</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_size_t</name></type> <name>svn_stringbuf_find_char_backward</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_stringbuf_t</name> *</type><name>str</name></decl></param>,
<param><decl><type><name>char</name></type> <name>ch</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_boolean_t</name></type> <name>svn_string_compare_stringbuf</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>str1</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_stringbuf_t</name> *</type><name>str2</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_array_header_t</name> *</type><name>svn_cstring_split</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>input</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>sep_chars</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>chop_whitespace</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>svn_cstring_split_append</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> *</type><name>array</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>input</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>sep_chars</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>chop_whitespace</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_boolean_t</name></type> <name>svn_cstring_match_glob_list</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>str</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>list</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>svn_cstring_count_newlines</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> *</type>
<name>svn_cstring_join</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> *</type><name>strings</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>separator</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>svn_cstring_casecmp</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>str1</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>str2</name></decl></param>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
