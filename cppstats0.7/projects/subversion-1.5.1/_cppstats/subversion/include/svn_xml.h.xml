<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/include/svn_xml.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SVN_XML_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_XML_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_hash.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_XML_NAMESPACE</name></cpp:macro> <cpp:value>"svn:"</cpp:value></cpp:define>
<enum>enum <name>svn_xml_open_tag_style</name> <block>{
<decl><name>svn_xml_normal</name> <init>= <expr>1</expr></init></decl>,
<decl><name>svn_xml_protect_pcdata</name></decl>,
<decl><name>svn_xml_self_closing</name></decl>
}</block>;</enum>
<function_decl><type><name>svn_boolean_t</name></type> <name>svn_xml_is_xml_safe</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>svn_xml_escape_cdata_stringbuf</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> **</type><name>outstr</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_stringbuf_t</name> *</type><name>string</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>svn_xml_escape_cdata_string</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> **</type><name>outstr</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>string</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>svn_xml_escape_cdata_cstring</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> **</type><name>outstr</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>string</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>svn_xml_escape_attr_stringbuf</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> **</type><name>outstr</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_stringbuf_t</name> *</type><name>string</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>svn_xml_escape_attr_string</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> **</type><name>outstr</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>string</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>svn_xml_escape_attr_cstring</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> **</type><name>outstr</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>string</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>svn_xml_fuzzy_escape</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>string</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<typedef>typedef <type>struct <name>svn_xml_parser_t</name></type> <name>svn_xml_parser_t</name>;</typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (*<name>svn_xml_start_elem</name>)<parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>atts</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (*<name>svn_xml_end_elem</name>)<parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (*<name>svn_xml_char_data</name>)<parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>)</parameter_list>;</function_decl></typedef>
<function_decl><type><name>svn_xml_parser_t</name> *</type><name>svn_xml_make_parser</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>svn_xml_start_elem</name></type> <name>start_handler</name></decl></param>,
<param><decl><type><name>svn_xml_end_elem</name></type> <name>end_handler</name></decl></param>,
<param><decl><type><name>svn_xml_char_data</name></type> <name>data_handler</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>svn_xml_free_parser</name><parameter_list>(<param><decl><type><name>svn_xml_parser_t</name> *</type><name>svn_parser</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_xml_parse</name><parameter_list>(<param><decl><type><name>svn_xml_parser_t</name> *</type><name>svn_parser</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>buf</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>is_final</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>svn_xml_signal_bailout</name><parameter_list>(<param><decl><type><name>svn_error_t</name> *</type><name>error</name></decl></param>,
<param><decl><type><name>svn_xml_parser_t</name> *</type><name>svn_parser</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>svn_xml_get_attr_value</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>atts</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_hash_t</name> *</type><name>svn_xml_ap_to_hash</name><parameter_list>(<param><decl><type><name>va_list</name></type> <name>ap</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_hash_t</name> *</type><name>svn_xml_make_att_hash</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>atts</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>svn_xml_hash_atts_preserving</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>atts</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>ht</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>svn_xml_hash_atts_overlaying</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>atts</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>ht</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>svn_xml_make_header</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> **</type><name>str</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name></type> <name>svn_xml_make_open_tag</name><argument_list>(<argument><expr><name>svn_stringbuf_t</name> **<name>str</name></expr></argument>,
<argument><expr><name>apr_pool_t</name> *<name>pool</name></expr></argument>,
<argument>enum <expr><name>svn_xml_open_tag_style</name> <name>style</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>tagname</name></expr></argument>,
<argument>...<expr/></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>svn_xml_make_open_tag_v</name><argument_list>(<argument><expr><name>svn_stringbuf_t</name> **<name>str</name></expr></argument>,
<argument><expr><name>apr_pool_t</name> *<name>pool</name></expr></argument>,
<argument>enum <expr><name>svn_xml_open_tag_style</name> <name>style</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>tagname</name></expr></argument>,
<argument><expr><name>va_list</name> <name>ap</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name></type> <name>svn_xml_make_open_tag_hash</name><argument_list>(<argument><expr><name>svn_stringbuf_t</name> **<name>str</name></expr></argument>,
<argument><expr><name>apr_pool_t</name> *<name>pool</name></expr></argument>,
<argument>enum <expr><name>svn_xml_open_tag_style</name> <name>style</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>tagname</name></expr></argument>,
<argument><expr><name>apr_hash_t</name> *<name>attributes</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>svn_xml_make_close_tag</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> **</type><name>str</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tagname</name></decl></param>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
