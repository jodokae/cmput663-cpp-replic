<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/include/private/svn_wc_private.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SVN_WC_PRIVATE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC_PRIVATE_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_wc.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc__entry_versioned_internal</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> **</type><name>entry</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>show_hidden</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>caller_filename</name></decl></param>,
<param><decl><type><name>int</name></type> <name>caller_lineno</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SVN_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_wc__entry_versioned</name><parameter_list>(<param><type><name>entry</name></type></param>, <param><type><name>path</name></type></param>, <param><type><name>adm_access</name></type></param>, <param><type><name>show_hidden</name></type></param>, <param><type><name>pool</name></type></param>)</parameter_list></cpp:macro> <cpp:value>svn_wc__entry_versioned_internal((entry), (path), (adm_access), (show_hidden), __FILE__, __LINE__, (pool))</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_wc__entry_versioned</name><parameter_list>(<param><type><name>entry</name></type></param>, <param><type><name>path</name></type></param>, <param><type><name>adm_access</name></type></param>, <param><type><name>show_hidden</name></type></param>, <param><type><name>pool</name></type></param>)</parameter_list></cpp:macro> <cpp:value>svn_wc__entry_versioned_internal((entry), (path), (adm_access), (show_hidden), NULL, 0, (pool))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_wc__props_modified</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> **</type><name>which_props</name></decl></param>,
<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_wc__path_switched</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>wcpath</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name> *</type><name>switched</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__LEVELS_TO_LOCK_FROM_DEPTH</name><parameter_list>(<param><type><name>depth</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((depth) == svn_depth_empty || (depth) == svn_depth_files) ? 0 : (((depth) == svn_depth_immediates) ? 1 : -1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_WC__CL_MATCH</name><parameter_list>(<param><type><name>clhash</name></type></param>, <param><type><name>entry</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((clhash == NULL) || (entry &amp;&amp; entry-&gt;changelist &amp;&amp; apr_hash_get(clhash, entry-&gt;changelist, APR_HASH_KEY_STRING))) ? TRUE : FALSE)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
