<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/include/svn_props.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SVN_PROPS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROPS_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_tables.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><struct>struct <name>svn_prop_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl>;</decl_stmt>
}</block></struct></type> <name>svn_prop_t</name>;</typedef>
<function_decl><type><name>svn_prop_t</name> *</type><name>svn_prop_dup</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_prop_t</name> *</type><name>prop</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_array_header_t</name> *</type>
<name>svn_prop_array_dup</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>array</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_array_header_t</name> *</type>
<name>svn_prop_hash_to_array</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>hash</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<typedef>typedef <type><enum>enum <name>svn_prop_kind</name> <block>{
<decl><name>svn_prop_entry_kind</name></decl>,
<decl><name>svn_prop_wc_kind</name></decl>,
<decl><name>svn_prop_regular_kind</name></decl>
}</block></enum></type> <name>svn_prop_kind_t</name>;</typedef>
<function_decl><type><name>svn_prop_kind_t</name></type> <name>svn_property_kind</name><parameter_list>(<param><decl><type><name>int</name> *</type><name>prefix_len</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prop_name</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_boolean_t</name></type> <name>svn_prop_is_svn_prop</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prop_name</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_boolean_t</name></type> <name>svn_prop_has_svn_prop</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>apr_hash_t</name> *</type><name>props</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_boolean_t</name></type> <name>svn_prop_is_boolean</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prop_name</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_boolean_t</name></type> <name>svn_prop_needs_translation</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prop_name</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_categorize_props</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>proplist</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> **</type><name>entry_props</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> **</type><name>wc_props</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> **</type><name>regular_props</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_prop_diffs</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>propdiffs</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>target_props</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>source_props</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_boolean_t</name></type> <name>svn_prop_name_is_valid</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prop_name</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_PREFIX</name></cpp:macro> <cpp:value>"svn:"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_BOOLEAN_TRUE</name></cpp:macro> <cpp:value>"*"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_MIME_TYPE</name></cpp:macro> <cpp:value>SVN_PROP_PREFIX "mime-type"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_IGNORE</name></cpp:macro> <cpp:value>SVN_PROP_PREFIX "ignore"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_EOL_STYLE</name></cpp:macro> <cpp:value>SVN_PROP_PREFIX "eol-style"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_KEYWORDS</name></cpp:macro> <cpp:value>SVN_PROP_PREFIX "keywords"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_EXECUTABLE</name></cpp:macro> <cpp:value>SVN_PROP_PREFIX "executable"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_EXECUTABLE_VALUE</name></cpp:macro> <cpp:value>SVN_PROP_BOOLEAN_TRUE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_NEEDS_LOCK</name></cpp:macro> <cpp:value>SVN_PROP_PREFIX "needs-lock"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_NEEDS_LOCK_VALUE</name></cpp:macro> <cpp:value>SVN_PROP_BOOLEAN_TRUE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_SPECIAL</name></cpp:macro> <cpp:value>SVN_PROP_PREFIX "special"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_SPECIAL_VALUE</name></cpp:macro> <cpp:value>SVN_PROP_BOOLEAN_TRUE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_EXTERNALS</name></cpp:macro> <cpp:value>SVN_PROP_PREFIX "externals"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_MERGEINFO</name></cpp:macro> <cpp:value>SVN_PROP_PREFIX "mergeinfo"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_WC_PREFIX</name></cpp:macro> <cpp:value>SVN_PROP_PREFIX "wc:"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_ENTRY_PREFIX</name></cpp:macro> <cpp:value>SVN_PROP_PREFIX "entry:"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_ENTRY_COMMITTED_REV</name></cpp:macro> <cpp:value>SVN_PROP_ENTRY_PREFIX "committed-rev"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_ENTRY_COMMITTED_DATE</name></cpp:macro> <cpp:value>SVN_PROP_ENTRY_PREFIX "committed-date"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_ENTRY_LAST_AUTHOR</name></cpp:macro> <cpp:value>SVN_PROP_ENTRY_PREFIX "last-author"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_ENTRY_UUID</name></cpp:macro> <cpp:value>SVN_PROP_ENTRY_PREFIX "uuid"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_ENTRY_LOCK_TOKEN</name></cpp:macro> <cpp:value>SVN_PROP_ENTRY_PREFIX "lock-token"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_CUSTOM_PREFIX</name></cpp:macro> <cpp:value>SVN_PROP_PREFIX "custom:"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_REVISION_AUTHOR</name></cpp:macro> <cpp:value>SVN_PROP_PREFIX "author"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_REVISION_LOG</name></cpp:macro> <cpp:value>SVN_PROP_PREFIX "log"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_REVISION_DATE</name></cpp:macro> <cpp:value>SVN_PROP_PREFIX "date"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_REVISION_ORIG_DATE</name></cpp:macro> <cpp:value>SVN_PROP_PREFIX "original-date"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_REVISION_AUTOVERSIONED</name></cpp:macro> <cpp:value>SVN_PROP_PREFIX "autoversioned"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVNSYNC_PROP_PREFIX</name></cpp:macro> <cpp:value>SVN_PROP_PREFIX "sync-"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVNSYNC_PROP_LOCK</name></cpp:macro> <cpp:value>SVNSYNC_PROP_PREFIX "lock"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVNSYNC_PROP_FROM_URL</name></cpp:macro> <cpp:value>SVNSYNC_PROP_PREFIX "from-url"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVNSYNC_PROP_FROM_UUID</name></cpp:macro> <cpp:value>SVNSYNC_PROP_PREFIX "from-uuid"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVNSYNC_PROP_LAST_MERGED_REV</name></cpp:macro> <cpp:value>SVNSYNC_PROP_PREFIX "last-merged-rev"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVNSYNC_PROP_CURRENTLY_COPYING</name></cpp:macro> <cpp:value>SVNSYNC_PROP_PREFIX "currently-copying"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_PROP_REVISION_ALL_PROPS</name></cpp:macro> <cpp:value>SVN_PROP_REVISION_AUTHOR, SVN_PROP_REVISION_LOG, SVN_PROP_REVISION_DATE, SVN_PROP_REVISION_AUTOVERSIONED, SVN_PROP_REVISION_ORIG_DATE, SVNSYNC_PROP_LOCK, SVNSYNC_PROP_FROM_URL, SVNSYNC_PROP_FROM_UUID, SVNSYNC_PROP_LAST_MERGED_REV, SVNSYNC_PROP_CURRENTLY_COPYING,</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
