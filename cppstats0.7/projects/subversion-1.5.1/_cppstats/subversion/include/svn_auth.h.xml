<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/include/svn_auth.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SVN_AUTH_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_AUTH_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type>struct <name>svn_auth_baton_t</name></type> <name>svn_auth_baton_t</name>;</typedef>
<typedef>typedef <type>struct <name>svn_auth_iterstate_t</name></type> <name>svn_auth_iterstate_t</name>;</typedef>
<typedef>typedef <type><struct>struct <name>svn_auth_provider_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cred_kind</name></decl>;</decl_stmt>
<function_decl><type><name>svn_error_t</name> *</type> (*<name>first_credentials</name>)<parameter_list>(<param><decl><type><name>void</name> **</type><name>credentials</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>iter_baton</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>provider_baton</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>parameters</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realmstring</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type> (*<name>next_credentials</name>)<parameter_list>(<param><decl><type><name>void</name> **</type><name>credentials</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>iter_baton</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>provider_baton</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>parameters</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realmstring</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type> (*<name>save_credentials</name>)<parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>saved</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>credentials</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>provider_baton</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>parameters</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realmstring</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
}</block></struct></type> <name>svn_auth_provider_t</name>;</typedef>
<typedef>typedef <type><struct>struct <name>svn_auth_provider_object_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_auth_provider_t</name> *</type><name>vtable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>provider_baton</name></decl>;</decl_stmt>
}</block></struct></type> <name>svn_auth_provider_object_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_AUTH_CRED_SIMPLE</name></cpp:macro> <cpp:value>"svn.simple"</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>svn_auth_cred_simple_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>username</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>password</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>may_save</name></decl>;</decl_stmt>
}</block></struct></type> <name>svn_auth_cred_simple_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_AUTH_CRED_USERNAME</name></cpp:macro> <cpp:value>"svn.username"</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>svn_auth_cred_username_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>username</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>may_save</name></decl>;</decl_stmt>
}</block></struct></type> <name>svn_auth_cred_username_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_AUTH_CRED_SSL_CLIENT_CERT</name></cpp:macro> <cpp:value>"svn.ssl.client-cert"</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>svn_auth_cred_ssl_client_cert_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cert_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>may_save</name></decl>;</decl_stmt>
}</block></struct></type> <name>svn_auth_cred_ssl_client_cert_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_AUTH_CRED_SSL_CLIENT_CERT_PW</name></cpp:macro> <cpp:value>"svn.ssl.client-passphrase"</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>svn_auth_cred_ssl_client_cert_pw_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>password</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>may_save</name></decl>;</decl_stmt>
}</block></struct></type> <name>svn_auth_cred_ssl_client_cert_pw_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_AUTH_CRED_SSL_SERVER_TRUST</name></cpp:macro> <cpp:value>"svn.ssl.server"</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>svn_auth_ssl_server_cert_info_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>hostname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fingerprint</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>valid_from</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>valid_until</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>issuer_dname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ascii_cert</name></decl>;</decl_stmt>
}</block></struct></type> <name>svn_auth_ssl_server_cert_info_t</name>;</typedef>
<function_decl><type><name>svn_auth_ssl_server_cert_info_t</name> *</type>
<name>svn_auth_ssl_server_cert_info_dup</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_auth_ssl_server_cert_info_t</name> *</type><name>info</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<typedef>typedef <type><struct>struct <name>svn_auth_cred_ssl_server_trust_t</name> <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>may_save</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>accepted_failures</name></decl>;</decl_stmt>
}</block></struct></type> <name>svn_auth_cred_ssl_server_trust_t</name>;</typedef>
<typedef>typedef <function_decl><type><name>svn_error_t</name> *</type>(*<name>svn_auth_simple_prompt_func_t</name>)
<parameter_list>(<param><decl><type><name>svn_auth_cred_simple_t</name> **</type><name>cred</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>username</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>may_save</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>svn_error_t</name> *</type>(*<name>svn_auth_username_prompt_func_t</name>)
<parameter_list>(<param><decl><type><name>svn_auth_cred_username_t</name> **</type><name>cred</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>may_save</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl></typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_AUTH_SSL_NOTYETVALID</name></cpp:macro> <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_AUTH_SSL_EXPIRED</name></cpp:macro> <cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_AUTH_SSL_CNMISMATCH</name></cpp:macro> <cpp:value>0x00000004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_AUTH_SSL_UNKNOWNCA</name></cpp:macro> <cpp:value>0x00000008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_AUTH_SSL_OTHER</name></cpp:macro> <cpp:value>0x40000000</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>svn_error_t</name> *</type>(*<name>svn_auth_ssl_server_trust_prompt_func_t</name>)
<parameter_list>(<param><decl><type><name>svn_auth_cred_ssl_server_trust_t</name> **</type><name>cred</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name></decl></param>,
<param><decl><type><name>apr_uint32_t</name></type> <name>failures</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_auth_ssl_server_cert_info_t</name> *</type><name>cert_info</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>may_save</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>svn_error_t</name> *</type>(*<name>svn_auth_ssl_client_cert_prompt_func_t</name>)
<parameter_list>(<param><decl><type><name>svn_auth_cred_ssl_client_cert_t</name> **</type><name>cred</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>may_save</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>svn_error_t</name> *</type>(*<name>svn_auth_ssl_client_cert_pw_prompt_func_t</name>)
<parameter_list>(<param><decl><type><name>svn_auth_cred_ssl_client_cert_pw_t</name> **</type><name>cred</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>may_save</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl></typedef>
<function_decl><type><name>void</name></type> <name>svn_auth_open</name><parameter_list>(<param><decl><type><name>svn_auth_baton_t</name> **</type><name>auth_baton</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>providers</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>svn_auth_set_parameter</name><parameter_list>(<param><decl><type><name>svn_auth_baton_t</name> *</type><name>auth_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>value</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>void</name> *</type> <name>svn_auth_get_parameter</name><parameter_list>(<param><decl><type><name>svn_auth_baton_t</name> *</type><name>auth_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_AUTH_PARAM_PREFIX</name></cpp:macro> <cpp:value>"svn:auth:"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_AUTH_PARAM_DEFAULT_USERNAME</name></cpp:macro> <cpp:value>SVN_AUTH_PARAM_PREFIX "username"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_AUTH_PARAM_DEFAULT_PASSWORD</name></cpp:macro> <cpp:value>SVN_AUTH_PARAM_PREFIX "password"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_AUTH_PARAM_NON_INTERACTIVE</name></cpp:macro> <cpp:value>SVN_AUTH_PARAM_PREFIX "non-interactive"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_AUTH_PARAM_DONT_STORE_PASSWORDS</name></cpp:macro> <cpp:value>SVN_AUTH_PARAM_PREFIX "dont-store-passwords"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_AUTH_PARAM_NO_AUTH_CACHE</name></cpp:macro> <cpp:value>SVN_AUTH_PARAM_PREFIX "no-auth-cache"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_AUTH_PARAM_SSL_SERVER_FAILURES</name></cpp:macro> <cpp:value>SVN_AUTH_PARAM_PREFIX "ssl:failures"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_AUTH_PARAM_SSL_SERVER_CERT_INFO</name></cpp:macro> <cpp:value>SVN_AUTH_PARAM_PREFIX "ssl:cert-info"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_AUTH_PARAM_CONFIG</name></cpp:macro> <cpp:value>SVN_AUTH_PARAM_PREFIX "config"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_AUTH_PARAM_SERVER_GROUP</name></cpp:macro> <cpp:value>SVN_AUTH_PARAM_PREFIX "server-group"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_AUTH_PARAM_CONFIG_DIR</name></cpp:macro> <cpp:value>SVN_AUTH_PARAM_PREFIX "config-dir"</cpp:value></cpp:define>
<function_decl><type><name>svn_error_t</name> *</type> <name>svn_auth_first_credentials</name><parameter_list>(<param><decl><type><name>void</name> **</type><name>credentials</name></decl></param>,
<param><decl><type><name>svn_auth_iterstate_t</name> **</type><name>state</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cred_kind</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realmstring</name></decl></param>,
<param><decl><type><name>svn_auth_baton_t</name> *</type><name>auth_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type> <name>svn_auth_next_credentials</name><parameter_list>(<param><decl><type><name>void</name> **</type><name>credentials</name></decl></param>,
<param><decl><type><name>svn_auth_iterstate_t</name> *</type><name>state</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type> <name>svn_auth_save_credentials</name><parameter_list>(<param><decl><type><name>svn_auth_iterstate_t</name> *</type><name>state</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>
<name>svn_auth_get_simple_prompt_provider</name><parameter_list>(<param><decl><type><name>svn_auth_provider_object_t</name> **</type><name>provider</name></decl></param>,
<param><decl><type><name>svn_auth_simple_prompt_func_t</name></type> <name>prompt_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>prompt_baton</name></decl></param>,
<param><decl><type><name>int</name></type> <name>retry_limit</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>svn_auth_get_username_prompt_provider</name>
<parameter_list>(<param><decl><type><name>svn_auth_provider_object_t</name> **</type><name>provider</name></decl></param>,
<param><decl><type><name>svn_auth_username_prompt_func_t</name></type> <name>prompt_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>prompt_baton</name></decl></param>,
<param><decl><type><name>int</name></type> <name>retry_limit</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>svn_auth_get_simple_provider</name><parameter_list>(<param><decl><type><name>svn_auth_provider_object_t</name> **</type><name>provider</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call>) || <call><name>defined</name><argument_list>(<argument><expr><name>DOXYGEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>void</name></type>
<name>svn_auth_get_windows_simple_provider</name><parameter_list>(<param><decl><type><name>svn_auth_provider_object_t</name> **</type><name>provider</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DARWIN</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>DOXYGEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>void</name></type>
<name>svn_auth_get_keychain_simple_provider</name><parameter_list>(<param><decl><type><name>svn_auth_provider_object_t</name> **</type><name>provider</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><name>void</name></type> <name>svn_auth_get_username_provider</name><parameter_list>(<param><decl><type><name>svn_auth_provider_object_t</name> **</type><name>provider</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>svn_auth_get_ssl_server_trust_file_provider</name>
<parameter_list>(<param><decl><type><name>svn_auth_provider_object_t</name> **</type><name>provider</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call>) || <call><name>defined</name><argument_list>(<argument><expr><name>DOXYGEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>void</name></type>
<name>svn_auth_get_windows_ssl_server_trust_provider</name>
<parameter_list>(<param><decl><type><name>svn_auth_provider_object_t</name> **</type><name>provider</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><name>void</name></type> <name>svn_auth_get_ssl_client_cert_file_provider</name>
<parameter_list>(<param><decl><type><name>svn_auth_provider_object_t</name> **</type><name>provider</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>svn_auth_get_ssl_client_cert_pw_file_provider</name>
<parameter_list>(<param><decl><type><name>svn_auth_provider_object_t</name> **</type><name>provider</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>svn_auth_get_ssl_server_trust_prompt_provider</name>
<parameter_list>(<param><decl><type><name>svn_auth_provider_object_t</name> **</type><name>provider</name></decl></param>,
<param><decl><type><name>svn_auth_ssl_server_trust_prompt_func_t</name></type> <name>prompt_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>prompt_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>svn_auth_get_ssl_client_cert_prompt_provider</name>
<parameter_list>(<param><decl><type><name>svn_auth_provider_object_t</name> **</type><name>provider</name></decl></param>,
<param><decl><type><name>svn_auth_ssl_client_cert_prompt_func_t</name></type> <name>prompt_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>prompt_baton</name></decl></param>,
<param><decl><type><name>int</name></type> <name>retry_limit</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>svn_auth_get_ssl_client_cert_pw_prompt_provider</name>
<parameter_list>(<param><decl><type><name>svn_auth_provider_object_t</name> **</type><name>provider</name></decl></param>,
<param><decl><type><name>svn_auth_ssl_client_cert_pw_prompt_func_t</name></type> <name>prompt_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>prompt_baton</name></decl></param>,
<param><decl><type><name>int</name></type> <name>retry_limit</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
