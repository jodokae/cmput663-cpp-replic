<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/include/svn_version.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SVN_VERSION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_VERSION_H</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>APR_STRINGIFY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_general.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_VER_MAJOR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_VER_MINOR</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_VER_PATCH</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_VER_MICRO</name></cpp:macro> <cpp:value>SVN_VER_PATCH</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_VER_LIBRARY</name></cpp:macro> <cpp:value>SVN_VER_MAJOR</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_VER_TAG</name></cpp:macro> <cpp:value>" (r32289)"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_VER_NUMTAG</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_VER_REVISION</name></cpp:macro> <cpp:value>32289</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_VER_NUM</name></cpp:macro> <cpp:value>APR_STRINGIFY(SVN_VER_MAJOR) "." APR_STRINGIFY(SVN_VER_MINOR) "." APR_STRINGIFY(SVN_VER_PATCH)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_VER_NUMBER</name></cpp:macro> <cpp:value>SVN_VER_NUM SVN_VER_NUMTAG</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_VERSION</name></cpp:macro> <cpp:value>SVN_VER_NUM SVN_VER_TAG</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>svn_version_t</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>major</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>minor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>patch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tag</name></decl>;</decl_stmt>
}</block></struct></type> <name>svn_version_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_VERSION_DEFINE</name><parameter_list>(<param><type><name>name</name></type></param>)</parameter_list></cpp:macro> <cpp:value>static const svn_version_t name = { SVN_VER_MAJOR, SVN_VER_MINOR, SVN_VER_PATCH, SVN_VER_NUMTAG }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_VERSION_BODY</name></cpp:macro> <cpp:value>SVN_VERSION_DEFINE(versioninfo); return &amp;versioninfo</cpp:value></cpp:define>
<function_decl><type><name>svn_boolean_t</name></type> <name>svn_ver_compatible</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_version_t</name> *</type><name>my_version</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_version_t</name> *</type><name>lib_version</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_boolean_t</name></type> <name>svn_ver_equal</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_version_t</name> *</type><name>my_version</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_version_t</name> *</type><name>lib_version</name></decl></param>)</parameter_list>;</function_decl>
<typedef>typedef <type><struct>struct <name>svn_version_checklist_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>label</name></decl>;</decl_stmt>
<function_decl><type><specifier>const</specifier> <name>svn_version_t</name> *</type>(*<name>version_query</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
}</block></struct></type> <name>svn_version_checklist_t</name>;</typedef>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_ver_check_list</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_version_t</name> *</type><name>my_version</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_version_checklist_t</name> *</type><name>checklist</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>svn_version_t</name> *</type><name>svn_subr_version</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
