<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/include/svn_types.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SVN_TYPES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_TYPES_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_hash.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_tables.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_time.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><struct>struct <name>svn_error_t</name> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>apr_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>message</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>svn_error_t</name> *</type><name>child</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>line</name></decl>;</decl_stmt>
}</block></struct></type> <name>svn_error_t</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>APR_ARRAY_IDX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_ARRAY_IDX</name><parameter_list>(<param><type><name>ary</name></type></param>,<param><type><name>i</name></type></param>,<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((type *)(ary)-&gt;elts)[i])</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>APR_ARRAY_PUSH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_ARRAY_PUSH</name><parameter_list>(<param><type><name>ary</name></type></param>,<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(*((type *)apr_array_push(ary)))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><enum>enum <block>{
<decl><name>svn_node_none</name></decl>,
<decl><name>svn_node_file</name></decl>,
<decl><name>svn_node_dir</name></decl>,
<decl><name>svn_node_unknown</name></decl>
}</block></enum></type> <name>svn_node_kind_t</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>int</name></type> <name>svn_revnum_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_IS_VALID_REVNUM</name><parameter_list>(<param><type><name>n</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((n) &gt;= 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_INVALID_REVNUM</name></cpp:macro> <cpp:value>((svn_revnum_t) -1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_IGNORED_REVNUM</name></cpp:macro> <cpp:value>((svn_revnum_t) -1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_STR_TO_REV</name><parameter_list>(<param><type><name>str</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((svn_revnum_t) atol(str))</cpp:value></cpp:define>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_revnum_parse</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name> *</type><name>rev</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>str</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>endptr</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_REVNUM_T_FMT</name></cpp:macro> <cpp:value>"ld"</cpp:value></cpp:define>
<typedef>typedef <type><name>apr_int64_t</name></type> <name>svn_filesize_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_INVALID_FILESIZE</name></cpp:macro> <cpp:value>((svn_filesize_t) -1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_FILESIZE_T_FMT</name></cpp:macro> <cpp:value>APR_INT64_T_FMT</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DOXYGEN_SHOULD_SKIP_THIS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn__atoui64</name><parameter_list>(<param><type><name>X</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((apr_uint64_t) apr_atoi64(X))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><name>int</name></type> <name>svn_boolean_t</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRUE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FALSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<enum>enum <name>svn_recurse_kind</name> <block>{
<decl><name>svn_nonrecursive</name> <init>= <expr>1</expr></init></decl>,
<decl><name>svn_recursive</name></decl>
}</block>;</enum>
<typedef>typedef <type><enum>enum <block>{
<decl><name>svn_depth_unknown</name> <init>= <expr>-2</expr></init></decl>,
<decl><name>svn_depth_exclude</name> <init>= <expr>-1</expr></init></decl>,
<decl><name>svn_depth_empty</name> <init>= <expr>0</expr></init></decl>,
<decl><name>svn_depth_files</name> <init>= <expr>1</expr></init></decl>,
<decl><name>svn_depth_immediates</name> <init>= <expr>2</expr></init></decl>,
<decl><name>svn_depth_infinity</name> <init>= <expr>3</expr></init></decl>
}</block></enum></type> <name>svn_depth_t</name>;</typedef>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_depth_to_word</name><parameter_list>(<param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_depth_t</name></type>
<name>svn_depth_from_word</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>word</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_DEPTH_INFINITY_OR_FILES</name><parameter_list>(<param><type><name>recurse</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((recurse) ? svn_depth_infinity : svn_depth_files)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_DEPTH_INFINITY_OR_IMMEDIATES</name><parameter_list>(<param><type><name>recurse</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((recurse) ? svn_depth_infinity : svn_depth_immediates)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_DEPTH_INFINITY_OR_EMPTY</name><parameter_list>(<param><type><name>recurse</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((recurse) ? svn_depth_infinity : svn_depth_empty)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_DEPTH_IS_RECURSIVE</name><parameter_list>(<param><type><name>depth</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((depth) == svn_depth_infinity || (depth) == svn_depth_unknown) ? TRUE : FALSE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_DIRENT_KIND</name></cpp:macro> <cpp:value>0x00001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_DIRENT_SIZE</name></cpp:macro> <cpp:value>0x00002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_DIRENT_HAS_PROPS</name></cpp:macro> <cpp:value>0x00004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_DIRENT_CREATED_REV</name></cpp:macro> <cpp:value>0x00008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_DIRENT_TIME</name></cpp:macro> <cpp:value>0x00010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_DIRENT_LAST_AUTHOR</name></cpp:macro> <cpp:value>0x00020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_DIRENT_ALL</name></cpp:macro> <cpp:value>~((apr_uint32_t ) 0)</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>svn_dirent_t</name> <block>{
<decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_filesize_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>has_props</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>created_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>last_author</name></decl>;</decl_stmt>
}</block></struct></type> <name>svn_dirent_t</name>;</typedef>
<function_decl><type><name>svn_dirent_t</name> *</type><name>svn_dirent_dup</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_dirent_t</name> *</type><name>dirent</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_KEYWORD_MAX_LEN</name></cpp:macro> <cpp:value>255</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_KEYWORD_REVISION_LONG</name></cpp:macro> <cpp:value>"LastChangedRevision"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_KEYWORD_REVISION_SHORT</name></cpp:macro> <cpp:value>"Rev"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_KEYWORD_REVISION_MEDIUM</name></cpp:macro> <cpp:value>"Revision"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_KEYWORD_DATE_LONG</name></cpp:macro> <cpp:value>"LastChangedDate"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_KEYWORD_DATE_SHORT</name></cpp:macro> <cpp:value>"Date"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_KEYWORD_AUTHOR_LONG</name></cpp:macro> <cpp:value>"LastChangedBy"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_KEYWORD_AUTHOR_SHORT</name></cpp:macro> <cpp:value>"Author"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_KEYWORD_URL_LONG</name></cpp:macro> <cpp:value>"HeadURL"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_KEYWORD_URL_SHORT</name></cpp:macro> <cpp:value>"URL"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_KEYWORD_ID</name></cpp:macro> <cpp:value>"Id"</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>svn_commit_info_t</name> <block>{
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>date</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>author</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>post_commit_err</name></decl>;</decl_stmt>
}</block></struct></type> <name>svn_commit_info_t</name>;</typedef>
<function_decl><type><name>svn_commit_info_t</name> *</type>
<name>svn_create_commit_info</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_commit_info_t</name> *</type>
<name>svn_commit_info_dup</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_commit_info_t</name> *</type><name>src_commit_info</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<typedef>typedef <type><struct>struct <name>svn_log_changed_path_t</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name>action</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_rev</name></decl>;</decl_stmt>
}</block></struct></type> <name>svn_log_changed_path_t</name>;</typedef>
<function_decl><type><name>svn_log_changed_path_t</name> *</type>
<name>svn_log_changed_path_dup</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_log_changed_path_t</name> *</type><name>changed_path</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<typedef>typedef <type><struct>struct <name>svn_log_entry_t</name> <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>changed_paths</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>revprops</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>has_children</name></decl>;</decl_stmt>
}</block></struct></type> <name>svn_log_entry_t</name>;</typedef>
<function_decl><type><name>svn_log_entry_t</name> *</type>
<name>svn_log_entry_create</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<typedef>typedef <function_decl><type><name>svn_error_t</name> *</type>(*<name>svn_log_entry_receiver_t</name>)
<parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>svn_log_entry_t</name> *</type><name>log_entry</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>svn_error_t</name> *</type>(*<name>svn_log_message_receiver_t</name>)
<parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>changed_paths</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>author</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>date</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>message</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>svn_error_t</name> *</type>(*<name>svn_commit_callback2_t</name>)
<parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_commit_info_t</name> *</type><name>commit_info</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>svn_error_t</name> *</type>(*<name>svn_commit_callback_t</name>)
<parameter_list>(<param><decl><type><name>svn_revnum_t</name></type> <name>new_revision</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>date</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>author</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list>;</function_decl></typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_STREAM_CHUNK_SIZE</name></cpp:macro> <cpp:value>102400</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DOXYGEN_SHOULD_SKIP_THIS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN__STREAM_CHUNK_SIZE</name></cpp:macro> <cpp:value>16384</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_MAX_OBJECT_SIZE</name></cpp:macro> <cpp:value>(((apr_size_t) -1) / 2)</cpp:value></cpp:define>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_mime_type_validate</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mime_type</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_boolean_t</name></type> <name>svn_mime_type_is_binary</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mime_type</name></decl></param>)</parameter_list>;</function_decl>
<typedef>typedef <function_decl><type><name>svn_error_t</name> *</type>(*<name>svn_cancel_func_t</name>)<parameter_list>(<param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <type><struct>struct <name>svn_lock_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>token</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>owner</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>comment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>is_dav_comment</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>creation_date</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>expiration_date</name></decl>;</decl_stmt>
}</block></struct></type> <name>svn_lock_t</name>;</typedef>
<function_decl><type><name>svn_lock_t</name> *</type>
<name>svn_lock_create</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_lock_t</name> *</type>
<name>svn_lock_dup</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_lock_t</name> *</type><name>lock</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_uuid_generate</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<typedef>typedef <type><struct>struct <name>svn_merge_range_t</name> <block>{
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>inheritable</name></decl>;</decl_stmt>
}</block></struct></type> <name>svn_merge_range_t</name>;</typedef>
<function_decl><type><name>svn_merge_range_t</name> *</type>
<name>svn_merge_range_dup</name><parameter_list>(<param><decl><type><name>svn_merge_range_t</name> *</type><name>range</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_boolean_t</name></type>
<name>svn_merge_range_contains_rev</name><parameter_list>(<param><decl><type><name>svn_merge_range_t</name> *</type><name>range</name></decl></param>, <param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>)</parameter_list>;</function_decl>
<typedef>typedef <type><struct>struct <name>svn_location_segment_t</name> <block>{
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>range_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>range_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
}</block></struct></type> <name>svn_location_segment_t</name>;</typedef>
<typedef>typedef <function_decl><type><name>svn_error_t</name> *</type>(*<name>svn_location_segment_receiver_t</name>)
<parameter_list>(<param><decl><type><name>svn_location_segment_t</name> *</type><name>segment</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl></typedef>
<function_decl><type><name>svn_location_segment_t</name> *</type>
<name>svn_location_segment_dup</name><parameter_list>(<param><decl><type><name>svn_location_segment_t</name> *</type><name>segment</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
