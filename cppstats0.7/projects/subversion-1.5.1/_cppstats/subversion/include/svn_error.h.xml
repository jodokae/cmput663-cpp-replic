<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/include/svn_error.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SVN_ERROR_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_ERROR_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DOXYGEN_SHOULD_SKIP_THIS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STDIO</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_want.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_NO_ERROR</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error_codes.h"</cpp:file></cpp:include>
<function_decl><type><name>void</name></type> <name>svn_error__locate</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl></param>, <param><decl><type><name>long</name></type> <name>line</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> *</type><name>svn_strerror</name><parameter_list>(<param><decl><type><name>apr_status_t</name></type> <name>statcode</name></decl></param>, <param><decl><type><name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>bufsize</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>svn_err_best_message</name><parameter_list>(<param><decl><type><name>svn_error_t</name> *</type><name>err</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>bufsize</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_error_create</name><parameter_list>(<param><decl><type><name>apr_status_t</name></type> <name>apr_err</name></decl></param>,
<param><decl><type><name>svn_error_t</name> *</type><name>child</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>message</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_error_create</name></cpp:macro> <cpp:value>(svn_error__locate(__FILE__,__LINE__), (svn_error_create))</cpp:value></cpp:define>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_error_createf</name><parameter_list>(<param><decl><type><name>apr_status_t</name></type> <name>apr_err</name></decl></param>,
<param><decl><type><name>svn_error_t</name> *</type><name>child</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fmt</name></decl></param>,
<param><decl><type>...</type></decl></param>)</parameter_list>
__attribute__ <parameter_list>(<param/></parameter_list>(format<parameter_list>(<param><decl><type><name>printf</name></type></decl></param>, <param/></parameter_list>3, 4</function_decl>)</block></extern>))<empty_stmt>;</empty_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_error_createf</name></cpp:macro> <cpp:value>(svn_error__locate(__FILE__,__LINE__), (svn_error_createf))</cpp:value></cpp:define>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_error_wrap_apr</name><parameter_list>(<param><decl><type><name>apr_status_t</name></type> <name>status</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fmt</name></decl></param>, <param><decl><type>...</type></decl></param>)</parameter_list>
__attribute__<parameter_list>(<param/></parameter_list>(format<parameter_list>(<param><decl><type><name>printf</name></type></decl></param>, <param/></parameter_list>2, 3</function_decl>)))<empty_stmt>;</empty_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_error_wrap_apr</name></cpp:macro> <cpp:value>(svn_error__locate(__FILE__,__LINE__), (svn_error_wrap_apr))</cpp:value></cpp:define>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_error_quick_wrap</name><parameter_list>(<param><decl><type><name>svn_error_t</name> *</type><name>child</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>new_msg</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svn_error_quick_wrap</name></cpp:macro> <cpp:value>(svn_error__locate(__FILE__,__LINE__), (svn_error_quick_wrap))</cpp:value></cpp:define>
<function_decl><type><name>void</name></type> <name>svn_error_compose</name><parameter_list>(<param><decl><type><name>svn_error_t</name> *</type><name>chain</name></decl></param>, <param><decl><type><name>svn_error_t</name> *</type><name>new_err</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_error_root_cause</name><parameter_list>(<param><decl><type><name>svn_error_t</name> *</type><name>err</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_error_dup</name><parameter_list>(<param><decl><type><name>svn_error_t</name> *</type><name>err</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>svn_error_clear</name><parameter_list>(<param><decl><type><name>svn_error_t</name> *</type><name>error</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>svn_handle_error2</name><parameter_list>(<param><decl><type><name>svn_error_t</name> *</type><name>error</name></decl></param>,
<param><decl><type><name>FILE</name> *</type><name>stream</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>fatal</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prefix</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>svn_handle_error</name><parameter_list>(<param><decl><type><name>svn_error_t</name> *</type><name>error</name></decl></param>,
<param><decl><type><name>FILE</name> *</type><name>stream</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>fatal</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>svn_handle_warning2</name><parameter_list>(<param><decl><type><name>FILE</name> *</type><name>stream</name></decl></param>, <param><decl><type><name>svn_error_t</name> *</type><name>error</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prefix</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>svn_handle_warning</name><parameter_list>(<param><decl><type><name>FILE</name> *</type><name>stream</name></decl></param>, <param><decl><type><name>svn_error_t</name> *</type><name>error</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_ERR</name><parameter_list>(<param><type><name>expr</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do { svn_error_t *svn_err__temp = (expr); if (svn_err__temp) return svn_err__temp; } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_ERR_W</name><parameter_list>(<param><type><name>expr</name></type></param>, <param><type><name>wrap_msg</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do { svn_error_t *svn_err__temp = (expr); if (svn_err__temp) return svn_error_quick_wrap(svn_err__temp, wrap_msg); } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_INT_ERR</name><parameter_list>(<param><type><name>expr</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do { svn_error_t *svn_err__temp = (expr); if (svn_err__temp) { svn_handle_error2(svn_err__temp, stderr, FALSE, "svn: "); svn_error_clear(svn_err__temp); return EXIT_FAILURE; } } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_ERR_IS_LOCK_ERROR</name><parameter_list>(<param><type><name>err</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(err-&gt;apr_err == SVN_ERR_FS_PATH_ALREADY_LOCKED || err-&gt;apr_err == SVN_ERR_FS_OUT_OF_DATE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_ERR_IS_UNLOCK_ERROR</name><parameter_list>(<param><type><name>err</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(err-&gt;apr_err == SVN_ERR_FS_PATH_NOT_LOCKED || err-&gt;apr_err == SVN_ERR_FS_BAD_LOCK_TOKEN || err-&gt;apr_err == SVN_ERR_FS_LOCK_OWNER_MISMATCH || err-&gt;apr_err == SVN_ERR_FS_NO_SUCH_LOCK || err-&gt;apr_err == SVN_ERR_RA_NOT_LOCKED || err-&gt;apr_err == SVN_ERR_FS_LOCK_EXPIRED)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
