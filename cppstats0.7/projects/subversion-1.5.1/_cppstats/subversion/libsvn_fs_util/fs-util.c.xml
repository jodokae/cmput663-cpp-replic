<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/libsvn_fs_util/fs-util.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_fs_util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libsvn_fs/fs-loader.h"</cpp:file></cpp:include>
<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_fs__canonicalize_abspath</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>newpath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>path_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>path_i</name> <init>= <expr>0</expr></init>, <name>newpath_i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>eating_slashes</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>! <name>path</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr>! *<name>path</name></expr>)</condition><then>
<return>return <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"/"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>path_len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>newpath</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>path_len</name> + 2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>path</name> != '/'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>newpath</name><index>[<expr><name>newpath_i</name>++</expr>]</index></name> = '/'</expr>;</expr_stmt>
}</block></then></if>
<for>for (<init><expr><name>path_i</name> = 0</expr>;</init> <condition><expr><name>path_i</name> &lt; <name>path_len</name></expr>;</condition> <incr><expr><name>path_i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>path</name><index>[<expr><name>path_i</name></expr>]</index></name> == '/'</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>eating_slashes</name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><name>eating_slashes</name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>eating_slashes</name></expr>)</condition><then>
<expr_stmt><expr><name>eating_slashes</name> = <name>FALSE</name></expr>;</expr_stmt></then></if>
}</block></else></if>
<expr_stmt><expr><name><name>newpath</name><index>[<expr><name>newpath_i</name>++</expr>]</index></name> = <name><name>path</name><index>[<expr><name>path_i</name></expr>]</index></name></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr>(<name><name>newpath</name><index>[<expr><name>newpath_i</name> - 1</expr>]</index></name> == '/') &amp;&amp; (<name>newpath_i</name> &gt; 1)</expr>)</condition><then>
<expr_stmt><expr><name><name>newpath</name><index>[<expr><name>newpath_i</name> - 1</expr>]</index></name> = '\0'</expr>;</expr_stmt></then></if>
<return>return <expr><name>newpath</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_fs__check_fs</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>expect_open</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>(<name>expect_open</name> &amp;&amp; <name><name>fs</name>-&gt;<name>fsap_data</name></name>)
|| ((! <name>expect_open</name>) &amp;&amp; (! <name><name>fs</name>-&gt;<name>fsap_data</name></name>))</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>expect_open</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_FS_NOT_OPEN</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Filesystem object has not been opened yet"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_FS_ALREADY_OPEN</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Filesystem object already open"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>
<function><type><name>char</name> *</type>
<name>svn_fs__next_entry_name</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>next_p</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>end</name></decl>;</decl_stmt>
<expr_stmt><expr><name>end</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>end</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>next_p</name> = 0</expr>;</expr_stmt>
<return>return <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>next</name> <init>= <expr><name>end</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr>*<name>next</name> == '/'</expr>)</condition>
<expr_stmt><expr><name>next</name>++</expr>;</expr_stmt></while>
<expr_stmt><expr>*<name>next_p</name> = <name>next</name></expr>;</expr_stmt>
<return>return <expr><call><name>apr_pstrndup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>end</name> - <name>path</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
}</block></function>
</unit>
