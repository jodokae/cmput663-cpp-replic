<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/libsvn_fs_fs/id.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"id.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../libsvn_fs/fs-loader.h"</cpp:file></cpp:include>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>node_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copy_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>offset</name></decl>;</decl_stmt>
}</block></struct></type> <name>id_private_t</name>;</typedef>
<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_fs_fs__id_node_id</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>id</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>id_private_t</name> *</type><name>pvt</name> <init>= <expr><name><name>id</name>-&gt;<name>fsap_data</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>pvt</name>-&gt;<name>node_id</name></name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_fs_fs__id_copy_id</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>id</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>id_private_t</name> *</type><name>pvt</name> <init>= <expr><name><name>id</name>-&gt;<name>fsap_data</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>pvt</name>-&gt;<name>copy_id</name></name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_fs_fs__id_txn_id</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>id</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>id_private_t</name> *</type><name>pvt</name> <init>= <expr><name><name>id</name>-&gt;<name>fsap_data</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>pvt</name>-&gt;<name>txn_id</name></name></expr>;</return>
}</block></function>
<function><type><name>svn_revnum_t</name></type>
<name>svn_fs_fs__id_rev</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>id</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>id_private_t</name> *</type><name>pvt</name> <init>= <expr><name><name>id</name>-&gt;<name>fsap_data</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>pvt</name>-&gt;<name>rev</name></name></expr>;</return>
}</block></function>
<function><type><name>apr_off_t</name></type>
<name>svn_fs_fs__id_offset</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>id</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>id_private_t</name> *</type><name>pvt</name> <init>= <expr><name><name>id</name>-&gt;<name>fsap_data</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>pvt</name>-&gt;<name>offset</name></name></expr>;</return>
}</block></function>
<function><type><name>svn_string_t</name> *</type>
<name>svn_fs_fs__id_unparse</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>id</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_rev_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>id_private_t</name> *</type><name>pvt</name> <init>= <expr><name><name>id</name>-&gt;<name>fsap_data</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(! <name><name>pvt</name>-&gt;<name>txn_id</name></name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>txn_rev_id</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%ld/%"
<name>APR_OFF_T_FMT</name></expr></argument>, <argument><expr><name><name>pvt</name>-&gt;<name>rev</name></name></expr></argument>, <argument><expr><name><name>pvt</name>-&gt;<name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>txn_rev_id</name> = <name><name>pvt</name>-&gt;<name>txn_id</name></name></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><call><name>svn_string_createf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s.%s.%c%s"</expr></argument>,
<argument><expr><name><name>pvt</name>-&gt;<name>node_id</name></name></expr></argument>, <argument><expr><name><name>pvt</name>-&gt;<name>copy_id</name></name></expr></argument>,
<argument><expr>(<name><name>pvt</name>-&gt;<name>txn_id</name></name> ? 't' : 'r')</expr></argument>,
<argument><expr><name>txn_rev_id</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_boolean_t</name></type>
<name>svn_fs_fs__id_eq</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>a</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>b</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>id_private_t</name> *</type><name>pvta</name> <init>= <expr><name><name>a</name>-&gt;<name>fsap_data</name></name></expr></init>, *<name>pvtb</name> <init>= <expr><name><name>b</name>-&gt;<name>fsap_data</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>a</name> == <name>b</name></expr>)</condition><then>
<return>return <expr><name>TRUE</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pvta</name>-&gt;<name>node_id</name></name></expr></argument>, <argument><expr><name><name>pvtb</name>-&gt;<name>node_id</name></name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<return>return <expr><name>FALSE</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pvta</name>-&gt;<name>copy_id</name></name></expr></argument>, <argument><expr><name><name>pvtb</name>-&gt;<name>copy_id</name></name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<return>return <expr><name>FALSE</name></expr>;</return></then></if>
<if>if <condition>(<expr>(<name><name>pvta</name>-&gt;<name>txn_id</name></name> == <name>NULL</name>) != (<name><name>pvtb</name>-&gt;<name>txn_id</name></name> == <name>NULL</name>)</expr>)</condition><then>
<return>return <expr><name>FALSE</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>pvta</name>-&gt;<name>txn_id</name></name> &amp;&amp; <name><name>pvtb</name>-&gt;<name>txn_id</name></name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>pvta</name>-&gt;<name>txn_id</name></name></expr></argument>, <argument><expr><name><name>pvtb</name>-&gt;<name>txn_id</name></name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<return>return <expr><name>FALSE</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>pvta</name>-&gt;<name>rev</name></name> != <name><name>pvtb</name>-&gt;<name>rev</name></name></expr>)</condition><then>
<return>return <expr><name>FALSE</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>pvta</name>-&gt;<name>offset</name></name> != <name><name>pvtb</name>-&gt;<name>offset</name></name></expr>)</condition><then>
<return>return <expr><name>FALSE</name></expr>;</return></then></if>
<return>return <expr><name>TRUE</name></expr>;</return>
}</block></function>
<function><type><name>svn_boolean_t</name></type>
<name>svn_fs_fs__id_check_related</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>a</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>b</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>id_private_t</name> *</type><name>pvta</name> <init>= <expr><name><name>a</name>-&gt;<name>fsap_data</name></name></expr></init>, *<name>pvtb</name> <init>= <expr><name><name>b</name>-&gt;<name>fsap_data</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>a</name> == <name>b</name></expr>)</condition><then>
<return>return <expr><name>TRUE</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>pvta</name>-&gt;<name>node_id</name><index>[<expr>0</expr>]</index></name> == '_'</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>pvta</name>-&gt;<name>txn_id</name></name> &amp;&amp; <name><name>pvtb</name>-&gt;<name>txn_id</name></name> &amp;&amp;
(<call><name>strcmp</name><argument_list>(<argument><expr><name><name>pvta</name>-&gt;<name>txn_id</name></name></expr></argument>, <argument><expr><name><name>pvtb</name>-&gt;<name>txn_id</name></name></expr></argument>)</argument_list></call> != 0)</expr>)</condition><then>
<return>return <expr><name>FALSE</name></expr>;</return></then></if>
}</block></then></if>
<return>return <expr>(<call><name>strcmp</name><argument_list>(<argument><expr><name><name>pvta</name>-&gt;<name>node_id</name></name></expr></argument>, <argument><expr><name><name>pvtb</name>-&gt;<name>node_id</name></name></expr></argument>)</argument_list></call> == 0) ? <name>TRUE</name> : <name>FALSE</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>svn_fs_fs__id_compare</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>a</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>b</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>svn_fs_fs__id_eq</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<return>return <expr>(<call><name>svn_fs_fs__id_check_related</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> ? 1 : -1)</expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>id_vtable_t</name></type> <name>id_vtable</name> <init>= <expr><block>{
<expr><name>svn_fs_fs__id_unparse</name></expr>,
<expr><name>svn_fs_fs__id_compare</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>svn_fs_id_t</name> *</type>
<name>svn_fs_fs__id_txn_create</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>node_id</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copy_id</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_id</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_id_t</name> *</type><name>id</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>id_private_t</name> *</type><name>pvt</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>pvt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pvt</name>-&gt;<name>node_id</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>node_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pvt</name>-&gt;<name>copy_id</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>copy_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pvt</name>-&gt;<name>txn_id</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>txn_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pvt</name>-&gt;<name>rev</name></name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pvt</name>-&gt;<name>offset</name></name> = -1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name>-&gt;<name>vtable</name></name> = &amp;<name>id_vtable</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name>-&gt;<name>fsap_data</name></name> = <name>pvt</name></expr>;</expr_stmt>
<return>return <expr><name>id</name></expr>;</return>
}</block></function>
<function><type><name>svn_fs_id_t</name> *</type>
<name>svn_fs_fs__id_rev_create</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>node_id</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copy_id</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>offset</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_id_t</name> *</type><name>id</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>id_private_t</name> *</type><name>pvt</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>pvt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pvt</name>-&gt;<name>node_id</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>node_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pvt</name>-&gt;<name>copy_id</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>copy_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pvt</name>-&gt;<name>txn_id</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pvt</name>-&gt;<name>rev</name></name> = <name>rev</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pvt</name>-&gt;<name>offset</name></name> = <name>offset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name>-&gt;<name>vtable</name></name> = &amp;<name>id_vtable</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name>-&gt;<name>fsap_data</name></name> = <name>pvt</name></expr>;</expr_stmt>
<return>return <expr><name>id</name></expr>;</return>
}</block></function>
<function><type><name>svn_fs_id_t</name> *</type>
<name>svn_fs_fs__id_copy</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>id</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_id_t</name> *</type><name>new_id</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>new_id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>id_private_t</name> *</type><name>new_pvt</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>new_pvt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>id_private_t</name> *</type><name>pvt</name> <init>= <expr><name><name>id</name>-&gt;<name>fsap_data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>new_pvt</name>-&gt;<name>node_id</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>pvt</name>-&gt;<name>node_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_pvt</name>-&gt;<name>copy_id</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>pvt</name>-&gt;<name>copy_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_pvt</name>-&gt;<name>txn_id</name></name> = <name><name>pvt</name>-&gt;<name>txn_id</name></name> ? <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>pvt</name>-&gt;<name>txn_id</name></name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_pvt</name>-&gt;<name>rev</name></name> = <name><name>pvt</name>-&gt;<name>rev</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_pvt</name>-&gt;<name>offset</name></name> = <name><name>pvt</name>-&gt;<name>offset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_id</name>-&gt;<name>vtable</name></name> = &amp;<name>id_vtable</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_id</name>-&gt;<name>fsap_data</name></name> = <name>new_pvt</name></expr>;</expr_stmt>
<return>return <expr><name>new_id</name></expr>;</return>
}</block></function>
<function><type><name>svn_fs_id_t</name> *</type>
<name>svn_fs_fs__id_parse</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_id_t</name> *</type><name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>id_private_t</name> *</type><name>pvt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>data_copy</name></decl>, *<decl><type ref="prev"/><name>str</name></decl>, *<decl><type ref="prev"/><name>last_str</name></decl>;</decl_stmt>
<expr_stmt><expr><name>data_copy</name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>id</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>id</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pvt</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>pvt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name>-&gt;<name>vtable</name></name> = &amp;<name>id_vtable</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>id</name>-&gt;<name>fsap_data</name></name> = <name>pvt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> = <call><name>apr_strtok</name><argument_list>(<argument><expr><name>data_copy</name></expr></argument>, <argument><expr>"."</expr></argument>, <argument><expr>&amp;<name>last_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>str</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>pvt</name>-&gt;<name>node_id</name></name> = <name>str</name></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> = <call><name>apr_strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>"."</expr></argument>, <argument><expr>&amp;<name>last_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>str</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>pvt</name>-&gt;<name>copy_id</name></name> = <name>str</name></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> = <call><name>apr_strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>"."</expr></argument>, <argument><expr>&amp;<name>last_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>str</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>str</name><index>[<expr>0</expr>]</index></name> == 'r'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>pvt</name>-&gt;<name>txn_id</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> = <call><name>apr_strtok</name><argument_list>(<argument><expr><name>str</name> + 1</expr></argument>, <argument><expr>"/"</expr></argument>, <argument><expr>&amp;<name>last_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>str</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>pvt</name>-&gt;<name>rev</name></name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> = <call><name>apr_strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>"/"</expr></argument>, <argument><expr>&amp;<name>last_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>str</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>pvt</name>-&gt;<name>offset</name></name> = <call><name>apr_atoi64</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>str</name><index>[<expr>0</expr>]</index></name> == 't'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>pvt</name>-&gt;<name>txn_id</name></name> = <name>str</name> + 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>pvt</name>-&gt;<name>rev</name></name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pvt</name>-&gt;<name>offset</name></name> = -1</expr>;</expr_stmt>
}</block></then> <else>else
<return>return <expr><name>NULL</name></expr>;</return></else></if></else></if>
<return>return <expr><name>id</name></expr>;</return>
}</block></function>
</unit>
