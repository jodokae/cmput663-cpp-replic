<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/libsvn_subr/utf_validate.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utf_impl.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>octet_category</name><index>[<expr>256</expr>]</index></name> <init>= <expr><block>{
<expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>,
<expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>,
<expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>,
<expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>,
<expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>,
<expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>,
<expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>,
<expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>,
<expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>, <expr>1</expr>,
<expr>2</expr>, <expr>2</expr>, <expr>2</expr>, <expr>2</expr>, <expr>2</expr>, <expr>2</expr>, <expr>2</expr>, <expr>2</expr>, <expr>2</expr>, <expr>2</expr>, <expr>2</expr>, <expr>2</expr>, <expr>2</expr>, <expr>2</expr>, <expr>2</expr>, <expr>2</expr>,
<expr>3</expr>, <expr>3</expr>, <expr>3</expr>, <expr>3</expr>, <expr>3</expr>, <expr>3</expr>, <expr>3</expr>, <expr>3</expr>, <expr>3</expr>, <expr>3</expr>, <expr>3</expr>, <expr>3</expr>, <expr>3</expr>, <expr>3</expr>, <expr>3</expr>, <expr>3</expr>,
<expr>3</expr>, <expr>3</expr>, <expr>3</expr>, <expr>3</expr>, <expr>3</expr>, <expr>3</expr>, <expr>3</expr>, <expr>3</expr>, <expr>3</expr>, <expr>3</expr>, <expr>3</expr>, <expr>3</expr>, <expr>3</expr>, <expr>3</expr>, <expr>3</expr>, <expr>3</expr>,
<expr>4</expr>, <expr>4</expr>,
<expr>5</expr>, <expr>5</expr>, <expr>5</expr>, <expr>5</expr>, <expr>5</expr>, <expr>5</expr>, <expr>5</expr>, <expr>5</expr>, <expr>5</expr>, <expr>5</expr>, <expr>5</expr>, <expr>5</expr>, <expr>5</expr>, <expr>5</expr>,
<expr>5</expr>, <expr>5</expr>, <expr>5</expr>, <expr>5</expr>, <expr>5</expr>, <expr>5</expr>, <expr>5</expr>, <expr>5</expr>, <expr>5</expr>, <expr>5</expr>, <expr>5</expr>, <expr>5</expr>, <expr>5</expr>, <expr>5</expr>, <expr>5</expr>, <expr>5</expr>,
<expr>6</expr>,
<expr>7</expr>, <expr>7</expr>, <expr>7</expr>, <expr>7</expr>, <expr>7</expr>, <expr>7</expr>, <expr>7</expr>, <expr>7</expr>, <expr>7</expr>, <expr>7</expr>, <expr>7</expr>, <expr>7</expr>,
<expr>8</expr>,
<expr>9</expr>, <expr>9</expr>,
<expr>10</expr>,
<expr>11</expr>, <expr>11</expr>, <expr>11</expr>,
<expr>12</expr>,
<expr>13</expr>, <expr>13</expr>, <expr>13</expr>, <expr>13</expr>, <expr>13</expr>, <expr>13</expr>, <expr>13</expr>, <expr>13</expr>, <expr>13</expr>, <expr>13</expr>, <expr>13</expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSM_START</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSM_80BF</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSM_A0BF</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSM_80BF80BF</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSM_809F</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSM_90BF</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSM_80BF80BF80BF</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSM_808F</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FSM_ERROR</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>machine</name> <index>[<expr>9</expr>]</index><index>[<expr>14</expr>]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><name>FSM_START</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_80BF</name></expr>,
<expr><name>FSM_A0BF</name></expr>,
<expr><name>FSM_80BF80BF</name></expr>,
<expr><name>FSM_809F</name></expr>,
<expr><name>FSM_80BF80BF</name></expr>,
<expr><name>FSM_90BF</name></expr>,
<expr><name>FSM_80BF80BF80BF</name></expr>,
<expr><name>FSM_808F</name></expr>,
<expr><name>FSM_ERROR</name></expr>
}</block></expr>,
<expr><block>{
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_START</name></expr>,
<expr><name>FSM_START</name></expr>,
<expr><name>FSM_START</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>
}</block></expr>,
<expr><block>{
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_80BF</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>
}</block></expr>,
<expr><block>{
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_80BF</name></expr>,
<expr><name>FSM_80BF</name></expr>,
<expr><name>FSM_80BF</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>
}</block></expr>,
<expr><block>{
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_80BF</name></expr>,
<expr><name>FSM_80BF</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>
}</block></expr>,
<expr><block>{
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_80BF80BF</name></expr>,
<expr><name>FSM_80BF80BF</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>
}</block></expr>,
<expr><block>{
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_80BF80BF</name></expr>,
<expr><name>FSM_80BF80BF</name></expr>,
<expr><name>FSM_80BF80BF</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>
}</block></expr>,
<expr><block>{
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_80BF80BF</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>
}</block></expr>,
<expr><block>{
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>,
<expr><name>FSM_ERROR</name></expr>
}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_utf__last_valid</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>start</name> <init>= <expr><name>data</name></expr></init>, *<name>end</name> <init>= <expr><name>data</name> + <name>len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>state</name> <init>= <expr><name>FSM_START</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>data</name> &lt; <name>end</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>octet</name> <init>= <expr>*<name>data</name>++</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>category</name> <init>= <expr><name><name>octet_category</name><index>[<expr><name>octet</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>state</name> = <name><name>machine</name><index>[<expr><name>state</name></expr>]</index><index>[<expr><name>category</name></expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>state</name> == <name>FSM_START</name></expr>)</condition><then>
<expr_stmt><expr><name>start</name> = <name>data</name></expr>;</expr_stmt></then></if>
}</block></while>
<return>return <expr><name>start</name></expr>;</return>
}</block></function>
<function><type><name>svn_boolean_t</name></type>
<name>svn_utf__cstring_is_valid</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>state</name> <init>= <expr><name>FSM_START</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr>*<name>data</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>octet</name> <init>= <expr>*<name>data</name>++</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>category</name> <init>= <expr><name><name>octet_category</name><index>[<expr><name>octet</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>state</name> = <name><name>machine</name><index>[<expr><name>state</name></expr>]</index><index>[<expr><name>category</name></expr>]</index></name></expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>state</name> == <name>FSM_START</name> ? <name>TRUE</name> : <name>FALSE</name></expr>;</return>
}</block></function>
<function><type><name>svn_boolean_t</name></type>
<name>svn_utf__is_valid</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>end</name> <init>= <expr><name>data</name> + <name>len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>state</name> <init>= <expr><name>FSM_START</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>data</name> &lt; <name>end</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>octet</name> <init>= <expr>*<name>data</name>++</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>category</name> <init>= <expr><name><name>octet_category</name><index>[<expr><name>octet</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>state</name> = <name><name>machine</name><index>[<expr><name>state</name></expr>]</index><index>[<expr><name>category</name></expr>]</index></name></expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>state</name> == <name>FSM_START</name> ? <name>TRUE</name> : <name>FALSE</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_utf__last_valid2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>start</name> <init>= <expr><name>data</name></expr></init>, *<name>end</name> <init>= <expr><name>data</name> + <name>len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>state</name> <init>= <expr><name>FSM_START</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>data</name> &lt; <name>end</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>octet</name> <init>= <expr>*<name>data</name>++</expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>state</name></expr>)</condition> <block>{
<case>case <expr><name>FSM_START</name></expr>:
<if>if <condition>(<expr><name>octet</name> &lt;= 0x7F</expr>)</condition><then>
<break>break;</break></then>
<else>else <if>if <condition>(<expr><name>octet</name> &lt;= 0xC1</expr>)</condition><then>
<expr_stmt><expr><name>state</name> = <name>FSM_ERROR</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>octet</name> &lt;= 0xDF</expr>)</condition><then>
<expr_stmt><expr><name>state</name> = <name>FSM_80BF</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>octet</name> == 0xE0</expr>)</condition><then>
<expr_stmt><expr><name>state</name> = <name>FSM_A0BF</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>octet</name> &lt;= 0xEC</expr>)</condition><then>
<expr_stmt><expr><name>state</name> = <name>FSM_80BF80BF</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>octet</name> == 0xED</expr>)</condition><then>
<expr_stmt><expr><name>state</name> = <name>FSM_809F</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>octet</name> &lt;= 0xEF</expr>)</condition><then>
<expr_stmt><expr><name>state</name> = <name>FSM_80BF80BF</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>octet</name> == 0xF0</expr>)</condition><then>
<expr_stmt><expr><name>state</name> = <name>FSM_90BF</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>octet</name> &lt;= 0xF3</expr>)</condition><then>
<expr_stmt><expr><name>state</name> = <name>FSM_80BF80BF80BF</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>octet</name> &lt;= 0xF4</expr>)</condition><then>
<expr_stmt><expr><name>state</name> = <name>FSM_808F</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>state</name> = <name>FSM_ERROR</name></expr>;</expr_stmt></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
<break>break;</break>
</case><case>case <expr><name>FSM_80BF</name></expr>:
<if>if <condition>(<expr><name>octet</name> &gt;= 0x80 &amp;&amp; <name>octet</name> &lt;= 0xBF</expr>)</condition><then>
<expr_stmt><expr><name>state</name> = <name>FSM_START</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>state</name> = <name>FSM_ERROR</name></expr>;</expr_stmt></else></if>
<break>break;</break>
</case><case>case <expr><name>FSM_A0BF</name></expr>:
<if>if <condition>(<expr><name>octet</name> &gt;= 0xA0 &amp;&amp; <name>octet</name> &lt;= 0xBF</expr>)</condition><then>
<expr_stmt><expr><name>state</name> = <name>FSM_80BF</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>state</name> = <name>FSM_ERROR</name></expr>;</expr_stmt></else></if>
<break>break;</break>
</case><case>case <expr><name>FSM_80BF80BF</name></expr>:
<if>if <condition>(<expr><name>octet</name> &gt;= 0x80 &amp;&amp; <name>octet</name> &lt;= 0xBF</expr>)</condition><then>
<expr_stmt><expr><name>state</name> = <name>FSM_80BF</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>state</name> = <name>FSM_ERROR</name></expr>;</expr_stmt></else></if>
<break>break;</break>
</case><case>case <expr><name>FSM_809F</name></expr>:
<if>if <condition>(<expr><name>octet</name> &gt;= 0x80 &amp;&amp; <name>octet</name> &lt;= 0x9F</expr>)</condition><then>
<expr_stmt><expr><name>state</name> = <name>FSM_80BF</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>state</name> = <name>FSM_ERROR</name></expr>;</expr_stmt></else></if>
<break>break;</break>
</case><case>case <expr><name>FSM_90BF</name></expr>:
<if>if <condition>(<expr><name>octet</name> &gt;= 0x90 &amp;&amp; <name>octet</name> &lt;= 0xBF</expr>)</condition><then>
<expr_stmt><expr><name>state</name> = <name>FSM_80BF80BF</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>state</name> = <name>FSM_ERROR</name></expr>;</expr_stmt></else></if>
<break>break;</break>
</case><case>case <expr><name>FSM_80BF80BF80BF</name></expr>:
<if>if <condition>(<expr><name>octet</name> &gt;= 0x80 &amp;&amp; <name>octet</name> &lt;= 0xBF</expr>)</condition><then>
<expr_stmt><expr><name>state</name> = <name>FSM_80BF80BF</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>state</name> = <name>FSM_ERROR</name></expr>;</expr_stmt></else></if>
<break>break;</break>
</case><case>case <expr><name>FSM_808F</name></expr>:
<if>if <condition>(<expr><name>octet</name> &gt;= 0x80 &amp;&amp; <name>octet</name> &lt;= 0x8F</expr>)</condition><then>
<expr_stmt><expr><name>state</name> = <name>FSM_80BF80BF</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>state</name> = <name>FSM_ERROR</name></expr>;</expr_stmt></else></if>
<break>break;</break>
</case><default>default:
</default><case>case <expr><name>FSM_ERROR</name></expr>:
<return>return <expr><name>start</name></expr>;</return>
</case>}</block></switch>
<if>if <condition>(<expr><name>state</name> == <name>FSM_START</name></expr>)</condition><then>
<expr_stmt><expr><name>start</name> = <name>data</name></expr>;</expr_stmt></then></if>
}</block></while>
<return>return <expr><name>start</name></expr>;</return>
}</block></function>
</unit>
