<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/libsvn_subr/pool.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_general.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_POOL_DEBUG</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>SVN_FILE_LINE_UNDEFINED</name><index>[]</index></name> <init>= <expr>"svn:&lt;undefined&gt;"</expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>abort_on_pool_failure</name><parameter_list>(<param><decl><type><name>int</name></type> <name>retcode</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Out of memory - terminating application.\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_POOL_DEBUG</name></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>svn_pool_create_ex</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<name>APR_POOL_DEBUG</name></expr></cpp:if>
<function><type><name>apr_pool_t</name> *</type>
<name>svn_pool_create_ex</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>parent_pool</name></decl></param>, <param><decl><type><name>apr_allocator_t</name> *</type><name>allocator</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_pool_create_ex</name><argument_list>(<argument><expr>&amp;<name>pool</name></expr></argument>, <argument><expr><name>parent_pool</name></expr></argument>, <argument><expr><name>abort_on_pool_failure</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>pool</name></expr>;</return>
}</block></function>
<function><type><name>apr_pool_t</name> *</type>
<name>svn_pool_create_ex_debug</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>apr_allocator_t</name> *</type><name>allocator</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file_line</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_pool_create_ex</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>apr_pool_t</name> *</type>
<name>svn_pool_create_ex_debug</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>parent_pool</name></decl></param>, <param><decl><type><name>apr_allocator_t</name> *</type><name>allocator</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file_line</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_pool_create_ex_debug</name><argument_list>(<argument><expr>&amp;<name>pool</name></expr></argument>, <argument><expr><name>parent_pool</name></expr></argument>, <argument><expr><name>abort_on_pool_failure</name></expr></argument>,
<argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>file_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>pool</name></expr>;</return>
}</block></function>
<function><type><name>apr_pool_t</name> *</type>
<name>svn_pool_create_ex</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>apr_allocator_t</name> *</type><name>allocator</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_pool_create_ex_debug</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>SVN_FILE_LINE_UNDEFINED</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
