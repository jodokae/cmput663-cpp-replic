<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/libsvn_subr/ssl_client_cert_pw_providers.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_auth.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_config.h"</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>ssl_client_cert_pw_file_first_credentials</name><parameter_list>(<param><decl><type><name>void</name> **</type><name>credentials_p</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>iter_baton</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>provider_baton</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>parameters</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realmstring</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_config_t</name> *</type><name>cfg</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>parameters</name></expr></argument>,
<argument><expr><name>SVN_AUTH_PARAM_CONFIG</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>server_group</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>parameters</name></expr></argument>,
<argument><expr><name>SVN_AUTH_PARAM_SERVER_GROUP</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>password</name> <init>=
<expr><call><name>svn_config_get_server_setting</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>server_group</name></expr></argument>,
<argument><expr><name>SVN_CONFIG_OPTION_SSL_CLIENT_CERT_PASSWORD</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>password</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_auth_cred_ssl_client_cert_pw_t</name> *</type><name>cred</name>
<init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>cred</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cred</name>-&gt;<name>password</name></name> = <name>password</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cred</name>-&gt;<name>may_save</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>credentials_p</name> = <name>cred</name></expr>;</expr_stmt>
}</block></then> <else>else <expr_stmt><expr>*<name>credentials_p</name> = <name>NULL</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr>*<name>iter_baton</name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_auth_provider_t</name></type> <name>ssl_client_cert_pw_file_provider</name> <init>= <expr><block>{
<expr><name>SVN_AUTH_CRED_SSL_CLIENT_CERT_PW</name></expr>,
<expr><name>ssl_client_cert_pw_file_first_credentials</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>svn_auth_get_ssl_client_cert_pw_file_provider</name>
<parameter_list>(<param><decl><type><name>svn_auth_provider_object_t</name> **</type><name>provider</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_auth_provider_object_t</name> *</type><name>po</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>po</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>po</name>-&gt;<name>vtable</name></name> = &amp;<name>ssl_client_cert_pw_file_provider</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>provider</name> = <name>po</name></expr>;</expr_stmt>
}</block></function>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>svn_auth_ssl_client_cert_pw_prompt_func_t</name></type> <name>prompt_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>prompt_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retry_limit</name></decl>;</decl_stmt>
}</block></struct></type> <name>ssl_client_cert_pw_prompt_provider_baton_t</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>ssl_client_cert_pw_prompt_provider_baton_t</name> *</type><name>pb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realmstring</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retries</name></decl>;</decl_stmt>
}</block></struct></type> <name>ssl_client_cert_pw_prompt_iter_baton_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>ssl_client_cert_pw_prompt_first_cred</name><parameter_list>(<param><decl><type><name>void</name> **</type><name>credentials_p</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>iter_baton</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>provider_baton</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>parameters</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realmstring</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ssl_client_cert_pw_prompt_provider_baton_t</name> *</type><name>pb</name> <init>= <expr><name>provider_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssl_client_cert_pw_prompt_iter_baton_t</name> *</type><name>ib</name> <init>=
<expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>ib</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>no_auth_cache</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>parameters</name></expr></argument>,
<argument><expr><name>SVN_AUTH_PARAM_NO_AUTH_CACHE</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>pb</name>-&gt;<name>prompt_func</name></name><argument_list>(<argument><expr>(<name>svn_auth_cred_ssl_client_cert_pw_t</name> **)
<name>credentials_p</name></expr></argument>, <argument><expr><name><name>pb</name>-&gt;<name>prompt_baton</name></name></expr></argument>, <argument><expr><name>realmstring</name></expr></argument>,
<argument><expr>! <name>no_auth_cache</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ib</name>-&gt;<name>pb</name></name> = <name>pb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ib</name>-&gt;<name>realmstring</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>realmstring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ib</name>-&gt;<name>retries</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr>*<name>iter_baton</name> = <name>ib</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>ssl_client_cert_pw_prompt_next_cred</name><parameter_list>(<param><decl><type><name>void</name> **</type><name>credentials_p</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>iter_baton</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>provider_baton</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>parameters</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realmstring</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ssl_client_cert_pw_prompt_iter_baton_t</name> *</type><name>ib</name> <init>= <expr><name>iter_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>no_auth_cache</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>parameters</name></expr></argument>,
<argument><expr><name>SVN_AUTH_PARAM_NO_AUTH_CACHE</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>ib</name>-&gt;<name>retries</name></name> &gt;= <name><name>ib</name>-&gt;<name>pb</name>-&gt;<name>retry_limit</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>credentials_p</name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>ib</name>-&gt;<name>retries</name></name>++</expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>ib</name>-&gt;<name>pb</name>-&gt;<name>prompt_func</name></name><argument_list>(<argument><expr>(<name>svn_auth_cred_ssl_client_cert_pw_t</name> **)
<name>credentials_p</name></expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>pb</name>-&gt;<name>prompt_baton</name></name></expr></argument>,
<argument><expr><name><name>ib</name>-&gt;<name>realmstring</name></name></expr></argument>, <argument><expr>! <name>no_auth_cache</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_auth_provider_t</name></type> <name>client_cert_pw_prompt_provider</name> <init>= <expr><block>{
<expr><name>SVN_AUTH_CRED_SSL_CLIENT_CERT_PW</name></expr>,
<expr><name>ssl_client_cert_pw_prompt_first_cred</name></expr>,
<expr><name>ssl_client_cert_pw_prompt_next_cred</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>svn_auth_get_ssl_client_cert_pw_prompt_provider</name>
<parameter_list>(<param><decl><type><name>svn_auth_provider_object_t</name> **</type><name>provider</name></decl></param>,
<param><decl><type><name>svn_auth_ssl_client_cert_pw_prompt_func_t</name></type> <name>prompt_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>prompt_baton</name></decl></param>,
<param><decl><type><name>int</name></type> <name>retry_limit</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_auth_provider_object_t</name> *</type><name>po</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>po</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssl_client_cert_pw_prompt_provider_baton_t</name> *</type><name>pb</name> <init>=
<expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>pb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pb</name>-&gt;<name>prompt_func</name></name> = <name>prompt_func</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pb</name>-&gt;<name>prompt_baton</name></name> = <name>prompt_baton</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pb</name>-&gt;<name>retry_limit</name></name> = <name>retry_limit</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>po</name>-&gt;<name>vtable</name></name> = &amp;<name>client_cert_pw_prompt_provider</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>po</name>-&gt;<name>provider_baton</name></name> = <name>pb</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>provider</name> = <name>po</name></expr>;</expr_stmt>
}</block></function>
</unit>
