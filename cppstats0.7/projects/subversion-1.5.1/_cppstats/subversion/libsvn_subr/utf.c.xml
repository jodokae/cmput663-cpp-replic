<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/libsvn_subr/utf.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_xlate.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_ctype.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_utf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utf_impl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"win32_xlate.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_UTF_NTOU_XLATE_HANDLE</name></cpp:macro> <cpp:value>"svn-utf-ntou-xlate-handle"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_UTF_UTON_XLATE_HANDLE</name></cpp:macro> <cpp:value>"svn-utf-uton-xlate-handle"</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>AS400</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_APR_UTF8_CHARSET</name></cpp:macro> <cpp:value>"UTF-8"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_APR_UTF8_CHARSET</name></cpp:macro> <cpp:value>(const char*)1208</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_thread_mutex_t</name> *</type><name>xlate_handle_mutex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><struct>struct <name>xlate_handle_node_t</name> <block>{
<decl_stmt><decl><type><name>apr_xlate_t</name> *</type><name>handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>valid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>frompage</name></decl>, *<name>topage</name>;</decl_stmt>
<decl_stmt><decl><type>struct <name>xlate_handle_node_t</name> *</type><name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>xlate_handle_node_t</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_hash_t</name> *</type><name>xlate_handle_hash</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type>
<name>xlate_cleanup</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<expr_stmt><expr><call><name>apr_thread_mutex_destroy</name><argument_list>(<argument><expr><name>xlate_handle_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>xlate_handle_mutex</name> = <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>xlate_handle_hash</name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type>
<name>xlate_handle_node_cleanup</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>xlate_handle_node_t</name> *</type><name>node</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>node</name>-&gt;<name>valid</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>svn_utf_initialize</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<decl_stmt><decl><type><name>apr_thread_mutex_t</name> *</type><name>mutex</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<name>xlate_handle_hash</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<if>if <condition>(<expr><call><name>apr_thread_mutex_create</name><argument_list>(<argument><expr>&amp;<name>mutex</name></expr></argument>, <argument><expr><name>APR_THREAD_MUTEX_DEFAULT</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call>
== <name>APR_SUCCESS</name></expr>)</condition><then>
<expr_stmt><expr><name>xlate_handle_mutex</name> = <name>mutex</name></expr>;</expr_stmt></then>
<else>else
<return>return;</return></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>xlate_handle_hash</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>xlate_cleanup</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name>*</type>
<name>get_xlate_key</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>topage</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>frompage</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>AS400</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>frompage</name> == <name>SVN_APR_LOCALE_CHARSET</name></expr>)</condition><then>
<expr_stmt><expr><name>frompage</name> = "APR_LOCALE_CHARSET"</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>frompage</name> == <name>SVN_APR_DEFAULT_CHARSET</name></expr>)</condition><then>
<expr_stmt><expr><name>frompage</name> = "APR_DEFAULT_CHARSET"</expr>;</expr_stmt></then></if></else></if>
<if>if <condition>(<expr><name>topage</name> == <name>SVN_APR_LOCALE_CHARSET</name></expr>)</condition><then>
<expr_stmt><expr><name>topage</name> = "APR_LOCALE_CHARSET"</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>topage</name> == <name>SVN_APR_DEFAULT_CHARSET</name></expr>)</condition><then>
<expr_stmt><expr><name>topage</name> = "APR_DEFAULT_CHARSET"</expr>;</expr_stmt></then></if></else></if>
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"svn-utf-"</expr></argument>, <argument><expr><name>frompage</name></expr></argument>, <argument><expr>"to"</expr></argument>, <argument><expr><name>topage</name></expr></argument>,
<argument><expr>"-xlate-handle"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"svn-utf-%dto%d-xlate-handle"</expr></argument>, <argument><expr>(<name>int</name>)<name>frompage</name></expr></argument>,
<argument><expr>(<name>int</name>)<name>topage</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>get_xlate_handle_node</name><parameter_list>(<param><decl><type><name>xlate_handle_node_t</name> **</type><name>ret</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>topage</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>frompage</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>userdata_key</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>xlate_handle_node_t</name> **</type><name>old_node_p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xlate_handle_node_t</name> *</type><name>old_node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>apr_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_xlate_t</name> *</type><name>handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>userdata_key</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>xlate_handle_hash</name></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<expr_stmt><expr><name>apr_err</name> = <call><name>apr_thread_mutex_lock</name><argument_list>(<argument><expr><name>xlate_handle_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>apr_err</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Can't lock charset translation mutex"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>old_node_p</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>xlate_handle_hash</name></expr></argument>, <argument><expr><name>userdata_key</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>old_node_p</name></expr>)</condition><then>
<expr_stmt><expr><name>old_node</name> = *<name>old_node_p</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>old_node</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>old_node</name>-&gt;<name>valid</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>old_node_p</name> = <name><name>old_node</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>old_node</name>-&gt;<name>next</name></name> = <name>NULL</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<expr_stmt><expr><name>apr_err</name> = <call><name>apr_thread_mutex_unlock</name><argument_list>(<argument><expr><name>xlate_handle_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>apr_err</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Can't unlock charset "
"translation mutex"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr>*<name>ret</name> = <name>old_node</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
}</block></then></if>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_pool_userdata_get</name><argument_list>(<argument><expr>&amp;<name>p</name></expr></argument>, <argument><expr><name>userdata_key</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>old_node</name> = <name>p</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>old_node</name> &amp;&amp; <name><name>old_node</name>-&gt;<name>valid</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>ret</name> = <name>old_node</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
}</block></else></if>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>AS400</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>frompage</name> != <name>SVN_APR_DEFAULT_CHARSET</name>
&amp;&amp; <name>topage</name> != <name>SVN_APR_DEFAULT_CHARSET</name>
&amp;&amp; (<name>frompage</name> != <name>SVN_APR_LOCALE_CHARSET</name>
|| <name>topage</name> != <name>SVN_APR_LOCALE_CHARSET</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>userdata_key</name> &amp;&amp; <name>xlate_handle_hash</name></expr>)</condition><then>
<expr_stmt><expr><name>pool</name> = <call><name>apr_hash_pool_get</name><argument_list>(<argument><expr><name>xlate_handle_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>apr_err</name> = <call><name>svn_subr__win32_xlate_open</name><argument_list>(<argument><expr>(<name>win32_xlate_t</name> **)&amp;<name>handle</name></expr></argument>, <argument><expr><name>topage</name></expr></argument>,
<argument><expr><name>frompage</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AS400</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<expr_stmt><expr><name>apr_err</name> = <call><name>apr_xlate_open</name><argument_list>(<argument><expr>&amp;<name>handle</name></expr></argument>, <argument><expr>(<name>int</name>)<name>topage</name></expr></argument>, <argument><expr>(<name>int</name>)<name>frompage</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>apr_err</name> = <call><name>apr_xlate_open</name><argument_list>(<argument><expr>&amp;<name>handle</name></expr></argument>, <argument><expr><name>topage</name></expr></argument>, <argument><expr><name>frompage</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_EINVAL</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>)</argument_list></call> || <call><name>APR_STATUS_IS_ENOTIMPL</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>handle</name> = <name>NULL</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>apr_err</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>errstr</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>AS400</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>frompage</name> == <name>SVN_APR_LOCALE_CHARSET</name></expr>)</condition><then>
<expr_stmt><expr><name>errstr</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Can't create a character converter from "
"native encoding to '%s'"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>topage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>topage</name> == <name>SVN_APR_LOCALE_CHARSET</name></expr>)</condition><then>
<expr_stmt><expr><name>errstr</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Can't create a character converter from "
"'%s' to native encoding"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>frompage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>errstr</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Can't create a character converter from "
"'%s' to '%s'"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>frompage</name></expr></argument>, <argument><expr><name>topage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>errstr</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Can't create a character converter from "
"'%i' to '%i'"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>frompage</name></expr></argument>, <argument><expr><name>topage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>err</name> = <call><name>svn_error_create</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>errstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
}</block></then></if></else></if>
<expr_stmt><expr>*<name>ret</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xlate_handle_node_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>ret</name>)-&gt;<name>handle</name></name> = <name>handle</name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>ret</name>)-&gt;<name>valid</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>ret</name>)-&gt;<name>frompage</name></name> = ((<name>frompage</name> != <name>SVN_APR_LOCALE_CHARSET</name>)
? <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>frompage</name></expr></argument>)</argument_list></call> : <name>frompage</name>)</expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>ret</name>)-&gt;<name>topage</name></name> = ((<name>topage</name> != <name>SVN_APR_LOCALE_CHARSET</name>)
? <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>topage</name></expr></argument>)</argument_list></call> : <name>topage</name>)</expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>ret</name>)-&gt;<name>next</name></name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>handle</name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>*<name>ret</name></expr></argument>, <argument><expr><name>xlate_handle_node_cleanup</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<label><name>cleanup</name>:</label>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<if>if <condition>(<expr><name>userdata_key</name> &amp;&amp; <name>xlate_handle_hash</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>unlock_err</name> <init>= <expr><call><name>apr_thread_mutex_unlock</name><argument_list>(<argument><expr><name>xlate_handle_mutex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>unlock_err</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>unlock_err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Can't unlock charset translation mutex"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>put_xlate_handle_node</name><parameter_list>(<param><decl><type><name>xlate_handle_node_t</name> *</type><name>node</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>userdata_key</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>node</name>-&gt;<name>next</name></name> == <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>userdata_key</name></expr>)</condition><then>
<return>return;</return></then></if>
<if>if <condition>(<expr><name>xlate_handle_hash</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>xlate_handle_node_t</name> **</type><name>node_p</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<if>if <condition>(<expr><call><name>apr_thread_mutex_lock</name><argument_list>(<argument><expr><name>xlate_handle_mutex</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>node_p</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>xlate_handle_hash</name></expr></argument>, <argument><expr><name>userdata_key</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>node_p</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>userdata_key</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><call><name>apr_hash_pool_get</name><argument_list>(<argument><expr><name>xlate_handle_hash</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>userdata_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>node_p</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><call><name>apr_hash_pool_get</name><argument_list>(<argument><expr><name>xlate_handle_hash</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>node_p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>node_p</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>xlate_handle_hash</name></expr></argument>, <argument><expr><name>userdata_key</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>node_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>node</name>-&gt;<name>next</name></name> = *<name>node_p</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>node_p</name> = <name>node</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<if>if <condition>(<expr><call><name>apr_thread_mutex_unlock</name><argument_list>(<argument><expr><name>xlate_handle_mutex</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>apr_pool_userdata_set</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>userdata_key</name></expr></argument>, <argument><expr><name>apr_pool_cleanup_null</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>get_ntou_xlate_handle_node</name><parameter_list>(<param><decl><type><name>xlate_handle_node_t</name> **</type><name>ret</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>get_xlate_handle_node</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>SVN_APR_UTF8_CHARSET</name></expr></argument>,
<argument><expr><name>SVN_APR_LOCALE_CHARSET</name></expr></argument>,
<argument><expr><name>SVN_UTF_NTOU_XLATE_HANDLE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>get_uton_xlate_handle_node</name><parameter_list>(<param><decl><type><name>xlate_handle_node_t</name> **</type><name>ret</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>get_xlate_handle_node</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>SVN_APR_LOCALE_CHARSET</name></expr></argument>,
<argument><expr><name>SVN_APR_UTF8_CHARSET</name></expr></argument>,
<argument><expr><name>SVN_UTF_UTON_XLATE_HANDLE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>fuzzy_escape</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_orig</name> <init>= <expr><name>src</name></expr></init>, *<name>src_end</name> <init>= <expr><name>src</name> + <name>len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>new_len</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>new</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>new_orig</name></decl>;</decl_stmt>
<while>while <condition>(<expr><name>src</name> &lt; <name>src_end</name></expr>)</condition> <block>{
<if>if <condition>(<expr>! <call><name>svn_ctype_isascii</name><argument_list>(<argument><expr>*<name>src</name></expr></argument>)</argument_list></call> || *<name>src</name> == '\0'</expr>)</condition><then>
<expr_stmt><expr><name>new_len</name> += 5</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>new_len</name> += 1</expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>src</name>++</expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name>new</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>new_len</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new_orig</name> = <name>new</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>src_orig</name> &lt; <name>src_end</name></expr>)</condition> <block>{
<if>if <condition>(<expr>! <call><name>svn_ctype_isascii</name><argument_list>(<argument><expr>*<name>src_orig</name></expr></argument>)</argument_list></call> || <name>src_orig</name> == '\0'</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr>"?\\%03u"</expr></argument>, <argument><expr>(<name>unsigned</name> <name>char</name>) *<name>src_orig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new</name> += 5</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>new</name> = *<name>src_orig</name></expr>;</expr_stmt>
<expr_stmt><expr><name>new</name> += 1</expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>src_orig</name>++</expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr>*<name>new</name> = '\0'</expr>;</expr_stmt>
<return>return <expr><name>new_orig</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>convert_to_stringbuf</name><parameter_list>(<param><decl><type><name>xlate_handle_node_t</name> *</type><name>node</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_data</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>src_length</name></decl></param>,
<param><decl><type><name>svn_stringbuf_t</name> **</type><name>dest</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>apr_err</name></decl>;</decl_stmt>
<expr_stmt><expr><name>apr_err</name> = <call><name>svn_subr__win32_xlate_to_stringbuf</name><argument_list>(<argument><expr>(<name>win32_xlate_t</name> *) <name><name>node</name>-&gt;<name>handle</name></name></expr></argument>,
<argument><expr><name>src_data</name></expr></argument>, <argument><expr><name>src_length</name></expr></argument>,
<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>buflen</name> <init>= <expr><name>src_length</name> * 2</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>apr_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>srclen</name> <init>= <expr><name>src_length</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>destlen</name> <init>= <expr><name>buflen</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>destbuf</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>dest</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>destbuf</name> = <name>(*<name>dest</name>)-&gt;<name>data</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>src_length</name> == 0</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<do>do <block>{
<expr_stmt><expr><call><name>svn_stringbuf_ensure</name><argument_list>(<argument><expr>*<name>dest</name></expr></argument>, <argument><expr><name>buflen</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>destlen</name> = <name>buflen</name> - <name>(*<name>dest</name>)-&gt;<name>len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>apr_err</name> = <call><name>apr_xlate_conv_buffer</name><argument_list>(<argument><expr><name><name>node</name>-&gt;<name>handle</name></name></expr></argument>,
<argument><expr><name>src_data</name> + (<name>src_length</name> - <name>srclen</name>)</expr></argument>,
<argument><expr>&amp;<name>srclen</name></expr></argument>,
<argument><expr><name>(*<name>dest</name>)-&gt;<name>data</name></name> + <name>(*<name>dest</name>)-&gt;<name>len</name></name></expr></argument>,
<argument><expr>&amp;<name>destlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>dest</name>)-&gt;<name>len</name></name> += ((<name>buflen</name> - <name>(*<name>dest</name>)-&gt;<name>len</name></name>) - <name>destlen</name>)</expr>;</expr_stmt>
<expr_stmt><expr><name>buflen</name> += <name>srclen</name> * 3</expr>;</expr_stmt>
}</block> while <condition>(<expr><name>apr_err</name> == <name>APR_SUCCESS</name> &amp;&amp; <name>srclen</name> != 0</expr>)</condition>;</do>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>apr_err</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>errstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>AS400</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name><name>node</name>-&gt;<name>frompage</name></name> == <name>SVN_APR_LOCALE_CHARSET</name></expr>)</condition><then>
<expr_stmt><expr><name>errstr</name> = <call><name>apr_psprintf</name>
<argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Can't convert string from native encoding to '%s':"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>node</name>-&gt;<name>topage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>node</name>-&gt;<name>topage</name></name> == <name>SVN_APR_LOCALE_CHARSET</name></expr>)</condition><then>
<expr_stmt><expr><name>errstr</name> = <call><name>apr_psprintf</name>
<argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Can't convert string from '%s' to native encoding:"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>node</name>-&gt;<name>frompage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>errstr</name> = <call><name>apr_psprintf</name>
<argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Can't convert string from '%s' to '%s':"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>node</name>-&gt;<name>frompage</name></name></expr></argument>, <argument><expr><name><name>node</name>-&gt;<name>topage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>errstr</name> = <call><name>apr_psprintf</name>
<argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Can't convert string from CCSID '%i' to CCSID '%i'"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>node</name>-&gt;<name>frompage</name></name></expr></argument>, <argument><expr><name><name>node</name>-&gt;<name>topage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>err</name> = <call><name>svn_error_create</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>fuzzy_escape</name><argument_list>(<argument><expr><name>src_data</name></expr></argument>,
<argument><expr><name>src_length</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>errstr</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>(*<name>dest</name>)-&gt;<name>data</name></name><index>[<expr><name>(*<name>dest</name>)-&gt;<name>len</name></name></expr>]</index> = '\0'</expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>check_non_ascii</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data_start</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<for>for (<init>;</init> <condition><expr><name>len</name> &gt; 0</expr>;</condition> <incr><expr>--<name>len</name></expr>, <expr><name>data</name>++</expr></incr>) <block>{
<if>if <condition>(<expr>(! <call><name>apr_isascii</name><argument_list>(<argument><expr>*<name>data</name></expr></argument>)</argument_list></call>)
|| ((! <call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>data</name></expr></argument>)</argument_list></call>)
&amp;&amp; <call><name>apr_iscntrl</name><argument_list>(<argument><expr>*<name>data</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>data</name> - <name>data_start</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>error_data</name>
<init>= <expr><call><name>apr_pstrndup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>data_start</name></expr></argument>, <argument><expr>(<name>data</name> - <name>data_start</name>)</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>APR_EINVAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Safe data '%s' was followed by non-ASCII byte %d: "
"unable to convert to/from UTF-8"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>error_data</name></expr></argument>, <argument><expr>*((const <name>unsigned</name> <name>char</name> *) <name>data</name>)</expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>APR_EINVAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Non-ASCII character (code %d) detected, "
"and unable to convert to/from UTF-8"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>*((const <name>unsigned</name> <name>char</name> *) <name>data</name>)</expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
}</block></then></if>
}</block></for>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>invalid_utf8</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>last</name> <init>= <expr><call><name>svn_utf__last_valid</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>valid_txt</name> <init>= <expr>""</expr></init>, *<name>invalid_txt</name> <init>= <expr>""</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>valid</name></decl>, <decl><type ref="prev"/><name>invalid</name></decl>;</decl_stmt>
<expr_stmt><expr><name>valid</name> = <name>last</name> - <name>data</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>valid</name> &gt; 24</expr>)</condition><then>
<expr_stmt><expr><name>valid</name> = 24</expr>;</expr_stmt></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>valid</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
<expr_stmt><expr><name>valid_txt</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>valid_txt</name></expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>" %02x"</expr></argument>,
<argument><expr>(<name>unsigned</name> <name>char</name>)<name><name>last</name><index>[<expr><name>i</name>-<name>valid</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
<expr_stmt><expr><name>invalid</name> = <name>data</name> + <name>len</name> - <name>last</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>invalid</name> &gt; 4</expr>)</condition><then>
<expr_stmt><expr><name>invalid</name> = 4</expr>;</expr_stmt></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>invalid</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
<expr_stmt><expr><name>invalid_txt</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>invalid_txt</name></expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>" %02x"</expr></argument>,
<argument><expr>(<name>unsigned</name> <name>char</name>)<name><name>last</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>APR_EINVAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Valid UTF-8 data\n(hex:%s)\n"
"followed by invalid UTF-8 sequence\n(hex:%s)"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>valid_txt</name></expr></argument>, <argument><expr><name>invalid_txt</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>check_utf8</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>! <call><name>svn_utf__is_valid</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>invalid_utf8</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>check_cstring_utf8</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>! <call><name>svn_utf__cstring_is_valid</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>invalid_utf8</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_utf_stringbuf_to_utf8</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> **</type><name>dest</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_stringbuf_t</name> *</type><name>src</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>xlate_handle_node_t</name> *</type><name>node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_ntou_xlate_handle_node</name><argument_list>(<argument><expr>&amp;<name>node</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>node</name>-&gt;<name>handle</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>convert_to_stringbuf</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name><name>src</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>src</name>-&gt;<name>len</name></name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>err</name></expr>)</condition><then>
<expr_stmt><expr><name>err</name> = <call><name>check_utf8</name><argument_list>(<argument><expr><name>(*<name>dest</name>)-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>(*<name>dest</name>)-&gt;<name>len</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>err</name> = <call><name>check_non_ascii</name><argument_list>(<argument><expr><name><name>src</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>src</name>-&gt;<name>len</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>err</name></expr>)</condition><then>
<expr_stmt><expr>*<name>dest</name> = <call><name>svn_stringbuf_dup</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></else></if>
<expr_stmt><expr><call><name>put_xlate_handle_node</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>SVN_UTF_NTOU_XLATE_HANDLE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_utf_string_to_utf8</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> **</type><name>dest</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>src</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>destbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xlate_handle_node_t</name> *</type><name>node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_ntou_xlate_handle_node</name><argument_list>(<argument><expr>&amp;<name>node</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>node</name>-&gt;<name>handle</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>convert_to_stringbuf</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name><name>src</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>src</name>-&gt;<name>len</name></name></expr></argument>, <argument><expr>&amp;<name>destbuf</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>err</name></expr>)</condition><then>
<expr_stmt><expr><name>err</name> = <call><name>check_utf8</name><argument_list>(<argument><expr><name><name>destbuf</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>destbuf</name>-&gt;<name>len</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>! <name>err</name></expr>)</condition><then>
<expr_stmt><expr>*<name>dest</name> = <call><name>svn_string_create_from_buf</name><argument_list>(<argument><expr><name>destbuf</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>err</name> = <call><name>check_non_ascii</name><argument_list>(<argument><expr><name><name>src</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>src</name>-&gt;<name>len</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>err</name></expr>)</condition><then>
<expr_stmt><expr>*<name>dest</name> = <call><name>svn_string_dup</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></else></if>
<expr_stmt><expr><call><name>put_xlate_handle_node</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>SVN_UTF_NTOU_XLATE_HANDLE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>convert_cstring</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>dest</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src</name></decl></param>,
<param><decl><type><name>xlate_handle_node_t</name> *</type><name>node</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>node</name>-&gt;<name>handle</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>destbuf</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>convert_to_stringbuf</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>&amp;<name>destbuf</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>dest</name> = <name><name>destbuf</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_non_ascii</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>dest</name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_utf_cstring_to_utf8</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>dest</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>xlate_handle_node_t</name> *</type><name>node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_ntou_xlate_handle_node</name><argument_list>(<argument><expr>&amp;<name>node</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>convert_cstring</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_xlate_handle_node</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>SVN_UTF_NTOU_XLATE_HANDLE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_cstring_utf8</name><argument_list>(<argument><expr>*<name>dest</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_utf_cstring_to_utf8_ex2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>dest</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>frompage</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>xlate_handle_node_t</name> *</type><name>node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>convset_key</name> <init>= <expr><call><name>get_xlate_key</name><argument_list>(<argument><expr><name>SVN_APR_UTF8_CHARSET</name></expr></argument>, <argument><expr><name>frompage</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_xlate_handle_node</name><argument_list>(<argument><expr>&amp;<name>node</name></expr></argument>, <argument><expr><name>SVN_APR_UTF8_CHARSET</name></expr></argument>, <argument><expr><name>frompage</name></expr></argument>,
<argument><expr><name>convset_key</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>convert_cstring</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_xlate_handle_node</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>convset_key</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_cstring_utf8</name><argument_list>(<argument><expr>*<name>dest</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_utf_cstring_to_utf8_ex</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>dest</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>frompage</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>convset_key</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_utf_cstring_to_utf8_ex2</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>frompage</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_utf_stringbuf_from_utf8</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> **</type><name>dest</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_stringbuf_t</name> *</type><name>src</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>xlate_handle_node_t</name> *</type><name>node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_uton_xlate_handle_node</name><argument_list>(<argument><expr>&amp;<name>node</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>node</name>-&gt;<name>handle</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>check_utf8</name><argument_list>(<argument><expr><name><name>src</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>src</name>-&gt;<name>len</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>err</name></expr>)</condition><then>
<expr_stmt><expr><name>err</name> = <call><name>convert_to_stringbuf</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name><name>src</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>src</name>-&gt;<name>len</name></name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>err</name> = <call><name>check_non_ascii</name><argument_list>(<argument><expr><name><name>src</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>src</name>-&gt;<name>len</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>err</name></expr>)</condition><then>
<expr_stmt><expr>*<name>dest</name> = <call><name>svn_stringbuf_dup</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></else></if>
<expr_stmt><expr><call><name>put_xlate_handle_node</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>SVN_UTF_UTON_XLATE_HANDLE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_utf_string_from_utf8</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> **</type><name>dest</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>src</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>dbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xlate_handle_node_t</name> *</type><name>node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_uton_xlate_handle_node</name><argument_list>(<argument><expr>&amp;<name>node</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>node</name>-&gt;<name>handle</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>check_utf8</name><argument_list>(<argument><expr><name><name>src</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>src</name>-&gt;<name>len</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>err</name></expr>)</condition><then>
<expr_stmt><expr><name>err</name> = <call><name>convert_to_stringbuf</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name><name>src</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>src</name>-&gt;<name>len</name></name></expr></argument>,
<argument><expr>&amp;<name>dbuf</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>! <name>err</name></expr>)</condition><then>
<expr_stmt><expr>*<name>dest</name> = <call><name>svn_string_create_from_buf</name><argument_list>(<argument><expr><name>dbuf</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>err</name> = <call><name>check_non_ascii</name><argument_list>(<argument><expr><name><name>src</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>src</name>-&gt;<name>len</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>err</name></expr>)</condition><then>
<expr_stmt><expr>*<name>dest</name> = <call><name>svn_string_dup</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></else></if>
<expr_stmt><expr><call><name>put_xlate_handle_node</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>SVN_UTF_UTON_XLATE_HANDLE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_utf_cstring_from_utf8</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>dest</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>xlate_handle_node_t</name> *</type><name>node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_utf8</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_uton_xlate_handle_node</name><argument_list>(<argument><expr>&amp;<name>node</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>convert_cstring</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_xlate_handle_node</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>SVN_UTF_UTON_XLATE_HANDLE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_utf_cstring_from_utf8_ex2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>dest</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>topage</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>xlate_handle_node_t</name> *</type><name>node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>convset_key</name> <init>= <expr><call><name>get_xlate_key</name><argument_list>(<argument><expr><name>topage</name></expr></argument>, <argument><expr><name>SVN_APR_UTF8_CHARSET</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_utf8</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_xlate_handle_node</name><argument_list>(<argument><expr>&amp;<name>node</name></expr></argument>, <argument><expr><name>topage</name></expr></argument>, <argument><expr><name>SVN_APR_UTF8_CHARSET</name></expr></argument>,
<argument><expr><name>convset_key</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>convert_cstring</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_xlate_handle_node</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>convset_key</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_utf_cstring_from_utf8_ex</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>dest</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>topage</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>convset_key</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_utf_cstring_from_utf8_ex2</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>topage</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_utf__cstring_from_utf8_fuzzy</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><function_decl><type><name>svn_error_t</name> *</type>(*<name>convert_from_utf8</name>)
<parameter_list>(<param><decl><type><specifier>const</specifier></type> <name>char</name> **</decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>, <param><decl><type><name>apr_pool_t</name> *</type></decl></param>)</parameter_list></function_decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>escaped</name></decl>, *<decl><type ref="prev"/><name>converted</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><name>escaped</name> = <call><name>fuzzy_escape</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>convert_from_utf8</name><argument_list>(<argument><expr>((const <name>char</name> **) &amp;<name>converted</name>)</expr></argument>, <argument><expr><name>escaped</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>escaped</name></expr>;</return>
}</block></then> <else>else
<return>return <expr><name>converted</name></expr>;</return></else></if>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_utf_cstring_from_utf8_fuzzy</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_utf__cstring_from_utf8_fuzzy</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>,
<argument><expr><name>svn_utf_cstring_from_utf8</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_utf_cstring_from_utf8_stringbuf</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>dest</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_stringbuf_t</name> *</type><name>src</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>destbuf</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_utf_stringbuf_from_utf8</name><argument_list>(<argument><expr>&amp;<name>destbuf</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>dest</name> = <name><name>destbuf</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_utf_cstring_from_utf8_string</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>dest</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>src</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>dbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xlate_handle_node_t</name> *</type><name>node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_uton_xlate_handle_node</name><argument_list>(<argument><expr>&amp;<name>node</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>node</name>-&gt;<name>handle</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>check_utf8</name><argument_list>(<argument><expr><name><name>src</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>src</name>-&gt;<name>len</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>err</name></expr>)</condition><then>
<expr_stmt><expr><name>err</name> = <call><name>convert_to_stringbuf</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name><name>src</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>src</name>-&gt;<name>len</name></name></expr></argument>,
<argument><expr>&amp;<name>dbuf</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>! <name>err</name></expr>)</condition><then>
<expr_stmt><expr>*<name>dest</name> = <name><name>dbuf</name>-&gt;<name>data</name></name></expr>;</expr_stmt></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>err</name> = <call><name>check_non_ascii</name><argument_list>(<argument><expr><name><name>src</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>src</name>-&gt;<name>len</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>err</name></expr>)</condition><then>
<expr_stmt><expr>*<name>dest</name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>src</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>src</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></else></if>
<expr_stmt><expr><call><name>put_xlate_handle_node</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>SVN_UTF_UTON_XLATE_HANDLE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
</unit>
