<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/libsvn_subr/ssl_server_trust_providers.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_auth.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_config.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_AUTH__AUTHFILE_ASCII_CERT_KEY</name></cpp:macro> <cpp:value>"ascii_cert"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_AUTH__AUTHFILE_FAILURES_KEY</name></cpp:macro> <cpp:value>"failures"</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>ssl_server_trust_file_first_credentials</name><parameter_list>(<param><decl><type><name>void</name> **</type><name>credentials</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>iter_baton</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>provider_baton</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>parameters</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realmstring</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_uint32_t</name> *</type><name>failures</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>parameters</name></expr></argument>,
<argument><expr><name>SVN_AUTH_PARAM_SSL_SERVER_FAILURES</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_auth_ssl_server_cert_info_t</name> *</type><name>cert_info</name> <init>=
<expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>parameters</name></expr></argument>,
<argument><expr><name>SVN_AUTH_PARAM_SSL_SERVER_CERT_INFO</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>creds_hash</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>config_dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>error</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>credentials</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>iter_baton</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>config_dir</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>parameters</name></expr></argument>,
<argument><expr><name>SVN_AUTH_PARAM_CONFIG_DIR</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> =
<call><name>svn_config_read_auth_data</name><argument_list>(<argument><expr>&amp;<name>creds_hash</name></expr></argument>, <argument><expr><name>SVN_AUTH_CRED_SSL_SERVER_TRUST</name></expr></argument>,
<argument><expr><name>realmstring</name></expr></argument>, <argument><expr><name>config_dir</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>error</name> &amp;&amp; <name>creds_hash</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>trusted_cert</name></decl>, *<decl><type ref="prev"/><name>this_cert</name></decl>, *<decl><type ref="prev"/><name>failstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>last_failures</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>trusted_cert</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>creds_hash</name></expr></argument>,
<argument><expr><name>SVN_AUTH__AUTHFILE_ASCII_CERT_KEY</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>this_cert</name> = <call><name>svn_string_create</name><argument_list>(<argument><expr><name><name>cert_info</name>-&gt;<name>ascii_cert</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>failstr</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>creds_hash</name></expr></argument>,
<argument><expr><name>SVN_AUTH__AUTHFILE_FAILURES_KEY</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>failstr</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>endptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tmp_ulong</name> <init>= <expr><call><name>strtoul</name><argument_list>(<argument><expr><name><name>failstr</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr>&amp;<name>endptr</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>*<name>endptr</name> == '\0'</expr>)</condition><then>
<expr_stmt><expr><name>last_failures</name> = (<name>apr_uint32_t</name>) <name>tmp_ulong</name></expr>;</expr_stmt></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>trusted_cert</name> &amp;&amp;
<call><name>svn_string_compare</name><argument_list>(<argument><expr><name>this_cert</name></expr></argument>, <argument><expr><name>trusted_cert</name></expr></argument>)</argument_list></call> &amp;&amp;
(*<name>failures</name> &amp; ~<name>last_failures</name>) == 0</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>failures</name> = 0</expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>! *<name>failures</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_auth_cred_ssl_server_trust_t</name> *</type><name>creds</name> <init>=
<expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>creds</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>creds</name>-&gt;<name>may_save</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>credentials</name> = <name>creds</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>ssl_server_trust_file_save_credentials</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>saved</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>credentials</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>provider_baton</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>parameters</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realmstring</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_auth_cred_ssl_server_trust_t</name> *</type><name>creds</name> <init>= <expr><name>credentials</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_auth_ssl_server_cert_info_t</name> *</type><name>cert_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>creds_hash</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>config_dir</name></decl>;</decl_stmt>
<if>if <condition>(<expr>! <name><name>creds</name>-&gt;<name>may_save</name></name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>config_dir</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>parameters</name></expr></argument>,
<argument><expr><name>SVN_AUTH_PARAM_CONFIG_DIR</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cert_info</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>parameters</name></expr></argument>,
<argument><expr><name>SVN_AUTH_PARAM_SSL_SERVER_CERT_INFO</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>creds_hash</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>creds_hash</name></expr></argument>,
<argument><expr><name>SVN_AUTH__AUTHFILE_ASCII_CERT_KEY</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><call><name>svn_string_create</name><argument_list>(<argument><expr><name><name>cert_info</name>-&gt;<name>ascii_cert</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>creds_hash</name></expr></argument>,
<argument><expr><name>SVN_AUTH__AUTHFILE_FAILURES_KEY</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><call><name>svn_string_createf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%lu"</expr></argument>, <argument><expr>(<name>unsigned</name> <name>long</name>)
<name><name>creds</name>-&gt;<name>accepted_failures</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_config_write_auth_data</name><argument_list>(<argument><expr><name>creds_hash</name></expr></argument>,
<argument><expr><name>SVN_AUTH_CRED_SSL_SERVER_TRUST</name></expr></argument>,
<argument><expr><name>realmstring</name></expr></argument>,
<argument><expr><name>config_dir</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>saved</name> = <name>TRUE</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_auth_provider_t</name></type> <name>ssl_server_trust_file_provider</name> <init>= <expr><block>{
<expr><name>SVN_AUTH_CRED_SSL_SERVER_TRUST</name></expr>,
<expr>&amp;<name>ssl_server_trust_file_first_credentials</name></expr>,
<expr><name>NULL</name></expr>,
<expr>&amp;<name>ssl_server_trust_file_save_credentials</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type>
<name>svn_auth_get_ssl_server_trust_file_provider</name>
<parameter_list>(<param><decl><type><name>svn_auth_provider_object_t</name> **</type><name>provider</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_auth_provider_object_t</name> *</type><name>po</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>po</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>po</name>-&gt;<name>vtable</name></name> = &amp;<name>ssl_server_trust_file_provider</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>provider</name> = <name>po</name></expr>;</expr_stmt>
}</block></function>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>svn_auth_ssl_server_trust_prompt_func_t</name></type> <name>prompt_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>prompt_baton</name></decl>;</decl_stmt>
}</block></struct></type> <name>ssl_server_trust_prompt_provider_baton_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>ssl_server_trust_prompt_first_cred</name><parameter_list>(<param><decl><type><name>void</name> **</type><name>credentials_p</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>iter_baton</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>provider_baton</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>parameters</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realmstring</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ssl_server_trust_prompt_provider_baton_t</name> *</type><name>pb</name> <init>= <expr><name>provider_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint32_t</name> *</type><name>failures</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>parameters</name></expr></argument>,
<argument><expr><name>SVN_AUTH_PARAM_SSL_SERVER_FAILURES</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>no_auth_cache</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>parameters</name></expr></argument>,
<argument><expr><name>SVN_AUTH_PARAM_NO_AUTH_CACHE</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_auth_ssl_server_cert_info_t</name> *</type><name>cert_info</name> <init>=
<expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>parameters</name></expr></argument>,
<argument><expr><name>SVN_AUTH_PARAM_SSL_SERVER_CERT_INFO</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>pb</name>-&gt;<name>prompt_func</name></name><argument_list>(<argument><expr>(<name>svn_auth_cred_ssl_server_trust_t</name> **)
<name>credentials_p</name></expr></argument>, <argument><expr><name><name>pb</name>-&gt;<name>prompt_baton</name></name></expr></argument>, <argument><expr><name>realmstring</name></expr></argument>,
<argument><expr>*<name>failures</name></expr></argument>, <argument><expr><name>cert_info</name></expr></argument>, <argument><expr>! <name>no_auth_cache</name> &amp;&amp;
! (*<name>failures</name> &amp; <name>SVN_AUTH_SSL_OTHER</name>)</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>iter_baton</name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_auth_provider_t</name></type> <name>ssl_server_trust_prompt_provider</name> <init>= <expr><block>{
<expr><name>SVN_AUTH_CRED_SSL_SERVER_TRUST</name></expr>,
<expr><name>ssl_server_trust_prompt_first_cred</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type>
<name>svn_auth_get_ssl_server_trust_prompt_provider</name>
<parameter_list>(<param><decl><type><name>svn_auth_provider_object_t</name> **</type><name>provider</name></decl></param>,
<param><decl><type><name>svn_auth_ssl_server_trust_prompt_func_t</name></type> <name>prompt_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>prompt_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_auth_provider_object_t</name> *</type><name>po</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>po</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssl_server_trust_prompt_provider_baton_t</name> *</type><name>pb</name> <init>=
<expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>pb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pb</name>-&gt;<name>prompt_func</name></name> = <name>prompt_func</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pb</name>-&gt;<name>prompt_baton</name></name> = <name>prompt_baton</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>po</name>-&gt;<name>vtable</name></name> = &amp;<name>ssl_server_trust_prompt_provider</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>po</name>-&gt;<name>provider_baton</name></name> = <name>pb</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>provider</name> = <name>po</name></expr>;</expr_stmt>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wincrypt.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_base64.h&gt;</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>windows_ssl_server_trust_first_credentials</name><parameter_list>(<param><decl><type><name>void</name> **</type><name>credentials</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>iter_baton</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>provider_baton</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>parameters</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realmstring</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<typedef>typedef <function_decl><type><name>PCCERT_CONTEXT</name></type> (<name>WINAPI</name> *<name>createcertcontext_fn_t</name>)<parameter_list>(
<param><decl><type><name>DWORD</name></type> <name>dwCertEncodingType</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>BYTE</name> *</type><name>pbCertEncoded</name></decl></param>,
<param><decl><type><name>DWORD</name></type> <name>cbCertEncoded</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> *<name>getcertchain_fn_t</name>)<parameter_list>(
<param><decl><type><name>HCERTCHAINENGINE</name></type> <name>hChainEngine</name></decl></param>,
<param><decl><type><name>PCCERT_CONTEXT</name></type> <name>pCertContext</name></decl></param>,
<param><decl><type><name>LPFILETIME</name></type> <name>pTime</name></decl></param>,
<param><decl><type><name>HCERTSTORE</name></type> <name>hAdditionalStore</name></decl></param>,
<param><decl><type><name>PCERT_CHAIN_PARA</name></type> <name>pChainPara</name></decl></param>,
<param><decl><type><name>DWORD</name></type> <name>dwFlags</name></decl></param>,
<param><decl><type><name>LPVOID</name></type> <name>pvReserved</name></decl></param>,
<param><decl><type><name>PCCERT_CHAIN_CONTEXT</name>*</type> <name>ppChainContext</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VOID</name></type> (<name>WINAPI</name> *<name>freecertchain_fn_t</name>)<parameter_list>(
<param><decl><type><name>PCCERT_CHAIN_CONTEXT</name></type> <name>pChainContext</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> *<name>freecertcontext_fn_t</name>)<parameter_list>(
<param><decl><type><name>PCCERT_CONTEXT</name></type> <name>pCertContext</name></decl></param>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>cryptodll</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>createcertcontext_fn_t</name></type> <name>createcertcontext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>getcertchain_fn_t</name></type> <name>getcertchain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>freecertchain_fn_t</name></type> <name>freecertchain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>freecertcontext_fn_t</name></type> <name>freecertcontext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PCCERT_CONTEXT</name></type> <name>cert_context</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CERT_CHAIN_PARA</name></type> <name>chain_para</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PCCERT_CHAIN_CONTEXT</name></type> <name>chain_context</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>ok</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint32_t</name> *</type><name>failures</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>parameters</name></expr></argument>,
<argument><expr><name>SVN_AUTH_PARAM_SSL_SERVER_FAILURES</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_auth_ssl_server_cert_info_t</name> *</type><name>cert_info</name> <init>=
<expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>parameters</name></expr></argument>,
<argument><expr><name>SVN_AUTH_PARAM_SSL_SERVER_CERT_INFO</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>*<name>failures</name> &amp; ~<name>SVN_AUTH_SSL_UNKNOWNCA</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>credentials</name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>cryptodll</name> = <call><name>LoadLibraryA</name><argument_list>(<argument><expr>"Crypt32.dll"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>cryptodll</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>credentials</name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>createcertcontext</name> =
(<name>createcertcontext_fn_t</name>)<call><name>GetProcAddress</name><argument_list>(<argument><expr><name>cryptodll</name></expr></argument>,
<argument><expr>"CertCreateCertificateContext"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>getcertchain</name> =
(<name>getcertchain_fn_t</name>)<call><name>GetProcAddress</name><argument_list>(<argument><expr><name>cryptodll</name></expr></argument>, <argument><expr>"CertGetCertificateChain"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>freecertchain</name> =
(<name>freecertchain_fn_t</name>)<call><name>GetProcAddress</name><argument_list>(<argument><expr><name>cryptodll</name></expr></argument>, <argument><expr>"CertFreeCertificateChain"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>freecertcontext</name> =
(<name>freecertcontext_fn_t</name>)<call><name>GetProcAddress</name><argument_list>(<argument><expr><name>cryptodll</name></expr></argument>,
<argument><expr>"CertFreeCertificateContext"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>createcertcontext</name> || !<name>getcertchain</name> || !<name>freecertchain</name>
|| !<name>freecertcontext</name></expr>)</condition><then>
<expr_stmt><expr><name>ok</name> = <name>FALSE</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>ok</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>cert_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>binary_cert</name></decl>;</decl_stmt>
<expr_stmt><expr><name>binary_cert</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr><call><name>apr_base64_decode_len</name><argument_list>(<argument><expr><name><name>cert_info</name>-&gt;<name>ascii_cert</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cert_len</name> = <call><name>apr_base64_decode</name><argument_list>(<argument><expr><name>binary_cert</name></expr></argument>, <argument><expr><name><name>cert_info</name>-&gt;<name>ascii_cert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cert_context</name> = <call><name>createcertcontext</name>
<argument_list>(<argument><expr><name>X509_ASN_ENCODING</name> | <name>PKCS_7_ASN_ENCODING</name></expr></argument>, <argument><expr><name>binary_cert</name></expr></argument>, <argument><expr><name>cert_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>cert_context</name></expr>)</condition><then>
<expr_stmt><expr><name>ok</name> = <name>FALSE</name></expr>;</expr_stmt></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>ok</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>chain_para</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>chain_para</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>chain_para</name>.<name>cbSize</name></name> = <sizeof>sizeof<argument_list>(<argument><expr><name>chain_para</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>getcertchain</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>cert_context</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>chain_para</name></expr></argument>,
<argument><expr><name>CERT_CHAIN_CACHE_END_CERT</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>chain_context</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>chain_context</name>-&gt;<name>rgpChain</name><index>[<expr>0</expr>]</index></name>-&gt;<name><name>TrustStatus</name>.<name>dwErrorStatus</name></name>
!= <name>CERT_TRUST_NO_ERROR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ok</name> = <name>FALSE</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else
<expr_stmt><expr><name>ok</name> = <name>FALSE</name></expr>;</expr_stmt></else></if>
}</block></then></if>
<if>if <condition>(<expr><name>chain_context</name></expr>)</condition><then>
<expr_stmt><expr><call><name>freecertchain</name><argument_list>(<argument><expr><name>chain_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>cert_context</name></expr>)</condition><then>
<expr_stmt><expr><call><name>freecertcontext</name><argument_list>(<argument><expr><name>cert_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>cryptodll</name></expr>)</condition><then>
<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>cryptodll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>!<name>ok</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>credentials</name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>svn_auth_cred_ssl_server_trust_t</name> *</type><name>creds</name> <init>=
<expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>creds</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>creds</name>-&gt;<name>may_save</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>credentials</name> = <name>creds</name></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_auth_provider_t</name></type> <name>windows_server_trust_provider</name> <init>= <expr><block>{
<expr><name>SVN_AUTH_CRED_SSL_SERVER_TRUST</name></expr>,
<expr><name>windows_ssl_server_trust_first_credentials</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type>
<name>svn_auth_get_windows_ssl_server_trust_provider</name>
<parameter_list>(<param><decl><type><name>svn_auth_provider_object_t</name> **</type><name>provider</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_auth_provider_object_t</name> *</type><name>po</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>po</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>po</name>-&gt;<name>vtable</name></name> = &amp;<name>windows_server_trust_provider</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>provider</name> = <name>po</name></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
