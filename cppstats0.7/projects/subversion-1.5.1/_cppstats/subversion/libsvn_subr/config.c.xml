<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/libsvn_subr/config.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_MEMFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_want.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_general.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config_impl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<typedef>typedef <type>struct <name>cfg_section_t</name></type> <name>cfg_section_t</name>;</typedef>
<struct>struct <name>cfg_section_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>hash_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>options</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type>struct <name>cfg_option_t</name></type> <name>cfg_option_t</name>;</typedef>
<struct>struct <name>cfg_option_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>hash_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>x_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>expanded</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><name>svn_error_t</name> *</type>
<name>svn_config_read</name><parameter_list>(<param><decl><type><name>svn_config_t</name> **</type><name>cfgp</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>must_exist</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_config_t</name> *</type><name>cfg</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>cfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>sections</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>x_pool</name></name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>x_values</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>tmp_key</name></name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>tmp_value</name></name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr>0 == <call><name>strncmp</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>SVN_REGISTRY_PREFIX</name></expr></argument>, <argument><expr><name>SVN_REGISTRY_PREFIX_LEN</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>err</name> = <call><name>svn_config__parse_registry</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>file</name> + <name>SVN_REGISTRY_PREFIX_LEN</name></expr></argument>,
<argument><expr><name>must_exist</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>err</name> = <call><name>svn_config__parse_file</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>must_exist</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>err</name> != <name>SVN_NO_ERROR</name></expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then>
<else>else
<expr_stmt><expr>*<name>cfgp</name> = <name>cfg</name></expr>;</expr_stmt></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>read_all</name><parameter_list>(<param><decl><type><name>svn_config_t</name> **</type><name>cfgp</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>sys_registry_path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>usr_registry_path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>sys_file_path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>usr_file_path</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>red_config</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>sys_registry_path</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_config_read</name><argument_list>(<argument><expr><name>cfgp</name></expr></argument>, <argument><expr><name>sys_registry_path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>red_config</name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>sys_file_path</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>red_config</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_config_merge</name><argument_list>(<argument><expr>*<name>cfgp</name></expr></argument>, <argument><expr><name>sys_file_path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_config_read</name><argument_list>(<argument><expr><name>cfgp</name></expr></argument>, <argument><expr><name>sys_file_path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>red_config</name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>usr_registry_path</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>red_config</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_config_merge</name><argument_list>(<argument><expr>*<name>cfgp</name></expr></argument>, <argument><expr><name>usr_registry_path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_config_read</name><argument_list>(<argument><expr><name>cfgp</name></expr></argument>, <argument><expr><name>usr_registry_path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>red_config</name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>usr_file_path</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>red_config</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_config_merge</name><argument_list>(<argument><expr>*<name>cfgp</name></expr></argument>, <argument><expr><name>usr_file_path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_config_read</name><argument_list>(<argument><expr><name>cfgp</name></expr></argument>, <argument><expr><name>usr_file_path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>red_config</name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<if>if <condition>(<expr>! <name>red_config</name></expr>)</condition><then>
<expr_stmt><expr>*<name>cfgp</name> = <name>NULL</name></expr>;</expr_stmt></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>get_category_config</name><parameter_list>(<param><decl><type><name>svn_config_t</name> **</type><name>cfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>config_dir</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>category</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>usr_reg_path</name> <init>= <expr><name>NULL</name></expr></init>, *<name>sys_reg_path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>usr_cfg_path</name></decl>, *<decl><type ref="prev"/><name>sys_cfg_path</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>cfg</name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>config_dir</name></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>sys_reg_path</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>SVN_REGISTRY_SYS_CONFIG_PATH</name></expr></argument>,
<argument><expr><name>category</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>usr_reg_path</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>SVN_REGISTRY_USR_CONFIG_PATH</name></expr></argument>,
<argument><expr><name>category</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_config__sys_config_path</name><argument_list>(<argument><expr>&amp;<name>sys_cfg_path</name></expr></argument>, <argument><expr><name>category</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name>sys_cfg_path</name> = <name>NULL</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_config__user_config_path</name><argument_list>(<argument><expr><name>config_dir</name></expr></argument>, <argument><expr>&amp;<name>usr_cfg_path</name></expr></argument>, <argument><expr><name>category</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>read_all</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>,
<argument><expr><name>sys_reg_path</name></expr></argument>, <argument><expr><name>usr_reg_path</name></expr></argument>,
<argument><expr><name>sys_cfg_path</name></expr></argument>, <argument><expr><name>usr_cfg_path</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_config_get_config</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> **</type><name>cfg_hash</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>config_dir</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>cfg_hash</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CATLEN</name></cpp:macro> <cpp:value>(sizeof(SVN_CONFIG_CATEGORY_SERVERS) - 1)</cpp:value></cpp:define>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_category_config</name><argument_list>(<argument><expr>&amp;<name>cfg</name></expr></argument>, <argument><expr><name>config_dir</name></expr></argument>, <argument><expr><name>SVN_CONFIG_CATEGORY_SERVERS</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cfg</name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr>*<name>cfg_hash</name></expr></argument>, <argument><expr><name>SVN_CONFIG_CATEGORY_SERVERS</name></expr></argument>, <argument><expr><name>CATLEN</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CATLEN</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CATLEN</name></cpp:macro> <cpp:value>(sizeof(SVN_CONFIG_CATEGORY_CONFIG) - 1)</cpp:value></cpp:define>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_category_config</name><argument_list>(<argument><expr>&amp;<name>cfg</name></expr></argument>, <argument><expr><name>config_dir</name></expr></argument>, <argument><expr><name>SVN_CONFIG_CATEGORY_CONFIG</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cfg</name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr>*<name>cfg_hash</name></expr></argument>, <argument><expr><name>SVN_CONFIG_CATEGORY_CONFIG</name></expr></argument>, <argument><expr><name>CATLEN</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CATLEN</name></cpp:undef>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>for_each_option</name><parameter_list>(<param><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><function_decl><type><name>svn_boolean_t</name></type> <name>callback</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>same_baton</name></decl></param>,
<param><decl><type><name>cfg_section_t</name> *</type><name>section</name></decl></param>,
<param><decl><type><name>cfg_option_t</name> *</type><name>option</name></decl></param>)</parameter_list></function_decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>sec_ndx</name></decl>;</decl_stmt>
<for>for (<init><expr><name>sec_ndx</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>cfg</name>-&gt;<name>sections</name></name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>sec_ndx</name> != <name>NULL</name></expr>;</condition>
<incr><expr><name>sec_ndx</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>sec_ndx</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>sec_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cfg_section_t</name> *</type><name>sec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>opt_ndx</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>sec_ndx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>sec_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sec</name> = <name>sec_ptr</name></expr>;</expr_stmt>
<for>for (<init><expr><name>opt_ndx</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>sec</name>-&gt;<name>options</name></name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>opt_ndx</name> != <name>NULL</name></expr>;</condition>
<incr><expr><name>opt_ndx</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>opt_ndx</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>opt_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cfg_option_t</name> *</type><name>opt</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>opt_ndx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>opt_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>opt</name> = <name>opt_ptr</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>callback</name><argument_list>(<argument><expr><name>baton</name></expr></argument>, <argument><expr><name>sec</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return;</return></then></if>
}</block></for>
}</block></for>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_boolean_t</name></type>
<name>merge_callback</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>cfg_section_t</name> *</type><name>section</name></decl></param>, <param><decl><type><name>cfg_option_t</name> *</type><name>option</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>svn_config_set</name><argument_list>(<argument><expr><name>baton</name></expr></argument>, <argument><expr><name><name>section</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>option</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>option</name>-&gt;<name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_config_merge</name><parameter_list>(<param><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>must_exist</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_config_t</name> *</type><name>merge_cfg</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_config_read</name><argument_list>(<argument><expr>&amp;<name>merge_cfg</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>must_exist</name></expr></argument>, <argument><expr><name><name>cfg</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>for_each_option</name><argument_list>(<argument><expr><name>merge_cfg</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>, <argument><expr><name><name>merge_cfg</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>merge_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_boolean_t</name></type>
<name>rmex_callback</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>cfg_section_t</name> *</type><name>section</name></decl></param>, <param><decl><type><name>cfg_option_t</name> *</type><name>option</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>option</name>-&gt;<name>expanded</name></name> &amp;&amp; <name><name>option</name>-&gt;<name>x_value</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>option</name>-&gt;<name>x_value</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>option</name>-&gt;<name>expanded</name></name> = <name>FALSE</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>remove_expansions</name><parameter_list>(<param><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<name><name>cfg</name>-&gt;<name>x_values</name></name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><call><name>for_each_option</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>cfg</name>-&gt;<name>x_pool</name></name></expr></argument>, <argument><expr><name>rmex_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>x_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>x_values</name></name> = <name>FALSE</name></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>APR_INLINE</name> <name>char</name> *</type>
<name>make_hash_key</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>key</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>register</name> <name>char</name> *</type><name>p</name></decl>;</decl_stmt>
<for>for (<init><expr><name>p</name> = <name>key</name></expr>;</init> <condition><expr>*<name>p</name> != 0</expr>;</condition> <incr><expr>++<name>p</name></expr></incr>)
<expr_stmt><expr>*<name>p</name> = <call><name>apr_tolower</name><argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
<return>return <expr><name>key</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>cfg_option_t</name> *</type>
<name>find_option</name><parameter_list>(<param><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>section</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>option</name></decl></param>,
<param><decl><type><name>cfg_section_t</name> **</type><name>sectionp</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>sec_ptr</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_set</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>tmp_key</name></name></expr></argument>, <argument><expr><name>section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>make_hash_key</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>tmp_key</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sec_ptr</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>sections</name></name></expr></argument>, <argument><expr><name><name>cfg</name>-&gt;<name>tmp_key</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr><name><name>cfg</name>-&gt;<name>tmp_key</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>sectionp</name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr>*<name>sectionp</name> = <name>sec_ptr</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>sec_ptr</name> != <name>NULL</name> &amp;&amp; <name>option</name> != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>cfg_section_t</name> *</type><name>sec</name> <init>= <expr><name>sec_ptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cfg_option_t</name> *</type><name>opt</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_set</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>tmp_key</name></name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>make_hash_key</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>tmp_key</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>opt</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>sec</name>-&gt;<name>options</name></name></expr></argument>, <argument><expr><name><name>cfg</name>-&gt;<name>tmp_key</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr><name><name>cfg</name>-&gt;<name>tmp_key</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>opt</name> == <name>NULL</name>
&amp;&amp; <call><name>apr_strnatcasecmp</name><argument_list>(<argument><expr><name>section</name></expr></argument>, <argument><expr><name>SVN_CONFIG__DEFAULT_SECTION</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<expr_stmt><expr><name>opt</name> = <call><name>find_option</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>SVN_CONFIG__DEFAULT_SECTION</name></expr></argument>, <argument><expr><name>option</name></expr></argument>, <argument><expr>&amp;<name>sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>opt</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function_decl><type><specifier>static</specifier> <name>void</name></type>
<name>expand_option_value</name><parameter_list>(<param><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl></param>, <param><decl><type><name>cfg_section_t</name> *</type><name>section</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>opt_value</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>opt_x_valuep</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>x_pool</name></decl></param>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>make_string_from_option</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>valuep</name></decl></param>, <param><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl></param>,
<param><decl><type><name>cfg_section_t</name> *</type><name>section</name></decl></param>, <param><decl><type><name>cfg_option_t</name> *</type><name>opt</name></decl></param>,
<param><decl><type><name>apr_pool_t</name>*</type> <name>x_pool</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<name><name>opt</name>-&gt;<name>expanded</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>tmp_pool</name> <init>= <expr>(<name>x_pool</name> ? <name>x_pool</name> : <call><name>svn_pool_create</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>x_pool</name></name></expr></argument>)</argument_list></call>)</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>expand_option_value</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>section</name></expr></argument>, <argument><expr><name><name>opt</name>-&gt;<name>value</name></name></expr></argument>, <argument><expr>&amp;<name><name>opt</name>-&gt;<name>x_value</name></name></expr></argument>, <argument><expr><name>tmp_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name>-&gt;<name>expanded</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>x_pool</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>opt</name>-&gt;<name>x_value</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>opt</name>-&gt;<name>x_value</name></name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>x_pool</name></name></expr></argument>, <argument><expr><name><name>opt</name>-&gt;<name>x_value</name></name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>opt</name>-&gt;<name>x_value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>tmp_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>opt</name>-&gt;<name>x_value</name></name></expr>)</condition><then>
<expr_stmt><expr>*<name>valuep</name> = <name><name>opt</name>-&gt;<name>x_value</name></name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr>*<name>valuep</name> = <name><name>opt</name>-&gt;<name>value</name></name></expr>;</expr_stmt></else></if>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_START</name></cpp:macro> <cpp:value>"%("</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_START_LEN</name></cpp:macro> <cpp:value>(sizeof(FMT_START) - 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_END</name></cpp:macro> <cpp:value>")s"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_END_LEN</name></cpp:macro> <cpp:value>(sizeof(FMT_END) - 1)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>expand_option_value</name><parameter_list>(<param><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl></param>, <param><decl><type><name>cfg_section_t</name> *</type><name>section</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>opt_value</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>opt_x_valuep</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>x_pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>parse_from</name> <init>= <expr><name>opt_value</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copy_from</name> <init>= <expr><name>parse_from</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name_start</name></decl>, *<decl><type ref="prev"/><name>name_end</name></decl>;</decl_stmt>
<while>while <condition>(<expr><name>parse_from</name> != <name>NULL</name>
&amp;&amp; *<name>parse_from</name> != '\0'
&amp;&amp; (<name>name_start</name> = <call><name>strstr</name><argument_list>(<argument><expr><name>parse_from</name></expr></argument>, <argument><expr><name>FMT_START</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition> <block>{
<expr_stmt><expr><name>name_start</name> += <name>FMT_START_LEN</name></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>name_start</name> == '\0'</expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr><name>name_end</name> = <call><name>strstr</name><argument_list>(<argument><expr><name>name_start</name></expr></argument>, <argument><expr><name>FMT_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>name_end</name> != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>cfg_option_t</name> *</type><name>x_opt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name> <init>= <expr><name>name_end</name> - <name>name_start</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>name</name> <init>= <expr><call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name>x_pool</name></expr></argument>, <argument><expr><name>name_start</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>x_opt</name> = <call><name>find_option</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name><name>section</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>x_opt</name> != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cstring</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>make_string_from_option</name><argument_list>(<argument><expr>&amp;<name>cstring</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>section</name></expr></argument>, <argument><expr><name>x_opt</name></expr></argument>, <argument><expr><name>x_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = <name>name_start</name> - <name>FMT_START_LEN</name> - <name>copy_from</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>buf</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>buf</name> = <call><name>svn_stringbuf_ncreate</name><argument_list>(<argument><expr><name>copy_from</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>x_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>x_values</name></name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>copy_from</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>cstring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>parse_from</name> = <name>name_end</name> + <name>FMT_END_LEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name>copy_from</name> = <name>parse_from</name></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name>parse_from</name> = <name>name_end</name> + <name>FMT_END_LEN</name></expr>;</expr_stmt></else></if>
}</block></then> <else>else
<expr_stmt><expr><name>parse_from</name> = <name>NULL</name></expr>;</expr_stmt></else></if>
}</block></while>
<if>if <condition>(<expr><name>buf</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>copy_from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>opt_x_valuep</name> = <name><name>buf</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr>*<name>opt_x_valuep</name> = <name>NULL</name></expr>;</expr_stmt></else></if>
}</block></function>
<function><type><name>void</name></type>
<name>svn_config_get</name><parameter_list>(<param><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>valuep</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>section</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>option</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>default_value</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>cfg</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>cfg_section_t</name> *</type><name>sec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cfg_option_t</name> *</type><name>opt</name> <init>= <expr><call><name>find_option</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>section</name></expr></argument>, <argument><expr><name>option</name></expr></argument>, <argument><expr>&amp;<name>sec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>opt</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>make_string_from_option</name><argument_list>(<argument><expr><name>valuep</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>sec</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>tmp_pool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>x_pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>x_default</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>expand_option_value</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>sec</name></expr></argument>, <argument><expr><name>default_value</name></expr></argument>, <argument><expr>&amp;<name>x_default</name></expr></argument>, <argument><expr><name>tmp_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>x_default</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_stringbuf_set</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>tmp_value</name></name></expr></argument>, <argument><expr><name>x_default</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>valuep</name> = <name><name>cfg</name>-&gt;<name>tmp_value</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr>*<name>valuep</name> = <name>default_value</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>tmp_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>valuep</name> = <name>default_value</name></expr>;</expr_stmt>
}</block></else></if>
}</block></function>
<function><type><name>void</name></type>
<name>svn_config_set</name><parameter_list>(<param><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>section</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>option</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cfg_section_t</name> *</type><name>sec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cfg_option_t</name> *</type><name>opt</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>remove_expansions</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>opt</name> = <call><name>find_option</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>section</name></expr></argument>, <argument><expr><name>option</name></expr></argument>, <argument><expr>&amp;<name>sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>opt</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>opt</name>-&gt;<name>value</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name>-&gt;<name>expanded</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><name>opt</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>opt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name>-&gt;<name>name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name>-&gt;<name>hash_key</name></name> = <call><name>make_hash_key</name><argument_list>(<argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name>-&gt;<name>value</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name>-&gt;<name>x_value</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt</name>-&gt;<name>expanded</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>sec</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>sec</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>sec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sec</name>-&gt;<name>name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sec</name>-&gt;<name>hash_key</name></name> = <call><name>make_hash_key</name><argument_list>(<argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>section</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sec</name>-&gt;<name>options</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>sections</name></name></expr></argument>, <argument><expr><name><name>sec</name>-&gt;<name>hash_key</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>sec</name>-&gt;<name>options</name></name></expr></argument>, <argument><expr><name><name>opt</name>-&gt;<name>hash_key</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_config_get_bool</name><parameter_list>(<param><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl></param>, <param><decl><type><name>svn_boolean_t</name> *</type><name>valuep</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>section</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>option</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>default_value</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmp_value</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_config_get</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr>&amp;<name>tmp_value</name></expr></argument>, <argument><expr><name>section</name></expr></argument>, <argument><expr><name>option</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>tmp_value</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr>*<name>valuep</name> = <name>default_value</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>0 == <call><name>svn_cstring_casecmp</name><argument_list>(<argument><expr><name>tmp_value</name></expr></argument>, <argument><expr><name>SVN_CONFIG_TRUE</name></expr></argument>)</argument_list></call>
|| 0 == <call><name>svn_cstring_casecmp</name><argument_list>(<argument><expr><name>tmp_value</name></expr></argument>, <argument><expr>"yes"</expr></argument>)</argument_list></call>
|| 0 == <call><name>svn_cstring_casecmp</name><argument_list>(<argument><expr><name>tmp_value</name></expr></argument>, <argument><expr>"on"</expr></argument>)</argument_list></call>
|| 0 == <call><name>strcmp</name><argument_list>(<argument><expr><name>tmp_value</name></expr></argument>, <argument><expr>"1"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr>*<name>valuep</name> = <name>TRUE</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>0 == <call><name>svn_cstring_casecmp</name><argument_list>(<argument><expr><name>tmp_value</name></expr></argument>, <argument><expr><name>SVN_CONFIG_FALSE</name></expr></argument>)</argument_list></call>
|| 0 == <call><name>svn_cstring_casecmp</name><argument_list>(<argument><expr><name>tmp_value</name></expr></argument>, <argument><expr>"no"</expr></argument>)</argument_list></call>
|| 0 == <call><name>svn_cstring_casecmp</name><argument_list>(<argument><expr><name>tmp_value</name></expr></argument>, <argument><expr>"off"</expr></argument>)</argument_list></call>
|| 0 == <call><name>strcmp</name><argument_list>(<argument><expr><name>tmp_value</name></expr></argument>, <argument><expr>"0"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr>*<name>valuep</name> = <name>FALSE</name></expr>;</expr_stmt></then>
<else>else
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_INVALID_CONFIG_VALUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Config error: invalid boolean value '%s'"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>tmp_value</name></expr></argument>)</argument_list></call></expr>;</return></else></if></else></if></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>svn_config_set_bool</name><parameter_list>(<param><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>section</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>option</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>svn_config_set</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>section</name></expr></argument>, <argument><expr><name>option</name></expr></argument>,
<argument><expr>(<name>value</name> ? <name>SVN_CONFIG_TRUE</name> : <name>SVN_CONFIG_FALSE</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type>
<name>svn_config__enumerate_sections</name><parameter_list>(<param><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl></param>,
<param><decl><type><name>svn_config__section_enumerator_t</name></type> <name>callback</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_config_enumerate_sections</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>,
<argument><expr>(<name>svn_config_section_enumerator_t</name>) <name>callback</name></expr></argument>, <argument><expr><name>baton</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>svn_config_enumerate_sections</name><parameter_list>(<param><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl></param>,
<param><decl><type><name>svn_config_section_enumerator_t</name></type> <name>callback</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>sec_ndx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>x_pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>sec_ndx</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><name><name>cfg</name>-&gt;<name>sections</name></name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>sec_ndx</name> != <name>NULL</name></expr>;</condition>
<incr><expr><name>sec_ndx</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>sec_ndx</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>sec_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cfg_section_t</name> *</type><name>sec</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>sec_ndx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>sec_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sec</name> = <name>sec_ptr</name></expr>;</expr_stmt>
<expr_stmt><expr>++<name>count</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>callback</name><argument_list>(<argument><expr><name><name>sec</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>baton</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<break>break;</break></then></if>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>count</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>svn_config_enumerate_sections2</name><parameter_list>(<param><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl></param>,
<param><decl><type><name>svn_config_section_enumerator2_t</name></type> <name>callback</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>sec_ndx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iteration_pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>iteration_pool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>sec_ndx</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>cfg</name>-&gt;<name>sections</name></name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>sec_ndx</name> != <name>NULL</name></expr>;</condition>
<incr><expr><name>sec_ndx</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>sec_ndx</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>sec_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cfg_section_t</name> *</type><name>sec</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>sec_ndx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>sec_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sec</name> = <name>sec_ptr</name></expr>;</expr_stmt>
<expr_stmt><expr>++<name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iteration_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>callback</name><argument_list>(<argument><expr><name><name>sec</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>baton</name></expr></argument>, <argument><expr><name>iteration_pool</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<break>break;</break></then></if>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iteration_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>count</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>svn_config_enumerate</name><parameter_list>(<param><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>section</name></decl></param>,
<param><decl><type><name>svn_config_enumerator_t</name></type> <name>callback</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cfg_section_t</name> *</type><name>sec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>opt_ndx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>find_option</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>section</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>sec</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>x_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> = 0</expr>;</expr_stmt>
<for>for (<init><expr><name>opt_ndx</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><name><name>sec</name>-&gt;<name>options</name></name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>opt_ndx</name> != <name>NULL</name></expr>;</condition>
<incr><expr><name>opt_ndx</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>opt_ndx</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>opt_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cfg_option_t</name> *</type><name>opt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>temp_value</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>opt_ndx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>opt_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>opt</name> = <name>opt_ptr</name></expr>;</expr_stmt>
<expr_stmt><expr>++<name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>make_string_from_option</name><argument_list>(<argument><expr>&amp;<name>temp_value</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>sec</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>callback</name><argument_list>(<argument><expr><name><name>opt</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>temp_value</name></expr></argument>, <argument><expr><name>baton</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<break>break;</break></then></if>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>count</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>svn_config_enumerate2</name><parameter_list>(<param><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>section</name></decl></param>,
<param><decl><type><name>svn_config_enumerator2_t</name></type> <name>callback</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cfg_section_t</name> *</type><name>sec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>opt_ndx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iteration_pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>find_option</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>section</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>sec</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>iteration_pool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> = 0</expr>;</expr_stmt>
<for>for (<init><expr><name>opt_ndx</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>sec</name>-&gt;<name>options</name></name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>opt_ndx</name> != <name>NULL</name></expr>;</condition>
<incr><expr><name>opt_ndx</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>opt_ndx</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>opt_ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cfg_option_t</name> *</type><name>opt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>temp_value</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>opt_ndx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>opt_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>opt</name> = <name>opt_ptr</name></expr>;</expr_stmt>
<expr_stmt><expr>++<name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>make_string_from_option</name><argument_list>(<argument><expr>&amp;<name>temp_value</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>sec</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iteration_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>callback</name><argument_list>(<argument><expr><name><name>opt</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>temp_value</name></expr></argument>, <argument><expr><name>baton</name></expr></argument>, <argument><expr><name>iteration_pool</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<break>break;</break></then></if>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iteration_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>count</name></expr>;</return>
}</block></function>
<struct>struct <name>search_groups_baton</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>match</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>svn_boolean_t</name></type> <name>search_groups</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>search_groups_baton</name> *</type><name>b</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>list</name></decl>;</decl_stmt>
<expr_stmt><expr><name>list</name> = <call><name>svn_cstring_split</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>","</expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>svn_cstring_match_glob_list</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>key</name></name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>b</name>-&gt;<name>match</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></then> <else>else
<return>return <expr><name>TRUE</name></expr>;</return></else></if>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>svn_config_find_group</name><parameter_list>(<param><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>master_section</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>search_groups_baton</name></type> <name>gb</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>gb</name>.<name>key</name></name> = <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gb</name>.<name>match</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>gb</name>.<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_config_enumerate2</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>master_section</name></expr></argument>, <argument><expr><name>search_groups</name></expr></argument>, <argument><expr>&amp;<name>gb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>gb</name>.<name>match</name></name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name>*</type>
<name>svn_config_get_server_setting</name><parameter_list>(<param><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>server_group</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>option_name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>default_value</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>retval</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_config_get</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr>&amp;<name>retval</name></expr></argument>, <argument><expr><name>SVN_CONFIG_SECTION_GLOBAL</name></expr></argument>,
<argument><expr><name>option_name</name></expr></argument>, <argument><expr><name>default_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>server_group</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_config_get</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr>&amp;<name>retval</name></expr></argument>, <argument><expr><name>server_group</name></expr></argument>, <argument><expr><name>option_name</name></expr></argument>, <argument><expr><name>retval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>retval</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name>*</type>
<name>svn_config_get_server_setting_int</name><parameter_list>(<param><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>server_group</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>option_name</name></decl></param>,
<param><decl><type><name>apr_int64_t</name></type> <name>default_value</name></decl></param>,
<param><decl><type><name>apr_int64_t</name> *</type><name>result_value</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>tmp_value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>end_pos</name></decl>;</decl_stmt>
<expr_stmt><expr><name>tmp_value</name> = <call><name>svn_config_get_server_setting</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>server_group</name></expr></argument>,
<argument><expr><name>option_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>tmp_value</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr>*<name>result_value</name> = <name>default_value</name></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr>*<name>result_value</name> = <call><name>apr_strtoi64</name><argument_list>(<argument><expr><name>tmp_value</name></expr></argument>, <argument><expr>&amp;<name>end_pos</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>end_pos</name> != 0</expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_RA_DAV_INVALID_CONFIG_VALUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Config error: invalid integer value '%s'"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>tmp_value</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_boolean_t</name></type>
<name>svn_config_has_section</name><parameter_list>(<param><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>section</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>sections</name></name></expr></argument>, <argument><expr><name>section</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call> != <name>NULL</name></expr>;</return>
}</block></function>
</unit>
