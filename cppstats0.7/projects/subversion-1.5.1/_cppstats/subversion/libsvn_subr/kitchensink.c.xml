<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/libsvn_subr/kitchensink.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_uuid.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_mergeinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<function><type><name>svn_error_t</name> *</type>
<name>svn_revnum_parse</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name> *</type><name>rev</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>str</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>endptr</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>result</name> <init>= <expr><call><name>strtol</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr>&amp;<name>end</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>endptr</name></expr>)</condition><then>
<expr_stmt><expr>*<name>endptr</name> = <name>end</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>str</name> == <name>end</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_REVNUM_PARSE_FAILURE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Invalid revision number found parsing '%s'"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>result</name> &lt; 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>endptr</name></expr>)</condition><then>
<expr_stmt><expr>*<name>endptr</name> = <name>str</name></expr>;</expr_stmt></then></if>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_REVNUM_PARSE_FAILURE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Negative revision number found parsing '%s'"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>rev</name> = <name>result</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_uuid_generate</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_uuid_t</name></type> <name>uuid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>uuid_str</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>APR_UUID_FORMATTED_LENGTH</name> + 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_uuid_get</name><argument_list>(<argument><expr>&amp;<name>uuid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_uuid_format</name><argument_list>(<argument><expr><name>uuid_str</name></expr></argument>, <argument><expr>&amp;<name>uuid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>uuid_str</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_depth_to_word</name><parameter_list>(<param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>)</parameter_list> <block>{
<switch>switch <condition>(<expr><name>depth</name></expr>)</condition> <block>{
<case>case <expr><name>svn_depth_exclude</name></expr>:
<return>return <expr>"exclude"</expr>;</return>
</case><case>case <expr><name>svn_depth_unknown</name></expr>:
<return>return <expr>"unknown"</expr>;</return>
</case><case>case <expr><name>svn_depth_empty</name></expr>:
<return>return <expr>"empty"</expr>;</return>
</case><case>case <expr><name>svn_depth_files</name></expr>:
<return>return <expr>"files"</expr>;</return>
</case><case>case <expr><name>svn_depth_immediates</name></expr>:
<return>return <expr>"immediates"</expr>;</return>
</case><case>case <expr><name>svn_depth_infinity</name></expr>:
<return>return <expr>"infinity"</expr>;</return>
</case><default>default:
<return>return <expr>"INVALID-DEPTH"</expr>;</return>
</default>}</block></switch>
}</block></function>
<function><type><name>svn_depth_t</name></type>
<name>svn_depth_from_word</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>word</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr>"exclude"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>svn_depth_exclude</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr>"unknown"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>svn_depth_unknown</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr>"empty"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>svn_depth_empty</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr>"files"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>svn_depth_files</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr>"immediates"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>svn_depth_immediates</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr>"infinity"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>svn_depth_infinity</name></expr>;</return></then></if>
<return>return <expr><name>svn_depth_unknown</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_inheritance_to_word</name><parameter_list>(<param><decl><type><name>svn_mergeinfo_inheritance_t</name></type> <name>inherit</name></decl></param>)</parameter_list> <block>{
<switch>switch <condition>(<expr><name>inherit</name></expr>)</condition> <block>{
<case>case <expr><name>svn_mergeinfo_inherited</name></expr>:
<return>return <expr>"inherited"</expr>;</return>
</case><case>case <expr><name>svn_mergeinfo_nearest_ancestor</name></expr>:
<return>return <expr>"nearest-ancestor"</expr>;</return>
</case><default>default:
<return>return <expr>"explicit"</expr>;</return>
</default>}</block></switch>
}</block></function>
<function><type><name>svn_mergeinfo_inheritance_t</name></type>
<name>svn_inheritance_from_word</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>word</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr>"inherited"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>svn_mergeinfo_inherited</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr>"nearest-ancestor"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>svn_mergeinfo_nearest_ancestor</name></expr>;</return></then></if>
<return>return <expr><name>svn_mergeinfo_explicit</name></expr>;</return>
}</block></function>
</unit>
