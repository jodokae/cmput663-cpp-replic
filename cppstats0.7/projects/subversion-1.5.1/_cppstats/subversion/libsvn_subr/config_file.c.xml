<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/libsvn_subr/config_file.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_md5.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_env.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config_impl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_auth.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_subst.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_utf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_user.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NL</name></cpp:macro> <cpp:value>APR_EOL_STR</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>parse_context_t</name> <block>{
<decl_stmt><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ungotten_char</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>have_ungotten_char</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>section</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>option</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>value</name></decl>;</decl_stmt>
}</block></struct></type> <name>parse_context_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>APR_INLINE</name> <name>svn_error_t</name> *</type>
<name>parser_getc</name><parameter_list>(<param><decl><type><name>parse_context_t</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>int</name> *</type><name>c</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>have_ungotten_char</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>c</name> = <name><name>ctx</name>-&gt;<name>ungotten_char</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>have_ungotten_char</name></name> = <name>FALSE</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>char</name></type> <name>char_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>readlen</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_read</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>stream</name></name></expr></argument>, <argument><expr>&amp;<name>char_buf</name></expr></argument>, <argument><expr>&amp;<name>readlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>readlen</name> == 1</expr>)</condition><then>
<expr_stmt><expr>*<name>c</name> = <name>char_buf</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr>*<name>c</name> = <name>EOF</name></expr>;</expr_stmt></else></if>
}</block></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>APR_INLINE</name> <name>svn_error_t</name> *</type>
<name>parser_ungetc</name><parameter_list>(<param><decl><type><name>parse_context_t</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>int</name></type> <name>c</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>ungotten_char</name></name> = <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>have_ungotten_char</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>APR_INLINE</name> <name>svn_error_t</name> *</type>
<name>skip_whitespace</name><parameter_list>(<param><decl><type><name>parse_context_t</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>int</name> *</type><name>c</name></decl></param>, <param><decl><type><name>int</name> *</type><name>pcount</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>parser_getc</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr>&amp;<name>ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ch</name> != <name>EOF</name> &amp;&amp; <name>ch</name> != '\n' &amp;&amp; <call><name>apr_isspace</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr>++<name>count</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>parser_getc</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr>&amp;<name>ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr>*<name>pcount</name> = <name>count</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>c</name> = <name>ch</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>APR_INLINE</name> <name>svn_error_t</name> *</type>
<name>skip_to_eoln</name><parameter_list>(<param><decl><type><name>parse_context_t</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>int</name> *</type><name>c</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>parser_getc</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr>&amp;<name>ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ch</name> != <name>EOF</name> &amp;&amp; <name>ch</name> != '\n'</expr>)</condition>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>parser_getc</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr>&amp;<name>ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></while>
<expr_stmt><expr>*<name>c</name> = <name>ch</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>parse_value</name><parameter_list>(<param><decl><type><name>int</name> *</type><name>pch</name></decl></param>, <param><decl><type><name>parse_context_t</name> *</type><name>ctx</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>end_of_val</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_setempty</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>parser_getc</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr>&amp;<name>ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ch</name> != <name>EOF</name> &amp;&amp; <name>ch</name> != '\n'</expr>)</condition>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name>char_from_int</name> <init>= <expr><name>ch</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>value</name></name></expr></argument>, <argument><expr>&amp;<name>char_from_int</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>parser_getc</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr>&amp;<name>ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>svn_stringbuf_strip_whitespace</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init>;</init><condition>;</condition><incr/>) <block>{
<if>if <condition>(<expr><name>ch</name> == <name>EOF</name> || <name>end_of_val</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_config_set</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>cfg</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>section</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>option</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>value</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
<expr_stmt><expr>++<name><name>ctx</name>-&gt;<name>line</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>skip_whitespace</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr>&amp;<name>ch</name></expr></argument>, <argument><expr>&amp;<name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{
<case>case <expr>'\n'</expr>:
<expr_stmt><expr>++<name><name>ctx</name>-&gt;<name>line</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>end_of_val</name> = <name>TRUE</name></expr>;</expr_stmt>
<continue>continue;</continue>
</case><case>case <expr><name>EOF</name></expr>:
<expr_stmt><expr><name>end_of_val</name> = <name>TRUE</name></expr>;</expr_stmt>
<continue>continue;</continue>
</case><default>default:
<if>if <condition>(<expr><name>count</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>parser_ungetc</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>end_of_val</name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>value</name></name></expr></argument>, <argument><expr>" "</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ch</name> != <name>EOF</name> &amp;&amp; <name>ch</name> != '\n'</expr>)</condition> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name>char_from_int</name> <init>= <expr><name>ch</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>value</name></name></expr></argument>,
<argument><expr>&amp;<name>char_from_int</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>parser_getc</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr>&amp;<name>ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>svn_stringbuf_strip_whitespace</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
</default>}</block></switch>
}</block></else></if>
}</block></for>
<expr_stmt><expr>*<name>pch</name> = <name>ch</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>parse_option</name><parameter_list>(<param><decl><type><name>int</name> *</type><name>pch</name></decl></param>, <param><decl><type><name>parse_context_t</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_setempty</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>option</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ch</name> = *<name>pch</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ch</name> != <name>EOF</name> &amp;&amp; <name>ch</name> != ':' &amp;&amp; <name>ch</name> != '=' &amp;&amp; <name>ch</name> != '\n'</expr>)</condition> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name>char_from_int</name> <init>= <expr><name>ch</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>option</name></name></expr></argument>, <argument><expr>&amp;<name>char_from_int</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>parser_getc</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr>&amp;<name>ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name>ch</name> != ':' &amp;&amp; <name>ch</name> != '='</expr>)</condition><then> <block>{
<expr_stmt><expr><name>ch</name> = <name>EOF</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_MALFORMED_FILE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"%s:%d: Option must end with ':' or '='"</expr></argument>,
<argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>file</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>svn_stringbuf_strip_whitespace</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>option</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>parse_value</name><argument_list>(<argument><expr>&amp;<name>ch</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr>*<name>pch</name> = <name>ch</name></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>parse_section_name</name><parameter_list>(<param><decl><type><name>int</name> *</type><name>pch</name></decl></param>, <param><decl><type><name>parse_context_t</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_setempty</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>section</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>parser_getc</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr>&amp;<name>ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>ch</name> != <name>EOF</name> &amp;&amp; <name>ch</name> != ']' &amp;&amp; <name>ch</name> != '\n'</expr>)</condition> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name>char_from_int</name> <init>= <expr><name>ch</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>section</name></name></expr></argument>, <argument><expr>&amp;<name>char_from_int</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>parser_getc</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr>&amp;<name>ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name>ch</name> != ']'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>ch</name> = <name>EOF</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_MALFORMED_FILE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"%s:%d: Section header must end with ']'"</expr></argument>,
<argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>file</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>skip_to_eoln</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr>&amp;<name>ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ch</name> != <name>EOF</name></expr>)</condition><then>
<expr_stmt><expr>++<name><name>ctx</name>-&gt;<name>line</name></name></expr>;</expr_stmt></then></if>
}</block></else></if>
<expr_stmt><expr>*<name>pch</name> = <name>ch</name></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_config__sys_config_path</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>path_p</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fname</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>*<name>path_p</name> = <name>NULL</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>folder</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_config__win_config_path</name><argument_list>(<argument><expr>&amp;<name>folder</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>path_p</name> = <call><name>svn_path_join_many</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>folder</name></expr></argument>,
<argument><expr><name>SVN_CONFIG__SUBDIRECTORY</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr>*<name>path_p</name> = <call><name>svn_path_join_many</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>SVN_CONFIG__SYS_DIRECTORY</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_config__user_config_path</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>config_dir</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>path_p</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fname</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>*<name>path_p</name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>config_dir</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>path_p</name> = <call><name>svn_path_join_many</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>config_dir</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>folder</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_config__win_config_path</name><argument_list>(<argument><expr>&amp;<name>folder</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>path_p</name> = <call><name>svn_path_join_many</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>folder</name></expr></argument>,
<argument><expr><name>SVN_CONFIG__SUBDIRECTORY</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>homedir</name> <init>= <expr><call><name>svn_user_get_homedir</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>! <name>homedir</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr>*<name>path_p</name> = <call><name>svn_path_join_many</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr><call><name>svn_path_canonicalize</name><argument_list>(<argument><expr><name>homedir</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>SVN_CONFIG__USR_DIRECTORY</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_config__parse_file</name><parameter_list>(<param><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>must_exist</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>parse_context_t</name></type> <name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>f</name></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_io_file_open</name><argument_list>(<argument><expr>&amp;<name>f</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>APR_BINARY</name> | <name>APR_READ</name></expr></argument>,
<argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>must_exist</name> &amp;&amp; <name>err</name> &amp;&amp; <call><name>APR_STATUS_IS_ENOENT</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>apr_err</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then> <else>else
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name><name>ctx</name>.<name>cfg</name></name> = <name>cfg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>.<name>file</name></name> = <name>file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>.<name>stream</name></name> = <call><name>svn_subst_stream_translated</name><argument_list>(<argument><expr><call><name>svn_stream_from_aprfile</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"\n"</expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>.<name>line</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>.<name>have_ungotten_char</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>.<name>section</name></name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>.<name>option</name></name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>.<name>value</name></name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>skip_whitespace</name><argument_list>(<argument><expr>&amp;<name>ctx</name></expr></argument>, <argument><expr>&amp;<name>ch</name></expr></argument>, <argument><expr>&amp;<name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{
<case>case <expr>'['</expr>:
<if>if <condition>(<expr><name>count</name> == 0</expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>parse_section_name</name><argument_list>(<argument><expr>&amp;<name>ch</name></expr></argument>, <argument><expr>&amp;<name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_MALFORMED_FILE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"%s:%d: Section header"
" must start in the first column"</expr></argument>,
<argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>ctx</name>.<name>line</name></name></expr></argument>)</argument_list></call></expr>;</return></else></if>
<break>break;</break>
</case><case>case <expr>'#'</expr>:
<if>if <condition>(<expr><name>count</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>skip_to_eoln</name><argument_list>(<argument><expr>&amp;<name>ctx</name></expr></argument>, <argument><expr>&amp;<name>ch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>++<name><name>ctx</name>.<name>line</name></name></expr>;</expr_stmt>
}</block></then> <else>else
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_MALFORMED_FILE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"%s:%d: Comment"
" must start in the first column"</expr></argument>,
<argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>ctx</name>.<name>line</name></name></expr></argument>)</argument_list></call></expr>;</return></else></if>
<break>break;</break>
</case><case>case <expr>'\n'</expr>:
<expr_stmt><expr>++<name><name>ctx</name>.<name>line</name></name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>EOF</name></expr>:
<break>break;</break>
</case><default>default:
<if>if <condition>(<expr><call><name>svn_stringbuf_isempty</name><argument_list>(<argument><expr><name><name>ctx</name>.<name>section</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_MALFORMED_FILE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"%s:%d: Section header expected"</expr></argument>,
<argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>ctx</name>.<name>line</name></name></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else <if>if <condition>(<expr><name>count</name> != 0</expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_MALFORMED_FILE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"%s:%d: Option expected"</expr></argument>,
<argument><expr><call><name>svn_path_local_style</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>ctx</name>.<name>line</name></name></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>parse_option</name><argument_list>(<argument><expr>&amp;<name>ch</name></expr></argument>, <argument><expr>&amp;<name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>
<break>break;</break>
</default>}</block></switch>
}</block> while <condition>(<expr><name>ch</name> != <name>EOF</name></expr>)</condition>;</do>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_close</name><argument_list>(<argument><expr><name><name>ctx</name>.<name>stream</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_close</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ensure_auth_dirs</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>auth_dir</name></decl>, *<decl><type ref="prev"/><name>auth_subdir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><name>auth_dir</name> = <call><name>svn_path_join_many</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>SVN_CONFIG__AUTH_SUBDIR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_io_check_path</name><argument_list>(<argument><expr><name>auth_dir</name></expr></argument>, <argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> || <name>kind</name> == <name>svn_node_none</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_io_dir_make</name><argument_list>(<argument><expr><name>auth_dir</name></expr></argument>,
<argument><expr>(<name>APR_UREAD</name> | <name>APR_UWRITE</name> | <name>APR_UEXECUTE</name>)</expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>auth_subdir</name> = <call><name>svn_path_join_many</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>auth_dir</name></expr></argument>,
<argument><expr><name>SVN_AUTH_CRED_SIMPLE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_io_check_path</name><argument_list>(<argument><expr><name>auth_subdir</name></expr></argument>, <argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> || <name>kind</name> == <name>svn_node_none</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name>svn_io_dir_make</name><argument_list>(<argument><expr><name>auth_subdir</name></expr></argument>, <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>auth_subdir</name> = <call><name>svn_path_join_many</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>auth_dir</name></expr></argument>,
<argument><expr><name>SVN_AUTH_CRED_USERNAME</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_io_check_path</name><argument_list>(<argument><expr><name>auth_subdir</name></expr></argument>, <argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> || <name>kind</name> == <name>svn_node_none</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name>svn_io_dir_make</name><argument_list>(<argument><expr><name>auth_subdir</name></expr></argument>, <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>auth_subdir</name> = <call><name>svn_path_join_many</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>auth_dir</name></expr></argument>,
<argument><expr><name>SVN_AUTH_CRED_SSL_SERVER_TRUST</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_io_check_path</name><argument_list>(<argument><expr><name>auth_subdir</name></expr></argument>, <argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> || <name>kind</name> == <name>svn_node_none</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name>svn_io_dir_make</name><argument_list>(<argument><expr><name>auth_subdir</name></expr></argument>, <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_config_ensure</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>config_dir</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_config__user_config_path</name><argument_list>(<argument><expr><name>config_dir</name></expr></argument>, <argument><expr>&amp;<name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>path</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>err</name> = <call><name>svn_io_check_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>kind</name> == <name>svn_node_none</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>svn_io_dir_make</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name>kind</name> == <name>svn_node_file</name></expr>)</condition><then> <block>{
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if></else></if>
<expr_stmt><expr><call><name>ensure_auth_dirs</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_config__user_config_path</name>
<argument_list>(<argument><expr><name>config_dir</name></expr></argument>, <argument><expr>&amp;<name>path</name></expr></argument>, <argument><expr><name>SVN_CONFIG__USR_README_FILE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>path</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>err</name> = <call><name>svn_io_check_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>kind</name> == <name>svn_node_none</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>contents</name> <init>=
<expr>"This directory holds run-time configuration information for Subversion" <name>NL</name>
"clients. The configuration files all share the same syntax, but you" <name>NL</name>
"should examine a particular file to learn what configuration" <name>NL</name>
"directives are valid for that file." <name>NL</name>
"" <name>NL</name>
"The syntax is standard INI format:" <name>NL</name>
"" <name>NL</name>
" - Empty lines, and lines starting with '#', are ignored." <name>NL</name>
" The first significant line in a file must be a section header." <name>NL</name>
"" <name>NL</name>
" - A section starts with a section header, which must start in" <name>NL</name>
" the first column:" <name>NL</name>
"" <name>NL</name>
" [section-name]" <name>NL</name>
"" <name>NL</name>
" - An option, which must always appear within a section, is a pair" <name>NL</name>
" (name, value). There are two valid forms for defining an" <name>NL</name>
" option, both of which must start in the first column:" <name>NL</name>
"" <name>NL</name>
" name: value" <name>NL</name>
" name = value" <name>NL</name>
"" <name>NL</name>
" Whitespace around the separator (:, =) is optional." <name>NL</name>
"" <name>NL</name>
" - Section and option names are case-insensitive, but case is" <name>NL</name>
" preserved." <name>NL</name>
"" <name>NL</name>
" - An option's value may be broken into several lines. The value" <name>NL</name>
" continuation lines must start with at least one whitespace." <name>NL</name>
" Trailing whitespace in the previous line, the newline character" <name>NL</name>
" and the leading whitespace in the continuation line is compressed" <name>NL</name>
" into a single space character." <name>NL</name>
"" <name>NL</name>
" - All leading and trailing whitespace around a value is trimmed," <name>NL</name>
" but the whitespace within a value is preserved, with the" <name>NL</name>
" exception of whitespace around line continuations, as" <name>NL</name>
" described above." <name>NL</name>
"" <name>NL</name>
" - When a value is a boolean, any of the following strings are" <name>NL</name>
" recognised as truth values (case does not matter):" <name>NL</name>
"" <name>NL</name>
" true false" <name>NL</name>
" yes no" <name>NL</name>
" on off" <name>NL</name>
" 1 0" <name>NL</name>
"" <name>NL</name>
" - When a value is a list, it is comma-separated. Again, the" <name>NL</name>
" whitespace around each element of the list is trimmed." <name>NL</name>
"" <name>NL</name>
" - Option values may be expanded within a value by enclosing the" <name>NL</name>
" option name in parentheses, preceded by a percent sign and" <name>NL</name>
" followed by an 's':" <name>NL</name>
"" <name>NL</name>
" %(name)s" <name>NL</name>
"" <name>NL</name>
" The expansion is performed recursively and on demand, during" <name>NL</name>
" svn_option_get. The name is first searched for in the same" <name>NL</name>
" section, then in the special [DEFAULT] section. If the name" <name>NL</name>
" is not found, the whole '%(name)s' placeholder is left" <name>NL</name>
" unchanged." <name>NL</name>
"" <name>NL</name>
" Any modifications to the configuration data invalidate all" <name>NL</name>
" previously expanded values, so that the next svn_option_get" <name>NL</name>
" will take the modifications into account." <name>NL</name>
"" <name>NL</name>
"The syntax of the configuration files is a subset of the one used by" <name>NL</name>
"Python's ConfigParser module; see" <name>NL</name>
"" <name>NL</name>
" http://www.python.org/doc/current/lib/module-ConfigParser.html" <name>NL</name>
"" <name>NL</name>
"Configuration data in the Windows registry" <name>NL</name>
"==========================================" <name>NL</name>
"" <name>NL</name>
"On Windows, configuration data may also be stored in the registry. The" <name>NL</name>
"functions svn_config_read and svn_config_merge will read from the" <name>NL</name>
"registry when passed file names of the form:" <name>NL</name>
"" <name>NL</name>
" REGISTRY:&lt;hive&gt;/path/to/config-key" <name>NL</name>
"" <name>NL</name>
"The REGISTRY: prefix must be in upper case. The &lt;hive&gt; part must be" <name>NL</name>
"one of:" <name>NL</name>
"" <name>NL</name>
" HKLM for HKEY_LOCAL_MACHINE" <name>NL</name>
" HKCU for HKEY_CURRENT_USER" <name>NL</name>
"" <name>NL</name>
"The values in config-key represent the options in the [DEFAULT] section."<name>NL</name>
"The keys below config-key represent other sections, and their values" <name>NL</name>
"represent the options. Only values of type REG_SZ whose name doesn't" <name>NL</name>
"start with a '#' will be used; other values, as well as the keys'" <name>NL</name>
"default values, will be ignored." <name>NL</name>
"" <name>NL</name>
"" <name>NL</name>
"File locations" <name>NL</name>
"==============" <name>NL</name>
"" <name>NL</name>
"Typically, Subversion uses two config directories, one for site-wide" <name>NL</name>
"configuration," <name>NL</name>
"" <name>NL</name>
" Unix:" <name>NL</name>
" /etc/subversion/servers" <name>NL</name>
" /etc/subversion/config" <name>NL</name>
" /etc/subversion/hairstyles" <name>NL</name>
" Windows:" <name>NL</name>
" %ALLUSERSPROFILE%\\Application Data\\Subversion\\servers" <name>NL</name>
" %ALLUSERSPROFILE%\\Application Data\\Subversion\\config" <name>NL</name>
" %ALLUSERSPROFILE%\\Application Data\\Subversion\\hairstyles" <name>NL</name>
" REGISTRY:HKLM\\Software\\Tigris.org\\Subversion\\Servers" <name>NL</name>
" REGISTRY:HKLM\\Software\\Tigris.org\\Subversion\\Config" <name>NL</name>
" REGISTRY:HKLM\\Software\\Tigris.org\\Subversion\\Hairstyles" <name>NL</name>
"" <name>NL</name>
"and one for per-user configuration:" <name>NL</name>
"" <name>NL</name>
" Unix:" <name>NL</name>
" ~/.subversion/servers" <name>NL</name>
" ~/.subversion/config" <name>NL</name>
" ~/.subversion/hairstyles" <name>NL</name>
" Windows:" <name>NL</name>
" %APPDATA%\\Subversion\\servers" <name>NL</name>
" %APPDATA%\\Subversion\\config" <name>NL</name>
" %APPDATA%\\Subversion\\hairstyles" <name>NL</name>
" REGISTRY:HKCU\\Software\\Tigris.org\\Subversion\\Servers" <name>NL</name>
" REGISTRY:HKCU\\Software\\Tigris.org\\Subversion\\Config" <name>NL</name>
" REGISTRY:HKCU\\Software\\Tigris.org\\Subversion\\Hairstyles" <name>NL</name>
"" <name>NL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_io_file_open</name><argument_list>(<argument><expr>&amp;<name>f</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
<argument><expr>(<name>APR_WRITE</name> | <name>APR_CREATE</name> | <name>APR_EXCL</name>)</expr></argument>,
<argument><expr><name>APR_OS_DEFAULT</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_write_full</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>contents</name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>contents</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_close</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_config__user_config_path</name>
<argument_list>(<argument><expr><name>config_dir</name></expr></argument>, <argument><expr>&amp;<name>path</name></expr></argument>, <argument><expr><name>SVN_CONFIG_CATEGORY_SERVERS</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>path</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>err</name> = <call><name>svn_io_check_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>kind</name> == <name>svn_node_none</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>contents</name> <init>=
<expr>"###This file specifies server-specific protocol parameters," <name>NL</name>
"###including HTTP proxy information, and HTTP timeout settings." <name>NL</name>
"###" <name>NL</name>
"###The currently defined server options are:" <name>NL</name>
"###http-proxy-host Proxy host for HTTP connection" <name>NL</name>
"###http-proxy-port Port number of proxy host service" <name>NL</name>
"###http-proxy-username Username for auth to proxy service"<name>NL</name>
"###http-proxy-password Password for auth to proxy service"<name>NL</name>
"###http-proxy-exceptions List of sites that do not use proxy"
<name>NL</name>
"###http-timeout Timeout for HTTP requests in seconds"
<name>NL</name>
"###http-compression Whether to compress HTTP requests" <name>NL</name>
"###neon-debug-mask Debug mask for Neon HTTP library" <name>NL</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SVN_NEON_0_26</name></expr></argument>)</argument_list></call></expr></cpp:if>
"###http-auth-types Auth types to use for HTTP library"<name>NL</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
"###ssl-authority-files List of files, each of a trusted CAs"
<name>NL</name>
"###ssl-trust-default-ca Trust the system 'default' CAs" <name>NL</name>
"###ssl-client-cert-file PKCS#12 format client certificate file"
<name>NL</name>
"###ssl-client-cert-password Client Key password, if needed." <name>NL</name>
"###ssl-pkcs11-provider Name of PKCS#11 provider to use." <name>NL</name>
"###http-library Which library to use for http/https"
<name>NL</name>
"###connections (neon or serf)" <name>NL</name>
"###" <name>NL</name>
"###HTTP timeouts, if given, are specified in seconds. A timeout" <name>NL</name>
"###of 0, i.e. zero, causes a builtin default to be used." <name>NL</name>
"###" <name>NL</name>
"###The commented-out examples below are intended only to" <name>NL</name>
"###demonstrate how to use this file; any resemblance to actual" <name>NL</name>
"###servers, living or dead, is entirely coincidental." <name>NL</name>
"" <name>NL</name>
"###In this section, the URL of the repository you're trying to" <name>NL</name>
"###access is matched against the patterns on the right. If a" <name>NL</name>
"###match is found, the server info is from the section with the" <name>NL</name>
"###corresponding name." <name>NL</name>
"" <name>NL</name>
"[groups]" <name>NL</name>
"#group1 = *.collab.net" <name>NL</name>
"#othergroup = repository.blarggitywhoomph.com" <name>NL</name>
"#thirdgroup = *.example.com" <name>NL</name>
"" <name>NL</name>
"###Information for the first group:" <name>NL</name>
"#[group1]" <name>NL</name>
"#http-proxy-host = proxy1.some-domain-name.com" <name>NL</name>
"#http-proxy-port = 80" <name>NL</name>
"#http-proxy-username = blah" <name>NL</name>
"#http-proxy-password = doubleblah" <name>NL</name>
"#http-timeout = 60" <name>NL</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SVN_NEON_0_26</name></expr></argument>)</argument_list></call></expr></cpp:if>
"#http-auth-types = basic;digest;negotiate" <name>NL</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
"#neon-debug-mask = 130" <name>NL</name>
"" <name>NL</name>
"###Information for the second group:" <name>NL</name>
"#[othergroup]" <name>NL</name>
"#http-proxy-host = proxy2.some-domain-name.com" <name>NL</name>
"#http-proxy-port = 9000" <name>NL</name>
"#No username and password, so use the defaults below." <name>NL</name>
"" <name>NL</name>
"###You can set default parameters in the 'global' section." <name>NL</name>
"###These parameters apply if no corresponding parameter is set in" <name>NL</name>
"###a specifically matched group as shown above. Thus, if you go" <name>NL</name>
"###through the same proxy server to reach every site on the" <name>NL</name>
"###Internet, you probably just want to put that server's" <name>NL</name>
"###information in the 'global' section and not bother with" <name>NL</name>
"###'groups' or any other sections." <name>NL</name>
"###" <name>NL</name>
"###If you go through a proxy for all but a few sites, you can" <name>NL</name>
"###list those exceptions under 'http-proxy-exceptions'. This only"<name>NL</name>
"###overrides defaults, not explicitly matched server names." <name>NL</name>
"###" <name>NL</name>
"###'ssl-authority-files' is a semicolon-delimited list of files," <name>NL</name>
"###each pointing to a PEM-encoded Certificate Authority (CA) " <name>NL</name>
"###SSL certificate. See details above for overriding security " <name>NL</name>
"###due to SSL." <name>NL</name>
"[global]" <name>NL</name>
"#http-proxy-exceptions = *.exception.com, www.internal-site.org" <name>NL</name>
"#http-proxy-host = defaultproxy.whatever.com" <name>NL</name>
"#http-proxy-port = 7000" <name>NL</name>
"#http-proxy-username = defaultusername" <name>NL</name>
"#http-proxy-password = defaultpassword" <name>NL</name>
"#http-compression = no" <name>NL</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SVN_NEON_0_26</name></expr></argument>)</argument_list></call></expr></cpp:if>
"#http-auth-types = basic;digest;negotiate" <name>NL</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
"#No http-timeout, so just use the builtin default." <name>NL</name>
"#No neon-debug-mask, so neon debugging is disabled." <name>NL</name>
"#ssl-authority-files = /path/to/CAcert.pem;/path/to/CAcert2.pem" <name>NL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_io_file_open</name><argument_list>(<argument><expr>&amp;<name>f</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
<argument><expr>(<name>APR_WRITE</name> | <name>APR_CREATE</name> | <name>APR_EXCL</name>)</expr></argument>,
<argument><expr><name>APR_OS_DEFAULT</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_write_full</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>contents</name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>contents</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_close</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_config__user_config_path</name>
<argument_list>(<argument><expr><name>config_dir</name></expr></argument>, <argument><expr>&amp;<name>path</name></expr></argument>, <argument><expr><name>SVN_CONFIG_CATEGORY_CONFIG</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>path</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>err</name> = <call><name>svn_io_check_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>kind</name> == <name>svn_node_none</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>contents</name> <init>=
<expr>"###This file configures various client-side behaviors." <name>NL</name>
"###" <name>NL</name>
"###The commented-out examples below are intended to demonstrate" <name>NL</name>
"###how to use this file." <name>NL</name>
"" <name>NL</name>
"###Section for authentication and authorization customizations." <name>NL</name>
"[auth]" <name>NL</name>
"###Set store-passwords to 'no' to avoid storing passwords in the" <name>NL</name>
"###auth/ area of your config directory. It defaults to 'yes'." <name>NL</name>
"###Note that this option only prevents saving of *new* passwords;" <name>NL</name>
"###it doesn't invalidate existing passwords. (To do that, remove" <name>NL</name>
"###the cache files by hand as described in the Subversion book.)" <name>NL</name>
"#store-passwords = no" <name>NL</name>
"###Set store-auth-creds to 'no' to avoid storing any subversion" <name>NL</name>
"###credentials in the auth/ area of your config directory." <name>NL</name>
"###It defaults to 'yes'. Note that this option only prevents" <name>NL</name>
"###saving of *new* credentials; it doesn't invalidate existing" <name>NL</name>
"###caches. (To do that, remove the cache files by hand.)" <name>NL</name>
"#store-auth-creds = no" <name>NL</name>
"" <name>NL</name>
"###Section for configuring external helper applications." <name>NL</name>
"[helpers]" <name>NL</name>
"###Set editor to the command used to invoke your text editor." <name>NL</name>
"###This will override the environment variables that Subversion" <name>NL</name>
"###examines by default to find this information ($EDITOR, " <name>NL</name>
"###et al)." <name>NL</name>
"#editor-cmd = editor (vi, emacs, notepad, etc.)" <name>NL</name>
"###Set diff-cmd to the absolute path of your 'diff' program." <name>NL</name>
"###This will override the compile-time default, which is to use" <name>NL</name>
"###Subversion's internal diff implementation." <name>NL</name>
"#diff-cmd = diff_program (diff, gdiff, etc.)" <name>NL</name>
"###Set diff3-cmd to the absolute path of your 'diff3' program." <name>NL</name>
"###This will override the compile-time default, which is to use" <name>NL</name>
"###Subversion's internal diff3 implementation." <name>NL</name>
"#diff3-cmd = diff3_program (diff3, gdiff3, etc.)" <name>NL</name>
"###Set diff3-has-program-arg to 'true' or 'yes' if your 'diff3'" <name>NL</name>
"###program accepts the '--diff-program' option." <name>NL</name>
"#diff3-has-program-arg = [true | false]" <name>NL</name>
"###Set merge-tool-cmd to the command used to invoke your external" <name>NL</name>
"###merging tool of choice. Subversion will pass 4 arguments to" <name>NL</name>
"###the specified command: base theirs mine merged" <name>NL</name>
"#merge-tool-cmd = merge_command" <name>NL</name>
"" <name>NL</name>
"###Section for configuring tunnel agents." <name>NL</name>
"[tunnels]" <name>NL</name>
"###Configure svn protocol tunnel schemes here. By default, only" <name>NL</name>
"###the 'ssh' scheme is defined. You can define other schemes to" <name>NL</name>
"###be used with 'svn+scheme://hostname/path' URLs. A scheme" <name>NL</name>
"###definition is simply a command, optionally prefixed by an" <name>NL</name>
"###environment variable name which can override the command if it" <name>NL</name>
"###is defined. The command (or environment variable) may contain" <name>NL</name>
"###arguments, using standard shell quoting for arguments with" <name>NL</name>
"###spaces. The command will be invoked as:" <name>NL</name>
"###&lt;command&gt; &lt;hostname&gt; svnserve -t" <name>NL</name>
"###(If the URL includes a username, then the hostname will be" <name>NL</name>
"###passed to the tunnel agent as &lt;user&gt;@&lt;hostname&gt;.) If the" <name>NL</name>
"###built-in ssh scheme were not predefined, it could be defined" <name>NL</name>
"###as:" <name>NL</name>
"#ssh = $SVN_SSH ssh" <name>NL</name>
"###If you wanted to define a new 'rsh' scheme, to be used with" <name>NL</name>
"###'svn+rsh:' URLs, you could do so as follows:" <name>NL</name>
"#rsh = rsh" <name>NL</name>
"###Or, if you wanted to specify a full path and arguments:" <name>NL</name>
"#rsh = /path/to/rsh -l myusername" <name>NL</name>
"###On Windows, if you are specifying a full path to a command," <name>NL</name>
"###use a forward slash (/) or a paired backslash (\\\\) as the" <name>NL</name>
"###path separator. A single backslash will be treated as an" <name>NL</name>
"###escape for the following character." <name>NL</name>
"" <name>NL</name>
"###Section for configuring miscelleneous Subversion options." <name>NL</name>
"[miscellany]" <name>NL</name>
"###Set global-ignores to a set of whitespace-delimited globs" <name>NL</name>
"###which Subversion will ignore in its 'status' output, and" <name>NL</name>
"###while importing or adding files and directories." <name>NL</name>
"###'*' matches leading dots, e.g. '*.rej' matches '.foo.rej'." <name>NL</name>
"#global-ignores = " <name>SVN_CONFIG__DEFAULT_GLOBAL_IGNORES_LINE_1</name> <name>NL</name>
"#" <name>SVN_CONFIG__DEFAULT_GLOBAL_IGNORES_LINE_2</name> <name>NL</name>
"###Set log-encoding to the default encoding for log messages" <name>NL</name>
"#log-encoding = latin1" <name>NL</name>
"###Set use-commit-times to make checkout/update/switch/revert" <name>NL</name>
"###put last-committed timestamps on every file touched." <name>NL</name>
"#use-commit-times = yes" <name>NL</name>
"###Set no-unlock to prevent 'svn commit' from automatically" <name>NL</name>
"###releasing locks on files." <name>NL</name>
"#no-unlock = yes" <name>NL</name>
"###Set mime-types-file to a MIME type registry file, used to" <name>NL</name>
"###provide hints to Subversion's MIME type auto-detection" <name>NL</name>
"###algorithm." <name>NL</name>
"#mime-types-file = /path/to/mime.types" <name>NL</name>
"###Set preserved-conflict-file-exts to a whitespace-delimited" <name>NL</name>
"###list of patterns matching file extensions which should be" <name>NL</name>
"###preserved in generated conflict file names. By default," <name>NL</name>
"###conflict files use custom extensions." <name>NL</name>
"#preserved-conflict-file-exts = doc ppt xls od?" <name>NL</name>
"###Set enable-auto-props to 'yes' to enable automatic properties" <name>NL</name>
"###for 'svn add' and 'svn import', it defaults to 'no'." <name>NL</name>
"###Automatic properties are defined in the section 'auto-props'." <name>NL</name>
"#enable-auto-props = yes" <name>NL</name>
"###Set interactive-conflicts to 'no' to disable interactive" <name>NL</name>
"###conflict resolution prompting. It defaults to 'yes'." <name>NL</name>
"#interactive-conflicts = no" <name>NL</name>
"" <name>NL</name>
"###Section for configuring automatic properties." <name>NL</name>
"[auto-props]" <name>NL</name>
"###The format of the entries is:" <name>NL</name>
"###file-name-pattern = propname[=value][;propname[=value]...]" <name>NL</name>
"###The file-name-pattern can contain wildcards (such as '*' and" <name>NL</name>
"###'?'). All entries which match (case-insensitively) will be" <name>NL</name>
"###applied to the file. Note that auto-props functionality" <name>NL</name>
"###must be enabled, which is typically done by setting the" <name>NL</name>
"###'enable-auto-props' option." <name>NL</name>
"#*.c = svn:eol-style=native" <name>NL</name>
"#*.cpp = svn:eol-style=native" <name>NL</name>
"#*.h = svn:eol-style=native" <name>NL</name>
"#*.dsp = svn:eol-style=CRLF" <name>NL</name>
"#*.dsw = svn:eol-style=CRLF" <name>NL</name>
"#*.sh = svn:eol-style=native;svn:executable" <name>NL</name>
"#*.txt = svn:eol-style=native" <name>NL</name>
"#*.png = svn:mime-type=image/png" <name>NL</name>
"#*.jpg = svn:mime-type=image/jpeg" <name>NL</name>
"#Makefile = svn:eol-style=native" <name>NL</name>
"" <name>NL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_io_file_open</name><argument_list>(<argument><expr>&amp;<name>f</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
<argument><expr>(<name>APR_WRITE</name> | <name>APR_CREATE</name> | <name>APR_EXCL</name>)</expr></argument>,
<argument><expr><name>APR_OS_DEFAULT</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_write_full</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>contents</name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>contents</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_file_close</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
