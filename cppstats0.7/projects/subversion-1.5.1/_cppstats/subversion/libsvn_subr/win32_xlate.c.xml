<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/libsvn_subr/win32_xlate.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_WIN32_DCOM</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>APR_HAVE_IPV6</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;winsock2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Ws2tcpip.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Wspiapi.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mlang.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_portable.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_utf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"win32_xlate.h"</cpp:file></cpp:include>
<typedef>typedef <type><struct>struct <name>win32_xlate_t</name> <block>{
<decl_stmt><decl><type><name>UINT</name></type> <name>from_page_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UINT</name></type> <name>to_page_id</name></decl>;</decl_stmt>
}</block></struct></type> <name>win32_xlate_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type>
<name>get_page_id_from_name</name><parameter_list>(<param><decl><type><name>UINT</name> *</type><name>page_id_p</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>page_name</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>IMultiLanguage</name> *</type> <name>mlang</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MIMECSETINFO</name></type> <name>page_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WCHAR</name></type> <name><name>ucs2_page_name</name><index>[<expr>128</expr>]</index></name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>page_name</name> == <name>SVN_APR_DEFAULT_CHARSET</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>page_id_p</name> = <name>CP_ACP</name></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>page_name</name> == <name>SVN_APR_LOCALE_CHARSET</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>OSVERSIONINFO</name></type> <name>ver_info</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ver_info</name>.<name>dwOSVersionInfoSize</name></name> = <sizeof>sizeof<argument_list>(<argument><expr><name>ver_info</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>GetVersionEx</name><argument_list>(<argument><expr>&amp;<name>ver_info</name></expr></argument>)</argument_list></call> &amp;&amp; <name><name>ver_info</name>.<name>dwMajorVersion</name></name> &gt;= 5
&amp;&amp; <name><name>ver_info</name>.<name>dwPlatformId</name></name> == <name>VER_PLATFORM_WIN32_NT</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>page_id_p</name> = <name>CP_THREAD_ACP</name></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>page_name</name> = <call><name>apr_os_locale_encoding</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>page_name</name></expr></argument>, <argument><expr>"UTF-8"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>page_id_p</name> = <name>CP_UTF8</name></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if></else></if></else></if>
<if>if <condition>(<expr>(<name><name>page_name</name><index>[<expr>0</expr>]</index></name> == 'c' || <name><name>page_name</name><index>[<expr>0</expr>]</index></name> == 'C')
&amp;&amp; (<name><name>page_name</name><index>[<expr>1</expr>]</index></name> == 'p' || <name><name>page_name</name><index>[<expr>1</expr>]</index></name> == 'P')</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>page_id_p</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>page_name</name> + 2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>hr</name> = <call><name>CoCreateInstance</name><argument_list>(<argument><expr>&amp;<name>CLSID_CMultiLanguage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>CLSCTX_INPROC_SERVER</name></expr></argument>,
<argument><expr>&amp;<name>IID_IMultiLanguage</name></expr></argument>, <argument><expr>(<name>void</name> **) &amp;<name>mlang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>page_name</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name>ucs2_page_name</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ucs2_page_name</name></expr></argument>)</argument_list></sizeof> / <sizeof>sizeof<argument_list>(<argument><expr><name><name>ucs2_page_name</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>page_info</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>page_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hr</name> = <call><name><name>mlang</name>-&gt;<name>lpVtbl</name>-&gt;<name>GetCharsetInfo</name></name><argument_list>(<argument><expr><name>mlang</name></expr></argument>, <argument><expr><name>ucs2_page_name</name></expr></argument>, <argument><expr>&amp;<name>page_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name><name>mlang</name>-&gt;<name>lpVtbl</name>-&gt;<name>Release</name></name><argument_list>(<argument><expr><name>mlang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>page_info</name>.<name>uiInternetEncoding</name></name></expr>)</condition><then>
<expr_stmt><expr>*<name>page_id_p</name> = <name><name>page_info</name>.<name>uiInternetEncoding</name></name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr>*<name>page_id_p</name> = <name><name>page_info</name>.<name>uiCodePage</name></name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name><name>mlang</name>-&gt;<name>lpVtbl</name>-&gt;<name>Release</name></name><argument_list>(<argument><expr><name>mlang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type>
<name>svn_subr__win32_xlate_open</name><parameter_list>(<param><decl><type><name>win32_xlate_t</name> **</type><name>xlate_p</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>topage</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>frompage</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>UINT</name></type> <name>from_page_id</name></decl>, <decl><type ref="prev"/><name>to_page_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>apr_err</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>win32_xlate_t</name> *</type><name>xlate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>hr</name> = <call><name>CoInitializeEx</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>COINIT_APARTMENTTHREADED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>hr</name> == <name>RPC_E_CHANGED_MODE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>hr</name> = <call><name>CoInitializeEx</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>COINIT_MULTITHREADED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return></then></if>
<expr_stmt><expr><name>apr_err</name> = <call><name>get_page_id_from_name</name><argument_list>(<argument><expr>&amp;<name>to_page_id</name></expr></argument>, <argument><expr><name>topage</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>apr_err</name> == <name>APR_SUCCESS</name></expr>)</condition><then>
<expr_stmt><expr><name>apr_err</name> = <call><name>get_page_id_from_name</name><argument_list>(<argument><expr>&amp;<name>from_page_id</name></expr></argument>, <argument><expr><name>frompage</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>apr_err</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>xlate</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>xlate</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xlate</name>-&gt;<name>from_page_id</name></name> = <name>from_page_id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>xlate</name>-&gt;<name>to_page_id</name></name> = <name>to_page_id</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>xlate_p</name> = <name>xlate</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>CoUninitialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>apr_err</name></expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type>
<name>svn_subr__win32_xlate_to_stringbuf</name><parameter_list>(<param><decl><type><name>win32_xlate_t</name> *</type><name>handle</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_data</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>src_length</name></decl></param>,
<param><decl><type><name>svn_stringbuf_t</name> **</type><name>dest</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>WCHAR</name> *</type> <name>wide_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>, <decl><type ref="prev"/><name>wide_size</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>dest</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>src_length</name> == 0</expr>)</condition><then>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return></then></if>
<expr_stmt><expr><name>retval</name> = <call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name><name>handle</name>-&gt;<name>from_page_id</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>src_data</name></expr></argument>, <argument><expr><name>src_length</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>retval</name> == 0</expr>)</condition><then>
<return>return <expr><call><name>apr_get_os_error</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>wide_size</name> = <name>retval</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>wide_size</name> &lt;= <name>MAX_PATH</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>wide_str</name> = <call><name>alloca</name><argument_list>(<argument><expr><name>wide_size</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>wide_str</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>wide_size</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>retval</name> = <call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name><name>handle</name>-&gt;<name>from_page_id</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>src_data</name></expr></argument>, <argument><expr><name>src_length</name></expr></argument>,
<argument><expr><name>wide_str</name></expr></argument>, <argument><expr><name>wide_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>retval</name> == 0</expr>)</condition><then>
<return>return <expr><call><name>apr_get_os_error</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>retval</name> = <call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name><name>handle</name>-&gt;<name>to_page_id</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>wide_str</name></expr></argument>, <argument><expr><name>wide_size</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>retval</name> == 0</expr>)</condition><then>
<return>return <expr><call><name>apr_get_os_error</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>svn_stringbuf_ensure</name><argument_list>(<argument><expr>*<name>dest</name></expr></argument>, <argument><expr><name>retval</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>dest</name>)-&gt;<name>len</name></name> = <name>retval</name></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> = <call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name><name>handle</name>-&gt;<name>to_page_id</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>wide_str</name></expr></argument>, <argument><expr><name>wide_size</name></expr></argument>,
<argument><expr><name>(*<name>dest</name>)-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>(*<name>dest</name>)-&gt;<name>len</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>retval</name> == 0</expr>)</condition><then>
<return>return <expr><call><name>apr_get_os_error</name><argument_list>()</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>(*<name>dest</name>)-&gt;<name>len</name></name> = <name>retval</name></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
