<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/libsvn_subr/compat.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_compat.h"</cpp:file></cpp:include>
<struct>struct <name>commit_wrapper_baton</name> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_commit_callback_t</name></type> <name>callback</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>commit_wrapper_callback</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_commit_info_t</name> *</type><name>commit_info</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>commit_wrapper_baton</name> *</type><name>cwb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>cwb</name>-&gt;<name>callback</name></name></expr>)</condition><then>
<return>return <expr><call><name><name>cwb</name>-&gt;<name>callback</name></name><argument_list>(<argument><expr><name><name>commit_info</name>-&gt;<name>revision</name></name></expr></argument>,
<argument><expr><name><name>commit_info</name>-&gt;<name>date</name></name></expr></argument>,
<argument><expr><name><name>commit_info</name>-&gt;<name>author</name></name></expr></argument>,
<argument><expr><name><name>cwb</name>-&gt;<name>baton</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>svn_compat_wrap_commit_callback</name><parameter_list>(<param><decl><type><name>svn_commit_callback2_t</name> *</type><name>callback2</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>callback2_baton</name></decl></param>,
<param><decl><type><name>svn_commit_callback_t</name></type> <name>callback</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>callback_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>commit_wrapper_baton</name> *</type><name>cwb</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>cwb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cwb</name>-&gt;<name>baton</name></name> = <name>callback_baton</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cwb</name>-&gt;<name>callback</name></name> = <name>callback</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>callback2_baton</name> = <name>cwb</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>callback2</name> = <name>commit_wrapper_callback</name></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type>
<name>svn_compat_log_revprops_clear</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>revprops</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>revprops</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>revprops</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_AUTHOR</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>revprops</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_DATE</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>revprops</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_LOG</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><name>apr_array_header_t</name> *</type>
<name>svn_compat_log_revprops_in</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>revprops</name> <init>= <expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>revprops</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>SVN_PROP_REVISION_AUTHOR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>revprops</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>SVN_PROP_REVISION_DATE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>revprops</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>SVN_PROP_REVISION_LOG</name></expr>;</expr_stmt>
<return>return <expr><name>revprops</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>svn_compat_log_revprops_out</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>author</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>date</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>message</name></decl></param>, <param><decl><type><name>apr_hash_t</name> *</type><name>revprops</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>author_s</name></decl>, *<decl><type ref="prev"/><name>date_s</name></decl>, *<decl><type ref="prev"/><name>message_s</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>author</name> = *<name>date</name> = *<name>message</name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>revprops</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>author_s</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>revprops</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_AUTHOR</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<expr_stmt><expr>*<name>author</name> = <name><name>author_s</name>-&gt;<name>data</name></name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>(<name>date_s</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>revprops</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_DATE</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<expr_stmt><expr>*<name>date</name> = <name><name>date_s</name>-&gt;<name>data</name></name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>(<name>message_s</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>revprops</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_LOG</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<expr_stmt><expr>*<name>message</name> = <name><name>message_s</name>-&gt;<name>data</name></name></expr>;</expr_stmt></then></if>
}</block></then></if>
}</block></function>
<struct>struct <name>log_wrapper_baton</name> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_log_message_receiver_t</name></type> <name>receiver</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>log_wrapper_callback</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>svn_log_entry_t</name> *</type><name>log_entry</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>log_wrapper_baton</name> *</type><name>lwb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>lwb</name>-&gt;<name>receiver</name></name> &amp;&amp; <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name><name>log_entry</name>-&gt;<name>revision</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>author</name></decl>, *<decl><type ref="prev"/><name>date</name></decl>, *<decl><type ref="prev"/><name>message</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_compat_log_revprops_out</name><argument_list>(<argument><expr>&amp;<name>author</name></expr></argument>, <argument><expr>&amp;<name>date</name></expr></argument>, <argument><expr>&amp;<name>message</name></expr></argument>,
<argument><expr><name><name>log_entry</name>-&gt;<name>revprops</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name><name>lwb</name>-&gt;<name>receiver</name></name><argument_list>(<argument><expr><name><name>lwb</name>-&gt;<name>baton</name></name></expr></argument>,
<argument><expr><name><name>log_entry</name>-&gt;<name>changed_paths</name></name></expr></argument>,
<argument><expr><name><name>log_entry</name>-&gt;<name>revision</name></name></expr></argument>,
<argument><expr><name>author</name></expr></argument>, <argument><expr><name>date</name></expr></argument>, <argument><expr><name>message</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>svn_compat_wrap_log_receiver</name><parameter_list>(<param><decl><type><name>svn_log_entry_receiver_t</name> *</type><name>receiver2</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>receiver2_baton</name></decl></param>,
<param><decl><type><name>svn_log_message_receiver_t</name></type> <name>receiver</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>receiver_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>log_wrapper_baton</name> *</type><name>lwb</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>lwb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>lwb</name>-&gt;<name>baton</name></name> = <name>receiver_baton</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lwb</name>-&gt;<name>receiver</name></name> = <name>receiver</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>receiver2_baton</name> = <name>lwb</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>receiver2</name> = <name>log_wrapper_callback</name></expr>;</expr_stmt>
}</block></function>
</unit>
