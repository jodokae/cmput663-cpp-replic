<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/libsvn_subr/svn_base64.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_general.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_base64.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BASE64_LINELEN</name></cpp:macro> <cpp:value>76</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>base64tab</name><index>[]</index></name> <init>= <expr>"ABCDEFGHIJKLMNOPQRSTUVWXYZ"
"abcdefghijklmnopqrstuvwxyz0123456789+/"</expr></init></decl>;</decl_stmt>
<struct>struct <name>encode_baton</name> <block>{
<decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr>3</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buflen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>linelen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>APR_INLINE</name> <name>void</name></type>
<name>encode_group</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type><name>in</name></decl></param>, <param><decl><type><name>char</name> *</type><name>out</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name><name>out</name><index>[<expr>0</expr>]</index></name> = <name><name>base64tab</name><index>[<expr><name><name>in</name><index>[<expr>0</expr>]</index></name> &gt;&gt; 2</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr>1</expr>]</index></name> = <name><name>base64tab</name><index>[<expr>((<name><name>in</name><index>[<expr>0</expr>]</index></name> &amp; 0x3) &lt;&lt; 4) | (<name><name>in</name><index>[<expr>1</expr>]</index></name> &gt;&gt; 4)</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr>2</expr>]</index></name> = <name><name>base64tab</name><index>[<expr>((<name><name>in</name><index>[<expr>1</expr>]</index></name> &amp; 0xf) &lt;&lt; 2) | (<name><name>in</name><index>[<expr>2</expr>]</index></name> &gt;&gt; 6)</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr>3</expr>]</index></name> = <name><name>base64tab</name><index>[<expr><name><name>in</name><index>[<expr>2</expr>]</index></name> &amp; 0x3f</expr>]</index></name></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>encode_bytes</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> *</type><name>str</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>char</name> *</type><name>inbuf</name></decl></param>, <param><decl><type><name>int</name> *</type><name>inbuflen</name></decl></param>, <param><decl><type><name>int</name> *</type><name>linelen</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>group</name><index>[<expr>4</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>p</name> <init>= <expr><name>data</name></expr></init>, *<name>end</name> <init>= <expr><name>data</name> + <name>len</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr>*<name>inbuflen</name> + (<name>end</name> - <name>p</name>) &gt;= 3</expr>)</condition> <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>inbuf</name> + *<name>inbuflen</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr>3 - *<name>inbuflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> += (3 - *<name>inbuflen</name>)</expr>;</expr_stmt>
<expr_stmt><expr><call><name>encode_group</name><argument_list>(<argument><expr><name>inbuf</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>group</name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>inbuflen</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr>*<name>linelen</name> += 4</expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>linelen</name> == <name>BASE64_LINELEN</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr>"\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>linelen</name> = 0</expr>;</expr_stmt>
}</block></then></if>
}</block></while>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>inbuf</name> + *<name>inbuflen</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>end</name> - <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>inbuflen</name> += (<name>end</name> - <name>p</name>)</expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>encode_partial_group</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> *</type><name>str</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type><name>extra</name></decl></param>,
<param><decl><type><name>int</name></type> <name>len</name></decl></param>, <param><decl><type><name>int</name></type> <name>linelen</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>ingroup</name><index>[<expr>3</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>outgroup</name><index>[<expr>4</expr>]</index></name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>len</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ingroup</name></expr></argument>, <argument><expr><name>extra</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ingroup</name> + <name>len</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>3 - <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>encode_group</name><argument_list>(<argument><expr><name>ingroup</name></expr></argument>, <argument><expr><name>outgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>outgroup</name> + (<name>len</name> + 1)</expr></argument>, <argument><expr>'='</expr></argument>, <argument><expr>4 - (<name>len</name> + 1)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>outgroup</name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>linelen</name> += 4</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>linelen</name> &gt; 0</expr>)</condition><then>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr>"\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>encode_data</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>apr_size_t</name> *</type><name>len</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>encode_baton</name> *</type><name>eb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>encoded</name> <init>= <expr><call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>enclen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>encode_bytes</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr>*<name>len</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>buf</name></name></expr></argument>, <argument><expr>&amp;<name><name>eb</name>-&gt;<name>buflen</name></name></expr></argument>, <argument><expr>&amp;<name><name>eb</name>-&gt;<name>linelen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>enclen</name> = <name><name>encoded</name>-&gt;<name>len</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>enclen</name> != 0</expr>)</condition><then>
<expr_stmt><expr><name>err</name> = <call><name>svn_stream_write</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>output</name></name></expr></argument>, <argument><expr><name><name>encoded</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr>&amp;<name>enclen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>finish_encoding_data</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>encode_baton</name> *</type><name>eb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>encoded</name> <init>= <expr><call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>enclen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>encode_partial_group</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>buf</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>buflen</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>linelen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>enclen</name> = <name><name>encoded</name>-&gt;<name>len</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>enclen</name> != 0</expr>)</condition><then>
<expr_stmt><expr><name>err</name> = <call><name>svn_stream_write</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>output</name></name></expr></argument>, <argument><expr><name><name>encoded</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr>&amp;<name>enclen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>err</name> == <name>SVN_NO_ERROR</name></expr>)</condition><then>
<expr_stmt><expr><name>err</name> = <call><name>svn_stream_close</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>svn_stream_t</name> *</type>
<name>svn_base64_encode</name><parameter_list>(<param><decl><type><name>svn_stream_t</name> *</type><name>output</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>encode_baton</name> *</type><name>eb</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>eb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>stream</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>output</name></name> = <name>output</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>buflen</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>linelen</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>pool</name></name> = <name>subpool</name></expr>;</expr_stmt>
<expr_stmt><expr><name>stream</name> = <call><name>svn_stream_create</name><argument_list>(<argument><expr><name>eb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stream_set_write</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>encode_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stream_set_close</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>finish_encoding_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>stream</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>svn_string_t</name> *</type>
<name>svn_base64_encode_string</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>str</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>encoded</name> <init>= <expr><call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>retval</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>retval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>ingroup</name><index>[<expr>3</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ingrouplen</name> <init>= <expr>0</expr></init>, <name>linelen</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>encode_bytes</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>, <argument><expr><name><name>str</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>str</name>-&gt;<name>len</name></name></expr></argument>, <argument><expr><name>ingroup</name></expr></argument>, <argument><expr>&amp;<name>ingrouplen</name></expr></argument>, <argument><expr>&amp;<name>linelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>encode_partial_group</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>, <argument><expr><name>ingroup</name></expr></argument>, <argument><expr><name>ingrouplen</name></expr></argument>, <argument><expr><name>linelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>retval</name>-&gt;<name>data</name></name> = <name><name>encoded</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>retval</name>-&gt;<name>len</name></name> = <name><name>encoded</name>-&gt;<name>len</name></name></expr>;</expr_stmt>
<return>return <expr><name>retval</name></expr>;</return>
}</block></function>
<struct>struct <name>decode_baton</name> <block>{
<decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr>4</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>buflen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>done</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>APR_INLINE</name> <name>void</name></type>
<name>decode_group</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type><name>in</name></decl></param>, <param><decl><type><name>char</name> *</type><name>out</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name><name>out</name><index>[<expr>0</expr>]</index></name> = (<name><name>in</name><index>[<expr>0</expr>]</index></name> &lt;&lt; 2) | (<name><name>in</name><index>[<expr>1</expr>]</index></name> &gt;&gt; 4)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr>1</expr>]</index></name> = ((<name><name>in</name><index>[<expr>1</expr>]</index></name> &amp; 0xf) &lt;&lt; 4) | (<name><name>in</name><index>[<expr>2</expr>]</index></name> &gt;&gt; 2)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>out</name><index>[<expr>2</expr>]</index></name> = ((<name><name>in</name><index>[<expr>2</expr>]</index></name> &amp; 0x3) &lt;&lt; 6) | <name><name>in</name><index>[<expr>3</expr>]</index></name></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>decode_bytes</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> *</type><name>str</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>char</name> *</type><name>inbuf</name></decl></param>, <param><decl><type><name>int</name> *</type><name>inbuflen</name></decl></param>, <param><decl><type><name>svn_boolean_t</name> *</type><name>done</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>p</name></decl>, *<decl><type ref="prev"/><name>find</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>group</name><index>[<expr>3</expr>]</index></name></decl>;</decl_stmt>
<for>for (<init><expr><name>p</name> = <name>data</name></expr>;</init> <condition><expr>!*<name>done</name> &amp;&amp; <name>p</name> &lt; <name>data</name> + <name>len</name></expr>;</condition> <incr><expr><name>p</name>++</expr></incr>) <block>{
<if>if <condition>(<expr>*<name>p</name> == '='</expr>)</condition><then> <block>{
<if>if <condition>(<expr>*<name>inbuflen</name> &gt;= 2</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>inbuf</name> + *<name>inbuflen</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>4 - *<name>inbuflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decode_group</name><argument_list>(<argument><expr><name>inbuf</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>group</name></expr></argument>, <argument><expr>*<name>inbuflen</name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>*<name>done</name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>find</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>base64tab</name></expr></argument>, <argument><expr>*<name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>find</name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name><name>inbuf</name><index>[<expr>(*<name>inbuflen</name>)++</expr>]</index></name> = <name>find</name> - <name>base64tab</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>*<name>inbuflen</name> == 4</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>decode_group</name><argument_list>(<argument><expr><name>inbuf</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>group</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>inbuflen</name> = 0</expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
}</block></for>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>decode_data</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>apr_size_t</name> *</type><name>len</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>decode_baton</name> *</type><name>db</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>decoded</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>declen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>decoded</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>decode_bytes</name><argument_list>(<argument><expr><name>decoded</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr>*<name>len</name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>buf</name></name></expr></argument>, <argument><expr>&amp;<name><name>db</name>-&gt;<name>buflen</name></name></expr></argument>, <argument><expr>&amp;<name><name>db</name>-&gt;<name>done</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>declen</name> = <name><name>decoded</name>-&gt;<name>len</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>declen</name> != 0</expr>)</condition><then>
<expr_stmt><expr><name>err</name> = <call><name>svn_stream_write</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>output</name></name></expr></argument>, <argument><expr><name><name>decoded</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr>&amp;<name>declen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>finish_decoding_data</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>decode_baton</name> *</type><name>db</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_stream_close</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>svn_stream_t</name> *</type>
<name>svn_base64_decode</name><parameter_list>(<param><decl><type><name>svn_stream_t</name> *</type><name>output</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>decode_baton</name> *</type><name>db</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>db</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>stream</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>db</name>-&gt;<name>output</name></name> = <name>output</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>db</name>-&gt;<name>buflen</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>db</name>-&gt;<name>done</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>db</name>-&gt;<name>pool</name></name> = <name>subpool</name></expr>;</expr_stmt>
<expr_stmt><expr><name>stream</name> = <call><name>svn_stream_create</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stream_set_write</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>decode_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stream_set_close</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>finish_decoding_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>stream</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>svn_string_t</name> *</type>
<name>svn_base64_decode_string</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>str</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>decoded</name> <init>= <expr><call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>retval</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>retval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>ingroup</name><index>[<expr>4</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ingrouplen</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>done</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>decode_bytes</name><argument_list>(<argument><expr><name>decoded</name></expr></argument>, <argument><expr><name><name>str</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>str</name>-&gt;<name>len</name></name></expr></argument>, <argument><expr><name>ingroup</name></expr></argument>, <argument><expr>&amp;<name>ingrouplen</name></expr></argument>, <argument><expr>&amp;<name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>retval</name>-&gt;<name>data</name></name> = <name><name>decoded</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>retval</name>-&gt;<name>len</name></name> = <name><name>decoded</name>-&gt;<name>len</name></name></expr>;</expr_stmt>
<return>return <expr><name>retval</name></expr>;</return>
}</block></function>
<function><type><name>svn_stringbuf_t</name> *</type>
<name>svn_base64_from_md5</name><parameter_list>(<param><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[]</index></name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>md5str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>ingroup</name><index>[<expr>3</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ingrouplen</name> <init>= <expr>0</expr></init>, <name>linelen</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>md5str</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>encode_bytes</name><argument_list>(<argument><expr><name>md5str</name></expr></argument>, <argument><expr>(<name>char</name>*)<name>digest</name></expr></argument>, <argument><expr><name>APR_MD5_DIGESTSIZE</name></expr></argument>, <argument><expr><name>ingroup</name></expr></argument>,
<argument><expr>&amp;<name>ingrouplen</name></expr></argument>, <argument><expr>&amp;<name>linelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>encode_partial_group</name><argument_list>(<argument><expr><name>md5str</name></expr></argument>, <argument><expr><name>ingroup</name></expr></argument>, <argument><expr><name>ingrouplen</name></expr></argument>, <argument><expr><name>linelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>(<name>md5str</name>)-&gt;<name>len</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>(<name>md5str</name>)-&gt;<name>len</name></name>--</expr>;</expr_stmt>
<expr_stmt><expr><name>(<name>md5str</name>)-&gt;<name>data</name></name><index>[<expr><name>(<name>md5str</name>)-&gt;<name>len</name></name></expr>]</index> = 0</expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>md5str</name></expr>;</return>
}</block></function>
</unit>
