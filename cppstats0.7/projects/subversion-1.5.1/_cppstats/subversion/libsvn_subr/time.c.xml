<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/libsvn_subr/time.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_utf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> * <specifier>const</specifier></type> <name>timestamp_format</name> <init>=
<expr>"%04d-%02d-%02dT%02d:%02d:%02d.%06dZ"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> * <specifier>const</specifier></type> <name>old_timestamp_format</name> <init>=
<expr>"%3s %d %3s %d %02d:%02d:%02d.%06d (day %03d, dst %d, gmt_off %06d)"</expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_TIME__MAX_LENGTH</name></cpp:macro> <cpp:value>80</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> * <specifier>const</specifier></type> <name>human_timestamp_format</name> <init>=
<expr>"%.4d-%.2d-%.2d %.2d:%.2d:%.2d %+.2d%.2d"</expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>human_timestamp_format_suffix</name></cpp:macro> <cpp:value>_(" (%a, %d %b %Y)")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_SLEEP_ENV_VAR</name></cpp:macro> <cpp:value>"SVN_I_LOVE_CORRUPTED_WORKING_COPIES_SO_DISABLE_SLEEP_FOR_TIMESTAMPS"</cpp:value></cpp:define>
<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_time_to_cstring</name><parameter_list>(<param><decl><type><name>apr_time_t</name></type> <name>when</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>t_cstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_exp_t</name></type> <name>exploded_time</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_time_exp_gmt</name><argument_list>(<argument><expr>&amp;<name>exploded_time</name></expr></argument>, <argument><expr><name>when</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t_cstr</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr><name>timestamp_format</name></expr></argument>,
<argument><expr><name><name>exploded_time</name>.<name>tm_year</name></name> + 1900</expr></argument>,
<argument><expr><name><name>exploded_time</name>.<name>tm_mon</name></name> + 1</expr></argument>,
<argument><expr><name><name>exploded_time</name>.<name>tm_mday</name></name></expr></argument>,
<argument><expr><name><name>exploded_time</name>.<name>tm_hour</name></name></expr></argument>,
<argument><expr><name><name>exploded_time</name>.<name>tm_min</name></name></expr></argument>,
<argument><expr><name><name>exploded_time</name>.<name>tm_sec</name></name></expr></argument>,
<argument><expr><name><name>exploded_time</name>.<name>tm_usec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>t_cstr</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>find_matching_string</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>str</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>size</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>strings</name><index>[]</index><index>[<expr>4</expr>]</index></name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
<if>if <condition>(<expr><name><name>strings</name><index>[<expr><name>i</name></expr>]</index></name> &amp;&amp; (<call><name>strcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>strings</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> == 0)</expr>)</condition><then>
<return>return <expr><name>i</name></expr>;</return></then></if></for>
<return>return <expr>-1</expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_time_from_cstring</name><parameter_list>(<param><decl><type><name>apr_time_t</name> *</type><name>when</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_time_exp_t</name></type> <name>exploded_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>apr_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>wday</name><index>[<expr>4</expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>month</name><index>[<expr>4</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>c</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>exploded_time</name>.<name>tm_year</name></name> = <call><name>strtol</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>c</name>++ != '-'</expr>)</condition><then> <goto>goto <name>fail</name>;</goto></then></if>
<expr_stmt><expr><name><name>exploded_time</name>.<name>tm_mon</name></name> = <call><name>strtol</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>c</name>++ != '-'</expr>)</condition><then> <goto>goto <name>fail</name>;</goto></then></if>
<expr_stmt><expr><name><name>exploded_time</name>.<name>tm_mday</name></name> = <call><name>strtol</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>c</name>++ != 'T'</expr>)</condition><then> <goto>goto <name>fail</name>;</goto></then></if>
<expr_stmt><expr><name><name>exploded_time</name>.<name>tm_hour</name></name> = <call><name>strtol</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>c</name>++ != ':'</expr>)</condition><then> <goto>goto <name>fail</name>;</goto></then></if>
<expr_stmt><expr><name><name>exploded_time</name>.<name>tm_min</name></name> = <call><name>strtol</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>c</name>++ != ':'</expr>)</condition><then> <goto>goto <name>fail</name>;</goto></then></if>
<expr_stmt><expr><name><name>exploded_time</name>.<name>tm_sec</name></name> = <call><name>strtol</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>c</name>++ != '.'</expr>)</condition><then> <goto>goto <name>fail</name>;</goto></then></if>
<expr_stmt><expr><name><name>exploded_time</name>.<name>tm_usec</name></name> = <call><name>strtol</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>c</name>++ != 'Z'</expr>)</condition><then> <goto>goto <name>fail</name>;</goto></then></if>
<expr_stmt><expr><name><name>exploded_time</name>.<name>tm_year</name></name> -= 1900</expr>;</expr_stmt>
<expr_stmt><expr><name><name>exploded_time</name>.<name>tm_mon</name></name> -= 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>exploded_time</name>.<name>tm_wday</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>exploded_time</name>.<name>tm_yday</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>exploded_time</name>.<name>tm_isdst</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>exploded_time</name>.<name>tm_gmtoff</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>apr_err</name> = <call><name>apr_time_exp_gmt_get</name><argument_list>(<argument><expr><name>when</name></expr></argument>, <argument><expr>&amp;<name>exploded_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>apr_err</name> == <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_BAD_DATE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
<label><name>fail</name>:</label>
<if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>data</name></expr></argument>,
<argument><expr><name>old_timestamp_format</name></expr></argument>,
<argument><expr><name>wday</name></expr></argument>,
<argument><expr>&amp;<name><name>exploded_time</name>.<name>tm_mday</name></name></expr></argument>,
<argument><expr><name>month</name></expr></argument>,
<argument><expr>&amp;<name><name>exploded_time</name>.<name>tm_year</name></name></expr></argument>,
<argument><expr>&amp;<name><name>exploded_time</name>.<name>tm_hour</name></name></expr></argument>,
<argument><expr>&amp;<name><name>exploded_time</name>.<name>tm_min</name></name></expr></argument>,
<argument><expr>&amp;<name><name>exploded_time</name>.<name>tm_sec</name></name></expr></argument>,
<argument><expr>&amp;<name><name>exploded_time</name>.<name>tm_usec</name></name></expr></argument>,
<argument><expr>&amp;<name><name>exploded_time</name>.<name>tm_yday</name></name></expr></argument>,
<argument><expr>&amp;<name><name>exploded_time</name>.<name>tm_isdst</name></name></expr></argument>,
<argument><expr>&amp;<name><name>exploded_time</name>.<name>tm_gmtoff</name></name></expr></argument>)</argument_list></call> == 11</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>exploded_time</name>.<name>tm_year</name></name> -= 1900</expr>;</expr_stmt>
<expr_stmt><expr><name><name>exploded_time</name>.<name>tm_yday</name></name> -= 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>exploded_time</name>.<name>tm_wday</name></name> = <call><name>find_matching_string</name><argument_list>(<argument><expr><name>wday</name></expr></argument>, <argument><expr>7</expr></argument>, <argument><expr><name>apr_day_snames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>exploded_time</name>.<name>tm_mon</name></name> = <call><name>find_matching_string</name><argument_list>(<argument><expr><name>month</name></expr></argument>, <argument><expr>12</expr></argument>, <argument><expr><name>apr_month_snames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>apr_err</name> = <call><name>apr_time_exp_gmt_get</name><argument_list>(<argument><expr><name>when</name></expr></argument>, <argument><expr>&amp;<name>exploded_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>apr_err</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_BAD_DATE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then>
<else>else
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_BAD_DATE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_time_to_human_cstring</name><parameter_list>(<param><decl><type><name>apr_time_t</name></type> <name>when</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_time_exp_t</name></type> <name>exploded_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>retlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>datestr</name></decl>, *<decl><type ref="prev"/><name>curptr</name></decl>, <decl><type ref="prev"/><name><name>human_datestr</name><index>[<expr><name>SVN_TIME__MAX_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_time_exp_lt</name><argument_list>(<argument><expr>&amp;<name>exploded_time</name></expr></argument>, <argument><expr><name>when</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>datestr</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>SVN_TIME__MAX_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = <call><name>apr_snprintf</name><argument_list>(<argument><expr><name>datestr</name></expr></argument>,
<argument><expr><name>SVN_TIME__MAX_LENGTH</name></expr></argument>,
<argument><expr><name>human_timestamp_format</name></expr></argument>,
<argument><expr><name><name>exploded_time</name>.<name>tm_year</name></name> + 1900</expr></argument>,
<argument><expr><name><name>exploded_time</name>.<name>tm_mon</name></name> + 1</expr></argument>,
<argument><expr><name><name>exploded_time</name>.<name>tm_mday</name></name></expr></argument>,
<argument><expr><name><name>exploded_time</name>.<name>tm_hour</name></name></expr></argument>,
<argument><expr><name><name>exploded_time</name>.<name>tm_min</name></name></expr></argument>,
<argument><expr><name><name>exploded_time</name>.<name>tm_sec</name></name></expr></argument>,
<argument><expr><name><name>exploded_time</name>.<name>tm_gmtoff</name></name> / (60 * 60)</expr></argument>,
<argument><expr>(<call><name>abs</name><argument_list>(<argument><expr><name><name>exploded_time</name>.<name>tm_gmtoff</name></name></expr></argument>)</argument_list></call> / 60) % 60</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>len</name> &gt;= <name>SVN_TIME__MAX_LENGTH</name></expr>)</condition><then>
<return>return <expr><name>datestr</name></expr>;</return></then></if>
<expr_stmt><expr><name>curptr</name> = <name>datestr</name> + <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> = <call><name>apr_strftime</name><argument_list>(<argument><expr><name>human_datestr</name></expr></argument>,
<argument><expr>&amp;<name>retlen</name></expr></argument>,
<argument><expr><name>SVN_TIME__MAX_LENGTH</name> - <name>len</name></expr></argument>,
<argument><expr><name>human_timestamp_format_suffix</name></expr></argument>,
<argument><expr>&amp;<name>exploded_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ret</name> || <name>retlen</name> == 0</expr>)</condition><then>
<expr_stmt><expr>*<name>curptr</name> = '\0'</expr>;</expr_stmt></then>
<else>else <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>utf8_string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_utf_cstring_to_utf8</name><argument_list>(<argument><expr>&amp;<name>utf8_string</name></expr></argument>, <argument><expr><name>human_datestr</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>curptr</name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><call><name>apr_cpystrn</name><argument_list>(<argument><expr><name>curptr</name></expr></argument>, <argument><expr><name>utf8_string</name></expr></argument>, <argument><expr><name>SVN_TIME__MAX_LENGTH</name> - <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></else></if>
<return>return <expr><name>datestr</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>svn_sleep_for_timestamps</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>now</name></decl>, <decl><type ref="prev"/><name>then</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>sleep_env_var</name></decl>;</decl_stmt>
<expr_stmt><expr><name>sleep_env_var</name> = <call><name>getenv</name><argument_list>(<argument><expr><name>SVN_SLEEP_ENV_VAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>sleep_env_var</name> || <call><name>apr_strnatcasecmp</name><argument_list>(<argument><expr><name>sleep_env_var</name></expr></argument>, <argument><expr>"yes"</expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>now</name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>then</name> = <call><name>apr_time_make</name><argument_list>(<argument><expr><call><name>apr_time_sec</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call> + 1</expr></argument>, <argument><expr><name>APR_USEC_PER_SEC</name> / 10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_sleep</name><argument_list>(<argument><expr><name>then</name> - <name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
</unit>
