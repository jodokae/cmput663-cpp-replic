<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/libsvn_subr/validate.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_lib.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_want.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<function><type><name>svn_error_t</name> *</type>
<name>svn_mime_type_validate</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mime_type</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_size_t</name></type> <name>len</name> <init>= <expr><call><name>strcspn</name><argument_list>(<argument><expr><name>mime_type</name></expr></argument>, <argument><expr>"; "</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *<specifier>const</specifier></type> <name>slash_pos</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>mime_type</name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>len</name> == 0</expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_BAD_MIME_TYPE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"MIME type '%s' has empty media type"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mime_type</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>slash_pos</name> == <name>NULL</name> || <name>slash_pos</name> &gt;= &amp;<name><name>mime_type</name><index>[<expr><name>len</name></expr>]</index></name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_BAD_MIME_TYPE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"MIME type '%s' does not contain '/'"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mime_type</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>! <call><name>apr_isalnum</name><argument_list>(<argument><expr><name><name>mime_type</name><index>[<expr><name>len</name> - 1</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_BAD_MIME_TYPE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"MIME type '%s' ends with non-alphanumeric character"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mime_type</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_boolean_t</name></type>
<name>svn_mime_type_is_binary</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mime_type</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_size_t</name></type> <name>len</name> <init>= <expr><call><name>strcspn</name><argument_list>(<argument><expr><name>mime_type</name></expr></argument>, <argument><expr>"; "</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr>((<call><name>strncmp</name><argument_list>(<argument><expr><name>mime_type</name></expr></argument>, <argument><expr>"text/"</expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call> != 0)
&amp;&amp; (<name>len</name> != 15 || <call><name>strncmp</name><argument_list>(<argument><expr><name>mime_type</name></expr></argument>, <argument><expr>"image/x-xbitmap"</expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> != 0)
&amp;&amp; (<name>len</name> != 15 || <call><name>strncmp</name><argument_list>(<argument><expr><name>mime_type</name></expr></argument>, <argument><expr>"image/x-xpixmap"</expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> != 0)
)</expr>;</return>
}</block></function>
</unit>
