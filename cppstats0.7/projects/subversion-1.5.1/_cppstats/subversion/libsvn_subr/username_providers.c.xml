<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/libsvn_subr/username_providers.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_auth.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_utf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_user.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CLIENT__AUTHFILE_USERNAME_KEY</name></cpp:macro> <cpp:value>"username"</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>username_first_creds</name><parameter_list>(<param><decl><type><name>void</name> **</type><name>credentials</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>iter_baton</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>provider_baton</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>parameters</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realmstring</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>config_dir</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>parameters</name></expr></argument>,
<argument><expr><name>SVN_AUTH_PARAM_CONFIG_DIR</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>username</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>parameters</name></expr></argument>,
<argument><expr><name>SVN_AUTH_PARAM_DEFAULT_USERNAME</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>may_save</name> <init>= <expr>!! <name>username</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<if>if <condition>(<expr>! <name>username</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>creds_hash</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_config_read_auth_data</name><argument_list>(<argument><expr>&amp;<name>creds_hash</name></expr></argument>, <argument><expr><name>SVN_AUTH_CRED_USERNAME</name></expr></argument>,
<argument><expr><name>realmstring</name></expr></argument>, <argument><expr><name>config_dir</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>err</name> &amp;&amp; <name>creds_hash</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>str</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>creds_hash</name></expr></argument>,
<argument><expr><name>SVN_CLIENT__AUTHFILE_USERNAME_KEY</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>str</name> &amp;&amp; <name><name>str</name>-&gt;<name>data</name></name></expr>)</condition><then>
<expr_stmt><expr><name>username</name> = <name><name>str</name>-&gt;<name>data</name></name></expr>;</expr_stmt></then></if>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>! <name>username</name></expr>)</condition><then>
<expr_stmt><expr><name>username</name> = <call><name>svn_user_get_name</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>username</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_auth_cred_simple_t</name> *</type><name>creds</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>creds</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>creds</name>-&gt;<name>username</name></name> = <name>username</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>creds</name>-&gt;<name>may_save</name></name> = <name>may_save</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>credentials</name> = <name>creds</name></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr>*<name>credentials</name> = <name>NULL</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr>*<name>iter_baton</name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>username_save_creds</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>saved</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>credentials</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>provider_baton</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>parameters</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realmstring</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_auth_cred_simple_t</name> *</type><name>creds</name> <init>= <expr><name>credentials</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>creds_hash</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>config_dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>saved</name> = <name>FALSE</name></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name><name>creds</name>-&gt;<name>may_save</name></name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>config_dir</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>parameters</name></expr></argument>,
<argument><expr><name>SVN_AUTH_PARAM_CONFIG_DIR</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>creds_hash</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>creds_hash</name></expr></argument>, <argument><expr><name>SVN_CLIENT__AUTHFILE_USERNAME_KEY</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><call><name>svn_string_create</name><argument_list>(<argument><expr><name><name>creds</name>-&gt;<name>username</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_config_write_auth_data</name><argument_list>(<argument><expr><name>creds_hash</name></expr></argument>, <argument><expr><name>SVN_AUTH_CRED_USERNAME</name></expr></argument>,
<argument><expr><name>realmstring</name></expr></argument>, <argument><expr><name>config_dir</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>saved</name> = ! <name>err</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_auth_provider_t</name></type> <name>username_provider</name> <init>= <expr><block>{
<expr><name>SVN_AUTH_CRED_USERNAME</name></expr>,
<expr><name>username_first_creds</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>username_save_creds</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type>
<name>svn_auth_get_username_provider</name><parameter_list>(<param><decl><type><name>svn_auth_provider_object_t</name> **</type><name>provider</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_auth_provider_object_t</name> *</type><name>po</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>po</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>po</name>-&gt;<name>vtable</name></name> = &amp;<name>username_provider</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>provider</name> = <name>po</name></expr>;</expr_stmt>
}</block></function>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>svn_auth_username_prompt_func_t</name></type> <name>prompt_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>prompt_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retry_limit</name></decl>;</decl_stmt>
}</block></struct></type> <name>username_prompt_provider_baton_t</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>retries</name></decl>;</decl_stmt>
}</block></struct></type> <name>username_prompt_iter_baton_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>prompt_for_username_creds</name><parameter_list>(<param><decl><type><name>svn_auth_cred_username_t</name> **</type><name>cred_p</name></decl></param>,
<param><decl><type><name>username_prompt_provider_baton_t</name> *</type><name>pb</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>parameters</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realmstring</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>first_time</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>may_save</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>def_username</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>cred_p</name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>first_time</name></expr>)</condition><then>
<expr_stmt><expr><name>def_username</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>parameters</name></expr></argument>,
<argument><expr><name>SVN_AUTH_PARAM_DEFAULT_USERNAME</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>def_username</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>cred_p</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>**<name>cred_p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>cred_p</name>)-&gt;<name>username</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>def_username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>cred_p</name>)-&gt;<name>may_save</name></name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>pb</name>-&gt;<name>prompt_func</name></name><argument_list>(<argument><expr><name>cred_p</name></expr></argument>, <argument><expr><name><name>pb</name>-&gt;<name>prompt_baton</name></name></expr></argument>, <argument><expr><name>realmstring</name></expr></argument>,
<argument><expr><name>may_save</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>username_prompt_first_creds</name><parameter_list>(<param><decl><type><name>void</name> **</type><name>credentials_p</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>iter_baton</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>provider_baton</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>parameters</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realmstring</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>username_prompt_provider_baton_t</name> *</type><name>pb</name> <init>= <expr><name>provider_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>username_prompt_iter_baton_t</name> *</type><name>ibaton</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>ibaton</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>no_auth_cache</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>parameters</name></expr></argument>,
<argument><expr><name>SVN_AUTH_PARAM_NO_AUTH_CACHE</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>prompt_for_username_creds</name>
<argument_list>(<argument><expr>(<name>svn_auth_cred_username_t</name> **) <name>credentials_p</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>,
<argument><expr><name>parameters</name></expr></argument>, <argument><expr><name>realmstring</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr>! <name>no_auth_cache</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ibaton</name>-&gt;<name>retries</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr>*<name>iter_baton</name> = <name>ibaton</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>username_prompt_next_creds</name><parameter_list>(<param><decl><type><name>void</name> **</type><name>credentials_p</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>iter_baton</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>provider_baton</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>parameters</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realmstring</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>username_prompt_iter_baton_t</name> *</type><name>ib</name> <init>= <expr><name>iter_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>username_prompt_provider_baton_t</name> *</type><name>pb</name> <init>= <expr><name>provider_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>no_auth_cache</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>parameters</name></expr></argument>,
<argument><expr><name>SVN_AUTH_PARAM_NO_AUTH_CACHE</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>ib</name>-&gt;<name>retries</name></name> &gt;= <name><name>pb</name>-&gt;<name>retry_limit</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>credentials_p</name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>ib</name>-&gt;<name>retries</name></name>++</expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>prompt_for_username_creds</name>
<argument_list>(<argument><expr>(<name>svn_auth_cred_username_t</name> **) <name>credentials_p</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>,
<argument><expr><name>parameters</name></expr></argument>, <argument><expr><name>realmstring</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr>! <name>no_auth_cache</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_auth_provider_t</name></type> <name>username_prompt_provider</name> <init>= <expr><block>{
<expr><name>SVN_AUTH_CRED_USERNAME</name></expr>,
<expr><name>username_prompt_first_creds</name></expr>,
<expr><name>username_prompt_next_creds</name></expr>,
<expr><name>NULL</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type>
<name>svn_auth_get_username_prompt_provider</name>
<parameter_list>(<param><decl><type><name>svn_auth_provider_object_t</name> **</type><name>provider</name></decl></param>,
<param><decl><type><name>svn_auth_username_prompt_func_t</name></type> <name>prompt_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>prompt_baton</name></decl></param>,
<param><decl><type><name>int</name></type> <name>retry_limit</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_auth_provider_object_t</name> *</type><name>po</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>po</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>username_prompt_provider_baton_t</name> *</type><name>pb</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>pb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pb</name>-&gt;<name>prompt_func</name></name> = <name>prompt_func</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pb</name>-&gt;<name>prompt_baton</name></name> = <name>prompt_baton</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pb</name>-&gt;<name>retry_limit</name></name> = <name>retry_limit</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>po</name>-&gt;<name>vtable</name></name> = &amp;<name>username_prompt_provider</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>po</name>-&gt;<name>provider_baton</name></name> = <name>pb</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>provider</name> = <name>po</name></expr>;</expr_stmt>
}</block></function>
</unit>
