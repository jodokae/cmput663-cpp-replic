<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/libsvn_subr/md5.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_md5.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>svn_md5__empty_string_digest</name><index>[]</index></name> <init>= <expr><block>{
<expr>212</expr>, <expr>29</expr>, <expr>140</expr>, <expr>217</expr>, <expr>143</expr>, <expr>0</expr>, <expr>178</expr>, <expr>4</expr>, <expr>233</expr>, <expr>128</expr>, <expr>9</expr>, <expr>152</expr>, <expr>236</expr>, <expr>248</expr>, <expr>66</expr>, <expr>126</expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type>
<name>svn_md5_empty_string_digest</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<return>return <expr><name>svn_md5__empty_string_digest</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_md5_digest_to_cstring_display</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[]</index></name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>hex</name> <init>= <expr>"0123456789abcdef"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>str</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>(<name>APR_MD5_DIGESTSIZE</name> * 2) + 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>APR_MD5_DIGESTSIZE</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name><name>str</name><index>[<expr><name>i</name>*2</expr>]</index></name> = <name><name>hex</name><index>[<expr><name><name>digest</name><index>[<expr><name>i</name></expr>]</index></name> &gt;&gt; 4</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><name>i</name>*2+1</expr>]</index></name> = <name><name>hex</name><index>[<expr><name><name>digest</name><index>[<expr><name>i</name></expr>]</index></name> &amp; 0x0f</expr>]</index></name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name><name>str</name><index>[<expr><name>i</name>*2</expr>]</index></name> = '\0'</expr>;</expr_stmt>
<return>return <expr><name>str</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_md5_digest_to_cstring</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[]</index></name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>zeros_digest</name><index>[<expr><name>APR_MD5_DIGESTSIZE</name></expr>]</index></name> <init>= <expr><block>{ <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name>zeros_digest</name></expr></argument>, <argument><expr><name>APR_MD5_DIGESTSIZE</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<return>return <expr><call><name>svn_md5_digest_to_cstring_display</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else
<return>return <expr><name>NULL</name></expr>;</return></else></if>
}</block></function>
<function><type><name>svn_boolean_t</name></type>
<name>svn_md5_digests_match</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>d1</name><index>[]</index></name></decl></param>, <param><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>d2</name><index>[]</index></name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>zeros</name><index>[<expr><name>APR_MD5_DIGESTSIZE</name></expr>]</index></name> <init>= <expr><block>{ <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>
<return>return <expr>((<call><name>memcmp</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>APR_MD5_DIGESTSIZE</name></expr></argument>)</argument_list></call> == 0)
|| (<call><name>memcmp</name><argument_list>(<argument><expr><name>d2</name></expr></argument>, <argument><expr><name>zeros</name></expr></argument>, <argument><expr><name>APR_MD5_DIGESTSIZE</name></expr></argument>)</argument_list></call> == 0)
|| (<call><name>memcmp</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>, <argument><expr><name>APR_MD5_DIGESTSIZE</name></expr></argument>)</argument_list></call> == 0))</expr>;</return>
}</block></function>
</unit>
