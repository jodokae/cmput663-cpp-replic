<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/libsvn_subr/auth.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_tables.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_auth.h"</cpp:file></cpp:include>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>providers</name></decl>;</decl_stmt>
}</block></struct></type> <name>provider_set_t</name>;</typedef>
<struct>struct <name>svn_auth_baton_t</name> <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>tables</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>parameters</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>creds_cache</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>svn_auth_iterstate_t</name> <block>{
<decl_stmt><decl><type><name>provider_set_t</name> *</type><name>table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>provider_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>got_first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>provider_iter_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realmstring</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cache_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_auth_baton_t</name> *</type><name>auth_baton</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><name>void</name></type>
<name>svn_auth_open</name><parameter_list>(<param><decl><type><name>svn_auth_baton_t</name> **</type><name>auth_baton</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>providers</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_auth_baton_t</name> *</type><name>ab</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_auth_provider_object_t</name> *</type><name>provider</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ab</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>ab</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ab</name>-&gt;<name>tables</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ab</name>-&gt;<name>parameters</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ab</name>-&gt;<name>creds_cache</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ab</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>providers</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>provider_set_t</name> *</type><name>table</name></decl>;</decl_stmt>
<expr_stmt><expr><name>provider</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>providers</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_auth_provider_object_t</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>table</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>ab</name>-&gt;<name>tables</name></name></expr></argument>,
<argument><expr><name><name>provider</name>-&gt;<name>vtable</name>-&gt;<name>cred_kind</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>table</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>table</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>table</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>table</name>-&gt;<name>providers</name></name>
= <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_auth_provider_object_t</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>ab</name>-&gt;<name>tables</name></name></expr></argument>,
<argument><expr><name><name>provider</name>-&gt;<name>vtable</name>-&gt;<name>cred_kind</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name><name>table</name>-&gt;<name>providers</name></name></expr></argument>, <argument><expr><name>svn_auth_provider_object_t</name> *</expr></argument>)</argument_list></call>
= <name>provider</name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr>*<name>auth_baton</name> = <name>ab</name></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type>
<name>svn_auth_set_parameter</name><parameter_list>(<param><decl><type><name>svn_auth_baton_t</name> *</type><name>auth_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>value</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>auth_baton</name>-&gt;<name>parameters</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>const</specifier> <name>void</name> *</type>
<name>svn_auth_get_parameter</name><parameter_list>(<param><decl><type><name>svn_auth_baton_t</name> *</type><name>auth_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>auth_baton</name>-&gt;<name>parameters</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_auth_first_credentials</name><parameter_list>(<param><decl><type><name>void</name> **</type><name>credentials</name></decl></param>,
<param><decl><type><name>svn_auth_iterstate_t</name> **</type><name>state</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cred_kind</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realmstring</name></decl></param>,
<param><decl><type><name>svn_auth_baton_t</name> *</type><name>auth_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>provider_set_t</name> *</type><name>table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_auth_provider_object_t</name> *</type><name>provider</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>creds</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>iter_baton</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>got_first</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_auth_iterstate_t</name> *</type><name>iterstate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cache_key</name></decl>;</decl_stmt>
<expr_stmt><expr><name>table</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>auth_baton</name>-&gt;<name>tables</name></name></expr></argument>, <argument><expr><name>cred_kind</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>table</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_AUTHN_NO_PROVIDER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"No provider registered for '%s' credentials"</expr></argument>,
<argument><expr><name>cred_kind</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>cache_key</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>cred_kind</name></expr></argument>, <argument><expr>":"</expr></argument>, <argument><expr><name>realmstring</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>creds</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>auth_baton</name>-&gt;<name>creds_cache</name></name></expr></argument>,
<argument><expr><name>cache_key</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>creds</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>got_first</name> = <name>FALSE</name></expr>;</expr_stmt>
}</block></then> <else>else
<block>{
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>table</name>-&gt;<name>providers</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>provider</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>table</name>-&gt;<name>providers</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument><expr><name>svn_auth_provider_object_t</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>provider</name>-&gt;<name>vtable</name>-&gt;<name>first_credentials</name></name>
<argument_list>(<argument><expr>&amp;<name>creds</name></expr></argument>, <argument><expr>&amp;<name>iter_baton</name></expr></argument>, <argument><expr><name><name>provider</name>-&gt;<name>provider_baton</name></name></expr></argument>,
<argument><expr><name><name>auth_baton</name>-&gt;<name>parameters</name></name></expr></argument>, <argument><expr><name>realmstring</name></expr></argument>, <argument><expr><name><name>auth_baton</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>creds</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>got_first</name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></for>
}</block></else></if>
<if>if <condition>(<expr>! <name>creds</name></expr>)</condition><then>
<expr_stmt><expr>*<name>state</name> = <name>NULL</name></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><name>iterstate</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>iterstate</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iterstate</name>-&gt;<name>table</name></name> = <name>table</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iterstate</name>-&gt;<name>provider_idx</name></name> = <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iterstate</name>-&gt;<name>got_first</name></name> = <name>got_first</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iterstate</name>-&gt;<name>provider_iter_baton</name></name> = <name>iter_baton</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iterstate</name>-&gt;<name>realmstring</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>realmstring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iterstate</name>-&gt;<name>cache_key</name></name> = <name>cache_key</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iterstate</name>-&gt;<name>auth_baton</name></name> = <name>auth_baton</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>state</name> = <name>iterstate</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>auth_baton</name>-&gt;<name>creds_cache</name></name></expr></argument>,
<argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>auth_baton</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>cache_key</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><name>creds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr>*<name>credentials</name> = <name>creds</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_auth_next_credentials</name><parameter_list>(<param><decl><type><name>void</name> **</type><name>credentials</name></decl></param>,
<param><decl><type><name>svn_auth_iterstate_t</name> *</type><name>state</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_auth_baton_t</name> *</type><name>auth_baton</name> <init>= <expr><name><name>state</name>-&gt;<name>auth_baton</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_auth_provider_object_t</name> *</type><name>provider</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>provider_set_t</name> *</type><name>table</name> <init>= <expr><name><name>state</name>-&gt;<name>table</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>creds</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<for>for (<init>;</init>
<condition><expr><name><name>state</name>-&gt;<name>provider_idx</name></name> &lt; <name><name>table</name>-&gt;<name>providers</name>-&gt;<name>nelts</name></name></expr>;</condition>
<incr><expr><name><name>state</name>-&gt;<name>provider_idx</name></name>++</expr></incr>) <block>{
<expr_stmt><expr><name>provider</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>table</name>-&gt;<name>providers</name></name></expr></argument>,
<argument><expr><name><name>state</name>-&gt;<name>provider_idx</name></name></expr></argument>,
<argument><expr><name>svn_auth_provider_object_t</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name><name>state</name>-&gt;<name>got_first</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>provider</name>-&gt;<name>vtable</name>-&gt;<name>first_credentials</name></name>
<argument_list>(<argument><expr>&amp;<name>creds</name></expr></argument>, <argument><expr>&amp;(<name><name>state</name>-&gt;<name>provider_iter_baton</name></name>)</expr></argument>,
<argument><expr><name><name>provider</name>-&gt;<name>provider_baton</name></name></expr></argument>, <argument><expr><name><name>auth_baton</name>-&gt;<name>parameters</name></name></expr></argument>,
<argument><expr><name><name>state</name>-&gt;<name>realmstring</name></name></expr></argument>, <argument><expr><name><name>auth_baton</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>state</name>-&gt;<name>got_first</name></name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name><name>provider</name>-&gt;<name>vtable</name>-&gt;<name>next_credentials</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>provider</name>-&gt;<name>vtable</name>-&gt;<name>next_credentials</name></name>
<argument_list>(<argument><expr>&amp;<name>creds</name></expr></argument>, <argument><expr><name><name>state</name>-&gt;<name>provider_iter_baton</name></name></expr></argument>,
<argument><expr><name><name>provider</name>-&gt;<name>provider_baton</name></name></expr></argument>, <argument><expr><name><name>auth_baton</name>-&gt;<name>parameters</name></name></expr></argument>,
<argument><expr><name><name>state</name>-&gt;<name>realmstring</name></name></expr></argument>, <argument><expr><name><name>auth_baton</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></else></if>
<if>if <condition>(<expr><name>creds</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>auth_baton</name>-&gt;<name>creds_cache</name></name></expr></argument>,
<argument><expr><name><name>state</name>-&gt;<name>cache_key</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><name>creds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name><name>state</name>-&gt;<name>got_first</name></name> = <name>FALSE</name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr>*<name>credentials</name> = <name>creds</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_auth_save_credentials</name><parameter_list>(<param><decl><type><name>svn_auth_iterstate_t</name> *</type><name>state</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_auth_provider_object_t</name> *</type><name>provider</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>save_succeeded</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>no_auth_cache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_auth_baton_t</name> *</type><name>auth_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>creds</name></decl>;</decl_stmt>
<if>if <condition>(<expr>! <name>state</name> || <name><name>state</name>-&gt;<name>table</name>-&gt;<name>providers</name>-&gt;<name>nelts</name></name> &lt;= <name><name>state</name>-&gt;<name>provider_idx</name></name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>auth_baton</name> = <name><name>state</name>-&gt;<name>auth_baton</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>creds</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>state</name>-&gt;<name>auth_baton</name>-&gt;<name>creds_cache</name></name></expr></argument>,
<argument><expr><name><name>state</name>-&gt;<name>cache_key</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>creds</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>no_auth_cache</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>auth_baton</name>-&gt;<name>parameters</name></name></expr></argument>,
<argument><expr><name>SVN_AUTH_PARAM_NO_AUTH_CACHE</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>no_auth_cache</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>provider</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>state</name>-&gt;<name>table</name>-&gt;<name>providers</name></name></expr></argument>,
<argument><expr><name><name>state</name>-&gt;<name>provider_idx</name></name></expr></argument>,
<argument><expr><name>svn_auth_provider_object_t</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>provider</name>-&gt;<name>vtable</name>-&gt;<name>save_credentials</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>provider</name>-&gt;<name>vtable</name>-&gt;<name>save_credentials</name></name><argument_list>(<argument><expr>&amp;<name>save_succeeded</name></expr></argument>,
<argument><expr><name>creds</name></expr></argument>,
<argument><expr><name><name>provider</name>-&gt;<name>provider_baton</name></name></expr></argument>,
<argument><expr><name><name>auth_baton</name>-&gt;<name>parameters</name></name></expr></argument>,
<argument><expr><name><name>state</name>-&gt;<name>realmstring</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>save_succeeded</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>state</name>-&gt;<name>table</name>-&gt;<name>providers</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>provider</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>state</name>-&gt;<name>table</name>-&gt;<name>providers</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument><expr><name>svn_auth_provider_object_t</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>provider</name>-&gt;<name>vtable</name>-&gt;<name>save_credentials</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>provider</name>-&gt;<name>vtable</name>-&gt;<name>save_credentials</name></name>
<argument_list>(<argument><expr>&amp;<name>save_succeeded</name></expr></argument>, <argument><expr><name>creds</name></expr></argument>,
<argument><expr><name><name>provider</name>-&gt;<name>provider_baton</name></name></expr></argument>, <argument><expr><name><name>auth_baton</name>-&gt;<name>parameters</name></name></expr></argument>,
<argument><expr><name><name>state</name>-&gt;<name>realmstring</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>save_succeeded</name></expr>)</condition><then>
<break>break;</break></then></if>
}</block></for>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_auth_ssl_server_cert_info_t</name> *</type>
<name>svn_auth_ssl_server_cert_info_dup</name>
<parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_auth_ssl_server_cert_info_t</name> *</type><name>info</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_auth_ssl_server_cert_info_t</name> *</type><name>new_info</name>
<init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>new_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>new_info</name> = *<name>info</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_info</name>-&gt;<name>hostname</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>new_info</name>-&gt;<name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_info</name>-&gt;<name>fingerprint</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>new_info</name>-&gt;<name>fingerprint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_info</name>-&gt;<name>valid_from</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>new_info</name>-&gt;<name>valid_from</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_info</name>-&gt;<name>valid_until</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>new_info</name>-&gt;<name>valid_until</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_info</name>-&gt;<name>issuer_dname</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>new_info</name>-&gt;<name>issuer_dname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_info</name>-&gt;<name>ascii_cert</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>new_info</name>-&gt;<name>ascii_cert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>new_info</name></expr>;</return>
}</block></function>
</unit>
