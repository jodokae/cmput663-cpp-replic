<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/libsvn_subr/target.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<function><type><name>svn_error_t</name> *</type>
<name>svn_path_condense_targets</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>pcommon</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> **</type><name>pcondensed_targets</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>targets</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>remove_redundancies</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>num_condensed</name> <init>= <expr><name><name>targets</name>-&gt;<name>nelts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name> *</type><name>removed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>abs_targets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>basedir_len</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>targets</name>-&gt;<name>nelts</name></name> &lt;= 0</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>pcommon</name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>pcondensed_targets</name></expr>)</condition><then>
<expr_stmt><expr>*<name>pcondensed_targets</name> = <name>NULL</name></expr>;</expr_stmt></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_path_get_absolute</name><argument_list>(<argument><expr><name>pcommon</name></expr></argument>,
<argument><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>targets</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>targets</name>-&gt;<name>nelts</name></name> == 1</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>pcondensed_targets</name></expr>)</condition><then>
<expr_stmt><expr>*<name>pcondensed_targets</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>removed</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>(<name><name>targets</name>-&gt;<name>nelts</name></name> * <sizeof>sizeof<argument_list>(<argument><expr><name>svn_boolean_t</name></expr></argument>)</argument_list></sizeof>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>abs_targets</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>targets</name>-&gt;<name>nelts</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>abs_targets</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = *<name>pcommon</name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 1</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>targets</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rel</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>targets</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>absolute</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_path_get_absolute</name><argument_list>(<argument><expr>&amp;<name>absolute</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>abs_targets</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>absolute</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>pcommon</name> = <call><name>svn_path_get_longest_ancestor</name><argument_list>(<argument><expr>*<name>pcommon</name></expr></argument>, <argument><expr><name>absolute</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr><name>pcondensed_targets</name> != <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>remove_redundancies</name></expr>)</condition><then> <block>{
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>abs_targets</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<if>if <condition>(<expr><name><name>removed</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<for>for (<init><expr><name>j</name> = <name>i</name> + 1</expr>;</init> <condition><expr><name>j</name> &lt; <name><name>abs_targets</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>j</name></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>abs_targets_i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>abs_targets_j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ancestor</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>removed</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><name>abs_targets_i</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>abs_targets</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>abs_targets_j</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>abs_targets</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ancestor</name> = <call><name>svn_path_get_longest_ancestor</name>
<argument_list>(<argument><expr><name>abs_targets_i</name></expr></argument>, <argument><expr><name>abs_targets_j</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>ancestor</name> == '\0'</expr>)</condition><then>
<continue>continue;</continue></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>ancestor</name></expr></argument>, <argument><expr><name>abs_targets_i</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>removed</name><index>[<expr><name>j</name></expr>]</index></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>num_condensed</name>--</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>ancestor</name></expr></argument>, <argument><expr><name>abs_targets_j</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>removed</name><index>[<expr><name>i</name></expr>]</index></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>num_condensed</name>--</expr>;</expr_stmt>
}</block></then></if></else></if>
}</block></for>
}</block></for>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>abs_targets</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>abs_targets_i</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>abs_targets</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<call><name>strcmp</name><argument_list>(<argument><expr><name>abs_targets_i</name></expr></argument>, <argument><expr>*<name>pcommon</name></expr></argument>)</argument_list></call> == 0) &amp;&amp; (! <name><name>removed</name><index>[<expr><name>i</name></expr>]</index></name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>removed</name><index>[<expr><name>i</name></expr>]</index></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>num_condensed</name>--</expr>;</expr_stmt>
}</block></then></if>
}</block></for>
}</block></then></if>
<expr_stmt><expr><name>basedir_len</name> = <call><name>strlen</name><argument_list>(<argument><expr>*<name>pcommon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>pcondensed_targets</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>num_condensed</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>abs_targets</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rel_item</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>abs_targets</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>removed</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<if>if <condition>(<expr><name>basedir_len</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>rel_item</name> += <name>basedir_len</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>rel_item</name><index>[<expr>0</expr>]</index></name> &amp;&amp;
! <call><name>svn_dirent_is_root</name><argument_list>(<argument><expr>*<name>pcommon</name></expr></argument>, <argument><expr><name>basedir_len</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>rel_item</name>++</expr>;</expr_stmt></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr>*<name>pcondensed_targets</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call>
= <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>rel_item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_path_remove_redundancies</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> **</type><name>pcondensed_targets</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>targets</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>temp_pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>abs_targets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>rel_targets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name><name>targets</name>-&gt;<name>nelts</name></name> &lt;= 0) || (! <name>pcondensed_targets</name>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>pcondensed_targets</name></expr>)</condition><then>
<expr_stmt><expr>*<name>pcondensed_targets</name> = <name>NULL</name></expr>;</expr_stmt></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>temp_pool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>abs_targets</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>temp_pool</name></expr></argument>, <argument><expr><name><name>targets</name>-&gt;<name>nelts</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rel_targets</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>targets</name>-&gt;<name>nelts</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>targets</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rel_path</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>targets</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>abs_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>keep_me</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_path_get_absolute</name><argument_list>(<argument><expr>&amp;<name>abs_path</name></expr></argument>, <argument><expr><name>rel_path</name></expr></argument>, <argument><expr><name>temp_pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>keep_me</name> = <name>TRUE</name></expr>;</expr_stmt>
<for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name><name>abs_targets</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>keeper</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>abs_targets</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>keeper</name></expr></argument>, <argument><expr><name>abs_path</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>keep_me</name> = <name>FALSE</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><call><name>svn_path_is_child</name><argument_list>(<argument><expr><name>keeper</name></expr></argument>, <argument><expr><name>abs_path</name></expr></argument>, <argument><expr><name>temp_pool</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>keep_me</name> = <name>FALSE</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr><name>keep_me</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>abs_targets</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>abs_path</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>rel_targets</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>rel_path</name></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>temp_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>pcondensed_targets</name> = <name>rel_targets</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
