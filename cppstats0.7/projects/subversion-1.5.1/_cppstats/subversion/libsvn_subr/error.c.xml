<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/libsvn_subr/error.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_general.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_cmdline.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SVN_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>SVN_FILE_LINE_UNDEFINED</name><index>[]</index></name> <init>= <expr>"svn:&lt;undefined&gt;"</expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>svn_error_create</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>svn_error_createf</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>svn_error_quick_wrap</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>svn_error_wrap_apr</name></cpp:undef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>error_file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>long</name></type> <name>error_line</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type>
<name>svn_error__locate</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl></param>, <param><decl><type><name>long</name></type> <name>line</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name>error_file</name> = <name>file</name></expr>;</expr_stmt>
<expr_stmt><expr><name>error_line</name> = <name>line</name></expr>;</expr_stmt>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SVN_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>err_abort</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <name>err</name></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>make_error_internal</name><parameter_list>(<param><decl><type><name>apr_status_t</name></type> <name>apr_err</name></decl></param>,
<param><decl><type><name>svn_error_t</name> *</type><name>child</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>new_error</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>child</name></expr>)</condition><then>
<expr_stmt><expr><name>pool</name> = <name><name>child</name>-&gt;<name>pool</name></name></expr>;</expr_stmt></then>
<else>else <block>{
<if>if <condition>(<expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>pool</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
}</block></else></if>
<expr_stmt><expr><name>new_error</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>new_error</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_error</name>-&gt;<name>apr_err</name></name> = <name>apr_err</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_error</name>-&gt;<name>child</name></name> = <name>child</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_error</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_error</name>-&gt;<name>file</name></name> = <name>error_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_error</name>-&gt;<name>line</name></name> = <name>error_line</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SVN_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr>! <name>child</name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>new_error</name></expr></argument>,
<argument><expr><name>err_abort</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>new_error</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_error_create</name><parameter_list>(<param><decl><type><name>apr_status_t</name></type> <name>apr_err</name></decl></param>,
<param><decl><type><name>svn_error_t</name> *</type><name>child</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>message</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> = <call><name>make_error_internal</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>message</name></expr>)</condition><then>
<expr_stmt><expr><name><name>err</name>-&gt;<name>message</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_error_createf</name><parameter_list>(<param><decl><type><name>apr_status_t</name></type> <name>apr_err</name></decl></param>,
<param><decl><type><name>svn_error_t</name> *</type><name>child</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fmt</name></decl></param>,
<param><decl><type>...</type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> = <call><name>make_error_internal</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>err</name>-&gt;<name>message</name></name> = <call><name>apr_pvsprintf</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_error_wrap_apr</name><parameter_list>(<param><decl><type><name>apr_status_t</name></type> <name>status</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fmt</name></decl></param>,
<param><decl><type>...</type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>, *<decl><type ref="prev"/><name>utf8_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>errbuf</name><index>[<expr>255</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg_apr</name></decl>, *<decl><type ref="prev"/><name>msg</name></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> = <call><name>make_error_internal</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>fmt</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_strerror</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>utf8_err</name> = <call><name>svn_utf_cstring_to_utf8</name><argument_list>(<argument><expr>&amp;<name>msg_apr</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>utf8_err</name></expr>)</condition><then>
<expr_stmt><expr><name>msg_apr</name> = <name>NULL</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>utf8_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>msg</name> = <call><name>apr_pvsprintf</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>err</name>-&gt;<name>message</name></name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"%s%s%s"</expr></argument>, <argument><expr><name>msg</name></expr></argument>,
<argument><expr>(<name>msg_apr</name>) ? ": " : ""</expr></argument>,
<argument><expr>(<name>msg_apr</name>) ? <name>msg_apr</name> : ""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_error_quick_wrap</name><parameter_list>(<param><decl><type><name>svn_error_t</name> *</type><name>child</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>new_msg</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>apr_err</name></name></expr></argument>,
<argument><expr><name>child</name></expr></argument>,
<argument><expr><name>new_msg</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>svn_error_compose</name><parameter_list>(<param><decl><type><name>svn_error_t</name> *</type><name>chain</name></decl></param>, <param><decl><type><name>svn_error_t</name> *</type><name>new_err</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name> <init>= <expr><name><name>chain</name>-&gt;<name>pool</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>oldpool</name> <init>= <expr><name><name>new_err</name>-&gt;<name>pool</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>chain</name>-&gt;<name>child</name></name></expr>)</condition>
<expr_stmt><expr><name>chain</name> = <name><name>chain</name>-&gt;<name>child</name></name></expr>;</expr_stmt></while>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SVN_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>apr_pool_cleanup_kill</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>chain</name></expr></argument>, <argument><expr><name>err_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<while>while <condition>(<expr><name>new_err</name></expr>)</condition> <block>{
<expr_stmt><expr><name><name>chain</name>-&gt;<name>child</name></name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name><name>chain</name>-&gt;<name>child</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>chain</name> = <name><name>chain</name>-&gt;<name>child</name></name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>chain</name> = *<name>new_err</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>chain</name>-&gt;<name>message</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>chain</name>-&gt;<name>message</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>new_err</name>-&gt;<name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>chain</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SVN_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr>! <name><name>new_err</name>-&gt;<name>child</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_pool_cleanup_kill</name><argument_list>(<argument><expr><name>oldpool</name></expr></argument>, <argument><expr><name>new_err</name></expr></argument>, <argument><expr><name>err_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>new_err</name> = <name><name>new_err</name>-&gt;<name>child</name></name></expr>;</expr_stmt>
}</block></while>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SVN_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>chain</name></expr></argument>,
<argument><expr><name>err_abort</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>oldpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_error_root_cause</name><parameter_list>(<param><decl><type><name>svn_error_t</name> *</type><name>err</name></decl></param>)</parameter_list> <block>{
<while>while <condition>(<expr><name>err</name></expr>)</condition> <block>{
<if>if <condition>(<expr><name><name>err</name>-&gt;<name>child</name></name></expr>)</condition><then>
<expr_stmt><expr><name>err</name> = <name><name>err</name>-&gt;<name>child</name></name></expr>;</expr_stmt></then>
<else>else
<break>break;</break></else></if>
}</block></while>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_error_dup</name><parameter_list>(<param><decl><type><name>svn_error_t</name> *</type><name>err</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>new_err</name> <init>= <expr><name>NULL</name></expr></init>, *<name>tmp_err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>pool</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
<for>for (<init>;</init> <condition><expr><name>err</name></expr>;</condition> <incr><expr><name>err</name> = <name><name>err</name>-&gt;<name>child</name></name></expr></incr>) <block>{
<if>if <condition>(<expr>! <name>new_err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>new_err</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>new_err</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_err</name> = <name>new_err</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>tmp_err</name>-&gt;<name>child</name></name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name><name>tmp_err</name>-&gt;<name>child</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_err</name> = <name><name>tmp_err</name>-&gt;<name>child</name></name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr>*<name>tmp_err</name> = *<name>err</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp_err</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>tmp_err</name>-&gt;<name>message</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>tmp_err</name>-&gt;<name>message</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>tmp_err</name>-&gt;<name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SVN_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>tmp_err</name></expr></argument>,
<argument><expr><name>err_abort</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>new_err</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>svn_error_clear</name><parameter_list>(<param><decl><type><name>svn_error_t</name> *</type><name>err</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SVN_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<while>while <condition>(<expr><name><name>err</name>-&gt;<name>child</name></name></expr>)</condition>
<expr_stmt><expr><name>err</name> = <name><name>err</name>-&gt;<name>child</name></name></expr>;</expr_stmt></while>
<expr_stmt><expr><call><name>apr_pool_cleanup_kill</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>err_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>print_error</name><parameter_list>(<param><decl><type><name>svn_error_t</name> *</type><name>err</name></decl></param>, <param><decl><type><name>FILE</name> *</type><name>stream</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prefix</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>errbuf</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err_string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>temp_err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SVN_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file_utf8</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>err</name>-&gt;<name>file</name></name>
&amp;&amp; !(<name>temp_err</name> = <call><name>svn_utf_cstring_to_utf8</name><argument_list>(<argument><expr>&amp;<name>file_utf8</name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>file</name></name></expr></argument>,
<argument><expr><name><name>err</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name>svn_cmdline_fprintf</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"%s:%ld"</expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>file</name></name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>line</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name>svn_cmdline_fputs</name><argument_list>(<argument><expr><name>SVN_FILE_LINE_UNDEFINED</name></expr></argument>,
<argument><expr><name>stream</name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>temp_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name>svn_cmdline_fprintf</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>": (apr_err=%d)\n"</expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>apr_err</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name><name>err</name>-&gt;<name>message</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name>svn_cmdline_fprintf</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"%s%s\n"</expr></argument>,
<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>message</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr>(<name><name>err</name>-&gt;<name>apr_err</name></name> &gt; <name>APR_OS_START_USEERR</name>)
&amp;&amp; (<name><name>err</name>-&gt;<name>apr_err</name></name> &lt;= <name>APR_OS_START_CANONERR</name>)</expr>)</condition><then>
<expr_stmt><expr><name>err_string</name> = <call><name>svn_strerror</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>apr_err</name></name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>(<name>temp_err</name> = <call><name>svn_utf_cstring_to_utf8</name>
<argument_list>(<argument><expr>&amp;<name>err_string</name></expr></argument>, <argument><expr><call><name>apr_strerror</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>apr_err</name></name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>temp_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err_string</name> = <call><name>_</name><argument_list>(<argument><expr>"Can't recode error string from APR"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name>svn_cmdline_fprintf</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"%s%s\n"</expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>err_string</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></function>
<function><type><name>void</name></type>
<name>svn_handle_error</name><parameter_list>(<param><decl><type><name>svn_error_t</name> *</type><name>err</name></decl></param>, <param><decl><type><name>FILE</name> *</type><name>stream</name></decl></param>, <param><decl><type><name>svn_boolean_t</name></type> <name>fatal</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>svn_handle_error2</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>fatal</name></expr></argument>, <argument><expr>"svn: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type>
<name>svn_handle_error2</name><parameter_list>(<param><decl><type><name>svn_error_t</name> *</type><name>err</name></decl></param>,
<param><decl><type><name>FILE</name> *</type><name>stream</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>fatal</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prefix</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>empties</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>subpool</name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>empties</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>apr_status_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>err</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>printed_already</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>! <name><name>err</name>-&gt;<name>message</name></name></expr>)</condition><then> <block>{
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>empties</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>err</name>-&gt;<name>apr_err</name></name> == <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>empties</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>apr_status_t</name></expr></argument>)</argument_list></call></expr> )</condition><then> <block>{
<expr_stmt><expr><name>printed_already</name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></for>
}</block></then></if>
<if>if <condition>(<expr>! <name>printed_already</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>print_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name><name>err</name>-&gt;<name>message</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>empties</name></expr></argument>, <argument><expr><name>apr_status_t</name></expr></argument>)</argument_list></call> = <name><name>err</name>-&gt;<name>apr_err</name></name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>err</name> = <name><name>err</name>-&gt;<name>child</name></name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>fatal</name></expr>)</condition><then>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>
<function><type><name>void</name></type>
<name>svn_handle_warning</name><parameter_list>(<param><decl><type><name>FILE</name> *</type><name>stream</name></decl></param>, <param><decl><type><name>svn_error_t</name> *</type><name>err</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>svn_handle_warning2</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr>"svn: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type>
<name>svn_handle_warning2</name><parameter_list>(<param><decl><type><name>FILE</name> *</type><name>stream</name></decl></param>, <param><decl><type><name>svn_error_t</name> *</type><name>err</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prefix</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name>svn_cmdline_fprintf</name>
<argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"%swarning: %s\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>, <argument><expr><call><name>svn_err_best_message</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>svn_err_best_message</name><parameter_list>(<param><decl><type><name>svn_error_t</name> *</type><name>err</name></decl></param>, <param><decl><type><name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>bufsize</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>err</name>-&gt;<name>message</name></name></expr>)</condition><then>
<return>return <expr><name><name>err</name>-&gt;<name>message</name></name></expr>;</return></then>
<else>else
<return>return <expr><call><name>svn_strerror</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>apr_err</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>svn_errno_t</name></type> <name>errcode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>errdesc</name></decl>;</decl_stmt>
}</block></struct></type> <name>err_defn</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_ERROR_BUILD_ARRAY</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error_codes.h"</cpp:file></cpp:include>
<function><type><name>char</name> *</type>
<name>svn_strerror</name><parameter_list>(<param><decl><type><name>apr_status_t</name></type> <name>statcode</name></decl></param>, <param><decl><type><name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>bufsize</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>err_defn</name> *</type><name>defn</name></decl>;</decl_stmt>
<for>for (<init><expr><name>defn</name> = <name>error_table</name></expr>;</init> <condition><expr><name><name>defn</name>-&gt;<name>errdesc</name></name> != <name>NULL</name></expr>;</condition> <incr><expr>++<name>defn</name></expr></incr>)
<if>if <condition>(<expr><name><name>defn</name>-&gt;<name>errcode</name></name> == (<name>svn_errno_t</name>)<name>statcode</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_cpystrn</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><name><name>defn</name>-&gt;<name>errdesc</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>buf</name></expr>;</return>
}</block></then></if></for>
<return>return <expr><call><name>apr_strerror</name><argument_list>(<argument><expr><name>statcode</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
</unit>
