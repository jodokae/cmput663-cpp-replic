<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/libsvn_subr/simple_providers.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_auth.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_utf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_user.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_AUTH__AUTHFILE_USERNAME_KEY</name></cpp:macro> <cpp:value>"username"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_AUTH__AUTHFILE_PASSWORD_KEY</name></cpp:macro> <cpp:value>"password"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_AUTH__AUTHFILE_PASSTYPE_KEY</name></cpp:macro> <cpp:value>"passtype"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_AUTH__SIMPLE_PASSWORD_TYPE</name></cpp:macro> <cpp:value>"simple"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_AUTH__WINCRYPT_PASSWORD_TYPE</name></cpp:macro> <cpp:value>"wincrypt"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_AUTH__KEYCHAIN_PASSWORD_TYPE</name></cpp:macro> <cpp:value>"keychain"</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>svn_boolean_t</name></type> (*<name>password_set_t</name>)<parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>creds</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realmstring</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>username</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>password</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>non_interactive</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>svn_boolean_t</name></type> (*<name>password_get_t</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>password</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>creds</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realmstring</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>username</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>non_interactive</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl></typedef>
<function><type><specifier>static</specifier> <name>svn_boolean_t</name></type>
<name>simple_password_get</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>password</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>creds</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realmstring</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>username</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>non_interactive</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>str</name></decl>;</decl_stmt>
<expr_stmt><expr><name>str</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>creds</name></expr></argument>, <argument><expr><name>SVN_AUTH__AUTHFILE_USERNAME_KEY</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>str</name> &amp;&amp; <name>username</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>str</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>username</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>str</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>creds</name></expr></argument>, <argument><expr><name>SVN_AUTH__AUTHFILE_PASSWORD_KEY</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>str</name> &amp;&amp; <name><name>str</name>-&gt;<name>data</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>password</name> = <name><name>str</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_boolean_t</name></type>
<name>simple_password_set</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>creds</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realmstring</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>username</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>password</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>non_interactive</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>creds</name></expr></argument>, <argument><expr><name>SVN_AUTH__AUTHFILE_PASSWORD_KEY</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><call><name>svn_string_create</name><argument_list>(<argument><expr><name>password</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>simple_first_creds_helper</name><parameter_list>(<param><decl><type><name>void</name> **</type><name>credentials</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>iter_baton</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>provider_baton</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>parameters</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realmstring</name></decl></param>,
<param><decl><type><name>password_get_t</name></type> <name>password_get</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>passtype</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>config_dir</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>parameters</name></expr></argument>,
<argument><expr><name>SVN_AUTH_PARAM_CONFIG_DIR</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>username</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>parameters</name></expr></argument>,
<argument><expr><name>SVN_AUTH_PARAM_DEFAULT_USERNAME</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>password</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>parameters</name></expr></argument>,
<argument><expr><name>SVN_AUTH_PARAM_DEFAULT_PASSWORD</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>non_interactive</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>parameters</name></expr></argument>,
<argument><expr><name>SVN_AUTH_PARAM_NON_INTERACTIVE</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call> != <name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>may_save</name> <init>= <expr><name>username</name> || <name>password</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<if>if <condition>(<expr>! (<name>username</name> &amp;&amp; <name>password</name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>creds_hash</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_config_read_auth_data</name><argument_list>(<argument><expr>&amp;<name>creds_hash</name></expr></argument>, <argument><expr><name>SVN_AUTH_CRED_SIMPLE</name></expr></argument>,
<argument><expr><name>realmstring</name></expr></argument>, <argument><expr><name>config_dir</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>err</name> &amp;&amp; <name>creds_hash</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>str</name></decl>;</decl_stmt>
<if>if <condition>(<expr>! <name>username</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>str</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>creds_hash</name></expr></argument>,
<argument><expr><name>SVN_AUTH__AUTHFILE_USERNAME_KEY</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>str</name> &amp;&amp; <name><name>str</name>-&gt;<name>data</name></name></expr>)</condition><then>
<expr_stmt><expr><name>username</name> = <name><name>str</name>-&gt;<name>data</name></name></expr>;</expr_stmt></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>username</name> &amp;&amp; ! <name>password</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>have_passtype</name></decl>;</decl_stmt>
<expr_stmt><expr><name>str</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>creds_hash</name></expr></argument>,
<argument><expr><name>SVN_AUTH__AUTHFILE_PASSTYPE_KEY</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>have_passtype</name> = (<name>str</name> &amp;&amp; <name><name>str</name>-&gt;<name>data</name></name>)</expr>;</expr_stmt>
<if>if <condition>(<expr><name>have_passtype</name> &amp;&amp; <name>passtype</name>
&amp;&amp; 0 != <call><name>strcmp</name><argument_list>(<argument><expr><name><name>str</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>passtype</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>password</name> = <name>NULL</name></expr>;</expr_stmt></then>
<else>else <block>{
<if>if <condition>(<expr>!<call><name>password_get</name><argument_list>(<argument><expr>&amp;<name>password</name></expr></argument>, <argument><expr><name>creds_hash</name></expr></argument>, <argument><expr><name>realmstring</name></expr></argument>,
<argument><expr><name>username</name></expr></argument>, <argument><expr><name>non_interactive</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>password</name> = <name>NULL</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>password</name> &amp;&amp; <name>passtype</name> &amp;&amp; !<name>have_passtype</name></expr>)</condition><then>
<expr_stmt><expr><name>may_save</name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
}</block></else></if>
}</block></then></if>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>password</name> &amp;&amp; ! <name>username</name></expr>)</condition><then>
<expr_stmt><expr><name>username</name> = <call><name>svn_user_get_name</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>username</name> &amp;&amp; <name>password</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_auth_cred_simple_t</name> *</type><name>creds</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>creds</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>creds</name>-&gt;<name>username</name></name> = <name>username</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>creds</name>-&gt;<name>password</name></name> = <name>password</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>creds</name>-&gt;<name>may_save</name></name> = <name>may_save</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>credentials</name> = <name>creds</name></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr>*<name>credentials</name> = <name>NULL</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr>*<name>iter_baton</name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>simple_save_creds_helper</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>saved</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>credentials</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>provider_baton</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>parameters</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realmstring</name></decl></param>,
<param><decl><type><name>password_set_t</name></type> <name>password_set</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>passtype</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_auth_cred_simple_t</name> *</type><name>creds</name> <init>= <expr><name>credentials</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>creds_hash</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>config_dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dont_store_passwords</name> <init>=
<expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>parameters</name></expr></argument>,
<argument><expr><name>SVN_AUTH_PARAM_DONT_STORE_PASSWORDS</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>non_interactive</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>parameters</name></expr></argument>,
<argument><expr><name>SVN_AUTH_PARAM_NON_INTERACTIVE</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call> != <name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>password_stored</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>saved</name> = <name>FALSE</name></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name><name>creds</name>-&gt;<name>may_save</name></name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>config_dir</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>parameters</name></expr></argument>,
<argument><expr><name>SVN_AUTH_PARAM_CONFIG_DIR</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>creds_hash</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>creds_hash</name></expr></argument>, <argument><expr><name>SVN_AUTH__AUTHFILE_USERNAME_KEY</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><call><name>svn_string_create</name><argument_list>(<argument><expr><name><name>creds</name>-&gt;<name>username</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>dont_store_passwords</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>password_stored</name> = <call><name>password_set</name><argument_list>(<argument><expr><name>creds_hash</name></expr></argument>, <argument><expr><name>realmstring</name></expr></argument>, <argument><expr><name><name>creds</name>-&gt;<name>username</name></name></expr></argument>,
<argument><expr><name><name>creds</name>-&gt;<name>password</name></name></expr></argument>, <argument><expr><name>non_interactive</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>password_stored</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>passtype</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>creds_hash</name></expr></argument>, <argument><expr><name>SVN_AUTH__AUTHFILE_PASSTYPE_KEY</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><call><name>svn_string_create</name><argument_list>(<argument><expr><name>passtype</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else
<expr_stmt><expr>*<name>saved</name> = <name>FALSE</name></expr>;</expr_stmt></else></if>
}</block></then></if>
<if>if <condition>(<expr><name>password_stored</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>svn_config_write_auth_data</name><argument_list>(<argument><expr><name>creds_hash</name></expr></argument>, <argument><expr><name>SVN_AUTH_CRED_SIMPLE</name></expr></argument>,
<argument><expr><name>realmstring</name></expr></argument>, <argument><expr><name>config_dir</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>saved</name> = ! <name>err</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>simple_first_creds</name><parameter_list>(<param><decl><type><name>void</name> **</type><name>credentials</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>iter_baton</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>provider_baton</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>parameters</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realmstring</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>simple_first_creds_helper</name><argument_list>(<argument><expr><name>credentials</name></expr></argument>,
<argument><expr><name>iter_baton</name></expr></argument>, <argument><expr><name>provider_baton</name></expr></argument>,
<argument><expr><name>parameters</name></expr></argument>, <argument><expr><name>realmstring</name></expr></argument>,
<argument><expr><name>simple_password_get</name></expr></argument>,
<argument><expr><name>SVN_AUTH__SIMPLE_PASSWORD_TYPE</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>simple_save_creds</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>saved</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>credentials</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>provider_baton</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>parameters</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realmstring</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>simple_save_creds_helper</name><argument_list>(<argument><expr><name>saved</name></expr></argument>, <argument><expr><name>credentials</name></expr></argument>, <argument><expr><name>provider_baton</name></expr></argument>,
<argument><expr><name>parameters</name></expr></argument>, <argument><expr><name>realmstring</name></expr></argument>,
<argument><expr><name>simple_password_set</name></expr></argument>,
<argument><expr><name>SVN_AUTH__SIMPLE_PASSWORD_TYPE</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_auth_provider_t</name></type> <name>simple_provider</name> <init>= <expr><block>{
<expr><name>SVN_AUTH_CRED_SIMPLE</name></expr>,
<expr><name>simple_first_creds</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>simple_save_creds</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type>
<name>svn_auth_get_simple_provider</name><parameter_list>(<param><decl><type><name>svn_auth_provider_object_t</name> **</type><name>provider</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_auth_provider_object_t</name> *</type><name>po</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>po</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>po</name>-&gt;<name>vtable</name></name> = &amp;<name>simple_provider</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>provider</name> = <name>po</name></expr>;</expr_stmt>
}</block></function>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>svn_auth_simple_prompt_func_t</name></type> <name>prompt_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>prompt_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retry_limit</name></decl>;</decl_stmt>
}</block></struct></type> <name>simple_prompt_provider_baton_t</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>retries</name></decl>;</decl_stmt>
}</block></struct></type> <name>simple_prompt_iter_baton_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>prompt_for_simple_creds</name><parameter_list>(<param><decl><type><name>svn_auth_cred_simple_t</name> **</type><name>cred_p</name></decl></param>,
<param><decl><type><name>simple_prompt_provider_baton_t</name> *</type><name>pb</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>parameters</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realmstring</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>first_time</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>may_save</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>def_username</name> <init>= <expr><name>NULL</name></expr></init>, *<name>def_password</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>cred_p</name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>first_time</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>def_username</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>parameters</name></expr></argument>,
<argument><expr><name>SVN_AUTH_PARAM_DEFAULT_USERNAME</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>def_username</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>config_dir</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>parameters</name></expr></argument>,
<argument><expr><name>SVN_AUTH_PARAM_CONFIG_DIR</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>creds_hash</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_config_read_auth_data</name><argument_list>(<argument><expr>&amp;<name>creds_hash</name></expr></argument>, <argument><expr><name>SVN_AUTH_CRED_SIMPLE</name></expr></argument>,
<argument><expr><name>realmstring</name></expr></argument>, <argument><expr><name>config_dir</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>err</name> &amp;&amp; <name>creds_hash</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>str</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>creds_hash</name></expr></argument>,
<argument><expr><name>SVN_AUTH__AUTHFILE_USERNAME_KEY</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>str</name> &amp;&amp; <name><name>str</name>-&gt;<name>data</name></name></expr>)</condition><then>
<expr_stmt><expr><name>def_username</name> = <name><name>str</name>-&gt;<name>data</name></name></expr>;</expr_stmt></then></if>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>! <name>def_username</name></expr>)</condition><then>
<expr_stmt><expr><name>def_username</name> = <call><name>svn_user_get_name</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>def_password</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>parameters</name></expr></argument>,
<argument><expr><name>SVN_AUTH_PARAM_DEFAULT_PASSWORD</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>def_username</name> &amp;&amp; <name>def_password</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>cred_p</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>**<name>cred_p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>cred_p</name>)-&gt;<name>username</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>def_username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>cred_p</name>)-&gt;<name>password</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>def_password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>cred_p</name>)-&gt;<name>may_save</name></name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>pb</name>-&gt;<name>prompt_func</name></name><argument_list>(<argument><expr><name>cred_p</name></expr></argument>, <argument><expr><name><name>pb</name>-&gt;<name>prompt_baton</name></name></expr></argument>, <argument><expr><name>realmstring</name></expr></argument>,
<argument><expr><name>def_username</name></expr></argument>, <argument><expr><name>may_save</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>simple_prompt_first_creds</name><parameter_list>(<param><decl><type><name>void</name> **</type><name>credentials_p</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>iter_baton</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>provider_baton</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>parameters</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realmstring</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>simple_prompt_provider_baton_t</name> *</type><name>pb</name> <init>= <expr><name>provider_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>simple_prompt_iter_baton_t</name> *</type><name>ibaton</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>ibaton</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>no_auth_cache</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>parameters</name></expr></argument>,
<argument><expr><name>SVN_AUTH_PARAM_NO_AUTH_CACHE</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>prompt_for_simple_creds</name><argument_list>(<argument><expr>(<name>svn_auth_cred_simple_t</name> **) <name>credentials_p</name></expr></argument>,
<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>parameters</name></expr></argument>, <argument><expr><name>realmstring</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
<argument><expr>! <name>no_auth_cache</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ibaton</name>-&gt;<name>retries</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr>*<name>iter_baton</name> = <name>ibaton</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>simple_prompt_next_creds</name><parameter_list>(<param><decl><type><name>void</name> **</type><name>credentials_p</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>iter_baton</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>provider_baton</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>parameters</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realmstring</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>simple_prompt_iter_baton_t</name> *</type><name>ib</name> <init>= <expr><name>iter_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>simple_prompt_provider_baton_t</name> *</type><name>pb</name> <init>= <expr><name>provider_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>no_auth_cache</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>parameters</name></expr></argument>,
<argument><expr><name>SVN_AUTH_PARAM_NO_AUTH_CACHE</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>ib</name>-&gt;<name>retries</name></name> &gt;= <name><name>pb</name>-&gt;<name>retry_limit</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>credentials_p</name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>ib</name>-&gt;<name>retries</name></name>++</expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>prompt_for_simple_creds</name><argument_list>(<argument><expr>(<name>svn_auth_cred_simple_t</name> **) <name>credentials_p</name></expr></argument>,
<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>parameters</name></expr></argument>, <argument><expr><name>realmstring</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr>! <name>no_auth_cache</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_auth_provider_t</name></type> <name>simple_prompt_provider</name> <init>= <expr><block>{
<expr><name>SVN_AUTH_CRED_SIMPLE</name></expr>,
<expr><name>simple_prompt_first_creds</name></expr>,
<expr><name>simple_prompt_next_creds</name></expr>,
<expr><name>NULL</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type>
<name>svn_auth_get_simple_prompt_provider</name>
<parameter_list>(<param><decl><type><name>svn_auth_provider_object_t</name> **</type><name>provider</name></decl></param>,
<param><decl><type><name>svn_auth_simple_prompt_func_t</name></type> <name>prompt_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>prompt_baton</name></decl></param>,
<param><decl><type><name>int</name></type> <name>retry_limit</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_auth_provider_object_t</name> *</type><name>po</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>po</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>simple_prompt_provider_baton_t</name> *</type><name>pb</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>pb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>pb</name>-&gt;<name>prompt_func</name></name> = <name>prompt_func</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pb</name>-&gt;<name>prompt_baton</name></name> = <name>prompt_baton</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pb</name>-&gt;<name>retry_limit</name></name> = <name>retry_limit</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>po</name>-&gt;<name>vtable</name></name> = &amp;<name>simple_prompt_provider</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>po</name>-&gt;<name>provider_baton</name></name> = <name>pb</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>provider</name> = <name>po</name></expr>;</expr_stmt>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wincrypt.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_base64.h&gt;</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>WCHAR</name></type> <name><name>description</name><index>[]</index></name> <init>= <expr>L"auth_svn.simple.wincrypt"</expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>svn_boolean_t</name></type>
<name>get_crypto_function</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>HINSTANCE</name> *</type><name>pdll</name></decl></param>, <param><decl><type><name>FARPROC</name> *</type><name>pfn</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>dll</name> <init>= <expr><call><name>LoadLibraryA</name><argument_list>(<argument><expr>"Crypt32.dll"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>dll</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>FARPROC</name></type> <name>fn</name> <init>= <expr><call><name>GetProcAddress</name><argument_list>(<argument><expr><name>dll</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>fn</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>pdll</name> = <name>dll</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>pfn</name> = <name>fn</name></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>dll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_boolean_t</name></type>
<name>windows_password_encrypter</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>creds</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realmstring</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>username</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>in</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>non_interactive</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>CALLBACK</name> *<name>encrypt_fn_t</name>)
<parameter_list>(<param><decl><type><name>DATA_BLOB</name> *</type></decl></param>,
<param><decl><type><name>LPCWSTR</name></type></decl></param>,
<param><decl><type><name>DATA_BLOB</name> *</type></decl></param>,
<param><decl><type><name>PVOID</name></type></decl></param>,
<param><decl><type><name>CRYPTPROTECT_PROMPTSTRUCT</name>*</type></decl></param>,
<param><decl><type><name>DWORD</name></type></decl></param>,
<param><decl><type><name>DATA_BLOB</name>*</type></decl></param>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>dll</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FARPROC</name></type> <name>fn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>encrypt_fn_t</name></type> <name>encrypt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DATA_BLOB</name></type> <name>blobin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DATA_BLOB</name></type> <name>blobout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>crypted</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>get_crypto_function</name><argument_list>(<argument><expr>"CryptProtectData"</expr></argument>, <argument><expr>&amp;<name>dll</name></expr></argument>, <argument><expr>&amp;<name>fn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>FALSE</name></expr>;</return></then></if>
<expr_stmt><expr><name>encrypt</name> = (<name>encrypt_fn_t</name>) <name>fn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>blobin</name>.<name>cbData</name></name> = <call><name>strlen</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>blobin</name>.<name>pbData</name></name> = (<name>BYTE</name>*) <name>in</name></expr>;</expr_stmt>
<expr_stmt><expr><name>crypted</name> = <call><name>encrypt</name><argument_list>(<argument><expr>&amp;<name>blobin</name></expr></argument>, <argument><expr><name>description</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>CRYPTPROTECT_UI_FORBIDDEN</name></expr></argument>, <argument><expr>&amp;<name>blobout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>crypted</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>coded</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>apr_base64_encode_len</name><argument_list>(<argument><expr><name><name>blobout</name>.<name>cbData</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_base64_encode</name><argument_list>(<argument><expr><name>coded</name></expr></argument>, <argument><expr><name><name>blobout</name>.<name>pbData</name></name></expr></argument>, <argument><expr><name><name>blobout</name>.<name>cbData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>crypted</name> = <call><name>simple_password_set</name><argument_list>(<argument><expr><name>creds</name></expr></argument>, <argument><expr><name>realmstring</name></expr></argument>, <argument><expr><name>username</name></expr></argument>, <argument><expr><name>coded</name></expr></argument>,
<argument><expr><name>non_interactive</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LocalFree</name><argument_list>(<argument><expr><name><name>blobout</name>.<name>pbData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>dll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>crypted</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_boolean_t</name></type>
<name>windows_password_decrypter</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>out</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>creds</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realmstring</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>username</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>non_interactive</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>CALLBACK</name> * <name>decrypt_fn_t</name>)
<parameter_list>(<param><decl><type><name>DATA_BLOB</name> *</type></decl></param>,
<param><decl><type><name>LPWSTR</name> *</type></decl></param>,
<param><decl><type><name>DATA_BLOB</name> *</type></decl></param>,
<param><decl><type><name>PVOID</name></type></decl></param>,
<param><decl><type><name>CRYPTPROTECT_PROMPTSTRUCT</name>*</type></decl></param>,
<param><decl><type><name>DWORD</name></type></decl></param>,
<param><decl><type><name>DATA_BLOB</name>*</type></decl></param>)</parameter_list>;</function_decl></typedef>
<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>dll</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>FARPROC</name></type> <name>fn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DATA_BLOB</name></type> <name>blobin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DATA_BLOB</name></type> <name>blobout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LPWSTR</name></type> <name>descr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>decrypt_fn_t</name></type> <name>decrypt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>decrypted</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>in</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>simple_password_get</name><argument_list>(<argument><expr>&amp;<name>in</name></expr></argument>, <argument><expr><name>creds</name></expr></argument>, <argument><expr><name>realmstring</name></expr></argument>, <argument><expr><name>username</name></expr></argument>,
<argument><expr><name>non_interactive</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>FALSE</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>get_crypto_function</name><argument_list>(<argument><expr>"CryptUnprotectData"</expr></argument>, <argument><expr>&amp;<name>dll</name></expr></argument>, <argument><expr>&amp;<name>fn</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>FALSE</name></expr>;</return></then></if>
<expr_stmt><expr><name>decrypt</name> = (<name>decrypt_fn_t</name>) <name>fn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>blobin</name>.<name>cbData</name></name> = <call><name>strlen</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>blobin</name>.<name>pbData</name></name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>apr_base64_decode_len</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_base64_decode</name><argument_list>(<argument><expr><name><name>blobin</name>.<name>pbData</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>decrypted</name> = <call><name>decrypt</name><argument_list>(<argument><expr>&amp;<name>blobin</name></expr></argument>, <argument><expr>&amp;<name>descr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>CRYPTPROTECT_UI_FORBIDDEN</name></expr></argument>, <argument><expr>&amp;<name>blobout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>decrypted</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>0 == <call><name>lstrcmpW</name><argument_list>(<argument><expr><name>descr</name></expr></argument>, <argument><expr><name>description</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr>*<name>out</name> = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>blobout</name>.<name>pbData</name></name></expr></argument>, <argument><expr><name><name>blobout</name>.<name>cbData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>decrypted</name> = <name>FALSE</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>LocalFree</name><argument_list>(<argument><expr><name><name>blobout</name>.<name>pbData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name>dll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>decrypted</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>windows_simple_first_creds</name><parameter_list>(<param><decl><type><name>void</name> **</type><name>credentials</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>iter_baton</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>provider_baton</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>parameters</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realmstring</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>simple_first_creds_helper</name><argument_list>(<argument><expr><name>credentials</name></expr></argument>,
<argument><expr><name>iter_baton</name></expr></argument>, <argument><expr><name>provider_baton</name></expr></argument>,
<argument><expr><name>parameters</name></expr></argument>, <argument><expr><name>realmstring</name></expr></argument>,
<argument><expr><name>windows_password_decrypter</name></expr></argument>,
<argument><expr><name>SVN_AUTH__WINCRYPT_PASSWORD_TYPE</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>windows_simple_save_creds</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>saved</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>credentials</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>provider_baton</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>parameters</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realmstring</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>simple_save_creds_helper</name><argument_list>(<argument><expr><name>saved</name></expr></argument>, <argument><expr><name>credentials</name></expr></argument>, <argument><expr><name>provider_baton</name></expr></argument>,
<argument><expr><name>parameters</name></expr></argument>, <argument><expr><name>realmstring</name></expr></argument>,
<argument><expr><name>windows_password_encrypter</name></expr></argument>,
<argument><expr><name>SVN_AUTH__WINCRYPT_PASSWORD_TYPE</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_auth_provider_t</name></type> <name>windows_simple_provider</name> <init>= <expr><block>{
<expr><name>SVN_AUTH_CRED_SIMPLE</name></expr>,
<expr><name>windows_simple_first_creds</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>windows_simple_save_creds</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type>
<name>svn_auth_get_windows_simple_provider</name><parameter_list>(<param><decl><type><name>svn_auth_provider_object_t</name> **</type><name>provider</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_auth_provider_object_t</name> *</type><name>po</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>po</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>po</name>-&gt;<name>vtable</name></name> = &amp;<name>windows_simple_provider</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>provider</name> = <name>po</name></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SVN_HAVE_KEYCHAIN_SERVICES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Security/Security.h&gt;</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>svn_boolean_t</name></type>
<name>keychain_password_set</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>creds</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realmstring</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>username</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>password</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>non_interactive</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>OSStatus</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SecKeychainItemRef</name></type> <name>item</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>non_interactive</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SecKeychainSetUserInteractionAllowed</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>status</name> = <call><name>SecKeychainFindGenericPassword</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>realmstring</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>realmstring</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>username</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>status</name> == <name>errSecItemNotFound</name></expr>)</condition><then>
<expr_stmt><expr><name>status</name> = <call><name>SecKeychainAddGenericPassword</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>realmstring</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>realmstring</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>username</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>password</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>status</name> = <call><name>SecKeychainItemModifyAttributesAndData</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>password</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>non_interactive</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SecKeychainSetUserInteractionAllowed</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>status</name> == 0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_boolean_t</name></type>
<name>keychain_password_get</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>password</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>creds</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realmstring</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>username</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>non_interactive</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>OSStatus</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UInt32</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>data</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>non_interactive</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SecKeychainSetUserInteractionAllowed</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>status</name> = <call><name>SecKeychainFindGenericPassword</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>realmstring</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>realmstring</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>username</name></expr></argument>, <argument><expr>&amp;<name>length</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>non_interactive</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SecKeychainSetUserInteractionAllowed</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>status</name> != 0</expr>)</condition><then>
<return>return <expr><name>FALSE</name></expr>;</return></then></if>
<expr_stmt><expr>*<name>password</name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SecKeychainItemFreeContent</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>keychain_simple_first_creds</name><parameter_list>(<param><decl><type><name>void</name> **</type><name>credentials</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>iter_baton</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>provider_baton</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>parameters</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realmstring</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>simple_first_creds_helper</name><argument_list>(<argument><expr><name>credentials</name></expr></argument>,
<argument><expr><name>iter_baton</name></expr></argument>, <argument><expr><name>provider_baton</name></expr></argument>,
<argument><expr><name>parameters</name></expr></argument>, <argument><expr><name>realmstring</name></expr></argument>,
<argument><expr><name>keychain_password_get</name></expr></argument>,
<argument><expr><name>SVN_AUTH__KEYCHAIN_PASSWORD_TYPE</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>keychain_simple_save_creds</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>saved</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>credentials</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>provider_baton</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>parameters</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realmstring</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>simple_save_creds_helper</name><argument_list>(<argument><expr><name>saved</name></expr></argument>, <argument><expr><name>credentials</name></expr></argument>, <argument><expr><name>provider_baton</name></expr></argument>,
<argument><expr><name>parameters</name></expr></argument>, <argument><expr><name>realmstring</name></expr></argument>,
<argument><expr><name>keychain_password_set</name></expr></argument>,
<argument><expr><name>SVN_AUTH__KEYCHAIN_PASSWORD_TYPE</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_auth_provider_t</name></type> <name>keychain_simple_provider</name> <init>= <expr><block>{
<expr><name>SVN_AUTH_CRED_SIMPLE</name></expr>,
<expr><name>keychain_simple_first_creds</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>keychain_simple_save_creds</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type>
<name>svn_auth_get_keychain_simple_provider</name><parameter_list>(<param><decl><type><name>svn_auth_provider_object_t</name> **</type><name>provider</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_auth_provider_object_t</name> *</type><name>po</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>po</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>po</name>-&gt;<name>vtable</name></name> = &amp;<name>keychain_simple_provider</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>provider</name> = <name>po</name></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
