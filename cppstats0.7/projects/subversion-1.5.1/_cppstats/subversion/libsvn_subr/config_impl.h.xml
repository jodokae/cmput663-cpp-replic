<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/libsvn_subr/config_impl.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SVN_LIBSVN_SUBR_CONFIG_IMPL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_LIBSVN_SUBR_CONFIG_IMPL_H</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STDIO</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_want.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_hash.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<struct>struct <name>svn_config_t</name> <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>sections</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>x_pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>x_values</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>tmp_key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>tmp_value</name></decl>;</decl_stmt>
}</block>;</struct>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_config__parse_file</name><parameter_list>(<param><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>must_exist</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG__DEFAULT_SECTION</name></cpp:macro> <cpp:value>"DEFAULT"</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_config__win_config_path</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>folder</name></decl></param>,
<param><decl><type><name>int</name></type> <name>system_path</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_config__parse_registry</name><parameter_list>(<param><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>must_exist</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_REGISTRY_PREFIX</name></cpp:macro> <cpp:value>"REGISTRY:"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_REGISTRY_PREFIX_LEN</name></cpp:macro> <cpp:value>((sizeof(SVN_REGISTRY_PREFIX)) - 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_REGISTRY_HKLM</name></cpp:macro> <cpp:value>"HKLM\\"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_REGISTRY_HKLM_LEN</name></cpp:macro> <cpp:value>((sizeof(SVN_REGISTRY_HKLM)) - 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_REGISTRY_HKCU</name></cpp:macro> <cpp:value>"HKCU\\"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_REGISTRY_HKCU_LEN</name></cpp:macro> <cpp:value>((sizeof(SVN_REGISTRY_HKCU)) - 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_REGISTRY_PATH</name></cpp:macro> <cpp:value>"Software\\Tigris.org\\Subversion\\"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_REGISTRY_PATH_LEN</name></cpp:macro> <cpp:value>((sizeof(SVN_REGISTRY_PATH)) - 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_REGISTRY_SYS_CONFIG_PATH</name></cpp:macro> <cpp:value>SVN_REGISTRY_PREFIX SVN_REGISTRY_HKLM SVN_REGISTRY_PATH</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_REGISTRY_USR_CONFIG_PATH</name></cpp:macro> <cpp:value>SVN_REGISTRY_PREFIX SVN_REGISTRY_HKCU SVN_REGISTRY_PATH</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG__SUBDIRECTORY</name></cpp:macro> <cpp:value>"Subversion"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG__SYS_DIRECTORY</name></cpp:macro> <cpp:value>"/etc/subversion"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG__USR_DIRECTORY</name></cpp:macro> <cpp:value>".subversion"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG__USR_README_FILE</name></cpp:macro> <cpp:value>"README.txt"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_CONFIG__AUTH_SUBDIR</name></cpp:macro> <cpp:value>"auth"</cpp:value></cpp:define>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_config__sys_config_path</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>path_p</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fname</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_config__user_config_path</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>config_dir</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>path_p</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fname</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type>
<name>svn_config__open_file</name><parameter_list>(<param><decl><type><name>FILE</name> **</type><name>pfile</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mode</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<typedef>typedef <function_decl><type><name>svn_boolean_t</name></type>(*<name>svn_config__section_enumerator_t</name>)
<parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list>;</function_decl></typedef>
<function_decl><type><name>int</name></type> <name>svn_config__enumerate_sections</name><parameter_list>(<param><decl><type><name>svn_config_t</name> *</type><name>cfg</name></decl></param>,
<param><decl><type><name>svn_config__section_enumerator_t</name></type> <name>callback</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
