<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/svnsync/main.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_cmdline.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_delta.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_props.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_auth.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_ra.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_network_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_uuid.h&gt;</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_opt_subcommand_t</name></type> <name>initialize_cmd</name></decl>,
<decl><type ref="prev"/><name>synchronize_cmd</name></decl>,
<decl><type ref="prev"/><name>copy_revprops_cmd</name></decl>,
<decl><type ref="prev"/><name>help_cmd</name></decl>;</decl_stmt>
<enum>enum <block>{
<decl><name>svnsync_opt_non_interactive</name> <init>= <expr><name>SVN_OPT_FIRST_LONGOPT_ID</name></expr></init></decl>,
<decl><name>svnsync_opt_no_auth_cache</name></decl>,
<decl><name>svnsync_opt_auth_username</name></decl>,
<decl><name>svnsync_opt_auth_password</name></decl>,
<decl><name>svnsync_opt_source_username</name></decl>,
<decl><name>svnsync_opt_source_password</name></decl>,
<decl><name>svnsync_opt_sync_username</name></decl>,
<decl><name>svnsync_opt_sync_password</name></decl>,
<decl><name>svnsync_opt_config_dir</name></decl>,
<decl><name>svnsync_opt_version</name></decl>
}</block>;</enum>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVNSYNC_OPTS_DEFAULT</name></cpp:macro> <cpp:value>svnsync_opt_non_interactive, svnsync_opt_no_auth_cache, svnsync_opt_auth_username, svnsync_opt_auth_password, svnsync_opt_source_username, svnsync_opt_source_password, svnsync_opt_sync_username, svnsync_opt_sync_password, svnsync_opt_config_dir, 'q'</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_opt_subcommand_desc_t</name></type> <name><name>svnsync_cmd_table</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"initialize"</expr>, <expr><name>initialize_cmd</name></expr>, <expr><block>{ <expr>"init"</expr> }</block></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr>"usage: svnsync initialize DEST_URL SOURCE_URL\n"
"\n"
"Initialize a destination repository for synchronization from\n"
"another repository.\n"
"\n"
"The destination URL must point to the root of a repository with\n"
"no committed revisions. The destination repository must allow\n"
"revision property changes.\n"
"\n"
"You should not commit to, or make revision property changes in,\n"
"the destination repository by any method other than 'svnsync'.\n"
"In other words, the destination repository should be a read-only\n"
"mirror of the source repository.\n"</expr></argument>)</argument_list></call></expr>,
<expr><block>{ <expr><name>SVNSYNC_OPTS_DEFAULT</name></expr> }</block></expr>
}</block></expr>,
<expr><block>{
<expr>"synchronize"</expr>, <expr><name>synchronize_cmd</name></expr>, <expr><block>{ <expr>"sync"</expr> }</block></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr>"usage: svnsync synchronize DEST_URL\n"
"\n"
"Transfer all pending revisions to the destination from the source\n"
"with which it was initialized.\n"</expr></argument>)</argument_list></call></expr>,
<expr><block>{ <expr><name>SVNSYNC_OPTS_DEFAULT</name></expr> }</block></expr>
}</block></expr>,
<expr><block>{
<expr>"copy-revprops"</expr>, <expr><name>copy_revprops_cmd</name></expr>, <expr><block>{ <expr>0</expr> }</block></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr>"usage: svnsync copy-revprops DEST_URL [REV[:REV2]]\n"
"\n"
"Copy the revision properties in a given range of revisions to the\n"
"destination from the source with which it was initialized.\n"
"\n"
"If REV and REV2 are provided, copy properties for the revisions\n"
"specified by that range, inclusively. If only REV is provided,\n"
"copy properties for that revision alone. If REV is not provided,\n"
"copy properties for all revisions previously transferred to the\n"
"destination.\n"
"\n"
"REV and REV2 must be revisions which were previously transferred\n"
"to the destination. You may use \"HEAD\" for either revision to\n"
"mean \"the last revision transferred\".\n"</expr></argument>)</argument_list></call></expr>,
<expr><block>{ <expr><name>SVNSYNC_OPTS_DEFAULT</name></expr> }</block></expr>
}</block></expr>,
<expr><block>{
<expr>"help"</expr>, <expr><name>help_cmd</name></expr>, <expr><block>{ <expr>"?"</expr>, <expr>"h"</expr> }</block></expr>,
<expr><call><name>N_</name><argument_list>(<argument><expr>"usage: svnsync help [SUBCOMMAND...]\n"
"\n"
"Describe the usage of this program or its subcommands.\n"</expr></argument>)</argument_list></call></expr>,
<expr><block>{ <expr>0</expr> }</block></expr>
}</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><block>{ <expr>0</expr> }</block></expr>, <expr><name>NULL</name></expr>, <expr><block>{ <expr>0</expr> }</block></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>apr_getopt_option_t</name></type> <name><name>svnsync_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"quiet"</expr>, <expr>'q'</expr>, <expr>0</expr>,
<macro><name>N_</name><argument_list>(<argument>"print as little as possible"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"non-interactive"</expr>, <expr><name>svnsync_opt_non_interactive</name></expr>, <expr>0</expr>,
<macro><name>N_</name><argument_list>(<argument>"do no interactive prompting"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"no-auth-cache"</expr>, <expr><name>svnsync_opt_no_auth_cache</name></expr>, <expr>0</expr>,
<macro><name>N_</name><argument_list>(<argument>"do not cache authentication tokens"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"username"</expr>, <expr><name>svnsync_opt_auth_username</name></expr>, <expr>1</expr>,
<macro><name>N_</name><argument_list>(<argument>"specify a username ARG (deprecated;\n"
" "
"see --source-username and --sync-username)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"password"</expr>, <expr><name>svnsync_opt_auth_password</name></expr>, <expr>1</expr>,
<macro><name>N_</name><argument_list>(<argument>"specify a password ARG (deprecated;\n"
" "
"see --source-password and --sync-password)"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"source-username"</expr>, <expr><name>svnsync_opt_source_username</name></expr>, <expr>1</expr>,
<macro><name>N_</name><argument_list>(<argument>"connect to source repository with username ARG"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"source-password"</expr>, <expr><name>svnsync_opt_source_password</name></expr>, <expr>1</expr>,
<macro><name>N_</name><argument_list>(<argument>"connect to source repository with password ARG"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"sync-username"</expr>, <expr><name>svnsync_opt_sync_username</name></expr>, <expr>1</expr>,
<macro><name>N_</name><argument_list>(<argument>"connect to sync repository with username ARG"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"sync-password"</expr>, <expr><name>svnsync_opt_sync_password</name></expr>, <expr>1</expr>,
<macro><name>N_</name><argument_list>(<argument>"connect to sync repository with password ARG"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"config-dir"</expr>, <expr><name>svnsync_opt_config_dir</name></expr>, <expr>1</expr>,
<macro><name>N_</name><argument_list>(<argument>"read user configuration files from directory ARG"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"version"</expr>, <expr><name>svnsync_opt_version</name></expr>, <expr>0</expr>,
<macro><name>N_</name><argument_list>(<argument>"show program version information"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"help"</expr>, <expr>'h'</expr>, <expr>0</expr>,
<macro><name>N_</name><argument_list>(<argument>"show help on a subcommand"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr><name>NULL</name></expr>, <expr>'?'</expr>, <expr>0</expr>,
<macro><name>N_</name><argument_list>(<argument>"show help on a subcommand"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{ <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>non_interactive</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>no_auth_cache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_auth_baton_t</name> *</type><name>source_auth_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_auth_baton_t</name> *</type><name>sync_auth_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>source_username</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>source_password</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>sync_username</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>sync_password</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>config_dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>config</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>quiet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>help</name></decl>;</decl_stmt>
}</block></struct></type> <name>opt_baton_t</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>cancelled</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>signal_handler</name><parameter_list>(<param><decl><type><name>int</name></type> <name>signum</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>apr_signal</name><argument_list>(<argument><expr><name>signum</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cancelled</name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>check_cancel</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>cancelled</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CANCELLED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Caught signal"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>check_lib_versions</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_version_checklist_t</name></type> <name><name>checklist</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"svn_subr"</expr>, <expr><name>svn_subr_version</name></expr> }</block></expr>,
<expr><block>{ <expr>"svn_delta"</expr>, <expr><name>svn_delta_version</name></expr> }</block></expr>,
<expr><block>{ <expr>"svn_ra"</expr>, <expr><name>svn_ra_version</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_VERSION_DEFINE</name><argument_list>(<argument><expr><name>my_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_ver_check_list</name><argument_list>(<argument><expr>&amp;<name>my_version</name></expr></argument>, <argument><expr><name>checklist</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>get_lock</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>hostname_str</name><index>[<expr><name>APRMAXHOSTLEN</name> + 1</expr>]</index></name> <init>= <expr><block>{ <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>mylocktoken</name></decl>, *<decl><type ref="prev"/><name>reposlocktoken</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>apr_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>apr_err</name> = <call><name>apr_gethostname</name><argument_list>(<argument><expr><name>hostname_str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hostname_str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>apr_err</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_wrap_apr</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Can't get local hostname"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>mylocktoken</name> = <call><name>svn_string_createf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s:%s"</expr></argument>, <argument><expr><name>hostname_str</name></expr></argument>,
<argument><expr><call><name>svn_uuid_generate</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 10</expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_cancel</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_rev_prop</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>SVNSYNC_PROP_LOCK</name></expr></argument>, <argument><expr>&amp;<name>reposlocktoken</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>reposlocktoken</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>reposlocktoken</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>mylocktoken</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then>
<else>else <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name>
<argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Failed to get lock on destination "
"repos, currently held by '%s'\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>reposlocktoken</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_sleep</name><argument_list>(<argument><expr><call><name>apr_time_from_sec</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_change_rev_prop</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>SVNSYNC_PROP_LOCK</name></expr></argument>,
<argument><expr><name>mylocktoken</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></for>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>APR_EINVAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"Couldn't get lock on destination repos "
"after %d attempts\n"</expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>config</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_callbacks2_t</name></type> <name>source_callbacks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_callbacks2_t</name></type> <name>sync_callbacks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>quiet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>to_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>from_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>committed_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>start_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>end_rev</name></decl>;</decl_stmt>
}</block></struct></type> <name>subcommand_baton_t</name>;</typedef>
<typedef>typedef <function_decl><type><name>svn_error_t</name> *</type>(*<name>with_locked_func_t</name>)<parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
<param><decl><type><name>subcommand_baton_t</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl></typedef>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>with_locked</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
<param><decl><type><name>with_locked_func_t</name></type> <name>func</name></decl></param>,
<param><decl><type><name>subcommand_baton_t</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>, *<decl><type ref="prev"/><name>err2</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_lock</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>func</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err2</name> = <call><name>svn_ra_change_rev_prop</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>SVNSYNC_PROP_LOCK</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err2</name> &amp;&amp; <name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>err2</name></expr>)</condition><then> <block>{
<return>return <expr><name>err2</name></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></else></if></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>open_tmp_file</name><parameter_list>(<param><decl><type><name>apr_file_t</name> **</type><name>fp</name></decl></param>, <param><decl><type><name>void</name> *</type><name>callback_baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_temp_dir</name><argument_list>(<argument><expr>&amp;<name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>"tempfile"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_open_unique_file2</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr>".tmp"</expr></argument>,
<argument><expr><name>svn_io_file_del_on_close</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>check_if_session_is_at_repos_root</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>sess</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>sess_root</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_repos_root2</name><argument_list>(<argument><expr><name>sess</name></expr></argument>, <argument><expr>&amp;<name>sess_root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>sess_root</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then>
<else>else
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>APR_EINVAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Session is rooted at '%s' but the repos root is '%s'"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>url</name></expr></argument>, <argument><expr><name>sess_root</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>remove_props_not_in_source</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>source_props</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>target_props</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>target_props</name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>hi</name></expr>;</condition>
<incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>source_props</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_change_rev_prop</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<typedef>typedef <function_decl><type><name>svn_boolean_t</name></type> (*<name>filter_func_t</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>)</parameter_list>;</function_decl></typedef>
<function><type><specifier>static</specifier> <name>apr_hash_t</name> *</type>
<name>filter_props</name><parameter_list>(<param><decl><type><name>int</name> *</type><name>filtered_count</name></decl></param>, <param><decl><type><name>apr_hash_t</name> *</type><name>props</name></decl></param>,
<param><decl><type><name>filter_func_t</name></type> <name>filter</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>filtered</name> <init>= <expr><call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>filtered_count</name> = 0</expr>;</expr_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>props</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr> ;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>filter</name> || <call><name>filter</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call> == <name>FALSE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>filtered</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>filtered_count</name> += 1</expr>;</expr_stmt>
}</block></else></if>
}</block></for>
<return>return <expr><name>filtered</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>write_revprops</name><parameter_list>(<param><decl><type><name>int</name> *</type><name>filtered_count</name></decl></param>,
<param><decl><type><name>svn_ra_session_t</name> *</type><name>session</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>rev_props</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>filtered_count</name> = 0</expr>;</expr_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>rev_props</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>SVNSYNC_PROP_PREFIX</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVNSYNC_PROP_PREFIX</name></expr></argument>)</argument_list></sizeof> - 1</expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_change_rev_prop</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>filtered_count</name> += 1</expr>;</expr_stmt>
}</block></else></if>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>log_properties_copied</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name></type> <name>syncprops_found</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>syncprops_found</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Copied properties for revision %ld "
"(%s* properties skipped).\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>rev</name></expr></argument>, <argument><expr><name>SVNSYNC_PROP_PREFIX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Copied properties for revision %ld.\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>copy_revprops</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>from_session</name></decl></param>,
<param><decl><type><name>svn_ra_session_t</name> *</type><name>to_session</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>sync</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>quiet</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>existing_props</name></decl>, *<decl><type ref="prev"/><name>rev_props</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>filtered_count</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>sync</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_rev_proplist</name><argument_list>(<argument><expr><name>to_session</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr>&amp;<name>existing_props</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_rev_proplist</name><argument_list>(<argument><expr><name>from_session</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr>&amp;<name>rev_props</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>write_revprops</name><argument_list>(<argument><expr>&amp;<name>filtered_count</name></expr></argument>, <argument><expr><name>to_session</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>rev_props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>sync</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>remove_props_not_in_source</name><argument_list>(<argument><expr><name>to_session</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>,
<argument><expr><name>rev_props</name></expr></argument>, <argument><expr><name>existing_props</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>! <name>quiet</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>log_properties_copied</name><argument_list>(<argument><expr><name>filtered_count</name> &gt; 0</expr></argument>, <argument><expr><name>rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>subcommand_baton_t</name> *</type>
<name>make_subcommand_baton</name><parameter_list>(<param><decl><type><name>opt_baton_t</name> *</type><name>opt_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>to_url</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>from_url</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>start_rev</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>end_rev</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>subcommand_baton_t</name> *</type><name>b</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>config</name></name> = <name><name>opt_baton</name>-&gt;<name>config</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>source_callbacks</name>.<name>open_tmp_file</name></name> = <name>open_tmp_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>source_callbacks</name>.<name>auth_baton</name></name> = <name><name>opt_baton</name>-&gt;<name>source_auth_baton</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>sync_callbacks</name>.<name>open_tmp_file</name></name> = <name>open_tmp_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>sync_callbacks</name>.<name>auth_baton</name></name> = <name><name>opt_baton</name>-&gt;<name>sync_auth_baton</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>quiet</name></name> = <name><name>opt_baton</name>-&gt;<name>quiet</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>to_url</name></name> = <name>to_url</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>from_url</name></name> = <name>from_url</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>start_rev</name></name> = <name>start_rev</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>end_rev</name></name> = <name>end_rev</name></expr>;</expr_stmt>
<return>return <expr><name>b</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>do_initialize</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>to_session</name></decl></param>,
<param><decl><type><name>subcommand_baton_t</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>from_session</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>from_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>latest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>uuid</name></decl>, *<decl><type ref="prev"/><name>root_url</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_latest_revnum</name><argument_list>(<argument><expr><name>to_session</name></expr></argument>, <argument><expr>&amp;<name>latest</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>latest</name> != 0</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>APR_EINVAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Cannot initialize a repository with content in it"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_rev_prop</name><argument_list>(<argument><expr><name>to_session</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>SVNSYNC_PROP_FROM_URL</name></expr></argument>,
<argument><expr>&amp;<name>from_url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>from_url</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>APR_EINVAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Destination repository is already synchronizing from '%s'"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>from_url</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_open3</name><argument_list>(<argument><expr>&amp;<name>from_session</name></expr></argument>, <argument><expr><name><name>baton</name>-&gt;<name>from_url</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>&amp;(<name><name>baton</name>-&gt;<name>source_callbacks</name></name>)</expr></argument>, <argument><expr><name>baton</name></expr></argument>,
<argument><expr><name><name>baton</name>-&gt;<name>config</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_repos_root2</name><argument_list>(<argument><expr><name>from_session</name></expr></argument>, <argument><expr>&amp;<name>root_url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>svn_path_is_child</name><argument_list>(<argument><expr><name>root_url</name></expr></argument>, <argument><expr><name><name>baton</name>-&gt;<name>from_url</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>server_supports_partial_replay</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><call><name>svn_ra_has_capability</name><argument_list>(<argument><expr><name>from_session</name></expr></argument>,
<argument><expr>&amp;<name>server_supports_partial_replay</name></expr></argument>,
<argument><expr><name>SVN_RA_CAPABILITY_PARTIAL_REPLAY</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> &amp;&amp; <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_UNKNOWN_CAPABILITY</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>server_supports_partial_replay</name> = <name>FALSE</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name>server_supports_partial_replay</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_RA_PARTIAL_REPLAY_NOT_SUPPORTED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_change_rev_prop</name><argument_list>(<argument><expr><name>to_session</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>SVNSYNC_PROP_FROM_URL</name></expr></argument>,
<argument><expr><call><name>svn_string_create</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>from_url</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_uuid2</name><argument_list>(<argument><expr><name>from_session</name></expr></argument>, <argument><expr>&amp;<name>uuid</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_change_rev_prop</name><argument_list>(<argument><expr><name>to_session</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>SVNSYNC_PROP_FROM_UUID</name></expr></argument>,
<argument><expr><call><name>svn_string_create</name><argument_list>(<argument><expr><name>uuid</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_change_rev_prop</name><argument_list>(<argument><expr><name>to_session</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>SVNSYNC_PROP_LAST_MERGED_REV</name></expr></argument>,
<argument><expr><call><name>svn_string_create</name><argument_list>(<argument><expr>"0"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>copy_revprops</name><argument_list>(<argument><expr><name>from_session</name></expr></argument>, <argument><expr><name>to_session</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name><name>baton</name>-&gt;<name>quiet</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>initialize_cmd</name><parameter_list>(<param><decl><type><name>apr_getopt_t</name> *</type><name>os</name></decl></param>, <param><decl><type><name>void</name> *</type><name>b</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>to_url</name></decl>, *<decl><type ref="prev"/><name>from_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>to_session</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>opt_baton_t</name> *</type><name>opt_baton</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>targets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>subcommand_baton_t</name> *</type><name>baton</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_opt_args_to_target_array2</name><argument_list>(<argument><expr>&amp;<name>targets</name></expr></argument>, <argument><expr><name>os</name></expr></argument>,
<argument><expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>targets</name>-&gt;<name>nelts</name></name> &lt; 2</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CL_INSUFFICIENT_ARGS</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>targets</name>-&gt;<name>nelts</name></name> &gt; 2</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CL_ARG_PARSING_ERROR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>to_url</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>targets</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>from_url</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>targets</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <call><name>svn_path_is_url</name><argument_list>(<argument><expr><name>to_url</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_CL_ARG_PARSING_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Path '%s' is not a URL"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>to_url</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>! <call><name>svn_path_is_url</name><argument_list>(<argument><expr><name>from_url</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_CL_ARG_PARSING_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Path '%s' is not a URL"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>from_url</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>baton</name> = <call><name>make_subcommand_baton</name><argument_list>(<argument><expr><name>opt_baton</name></expr></argument>, <argument><expr><name>to_url</name></expr></argument>, <argument><expr><name>from_url</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_open3</name><argument_list>(<argument><expr>&amp;<name>to_session</name></expr></argument>, <argument><expr><name><name>baton</name>-&gt;<name>to_url</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>&amp;(<name><name>baton</name>-&gt;<name>sync_callbacks</name></name>)</expr></argument>, <argument><expr><name>baton</name></expr></argument>, <argument><expr><name><name>baton</name>-&gt;<name>config</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_if_session_is_at_repos_root</name><argument_list>(<argument><expr><name>to_session</name></expr></argument>, <argument><expr><name><name>baton</name>-&gt;<name>to_url</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>with_locked</name><argument_list>(<argument><expr><name>to_session</name></expr></argument>, <argument><expr><name>do_initialize</name></expr></argument>, <argument><expr><name>baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>wrapped_editor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>wrapped_edit_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>to_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>called_open_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>got_textdeltas</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>quiet</name></decl>;</decl_stmt>
}</block></struct></type> <name>edit_baton_t</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>edit_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>wrapped_node_baton</name></decl>;</decl_stmt>
}</block></struct></type> <name>node_baton_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>set_target_revision</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>target_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>edit_baton_t</name> *</type><name>eb</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name><name>eb</name>-&gt;<name>wrapped_editor</name>-&gt;<name>set_target_revision</name></name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>wrapped_edit_baton</name></name></expr></argument>,
<argument><expr><name>target_revision</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>open_root</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>root_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>edit_baton_t</name> *</type><name>eb</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>node_baton_t</name> *</type><name>dir_baton</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>dir_baton</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>eb</name>-&gt;<name>wrapped_editor</name>-&gt;<name>open_root</name></name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>wrapped_edit_baton</name></name></expr></argument>,
<argument><expr><name>base_revision</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>,
<argument><expr>&amp;<name><name>dir_baton</name>-&gt;<name>wrapped_node_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>called_open_root</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dir_baton</name>-&gt;<name>edit_baton</name></name> = <name>edit_baton</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>root_baton</name> = <name>dir_baton</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>delete_entry</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>node_baton_t</name> *</type><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>edit_baton_t</name> *</type><name>eb</name> <init>= <expr><name><name>pb</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name><name>eb</name>-&gt;<name>wrapped_editor</name>-&gt;<name>delete_entry</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>base_revision</name></expr></argument>,
<argument><expr><name><name>pb</name>-&gt;<name>wrapped_node_baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>add_directory</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_rev</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>child_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>node_baton_t</name> *</type><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>edit_baton_t</name> *</type><name>eb</name> <init>= <expr><name><name>pb</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>node_baton_t</name> *</type><name>b</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>copyfrom_path</name></expr>)</condition><then>
<expr_stmt><expr><name>copyfrom_path</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s%s"</expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>to_url</name></name></expr></argument>,
<argument><expr><call><name>svn_path_uri_encode</name><argument_list>(<argument><expr><name>copyfrom_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>eb</name>-&gt;<name>wrapped_editor</name>-&gt;<name>add_directory</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>pb</name>-&gt;<name>wrapped_node_baton</name></name></expr></argument>,
<argument><expr><name>copyfrom_path</name></expr></argument>,
<argument><expr><name>copyfrom_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>,
<argument><expr>&amp;<name><name>b</name>-&gt;<name>wrapped_node_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>edit_baton</name></name> = <name>eb</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>child_baton</name> = <name>b</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>open_directory</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>child_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>node_baton_t</name> *</type><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>edit_baton_t</name> *</type><name>eb</name> <init>= <expr><name><name>pb</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>node_baton_t</name> *</type><name>db</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>db</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>eb</name>-&gt;<name>wrapped_editor</name>-&gt;<name>open_directory</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>pb</name>-&gt;<name>wrapped_node_baton</name></name></expr></argument>,
<argument><expr><name>base_revision</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>,
<argument><expr>&amp;<name><name>db</name>-&gt;<name>wrapped_node_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>db</name>-&gt;<name>edit_baton</name></name> = <name>eb</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>child_baton</name> = <name>db</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>add_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_rev</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>file_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>node_baton_t</name> *</type><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>edit_baton_t</name> *</type><name>eb</name> <init>= <expr><name><name>pb</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>node_baton_t</name> *</type><name>fb</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>fb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>copyfrom_path</name></expr>)</condition><then>
<expr_stmt><expr><name>copyfrom_path</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s%s"</expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>to_url</name></name></expr></argument>,
<argument><expr><call><name>svn_path_uri_encode</name><argument_list>(<argument><expr><name>copyfrom_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>eb</name>-&gt;<name>wrapped_editor</name>-&gt;<name>add_file</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>pb</name>-&gt;<name>wrapped_node_baton</name></name></expr></argument>,
<argument><expr><name>copyfrom_path</name></expr></argument>, <argument><expr><name>copyfrom_rev</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>, <argument><expr>&amp;<name><name>fb</name>-&gt;<name>wrapped_node_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fb</name>-&gt;<name>edit_baton</name></name> = <name>eb</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>file_baton</name> = <name>fb</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>open_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>file_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>node_baton_t</name> *</type><name>pb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>edit_baton_t</name> *</type><name>eb</name> <init>= <expr><name><name>pb</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>node_baton_t</name> *</type><name>fb</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>fb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>eb</name>-&gt;<name>wrapped_editor</name>-&gt;<name>open_file</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>pb</name>-&gt;<name>wrapped_node_baton</name></name></expr></argument>,
<argument><expr><name>base_revision</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>,
<argument><expr>&amp;<name><name>fb</name>-&gt;<name>wrapped_node_baton</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fb</name>-&gt;<name>edit_baton</name></name> = <name>eb</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>file_baton</name> = <name>fb</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>apply_textdelta</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_checksum</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><name>svn_txdelta_window_handler_t</name> *</type><name>handler</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>handler_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>node_baton_t</name> *</type><name>fb</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>edit_baton_t</name> *</type><name>eb</name> <init>= <expr><name><name>fb</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>! <name><name>eb</name>-&gt;<name>quiet</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>! <name><name>eb</name>-&gt;<name>got_textdeltas</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Transmitting file data "</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"."</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>got_textdeltas</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<return>return <expr><call><name><name>eb</name>-&gt;<name>wrapped_editor</name>-&gt;<name>apply_textdelta</name></name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>wrapped_node_baton</name></name></expr></argument>,
<argument><expr><name>base_checksum</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>,
<argument><expr><name>handler</name></expr></argument>, <argument><expr><name>handler_baton</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>close_file</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>text_checksum</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>node_baton_t</name> *</type><name>fb</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>edit_baton_t</name> *</type><name>eb</name> <init>= <expr><name><name>fb</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name><name>eb</name>-&gt;<name>wrapped_editor</name>-&gt;<name>close_file</name></name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>wrapped_node_baton</name></name></expr></argument>,
<argument><expr><name>text_checksum</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>absent_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>node_baton_t</name> *</type><name>fb</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>edit_baton_t</name> *</type><name>eb</name> <init>= <expr><name><name>fb</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name><name>eb</name>-&gt;<name>wrapped_editor</name>-&gt;<name>absent_file</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>wrapped_node_baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>close_directory</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>dir_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>node_baton_t</name> *</type><name>db</name> <init>= <expr><name>dir_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>edit_baton_t</name> *</type><name>eb</name> <init>= <expr><name><name>db</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name><name>eb</name>-&gt;<name>wrapped_editor</name>-&gt;<name>close_directory</name></name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>wrapped_node_baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>absent_directory</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dir_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>node_baton_t</name> *</type><name>db</name> <init>= <expr><name>dir_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>edit_baton_t</name> *</type><name>eb</name> <init>= <expr><name><name>db</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name><name>eb</name>-&gt;<name>wrapped_editor</name>-&gt;<name>absent_directory</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>db</name>-&gt;<name>wrapped_node_baton</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>change_file_prop</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>node_baton_t</name> *</type><name>fb</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>edit_baton_t</name> *</type><name>eb</name> <init>= <expr><name><name>fb</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>svn_property_kind</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> != <name>svn_prop_regular_kind</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<return>return <expr><call><name><name>eb</name>-&gt;<name>wrapped_editor</name>-&gt;<name>change_file_prop</name></name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>wrapped_node_baton</name></name></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>change_dir_prop</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>dir_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>node_baton_t</name> *</type><name>db</name> <init>= <expr><name>dir_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>edit_baton_t</name> *</type><name>eb</name> <init>= <expr><name><name>db</name>-&gt;<name>edit_baton</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>svn_property_kind</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> != <name>svn_prop_regular_kind</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<return>return <expr><call><name><name>eb</name>-&gt;<name>wrapped_editor</name>-&gt;<name>change_dir_prop</name></name><argument_list>(<argument><expr><name><name>db</name>-&gt;<name>wrapped_node_baton</name></name></expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>close_edit</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>edit_baton_t</name> *</type><name>eb</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>! <name><name>eb</name>-&gt;<name>called_open_root</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>baton</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>eb</name>-&gt;<name>wrapped_editor</name>-&gt;<name>open_root</name></name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>wrapped_edit_baton</name></name></expr></argument>,
<argument><expr><name><name>eb</name>-&gt;<name>base_revision</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>,
<argument><expr>&amp;<name>baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>eb</name>-&gt;<name>wrapped_editor</name>-&gt;<name>close_directory</name></name><argument_list>(<argument><expr><name>baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>! <name><name>eb</name>-&gt;<name>quiet</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>eb</name>-&gt;<name>got_textdeltas</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"\n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
<return>return <expr><call><name><name>eb</name>-&gt;<name>wrapped_editor</name>-&gt;<name>close_edit</name></name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>wrapped_edit_baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>get_sync_editor</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>wrapped_editor</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>wrapped_edit_baton</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>to_url</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>quiet</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_delta_editor_t</name> *</type><name>tree_editor</name> <init>= <expr><call><name>svn_delta_default_editor</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>edit_baton_t</name> *</type><name>eb</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>eb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>set_target_revision</name></name> = <name>set_target_revision</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>open_root</name></name> = <name>open_root</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>delete_entry</name></name> = <name>delete_entry</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>add_directory</name></name> = <name>add_directory</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>open_directory</name></name> = <name>open_directory</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>change_dir_prop</name></name> = <name>change_dir_prop</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>close_directory</name></name> = <name>close_directory</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>absent_directory</name></name> = <name>absent_directory</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>add_file</name></name> = <name>add_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>open_file</name></name> = <name>open_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>apply_textdelta</name></name> = <name>apply_textdelta</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>change_file_prop</name></name> = <name>change_file_prop</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>close_file</name></name> = <name>close_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>absent_file</name></name> = <name>absent_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tree_editor</name>-&gt;<name>close_edit</name></name> = <name>close_edit</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>wrapped_editor</name></name> = <name>wrapped_editor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>wrapped_edit_baton</name></name> = <name>wrapped_edit_baton</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>base_revision</name></name> = <name>base_revision</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>to_url</name></name> = <name>to_url</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>quiet</name></name> = <name>quiet</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>editor</name> = <name>tree_editor</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>edit_baton</name> = <name>eb</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>commit_callback</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_commit_info_t</name> *</type><name>commit_info</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>subcommand_baton_t</name> *</type><name>sb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>! <name><name>sb</name>-&gt;<name>quiet</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_cmdline_printf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr>"Committed revision %ld.\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>commit_info</name>-&gt;<name>revision</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>sb</name>-&gt;<name>committed_rev</name></name> = <name><name>commit_info</name>-&gt;<name>revision</name></name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>open_source_session</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> **</type><name>from_session</name></decl></param>,
<param><decl><type><name>svn_string_t</name> **</type><name>last_merged_rev</name></decl></param>,
<param><decl><type><name>svn_ra_session_t</name> *</type><name>to_session</name></decl></param>,
<param><decl><type><name>svn_ra_callbacks2_t</name> *</type><name>callbacks</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>config</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>from_url</name></decl>, *<decl><type ref="prev"/><name>from_uuid</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_rev_prop</name><argument_list>(<argument><expr><name>to_session</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>SVNSYNC_PROP_FROM_URL</name></expr></argument>,
<argument><expr>&amp;<name>from_url</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_rev_prop</name><argument_list>(<argument><expr><name>to_session</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>SVNSYNC_PROP_FROM_UUID</name></expr></argument>,
<argument><expr>&amp;<name>from_uuid</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_rev_prop</name><argument_list>(<argument><expr><name>to_session</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>SVNSYNC_PROP_LAST_MERGED_REV</name></expr></argument>,
<argument><expr><name>last_merged_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>from_url</name> || ! <name>from_uuid</name> || ! *<name>last_merged_rev</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>APR_EINVAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Destination repository has not been initialized"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_open3</name><argument_list>(<argument><expr><name>from_session</name></expr></argument>, <argument><expr><name><name>from_url</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>from_uuid</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr><name>callbacks</name></expr></argument>, <argument><expr><name>baton</name></expr></argument>, <argument><expr><name>config</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>from_session</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>to_session</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>subcommand_baton_t</name> *</type><name>sb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>has_commit_revprops_capability</name></decl>;</decl_stmt>
}</block></struct></type> <name>replay_baton_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>replay_baton_t</name> *</type>
<name>make_replay_baton</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>from_session</name></decl></param>,
<param><decl><type><name>svn_ra_session_t</name> *</type><name>to_session</name></decl></param>,
<param><decl><type><name>subcommand_baton_t</name> *</type><name>sb</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>replay_baton_t</name> *</type><name>rb</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>rb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>rb</name>-&gt;<name>from_session</name></name> = <name>from_session</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rb</name>-&gt;<name>to_session</name></name> = <name>to_session</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rb</name>-&gt;<name>sb</name></name> = <name>sb</name></expr>;</expr_stmt>
<return>return <expr><name>rb</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_boolean_t</name></type>
<name>filter_exclude_date_author_sync</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_AUTHOR</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>TRUE</name></expr>;</return></then>
<else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_DATE</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>TRUE</name></expr>;</return></then>
<else>else <if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>SVNSYNC_PROP_PREFIX</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVNSYNC_PROP_PREFIX</name></expr></argument>)</argument_list></sizeof> - 1</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>TRUE</name></expr>;</return></then></if></else></if></else></if>
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_boolean_t</name></type>
<name>filter_include_date_author_sync</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>)</parameter_list> <block>{
<return>return <expr>! <call><name>filter_exclude_date_author_sync</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_boolean_t</name></type>
<name>filter_exclude_log</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_LOG</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>TRUE</name></expr>;</return></then>
<else>else
<return>return <expr><name>FALSE</name></expr>;</return></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_boolean_t</name></type>
<name>filter_include_log</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>)</parameter_list> <block>{
<return>return <expr>! <call><name>filter_exclude_log</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>replay_rev_started</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>replay_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>rev_props</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>commit_editor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>cancel_editor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>sync_editor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>commit_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>cancel_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>sync_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>replay_baton_t</name> *</type><name>rb</name> <init>= <expr><name>replay_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>filtered</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>filtered_count</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_change_rev_prop</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>to_session</name></name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>SVNSYNC_PROP_CURRENTLY_COPYING</name></expr></argument>,
<argument><expr><call><name>svn_string_createf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%ld"</expr></argument>,
<argument><expr><name>revision</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>filtered</name> = <call><name>filter_props</name><argument_list>(<argument><expr>&amp;<name>filtered_count</name></expr></argument>, <argument><expr><name>rev_props</name></expr></argument>,
<argument><expr>(<name><name>rb</name>-&gt;<name>has_commit_revprops_capability</name></name>
? <name>filter_exclude_date_author_sync</name>
: <name>filter_include_log</name>)</expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>filtered</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_LOG</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>filtered</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_LOG</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><call><name>svn_string_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_commit_editor3</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>to_session</name></name></expr></argument>, <argument><expr>&amp;<name>commit_editor</name></expr></argument>,
<argument><expr>&amp;<name>commit_baton</name></expr></argument>,
<argument><expr><name>filtered</name></expr></argument>,
<argument><expr><name>commit_callback</name></expr></argument>, <argument><expr><name><name>rb</name>-&gt;<name>sb</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>get_sync_editor</name><argument_list>(<argument><expr><name>commit_editor</name></expr></argument>, <argument><expr><name>commit_baton</name></expr></argument>, <argument><expr><name>revision</name> - 1</expr></argument>,
<argument><expr><name><name>rb</name>-&gt;<name>sb</name>-&gt;<name>to_url</name></name></expr></argument>, <argument><expr><name><name>rb</name>-&gt;<name>sb</name>-&gt;<name>quiet</name></name></expr></argument>,
<argument><expr>&amp;<name>sync_editor</name></expr></argument>, <argument><expr>&amp;<name>sync_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_delta_get_cancellation_editor</name><argument_list>(<argument><expr><name>check_cancel</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>sync_editor</name></expr></argument>, <argument><expr><name>sync_baton</name></expr></argument>,
<argument><expr>&amp;<name>cancel_editor</name></expr></argument>,
<argument><expr>&amp;<name>cancel_baton</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>editor</name> = <name>cancel_editor</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>edit_baton</name> = <name>cancel_baton</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>replay_rev_finished</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>replay_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>editor</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>rev_props</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>replay_baton_t</name> *</type><name>rb</name> <init>= <expr><name>replay_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>filtered</name></decl>, *<decl><type ref="prev"/><name>existing_props</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>filtered_count</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>editor</name>-&gt;<name>close_edit</name></name><argument_list>(<argument><expr><name>edit_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>rb</name>-&gt;<name>sb</name>-&gt;<name>committed_rev</name></name> != <name>revision</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>APR_EINVAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Commit created rev %ld but should have created %ld"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>rb</name>-&gt;<name>sb</name>-&gt;<name>committed_rev</name></name></expr></argument>, <argument><expr><name>revision</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_rev_proplist</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>to_session</name></name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr>&amp;<name>existing_props</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>filtered</name> = <call><name>filter_props</name><argument_list>(<argument><expr>&amp;<name>filtered_count</name></expr></argument>, <argument><expr><name>rev_props</name></expr></argument>,
<argument><expr>(<name><name>rb</name>-&gt;<name>has_commit_revprops_capability</name></name>
? <name>filter_include_date_author_sync</name>
: <name>filter_exclude_log</name>)</expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>write_revprops</name><argument_list>(<argument><expr>&amp;<name>filtered_count</name></expr></argument>, <argument><expr><name><name>rb</name>-&gt;<name>to_session</name></name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>filtered</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>remove_props_not_in_source</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>to_session</name></name></expr></argument>, <argument><expr><name>revision</name></expr></argument>,
<argument><expr><name>rev_props</name></expr></argument>, <argument><expr><name>existing_props</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_change_rev_prop</name>
<argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>to_session</name></name></expr></argument>,
<argument><expr>0</expr></argument>,
<argument><expr><name>SVNSYNC_PROP_LAST_MERGED_REV</name></expr></argument>,
<argument><expr><call><name>svn_string_create</name><argument_list>(<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%ld"</expr></argument>, <argument><expr><name>revision</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_change_rev_prop</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>to_session</name></name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>SVNSYNC_PROP_CURRENTLY_COPYING</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name><name>rb</name>-&gt;<name>sb</name>-&gt;<name>quiet</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>log_properties_copied</name><argument_list>(<argument><expr><name>filtered_count</name> &gt; 0</expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>do_synchronize</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>to_session</name></decl></param>,
<param><decl><type><name>subcommand_baton_t</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>last_merged_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>from_latest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>from_session</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>currently_copying</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>to_latest</name></decl>, <decl><type ref="prev"/><name>copying</name></decl>, <decl><type ref="prev"/><name>last_merged</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>start_revision</name></decl>, <decl><type ref="prev"/><name>end_revision</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>replay_baton_t</name> *</type><name>rb</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>open_source_session</name><argument_list>(<argument><expr>&amp;<name>from_session</name></expr></argument>,
<argument><expr>&amp;<name>last_merged_rev</name></expr></argument>, <argument><expr><name>to_session</name></expr></argument>,
<argument><expr>&amp;(<name><name>baton</name>-&gt;<name>source_callbacks</name></name>)</expr></argument>, <argument><expr><name><name>baton</name>-&gt;<name>config</name></name></expr></argument>,
<argument><expr><name>baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_rev_prop</name><argument_list>(<argument><expr><name>to_session</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>SVNSYNC_PROP_CURRENTLY_COPYING</name></expr></argument>,
<argument><expr>&amp;<name>currently_copying</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_latest_revnum</name><argument_list>(<argument><expr><name>to_session</name></expr></argument>, <argument><expr>&amp;<name>to_latest</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>last_merged</name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name><name>last_merged_rev</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>currently_copying</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>copying</name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name><name>currently_copying</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>copying</name> &lt; <name>last_merged</name>)
|| (<name>copying</name> &gt; (<name>last_merged</name> + 1))
|| ((<name>to_latest</name> != <name>last_merged</name>) &amp;&amp; (<name>to_latest</name> != <name>copying</name>))</expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>APR_EINVAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Revision being currently copied (%ld), last merged revision "
"(%ld), and destination HEAD (%ld) are inconsistent; have you "
"committed to the destination without using svnsync?"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>copying</name></expr></argument>, <argument><expr><name>last_merged</name></expr></argument>, <argument><expr><name>to_latest</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>copying</name> == <name>to_latest</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>copying</name> &gt; <name>last_merged</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>copy_revprops</name><argument_list>(<argument><expr><name>from_session</name></expr></argument>, <argument><expr><name>to_session</name></expr></argument>,
<argument><expr><name>to_latest</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name><name>baton</name>-&gt;<name>quiet</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>last_merged</name> = <name>copying</name></expr>;</expr_stmt>
<expr_stmt><expr><name>last_merged_rev</name> = <call><name>svn_string_create</name>
<argument_list>(<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%ld"</expr></argument>, <argument><expr><name>last_merged</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_change_rev_prop</name><argument_list>(<argument><expr><name>to_session</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>SVNSYNC_PROP_LAST_MERGED_REV</name></expr></argument>,
<argument><expr><name>last_merged_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_change_rev_prop</name><argument_list>(<argument><expr><name>to_session</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>SVNSYNC_PROP_CURRENTLY_COPYING</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>to_latest</name> != <name>last_merged</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>APR_EINVAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Destination HEAD (%ld) is not the last "
"merged revision (%ld); have you "
"committed to the destination without "
"using svnsync?"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>to_latest</name></expr></argument>, <argument><expr><name>last_merged</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></else></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_get_latest_revnum</name><argument_list>(<argument><expr><name>from_session</name></expr></argument>, <argument><expr>&amp;<name>from_latest</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>from_latest</name> &lt; <call><name>atol</name><argument_list>(<argument><expr><name><name>last_merged_rev</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>rb</name> = <call><name>make_replay_baton</name><argument_list>(<argument><expr><name>from_session</name></expr></argument>, <argument><expr><name>to_session</name></expr></argument>, <argument><expr><name>baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_has_capability</name><argument_list>(<argument><expr><name><name>rb</name>-&gt;<name>to_session</name></name></expr></argument>,
<argument><expr>&amp;<name><name>rb</name>-&gt;<name>has_commit_revprops_capability</name></name></expr></argument>,
<argument><expr><name>SVN_RA_CAPABILITY_COMMIT_REVPROPS</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>start_revision</name> = <call><name>atol</name><argument_list>(<argument><expr><name><name>last_merged_rev</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call> + 1</expr>;</expr_stmt>
<expr_stmt><expr><name>end_revision</name> = <name>from_latest</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_cancel</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_replay_range</name><argument_list>(<argument><expr><name>from_session</name></expr></argument>, <argument><expr><name>start_revision</name></expr></argument>, <argument><expr><name>end_revision</name></expr></argument>,
<argument><expr>0</expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>replay_rev_started</name></expr></argument>,
<argument><expr><name>replay_rev_finished</name></expr></argument>, <argument><expr><name>rb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>synchronize_cmd</name><parameter_list>(<param><decl><type><name>apr_getopt_t</name> *</type><name>os</name></decl></param>, <param><decl><type><name>void</name> *</type><name>b</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>to_session</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>opt_baton_t</name> *</type><name>opt_baton</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>targets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>subcommand_baton_t</name> *</type><name>baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>to_url</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_opt_args_to_target_array2</name><argument_list>(<argument><expr>&amp;<name>targets</name></expr></argument>, <argument><expr><name>os</name></expr></argument>,
<argument><expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>targets</name>-&gt;<name>nelts</name></name> &lt; 1</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CL_INSUFFICIENT_ARGS</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>targets</name>-&gt;<name>nelts</name></name> &gt; 1</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CL_ARG_PARSING_ERROR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>to_url</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>targets</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <call><name>svn_path_is_url</name><argument_list>(<argument><expr><name>to_url</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_CL_ARG_PARSING_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Path '%s' is not a URL"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>to_url</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>baton</name> = <call><name>make_subcommand_baton</name><argument_list>(<argument><expr><name>opt_baton</name></expr></argument>, <argument><expr><name>to_url</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_open3</name><argument_list>(<argument><expr>&amp;<name>to_session</name></expr></argument>, <argument><expr><name><name>baton</name>-&gt;<name>to_url</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>&amp;(<name><name>baton</name>-&gt;<name>sync_callbacks</name></name>)</expr></argument>, <argument><expr><name>baton</name></expr></argument>, <argument><expr><name><name>baton</name>-&gt;<name>config</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_if_session_is_at_repos_root</name><argument_list>(<argument><expr><name>to_session</name></expr></argument>, <argument><expr><name><name>baton</name>-&gt;<name>to_url</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>with_locked</name><argument_list>(<argument><expr><name>to_session</name></expr></argument>, <argument><expr><name>do_synchronize</name></expr></argument>, <argument><expr><name>baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>do_copy_revprops</name><parameter_list>(<param><decl><type><name>svn_ra_session_t</name> *</type><name>to_session</name></decl></param>,
<param><decl><type><name>subcommand_baton_t</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>from_session</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>last_merged_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>step</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>open_source_session</name><argument_list>(<argument><expr>&amp;<name>from_session</name></expr></argument>, <argument><expr>&amp;<name>last_merged_rev</name></expr></argument>,
<argument><expr><name>to_session</name></expr></argument>,
<argument><expr>&amp;(<name><name>baton</name>-&gt;<name>source_callbacks</name></name>)</expr></argument>, <argument><expr><name><name>baton</name>-&gt;<name>config</name></name></expr></argument>,
<argument><expr><name>baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>start_rev</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>baton</name>-&gt;<name>start_rev</name></name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name><name>last_merged_rev</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>! <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>end_rev</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>baton</name>-&gt;<name>end_rev</name></name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name><name>last_merged_rev</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>baton</name>-&gt;<name>start_rev</name></name> &gt; <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name><name>last_merged_rev</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>APR_EINVAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Cannot copy revprops for a revision (%ld) that has not "
"been synchronized yet"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>baton</name>-&gt;<name>start_rev</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>baton</name>-&gt;<name>end_rev</name></name> &gt; <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name><name>last_merged_rev</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>APR_EINVAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Cannot copy revprops for a revision (%ld) that has not "
"been synchronized yet"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>baton</name>-&gt;<name>end_rev</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>step</name> = (<name><name>baton</name>-&gt;<name>start_rev</name></name> &gt; <name><name>baton</name>-&gt;<name>end_rev</name></name>) ? -1 : 1</expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = <name><name>baton</name>-&gt;<name>start_rev</name></name></expr>;</init> <condition><expr><name>i</name> != <name><name>baton</name>-&gt;<name>end_rev</name></name> + <name>step</name></expr>;</condition> <incr><expr><name>i</name> = <name>i</name> + <name>step</name></expr></incr>) <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_cancel</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>copy_revprops</name><argument_list>(<argument><expr><name>from_session</name></expr></argument>, <argument><expr><name>to_session</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name><name>baton</name>-&gt;<name>quiet</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>copy_revprops_cmd</name><parameter_list>(<param><decl><type><name>apr_getopt_t</name> *</type><name>os</name></decl></param>, <param><decl><type><name>void</name> *</type><name>b</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_ra_session_t</name> *</type><name>to_session</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>opt_baton_t</name> *</type><name>opt_baton</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>targets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>subcommand_baton_t</name> *</type><name>baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>to_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_opt_revision_t</name></type> <name>start_revision</name></decl>, <decl><type ref="prev"/><name>end_revision</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>start_rev</name> <init>= <expr>0</expr></init>, <name>end_rev</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>os</name>-&gt;<name>argc</name></name> - <name><name>os</name>-&gt;<name>ind</name></name> &gt; 2</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CL_ARG_PARSING_ERROR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>os</name>-&gt;<name>argc</name></name> - <name><name>os</name>-&gt;<name>ind</name></name> &lt; 1</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CL_INSUFFICIENT_ARGS</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>os</name>-&gt;<name>argc</name></name> - <name><name>os</name>-&gt;<name>ind</name></name> == 2</expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rev_str</name> <init>= <expr><name><name>os</name>-&gt;<name>argv</name><index>[<expr>--(<name><name>os</name>-&gt;<name>argc</name></name>)</expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>start_revision</name>.<name>kind</name></name> = <name>svn_opt_revision_unspecified</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>end_revision</name>.<name>kind</name></name> = <name>svn_opt_revision_unspecified</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<call><name>svn_opt_parse_revision</name><argument_list>(<argument><expr>&amp;<name>start_revision</name></expr></argument>, <argument><expr>&amp;<name>end_revision</name></expr></argument>,
<argument><expr><name>rev_str</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call> != 0)
|| ((<name><name>start_revision</name>.<name>kind</name></name> != <name>svn_opt_revision_number</name>)
&amp;&amp; (<name><name>start_revision</name>.<name>kind</name></name> != <name>svn_opt_revision_head</name>))
|| ((<name><name>end_revision</name>.<name>kind</name></name> != <name>svn_opt_revision_number</name>)
&amp;&amp; (<name><name>end_revision</name>.<name>kind</name></name> != <name>svn_opt_revision_head</name>)
&amp;&amp; (<name><name>end_revision</name>.<name>kind</name></name> != <name>svn_opt_revision_unspecified</name>))</expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_CL_ARG_PARSING_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"'%s' is not a valid revision range"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>rev_str</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>start_revision</name>.<name>kind</name></name> == <name>svn_opt_revision_head</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>start_rev</name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>start_rev</name> = <name><name>start_revision</name>.<name>value</name>.<name>number</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>! <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>start_rev</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_CL_ARG_PARSING_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Invalid revision number (%ld)"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>start_rev</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></else></if>
<if>if <condition>(<expr><name><name>end_revision</name>.<name>kind</name></name> == <name>svn_opt_revision_unspecified</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>end_rev</name> = <name>start_rev</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>end_revision</name>.<name>kind</name></name> == <name>svn_opt_revision_head</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>end_rev</name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>end_rev</name> = <name><name>end_revision</name>.<name>value</name>.<name>number</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>! <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>end_rev</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_CL_ARG_PARSING_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Invalid revision number (%ld)"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>end_rev</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></else></if></else></if>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_opt_args_to_target_array2</name><argument_list>(<argument><expr>&amp;<name>targets</name></expr></argument>, <argument><expr><name>os</name></expr></argument>,
<argument><expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>targets</name>-&gt;<name>nelts</name></name> != 1</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CL_INSUFFICIENT_ARGS</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>to_url</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>targets</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <call><name>svn_path_is_url</name><argument_list>(<argument><expr><name>to_url</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_CL_ARG_PARSING_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Path '%s' is not a URL"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>to_url</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>baton</name> = <call><name>make_subcommand_baton</name><argument_list>(<argument><expr><name>opt_baton</name></expr></argument>, <argument><expr><name>to_url</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>start_rev</name></expr></argument>, <argument><expr><name>end_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_open3</name><argument_list>(<argument><expr>&amp;<name>to_session</name></expr></argument>, <argument><expr><name><name>baton</name>-&gt;<name>to_url</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>&amp;(<name><name>baton</name>-&gt;<name>sync_callbacks</name></name>)</expr></argument>, <argument><expr><name>baton</name></expr></argument>, <argument><expr><name><name>baton</name>-&gt;<name>config</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_if_session_is_at_repos_root</name><argument_list>(<argument><expr><name>to_session</name></expr></argument>, <argument><expr><name><name>baton</name>-&gt;<name>to_url</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>with_locked</name><argument_list>(<argument><expr><name>to_session</name></expr></argument>, <argument><expr><name>do_copy_revprops</name></expr></argument>, <argument><expr><name>baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>help_cmd</name><parameter_list>(<param><decl><type><name>apr_getopt_t</name> *</type><name>os</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>opt_baton_t</name> *</type><name>opt_baton</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>header</name> <init>=
<expr><call><name>_</name><argument_list>(<argument><expr>"general usage: svnsync SUBCOMMAND DEST_URL [ARGS &amp; OPTIONS ...]\n"
"Type 'svnsync help &lt;subcommand&gt;' for help on a specific subcommand.\n"
"Type 'svnsync --version' to see the program version and RA modules.\n"
"\n"
"Available subcommands:\n"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ra_desc_start</name>
<init>= <expr><call><name>_</name><argument_list>(<argument><expr>"The following repository access (RA) modules are available:\n\n"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>version_footer</name> <init>= <expr><call><name>svn_stringbuf_create</name><argument_list>(<argument><expr><name>ra_desc_start</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_ra_print_modules</name><argument_list>(<argument><expr><name>version_footer</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_opt_print_help</name><argument_list>(<argument><expr><name>os</name></expr></argument>, <argument><expr>"svnsync"</expr></argument>,
<argument><expr><name>opt_baton</name> ? <name><name>opt_baton</name>-&gt;<name>version</name></name> : <name>FALSE</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>version_footer</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>header</name></expr></argument>,
<argument><expr><name>svnsync_cmd_table</name></expr></argument>, <argument><expr><name>svnsync_options</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>main</name><parameter_list>(<param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name><name>argv</name><index>[]</index></name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_opt_subcommand_desc_t</name> *</type><name>subcommand</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>received_opts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>opt_baton_t</name></type> <name>opt_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_config_t</name> *</type><name>config</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>apr_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_getopt_t</name> *</type><name>os</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>opt_id</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>username</name> <init>= <expr><name>NULL</name></expr></init>, *<name>source_username</name> <init>= <expr><name>NULL</name></expr></init>, *<name>sync_username</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>password</name> <init>= <expr><name>NULL</name></expr></init>, *<name>source_password</name> <init>= <expr><name>NULL</name></expr></init>, *<name>sync_password</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>svn_cmdline_init</name><argument_list>(<argument><expr>"svnsync"</expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call> != <name>EXIT_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>err</name> = <call><name>check_lib_versions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><call><name>svn_cmdline_handle_exit_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"svnsync: "</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>pool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_ra_initialize</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><call><name>svn_cmdline_handle_exit_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"svnsync: "</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>opt_baton</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>opt_baton</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>received_opts</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>SVN_OPT_MAX_OPTIONS</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>argc</name> &lt;= 1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>help_cmd</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>err</name> = <call><name>svn_cmdline__getopt_init</name><argument_list>(<argument><expr>&amp;<name>os</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><call><name>svn_cmdline_handle_exit_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"svnsync: "</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name><name>os</name>-&gt;<name>interleave</name></name> = 1</expr>;</expr_stmt>
<for>for (<init>;</init><condition>;</condition><incr/>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>opt_arg</name></decl>;</decl_stmt>
<expr_stmt><expr><name>apr_err</name> = <call><name>apr_getopt_long</name><argument_list>(<argument><expr><name>os</name></expr></argument>, <argument><expr><name>svnsync_options</name></expr></argument>, <argument><expr>&amp;<name>opt_id</name></expr></argument>, <argument><expr>&amp;<name>opt_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_EOF</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<break>break;</break></then>
<else>else <if>if <condition>(<expr><name>apr_err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>help_cmd</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
}</block></then></if></else></if>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>received_opts</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call> = <name>opt_id</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>opt_id</name></expr>)</condition> <block>{
<case>case <expr><name>svnsync_opt_non_interactive</name></expr>:
<expr_stmt><expr><name><name>opt_baton</name>.<name>non_interactive</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>svnsync_opt_no_auth_cache</name></expr>:
<expr_stmt><expr><name><name>opt_baton</name>.<name>no_auth_cache</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>svnsync_opt_auth_username</name></expr>:
<expr_stmt><expr><name>username</name> = <name>opt_arg</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>svnsync_opt_auth_password</name></expr>:
<expr_stmt><expr><name>password</name> = <name>opt_arg</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>svnsync_opt_source_username</name></expr>:
<expr_stmt><expr><name>source_username</name> = <name>opt_arg</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>svnsync_opt_source_password</name></expr>:
<expr_stmt><expr><name>source_password</name> = <name>opt_arg</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>svnsync_opt_sync_username</name></expr>:
<expr_stmt><expr><name>sync_username</name> = <name>opt_arg</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>svnsync_opt_sync_password</name></expr>:
<expr_stmt><expr><name>sync_password</name> = <name>opt_arg</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>svnsync_opt_config_dir</name></expr>:
<expr_stmt><expr><name><name>opt_baton</name>.<name>config_dir</name></name> = <name>opt_arg</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>svnsync_opt_version</name></expr>:
<expr_stmt><expr><name><name>opt_baton</name>.<name>version</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'q'</expr>:
<expr_stmt><expr><name><name>opt_baton</name>.<name>quiet</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'?'</expr>:
</case><case>case <expr>'h'</expr>:
<expr_stmt><expr><name><name>opt_baton</name>.<name>help</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</case><default>default: <block>{
<expr_stmt><expr><call><name>help_cmd</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
}</block>
</default>}</block></switch>
}</block></for>
<if>if <condition>(<expr><name><name>opt_baton</name>.<name>help</name></name></expr>)</condition><then>
<expr_stmt><expr><name>subcommand</name> = <call><name>svn_opt_get_canonical_subcommand</name><argument_list>(<argument><expr><name>svnsync_cmd_table</name></expr></argument>, <argument><expr>"help"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>(<name>username</name> || <name>password</name>)
&amp;&amp; (<name>source_username</name> || <name>sync_username</name>
|| <name>source_password</name> || <name>sync_password</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>svn_error_create</name>
<argument_list>(<argument><expr><name>SVN_ERR_CL_ARG_PARSING_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Cannot use --username or --password with any of "
"--source-username, --source-password, --sync-username, "
"or --sync-password.\n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_cmdline_handle_exit_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"svnsync: "</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>username</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>source_username</name> = <name>username</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sync_username</name> = <name>username</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>password</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>source_password</name> = <name>password</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sync_password</name> = <name>password</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>opt_baton</name>.<name>source_username</name></name> = <name>source_username</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt_baton</name>.<name>source_password</name></name> = <name>source_password</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt_baton</name>.<name>sync_username</name></name> = <name>sync_username</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opt_baton</name>.<name>sync_password</name></name> = <name>sync_password</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_config_ensure</name><argument_list>(<argument><expr><name><name>opt_baton</name>.<name>config_dir</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><call><name>svn_cmdline_handle_exit_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"synsync: "</expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>subcommand</name> == <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>os</name>-&gt;<name>ind</name></name> &gt;= <name><name>os</name>-&gt;<name>argc</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>opt_baton</name>.<name>version</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>svn_opt_subcommand_desc_t</name></type> <name>pseudo_cmd</name> <init>= <expr><block>{
<expr>"--version"</expr>, <expr><name>help_cmd</name></expr>, <expr><block>{<expr>0</expr>}</block></expr>, <expr>""</expr>,
<expr><block>{
<expr><name>svnsync_opt_version</name></expr>,
}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>subcommand</name> = &amp;<name>pseudo_cmd</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>help_cmd</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
}</block></else></if>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>first_arg</name> <init>= <expr><name><name>os</name>-&gt;<name>argv</name><index>[<expr><name><name>os</name>-&gt;<name>ind</name></name>++</expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>subcommand</name> = <call><name>svn_opt_get_canonical_subcommand</name><argument_list>(<argument><expr><name>svnsync_cmd_table</name></expr></argument>,
<argument><expr><name>first_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>subcommand</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>help_cmd</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
}</block></then></if>
}</block></else></if>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>received_opts</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<expr_stmt><expr><name>opt_id</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>received_opts</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>opt_id</name> == 'h' || <name>opt_id</name> == '?'</expr>)</condition><then>
<continue>continue;</continue></then></if>
<if>if <condition>(<expr>! <call><name>svn_opt_subcommand_takes_option</name><argument_list>(<argument><expr><name>subcommand</name></expr></argument>, <argument><expr><name>opt_id</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>optstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_getopt_option_t</name> *</type><name>badopt</name> <init>=
<expr><call><name>svn_opt_get_option_from_code</name><argument_list>(<argument><expr><name>opt_id</name></expr></argument>, <argument><expr><name>svnsync_options</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_opt_format_option</name><argument_list>(<argument><expr>&amp;<name>optstr</name></expr></argument>, <argument><expr><name>badopt</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>subcommand</name>-&gt;<name>name</name><index>[<expr>0</expr>]</index></name> == '-'</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>help_cmd</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>err</name> = <call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_CL_ARG_PARSING_ERROR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Subcommand '%s' doesn't accept option '%s'\n"
"Type 'svnsync help %s' for usage.\n"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>subcommand</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>optstr</name></expr></argument>, <argument><expr><name><name>subcommand</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_cmdline_handle_exit_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"svnsync: "</expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
}</block></then></if>
}</block></for>
<expr_stmt><expr><name>err</name> = <call><name>svn_config_get_config</name><argument_list>(<argument><expr>&amp;<name><name>opt_baton</name>.<name>config</name></name></expr></argument>, <argument><expr><name><name>opt_baton</name>.<name>config_dir</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><call><name>svn_cmdline_handle_exit_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"svnsync: "</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>config</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>opt_baton</name>.<name>config</name></name></expr></argument>, <argument><expr><name>SVN_CONFIG_CATEGORY_CONFIG</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>signal_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGBREAK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>apr_signal</name><argument_list>(<argument><expr><name>SIGBREAK</name></expr></argument>, <argument><expr><name>signal_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>apr_signal</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><name>signal_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>apr_signal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>signal_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>apr_signal</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGXFSZ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>apr_signal</name><argument_list>(<argument><expr><name>SIGXFSZ</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>err</name> = <call><name>svn_cmdline_setup_auth_baton</name><argument_list>(<argument><expr>&amp;<name><name>opt_baton</name>.<name>source_auth_baton</name></name></expr></argument>,
<argument><expr><name><name>opt_baton</name>.<name>non_interactive</name></name></expr></argument>,
<argument><expr><name><name>opt_baton</name>.<name>source_username</name></name></expr></argument>,
<argument><expr><name><name>opt_baton</name>.<name>source_password</name></name></expr></argument>,
<argument><expr><name><name>opt_baton</name>.<name>config_dir</name></name></expr></argument>,
<argument><expr><name><name>opt_baton</name>.<name>no_auth_cache</name></name></expr></argument>,
<argument><expr><name>config</name></expr></argument>,
<argument><expr><name>check_cancel</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>err</name></expr>)</condition><then>
<expr_stmt><expr><name>err</name> = <call><name>svn_cmdline_setup_auth_baton</name><argument_list>(<argument><expr>&amp;<name><name>opt_baton</name>.<name>sync_auth_baton</name></name></expr></argument>,
<argument><expr><name><name>opt_baton</name>.<name>non_interactive</name></name></expr></argument>,
<argument><expr><name><name>opt_baton</name>.<name>sync_username</name></name></expr></argument>,
<argument><expr><name><name>opt_baton</name>.<name>sync_password</name></name></expr></argument>,
<argument><expr><name><name>opt_baton</name>.<name>config_dir</name></name></expr></argument>,
<argument><expr><name><name>opt_baton</name>.<name>no_auth_cache</name></name></expr></argument>,
<argument><expr><name>config</name></expr></argument>,
<argument><expr><name>check_cancel</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>! <name>err</name></expr>)</condition><then>
<expr_stmt><expr><name>err</name> = <call>(*<name><name>subcommand</name>-&gt;<name>cmd_func</name></name>)<argument_list>(<argument><expr><name>os</name></expr></argument>, <argument><expr>&amp;<name>opt_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_CL_INSUFFICIENT_ARGS</name>
|| <name><name>err</name>-&gt;<name>apr_err</name></name> == <name>SVN_ERR_CL_ARG_PARSING_ERROR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>svn_error_quick_wrap</name><argument_list>(<argument><expr><name>err</name></expr></argument>,
<argument><expr><call><name>_</name><argument_list>(<argument><expr>"Try 'svnsync help' for more info"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><call><name>svn_cmdline_handle_exit_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"svnsync: "</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>EXIT_SUCCESS</name></expr>;</return>
}</block></function>
</unit>
