<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/bindings/javahl/native/JNIThreadData.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>JNITHREADDATA_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNITHREADDATA_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;jni.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"JNIUtil.h"</cpp:file></cpp:include>
<struct_decl>struct <name>apr_threadkey_t</name>;</struct_decl>
<decl_stmt><decl><type><name>class</name></type> <name>Pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>JNIThreadData</name> <block>{
<label><name>public</name>:</label>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>del</name><parameter_list>(<param><decl><type><name>void</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>JNIThreadData</name> *</type><name>getThreadData</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>initThreadData</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>pushNewThreadData</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>popThreadData</name><parameter_list>()</parameter_list>;</function_decl>
<expr_stmt><expr><call><name>JNIThreadData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>~<call><name>JNIThreadData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>JNIEnv</name> *</type><name>m_env</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>m_exceptionThrown</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>m_formatBuffer</name><index>[<expr><name>JNIUtil</name>::<name>formatBufferSize</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Pool</name> *</type><name>m_requestPool</name></decl>;</decl_stmt>
<label><name>private</name>:</label>
<decl_stmt><decl><type><name>JNIThreadData</name> *</type><name>m_previous</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_threadkey_t</name> *</type><name>g_key</name></decl>;</decl_stmt>
}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
