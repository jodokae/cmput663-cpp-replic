<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/bindings/javahl/native/JNIStackElement.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>JNISTACKELEMENT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNISTACKELEMENT_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;jni.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"JNIUtil.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNIEntry</name><parameter_list>(<param><type><name>c</name></type></param>,<param><type><name>m</name></type></param>)</parameter_list></cpp:macro> <cpp:value>JNIStackElement se(env, #c, #m, jthis);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNIEntryStatic</name><parameter_list>(<param><type><name>c</name></type></param>,<param><type><name>m</name></type></param>)</parameter_list></cpp:macro> <cpp:value>JNIStackElement se(env, #c, #m, jclazz);</cpp:value></cpp:define>
<decl_stmt><decl><type><name>class</name></type> <name>JNIStackElement</name> <block>{
<label><name>public</name>:</label>
<macro><name>JNIStackElement</name><argument_list>(<argument>JNIEnv *env</argument>, <argument>const char *clazz</argument>,
<argument>const char *method</argument>, <argument>jobject jthis</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name>virtual</name> ~<call><name>JNIStackElement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>m_method</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>m_clazz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>m_objectID</name><index>[<expr><name>JNIUtil</name>::<name>formatBufferSize</name></expr>]</index></name></decl>;</decl_stmt>
}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
