<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/bindings/javahl/native/JNIUtil.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>JNIUTIL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JNIUTIL_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>
<struct_decl>struct <name>apr_pool_t</name>;</struct_decl>
<struct_decl>struct <name>svn_error</name>;</struct_decl>
<decl_stmt><decl><type><name>class</name></type> <name>JNIMutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>SVNBase</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>class</name></type> <name>Pool</name></decl>;</decl_stmt>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;jni.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<struct_decl>struct <name>svn_error_t</name>;</struct_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JAVA_PACKAGE</name></cpp:macro> <cpp:value>"org/tigris/subversion/javahl"</cpp:value></cpp:define>
<decl_stmt><decl><type><name>class</name></type> <name>JNIUtil</name> <block>{
<label><name>public</name>:</label>
<function_decl><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>preprocessPath</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *&amp;</type><name>path</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>throwNativeException</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>exceptionClassName</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>source</name> <init>= <expr><name>NULL</name></expr></init></decl></param>,
<name>int</name> <name>aprErr</name> = -1)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>throwNullPointerException</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>message</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>jbyteArray</name></type> <name>makeJByteArray</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>signed</name> <name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>int</name></type> <name>length</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>setRequestPool</name><parameter_list>(<param><decl><type><name>Pool</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Pool</name> *</type><name>getRequestPool</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>jobject</name></type> <name>createDate</name><parameter_list>(<param><decl><type><name>apr_time_t</name></type> <name>time</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>logMessage</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>message</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>getLogLevel</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> *</type><name>getFormatBuffer</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>initLogFile</name><parameter_list>(<param><decl><type><name>int</name></type> <name>level</name></decl></param>, <param><decl><type><name>jstring</name></type> <name>path</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>jstring</name></type> <name>makeJString</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txt</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>isJavaExceptionThrown</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>JNIEnv</name> *</type><name>getEnv</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>setEnv</name><parameter_list>(<param><decl><type><name>JNIEnv</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>isExceptionThrown</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handleAPRError</name><parameter_list>(<param><decl><type><name>int</name></type> <name>error</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>op</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>enqueueForDeletion</name><parameter_list>(<param><decl><type><name>SVNBase</name> *</type><name>object</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>putFinalizedClient</name><parameter_list>(<param><decl><type><name>SVNBase</name> *</type><name>cl</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>thrownExceptionToCString</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handleSVNError</name><parameter_list>(<param><decl><type><name>svn_error_t</name> *</type><name>err</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>jstring</name></type> <name>makeSVNErrorMessage</name><parameter_list>(<param><decl><type><name>svn_error_t</name> *</type><name>err</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>raiseThrowable</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>message</name></decl></param>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>void</name></type> <name>throwError</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>message</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>raiseThrowable</name><argument_list>(<argument><expr><name>JAVA_PACKAGE</name>"/JNIError"</expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function_decl><type><specifier>static</specifier> <name>apr_pool_t</name> *</type><name>getPool</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>JNIGlobalInit</name><parameter_list>(<param><decl><type><name>JNIEnv</name> *</type><name>env</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>JNIInit</name><parameter_list>(<param><decl><type><name>JNIEnv</name> *</type><name>env</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>JNIMutex</name> *</type><name>getGlobalPoolMutex</name><parameter_list>()</parameter_list>;</function_decl>
<enum>enum <block>{ <decl><name>formatBufferSize</name> <init>= <expr>2048</expr></init></decl> }</block>;</enum>
<enum>enum <block>{ <decl><name>noLog</name></decl>, <decl><name>errorLog</name></decl>, <decl><name>exceptionLog</name></decl>, <decl><name>entryLog</name></decl> }</block> <decl><name>LogLevel</name></decl>;</enum>
<label><name>private</name>:</label>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>assembleErrorMessage</name><argument_list>(<argument><expr><name>svn_error_t</name> *<name>err</name></expr></argument>, <argument><expr><name>int</name> <name>depth</name></expr></argument>,
<argument><expr><name>apr_status_t</name> <name>parent_apr_err</name></expr></argument>,
<argument><expr><name>std</name>::<name>string</name> &amp;<name>buffer</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>setExceptionThrown</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>flag</name> <init>= <expr><name>true</name></expr></init></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>g_logLevel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_pool_t</name> *</type><name>g_pool</name></decl>;</decl_stmt>
<expr_stmt><expr>static <name>std</name>::<name>list</name>&lt;<name>SVNBase</name>*&gt; <name>g_finalizedObjects</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>JNIMutex</name> *</type><name>g_finalizedObjectsMutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>JNIMutex</name> *</type><name>g_logMutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>g_initException</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>g_inInit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>JNIEnv</name> *</type><name>g_initEnv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>g_initFormatBuffer</name><index>[<expr><name>formatBufferSize</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr>static <name>std</name>::<name>ofstream</name> <name>g_logStream</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>JNIMutex</name> *</type><name>g_globalPoolMutext</name></decl>;</decl_stmt>
}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_JNI_NULL_PTR_EX</name><parameter_list>(<param><type><name>expr</name></type></param>, <param><type><name>str</name></type></param>, <param><type><name>ret_val</name></type></param>)</parameter_list></cpp:macro> <cpp:value>if (expr == NULL) { JNIUtil::throwNullPointerException(str); return ret_val ; }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_JNI_ERR</name><parameter_list>(<param><type><name>expr</name></type></param>, <param><type><name>ret_val</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do { svn_error_t *svn_jni_err__temp = (expr); if (svn_jni_err__temp != SVN_NO_ERROR) { JNIUtil::handleSVNError(svn_jni_err__temp); return ret_val ; } } while (0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
