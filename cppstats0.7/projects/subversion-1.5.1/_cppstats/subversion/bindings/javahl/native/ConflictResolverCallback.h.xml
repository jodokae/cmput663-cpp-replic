<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/bindings/javahl/native/ConflictResolverCallback.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>CONFLICTRESOLVERCALLBACK_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFLICTRESOLVERCALLBACK_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;jni.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_wc.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><name>class</name></type> <name>ConflictResolverCallback</name> <block>{
<label><name>private</name>:</label>
<decl_stmt><decl><type><name>jobject</name></type> <name>m_conflictResolver</name></decl>;</decl_stmt>
<macro><name>ConflictResolverCallback</name><argument_list>(<argument>jobject jconflictResolver</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<label><name>public</name>:</label>
<expr_stmt><expr>~<call><name>ConflictResolverCallback</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<function_decl><type><specifier>static</specifier> <name>ConflictResolverCallback</name> *</type>
<name>makeCConflictResolverCallback</name><parameter_list>(<param><decl><type><name>jobject</name></type> <name>jconflictResolver</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>resolveConflict</name><parameter_list>(<param><decl><type><name>svn_wc_conflict_result_t</name> **</type><name>result</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_wc_conflict_description_t</name> *</type><name>desc</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<label><name>protected</name>:</label>
<function_decl><type><name>svn_error_t</name> *</type> <name>resolve</name><parameter_list>(<param><decl><type><name>svn_wc_conflict_result_t</name> **</type><name>result</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_wc_conflict_description_t</name> *</type><name>desc</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<label><name>private</name>:</label>
<function_decl><type><specifier>static</specifier> <name>svn_wc_conflict_result_t</name> *</type> <name>javaResultToC</name><parameter_list>(<param><decl><type><name>jobject</name></type> <name>result</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>svn_wc_conflict_choice_t</name></type> <name>javaChoiceToC</name><parameter_list>(<param><decl><type><name>jint</name></type> <name>choice</name></decl></param>)</parameter_list>;</function_decl>
}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
