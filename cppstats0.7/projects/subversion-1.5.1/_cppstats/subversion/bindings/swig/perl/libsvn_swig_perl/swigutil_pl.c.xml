<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/bindings/swig/perl/libsvn_swig_perl/swigutil_pl.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;EXTERN.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;perl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;XSUB.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_general.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_portable.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"swig_perl_external_runtime.swg"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"swigutil_pl.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <name>HV</name> *</type><name>type_cache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_SWIG_TYPE</name><parameter_list>(<param><type><name>name</name></type></param>)</parameter_list></cpp:macro> <cpp:value>_swig_perl_type_query(name, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POOLINFO</name></cpp:macro> <cpp:value>_SWIG_TYPE("apr_pool_t *")</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>swig_type_info</name> *</type><name>_swig_perl_type_query</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>typename</name></decl></param>, <param><decl><type><name>U32</name></type> <name>klen</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SV</name> **</type><name>type_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>swig_type_info</name> *</type><name>tinfo</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>type_cache</name></expr>)</condition><then>
<expr_stmt><expr><name>type_cache</name> = <call><name>newHV</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>klen</name> == 0</expr>)</condition><then>
<expr_stmt><expr><name>klen</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>typename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>(<name>type_info</name> = <call><name>hv_fetch</name><argument_list>(<argument><expr><name>type_cache</name></expr></argument>, <argument><expr><name>typename</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>)</expr>)</condition><then>
<return>return <expr><call>(<name>swig_type_info</name> *) <argument_list>(<argument><expr><call><name>SvIV</name><argument_list>(<argument><expr>*<name>type_info</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>tinfo</name> = <call><name>SWIG_TypeQuery</name><argument_list>(<argument><expr><name>typename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hv_store</name><argument_list>(<argument><expr><name>type_cache</name></expr></argument>, <argument><expr><name>typename</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>, <argument><expr><call><name>newSViv</name><argument_list>(<argument><expr>(<name>IV</name>)<name>tinfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>tinfo</name></expr>;</return>
}</block></function>
<typedef>typedef <function_decl><type><name>void</name> *</type>(*<name>pl_element_converter_t</name>)<parameter_list>(<param><decl><type><name>SV</name> *</type><name>value</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl></typedef>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>convert_pl_string</name><parameter_list>(<param><decl><type><name>SV</name> *</type><name>value</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>void</name> **</type><name>result</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>result</name> = <call><name>SvPV_nolen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>*<name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>convert_pl_obj</name><parameter_list>(<param><decl><type><name>SV</name> *</type><name>value</name></decl></param>, <param><decl><type><name>swig_type_info</name> *</type><name>tinfo</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>void</name> **</type><name>result</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>SWIG_ConvertPtr</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>tinfo</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>croak</name><argument_list>(<argument><expr>"unable to convert from swig object"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr>*<name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_hash_t</name> *</type><name>svn_swig_pl_to_hash</name><parameter_list>(<param><decl><type><name>SV</name> *</type><name>source</name></decl></param>,
<param><decl><type><name>pl_element_converter_t</name></type> <name>cv</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HV</name> *</type><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>I32</name></type> <name>cnt</name></decl>, <decl><type ref="prev"/><name>retlen</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!(<name>source</name> &amp;&amp; <call><name>SvROK</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>SvTYPE</name><argument_list>(<argument><expr><call><name>SvRV</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> == <name>SVt_PVHV</name>)</expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>hash</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> = (<name>HV</name> *)<call><name>SvRV</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cnt</name> = <call><name>hv_iterinit</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>cnt</name>--</expr>)</condition> <block>{
<decl_stmt><decl><type><name>SV</name>*</type> <name>item</name> <init>= <expr><call><name>hv_iternextsv</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>retlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>val</name> <init>= <expr><call><name>cv</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>hash</name></expr>;</return>
}</block></function>
<function><type><name>apr_hash_t</name> *</type><name>svn_swig_pl_objs_to_hash</name><parameter_list>(<param><decl><type><name>SV</name> *</type><name>source</name></decl></param>, <param><decl><type><name>swig_type_info</name> *</type><name>tinfo</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_swig_pl_to_hash</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr>(<name>pl_element_converter_t</name>)<name>convert_pl_obj</name></expr></argument>,
<argument><expr><name>tinfo</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>apr_hash_t</name> *</type><name>svn_swig_pl_strings_to_hash</name><parameter_list>(<param><decl><type><name>SV</name> *</type><name>source</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_swig_pl_to_hash</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>convert_pl_string</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>apr_hash_t</name> *</type><name>svn_swig_pl_objs_to_hash_by_name</name><parameter_list>(<param><decl><type><name>SV</name> *</type><name>source</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>typename</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>swig_type_info</name> *</type><name>tinfo</name> <init>= <expr><call><name>_SWIG_TYPE</name><argument_list>(<argument><expr><name>typename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>svn_swig_pl_objs_to_hash</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>tinfo</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier>
<name>apr_array_header_t</name> *</type><name>svn_swig_pl_to_array</name><parameter_list>(<param><decl><type><name>SV</name> *</type><name>source</name></decl></param>,
<param><decl><type><name>pl_element_converter_t</name></type> <name>cv</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>targlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AV</name>*</type> <name>array</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>SvROK</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>SvTYPE</name><argument_list>(<argument><expr><call><name>SvRV</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> == <name>SVt_PVAV</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>array</name> = (<name>AV</name> *)<call><name>SvRV</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>targlen</name> = <call><name>av_len</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call> + 1</expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>targlen</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp</name>-&gt;<name>nelts</name></name> = <name>targlen</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>targlen</name>--</expr>)</condition> <block>{
<decl_stmt><decl><type><name>SV</name> **</type><name>item</name> <init>= <expr><call><name>av_fetch</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>targlen</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>targlen</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <call><name>cv</name><argument_list>(<argument><expr>*<name>item</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
}</block></then> <else>else <if>if <condition>(<expr><call><name>SvOK</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>targlen</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>temp</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>targlen</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp</name>-&gt;<name>nelts</name></name> = <name>targlen</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <call><name>cv</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>croak</name><argument_list>(<argument><expr>"Must pass a single value or an array reference"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
<return>return <expr><name>temp</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>svn_swig_pl_strings_to_array</name><parameter_list>(<param><decl><type><name>SV</name> *</type><name>source</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_swig_pl_to_array</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>convert_pl_string</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>svn_swig_pl_objs_to_array</name><parameter_list>(<param><decl><type><name>SV</name> *</type><name>source</name></decl></param>,
<param><decl><type><name>swig_type_info</name> *</type><name>tinfo</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_swig_pl_to_array</name><argument_list>(<argument><expr><name>source</name></expr></argument>,
<argument><expr>(<name>pl_element_converter_t</name>)<name>convert_pl_obj</name></expr></argument>,
<argument><expr><name>tinfo</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<typedef>typedef <function_decl><type><name>SV</name> *</type>(*<name>element_converter_t</name>)<parameter_list>(<param><decl><type><name>void</name> *</type><name>value</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>)</parameter_list>;</function_decl></typedef>
<function><type><specifier>static</specifier> <name>SV</name> *</type><name>convert_string</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SV</name> *</type><name>obj</name> <init>= <expr><call><name>sv_2mortal</name><argument_list>(<argument><expr><call><name>newSVpv</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>obj</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>SV</name> *</type><name>convert_svn_string_t</name><parameter_list>(<param><decl><type><name>svn_string_t</name> *</type><name>value</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SV</name> *</type><name>obj</name> <init>= <expr><call><name>sv_2mortal</name><argument_list>(<argument><expr><call><name>newSVpv</name><argument_list>(<argument><expr><name><name>value</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>value</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>obj</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>SV</name> *</type><name>convert_to_swig_type</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>ptr</name></decl></param>, <param><decl><type><name>swig_type_info</name> *</type><name>tinfo</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SV</name> *</type><name>obj</name> <init>= <expr><call><name>sv_newmortal</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SWIG_MakePtr</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>tinfo</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>obj</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>SV</name> *</type><name>convert_int</name><parameter_list>(<param><decl><type><name>int</name></type> <name>value</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>sv_2mortal</name><argument_list>(<argument><expr><call><name>newSViv</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>SV</name> *</type><name>convert_hash</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>hash</name></decl></param>, <param><decl><type><name>element_converter_t</name></type> <name>converter_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HV</name> *</type><name>hv</name></decl>;</decl_stmt>
<expr_stmt><expr><name>hv</name> = <call><name>newHV</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>klen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SV</name> *</type><name>obj</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>(<name>void</name> *)&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>klen</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>obj</name> = <call><name>converter_func</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hv_store</name><argument_list>(<argument><expr><name>hv</name></expr></argument>, <argument><expr>(const <name>char</name> *)<name>key</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SvREFCNT_inc</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<return>return <expr><call><name>sv_2mortal</name><argument_list>(<argument><expr><call><name>newRV_noinc</name><argument_list>(<argument><expr>(<name>SV</name>*)<name>hv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>SV</name> *</type><name>svn_swig_pl_prophash_to_hash</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>hash</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>convert_hash</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr>(<name>element_converter_t</name>)<name>convert_svn_string_t</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>SV</name> *</type><name>svn_swig_pl_convert_hash</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>hash</name></decl></param>, <param><decl><type><name>swig_type_info</name> *</type><name>tinfo</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>convert_hash</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr>(<name>element_converter_t</name>)<name>convert_to_swig_type</name></expr></argument>,
<argument><expr><name>tinfo</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>SV</name> *</type><name>convert_array</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>array</name></decl></param>,
<param><decl><type><name>element_converter_t</name></type> <name>converter_func</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>AV</name> *</type><name>list</name> <init>= <expr><call><name>newAV</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>array</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>element</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>void</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SV</name> *</type><name>item</name> <init>= <expr><call><name>converter_func</name><argument_list>(<argument><expr><name>element</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>av_push</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SvREFCNT_inc</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<return>return <expr><call><name>sv_2mortal</name><argument_list>(<argument><expr><call><name>newRV_noinc</name><argument_list>(<argument><expr>(<name>SV</name>*)<name>list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>SV</name> *</type><name>svn_swig_pl_array_to_list</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>array</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>convert_array</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr>(<name>element_converter_t</name>)<name>convert_string</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>SV</name> *</type><name>svn_swig_pl_convert_array</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>array</name></decl></param>,
<param><decl><type><name>swig_type_info</name> *</type><name>tinfo</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>convert_array</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr>(<name>element_converter_t</name>)<name>convert_to_swig_type</name></expr></argument>,
<argument><expr><name>tinfo</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type><name>svn_swig_pl_callback_thunk</name><parameter_list>(<param><decl><type><name>perl_func_invoker_t</name></type> <name>caller_func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>func</name></decl></param>,
<param><decl><type><name>SV</name> **</type><name>result</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fmt</name></decl></param>, <param><decl><type>...</type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fp</name> <init>= <expr><name>fmt</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>I32</name></type> <name>call_flags</name> <init>= <expr><name>result</name> ? <name>G_SCALAR</name> : (<name>G_VOID</name> &amp; <name>G_DISCARD</name>)</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>dSP</name></expr> ;</expr_stmt>
<expr_stmt><expr><name>ENTER</name></expr> ;</expr_stmt>
<expr_stmt><expr><name>SAVETMPS</name></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>PUSHMARK</name><argument_list>(<argument><expr><name>SP</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>*<name>fp</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>o</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SV</name> *</type><name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>swig_type_info</name> *</type><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>str</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr>*<name>fp</name>++</expr>)</condition> <block>{
<case>case <expr>'O'</expr>:
<expr_stmt><expr><call><name>XPUSHs</name><argument_list>(<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>SV</name> *</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'S'</expr>:
<expr_stmt><expr><name>o</name> = <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>void</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> = <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>swig_type_info</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>obj</name> = <call><name>sv_newmortal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SWIG_MakePtr</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XPUSHs</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'s'</expr>:
<expr_stmt><expr><name>c</name> = <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XPUSHs</name><argument_list>(<argument><expr><name>c</name> ? <call><name>sv_2mortal</name><argument_list>(<argument><expr><call><name>newSVpv</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> : &amp;<name>PL_sv_undef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'i'</expr>:
<expr_stmt><expr><call><name>XPUSHs</name><argument_list>(<argument><expr><call><name>sv_2mortal</name><argument_list>(<argument><expr><call><name>newSViv</name><argument_list>(<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>apr_int32_t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'u'</expr>:
<expr_stmt><expr><call><name>XPUSHs</name><argument_list>(<argument><expr><call><name>sv_2mortal</name><argument_list>(<argument><expr><call><name>newSViv</name><argument_list>(<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>apr_uint32_t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'r'</expr>:
<expr_stmt><expr><call><name>XPUSHs</name><argument_list>(<argument><expr><call><name>sv_2mortal</name><argument_list>(<argument><expr><call><name>newSViv</name><argument_list>(<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>svn_revnum_t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'b'</expr>:
<expr_stmt><expr><call><name>XPUSHs</name><argument_list>(<argument><expr><call><name>sv_2mortal</name><argument_list>(<argument><expr><call><name>newSViv</name><argument_list>(<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>svn_boolean_t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'t'</expr>:
<expr_stmt><expr><name>str</name> = <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>svn_string_t</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XPUSHs</name><argument_list>(<argument><expr><name>str</name> ? <call><name>sv_2mortal</name><argument_list>(<argument><expr><call><name>newSVpv</name><argument_list>(<argument><expr><name><name>str</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>str</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
: &amp;<name>PL_sv_undef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'L'</expr>:
<expr_stmt><expr><name>c</name> = <call><name>malloc</name><argument_list>(<argument><expr>30</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr>30</expr></argument>,<argument><expr>"%" <name>APR_INT64_T_FMT</name></expr></argument>,<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>apr_int64_t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XPUSHs</name><argument_list>(<argument><expr><call><name>sv_2mortal</name><argument_list>(<argument><expr><call><name>newSVpv</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'U'</expr>:
<expr_stmt><expr><name>c</name> = <call><name>malloc</name><argument_list>(<argument><expr>30</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr>30</expr></argument>,<argument><expr>"%" <name>APR_UINT64_T_FMT</name></expr></argument>,<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>apr_uint64_t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XPUSHs</name><argument_list>(<argument><expr><call><name>sv_2mortal</name><argument_list>(<argument><expr><call><name>newSVpv</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'z'</expr>:
<if>if <condition>(<expr><sizeof>sizeof<argument_list>(<argument><expr><name>apr_size_t</name></expr></argument>)</argument_list></sizeof> &gt;= 8</expr>)</condition><then> <block>{
<expr_stmt><expr><name>c</name> = <call><name>malloc</name><argument_list>(<argument><expr>30</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr>30</expr></argument>,<argument><expr>"%" <name>APR_SIZE_T_FMT</name></expr></argument>,<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>apr_size_t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>XPUSHs</name><argument_list>(<argument><expr><call><name>sv_2mortal</name><argument_list>(<argument><expr><call><name>newSVpv</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>XPUSHs</name><argument_list>(<argument><expr><call><name>sv_2mortal</name><argument_list>(<argument><expr><call><name>newSViv</name><argument_list>(<argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>apr_size_t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<break>break;</break>
</case>}</block></switch>
}</block></while>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>PUTBACK</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>caller_func</name></expr>)</condition> <block>{
<case>case <expr><name>CALL_SV</name></expr>:
<expr_stmt><expr><name>count</name> = <call><name>call_sv</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><name>call_flags</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>CALL_METHOD</name></expr>:
<expr_stmt><expr><name>count</name> = <call><name>call_method</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><name>call_flags</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>croak</name><argument_list>(<argument><expr>"unkonwn calling type"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
<expr_stmt><expr><name>SPAGAIN</name></expr> ;</expr_stmt>
<if>if <condition>(<expr>((<name>call_flags</name> &amp; <name>G_SCALAR</name>) &amp;&amp; <name>count</name> != 1) ||
((<name>call_flags</name> &amp; <name>G_VOID</name>) &amp;&amp; <name>count</name> != 0)</expr>)</condition><then>
<expr_stmt><expr><call><name>croak</name><argument_list>(<argument><expr>"Wrong number of returns"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>result</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>result</name> = <name>POPs</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SvREFCNT_inc</name><argument_list>(<argument><expr>*<name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>PUTBACK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>FREETMPS</name></expr> ;</expr_stmt>
<expr_stmt><expr><name>LEAVE</name></expr> ;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>SV</name> *</type><name>editor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SV</name> *</type><name>baton</name></decl>;</decl_stmt>
}</block></struct></type> <name>item_baton</name>;</typedef>
<function><type><specifier>static</specifier> <name>item_baton</name> *</type> <name>make_baton</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><name>SV</name> *</type><name>editor</name></decl></param>, <param><decl><type><name>SV</name> *</type><name>baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>item_baton</name> *</type><name>newb</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>newb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>newb</name>-&gt;<name>editor</name></name> = <name>editor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newb</name>-&gt;<name>baton</name></name> = <name>baton</name></expr>;</expr_stmt>
<return>return <expr><name>newb</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>close_baton</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>method</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>item_baton</name> *</type><name>ib</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>ib</name>-&gt;<name>baton</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_swig_pl_callback_thunk</name><argument_list>(<argument><expr><name>CALL_METHOD</name></expr></argument>,
<argument><expr>(<name>void</name> *)<name>method</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"OOS"</expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>editor</name></name></expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>baton</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>POOLINFO</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SvREFCNT_dec</name><argument_list>(<argument><expr><name><name>ib</name>-&gt;<name>baton</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_swig_pl_callback_thunk</name><argument_list>(<argument><expr><name>CALL_METHOD</name></expr></argument>,
<argument><expr>(<name>void</name> *)<name>method</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"OS"</expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>editor</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>POOLINFO</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>thunk_set_target_revision</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>target_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>item_baton</name> *</type><name>ib</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_swig_pl_callback_thunk</name><argument_list>(<argument><expr><name>CALL_METHOD</name></expr></argument>,
<argument><expr>(<name>void</name> *)"set_target_revision"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"Or"</expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>editor</name></name></expr></argument>, <argument><expr><name>target_revision</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>thunk_open_root</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>dir_pool</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>root_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>item_baton</name> *</type><name>ib</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SV</name> *</type><name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_swig_pl_callback_thunk</name><argument_list>(<argument><expr><name>CALL_METHOD</name></expr></argument>,
<argument><expr>(<name>void</name> *)"open_root"</expr></argument>, <argument><expr>&amp;<name>result</name></expr></argument>,
<argument><expr>"OrS"</expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>editor</name></name></expr></argument>, <argument><expr><name>base_revision</name></expr></argument>,
<argument><expr><name>dir_pool</name></expr></argument>, <argument><expr><name>POOLINFO</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>root_baton</name> = <call><name>make_baton</name><argument_list>(<argument><expr><name>dir_pool</name></expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>editor</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>thunk_delete_entry</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>item_baton</name> *</type><name>ib</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_swig_pl_callback_thunk</name><argument_list>(<argument><expr><name>CALL_METHOD</name></expr></argument>,
<argument><expr>(<name>void</name> *)"delete_entry"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"OsrOS"</expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>editor</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>,
<argument><expr><name><name>ib</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>POOLINFO</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>thunk_add_directory</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>dir_pool</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>child_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>item_baton</name> *</type><name>ib</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SV</name> *</type><name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_swig_pl_callback_thunk</name><argument_list>(<argument><expr><name>CALL_METHOD</name></expr></argument>,
<argument><expr>(<name>void</name> *)"add_directory"</expr></argument>, <argument><expr>&amp;<name>result</name></expr></argument>,
<argument><expr>"OsOsrS"</expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>editor</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>baton</name></name></expr></argument>,
<argument><expr><name>copyfrom_path</name></expr></argument>, <argument><expr><name>copyfrom_revision</name></expr></argument>,
<argument><expr><name>dir_pool</name></expr></argument>, <argument><expr><name>POOLINFO</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>child_baton</name> = <call><name>make_baton</name><argument_list>(<argument><expr><name>dir_pool</name></expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>editor</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>thunk_open_directory</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>dir_pool</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>child_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>item_baton</name> *</type><name>ib</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SV</name> *</type><name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_swig_pl_callback_thunk</name><argument_list>(<argument><expr><name>CALL_METHOD</name></expr></argument>,
<argument><expr>(<name>void</name> *)"open_directory"</expr></argument>, <argument><expr>&amp;<name>result</name></expr></argument>,
<argument><expr>"OsOrS"</expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>editor</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>baton</name></name></expr></argument>,
<argument><expr><name>base_revision</name></expr></argument>, <argument><expr><name>dir_pool</name></expr></argument>, <argument><expr><name>POOLINFO</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>child_baton</name> = <call><name>make_baton</name><argument_list>(<argument><expr><name>dir_pool</name></expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>editor</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>thunk_change_dir_prop</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>dir_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>item_baton</name> *</type><name>ib</name> <init>= <expr><name>dir_baton</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_swig_pl_callback_thunk</name><argument_list>(<argument><expr><name>CALL_METHOD</name></expr></argument>,
<argument><expr>(<name>void</name> *)"change_dir_prop"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"OOstS"</expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>editor</name></name></expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><name>value</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>POOLINFO</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>thunk_close_directory</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>dir_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>close_baton</name><argument_list>(<argument><expr><name>dir_baton</name></expr></argument>, <argument><expr>"close_directory"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>thunk_absent_directory</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>item_baton</name> *</type><name>ib</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_swig_pl_callback_thunk</name><argument_list>(<argument><expr><name>CALL_METHOD</name></expr></argument>,
<argument><expr>(<name>void</name> *)"absent_directory"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"OsOS"</expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>editor</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>baton</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>POOLINFO</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>thunk_add_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>file_pool</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>file_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>item_baton</name> *</type><name>ib</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SV</name> *</type><name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_swig_pl_callback_thunk</name><argument_list>(<argument><expr><name>CALL_METHOD</name></expr></argument>,
<argument><expr>(<name>void</name> *)"add_file"</expr></argument>, <argument><expr>&amp;<name>result</name></expr></argument>,
<argument><expr>"OsOsrS"</expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>editor</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>baton</name></name></expr></argument>,
<argument><expr><name>copyfrom_path</name></expr></argument>, <argument><expr><name>copyfrom_revision</name></expr></argument>,
<argument><expr><name>file_pool</name></expr></argument>, <argument><expr><name>POOLINFO</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>file_baton</name> = <call><name>make_baton</name><argument_list>(<argument><expr><name>file_pool</name></expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>editor</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>thunk_open_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>file_pool</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>file_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>item_baton</name> *</type><name>ib</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SV</name> *</type><name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_swig_pl_callback_thunk</name><argument_list>(<argument><expr><name>CALL_METHOD</name></expr></argument>,
<argument><expr>(<name>void</name> *)"open_file"</expr></argument>, <argument><expr>&amp;<name>result</name></expr></argument>,
<argument><expr>"OsOrS"</expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>editor</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>baton</name></name></expr></argument>,
<argument><expr><name>base_revision</name></expr></argument>, <argument><expr><name>file_pool</name></expr></argument>, <argument><expr><name>POOLINFO</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>file_baton</name> = <call><name>make_baton</name><argument_list>(<argument><expr><name>file_pool</name></expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>editor</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>thunk_window_handler</name><parameter_list>(<param><decl><type><name>svn_txdelta_window_t</name> *</type><name>window</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SV</name> *</type><name>handler</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>window</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_swig_pl_callback_thunk</name><argument_list>(<argument><expr><name>CALL_SV</name></expr></argument>,
<argument><expr><name>handler</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"O"</expr></argument>,
<argument><expr>&amp;<name>PL_sv_undef</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SvREFCNT_dec</name><argument_list>(<argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>swig_type_info</name> *</type><name>tinfo</name> <init>= <expr><call><name>_SWIG_TYPE</name><argument_list>(<argument><expr>"svn_txdelta_window_t *"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_swig_pl_callback_thunk</name><argument_list>(<argument><expr><name>CALL_SV</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr>"S"</expr></argument>, <argument><expr><name>window</name></expr></argument>, <argument><expr><name>tinfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>thunk_apply_textdelta</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_checksum</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><name>svn_txdelta_window_handler_t</name> *</type><name>handler</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>h_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>item_baton</name> *</type><name>ib</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SV</name> *</type><name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_swig_pl_callback_thunk</name><argument_list>(<argument><expr><name>CALL_METHOD</name></expr></argument>,
<argument><expr>(<name>void</name> *)"apply_textdelta"</expr></argument>, <argument><expr>&amp;<name>result</name></expr></argument>,
<argument><expr>"OOsS"</expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>editor</name></name></expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>baton</name></name></expr></argument>,
<argument><expr><name>base_checksum</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>POOLINFO</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>SvOK</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>SvROK</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>SvTYPE</name><argument_list>(<argument><expr><call><name>SvRV</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> == <name>SVt_PVAV</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>swig_type_info</name> *</type><name>handler_info</name> <init>=
<expr><call><name>_SWIG_TYPE</name><argument_list>(<argument><expr>"svn_txdelta_window_handler_t"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>swig_type_info</name> *</type><name>void_info</name> <init>= <expr><call><name>_SWIG_TYPE</name><argument_list>(<argument><expr>"void *"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AV</name> *</type><name>array</name> <init>= <expr>(<name>AV</name> *)<call><name>SvRV</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>SWIG_ConvertPtr</name><argument_list>(<argument><expr>*<call><name>av_fetch</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>(<name>void</name> **)<name>handler</name></expr></argument>, <argument><expr><name>handler_info</name></expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>croak</name><argument_list>(<argument><expr>"Unable to convert from SWIG Type"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>SWIG_ConvertPtr</name><argument_list>(<argument><expr>*<call><name>av_fetch</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>h_baton</name></expr></argument>, <argument><expr><name>void_info</name></expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>croak</name><argument_list>(<argument><expr>"Unable to convert from SWIG Type "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SvREFCNT_dec</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>handler</name> = <name>thunk_window_handler</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>h_baton</name> = <name>result</name></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>handler</name> = <name>svn_delta_noop_window_handler</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>h_baton</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>thunk_change_file_prop</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>item_baton</name> *</type><name>ib</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_swig_pl_callback_thunk</name><argument_list>(<argument><expr><name>CALL_METHOD</name></expr></argument>,
<argument><expr>(<name>void</name> *)"change_file_prop"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"OOstS"</expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>editor</name></name></expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><name>value</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>POOLINFO</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>thunk_close_file</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>text_checksum</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>item_baton</name> *</type><name>ib</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_swig_pl_callback_thunk</name><argument_list>(<argument><expr><name>CALL_METHOD</name></expr></argument>,
<argument><expr>(<name>void</name> *)"close_file"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"OOsS"</expr></argument>,
<argument><expr><name><name>ib</name>-&gt;<name>editor</name></name></expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><name>text_checksum</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>POOLINFO</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SvREFCNT_dec</name><argument_list>(<argument><expr><name><name>ib</name>-&gt;<name>baton</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>thunk_absent_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>item_baton</name> *</type><name>ib</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_swig_pl_callback_thunk</name><argument_list>(<argument><expr><name>CALL_METHOD</name></expr></argument>,
<argument><expr>(<name>void</name> *)"absent_file"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"OsOS"</expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>editor</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>baton</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>POOLINFO</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>thunk_close_edit</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>close_baton</name><argument_list>(<argument><expr><name>edit_baton</name></expr></argument>, <argument><expr>"close_edit"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>thunk_abort_edit</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>close_baton</name><argument_list>(<argument><expr><name>edit_baton</name></expr></argument>, <argument><expr>"abort_edit"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>svn_delta_wrap_window_handler</name><parameter_list>(<param><decl><type><name>svn_txdelta_window_handler_t</name> *</type><name>handler</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>h_baton</name></decl></param>,
<param><decl><type><name>SV</name> *</type><name>callback</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>*<name>handler</name> = <name>thunk_window_handler</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>h_baton</name> = <name>callback</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SvREFCNT_inc</name><argument_list>(<argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_swig_pl_hold_ref_in_pool</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>svn_delta_make_editor</name><parameter_list>(<param><decl><type><name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
<param><decl><type><name>SV</name> *</type><name>perl_editor</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_delta_editor_t</name> *</type><name>thunk_editor</name> <init>= <expr><call><name>svn_delta_default_editor</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>thunk_editor</name>-&gt;<name>set_target_revision</name></name> = <name>thunk_set_target_revision</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thunk_editor</name>-&gt;<name>open_root</name></name> = <name>thunk_open_root</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thunk_editor</name>-&gt;<name>delete_entry</name></name> = <name>thunk_delete_entry</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thunk_editor</name>-&gt;<name>add_directory</name></name> = <name>thunk_add_directory</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thunk_editor</name>-&gt;<name>open_directory</name></name> = <name>thunk_open_directory</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thunk_editor</name>-&gt;<name>change_dir_prop</name></name> = <name>thunk_change_dir_prop</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thunk_editor</name>-&gt;<name>close_directory</name></name> = <name>thunk_close_directory</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thunk_editor</name>-&gt;<name>absent_directory</name></name> = <name>thunk_absent_directory</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thunk_editor</name>-&gt;<name>add_file</name></name> = <name>thunk_add_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thunk_editor</name>-&gt;<name>open_file</name></name> = <name>thunk_open_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thunk_editor</name>-&gt;<name>apply_textdelta</name></name> = <name>thunk_apply_textdelta</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thunk_editor</name>-&gt;<name>change_file_prop</name></name> = <name>thunk_change_file_prop</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thunk_editor</name>-&gt;<name>close_file</name></name> = <name>thunk_close_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thunk_editor</name>-&gt;<name>absent_file</name></name> = <name>thunk_absent_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thunk_editor</name>-&gt;<name>close_edit</name></name> = <name>thunk_close_edit</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thunk_editor</name>-&gt;<name>abort_edit</name></name> = <name>thunk_abort_edit</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>editor</name> = <name>thunk_editor</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>edit_baton</name> = <call><name>make_baton</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>perl_editor</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_swig_pl_hold_ref_in_pool</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>perl_editor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>svn_error_t</name> *</type><name>svn_swig_pl_thunk_log_receiver</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>changed_paths</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>author</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>date</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SV</name> *</type><name>receiver</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>swig_type_info</name> *</type><name>tinfo</name> <init>= <expr><call><name>_SWIG_TYPE</name><argument_list>(<argument><expr>"svn_log_changed_path_t *"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>SvOK</name><argument_list>(<argument><expr><name>receiver</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>svn_swig_pl_callback_thunk</name><argument_list>(<argument><expr><name>CALL_SV</name></expr></argument>,
<argument><expr><name>receiver</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"OrsssS"</expr></argument>, <argument><expr>(<name>changed_paths</name>) ?
<call><name>svn_swig_pl_convert_hash</name><argument_list>(<argument><expr><name>changed_paths</name></expr></argument>, <argument><expr><name>tinfo</name></expr></argument>)</argument_list></call>
: &amp;<name>PL_sv_undef</name></expr></argument>,
<argument><expr><name>rev</name></expr></argument>, <argument><expr><name>author</name></expr></argument>, <argument><expr><name>date</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>POOLINFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type><name>svn_swig_pl_thunk_history_func</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SV</name> *</type><name>func</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>SvOK</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>svn_swig_pl_callback_thunk</name><argument_list>(<argument><expr><name>CALL_SV</name></expr></argument>,
<argument><expr><name>func</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"srS"</expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>POOLINFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type><name>svn_swig_pl_thunk_authz_func</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>allowed</name></decl></param>,
<param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SV</name> *</type><name>func</name> <init>= <expr><name>baton</name></expr></init>, *<name>result</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>SvOK</name><argument_list>(<argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>svn_swig_pl_callback_thunk</name><argument_list>(<argument><expr><name>CALL_SV</name></expr></argument>,
<argument><expr><name>func</name></expr></argument>, <argument><expr>&amp;<name>result</name></expr></argument>,
<argument><expr>"SsS"</expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><call><name>_SWIG_TYPE</name><argument_list>(<argument><expr>"svn_fs_root_t *"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>POOLINFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>allowed</name> = <call><name>SvIV</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SvREFCNT_dec</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type><name>svn_swig_pl_thunk_commit_callback</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name></type> <name>new_revision</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>date</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>author</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>SvOK</name><argument_list>(<argument><expr>(<name>SV</name> *)<name>baton</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>svn_swig_pl_callback_thunk</name><argument_list>(<argument><expr><name>CALL_SV</name></expr></argument>, <argument><expr><name>baton</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"rss"</expr></argument>, <argument><expr><name>new_revision</name></expr></argument>, <argument><expr><name>date</name></expr></argument>, <argument><expr><name>author</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type> <name>thunk_open_tmp_file</name><parameter_list>(<param><decl><type><name>apr_file_t</name> **</type><name>fp</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>callback_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SV</name> *</type><name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>swig_type_info</name> *</type><name>tinfo</name> <init>= <expr><call><name>_SWIG_TYPE</name><argument_list>(<argument><expr>"apr_file_t *"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_pl_callback_thunk</name><argument_list>(<argument><expr><name>CALL_METHOD</name></expr></argument>, <argument><expr>(<name>void</name> *)"open_tmp_file"</expr></argument>,
<argument><expr>&amp;<name>result</name></expr></argument>, <argument><expr>"OS"</expr></argument>, <argument><expr><name>callback_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>POOLINFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>SWIG_ConvertPtr</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>(<name>void</name> *)<name>fp</name></expr></argument>, <argument><expr><name>tinfo</name></expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>croak</name><argument_list>(<argument><expr>"Unable to convert from SWIG Type"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SvREFCNT_dec</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type><name>thunk_get_wc_prop</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>relpath</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> **</type><name>value</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SV</name> *</type><name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>STRLEN</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_pl_callback_thunk</name><argument_list>(<argument><expr><name>CALL_METHOD</name></expr></argument>, <argument><expr>(<name>void</name> *)"get_wc_prop"</expr></argument>,
<argument><expr>&amp;<name>result</name></expr></argument>, <argument><expr>"OssS"</expr></argument>, <argument><expr><name>baton</name></expr></argument>, <argument><expr><name>relpath</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>POOLINFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>SvOK</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> || <name>result</name> == &amp;<name>PL_sv_undef</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>value</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>SvPOK</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>data</name> = <call><name>SvPV</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>value</name> = <call><name>svn_string_ncreate</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>SvREFCNT_dec</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>croak</name><argument_list>(<argument><expr>"not a string"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
<expr_stmt><expr><call><name>SvREFCNT_dec</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type><name>svn_ra_make_callbacks</name><parameter_list>(<param><decl><type><name>svn_ra_callbacks_t</name> **</type><name>cb</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>c_baton</name></decl></param>,
<param><decl><type><name>SV</name> *</type><name>perl_callbacks</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SV</name> *</type><name>auth_baton</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>cb</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>**<name>cb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>cb</name>)-&gt;<name>open_tmp_file</name></name> = <name>thunk_open_tmp_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>cb</name>)-&gt;<name>get_wc_prop</name></name> = <name>thunk_get_wc_prop</name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>cb</name>)-&gt;<name>set_wc_prop</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>cb</name>)-&gt;<name>push_wc_prop</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>cb</name>)-&gt;<name>invalidate_wc_props</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>auth_baton</name> = *<call><name>hv_fetch</name><argument_list>(<argument><expr>(<name>HV</name> *)<call><name>SvRV</name><argument_list>(<argument><expr><name>perl_callbacks</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"auth"</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>SWIG_ConvertPtr</name><argument_list>(<argument><expr><name>auth_baton</name></expr></argument>,
<argument><expr>(<name>void</name> **)&amp;<name>(*<name>cb</name>)-&gt;<name>auth_baton</name></name></expr></argument>, <argument><expr><call><name>_SWIG_TYPE</name><argument_list>(<argument><expr>"svn_auth_baton_t *"</expr></argument>)</argument_list></call></expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>croak</name><argument_list>(<argument><expr>"Unable to convert from SWIG Type"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>*<name>c_baton</name> = <name>perl_callbacks</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_swig_pl_hold_ref_in_pool</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>perl_callbacks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type><name>svn_swig_pl_thunk_simple_prompt</name><parameter_list>(<param><decl><type><name>svn_auth_cred_simple_t</name> **</type><name>cred</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>username</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>may_save</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>*<name>cred</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>**<name>cred</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!*<name>cred</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>croak</name><argument_list>(<argument><expr>"Could not allocate memory for cred structure"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>svn_swig_pl_callback_thunk</name><argument_list>(<argument><expr><name>CALL_SV</name></expr></argument>,
<argument><expr><name>baton</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"SssbS"</expr></argument>, <argument><expr>*<name>cred</name></expr></argument>, <argument><expr><call><name>_SWIG_TYPE</name><argument_list>(<argument><expr>"svn_auth_cred_simple_t *"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>realm</name></expr></argument>, <argument><expr><name>username</name></expr></argument>, <argument><expr><name>may_save</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>POOLINFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type><name>svn_swig_pl_thunk_username_prompt</name><parameter_list>(<param><decl><type><name>svn_auth_cred_username_t</name> **</type><name>cred</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>may_save</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>*<name>cred</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>**<name>cred</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!*<name>cred</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>croak</name><argument_list>(<argument><expr>"Could not allocate memory for cred structure"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>svn_swig_pl_callback_thunk</name><argument_list>(<argument><expr><name>CALL_SV</name></expr></argument>,
<argument><expr><name>baton</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"SsbS"</expr></argument>, <argument><expr>*<name>cred</name></expr></argument>, <argument><expr><call><name>_SWIG_TYPE</name><argument_list>(<argument><expr>"svn_auth_cred_username_t *"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>realm</name></expr></argument>, <argument><expr><name>may_save</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>POOLINFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type><name>svn_swig_pl_thunk_ssl_server_trust_prompt</name><parameter_list>(
<param><decl><type><name>svn_auth_cred_ssl_server_trust_t</name> **</type><name>cred</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name></decl></param>,
<param><decl><type><name>apr_uint32_t</name></type> <name>failures</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_auth_ssl_server_cert_info_t</name> *</type><name>cert_info</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>may_save</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>*<name>cred</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>**<name>cred</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!*<name>cred</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>croak</name><argument_list>(<argument><expr>"Could not allocate memory for cred structure"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>svn_swig_pl_callback_thunk</name><argument_list>(<argument><expr><name>CALL_SV</name></expr></argument>,
<argument><expr><name>baton</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"SsiSbS"</expr></argument>, <argument><expr>*<name>cred</name></expr></argument>, <argument><expr><call><name>_SWIG_TYPE</name><argument_list>(<argument><expr>"svn_auth_cred_ssl_server_trust_t *"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>realm</name></expr></argument>, <argument><expr><name>failures</name></expr></argument>,
<argument><expr><name>cert_info</name></expr></argument>, <argument><expr><call><name>_SWIG_TYPE</name><argument_list>(<argument><expr>"svn_auth_ssl_server_cert_info_t *"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>may_save</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>POOLINFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>cred</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>(*<name>cred</name>)-&gt;<name>may_save</name></name> == 0 &amp;&amp; <name>(*<name>cred</name>)-&gt;<name>accepted_failures</name></name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>cred</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type><name>svn_swig_pl_thunk_ssl_client_cert_prompt</name><parameter_list>(
<param><decl><type><name>svn_auth_cred_ssl_client_cert_t</name> **</type><name>cred</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type> <name>realm</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>may_save</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>*<name>cred</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>**<name>cred</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!*<name>cred</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>croak</name><argument_list>(<argument><expr>"Could not allocate memory for cred structure"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>svn_swig_pl_callback_thunk</name><argument_list>(<argument><expr><name>CALL_SV</name></expr></argument>,
<argument><expr><name>baton</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"SsbS"</expr></argument>, <argument><expr>*<name>cred</name></expr></argument>, <argument><expr><call><name>_SWIG_TYPE</name><argument_list>(<argument><expr>"svn_auth_cred_ssl_client_cert_t *"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>realm</name></expr></argument>, <argument><expr><name>may_save</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>POOLINFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type><name>svn_swig_pl_thunk_ssl_client_cert_pw_prompt</name><parameter_list>(
<param><decl><type><name>svn_auth_cred_ssl_client_cert_pw_t</name> **</type><name>cred</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>may_save</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>*<name>cred</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>**<name>cred</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!*<name>cred</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>croak</name><argument_list>(<argument><expr>"Could not allocate memory for cred structure"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>svn_swig_pl_callback_thunk</name><argument_list>(<argument><expr><name>CALL_SV</name></expr></argument>,
<argument><expr><name>baton</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"SsbS"</expr></argument>, <argument><expr>*<name>cred</name></expr></argument>, <argument><expr><call><name>_SWIG_TYPE</name><argument_list>(<argument><expr>"svn_auth_cred_ssl_client_cert_pw_t *"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>realm</name></expr></argument>, <argument><expr><name>may_save</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>POOLINFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>svn_swig_pl_notify_func</name><parameter_list>(<param><decl><type><name>void</name> *</type> <name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_wc_notify_action_t</name></type> <name>action</name></decl></param>,
<param><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mime_type</name></decl></param>,
<param><decl><type><name>svn_wc_notify_state_t</name></type> <name>content_state</name></decl></param>,
<param><decl><type><name>svn_wc_notify_state_t</name></type> <name>prop_state</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>SvOK</name><argument_list>(<argument><expr>(<name>SV</name> *)<name>baton</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><call><name>svn_swig_pl_callback_thunk</name><argument_list>(<argument><expr><name>CALL_SV</name></expr></argument>,
<argument><expr><name>baton</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"siisiir"</expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><name>kind</name></expr></argument>, <argument><expr><name>mime_type</name></expr></argument>,
<argument><expr><name>content_state</name></expr></argument>, <argument><expr><name>prop_state</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>svn_error_t</name> *</type><name>svn_swig_pl_get_commit_log_func</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>log_msg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>tmp_file</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type>
<name>commit_items</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SV</name> *</type><name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>ret_val</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SV</name> *</type><name>log_msg_sv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SV</name> *</type><name>tmp_file_sv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SV</name> *</type><name>commit_items_sv</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>SvOK</name><argument_list>(<argument><expr>(<name>SV</name> *)<name>baton</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>log_msg</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>tmp_file</name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>log_msg_sv</name> = <call><name>newRV_noinc</name><argument_list>(<argument><expr><call><name>sv_newmortal</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_file_sv</name> = <call><name>newRV_noinc</name><argument_list>(<argument><expr><call><name>sv_newmortal</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>commit_items_sv</name> = <call><name>svn_swig_pl_convert_array</name>
<argument_list>(<argument><expr><name>commit_items</name></expr></argument>, <argument><expr><call><name>_SWIG_TYPE</name><argument_list>(<argument><expr>"svn_client_commit_item3_t *"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_swig_pl_callback_thunk</name><argument_list>(<argument><expr><name>CALL_SV</name></expr></argument>,
<argument><expr><name>baton</name></expr></argument>, <argument><expr>&amp;<name>result</name></expr></argument>,
<argument><expr>"OOOS"</expr></argument>, <argument><expr><name>log_msg_sv</name></expr></argument>, <argument><expr><name>tmp_file_sv</name></expr></argument>,
<argument><expr><name>commit_items_sv</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>POOLINFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>SvOK</name><argument_list>(<argument><expr><call><name>SvRV</name><argument_list>(<argument><expr><name>log_msg_sv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>log_msg</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>SvPOK</name><argument_list>(<argument><expr><call><name>SvRV</name><argument_list>(<argument><expr><name>log_msg_sv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>log_msg</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>SvPV_nolen</name><argument_list>(<argument><expr><call><name>SvRV</name><argument_list>(<argument><expr><name>log_msg_sv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>croak</name><argument_list>(<argument><expr>"Invalid value in log_msg reference, must be undef or a string"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
<if>if <condition>(<expr>!<call><name>SvOK</name><argument_list>(<argument><expr><call><name>SvRV</name><argument_list>(<argument><expr><name>tmp_file_sv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>tmp_file</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>SvPOK</name><argument_list>(<argument><expr><call><name>SvRV</name><argument_list>(<argument><expr><name>tmp_file_sv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>tmp_file</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>SvPV_nolen</name><argument_list>(<argument><expr><call><name>SvRV</name><argument_list>(<argument><expr><name>tmp_file_sv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>croak</name><argument_list>(<argument><expr>"Invalid value in tmp_file reference, "
"must be undef or a string"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
<if>if <condition>(<expr><call><name>sv_derived_from</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"_p_svn_error_t"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>swig_type_info</name> *</type><name>errorinfo</name> <init>= <expr><call><name>_SWIG_TYPE</name><argument_list>(<argument><expr>"svn_error_t *"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>SWIG_ConvertPtr</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>(<name>void</name> *)&amp;<name>ret_val</name></expr></argument>, <argument><expr><name>errorinfo</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SvREFCNT_dec</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>croak</name><argument_list>(<argument><expr>"Unable to convert from SWIG Type"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>SvREFCNT_dec</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret_val</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type><name>svn_swig_pl_info_receiver</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_info_t</name> *</type><name>info</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SV</name> *</type><name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>ret_val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>swig_type_info</name> *</type><name>infoinfo</name> <init>= <expr><call><name>_SWIG_TYPE</name><argument_list>(<argument><expr>"svn_info_t *"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>SvOK</name><argument_list>(<argument><expr>(<name>SV</name> *)<name>baton</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>svn_swig_pl_callback_thunk</name><argument_list>(<argument><expr><name>CALL_SV</name></expr></argument>, <argument><expr><name>baton</name></expr></argument>, <argument><expr>&amp;<name>result</name></expr></argument>, <argument><expr>"sSS"</expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>info</name></expr></argument>,
<argument><expr><name>infoinfo</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>POOLINFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>sv_derived_from</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"_p_svn_error_t"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>swig_type_info</name> *</type><name>errorinfo</name> <init>= <expr><call><name>_SWIG_TYPE</name><argument_list>(<argument><expr>"svn_error_t *"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>SWIG_ConvertPtr</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>(<name>void</name> *)&amp;<name>ret_val</name></expr></argument>, <argument><expr><name>errorinfo</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SvREFCNT_dec</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>croak</name><argument_list>(<argument><expr>"Unable to convert from SWIG Type"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else
<expr_stmt><expr><name>ret_val</name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>SvREFCNT_dec</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret_val</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type><name>svn_swig_pl_cancel_func</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SV</name> *</type><name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>ret_val</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>SvOK</name><argument_list>(<argument><expr>(<name>SV</name> *)<name>cancel_baton</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>svn_swig_pl_callback_thunk</name><argument_list>(<argument><expr><name>CALL_SV</name></expr></argument>, <argument><expr><name>cancel_baton</name></expr></argument>, <argument><expr>&amp;<name>result</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>sv_derived_from</name><argument_list>(<argument><expr><name>result</name></expr></argument>,<argument><expr>"_p_svn_error_t"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>swig_type_info</name> *</type><name>errorinfo</name> <init>= <expr><call><name>_SWIG_TYPE</name><argument_list>(<argument><expr>"svn_error_t *"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>SWIG_ConvertPtr</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>(<name>void</name> *)&amp;<name>ret_val</name></expr></argument>, <argument><expr><name>errorinfo</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SvREFCNT_dec</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>croak</name><argument_list>(<argument><expr>"Unable to convert from SWIG Type"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr><call><name>SvIOK</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>SvIV</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ret_val</name> = <call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CANCELLED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"By cancel callback"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>SvTRUE</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>SvPOK</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ret_val</name> = <call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_CANCELLED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>SvPV_nolen</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>ret_val</name> = <name>SVN_NO_ERROR</name></expr>;</expr_stmt>
}</block></else></if></else></if></else></if>
<expr_stmt><expr><call><name>SvREFCNT_dec</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret_val</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>svn_swig_pl_status_func</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_wc_status_t</name> *</type><name>status</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>swig_type_info</name> *</type><name>statusinfo</name> <init>= <expr><call><name>_SWIG_TYPE</name><argument_list>(<argument><expr>"svn_wc_status_t *"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>SvOK</name><argument_list>(<argument><expr>(<name>SV</name> *)<name>baton</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><call><name>svn_swig_pl_callback_thunk</name><argument_list>(<argument><expr><name>CALL_SV</name></expr></argument>, <argument><expr><name>baton</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"sS"</expr></argument>,
<argument><expr><name>path</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>statusinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>svn_error_t</name> *</type><name>svn_swig_pl_blame_func</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_int64_t</name></type> <name>line_no</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>author</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>date</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>line</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SV</name> *</type><name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>ret_val</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_pl_callback_thunk</name><argument_list>(<argument><expr><name>CALL_SV</name></expr></argument>, <argument><expr><name>baton</name></expr></argument>, <argument><expr>&amp;<name>result</name></expr></argument>, <argument><expr>"LrsssS"</expr></argument>,
<argument><expr><name>line_no</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>author</name></expr></argument>, <argument><expr><name>date</name></expr></argument>, <argument><expr><name>line</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>POOLINFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>sv_derived_from</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"_p_svn_error_t"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>swig_type_info</name> *</type><name>errorinfo</name> <init>= <expr><call><name>_SWIG_TYPE</name><argument_list>(<argument><expr>"svn_error_t *"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>SWIG_ConvertPtr</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>(<name>void</name> *)&amp;<name>ret_val</name></expr></argument>, <argument><expr><name>errorinfo</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SvREFCNT_dec</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>croak</name><argument_list>(<argument><expr>"Unable to convert from SWIG Type"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>SvREFCNT_dec</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret_val</name></expr>;</return>
}</block></function>
<function><type><name>svn_boolean_t</name></type> <name>svn_swig_pl_thunk_config_enumerator</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SV</name> *</type><name>result</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>SvOK</name><argument_list>(<argument><expr>(<name>SV</name> *)<name>baton</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><call><name>svn_swig_pl_callback_thunk</name><argument_list>(<argument><expr><name>CALL_SV</name></expr></argument>, <argument><expr><name>baton</name></expr></argument>, <argument><expr>&amp;<name>result</name></expr></argument>,
<argument><expr>"ss"</expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>SvOK</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SVN_AVOID_CIRCULAR_LINKAGE_AT_ALL_COSTS_HACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_swig_pl_get_current_pool_t</name></type> <name>svn_swig_pl_get_current_pool</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_swig_pl_set_current_pool_t</name></type> <name>svn_swig_pl_set_current_pool</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>svn_swig_pl_bind_current_pool_fns</name><parameter_list>(<param><decl><type><name>svn_swig_pl_get_current_pool_t</name></type> <name>get</name></decl></param>,
<param><decl><type><name>svn_swig_pl_set_current_pool_t</name></type> <name>set</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name>svn_swig_pl_get_current_pool</name> = <name>get</name></expr>;</expr_stmt>
<expr_stmt><expr><name>svn_swig_pl_set_current_pool</name> = <name>set</name></expr>;</expr_stmt>
}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function_decl><type><name>apr_pool_t</name> *</type><name>svn_swig_pl_get_current_pool</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>svn_swig_pl_set_current_pool</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>apr_pool_t</name> *</type><name>svn_swig_pl_make_pool</name><parameter_list>(<param><decl><type><name>SV</name> *</type><name>obj</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>obj</name> &amp;&amp; <call><name>sv_isobject</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>sv_derived_from</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"SVN::Pool"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>obj</name> = <call><name>SvRV</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>sv_derived_from</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"_p_apr_pool_t"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SWIG_ConvertPtr</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>void</name> **)&amp;<name>pool</name></expr></argument>, <argument><expr><name>POOLINFO</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>pool</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>svn_swig_pl_get_current_pool</name><argument_list>()</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_swig_pl_callback_thunk</name><argument_list>(<argument><expr><name>CALL_METHOD</name></expr></argument>, <argument><expr>(<name>void</name> *)"new_default"</expr></argument>,
<argument><expr>&amp;<name>obj</name></expr></argument>, <argument><expr>"s"</expr></argument>, <argument><expr>"SVN::Pool"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><call><name>svn_swig_pl_get_current_pool</name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>SV</name> *</type><name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IO</name> *</type><name>io</name></decl>;</decl_stmt>
}</block></struct></type> <name>io_baton_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>io_handle_read</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>buffer</name></decl></param>,
<param><decl><type><name>apr_size_t</name> *</type><name>len</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>io_baton_t</name> *</type><name>io</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MAGIC</name> *</type><name>mg</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>mg</name> = <call><name>SvTIED_mg</name><argument_list>(<argument><expr>(<name>SV</name>*)<name><name>io</name>-&gt;<name>io</name></name></expr></argument>, <argument><expr><name>PERL_MAGIC_tiedscalar</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>SV</name> *</type><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SV</name> *</type><name>buf</name> <init>= <expr><call><name>sv_newmortal</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_pl_callback_thunk</name><argument_list>(<argument><expr><name>CALL_METHOD</name></expr></argument>, <argument><expr>(<name>void</name> *)"READ"</expr></argument>, <argument><expr>&amp;<name>ret</name></expr></argument>, <argument><expr>"OOz"</expr></argument>,
<argument><expr><call><name>SvTIED_obj</name><argument_list>(<argument><expr>(<name>SV</name>*)<name><name>io</name>-&gt;<name>io</name></name></expr></argument>, <argument><expr><name>mg</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>buf</name></expr></argument>, <argument><expr>*<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>len</name> = <call><name>SvIV</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SvREFCNT_dec</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>SvPV_nolen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>*<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr>*<name>len</name> = <call><name>PerlIO_read</name><argument_list>(<argument><expr><call><name>IoIFP</name><argument_list>(<argument><expr><name><name>io</name>-&gt;<name>io</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr>*<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>io_handle_write</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>,
<param><decl><type><name>apr_size_t</name> *</type><name>len</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>io_baton_t</name> *</type><name>io</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MAGIC</name> *</type><name>mg</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>mg</name> = <call><name>SvTIED_mg</name><argument_list>(<argument><expr>(<name>SV</name>*)<name><name>io</name>-&gt;<name>io</name></name></expr></argument>, <argument><expr><name>PERL_MAGIC_tiedscalar</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>SV</name> *</type><name>ret</name></decl>, *<decl><type ref="prev"/><name>pv</name></decl>;</decl_stmt>
<expr_stmt><expr><name>pv</name> = <call><name>sv_2mortal</name><argument_list>(<argument><expr><call><name>newSVpvn</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr>*<name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_swig_pl_callback_thunk</name><argument_list>(<argument><expr><name>CALL_METHOD</name></expr></argument>, <argument><expr>(<name>void</name> *)"WRITE"</expr></argument>, <argument><expr>&amp;<name>ret</name></expr></argument>, <argument><expr>"OOz"</expr></argument>,
<argument><expr><call><name>SvTIED_obj</name><argument_list>(<argument><expr>(<name>SV</name>*)<name><name>io</name>-&gt;<name>io</name></name></expr></argument>, <argument><expr><name>mg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pv</name></expr></argument>, <argument><expr>*<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>len</name> = <call><name>SvIV</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SvREFCNT_dec</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr>*<name>len</name> = <call><name>PerlIO_write</name><argument_list>(<argument><expr><call><name>IoIFP</name><argument_list>(<argument><expr><name><name>io</name>-&gt;<name>io</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr>*<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type><name>io_handle_close</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>io_baton_t</name> *</type><name>io</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MAGIC</name> *</type><name>mg</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>mg</name> = <call><name>SvTIED_mg</name><argument_list>(<argument><expr>(<name>SV</name>*)<name><name>io</name>-&gt;<name>io</name></name></expr></argument>, <argument><expr><name>PERL_MAGIC_tiedscalar</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_swig_pl_callback_thunk</name><argument_list>(<argument><expr><name>CALL_METHOD</name></expr></argument>, <argument><expr>(<name>void</name> *)"CLOSE"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"O"</expr></argument>,
<argument><expr><call><name>SvTIED_obj</name><argument_list>(<argument><expr>(<name>SV</name>*)<name><name>io</name>-&gt;<name>io</name></name></expr></argument>, <argument><expr><name>mg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>PerlIO_close</name><argument_list>(<argument><expr><call><name>IoIFP</name><argument_list>(<argument><expr><name><name>io</name>-&gt;<name>io</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>io_handle_cleanup</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>io_baton_t</name> *</type><name>io</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SvREFCNT_dec</name><argument_list>(<argument><expr><name><name>io</name>-&gt;<name>obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type><name>svn_swig_pl_make_stream</name><parameter_list>(<param><decl><type><name>svn_stream_t</name> **</type><name>stream</name></decl></param>, <param><decl><type><name>SV</name> *</type><name>obj</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>IO</name> *</type><name>io</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>simple_type</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>SvOK</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>stream</name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>obj</name> &amp;&amp; <call><name>sv_isobject</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>sv_derived_from</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"SVN::Stream"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_swig_pl_callback_thunk</name><argument_list>(<argument><expr><name>CALL_METHOD</name></expr></argument>, <argument><expr>(<name>void</name> *)"svn_stream"</expr></argument>,
<argument><expr>&amp;<name>obj</name></expr></argument>, <argument><expr>"O"</expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>!<call><name>sv_derived_from</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>"_p_svn_stream_t"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>simple_type</name> = 0</expr>;</expr_stmt></then></if></else></if>
<if>if <condition>(<expr><name>simple_type</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SWIG_ConvertPtr</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>(<name>void</name> **)<name>stream</name></expr></argument>, <argument><expr><call><name>_SWIG_TYPE</name><argument_list>(<argument><expr>"svn_stream_t *"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>obj</name> &amp;&amp; <call><name>SvROK</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>SvTYPE</name><argument_list>(<argument><expr><call><name>SvRV</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> == <name>SVt_PVGV</name> &amp;&amp;
(<name>io</name> = <call><name>GvIO</name><argument_list>(<argument><expr><call><name>SvRV</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name> <init>= <expr><call><name>svn_swig_pl_get_current_pool</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>io_baton_t</name> *</type><name>iob</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>io_baton_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SvREFCNT_inc</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iob</name>-&gt;<name>obj</name></name> = <name>obj</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iob</name>-&gt;<name>io</name></name> = <name>io</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>stream</name> = <call><name>svn_stream_create</name><argument_list>(<argument><expr><name>iob</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stream_set_read</name><argument_list>(<argument><expr>*<name>stream</name></expr></argument>, <argument><expr><name>io_handle_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stream_set_write</name><argument_list>(<argument><expr>*<name>stream</name></expr></argument>, <argument><expr><name>io_handle_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stream_set_close</name><argument_list>(<argument><expr>*<name>stream</name></expr></argument>, <argument><expr><name>io_handle_close</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>iob</name></expr></argument>, <argument><expr><name>io_handle_cleanup</name></expr></argument>,
<argument><expr><name>io_handle_cleanup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><call><name>croak</name><argument_list>(<argument><expr>"unknown type for svn_stream_t"</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>SV</name> *</type><name>svn_swig_pl_from_stream</name><parameter_list>(<param><decl><type><name>svn_stream_t</name> *</type><name>stream</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SV</name> *</type><name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_pl_callback_thunk</name><argument_list>(<argument><expr><name>CALL_METHOD</name></expr></argument>, <argument><expr>(<name>void</name> *)"new"</expr></argument>, <argument><expr>&amp;<name>ret</name></expr></argument>, <argument><expr>"sS"</expr></argument>,
<argument><expr>"SVN::Stream"</expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><call><name>_SWIG_TYPE</name><argument_list>(<argument><expr>"svn_stream_t *"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>sv_2mortal</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>apr_file_t</name> *</type><name>svn_swig_pl_make_file</name><parameter_list>(<param><decl><type><name>SV</name> *</type><name>file</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>apr_file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>SvOK</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call> || <name>file</name> == &amp;<name>PL_sv_undef</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>SvPOKp</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name>apr_file</name></expr></argument>, <argument><expr><call><name>SvPV_nolen</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>APR_CREATE</name> | <name>APR_READ</name> | <name>APR_WRITE</name></expr></argument>,
<argument><expr><name>APR_OS_DEFAULT</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>SvROK</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>SvTYPE</name><argument_list>(<argument><expr><call><name>SvRV</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> == <name>SVt_PVGV</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>apr_os_file_t</name></type> <name>osfile</name> <init>= <expr>(<name>apr_os_file_t</name>)
<call><name>_get_osfhandle</name><argument_list>(<argument><expr><call><name>PerlIO_fileno</name><argument_list>(<argument><expr><call><name>IoIFP</name><argument_list>(<argument><expr><call><name>sv_2io</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>apr_os_file_t</name></type> <name>osfile</name> <init>= <expr><call><name>PerlIO_fileno</name><argument_list>(<argument><expr><call><name>IoIFP</name><argument_list>(<argument><expr><call><name>sv_2io</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>status</name> = <call><name>apr_os_file_put</name><argument_list>(<argument><expr>&amp;<name>apr_file</name></expr></argument>, <argument><expr>&amp;<name>osfile</name></expr></argument>,
<argument><expr><name>O_CREAT</name> | <name>O_WRONLY</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
}</block></then></if></else></if>
<return>return <expr><name>apr_file</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>cleanup_refcnt</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SV</name> *</type><name>sv</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SvREFCNT_dec</name><argument_list>(<argument><expr><name>sv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>svn_swig_pl_hold_ref_in_pool</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>SV</name> *</type><name>sv</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>SvREFCNT_inc</name><argument_list>(<argument><expr><name>sv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>sv</name></expr></argument>, <argument><expr><name>cleanup_refcnt</name></expr></argument>, <argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>SV</name> *</type><name>svn_swig_pl_from_md5</name><parameter_list>(<param><decl><type><name>unsigned</name> <name>char</name> *</type><name>digest</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SV</name> *</type><name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_pl_callback_thunk</name><argument_list>(<argument><expr><name>CALL_METHOD</name></expr></argument>, <argument><expr>(<name>void</name> *)"new"</expr></argument>, <argument><expr>&amp;<name>ret</name></expr></argument>, <argument><expr>"sS"</expr></argument>,
<argument><expr>"SVN::MD5"</expr></argument>, <argument><expr><name>digest</name></expr></argument>,
<argument><expr><call><name>_SWIG_TYPE</name><argument_list>(<argument><expr>"unsigned char *"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>sv_2mortal</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
</unit>
