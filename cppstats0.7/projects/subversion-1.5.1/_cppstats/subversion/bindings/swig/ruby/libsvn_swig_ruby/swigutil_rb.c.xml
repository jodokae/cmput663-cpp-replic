<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/bindings/swig/ruby/libsvn_swig_ruby/swigutil_rb.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_SWIG_SWIGUTIL_RB_C</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"swig_ruby_external_runtime.swg"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"swigutil_rb.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;st.h&gt;</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PACKAGE_BUGREPORT</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PACKAGE_NAME</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PACKAGE_STRING</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PACKAGE_TARNAME</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PACKAGE_VERSION</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_</name></cpp:undef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>RE_OPTION_IGNORECASE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ONIG_OPTION_IGNORECASE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RE_OPTION_IGNORECASE</name></cpp:macro> <cpp:value>ONIG_OPTION_IGNORECASE</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>RSTRING_LEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RSTRING_LEN</name><parameter_list>(<param><type><name>str</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(RSTRING(str)-&gt;len)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>RSTRING_PTR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RSTRING_PTR</name><parameter_list>(<param><type><name>str</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(RSTRING(str)-&gt;ptr)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_nls.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_utf.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_LARGE_FILES</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOFF2NUM</name><parameter_list>(<param><type><name>num</name></type></param>)</parameter_list></cpp:macro> <cpp:value>LL2NUM(num)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AOFF2NUM</name><parameter_list>(<param><type><name>num</name></type></param>)</parameter_list></cpp:macro> <cpp:value>LONG2NUM(num)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SIZEOF_LONG_LONG</name> == 8</expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AI642NUM</name><parameter_list>(<param><type><name>num</name></type></param>)</parameter_list></cpp:macro> <cpp:value>LL2NUM(num)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AI642NUM</name><parameter_list>(<param><type><name>num</name></type></param>)</parameter_list></cpp:macro> <cpp:value>LONG2NUM(num)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMPTY_CPP_ARGUMENT</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POOL_P</name><parameter_list>(<param><type><name>obj</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(RTEST(rb_obj_is_kind_of(obj, rb_svn_core_pool())))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONTEXT_P</name><parameter_list>(<param><type><name>obj</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(RTEST(rb_obj_is_kind_of(obj, rb_svn_client_context())))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_ERR_P</name><parameter_list>(<param><type><name>obj</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(RTEST(rb_obj_is_kind_of(obj, rb_svn_error())))</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>mSvn</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>mSvnClient</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>mSvnUtil</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>cSvnClientContext</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>mSvnCore</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>cSvnCorePool</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>cSvnCoreStream</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>cSvnDelta</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>cSvnDeltaEditor</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>cSvnDeltaTextDeltaWindowHandler</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>cSvnError</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>cSvnErrorSvnError</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>cSvnFs</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>cSvnFsFileSystem</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>cSvnRa</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>cSvnRaReporter3</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_ID</name><parameter_list>(<param><type><name>key</name></type></param>)</parameter_list></cpp:macro> <cpp:value>static ID id_ ##key</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_ID</name><parameter_list>(<param><type><name>key</name></type></param>)</parameter_list></cpp:macro> <cpp:value>DEFINE_ID_WITH_NAME(key, #key)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_ID_WITH_NAME</name><parameter_list>(<param><type><name>key</name></type></param>, <param><type><name>name</name></type></param>)</parameter_list></cpp:macro> <cpp:value>id_ ##key = rb_intern(name)</cpp:value></cpp:define>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>call</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>eqq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>baton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>new_corresponding_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>set_target_revision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>open_root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>delete_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>add_directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>open_directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>change_dir_prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>close_directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>absent_directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>add_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>open_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>apply_textdelta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>change_file_prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>absent_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>close_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>close_edit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>abort_edit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>__pool__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>__pools__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>swig_type_regex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>open_tmp_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>get_wc_prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>set_wc_prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>push_wc_prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>invalidate_wc_props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>progress_func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>auth_baton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>found_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>file_changed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>file_added</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>file_deleted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>dir_added</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>dir_deleted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>dir_props_changed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>handler_baton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>__batons__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>destroy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>filename_to_temp_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>inspect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>handle_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>set_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>delete_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>link_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>finish_report</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>abort_report</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>to_s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DECLARE_ID</name><argument_list>(<argument><expr><name>upcase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<typedef>typedef <function_decl><type><name>void</name> *</type>(*<name>r2c_func</name>)<parameter_list>(<param><decl><type><name>VALUE</name></type> <name>value</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>VALUE</name></type> (*<name>c2r_func</name>)<parameter_list>(<param><decl><type><name>void</name> *</type><name>value</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <type><struct>struct <name>hash_to_apr_hash_data_t</name> <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>apr_hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>r2c_func</name></type> <name>func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
}</block></struct></type> <name>hash_to_apr_hash_data_t</name>;</typedef>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>r2c_swig_type2</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>value</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>type_name</name></decl></param>, <param><decl><type><name>void</name> **</type><name>result</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>r2c_inspect</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>object</name></decl></param>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_svn</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>mSvn</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>mSvn</name> = <call><name>rb_const_get</name><argument_list>(<argument><expr><name>rb_cObject</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr>"Svn"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>mSvn</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_svn_util</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>mSvnUtil</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>mSvnUtil</name> = <call><name>rb_const_get</name><argument_list>(<argument><expr><call><name>rb_svn</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr>"Util"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>mSvnUtil</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_svn_client</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>mSvnClient</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>mSvnClient</name> = <call><name>rb_const_get</name><argument_list>(<argument><expr><call><name>rb_svn</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr>"Client"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>mSvnClient</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_svn_client_context</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>cSvnClientContext</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>cSvnClientContext</name> = <call><name>rb_const_get</name><argument_list>(<argument><expr><call><name>rb_svn_client</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr>"Context"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>cSvnClientContext</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_svn_core</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>mSvnCore</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>mSvnCore</name> = <call><name>rb_const_get</name><argument_list>(<argument><expr><call><name>rb_svn</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr>"Core"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>mSvnCore</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_svn_core_pool</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>cSvnCorePool</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>cSvnCorePool</name> = <call><name>rb_const_get</name><argument_list>(<argument><expr><call><name>rb_svn_core</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr>"Pool"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>cSvnCorePool</name></expr></argument>, <argument><expr><name>id___pools__</name></expr></argument>, <argument><expr><call><name>rb_hash_new</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>cSvnCorePool</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_svn_core_stream</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>cSvnCoreStream</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>cSvnCoreStream</name> = <call><name>rb_const_get</name><argument_list>(<argument><expr><call><name>rb_svn_core</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr>"Stream"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>cSvnCoreStream</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_svn_delta</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>cSvnDelta</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>cSvnDelta</name> = <call><name>rb_const_get</name><argument_list>(<argument><expr><call><name>rb_svn</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr>"Delta"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>cSvnDelta</name></expr>;</return>
}</block></function>
<function><type><name>VALUE</name></type>
<name>svn_swig_rb_svn_delta_editor</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>cSvnDeltaEditor</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>cSvnDeltaEditor</name> =
<call><name>rb_const_get</name><argument_list>(<argument><expr><call><name>rb_svn_delta</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr>"Editor"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>cSvnDeltaEditor</name></expr>;</return>
}</block></function>
<function><type><name>VALUE</name></type>
<name>svn_swig_rb_svn_delta_text_delta_window_handler</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>cSvnDeltaTextDeltaWindowHandler</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>cSvnDeltaTextDeltaWindowHandler</name> =
<call><name>rb_const_get</name><argument_list>(<argument><expr><call><name>rb_svn_delta</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr>"TextDeltaWindowHandler"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>cSvnDeltaTextDeltaWindowHandler</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_svn_error</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>cSvnError</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>cSvnError</name> = <call><name>rb_const_get</name><argument_list>(<argument><expr><call><name>rb_svn</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr>"Error"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>cSvnError</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_svn_error_svn_error</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>cSvnErrorSvnError</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>cSvnErrorSvnError</name> = <call><name>rb_const_get</name><argument_list>(<argument><expr><call><name>rb_svn_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr>"SvnError"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>cSvnErrorSvnError</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_svn_fs</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>cSvnFs</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>cSvnFs</name> = <call><name>rb_const_get</name><argument_list>(<argument><expr><call><name>rb_svn</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr>"Fs"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>cSvnFs</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_svn_fs_file_system</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>cSvnFsFileSystem</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>cSvnFsFileSystem</name> = <call><name>rb_const_get</name><argument_list>(<argument><expr><call><name>rb_svn_fs</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr>"FileSystem"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>cSvnFsFileSystem</name></expr></argument>, <argument><expr><name>id___batons__</name></expr></argument>, <argument><expr><call><name>rb_hash_new</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>cSvnFsFileSystem</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_svn_ra</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>cSvnRa</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>cSvnRa</name> = <call><name>rb_const_get</name><argument_list>(<argument><expr><call><name>rb_svn</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr>"Ra"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>cSvnRa</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_svn_ra_reporter3</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>cSvnRaReporter3</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>cSvnRaReporter3</name> = <call><name>rb_const_get</name><argument_list>(<argument><expr><call><name>rb_svn_ra</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr>"Reporter3"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>cSvnRaReporter3</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>resolve_constant</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>parent</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prefix</name></decl></param>, <param><decl><type><name>VALUE</name></type> <name>name</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>const_name</name></decl>;</decl_stmt>
<expr_stmt><expr><name>const_name</name> = <call><name>rb_str_new2</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_concat</name><argument_list>(<argument><expr><name>const_name</name></expr></argument>,
<argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>id_to_s</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>id_upcase</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>rb_const_get</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>const_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>svn_swig_rb_converter_to_locale_encoding</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>self</name></decl></param>, <param><decl><type><name>VALUE</name></type> <name>str</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><name>pool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_utf_cstring_from_utf8</name><argument_list>(<argument><expr>&amp;<name>dest</name></expr></argument>, <argument><expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_handle_svn_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>result</name> = <call><name>rb_str_new2</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>svn_swig_rb_locale_set</name><parameter_list>(<param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><name>VALUE</name> *</type><name>argv</name></decl></param>, <param><decl><type><name>VALUE</name></type> <name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>category</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>locale</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>rb_category</name></decl>, <decl><type ref="prev"/><name>rb_locale</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_scan_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr>"02"</expr></argument>, <argument><expr>&amp;<name>rb_category</name></expr></argument>, <argument><expr>&amp;<name>rb_locale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>rb_category</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>category</name> = <name>LC_ALL</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>category</name> = <call><name>NUM2INT</name><argument_list>(<argument><expr><name>rb_category</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>rb_locale</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>locale</name> = ""</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>locale</name> = <call><name>StringValueCStr</name><argument_list>(<argument><expr><name>rb_locale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>result</name> = <call><name>setlocale</name><argument_list>(<argument><expr><name>category</name></expr></argument>, <argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name> ? <call><name>rb_str_new2</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> : <name>Qnil</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>svn_swig_rb_gettext_bindtextdomain</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>self</name></decl></param>, <param><decl><type><name>VALUE</name></type> <name>path</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_NLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>bindtextdomain</name><argument_list>(<argument><expr><name>PACKAGE_NAME</name></expr></argument>, <argument><expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>Qnil</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>svn_swig_rb_gettext__</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>self</name></decl></param>, <param><decl><type><name>VALUE</name></type> <name>message</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_NLS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><name>message</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>svn_swig_rb_initialize_ids</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>call</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID_WITH_NAME</name><argument_list>(<argument><expr><name>eqq</name></expr></argument>, <argument><expr>"==="</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>baton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>new_corresponding_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>set_target_revision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>open_root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>delete_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>add_directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>open_directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>change_dir_prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>close_directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>absent_directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>add_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>open_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>apply_textdelta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>change_file_prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>absent_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>close_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>close_edit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>abort_edit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>__pool__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>__pools__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>swig_type_regex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>open_tmp_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>get_wc_prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>set_wc_prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>push_wc_prop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>invalidate_wc_props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>progress_func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>auth_baton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>found_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>file_changed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>file_added</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>file_deleted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>dir_added</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>dir_deleted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>dir_props_changed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>handler_baton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>__batons__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>destroy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>filename_to_temp_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>inspect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>handle_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>set_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>delete_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>link_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>finish_report</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>abort_report</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>to_s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DEFINE_ID</name><argument_list>(<argument><expr><name>upcase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type>
<name>svn_swig_rb_initialize</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>mSvnConverter</name></decl>, <decl><type ref="prev"/><name>mSvnLocale</name></decl>, <decl><type ref="prev"/><name>mSvnGetText</name></decl>;</decl_stmt>
<expr_stmt><expr><name>status</name> = <call><name>apr_initialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>1024</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_strerror</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eLoadError</name></expr></argument>, <argument><expr>"cannot initialize APR: %s"</expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>atexit</name><argument_list>(<argument><expr><name>apr_terminate</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eLoadError</name></expr></argument>, <argument><expr>"atexit registration failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>pool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_utf_initialize</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_initialize_ids</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mSvnConverter</name> = <call><name>rb_define_module_under</name><argument_list>(<argument><expr><call><name>rb_svn</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"Converter"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_module_function</name><argument_list>(<argument><expr><name>mSvnConverter</name></expr></argument>, <argument><expr>"to_locale_encoding"</expr></argument>,
<argument><expr><name>svn_swig_rb_converter_to_locale_encoding</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mSvnLocale</name> = <call><name>rb_define_module_under</name><argument_list>(<argument><expr><call><name>rb_svn</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"Locale"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mSvnLocale</name></expr></argument>, <argument><expr>"ALL"</expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>LC_ALL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mSvnLocale</name></expr></argument>, <argument><expr>"COLLATE"</expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>LC_COLLATE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mSvnLocale</name></expr></argument>, <argument><expr>"CTYPE"</expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>LC_CTYPE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LC_MESSAGES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mSvnLocale</name></expr></argument>, <argument><expr>"MESSAGES"</expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>LC_MESSAGES</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mSvnLocale</name></expr></argument>, <argument><expr>"MONETARY"</expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>LC_MONETARY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mSvnLocale</name></expr></argument>, <argument><expr>"NUMERIC"</expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>LC_NUMERIC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_const</name><argument_list>(<argument><expr><name>mSvnLocale</name></expr></argument>, <argument><expr>"TIME"</expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>LC_TIME</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_module_function</name><argument_list>(<argument><expr><name>mSvnLocale</name></expr></argument>, <argument><expr>"set"</expr></argument>, <argument><expr><name>svn_swig_rb_locale_set</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mSvnGetText</name> = <call><name>rb_define_module_under</name><argument_list>(<argument><expr><call><name>rb_svn</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>"GetText"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_module_function</name><argument_list>(<argument><expr><name>mSvnGetText</name></expr></argument>, <argument><expr>"bindtextdomain"</expr></argument>,
<argument><expr><name>svn_swig_rb_gettext_bindtextdomain</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_define_module_function</name><argument_list>(<argument><expr><name>mSvnGetText</name></expr></argument>, <argument><expr>"_"</expr></argument>,
<argument><expr><name>svn_swig_rb_gettext__</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_svn_pool_holder</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>rb_ivar_get</name><argument_list>(<argument><expr><call><name>rb_svn_core_pool</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>id___pools__</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_svn_fs_warning_callback_baton_holder</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>rb_ivar_get</name><argument_list>(<argument><expr><call><name>rb_svn_fs_file_system</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>id___batons__</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_holder_push</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>holder</name></decl></param>, <param><decl><type><name>VALUE</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>objs</name></decl>;</decl_stmt>
<expr_stmt><expr><name>key</name> = <call><name>rb_obj_id</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>objs</name> = <call><name>rb_hash_aref</name><argument_list>(<argument><expr><name>holder</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>objs</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>objs</name> = <call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>holder</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>objs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>objs</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_holder_pop</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>holder</name></decl></param>, <param><decl><type><name>VALUE</name></type> <name>obj</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>objs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>key</name> = <call><name>rb_obj_id</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>objs</name> = <call><name>rb_hash_aref</name><argument_list>(<argument><expr><name>holder</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>objs</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>result</name> = <call><name>rb_ary_pop</name><argument_list>(<argument><expr><name>objs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>RARRAY</name><argument_list>(<argument><expr><name>objs</name></expr></argument>)</argument_list></call>-&gt;<name>len</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>rb_hash_delete</name><argument_list>(<argument><expr><name>holder</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_get_pool</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>self</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>rb_ivar_get</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>id___pool__</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_pools</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>self</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>pools</name> <init>= <expr><call><name>rb_ivar_get</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>id___pools__</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>pools</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>pools</name> = <call><name>rb_hash_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>id___pools__</name></expr></argument>, <argument><expr><name>pools</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>pools</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_set_pool</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>self</name></decl></param>, <param><decl><type><name>VALUE</name></type> <name>pool</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>old_pool</name> <init>= <expr><call><name>rb_ivar_get</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>id___pool__</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><call><name>rb_pools</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rb_obj_id</name><argument_list>(<argument><expr><name>old_pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>old_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>id___pool__</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><call><name>rb_ivar_get</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>id___pool__</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>self</name></expr></argument>, <argument><expr><name>id___pool__</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><call><name>rb_pools</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rb_obj_id</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></else></if>
<return>return <expr><name>Qnil</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>rb_pool_new</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>parent</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><call><name>rb_svn_core_pool</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>id_new</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>swig_type_re</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>swig_type_regex</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>swig_type_re</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>reg_str</name><index>[]</index></name> <init>= <expr>"\\A(?:SWIG|Svn::Ext)::"</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>swig_type_re</name> = <call><name>rb_reg_new</name><argument_list>(<argument><expr><name>reg_str</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>reg_str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><call><name>rb_svn</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>id_swig_type_regex</name></expr></argument>, <argument><expr><name>swig_type_re</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>swig_type_re</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>find_swig_type_object</name><parameter_list>(<param><decl><type><name>int</name></type> <name>num</name></decl></param>, <param><decl><type><name>VALUE</name> *</type><name>objects</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>re</name> <init>= <expr><call><name>swig_type_regex</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>num</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_reg_match</name><argument_list>(<argument><expr><name>re</name></expr></argument>,
<argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><call><name>rb_obj_class</name><argument_list>(<argument><expr><name><name>objects</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>id_name</name></expr></argument>,
<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name><name>objects</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
}</block></then></if>
}</block></for>
<return>return <expr><name>Qnil</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>svn_swig_rb_get_pool</name><parameter_list>(<param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><name>VALUE</name> *</type><name>argv</name></decl></param>, <param><decl><type><name>VALUE</name></type> <name>self</name></decl></param>,
<param><decl><type><name>VALUE</name> *</type><name>rb_pool</name></decl></param>, <param><decl><type><name>apr_pool_t</name> **</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>*<name>rb_pool</name> = <name>Qnil</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>argc</name> &gt; 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>POOL_P</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>argc</name> - 1</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>rb_pool</name> = <call><name>rb_pool_new</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>argc</name> - 1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>argc</name> -= 1</expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr>*<name>rb_pool</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>NIL_P</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>rb_pool</name> = <call><name>rb_get_pool</name><argument_list>(<argument><expr><name>self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>POOL_P</name><argument_list>(<argument><expr>*<name>rb_pool</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>rb_pool</name> = <call><name>rb_pool_new</name><argument_list>(<argument><expr>*<name>rb_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>rb_pool</name> = <name>Qnil</name></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr>*<name>rb_pool</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>target</name></decl>;</decl_stmt>
<expr_stmt><expr><name>target</name> = <call><name>find_swig_type_object</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>rb_pool</name> = <call><name>rb_pool_new</name><argument_list>(<argument><expr><call><name>rb_get_pool</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>pool</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_pool_wrapper_t</name> *</type><name>pool_wrapper</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_wrapper_t</name> **</type><name>pool_wrapper_p</name></decl>;</decl_stmt>
<expr_stmt><expr><name>pool_wrapper_p</name> = &amp;<name>pool_wrapper</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r2c_swig_type2</name><argument_list>(<argument><expr>*<name>rb_pool</name></expr></argument>, <argument><expr>"apr_pool_wrapper_t *"</expr></argument>, <argument><expr>(<name>void</name> **)<name>pool_wrapper_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>pool</name> = <name><name>pool_wrapper</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_boolean_t</name></type>
<name>rb_set_pool_if_swig_type_object</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>target</name></decl></param>, <param><decl><type><name>VALUE</name></type> <name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>targets</name><index>[<expr>1</expr>]</index></name> <init>= <expr><block>{<expr><name>target</name></expr>}</block></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><call><name>find_swig_type_object</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name>targets</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>rb_set_pool</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></else></if>
}</block></function>
<struct>struct <name>rb_set_pool_for_hash_arg</name> <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>pool</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>rb_set_pool_for_hash_callback</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>key</name></decl></param>, <param><decl><type><name>VALUE</name></type> <name>value</name></decl></param>,
<param><decl><type>struct <name>rb_set_pool_for_hash_arg</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>svn_swig_rb_set_pool</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>arg</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>arg</name>-&gt;<name>set</name></name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
<return>return <expr><name>ST_CONTINUE</name></expr>;</return>
}</block></function>
<function><type><name>svn_boolean_t</name></type>
<name>svn_swig_rb_set_pool</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>target</name></decl></param>, <param><decl><type><name>VALUE</name></type> <name>pool</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>rb_cArray</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>set</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <call><name>RARRAY</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call>-&gt;<name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><call><name>svn_swig_rb_set_pool</name><argument_list>(<argument><expr><call><name>RARRAY</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call>-&gt;<name><name>ptr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>set</name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
}</block></for>
<return>return <expr><name>set</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>rb_cHash</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type>struct <name>rb_set_pool_for_hash_arg</name></type> <name>arg</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>arg</name>.<name>set</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg</name>.<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_hash_foreach</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>rb_set_pool_for_hash_callback</name></expr></argument>, <argument><expr>(<name>VALUE</name>)&amp;<name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>arg</name>.<name>set</name></name></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><call><name>rb_set_pool_if_swig_type_object</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if></else></if>
}</block></function>
<function><type><name>void</name></type>
<name>svn_swig_rb_set_pool_for_no_swig_type</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>target</name></decl></param>, <param><decl><type><name>VALUE</name></type> <name>pool</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>rb_cArray</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>target</name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>rb_iterate</name><argument_list>(<argument><expr><name>rb_each</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>rb_set_pool</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type>
<name>svn_swig_rb_push_pool</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>pool</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>rb_holder_push</name><argument_list>(<argument><expr><call><name>rb_svn_pool_holder</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><name>void</name></type>
<name>svn_swig_rb_pop_pool</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>pool</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>rb_holder_pop</name><argument_list>(<argument><expr><call><name>rb_svn_pool_holder</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><name>void</name></type>
<name>svn_swig_rb_destroy_pool</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>pool</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>id_destroy</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><name>void</name></type>
<name>svn_swig_rb_destroy_internal_pool</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>object</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>svn_swig_rb_destroy_pool</name><argument_list>(<argument><expr><call><name>rb_get_pool</name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type>
<name>svn_swig_rb_raise_svn_fs_already_close</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_svn_error_fs_already_close</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>rb_svn_error_fs_already_close</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rb_svn_error_fs_already_close</name> =
<call><name>rb_const_get</name><argument_list>(<argument><expr><call><name>rb_svn_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr>"FsAlreadyClose"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_svn_error_fs_already_close</name></expr></argument>, <argument><expr>"closed file system"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type>
<name>svn_swig_rb_raise_svn_repos_already_close</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>rb_svn_error_repos_already_close</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>rb_svn_error_repos_already_close</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rb_svn_error_repos_already_close</name> =
<call><name>rb_const_get</name><argument_list>(<argument><expr><call><name>rb_svn_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr>"ReposAlreadyClose"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_svn_error_repos_already_close</name></expr></argument>, <argument><expr>"closed repository"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>VALUE</name></type>
<name>svn_swig_rb_svn_error_new</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>code</name></decl></param>, <param><decl><type><name>VALUE</name></type> <name>message</name></decl></param>, <param><decl><type><name>VALUE</name></type> <name>file</name></decl></param>, <param><decl><type><name>VALUE</name></type> <name>line</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><call><name>rb_svn_error_svn_error</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>id_new_corresponding_error</name></expr></argument>,
<argument><expr>4</expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>VALUE</name></type>
<name>svn_swig_rb_svn_error_to_rb_error</name><parameter_list>(<param><decl><type><name>svn_error_t</name> *</type><name>error</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>error_code</name> <init>= <expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name><name>error</name>-&gt;<name>apr_err</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>message</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>file</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>line</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>error</name>-&gt;<name>file</name></name></expr>)</condition><then>
<expr_stmt><expr><name>file</name> = <call><name>rb_str_new2</name><argument_list>(<argument><expr><name><name>error</name>-&gt;<name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>error</name>-&gt;<name>line</name></name></expr>)</condition><then>
<expr_stmt><expr><name>line</name> = <call><name>LONG2NUM</name><argument_list>(<argument><expr><name><name>error</name>-&gt;<name>line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>message</name> = <call><name>rb_str_new2</name><argument_list>(<argument><expr><name><name>error</name>-&gt;<name>message</name></name> ? <name><name>error</name>-&gt;<name>message</name></name> : ""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>error</name>-&gt;<name>child</name></name></expr>)</condition> <block>{
<expr_stmt><expr><name>error</name> = <name><name>error</name>-&gt;<name>child</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>error</name>-&gt;<name>message</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>rb_str_concat</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><call><name>rb_str_new2</name><argument_list>(<argument><expr>"\n"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_concat</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><name><name>error</name>-&gt;<name>message</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></while>
<return>return <expr><call><name>svn_swig_rb_svn_error_new</name><argument_list>(<argument><expr><name>error_code</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>svn_swig_rb_handle_svn_error</name><parameter_list>(<param><decl><type><name>svn_error_t</name> *</type><name>error</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>rb_error</name> <init>= <expr><call><name>svn_swig_rb_svn_error_to_rb_error</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_exc_raise</name><argument_list>(<argument><expr><name>rb_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>VALUE</name></type> <name>inited</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<function><type><name>VALUE</name></type>
<name>svn_swig_rb_from_swig_type</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>value</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>swig_type_info</name> *</type><name>info</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>inited</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SWIG_InitRuntime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inited</name> = <name>Qtrue</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>info</name> = <call><name>SWIG_TypeQuery</name><argument_list>(<argument><expr>(<name>char</name> *)<name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>info</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>SWIG_NewPointerObj</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>, <argument><expr>"invalid SWIG type: %s"</expr></argument>, <argument><expr>(<name>char</name> *)<name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>c2r_swig_type</name></cpp:macro> <cpp:value>svn_swig_rb_from_swig_type</cpp:value></cpp:define>
<function><type><name>svn_depth_t</name></type>
<name>svn_swig_rb_to_depth</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>svn_depth_infinity</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>value</name> == <name>Qtrue</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>SVN_DEPTH_INFINITY_OR_FILES</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>value</name> == <name>Qfalse</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>SVN_DEPTH_INFINITY_OR_FILES</name><argument_list>(<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>rb_cString</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> ||
<call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>rb_cSymbol</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>value</name> = <call><name>rb_funcall</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>id_to_s</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_depth_from_word</name><argument_list>(<argument><expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>rb_cInteger</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>,
<argument><expr>"'%s' must be DEPTH_STRING (e.g. \"infinity\" or :infinity) "
"or Svn::Core::DEPTH_*"</expr></argument>,
<argument><expr><call><name>r2c_inspect</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if></else></if></else></if></else></if>
}</block></function>
<function><type><name>svn_mergeinfo_inheritance_t</name></type>
<name>svn_swig_rb_to_mergeinfo_inheritance</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>svn_mergeinfo_inherited</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>rb_cString</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> ||
<call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>rb_cSymbol</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>value</name> = <call><name>rb_funcall</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>id_to_s</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_inheritance_from_word</name><argument_list>(<argument><expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>rb_cInteger</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>,
<argument><expr>"'%s' must be MERGEINFO_STRING (e.g. \"explicit\" or :explicit) "
"or Svn::Core::MERGEINFO_*"</expr></argument>,
<argument><expr><call><name>r2c_inspect</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>c2r_string</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>value</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>value</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>rb_str_new2</name><argument_list>(<argument><expr>(const <name>char</name> *)<name>value</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><name>Qnil</name></expr>;</return>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>c2r_string2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cstr</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>c2r_string</name><argument_list>(<argument><expr>(<name>void</name> *)<name>cstr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>c2r_bool2</name><parameter_list>(<param><type><name>bool</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(bool ? Qtrue : Qfalse)</cpp:value></cpp:define>
<function><type><name>VALUE</name></type>
<name>svn_swig_rb_svn_date_string_to_time</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>date</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>date</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>tm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<expr_stmt><expr><name>pool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> = <call><name>svn_time_from_cstring</name><argument_list>(<argument><expr>&amp;<name>tm</name></expr></argument>, <argument><expr><name>date</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>error</name></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_swig_rb_handle_svn_error</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><call><name>rb_time_new</name><argument_list>(<argument><expr>(<name>time_t</name>)<call><name>apr_time_sec</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>(<name>time_t</name>)<call><name>apr_time_usec</name><argument_list>(<argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><name>Qnil</name></expr>;</return>
}</block></else></if>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>c2r_svn_date_string2</name></cpp:macro> <cpp:value>svn_swig_rb_svn_date_string_to_time</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>c2r_long</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>value</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>INT2NUM</name><argument_list>(<argument><expr>*(<name>long</name> *)<name>value</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>c2r_svn_string</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>value</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>s</name> <init>= <expr>(<name>svn_string_t</name> *)<name>value</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>array</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
}</block></struct></type> <name>prop_hash_each_arg_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>svn_swig_rb_to_apr_array_row_prop_callback</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>key</name></decl></param>, <param><decl><type><name>VALUE</name></type> <name>value</name></decl></param>,
<param><decl><type><name>prop_hash_each_arg_t</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_prop_t</name> *</type><name>prop</name></decl>;</decl_stmt>
<expr_stmt><expr><name>prop</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>arg</name>-&gt;<name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prop</name>-&gt;<name>name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>arg</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prop</name>-&gt;<name>value</name></name> = <call><name>svn_string_ncreate</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>arg</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ST_CONTINUE</name></expr>;</return>
}</block></function>
<function><type><name>apr_array_header_t</name> *</type>
<name>svn_swig_rb_to_apr_array_row_prop</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>array_or_hash</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>array_or_hash</name></expr></argument>, <argument><expr><name>rb_cArray</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> = <call><name>RARRAY</name><argument_list>(<argument><expr><name>array_or_hash</name></expr></argument>)</argument_list></call>-&gt;<name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_prop_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name>-&gt;<name>nelts</name></name> = <name>len</name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>name</name></decl>, <decl><type ref="prev"/><name>value</name></decl>, <decl><type ref="prev"/><name>item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_prop_t</name> *</type><name>prop</name></decl>;</decl_stmt>
<expr_stmt><expr><name>item</name> = <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>array_or_hash</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> = <call><name>rb_funcall</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>id_name</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> = <call><name>rb_funcall</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>id_value</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prop</name> = &amp;<call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_prop_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prop</name>-&gt;<name>name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prop</name>-&gt;<name>value</name></name> = <call><name>svn_string_ncreate</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>result</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>array_or_hash</name></expr></argument>, <argument><expr><name>rb_cHash</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>prop_hash_each_arg_t</name></type> <name>arg</name></decl>;</decl_stmt>
<expr_stmt><expr><name>result</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_prop_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg</name>.<name>array</name></name> = <name>result</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg</name>.<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_hash_foreach</name><argument_list>(<argument><expr><name>array_or_hash</name></expr></argument>, <argument><expr><name>svn_swig_rb_to_apr_array_row_prop_callback</name></expr></argument>,
<argument><expr>(<name>VALUE</name>)&amp;<name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>,
<argument><expr>"'%s' must be [Svn::Core::Prop, ...] or {'name' =&gt; 'value', ...}"</expr></argument>,
<argument><expr><call><name>r2c_inspect</name><argument_list>(<argument><expr><name>array_or_hash</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>svn_swig_rb_to_apr_array_prop_callback</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>key</name></decl></param>, <param><decl><type><name>VALUE</name></type> <name>value</name></decl></param>,
<param><decl><type><name>prop_hash_each_arg_t</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_prop_t</name> *</type><name>prop</name></decl>;</decl_stmt>
<expr_stmt><expr><name>prop</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>arg</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_prop_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prop</name>-&gt;<name>name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>arg</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prop</name>-&gt;<name>value</name></name> = <call><name>svn_string_ncreate</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>arg</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name><name>arg</name>-&gt;<name>array</name></name></expr></argument>, <argument><expr><name>svn_prop_t</name> *</expr></argument>)</argument_list></call> = <name>prop</name></expr>;</expr_stmt>
<return>return <expr><name>ST_CONTINUE</name></expr>;</return>
}</block></function>
<function><type><name>apr_array_header_t</name> *</type>
<name>svn_swig_rb_to_apr_array_prop</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>array_or_hash</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>array_or_hash</name></expr></argument>, <argument><expr><name>rb_cArray</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> = <call><name>RARRAY</name><argument_list>(<argument><expr><name>array_or_hash</name></expr></argument>)</argument_list></call>-&gt;<name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_prop_t</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name>-&gt;<name>nelts</name></name> = <name>len</name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>name</name></decl>, <decl><type ref="prev"/><name>value</name></decl>, <decl><type ref="prev"/><name>item</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_prop_t</name> *</type><name>prop</name></decl>;</decl_stmt>
<expr_stmt><expr><name>item</name> = <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>array_or_hash</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> = <call><name>rb_funcall</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>id_name</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> = <call><name>rb_funcall</name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>id_value</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prop</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_prop_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prop</name>-&gt;<name>name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prop</name>-&gt;<name>value</name></name> = <call><name>svn_string_ncreate</name><argument_list>(<argument><expr><call><name>RSTRING_PTR</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING_LEN</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_prop_t</name> *</expr></argument>)</argument_list></call> = <name>prop</name></expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>result</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>array_or_hash</name></expr></argument>, <argument><expr><name>rb_cHash</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>prop_hash_each_arg_t</name></type> <name>arg</name></decl>;</decl_stmt>
<expr_stmt><expr><name>result</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_prop_t</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg</name>.<name>array</name></name> = <name>result</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arg</name>.<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_hash_foreach</name><argument_list>(<argument><expr><name>array_or_hash</name></expr></argument>, <argument><expr><name>svn_swig_rb_to_apr_array_prop_callback</name></expr></argument>,
<argument><expr>(<name>VALUE</name>)&amp;<name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>,
<argument><expr>"'%s' must be [Svn::Core::Prop, ...] or {'name' =&gt; 'value', ...}"</expr></argument>,
<argument><expr><call><name>r2c_inspect</name><argument_list>(<argument><expr><name>array_or_hash</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_DUP_BASE</name><parameter_list>(<param><type><name>type</name></type></param>, <param><type><name>dup_func</name></type></param>, <param><type><name>type_prefix</name></type></param>)</parameter_list></cpp:macro> <cpp:value>static VALUE c2r_ ##type ##_dup(void *type, void *ctx) { apr_pool_t *pool; VALUE rb_pool; svn_ ##type ##_t *copied_item; VALUE rb_copied_item; if (!type) return Qnil; svn_swig_rb_get_pool(0, (VALUE *)0, 0, &amp;rb_pool, &amp;pool); copied_item = svn_ ##dup_func((type_prefix svn_ ##type ##_t *)type, pool); rb_copied_item = c2r_swig_type((void *)copied_item, (void *)"svn_" #type "_t *"); rb_set_pool(rb_copied_item, rb_pool); return rb_copied_item; }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_DUP_BASE_WITH_CONVENIENCE</name><parameter_list>(<param><type><name>type</name></type></param>, <param><type><name>dup_func</name></type></param>, <param><type><name>type_prefix</name></type></param>)</parameter_list></cpp:macro> <cpp:value>DEFINE_DUP_BASE(type, dup_func, type_prefix) static VALUE c2r_ ##type ##__dup(type_prefix svn_ ##type ##_t *type) { void *void_type; void_type = (void *)type; return c2r_ ##type ##_dup(void_type, NULL); }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_DUP_WITH_FUNCTION_NAME</name><parameter_list>(<param><type><name>type</name></type></param>, <param><type><name>dup_func</name></type></param>)</parameter_list></cpp:macro> <cpp:value>DEFINE_DUP_BASE_WITH_CONVENIENCE(type, dup_func, const)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_DUP</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>DEFINE_DUP_WITH_FUNCTION_NAME(type, type ##_dup)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_DUP_NO_CONVENIENCE_WITH_FUNCTION_NAME</name><parameter_list>(<param><type><name>type</name></type></param>, <param><type><name>dup_func</name></type></param>)</parameter_list></cpp:macro> <cpp:value>DEFINE_DUP_BASE(type, dup_func, const)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_DUP_NO_CONVENIENCE</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>DEFINE_DUP_NO_CONVENIENCE_WITH_FUNCTION_NAME(type, type ##_dup)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_DUP_NO_CONST_WITH_FUNCTION_NAME</name><parameter_list>(<param><type><name>type</name></type></param>, <param><type><name>dup_func</name></type></param>)</parameter_list></cpp:macro> <cpp:value>DEFINE_DUP_BASE_WITH_CONVENIENCE(type, dup_func,)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_DUP_NO_CONST</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>DEFINE_DUP_NO_CONST_WITH_FUNCTION_NAME(type, type ##_dup)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_DUP_NO_CONST_NO_CONVENIENCE_WITH_FUNCTION_NAME</name><parameter_list>(<param><type><name>type</name></type></param>, <param><type><name>dup_func</name></type></param>)</parameter_list></cpp:macro> <cpp:value>DEFINE_DUP_BASE(type, dup_func,)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_DUP_NO_CONST_NO_CONVENIENCE</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>DEFINE_DUP_NO_CONST_NO_CONVENIENCE_WITH_FUNCTION_NAME(type, type ##_dup)</cpp:value></cpp:define>
<macro><name>DEFINE_DUP_WITH_FUNCTION_NAME</name><argument_list>(<argument>wc_notify</argument>, <argument>wc_dup_notify</argument>)</argument_list></macro>
<macro><name>DEFINE_DUP</name><argument_list>(<argument>txdelta_window</argument>)</argument_list></macro>
<macro><name>DEFINE_DUP</name><argument_list>(<argument>info</argument>)</argument_list></macro>
<macro><name>DEFINE_DUP</name><argument_list>(<argument>commit_info</argument>)</argument_list></macro>
<macro><name>DEFINE_DUP</name><argument_list>(<argument>lock</argument>)</argument_list></macro>
<macro><name>DEFINE_DUP</name><argument_list>(<argument>auth_ssl_server_cert_info</argument>)</argument_list></macro>
<macro><name>DEFINE_DUP</name><argument_list>(<argument>wc_entry</argument>)</argument_list></macro>
<macro><name>DEFINE_DUP</name><argument_list>(<argument>client_diff_summarize</argument>)</argument_list></macro>
<macro><name>DEFINE_DUP</name><argument_list>(<argument>dirent</argument>)</argument_list></macro>
<macro><name>DEFINE_DUP_NO_CONVENIENCE</name><argument_list>(<argument>client_commit_item3</argument>)</argument_list></macro>
<macro><name>DEFINE_DUP_NO_CONVENIENCE</name><argument_list>(<argument>client_proplist_item</argument>)</argument_list></macro>
<macro><name>DEFINE_DUP_NO_CONVENIENCE</name><argument_list>(<argument>wc_external_item2</argument>)</argument_list></macro>
<macro><name>DEFINE_DUP_NO_CONVENIENCE</name><argument_list>(<argument>log_changed_path</argument>)</argument_list></macro>
<macro><name>DEFINE_DUP_NO_CONST_WITH_FUNCTION_NAME</name><argument_list>(<argument>wc_status2</argument>, <argument>wc_dup_status2</argument>)</argument_list></macro>
<macro><name>DEFINE_DUP_NO_CONST_NO_CONVENIENCE</name><argument_list>(<argument>merge_range</argument>)</argument_list></macro>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>r2c_inspect</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>object</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>inspected</name></decl>;</decl_stmt>
<expr_stmt><expr><name>inspected</name> = <call><name>rb_funcall</name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>id_inspect</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>StringValueCStr</name><argument_list>(<argument><expr><name>inspected</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type>
<name>r2c_string</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>value</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr>(<name>void</name> *)<call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type>
<name>r2c_svn_string</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>value</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr>(<name>void</name> *)<call><name>svn_string_create</name><argument_list>(<argument><expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>void</name> *</type>
<name>svn_swig_rb_to_swig_type</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>value</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>void</name> **</type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>result</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r2c_swig_type2</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>(const <name>char</name> *)<name>ctx</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>*<name>result</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r2c_swig_type</name></cpp:macro> <cpp:value>svn_swig_rb_to_swig_type</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>r2c_swig_type2</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>value</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>type_name</name></decl></param>, <param><decl><type><name>void</name> **</type><name>result</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<expr_stmt><expr><name>res</name> = <call><name>SWIG_ConvertPtr</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>SWIG_TypeQuery</name><argument_list>(<argument><expr><name>type_name</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>SWIG_POINTER_EXCEPTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SWIG_IsOK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr>!<call><name>SWIG_IsOK</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>message</name> <init>= <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr>"inspect"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr>"must be "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_str_cat2</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>type_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SWIG_Error</name><argument_list>(<argument><expr><call><name>SWIG_ArgError</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type>
<name>r2c_long</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>value</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr>(<name>void</name> *)<call><name>NUM2LONG</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type>
<name>r2c_svn_err</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>rb_svn_err</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>message</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><name>message</name> = <call><name>rb_funcall</name><argument_list>(<argument><expr><name>rb_svn_err</name></expr></argument>, <argument><expr><name>id_message</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_error_create</name><argument_list>(<argument><expr><call><name>NUM2INT</name><argument_list>(<argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>rb_svn_err</name></expr></argument>, <argument><expr><name>id_code</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>void</name> *)<name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type>
<name>r2c_revnum</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>value</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_revnum_t</name> *</type><name>revnum</name></decl>;</decl_stmt>
<expr_stmt><expr><name>revnum</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_revnum_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>revnum</name> = <call><name>NUM2INT</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>revnum</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type>
<name>r2c_merge_range</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>value</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_swig_rb_array_to_apr_array_merge_range</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_APR_ARRAY_TO_ARRAY</name><parameter_list>(<param><type><name>return_type</name></type></param>, <param><type><name>name</name></type></param>, <param><type><name>conv</name></type></param>, <param><type><name>amp</name></type></param>, <param><type><name>type</name></type></param>, <param><type><name>ctx</name></type></param>)</parameter_list></cpp:macro> <cpp:value>return_type name(const apr_array_header_t *apr_ary) { VALUE ary = rb_ary_new(); int i; for (i = 0; i &lt; apr_ary-&gt;nelts; i++) { rb_ary_push(ary, conv((void *)amp(APR_ARRAY_IDX(apr_ary, i, type)), ctx)); } return ary; }</cpp:value></cpp:define>
<macro><name>DEFINE_APR_ARRAY_TO_ARRAY</name><argument_list>(<argument>VALUE</argument>, <argument>svn_swig_rb_apr_array_to_array_string</argument>,
<argument>c2r_string</argument>, <argument>EMPTY_CPP_ARGUMENT</argument>, <argument>const char *</argument>, <argument>NULL</argument>)</argument_list></macro>
<macro><name>DEFINE_APR_ARRAY_TO_ARRAY</name><argument_list>(<argument>VALUE</argument>, <argument>svn_swig_rb_apr_array_to_array_svn_string</argument>,
<argument>c2r_svn_string</argument>, <argument>&amp;</argument>, <argument>svn_string_t</argument>, <argument>NULL</argument>)</argument_list></macro>
<macro><name>DEFINE_APR_ARRAY_TO_ARRAY</name><argument_list>(<argument>static VALUE</argument>, <argument>c2r_commit_item3_array</argument>,
<argument>c2r_client_commit_item3_dup</argument>, <argument>EMPTY_CPP_ARGUMENT</argument>,
<argument>svn_client_commit_item3_t *</argument>, <argument>NULL</argument>)</argument_list></macro>
<macro><name>DEFINE_APR_ARRAY_TO_ARRAY</name><argument_list>(<argument>VALUE</argument>, <argument>svn_swig_rb_apr_array_to_array_svn_rev</argument>,
<argument>c2r_long</argument>, <argument>&amp;</argument>, <argument>svn_revnum_t</argument>, <argument>NULL</argument>)</argument_list></macro>
<macro><name>DEFINE_APR_ARRAY_TO_ARRAY</name><argument_list>(<argument>VALUE</argument>, <argument>svn_swig_rb_apr_array_to_array_proplist_item</argument>,
<argument>c2r_client_proplist_item_dup</argument>, <argument>EMPTY_CPP_ARGUMENT</argument>,
<argument>svn_client_proplist_item_t *</argument>, <argument>NULL</argument>)</argument_list></macro>
<macro><name>DEFINE_APR_ARRAY_TO_ARRAY</name><argument_list>(<argument>VALUE</argument>, <argument>svn_swig_rb_apr_array_to_array_external_item2</argument>,
<argument>c2r_wc_external_item2_dup</argument>, <argument>EMPTY_CPP_ARGUMENT</argument>,
<argument>svn_wc_external_item2_t *</argument>, <argument>NULL</argument>)</argument_list></macro>
<macro><name>DEFINE_APR_ARRAY_TO_ARRAY</name><argument_list>(<argument>VALUE</argument>, <argument>svn_swig_rb_apr_array_to_array_merge_range</argument>,
<argument>c2r_merge_range_dup</argument>, <argument>EMPTY_CPP_ARGUMENT</argument>,
<argument>svn_merge_range_t *</argument>, <argument>NULL</argument>)</argument_list></macro>
<function><type><name>VALUE</name></type>
<name>c2r_merge_range_array</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>value</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_swig_rb_apr_array_to_array_merge_range</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>VALUE</name></type>
<name>svn_swig_rb_prop_apr_array_to_hash_prop</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>apr_ary</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>hash</name> = <call><name>rb_hash_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>apr_ary</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_prop_t</name></type> <name>prop</name></decl>;</decl_stmt>
<expr_stmt><expr><name>prop</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>apr_ary</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_prop_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>hash</name></expr></argument>,
<argument><expr><name><name>prop</name>.<name>name</name></name> ? <call><name>rb_str_new2</name><argument_list>(<argument><expr><name><name>prop</name>.<name>name</name></name></expr></argument>)</argument_list></call> : <name>Qnil</name></expr></argument>,
<argument><expr><name><name>prop</name>.<name>value</name></name> &amp;&amp; <name><name>prop</name>.<name>value</name>-&gt;<name>data</name></name> ?
<call><name>rb_str_new2</name><argument_list>(<argument><expr><name><name>prop</name>.<name>value</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call> : <name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>hash</name></expr>;</return>
}</block></function>
<function><type><name>apr_array_header_t</name> *</type>
<name>svn_swig_rb_array_to_apr_array_revision_range</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>array</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>apr_ary</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>Check_Type</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>T_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = <call><name>RARRAY</name><argument_list>(<argument><expr><name>array</name></expr></argument>)</argument_list></call>-&gt;<name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>apr_ary</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_opt_revision_range_t</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>apr_ary</name>-&gt;<name>nelts</name></name> = <name>len</name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_opt_revision_range_t</name> *</type><name>range</name></decl>;</decl_stmt>
<expr_stmt><expr><name>value</name> = <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>rb_cArray</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>RARRAY</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call>-&gt;<name>len</name> != 2</expr>)</condition><then>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>,
<argument><expr>"revision range should be [start, end]: %s"</expr></argument>,
<argument><expr><call><name>r2c_inspect</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>range</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>range</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_set_revision</name><argument_list>(<argument><expr>&amp;<name><name>range</name>-&gt;<name>start</name></name></expr></argument>, <argument><expr><call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_set_revision</name><argument_list>(<argument><expr>&amp;<name><name>range</name>-&gt;<name>end</name></name></expr></argument>, <argument><expr><call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>range</name> = <call><name>r2c_swig_type</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>(<name>void</name> *)"svn_opt_revision_range_t *"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>apr_ary</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_opt_revision_range_t</name> *</expr></argument>)</argument_list></call> = <name>range</name></expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>apr_ary</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_ARRAY_TO_APR_ARRAY</name><parameter_list>(<param><type><name>type</name></type></param>, <param><type><name>name</name></type></param>, <param><type><name>converter</name></type></param>, <param><type><name>context</name></type></param>)</parameter_list></cpp:macro> <cpp:value>apr_array_header_t * name(VALUE array, apr_pool_t *pool) { int i, len; apr_array_header_t *apr_ary; Check_Type(array, T_ARRAY); len = RARRAY(array)-&gt;len; apr_ary = apr_array_make(pool, len, sizeof(type)); apr_ary-&gt;nelts = len; for (i = 0; i &lt; len; i++) { VALUE value; type val; value = rb_ary_entry(array, i); val = (type)converter(value, context, pool); APR_ARRAY_IDX(apr_ary, i, type) = val; } return apr_ary; }</cpp:value></cpp:define>
<macro><name>DEFINE_ARRAY_TO_APR_ARRAY</name><argument_list>(<argument>const char *</argument>, <argument>svn_swig_rb_strings_to_apr_array</argument>,
<argument>r2c_string</argument>, <argument>NULL</argument>)</argument_list></macro>
<macro><name>DEFINE_ARRAY_TO_APR_ARRAY</name><argument_list>(<argument>svn_auth_provider_object_t *</argument>,
<argument>svn_swig_rb_array_to_auth_provider_object_apr_array</argument>,
<argument>r2c_swig_type</argument>, <argument>(void *)"svn_auth_provider_object_t *"</argument>)</argument_list></macro>
<macro><name>DEFINE_ARRAY_TO_APR_ARRAY</name><argument_list>(<argument>svn_revnum_t</argument>,
<argument>svn_swig_rb_array_to_apr_array_revnum</argument>,
<argument>r2c_long</argument>, <argument>NULL</argument>)</argument_list></macro>
<macro><name>DEFINE_ARRAY_TO_APR_ARRAY</name><argument_list>(<argument>svn_merge_range_t *</argument>,
<argument>svn_swig_rb_array_to_apr_array_merge_range</argument>,
<argument>r2c_swig_type</argument>, <argument>(void *)"svn_merge_range_t *"</argument>)</argument_list></macro>
<macro><name>DEFINE_ARRAY_TO_APR_ARRAY</name><argument_list>(<argument>svn_client_copy_source_t *</argument>,
<argument>svn_swig_rb_array_to_apr_array_copy_source</argument>,
<argument>r2c_swig_type</argument>, <argument>(void *)"svn_client_copy_source_t *"</argument>)</argument_list></macro>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>c2r_hash_with_key_convert</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>hash</name></decl></param>,
<param><decl><type><name>c2r_func</name></type> <name>key_conv</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>key_ctx</name></decl></param>,
<param><decl><type><name>c2r_func</name></type> <name>value_conv</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>value_ctx</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>r_hash</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>hash</name></expr>)</condition><then>
<return>return <expr><name>Qnil</name></expr>;</return></then></if>
<expr_stmt><expr><name>r_hash</name> = <call><name>rb_hash_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>v</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>val</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>v</name> = <call>(*<name>value_conv</name>)<argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>value_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>rb_hash_aset</name><argument_list>(<argument><expr><name>r_hash</name></expr></argument>, <argument><expr><call>(*<name>key_conv</name>)<argument_list>(<argument><expr>(<name>void</name> *)<name>key</name></expr></argument>, <argument><expr><name>key_ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>r_hash</name></expr>;</return>
}</block></function>
<function><type><name>VALUE</name></type>
<name>c2r_hash</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>hash</name></decl></param>,
<param><decl><type><name>c2r_func</name></type> <name>value_conv</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>c2r_hash_with_key_convert</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>c2r_string</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>value_conv</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>VALUE</name></type>
<name>svn_swig_rb_apr_hash_to_hash_string</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>hash</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>c2r_hash</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>c2r_string</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>VALUE</name></type>
<name>svn_swig_rb_apr_hash_to_hash_svn_string</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>hash</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>c2r_hash</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>c2r_svn_string</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>VALUE</name></type>
<name>svn_swig_rb_apr_hash_to_hash_swig_type</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>hash</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>type_name</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>c2r_hash</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>c2r_swig_type</name></expr></argument>, <argument><expr>(<name>void</name> *)<name>type_name</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>VALUE</name></type>
<name>svn_swig_rb_apr_hash_to_hash_merge_range</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>hash</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>c2r_hash</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>c2r_merge_range_array</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>c2r_merge_range_hash</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>value</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>hash</name> <init>= <expr><name>value</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>svn_swig_rb_apr_hash_to_hash_merge_range</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>VALUE</name></type>
<name>svn_swig_rb_apr_hash_to_hash_merge_range_hash</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>hash</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>c2r_hash</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>c2r_merge_range_hash</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>VALUE</name></type>
<name>svn_swig_rb_prop_hash_to_hash</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>prop_hash</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_swig_rb_apr_hash_to_hash_svn_string</name><argument_list>(<argument><expr><name>prop_hash</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>VALUE</name></type>
<name>c2r_revnum</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>value</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_revnum_t</name> *</type><name>num</name> <init>= <expr><name>value</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>INT2NUM</name><argument_list>(<argument><expr>*<name>num</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>VALUE</name></type>
<name>svn_swig_rb_apr_revnum_key_hash_to_hash_string</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>hash</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>c2r_hash_with_key_convert</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>c2r_revnum</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>c2r_string</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>r2c_hash_i</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>key</name></decl></param>, <param><decl><type><name>VALUE</name></type> <name>value</name></decl></param>, <param><decl><type><name>hash_to_apr_hash_data_t</name> *</type><name>data</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>key</name> != <name>Qundef</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>val</name> <init>= <expr><call><name><name>data</name>-&gt;<name>func</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>data</name>-&gt;<name>ctx</name></name></expr></argument>, <argument><expr><name><name>data</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>data</name>-&gt;<name>apr_hash</name></name></expr></argument>,
<argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>data</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>ST_CONTINUE</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_hash_t</name> *</type>
<name>r2c_hash</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>hash</name></decl></param>, <param><decl><type><name>r2c_func</name></type> <name>func</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>apr_hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hash_to_apr_hash_data_t</name></type> <name>data</name> <init>= <expr><block>{
<expr><name>NULL</name></expr>,
<expr><name>func</name></expr>,
<expr><name>ctx</name></expr>,
<expr><name>pool</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>apr_hash</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>data</name>.<name>apr_hash</name></name> = <name>apr_hash</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_hash_foreach</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>r2c_hash_i</name></expr></argument>, <argument><expr>(<name>VALUE</name>)&amp;<name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>apr_hash</name></expr>;</return>
}</block></else></if>
}</block></function>
<function><type><name>apr_hash_t</name> *</type>
<name>svn_swig_rb_hash_to_apr_hash_string</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>hash</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>r2c_hash</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>r2c_string</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>apr_hash_t</name> *</type>
<name>svn_swig_rb_hash_to_apr_hash_svn_string</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>hash</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>r2c_hash</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>r2c_svn_string</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>apr_hash_t</name> *</type>
<name>svn_swig_rb_hash_to_apr_hash_swig_type</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>hash</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>typename</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>r2c_hash</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>r2c_swig_type</name></expr></argument>, <argument><expr>(<name>void</name> *)<name>typename</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>apr_hash_t</name> *</type>
<name>svn_swig_rb_hash_to_apr_hash_revnum</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>hash</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>r2c_hash</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>r2c_revnum</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>apr_hash_t</name> *</type>
<name>svn_swig_rb_hash_to_apr_hash_merge_range</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>hash</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>r2c_hash</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>r2c_merge_range</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>receiver</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ID</name></type> <name>message</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>args</name></decl>;</decl_stmt>
}</block></struct></type> <name>callback_baton_t</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>svn_error_t</name> **</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>pool</name></decl>;</decl_stmt>
}</block></struct></type> <name>callback_rescue_baton_t</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>callback_baton_t</name> *</type><name>callback_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>callback_rescue_baton_t</name> *</type><name>rescue_baton</name></decl>;</decl_stmt>
}</block></struct></type> <name>callback_handle_error_baton_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>callback</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name> *</type><name>cbb</name> <init>= <expr>(<name>callback_baton_t</name> *)<name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><name>result</name> = <call><name>rb_apply</name><argument_list>(<argument><expr><name><name>cbb</name>-&gt;<name>receiver</name></name></expr></argument>, <argument><expr><name><name>cbb</name>-&gt;<name>message</name></name></expr></argument>, <argument><expr><name><name>cbb</name>-&gt;<name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_push_pool</name><argument_list>(<argument><expr><name><name>cbb</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>callback_rescue</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>callback_rescue_baton_t</name> *</type><name>rescue_baton</name> <init>= <expr>(<name>callback_rescue_baton_t</name>*)<name>baton</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*(<name><name>rescue_baton</name>-&gt;<name>err</name></name>) = <call><name>r2c_svn_err</name><argument_list>(<argument><expr><name>ruby_errinfo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_push_pool</name><argument_list>(<argument><expr><name><name>rescue_baton</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>callback_ensure</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>svn_swig_rb_pop_pool</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>Qnil</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>invoke_callback</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>baton</name></decl></param>, <param><decl><type><name>VALUE</name></type> <name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name> *</type><name>cbb</name> <init>= <expr>(<name>callback_baton_t</name> *)<name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>sub_pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name><name>argv</name><index>[]</index></name> <init>= <expr><block>{<expr><name>pool</name></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_get_pool</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>, <argument><expr>&amp;<name>sub_pool</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>-&gt;<name>pool</name></name> = <name>sub_pool</name></expr>;</expr_stmt>
<return>return <expr><call><name>rb_ensure</name><argument_list>(<argument><expr><name>callback</name></expr></argument>, <argument><expr><name>baton</name></expr></argument>, <argument><expr><name>callback_ensure</name></expr></argument>, <argument><expr><name>sub_pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>callback_handle_error</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>callback_handle_error_baton_t</name> *</type><name>handle_error_baton</name></decl>;</decl_stmt>
<expr_stmt><expr><name>handle_error_baton</name> = (<name>callback_handle_error_baton_t</name> *)<name>baton</name></expr>;</expr_stmt>
<return>return <expr><call><name>rb_rescue2</name><argument_list>(<argument><expr><name>callback</name></expr></argument>,
<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr><name><name>handle_error_baton</name>-&gt;<name>callback_baton</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>callback_rescue</name></expr></argument>,
<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr><name><name>handle_error_baton</name>-&gt;<name>rescue_baton</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>rb_svn_error</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr>(<name>VALUE</name>)0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>invoke_callback_handle_error</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>baton</name></decl></param>, <param><decl><type><name>VALUE</name></type> <name>pool</name></decl></param>, <param><decl><type><name>svn_error_t</name> **</type><name>err</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name> *</type><name>cbb</name> <init>= <expr>(<name>callback_baton_t</name> *)<name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>callback_handle_error_baton_t</name></type> <name>handle_error_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>callback_rescue_baton_t</name></type> <name>rescue_baton</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>rescue_baton</name>.<name>err</name></name> = <name>err</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rescue_baton</name>.<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle_error_baton</name>.<name>callback_baton</name></name> = <name>cbb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>handle_error_baton</name>.<name>rescue_baton</name></name> = &amp;<name>rescue_baton</name></expr>;</expr_stmt>
<return>return <expr><call><name>rb_ensure</name><argument_list>(<argument><expr><name>callback_handle_error</name></expr></argument>, <argument><expr>(<name>VALUE</name>)&amp;<name>handle_error_baton</name></expr></argument>,
<argument><expr><name>callback_ensure</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>editor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>baton</name></decl>;</decl_stmt>
}</block></struct></type> <name>item_baton</name>;</typedef>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>add_baton</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>editor</name></decl></param>, <param><decl><type><name>VALUE</name></type> <name>baton</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr>(<call><name>rb_ivar_get</name><argument_list>(<argument><expr><name>editor</name></expr></argument>, <argument><expr><name>id_baton</name></expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>editor</name></expr></argument>, <argument><expr><name>id_baton</name></expr></argument>, <argument><expr><call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><call><name>rb_ivar_get</name><argument_list>(<argument><expr><name>editor</name></expr></argument>, <argument><expr><name>id_baton</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>baton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>item_baton</name> *</type>
<name>make_baton</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>VALUE</name></type> <name>editor</name></decl></param>, <param><decl><type><name>VALUE</name></type> <name>baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>item_baton</name> *</type><name>newb</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>newb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>newb</name>-&gt;<name>editor</name></name> = <name>editor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newb</name>-&gt;<name>baton</name></name> = <name>baton</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_baton</name><argument_list>(<argument><expr><name>editor</name></expr></argument>, <argument><expr><name>baton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>newb</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>VALUE</name></type>
<name>add_baton_if_delta_editor</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>target</name></decl></param>, <param><decl><type><name>VALUE</name></type> <name>baton</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><call><name>svn_swig_rb_svn_delta_editor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>add_baton</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>baton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>Qnil</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>svn_swig_rb_set_baton</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>target</name></decl></param>, <param><decl><type><name>VALUE</name></type> <name>baton</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>baton</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>rb_cArray</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>target</name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>rb_iterate</name><argument_list>(<argument><expr><name>rb_each</name></expr></argument>, <argument><expr><name>target</name></expr></argument>, <argument><expr><name>add_baton_if_delta_editor</name></expr></argument>, <argument><expr><name>baton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>delta_editor_set_target_revision</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>target_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>item_baton</name> *</type><name>ib</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name><name>ib</name>-&gt;<name>editor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_set_target_revision</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>target_revision</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>delta_editor_open_root</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>dir_pool</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>root_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>item_baton</name> *</type><name>ib</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name><name>ib</name>-&gt;<name>editor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_open_root</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>base_revision</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>root_baton</name> = <call><name>make_baton</name><argument_list>(<argument><expr><name>dir_pool</name></expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>editor</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>delta_editor_delete_entry</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>item_baton</name> *</type><name>ib</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name><name>ib</name>-&gt;<name>editor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_delete_entry</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>3</expr></argument>, <argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>revision</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>baton</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>delta_editor_add_directory</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>dir_pool</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>child_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>item_baton</name> *</type><name>ib</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name><name>ib</name>-&gt;<name>editor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_add_directory</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>4</expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>ib</name>-&gt;<name>baton</name></name></expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>copyfrom_path</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>copyfrom_revision</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>child_baton</name> = <call><name>make_baton</name><argument_list>(<argument><expr><name>dir_pool</name></expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>editor</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>delta_editor_open_directory</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>dir_pool</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>child_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>item_baton</name> *</type><name>ib</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name><name>ib</name>-&gt;<name>editor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_open_directory</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>3</expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>ib</name>-&gt;<name>baton</name></name></expr></argument>,
<argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>base_revision</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>child_baton</name> = <call><name>make_baton</name><argument_list>(<argument><expr><name>dir_pool</name></expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>editor</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>delta_editor_change_dir_prop</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>dir_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>item_baton</name> *</type><name>ib</name> <init>= <expr><name>dir_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name><name>ib</name>-&gt;<name>editor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_change_dir_prop</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>3</expr></argument>,
<argument><expr><name><name>ib</name>-&gt;<name>baton</name></name></expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>value</name> ? <call><name>rb_str_new</name><argument_list>(<argument><expr><name><name>value</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>value</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call> : <name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>delta_editor_close_baton</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>ID</name></type> <name>method_id</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>item_baton</name> *</type><name>ib</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name><name>ib</name>-&gt;<name>editor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>method_id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>baton</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>delta_editor_close_directory</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>dir_baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>delta_editor_close_baton</name><argument_list>(<argument><expr><name>dir_baton</name></expr></argument>, <argument><expr><name>id_close_directory</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>delta_editor_absent_directory</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>item_baton</name> *</type><name>ib</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name><name>ib</name>-&gt;<name>editor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_absent_directory</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>baton</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>delta_editor_add_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>file_pool</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>file_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>item_baton</name> *</type><name>ib</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name><name>ib</name>-&gt;<name>editor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_add_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>4</expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>ib</name>-&gt;<name>baton</name></name></expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>copyfrom_path</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>copyfrom_revision</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>file_baton</name> = <call><name>make_baton</name><argument_list>(<argument><expr><name>file_pool</name></expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>editor</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>delta_editor_open_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>file_pool</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>file_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>item_baton</name> *</type><name>ib</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name><name>ib</name>-&gt;<name>editor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_open_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>3</expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>ib</name>-&gt;<name>baton</name></name></expr></argument>,
<argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>base_revision</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>file_baton</name> = <call><name>make_baton</name><argument_list>(<argument><expr><name>file_pool</name></expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>editor</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>delta_editor_window_handler</name><parameter_list>(<param><decl><type><name>svn_txdelta_window_t</name> *</type><name>window</name></decl></param>, <param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>handler</name> <init>= <expr>(<name>VALUE</name>)<name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>handler</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_call</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><call><name>c2r_txdelta_window__dup</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>delta_editor_apply_textdelta</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_checksum</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><name>svn_txdelta_window_handler_t</name> *</type><name>handler</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>h_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>item_baton</name> *</type><name>ib</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name><name>ib</name>-&gt;<name>editor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_apply_textdelta</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>base_checksum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>handler</name> = <name>svn_delta_noop_window_handler</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>h_baton</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>handler</name> = <name>delta_editor_window_handler</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>h_baton</name> = (<name>void</name> *)<name>result</name></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>delta_editor_change_file_prop</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>item_baton</name> *</type><name>ib</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name><name>ib</name>-&gt;<name>editor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_change_file_prop</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>3</expr></argument>,
<argument><expr><name><name>ib</name>-&gt;<name>baton</name></name></expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>value</name> ? <call><name>rb_str_new</name><argument_list>(<argument><expr><name><name>value</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>value</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call> : <name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>delta_editor_close_file</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>text_checksum</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>item_baton</name> *</type><name>ib</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name><name>ib</name>-&gt;<name>editor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_close_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>text_checksum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>delta_editor_absent_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>item_baton</name> *</type><name>ib</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name><name>ib</name>-&gt;<name>editor</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_absent_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>baton</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>delta_editor_close_edit</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>item_baton</name> *</type><name>ib</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><call><name>delta_editor_close_baton</name><argument_list>(<argument><expr><name>edit_baton</name></expr></argument>, <argument><expr><name>id_close_edit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_ary_clear</name><argument_list>(<argument><expr><call><name>rb_ivar_get</name><argument_list>(<argument><expr><name><name>ib</name>-&gt;<name>editor</name></name></expr></argument>, <argument><expr><name>id_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>delta_editor_abort_edit</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>item_baton</name> *</type><name>ib</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><call><name>delta_editor_close_baton</name><argument_list>(<argument><expr><name>edit_baton</name></expr></argument>, <argument><expr><name>id_abort_edit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_ary_clear</name><argument_list>(<argument><expr><call><name>rb_ivar_get</name><argument_list>(<argument><expr><name><name>ib</name>-&gt;<name>editor</name></name></expr></argument>, <argument><expr><name>id_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>svn_swig_rb_make_delta_editor</name><parameter_list>(<param><decl><type><name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
<param><decl><type><name>VALUE</name></type> <name>rb_editor</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_delta_editor_t</name> *</type><name>thunk_editor</name> <init>= <expr><call><name>svn_delta_default_editor</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>thunk_editor</name>-&gt;<name>set_target_revision</name></name> = <name>delta_editor_set_target_revision</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thunk_editor</name>-&gt;<name>open_root</name></name> = <name>delta_editor_open_root</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thunk_editor</name>-&gt;<name>delete_entry</name></name> = <name>delta_editor_delete_entry</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thunk_editor</name>-&gt;<name>add_directory</name></name> = <name>delta_editor_add_directory</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thunk_editor</name>-&gt;<name>open_directory</name></name> = <name>delta_editor_open_directory</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thunk_editor</name>-&gt;<name>change_dir_prop</name></name> = <name>delta_editor_change_dir_prop</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thunk_editor</name>-&gt;<name>close_directory</name></name> = <name>delta_editor_close_directory</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thunk_editor</name>-&gt;<name>absent_directory</name></name> = <name>delta_editor_absent_directory</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thunk_editor</name>-&gt;<name>add_file</name></name> = <name>delta_editor_add_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thunk_editor</name>-&gt;<name>open_file</name></name> = <name>delta_editor_open_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thunk_editor</name>-&gt;<name>apply_textdelta</name></name> = <name>delta_editor_apply_textdelta</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thunk_editor</name>-&gt;<name>change_file_prop</name></name> = <name>delta_editor_change_file_prop</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thunk_editor</name>-&gt;<name>close_file</name></name> = <name>delta_editor_close_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thunk_editor</name>-&gt;<name>absent_file</name></name> = <name>delta_editor_absent_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thunk_editor</name>-&gt;<name>close_edit</name></name> = <name>delta_editor_close_edit</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>thunk_editor</name>-&gt;<name>abort_edit</name></name> = <name>delta_editor_abort_edit</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>editor</name> = <name>thunk_editor</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>rb_editor</name></expr></argument>, <argument><expr><name>id_baton</name></expr></argument>, <argument><expr><call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>edit_baton</name> = <call><name>make_baton</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>rb_editor</name></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>VALUE</name></type>
<name>svn_swig_rb_make_baton</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>proc</name></decl></param>, <param><decl><type><name>VALUE</name></type> <name>pool</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>Qnil</name></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><call><name>rb_ary_new3</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr><name>proc</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
}</block></function>
<function><type><name>void</name></type>
<name>svn_swig_rb_from_baton</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>baton</name></decl></param>, <param><decl><type><name>VALUE</name> *</type><name>proc</name></decl></param>, <param><decl><type><name>VALUE</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>baton</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>proc</name> = <name>Qnil</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>pool</name> = <name>Qnil</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>proc</name> = <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>baton</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>pool</name> = <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>baton</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_swig_rb_log_receiver</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>changed_paths</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>author</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>date</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>message</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>proc</name></decl>, <decl><type ref="prev"/><name>rb_pool</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_from_baton</name><argument_list>(<argument><expr>(<name>VALUE</name>)<name>baton</name></expr></argument>, <argument><expr>&amp;<name>proc</name></expr></argument>, <argument><expr>&amp;<name>rb_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>rb_changed_paths</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>changed_paths</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rb_changed_paths</name> = <call><name>c2r_hash</name><argument_list>(<argument><expr><name>changed_paths</name></expr></argument>,
<argument><expr><name>c2r_log_changed_path_dup</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>proc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_call</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>5</expr></argument>,
<argument><expr><name>rb_changed_paths</name></expr></argument>,
<argument><expr><call><name>c2r_long</name><argument_list>(<argument><expr>&amp;<name>revision</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>author</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>c2r_svn_date_string2</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rb_pool</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_swig_rb_log_entry_receiver</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>svn_log_entry_t</name> *</type><name>entry</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>proc</name></decl>, <decl><type ref="prev"/><name>rb_pool</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_from_baton</name><argument_list>(<argument><expr>(<name>VALUE</name>)<name>baton</name></expr></argument>, <argument><expr>&amp;<name>proc</name></expr></argument>, <argument><expr>&amp;<name>rb_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>proc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_call</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>1</expr></argument>,
<argument><expr><call><name>c2r_swig_type</name><argument_list>(<argument><expr>(<name>void</name> *)<name>entry</name></expr></argument>,
<argument><expr>(<name>void</name> *)"svn_log_entry_t *"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rb_pool</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_swig_rb_repos_authz_func</name><parameter_list>(<param><decl><type><name>svn_boolean_t</name> *</type><name>allowed</name></decl></param>,
<param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>proc</name></decl>, <decl><type ref="prev"/><name>rb_pool</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_from_baton</name><argument_list>(<argument><expr>(<name>VALUE</name>)<name>baton</name></expr></argument>, <argument><expr>&amp;<name>proc</name></expr></argument>, <argument><expr>&amp;<name>rb_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>allowed</name> = <name>TRUE</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>proc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_call</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>2</expr></argument>,
<argument><expr><call><name>c2r_swig_type</name><argument_list>(<argument><expr>(<name>void</name> *)<name>root</name></expr></argument>,
<argument><expr>(<name>void</name> *)"svn_fs_root_t *"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rb_pool</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>allowed</name> = <call><name>RTEST</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_swig_rb_repos_authz_callback</name><parameter_list>(<param><decl><type><name>svn_repos_authz_access_t</name></type> <name>required</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name> *</type><name>allowed</name></decl></param>,
<param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>proc</name></decl>, <decl><type ref="prev"/><name>rb_pool</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_from_baton</name><argument_list>(<argument><expr>(<name>VALUE</name>)<name>baton</name></expr></argument>, <argument><expr>&amp;<name>proc</name></expr></argument>, <argument><expr>&amp;<name>rb_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>allowed</name> = <name>TRUE</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>proc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_call</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>3</expr></argument>,
<argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>required</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>c2r_swig_type</name><argument_list>(<argument><expr>(<name>void</name> *)<name>root</name></expr></argument>,
<argument><expr>(<name>void</name> *)"svn_fs_root_t *"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rb_pool</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>allowed</name> = <call><name>RTEST</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_swig_rb_get_commit_log_func</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>log_msg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>tmp_file</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>commit_items</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>proc</name></decl>, <decl><type ref="prev"/><name>rb_pool</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>log_msg</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>tmp_file</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_from_baton</name><argument_list>(<argument><expr>(<name>VALUE</name>)<name>baton</name></expr></argument>, <argument><expr>&amp;<name>proc</name></expr></argument>, <argument><expr>&amp;<name>rb_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>is_message</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>proc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_call</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><call><name>c2r_commit_item3_array</name><argument_list>(<argument><expr><name>commit_items</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rb_pool</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>err</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>error_message</name><index>[]</index></name> <init>=
<expr>"log_msg_func should return an array not '%s': "
"[TRUE_IF_IT_IS_MESSAGE, MESSAGE_OR_FILE_AS_STRING]"</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>rb_cArray</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><name>error_message</name></expr></argument>, <argument><expr><call><name>r2c_inspect</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>is_message</name> = <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> = <call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>rb_cString</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eTypeError</name></expr></argument>, <argument><expr><name>error_message</name></expr></argument>, <argument><expr><call><name>r2c_inspect</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>ret</name> = (<name>char</name> *)<call><name>r2c_string</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><name>is_message</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>log_msg</name> = <name>ret</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>tmp_file</name> = <name>ret</name></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>svn_swig_rb_notify_func2</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_wc_notify_t</name> *</type><name>notify</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>proc</name></decl>, <decl><type ref="prev"/><name>rb_pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_from_baton</name><argument_list>(<argument><expr>(<name>VALUE</name>)<name>baton</name></expr></argument>, <argument><expr>&amp;<name>proc</name></expr></argument>, <argument><expr>&amp;<name>rb_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>proc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_call</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><call><name>c2r_wc_notify__dup</name><argument_list>(<argument><expr><name>notify</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>invoke_callback</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rb_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_swig_rb_conflict_resolver_func</name>
<parameter_list>(<param><decl><type><name>svn_wc_conflict_result_t</name> **</type><name>result</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_wc_conflict_description_t</name> *</type><name>description</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>proc</name></decl>, <decl><type ref="prev"/><name>rb_pool</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_from_baton</name><argument_list>(<argument><expr>(<name>VALUE</name>)<name>baton</name></expr></argument>, <argument><expr>&amp;<name>proc</name></expr></argument>, <argument><expr>&amp;<name>rb_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>result</name> = <call><name>svn_wc_create_conflict_result</name><argument_list>(<argument><expr><name>svn_wc_conflict_choose_postpone</name></expr></argument>,
<argument><expr><name><name>description</name>-&gt;<name>merged_file</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>fret</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>proc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_call</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(
<argument><expr>1</expr></argument>,
<argument><expr><call><name>c2r_swig_type</name><argument_list>(<argument><expr>(<name>void</name> *)<name>description</name></expr></argument>,
<argument><expr>(<name>void</name> *)"svn_wc_conflict_description_t *"</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rb_pool</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fret</name> = <call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rb_pool</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>result</name> = <call><name>svn_wc_create_conflict_result</name><argument_list>(<argument><expr><call><name>NUM2INT</name><argument_list>(<argument><expr><name>fret</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>description</name>-&gt;<name>merged_file</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_swig_rb_commit_callback</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name></type> <name>new_revision</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>date</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>author</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>proc</name></decl>, <decl><type ref="prev"/><name>rb_pool</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_from_baton</name><argument_list>(<argument><expr>(<name>VALUE</name>)<name>baton</name></expr></argument>, <argument><expr>&amp;<name>proc</name></expr></argument>, <argument><expr>&amp;<name>rb_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>proc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_call</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>3</expr></argument>,
<argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>new_revision</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>c2r_svn_date_string2</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>author</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rb_pool</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_swig_rb_commit_callback2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_commit_info_t</name> *</type><name>commit_info</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>proc</name></decl>, <decl><type ref="prev"/><name>rb_pool</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_from_baton</name><argument_list>(<argument><expr>(<name>VALUE</name>)<name>baton</name></expr></argument>, <argument><expr>&amp;<name>proc</name></expr></argument>, <argument><expr>&amp;<name>rb_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>proc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_call</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><call><name>c2r_commit_info__dup</name><argument_list>(<argument><expr><name>commit_info</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rb_pool</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_swig_rb_cancel_func</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>cancel_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>proc</name></decl>, <decl><type ref="prev"/><name>rb_pool</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_from_baton</name><argument_list>(<argument><expr>(<name>VALUE</name>)<name>cancel_baton</name></expr></argument>, <argument><expr>&amp;<name>proc</name></expr></argument>, <argument><expr>&amp;<name>rb_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>proc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_call</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rb_pool</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_swig_rb_info_receiver</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_info_t</name> *</type><name>info</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>proc</name></decl>, <decl><type ref="prev"/><name>rb_pool</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_from_baton</name><argument_list>(<argument><expr>(<name>VALUE</name>)<name>baton</name></expr></argument>, <argument><expr>&amp;<name>proc</name></expr></argument>, <argument><expr>&amp;<name>rb_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>proc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_call</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>c2r_info__dup</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rb_pool</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>svn_boolean_t</name></type>
<name>svn_swig_rb_config_enumerator</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>result</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>proc</name></decl>, <decl><type ref="prev"/><name>rb_pool</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_from_baton</name><argument_list>(<argument><expr>(<name>VALUE</name>)<name>baton</name></expr></argument>, <argument><expr>&amp;<name>proc</name></expr></argument>, <argument><expr>&amp;<name>rb_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>proc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_call</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>RTEST</name><argument_list>(<argument><expr><call><name>invoke_callback</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rb_pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><name>svn_boolean_t</name></type>
<name>svn_swig_rb_config_section_enumerator</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>result</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>proc</name></decl>, <decl><type ref="prev"/><name>rb_pool</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_from_baton</name><argument_list>(<argument><expr>(<name>VALUE</name>)<name>baton</name></expr></argument>, <argument><expr>&amp;<name>proc</name></expr></argument>, <argument><expr>&amp;<name>rb_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>proc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_call</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>RTEST</name><argument_list>(<argument><expr><call><name>invoke_callback</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rb_pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_swig_rb_delta_path_driver_cb_func</name><parameter_list>(<param><decl><type><name>void</name> **</type><name>dir_baton</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>callback_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>proc</name></decl>, <decl><type ref="prev"/><name>rb_pool</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_from_baton</name><argument_list>(<argument><expr>(<name>VALUE</name>)<name>callback_baton</name></expr></argument>, <argument><expr>&amp;<name>proc</name></expr></argument>, <argument><expr>&amp;<name>rb_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>item_baton</name> *</type><name>ib</name> <init>= <expr>(<name>item_baton</name> *)<name>parent_baton</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>proc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_call</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>baton</name></name></expr></argument>, <argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rb_pool</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>dir_baton</name> = <call><name>make_baton</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>ib</name>-&gt;<name>editor</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_swig_rb_txdelta_window_handler</name><parameter_list>(<param><decl><type><name>svn_txdelta_window_t</name> *</type><name>window</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>proc</name></decl>, <decl><type ref="prev"/><name>rb_pool</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_from_baton</name><argument_list>(<argument><expr>(<name>VALUE</name>)<name>baton</name></expr></argument>, <argument><expr>&amp;<name>proc</name></expr></argument>, <argument><expr>&amp;<name>rb_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>proc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_call</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><call><name>c2r_txdelta_window__dup</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rb_pool</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>svn_swig_rb_fs_warning_callback</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>svn_error_t</name> *</type><name>err</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>proc</name></decl>, <decl><type ref="prev"/><name>rb_pool</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_from_baton</name><argument_list>(<argument><expr>(<name>VALUE</name>)<name>baton</name></expr></argument>, <argument><expr>&amp;<name>proc</name></expr></argument>, <argument><expr>&amp;<name>rb_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>proc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_call</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><call><name>svn_swig_rb_svn_error_to_rb_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>invoke_callback</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rb_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type>
<name>cleanup_fs_warning_callback_baton</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>rb_holder_pop</name><argument_list>(<argument><expr><call><name>rb_svn_fs_warning_callback_baton_holder</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>VALUE</name>)<name>baton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>svn_swig_rb_fs_warning_callback_baton_register</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>rb_holder_push</name><argument_list>(<argument><expr><call><name>rb_svn_fs_warning_callback_baton_holder</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>(<name>VALUE</name>)<name>baton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>(<name>void</name> *)<name>baton</name></expr></argument>,
<argument><expr><name>cleanup_fs_warning_callback_baton</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_swig_rb_fs_get_locks_callback</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>svn_lock_t</name> *</type><name>lock</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>proc</name></decl>, <decl><type ref="prev"/><name>rb_pool</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_from_baton</name><argument_list>(<argument><expr>(<name>VALUE</name>)<name>baton</name></expr></argument>, <argument><expr>&amp;<name>proc</name></expr></argument>, <argument><expr>&amp;<name>rb_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>proc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_call</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><call><name>c2r_lock__dup</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rb_pool</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>ra_callbacks_open_tmp_file</name><parameter_list>(<param><decl><type><name>apr_file_t</name> **</type><name>fp</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>callback_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>callbacks</name> <init>= <expr>(<name>VALUE</name>)<name>callback_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>callbacks</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>callbacks</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_open_tmp_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>fp</name> = <call><name>svn_swig_rb_make_file</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>ra_callbacks_get_wc_prop</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>relpath</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> **</type><name>value</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>callbacks</name> <init>= <expr>(<name>VALUE</name>)<name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>callbacks</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>callbacks</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_get_wc_prop</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>relpath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>value</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>value</name> = <call><name>r2c_svn_string</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>ra_callbacks_set_wc_prop</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>callbacks</name> <init>= <expr>(<name>VALUE</name>)<name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>callbacks</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>callbacks</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_set_wc_prop</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>3</expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>c2r_svn_string</name><argument_list>(<argument><expr>(<name>void</name> *)<name>value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>ra_callbacks_push_wc_prop</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>callbacks</name> <init>= <expr>(<name>VALUE</name>)<name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>callbacks</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>callbacks</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_push_wc_prop</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>3</expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>c2r_svn_string</name><argument_list>(<argument><expr>(<name>void</name> *)<name>value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>ra_callbacks_invalidate_wc_props</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>callbacks</name> <init>= <expr>(<name>VALUE</name>)<name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>callbacks</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>callbacks</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_invalidate_wc_props</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ra_callbacks_progress_func</name><parameter_list>(<param><decl><type><name>apr_off_t</name></type> <name>progress</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>total</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>callbacks</name> <init>= <expr>(<name>VALUE</name>)<name>baton</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>callbacks</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>callbacks</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_progress_func</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr><call><name>AOFF2NUM</name><argument_list>(<argument><expr><name>progress</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>AOFF2NUM</name><argument_list>(<argument><expr><name>total</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>invoke_callback</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><name>void</name></type>
<name>svn_swig_rb_setup_ra_callbacks</name><parameter_list>(<param><decl><type><name>svn_ra_callbacks2_t</name> **</type><name>callbacks</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>baton</name></decl></param>,
<param><decl><type><name>VALUE</name></type> <name>rb_callbacks</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>auth_baton</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>rb_callbacks</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>rb_auth_baton</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>rb_auth_baton</name> = <call><name>rb_funcall</name><argument_list>(<argument><expr><name>rb_callbacks</name></expr></argument>, <argument><expr><name>id_auth_baton</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>auth_baton</name> = <call><name>r2c_swig_type</name><argument_list>(<argument><expr><name>rb_auth_baton</name></expr></argument>,
<argument><expr>(<name>void</name> *)"svn_auth_baton_t *"</expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>*<name>callbacks</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>**<name>callbacks</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>baton</name> = (<name>void</name> *)<name>rb_callbacks</name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>callbacks</name>)-&gt;<name>open_tmp_file</name></name> = <name>ra_callbacks_open_tmp_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>callbacks</name>)-&gt;<name>auth_baton</name></name> = <name>auth_baton</name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>callbacks</name>)-&gt;<name>get_wc_prop</name></name> = <name>ra_callbacks_get_wc_prop</name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>callbacks</name>)-&gt;<name>set_wc_prop</name></name> = <name>ra_callbacks_set_wc_prop</name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>callbacks</name>)-&gt;<name>push_wc_prop</name></name> = <name>ra_callbacks_push_wc_prop</name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>callbacks</name>)-&gt;<name>invalidate_wc_props</name></name> = <name>ra_callbacks_invalidate_wc_props</name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>callbacks</name>)-&gt;<name>progress_func</name></name> = <name>ra_callbacks_progress_func</name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>callbacks</name>)-&gt;<name>progress_baton</name></name> = (<name>void</name> *)<name>rb_callbacks</name></expr>;</expr_stmt>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_swig_rb_ra_lock_callback</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>do_lock</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_lock_t</name> *</type><name>lock</name></decl></param>,
<param><decl><type><name>svn_error_t</name> *</type><name>ra_err</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>proc</name></decl>, <decl><type ref="prev"/><name>rb_pool</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_from_baton</name><argument_list>(<argument><expr>(<name>VALUE</name>)<name>baton</name></expr></argument>, <argument><expr>&amp;<name>proc</name></expr></argument>, <argument><expr>&amp;<name>rb_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>proc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_call</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>4</expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>do_lock</name> ? <name>Qtrue</name> : <name>Qfalse</name></expr></argument>,
<argument><expr><call><name>c2r_lock__dup</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>ra_err</name> ?
<call><name>svn_swig_rb_svn_error_to_rb_error</name><argument_list>(<argument><expr><name>ra_err</name></expr></argument>)</argument_list></call> :
<name>Qnil</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rb_pool</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_swig_rb_just_call</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>proc</name></decl>, <decl><type ref="prev"/><name>rb_pool</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_from_baton</name><argument_list>(<argument><expr>(<name>VALUE</name>)<name>baton</name></expr></argument>, <argument><expr>&amp;<name>proc</name></expr></argument>, <argument><expr>&amp;<name>rb_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>proc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_call</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rb_pool</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_swig_rb_ra_file_rev_handler</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>rev_props</name></decl></param>,
<param><decl><type><name>svn_txdelta_window_handler_t</name> *</type><name>delta_handler</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>delta_baton</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>prop_diffs</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>proc</name></decl>, <decl><type ref="prev"/><name>rb_pool</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_from_baton</name><argument_list>(<argument><expr>(<name>VALUE</name>)<name>baton</name></expr></argument>, <argument><expr>&amp;<name>proc</name></expr></argument>, <argument><expr>&amp;<name>rb_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>proc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_call</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>4</expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>c2r_long</name><argument_list>(<argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_swig_rb_apr_hash_to_hash_svn_string</name><argument_list>(<argument><expr><name>rev_props</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_swig_rb_prop_apr_array_to_hash_prop</name><argument_list>(<argument><expr><name>prop_diffs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rb_pool</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_swig_rb_repos_history_func</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>proc</name></decl>, <decl><type ref="prev"/><name>rb_pool</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_from_baton</name><argument_list>(<argument><expr>(<name>VALUE</name>)<name>baton</name></expr></argument>, <argument><expr>&amp;<name>proc</name></expr></argument>, <argument><expr>&amp;<name>rb_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>proc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_call</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>2</expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>c2r_long</name><argument_list>(<argument><expr>&amp;<name>revision</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rb_pool</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>err</name> &amp;&amp; <call><name>SVN_ERR_P</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>r2c_svn_err</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_swig_rb_repos_file_rev_handler</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>rev_props</name></decl></param>,
<param><decl><type><name>svn_txdelta_window_handler_t</name> *</type><name>delta_handler</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>delta_baton</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>prop_diffs</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>proc</name></decl>, <decl><type ref="prev"/><name>rb_pool</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_from_baton</name><argument_list>(<argument><expr>(<name>VALUE</name>)<name>baton</name></expr></argument>, <argument><expr>&amp;<name>proc</name></expr></argument>, <argument><expr>&amp;<name>rb_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>proc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_call</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>4</expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>c2r_long</name><argument_list>(<argument><expr>&amp;<name>rev</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_swig_rb_apr_hash_to_hash_svn_string</name><argument_list>(<argument><expr><name>rev_props</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_swig_rb_prop_apr_array_to_hash_prop</name><argument_list>(<argument><expr><name>prop_diffs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rb_pool</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_swig_rb_wc_relocation_validator3</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>uuid</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>root_url</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>proc</name></decl>, <decl><type ref="prev"/><name>rb_pool</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_from_baton</name><argument_list>(<argument><expr>(<name>VALUE</name>)<name>baton</name></expr></argument>, <argument><expr>&amp;<name>proc</name></expr></argument>, <argument><expr>&amp;<name>rb_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>proc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_call</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>3</expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>uuid</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>root_url</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rb_pool</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_swig_rb_auth_simple_prompt_func</name><parameter_list>(<param><decl><type><name>svn_auth_cred_simple_t</name> **</type><name>cred</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>username</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>may_save</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_auth_cred_simple_t</name> *</type><name>new_cred</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>proc</name></decl>, <decl><type ref="prev"/><name>rb_pool</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_from_baton</name><argument_list>(<argument><expr>(<name>VALUE</name>)<name>baton</name></expr></argument>, <argument><expr>&amp;<name>proc</name></expr></argument>, <argument><expr>&amp;<name>rb_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>proc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_call</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>3</expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>realm</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>RTEST</name><argument_list>(<argument><expr><name>may_save</name></expr></argument>)</argument_list></call> ? <name>Qtrue</name> : <name>Qfalse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rb_pool</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>result_cred</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_auth_cred_simple_t</name> *</type><name>tmp_cred</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r2c_swig_type2</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"svn_auth_cred_simple_t *"</expr></argument>, <argument><expr>&amp;<name>result_cred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_cred</name> = (<name>svn_auth_cred_simple_t</name> *)<name>result_cred</name></expr>;</expr_stmt>
<expr_stmt><expr><name>new_cred</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>new_cred</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_cred</name>-&gt;<name>username</name></name> = <name><name>tmp_cred</name>-&gt;<name>username</name></name> ?
<call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>tmp_cred</name>-&gt;<name>username</name></name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_cred</name>-&gt;<name>password</name></name> = <name><name>tmp_cred</name>-&gt;<name>password</name></name> ?
<call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>tmp_cred</name>-&gt;<name>password</name></name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_cred</name>-&gt;<name>may_save</name></name> = <name><name>tmp_cred</name>-&gt;<name>may_save</name></name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr>*<name>cred</name> = <name>new_cred</name></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_swig_rb_auth_username_prompt_func</name><parameter_list>(<param><decl><type><name>svn_auth_cred_username_t</name> **</type><name>cred</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>may_save</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_auth_cred_username_t</name> *</type><name>new_cred</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>proc</name></decl>, <decl><type ref="prev"/><name>rb_pool</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_from_baton</name><argument_list>(<argument><expr>(<name>VALUE</name>)<name>baton</name></expr></argument>, <argument><expr>&amp;<name>proc</name></expr></argument>, <argument><expr>&amp;<name>rb_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>proc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_call</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>2</expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>realm</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>RTEST</name><argument_list>(<argument><expr><name>may_save</name></expr></argument>)</argument_list></call> ? <name>Qtrue</name> : <name>Qfalse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rb_pool</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>result_cred</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_auth_cred_username_t</name> *</type><name>tmp_cred</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r2c_swig_type2</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"svn_auth_cred_username_t *"</expr></argument>, <argument><expr>&amp;<name>result_cred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_cred</name> = (<name>svn_auth_cred_username_t</name> *)<name>result_cred</name></expr>;</expr_stmt>
<expr_stmt><expr><name>new_cred</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>new_cred</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_cred</name>-&gt;<name>username</name></name> = <name><name>tmp_cred</name>-&gt;<name>username</name></name> ?
<call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>tmp_cred</name>-&gt;<name>username</name></name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_cred</name>-&gt;<name>may_save</name></name> = <name><name>tmp_cred</name>-&gt;<name>may_save</name></name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr>*<name>cred</name> = <name>new_cred</name></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_swig_rb_auth_ssl_server_trust_prompt_func</name><parameter_list>(
<param><decl><type><name>svn_auth_cred_ssl_server_trust_t</name> **</type><name>cred</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name></decl></param>,
<param><decl><type><name>apr_uint32_t</name></type> <name>failures</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_auth_ssl_server_cert_info_t</name> *</type><name>cert_info</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>may_save</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_auth_cred_ssl_server_trust_t</name> *</type><name>new_cred</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>proc</name></decl>, <decl><type ref="prev"/><name>rb_pool</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_from_baton</name><argument_list>(<argument><expr>(<name>VALUE</name>)<name>baton</name></expr></argument>, <argument><expr>&amp;<name>proc</name></expr></argument>, <argument><expr>&amp;<name>rb_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>proc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_call</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>4</expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>realm</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>UINT2NUM</name><argument_list>(<argument><expr><name>failures</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>c2r_auth_ssl_server_cert_info__dup</name><argument_list>(<argument><expr><name>cert_info</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>RTEST</name><argument_list>(<argument><expr><name>may_save</name></expr></argument>)</argument_list></call> ? <name>Qtrue</name> : <name>Qfalse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rb_pool</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>result_cred</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_auth_cred_ssl_server_trust_t</name> *</type><name>tmp_cred</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r2c_swig_type2</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"svn_auth_cred_ssl_server_trust_t *"</expr></argument>,
<argument><expr>&amp;<name>result_cred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_cred</name> = (<name>svn_auth_cred_ssl_server_trust_t</name> *)<name>result_cred</name></expr>;</expr_stmt>
<expr_stmt><expr><name>new_cred</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>new_cred</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>new_cred</name> = *<name>tmp_cred</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr>*<name>cred</name> = <name>new_cred</name></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_swig_rb_auth_ssl_client_cert_prompt_func</name><parameter_list>(
<param><decl><type><name>svn_auth_cred_ssl_client_cert_t</name> **</type><name>cred</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>may_save</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_auth_cred_ssl_client_cert_t</name> *</type><name>new_cred</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>proc</name></decl>, <decl><type ref="prev"/><name>rb_pool</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_from_baton</name><argument_list>(<argument><expr>(<name>VALUE</name>)<name>baton</name></expr></argument>, <argument><expr>&amp;<name>proc</name></expr></argument>, <argument><expr>&amp;<name>rb_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>proc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_call</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>2</expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>realm</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>RTEST</name><argument_list>(<argument><expr><name>may_save</name></expr></argument>)</argument_list></call> ? <name>Qtrue</name> : <name>Qfalse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rb_pool</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>result_cred</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_auth_cred_ssl_client_cert_t</name> *</type><name>tmp_cred</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r2c_swig_type2</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"svn_auth_cred_ssl_client_cert_t *"</expr></argument>,
<argument><expr>&amp;<name>result_cred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_cred</name> = (<name>svn_auth_cred_ssl_client_cert_t</name> *)<name>result_cred</name></expr>;</expr_stmt>
<expr_stmt><expr><name>new_cred</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>new_cred</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_cred</name>-&gt;<name>cert_file</name></name> = <name><name>tmp_cred</name>-&gt;<name>cert_file</name></name> ?
<call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>tmp_cred</name>-&gt;<name>cert_file</name></name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_cred</name>-&gt;<name>may_save</name></name> = <name><name>tmp_cred</name>-&gt;<name>may_save</name></name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr>*<name>cred</name> = <name>new_cred</name></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_swig_rb_auth_ssl_client_cert_pw_prompt_func</name><parameter_list>(
<param><decl><type><name>svn_auth_cred_ssl_client_cert_pw_t</name> **</type><name>cred</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>may_save</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_auth_cred_ssl_client_cert_pw_t</name> *</type><name>new_cred</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>proc</name></decl>, <decl><type ref="prev"/><name>rb_pool</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_from_baton</name><argument_list>(<argument><expr>(<name>VALUE</name>)<name>baton</name></expr></argument>, <argument><expr>&amp;<name>proc</name></expr></argument>, <argument><expr>&amp;<name>rb_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>proc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_call</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>2</expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>realm</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>RTEST</name><argument_list>(<argument><expr><name>may_save</name></expr></argument>)</argument_list></call> ? <name>Qtrue</name> : <name>Qfalse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rb_pool</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>result_cred</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_auth_cred_ssl_client_cert_pw_t</name> *</type><name>tmp_cred</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r2c_swig_type2</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>"svn_auth_cred_ssl_client_cert_pw_t *"</expr></argument>,
<argument><expr>&amp;<name>result_cred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_cred</name> = (<name>svn_auth_cred_ssl_client_cert_pw_t</name> *)<name>result_cred</name></expr>;</expr_stmt>
<expr_stmt><expr><name>new_cred</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>new_cred</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_cred</name>-&gt;<name>password</name></name> = <name><name>tmp_cred</name>-&gt;<name>password</name></name> ?
<call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>tmp_cred</name>-&gt;<name>password</name></name></expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_cred</name>-&gt;<name>may_save</name></name> = <name><name>tmp_cred</name>-&gt;<name>may_save</name></name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr>*<name>cred</name> = <name>new_cred</name></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>apr_file_t</name> *</type>
<name>svn_swig_rb_make_file</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>file</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>apr_file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name>apr_file</name></expr></argument>, <argument><expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>APR_CREATE</name> | <name>APR_READ</name> | <name>APR_WRITE</name></expr></argument>,
<argument><expr><name>APR_OS_DEFAULT</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>apr_file</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>read_handler_rbio</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>char</name> *</type><name>buffer</name></decl></param>, <param><decl><type><name>apr_size_t</name> *</type><name>len</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>io</name> <init>= <expr>(<name>VALUE</name>)<name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>result</name> = <call><name>rb_funcall</name><argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>id_read</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr>*<name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>len</name> = 0</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>RSTRING</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call>-&gt;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>len</name> = <call><name>RSTRING</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call>-&gt;<name>len</name></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>write_handler_rbio</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>apr_size_t</name> *</type><name>len</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>io</name> <init>= <expr>(<name>VALUE</name>)<name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>id_write</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><call><name>rb_str_new</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr>*<name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>svn_stream_t</name> *</type>
<name>svn_swig_rb_make_stream</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>io</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>stream</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><call><name>rb_svn_core_stream</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>id_eqq</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>io</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_stream_t</name> **</type><name>stream_p</name></decl>;</decl_stmt>
<expr_stmt><expr><name>stream_p</name> = &amp;<name>stream</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r2c_swig_type2</name><argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr>"svn_stream_t *"</expr></argument>, <argument><expr>(<name>void</name> **)<name>stream_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>rb_pool</name> <init>= <expr><call><name>rb_pool_new</name><argument_list>(<argument><expr><name>Qnil</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_wrapper_t</name> *</type><name>pool_wrapper</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_wrapper_t</name> **</type><name>pool_wrapper_p</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>rb_set_pool</name><argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>rb_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pool_wrapper_p</name> = &amp;<name>pool_wrapper</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r2c_swig_type2</name><argument_list>(<argument><expr><name>rb_pool</name></expr></argument>, <argument><expr>"apr_pool_wrapper_t *"</expr></argument>, <argument><expr>(<name>void</name> **)<name>pool_wrapper_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stream</name> = <call><name>svn_stream_create</name><argument_list>(<argument><expr>(<name>void</name> *)<name>io</name></expr></argument>, <argument><expr><name><name>pool_wrapper</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stream_set_read</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>read_handler_rbio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stream_set_write</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>write_handler_rbio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>stream</name></expr>;</return>
}</block></function>
<function><type><name>VALUE</name></type>
<name>svn_swig_rb_filename_to_temp_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file_name</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>rb_funcall</name><argument_list>(<argument><expr><call><name>rb_svn_util</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>id_filename_to_temp_file</name></expr></argument>,
<argument><expr>1</expr></argument>, <argument><expr><call><name>rb_str_new2</name><argument_list>(<argument><expr><name>file_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>svn_swig_rb_set_revision</name><parameter_list>(<param><decl><type><name>svn_opt_revision_t</name> *</type><name>rev</name></decl></param>, <param><decl><type><name>VALUE</name></type> <name>value</name></decl></param>)</parameter_list> <block>{
<switch>switch <condition>(<expr><call><name>TYPE</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr><name>T_NIL</name></expr>:
<expr_stmt><expr><name><name>rev</name>-&gt;<name>kind</name></name> = <name>svn_opt_revision_unspecified</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>T_FIXNUM</name></expr>:
<expr_stmt><expr><name><name>rev</name>-&gt;<name>kind</name></name> = <name>svn_opt_revision_number</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rev</name>-&gt;<name>value</name>.<name>number</name></name> = <call><name>NUM2LONG</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>T_STRING</name></expr>:
<if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_reg_match</name><argument_list>(<argument><expr><call><name>rb_reg_new</name><argument_list>(<argument><expr>"^BASE$"</expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr>"^BASE$"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>RE_OPTION_IGNORECASE</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>rev</name>-&gt;<name>kind</name></name> = <name>svn_opt_revision_base</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_reg_match</name><argument_list>(<argument><expr><call><name>rb_reg_new</name><argument_list>(<argument><expr>"^HEAD$"</expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr>"^HEAD$"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>RE_OPTION_IGNORECASE</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>rev</name>-&gt;<name>kind</name></name> = <name>svn_opt_revision_head</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_reg_match</name><argument_list>(<argument><expr><call><name>rb_reg_new</name><argument_list>(<argument><expr>"^WORKING$"</expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr>"^WORKING$"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>RE_OPTION_IGNORECASE</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>rev</name>-&gt;<name>kind</name></name> = <name>svn_opt_revision_working</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_reg_match</name><argument_list>(<argument><expr><call><name>rb_reg_new</name><argument_list>(<argument><expr>"^COMMITTED$"</expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr>"^COMMITTED$"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>RE_OPTION_IGNORECASE</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>rev</name>-&gt;<name>kind</name></name> = <name>svn_opt_revision_committed</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>RTEST</name><argument_list>(<argument><expr><call><name>rb_reg_match</name><argument_list>(<argument><expr><call><name>rb_reg_new</name><argument_list>(<argument><expr>"^PREV$"</expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr>"^PREV$"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>RE_OPTION_IGNORECASE</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>rev</name>-&gt;<name>kind</name></name> = <name>svn_opt_revision_previous</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>,
<argument><expr>"invalid value: %s"</expr></argument>,
<argument><expr><call><name>StringValuePtr</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if></else></if></else></if></else></if>
<break>break;</break>
</case><default>default:
<if>if <condition>(<expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>value</name></expr></argument>,
<argument><expr><call><name>rb_const_get</name><argument_list>(<argument><expr><name>rb_cObject</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr>"Time"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>rev</name>-&gt;<name>kind</name></name> = <name>svn_opt_revision_date</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rev</name>-&gt;<name>value</name>.<name>date</name></name> = <call><name>NUM2LONG</name><argument_list>(<argument><expr><call><name>rb_funcall</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>rb_intern</name><argument_list>(<argument><expr>"to_i"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>rb_raise</name><argument_list>(<argument><expr><name>rb_eArgError</name></expr></argument>,
<argument><expr>"invalid type: %s"</expr></argument>,
<argument><expr><call><name>rb_class2name</name><argument_list>(<argument><expr><call><name>CLASS_OF</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<break>break;</break>
</default>}</block></switch>
}</block></function>
<function><type><name>void</name></type>
<name>svn_swig_rb_adjust_arg_for_client_ctx_and_pool</name><parameter_list>(<param><decl><type><name>int</name> *</type><name>argc</name></decl></param>, <param><decl><type><name>VALUE</name> **</type><name>argv</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>*<name>argc</name> &gt; 1</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>last_arg</name> <init>= <expr>(*<name>argv</name>)<index>[<expr>*<name>argc</name> - 1</expr>]</index></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>NIL_P</name><argument_list>(<argument><expr><name>last_arg</name></expr></argument>)</argument_list></call> || <call><name>POOL_P</name><argument_list>(<argument><expr><name>last_arg</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>argv</name> += *<name>argc</name> - 2</expr>;</expr_stmt>
<expr_stmt><expr>*<name>argc</name> = 2</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><call><name>CONTEXT_P</name><argument_list>(<argument><expr><name>last_arg</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>argv</name> += *<name>argc</name> - 1</expr>;</expr_stmt>
<expr_stmt><expr>*<name>argc</name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>argv</name> += *<name>argc</name> - 2</expr>;</expr_stmt>
<expr_stmt><expr>*<name>argc</name> = 2</expr>;</expr_stmt>
}</block></else></if>
}</block></else></if>
}</block></then></if>
}</block></function>
<function><type><name>void</name></type>
<name>svn_swig_rb_wc_status_func</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_wc_status2_t</name> *</type><name>status</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>proc</name></decl>, <decl><type ref="prev"/><name>rb_pool</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_from_baton</name><argument_list>(<argument><expr>(<name>VALUE</name>)<name>baton</name></expr></argument>, <argument><expr>&amp;<name>proc</name></expr></argument>, <argument><expr>&amp;<name>rb_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>proc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_call</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>c2r_wc_status2__dup</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>invoke_callback</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rb_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_swig_rb_client_blame_receiver_func</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_int64_t</name></type> <name>line_no</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>author</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>date</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>line</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>proc</name></decl>, <decl><type ref="prev"/><name>rb_pool</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_from_baton</name><argument_list>(<argument><expr>(<name>VALUE</name>)<name>baton</name></expr></argument>, <argument><expr>&amp;<name>proc</name></expr></argument>, <argument><expr>&amp;<name>rb_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>proc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_call</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>5</expr></argument>,
<argument><expr><call><name>AI642NUM</name><argument_list>(<argument><expr><name>line_no</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>revision</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>author</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>c2r_svn_date_string2</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rb_pool</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>wc_entry_callbacks2_found_entry</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_wc_entry_t</name> *</type><name>entry</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>walk_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>callbacks</name></decl>, <decl><type ref="prev"/><name>rb_pool</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_from_baton</name><argument_list>(<argument><expr>(<name>VALUE</name>)<name>walk_baton</name></expr></argument>, <argument><expr>&amp;<name>callbacks</name></expr></argument>, <argument><expr>&amp;<name>rb_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><empty_stmt>;</empty_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>callbacks</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>callbacks</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_found_entry</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>2</expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>c2r_wc_entry__dup</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rb_pool</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>wc_entry_callbacks2_handle_error</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_error_t</name> *</type><name>err</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>walk_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>callbacks</name></decl>, <decl><type ref="prev"/><name>rb_pool</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_from_baton</name><argument_list>(<argument><expr>(<name>VALUE</name>)<name>walk_baton</name></expr></argument>, <argument><expr>&amp;<name>callbacks</name></expr></argument>, <argument><expr>&amp;<name>rb_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><empty_stmt>;</empty_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>callbacks</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ID</name></type> <name>message</name></decl>;</decl_stmt>
<expr_stmt><expr><name>message</name> = <name>id_handle_error</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>rb_obj_respond_to</name><argument_list>(<argument><expr><name>callbacks</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>rb_err</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>callbacks</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_handle_error</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rb_err</name> = <name>err</name> ? <call><name>svn_swig_rb_svn_error_to_rb_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call> : <name>Qnil</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>err</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rb_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rb_pool</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>svn_wc_entry_callbacks2_t</name> *</type>
<name>svn_swig_rb_wc_entry_callbacks2</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_wc_entry_callbacks2_t</name></type> <name>wc_entry_callbacks</name> <init>= <expr><block>{
<expr><name>wc_entry_callbacks2_found_entry</name></expr>,
<expr><name>wc_entry_callbacks2_handle_error</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<return>return <expr>&amp;<name>wc_entry_callbacks</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>wc_diff_callbacks_file_changed</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>contentstate</name></decl></param>,
<param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>propstate</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmpfile1</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmpfile2</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>rev1</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>rev2</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype1</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype2</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>propchanges</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>originalprops</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>diff_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>callbacks</name></decl>, <decl><type ref="prev"/><name>rb_pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_from_baton</name><argument_list>(<argument><expr>(<name>VALUE</name>)<name>diff_baton</name></expr></argument>, <argument><expr>&amp;<name>callbacks</name></expr></argument>, <argument><expr>&amp;<name>rb_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>callbacks</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>callbacks</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_file_changed</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>10</expr></argument>,
<argument><expr><call><name>c2r_swig_type</name><argument_list>(<argument><expr>(<name>void</name> *)<name>adm_access</name></expr></argument>,
<argument><expr>(<name>void</name> *)"svn_wc_adm_access_t *"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>tmpfile1</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>tmpfile2</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>rev1</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>rev2</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>mimetype1</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>mimetype2</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_swig_rb_prop_apr_array_to_hash_prop</name><argument_list>(<argument><expr><name>propchanges</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_swig_rb_prop_hash_to_hash</name><argument_list>(<argument><expr><name>originalprops</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>contentstate</name></expr>)</condition><then>
<expr_stmt><expr>*<name>contentstate</name> = <call><name>NUM2INT</name><argument_list>(<argument><expr><call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>propstate</name></expr>)</condition><then>
<expr_stmt><expr>*<name>propstate</name> = <call><name>NUM2INT</name><argument_list>(<argument><expr><call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>wc_diff_callbacks_file_added</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>contentstate</name></decl></param>,
<param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>propstate</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmpfile1</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmpfile2</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>rev1</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>rev2</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype1</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype2</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>propchanges</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>originalprops</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>diff_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>callbacks</name></decl>, <decl><type ref="prev"/><name>rb_pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_from_baton</name><argument_list>(<argument><expr>(<name>VALUE</name>)<name>diff_baton</name></expr></argument>, <argument><expr>&amp;<name>callbacks</name></expr></argument>, <argument><expr>&amp;<name>rb_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>callbacks</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>callbacks</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_file_added</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>10</expr></argument>,
<argument><expr><call><name>c2r_swig_type</name><argument_list>(<argument><expr>(<name>void</name> *)<name>adm_access</name></expr></argument>,
<argument><expr>(<name>void</name> *)"svn_wc_adm_access_t *"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>tmpfile1</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>tmpfile2</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>rev1</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>rev2</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>mimetype1</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>mimetype2</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_swig_rb_prop_apr_array_to_hash_prop</name><argument_list>(<argument><expr><name>propchanges</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_swig_rb_prop_hash_to_hash</name><argument_list>(<argument><expr><name>originalprops</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>contentstate</name></expr>)</condition><then>
<expr_stmt><expr>*<name>contentstate</name> = <call><name>NUM2INT</name><argument_list>(<argument><expr><call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>propstate</name></expr>)</condition><then>
<expr_stmt><expr>*<name>propstate</name> = <call><name>NUM2INT</name><argument_list>(<argument><expr><call><name>rb_ary_entry</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>wc_diff_callbacks_file_deleted</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>state</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmpfile1</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmpfile2</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype1</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype2</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>originalprops</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>diff_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>callbacks</name></decl>, <decl><type ref="prev"/><name>rb_pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_from_baton</name><argument_list>(<argument><expr>(<name>VALUE</name>)<name>diff_baton</name></expr></argument>, <argument><expr>&amp;<name>callbacks</name></expr></argument>, <argument><expr>&amp;<name>rb_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>callbacks</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>callbacks</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_file_deleted</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>7</expr></argument>,
<argument><expr><call><name>c2r_swig_type</name><argument_list>(<argument><expr>(<name>void</name> *)<name>adm_access</name></expr></argument>,
<argument><expr>(<name>void</name> *)"svn_wc_adm_access_t *"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>tmpfile1</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>tmpfile2</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>mimetype1</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>mimetype2</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_swig_rb_prop_hash_to_hash</name><argument_list>(<argument><expr><name>originalprops</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>state</name></expr>)</condition><then>
<expr_stmt><expr>*<name>state</name> = <call><name>NUM2INT</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>wc_diff_callbacks_dir_added</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>state</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>diff_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>callbacks</name></decl>, <decl><type ref="prev"/><name>rb_pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_from_baton</name><argument_list>(<argument><expr>(<name>VALUE</name>)<name>diff_baton</name></expr></argument>, <argument><expr>&amp;<name>callbacks</name></expr></argument>, <argument><expr>&amp;<name>rb_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>callbacks</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>callbacks</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_dir_added</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>3</expr></argument>,
<argument><expr><call><name>c2r_swig_type</name><argument_list>(<argument><expr>(<name>void</name> *)<name>adm_access</name></expr></argument>,
<argument><expr>(<name>void</name> *)"svn_wc_adm_access_t *"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>state</name></expr>)</condition><then>
<expr_stmt><expr>*<name>state</name> = <call><name>NUM2INT</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>wc_diff_callbacks_dir_deleted</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>state</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>diff_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>callbacks</name></decl>, <decl><type ref="prev"/><name>rb_pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_from_baton</name><argument_list>(<argument><expr>(<name>VALUE</name>)<name>diff_baton</name></expr></argument>, <argument><expr>&amp;<name>callbacks</name></expr></argument>, <argument><expr>&amp;<name>rb_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>callbacks</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>callbacks</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_dir_deleted</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>2</expr></argument>,
<argument><expr><call><name>c2r_swig_type</name><argument_list>(<argument><expr>(<name>void</name> *)<name>adm_access</name></expr></argument>,
<argument><expr>(<name>void</name> *)"svn_wc_adm_access_t *"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>state</name></expr>)</condition><then>
<expr_stmt><expr>*<name>state</name> = <call><name>NUM2INT</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>wc_diff_callbacks_dir_props_changed</name><parameter_list>(<param><decl><type><name>svn_wc_adm_access_t</name> *</type><name>adm_access</name></decl></param>,
<param><decl><type><name>svn_wc_notify_state_t</name> *</type><name>state</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>propchanges</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>originalprops</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>diff_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>callbacks</name></decl>, <decl><type ref="prev"/><name>rb_pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_from_baton</name><argument_list>(<argument><expr>(<name>VALUE</name>)<name>diff_baton</name></expr></argument>, <argument><expr>&amp;<name>callbacks</name></expr></argument>, <argument><expr>&amp;<name>rb_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>callbacks</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>result</name> <init>= <expr><name>Qnil</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>callbacks</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_dir_props_changed</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>4</expr></argument>,
<argument><expr><call><name>c2r_swig_type</name><argument_list>(<argument><expr>(<name>void</name> *)<name>adm_access</name></expr></argument>,
<argument><expr>(<name>void</name> *)"svn_wc_adm_access_t *"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_swig_rb_prop_apr_array_to_hash_prop</name><argument_list>(<argument><expr><name>propchanges</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_swig_rb_prop_hash_to_hash</name><argument_list>(<argument><expr><name>originalprops</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Qnil</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>state</name></expr>)</condition><then>
<expr_stmt><expr>*<name>state</name> = <call><name>NUM2INT</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>svn_wc_diff_callbacks2_t</name> *</type>
<name>svn_swig_rb_wc_diff_callbacks2</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_wc_diff_callbacks2_t</name></type> <name>wc_diff_callbacks2</name> <init>= <expr><block>{
<expr><name>wc_diff_callbacks_file_changed</name></expr>,
<expr><name>wc_diff_callbacks_file_added</name></expr>,
<expr><name>wc_diff_callbacks_file_deleted</name></expr>,
<expr><name>wc_diff_callbacks_dir_added</name></expr>,
<expr><name>wc_diff_callbacks_dir_deleted</name></expr>,
<expr><name>wc_diff_callbacks_dir_props_changed</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<return>return <expr>&amp;<name>wc_diff_callbacks2</name></expr>;</return>
}</block></function>
<function><type><name>VALUE</name></type>
<name>svn_swig_rb_make_txdelta_window_handler_wrapper</name><parameter_list>(<param><decl><type><name>VALUE</name> *</type><name>rb_handler_pool</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> **</type><name>handler_pool</name></decl></param>,
<param><decl><type><name>svn_txdelta_window_handler_t</name> **</type><name>handler</name></decl></param>,
<param><decl><type><name>void</name> ***</type><name>handler_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>obj</name></decl>;</decl_stmt>
<expr_stmt><expr><name>obj</name> = <call><name>rb_class_new_instance</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>rb_cObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_get_pool</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>rb_handler_pool</name></expr></argument>, <argument><expr><name>handler_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_set_pool_for_no_swig_type</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr>*<name>rb_handler_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>handler</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr>*<name>handler_pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_txdelta_window_handler_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>handler_baton</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr>*<name>handler_pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>obj</name></expr>;</return>
}</block></function>
<function><type><name>VALUE</name></type>
<name>svn_swig_rb_setup_txdelta_window_handler_wrapper</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>obj</name></decl></param>,
<param><decl><type><name>svn_txdelta_window_handler_t</name></type> <name>handler</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>handler_baton</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_handler</name></expr></argument>,
<argument><expr><call><name>c2r_swig_type</name><argument_list>(<argument><expr>(<name>void</name> *)<name>handler</name></expr></argument>,
<argument><expr>(<name>void</name> *)"svn_txdelta_window_handler_t"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ivar_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_handler_baton</name></expr></argument>,
<argument><expr><call><name>c2r_swig_type</name><argument_list>(<argument><expr><name>handler_baton</name></expr></argument>, <argument><expr>(<name>void</name> *)"void *"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>obj</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_swig_rb_invoke_txdelta_window_handler_wrapper</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>obj</name></decl></param>,
<param><decl><type><name>svn_txdelta_window_t</name> *</type><name>window</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_txdelta_window_handler_t</name></type> <name>handler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_txdelta_window_handler_t</name> *</type><name>handler_p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>handler_baton</name></decl>;</decl_stmt>
<expr_stmt><expr><name>handler_p</name> = &amp;<name>handler</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r2c_swig_type2</name><argument_list>(<argument><expr><call><name>rb_ivar_get</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_handler</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"svn_txdelta_window_handler_t"</expr></argument>, <argument><expr>(<name>void</name> **)<name>handler_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r2c_swig_type2</name><argument_list>(<argument><expr><call><name>rb_ivar_get</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>id_handler_baton</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"void *"</expr></argument>, <argument><expr>&amp;<name>handler_baton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>handler</name><argument_list>(<argument><expr><name>window</name></expr></argument>, <argument><expr><name>handler_baton</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>VALUE</name></type>
<name>svn_swig_rb_txdelta_window_t_ops_get</name><parameter_list>(<param><decl><type><name>svn_txdelta_window_t</name> *</type><name>window</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>ops</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_txdelta_op_t</name> *</type><name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ops</name> = <call><name>rb_ary_new2</name><argument_list>(<argument><expr><name><name>window</name>-&gt;<name>num_ops</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>window</name>-&gt;<name>num_ops</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>op</name> = <name><name>window</name>-&gt;<name>ops</name></name> + <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>rb_ary_push</name><argument_list>(<argument><expr><name>ops</name></expr></argument>, <argument><expr><call><name>c2r_swig_type</name><argument_list>(<argument><expr>(<name>void</name> *)<name>op</name></expr></argument>, <argument><expr>(<name>void</name> *)"svn_txdelta_op_t *"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>ops</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_swig_rb_client_diff_summarize_func</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_client_diff_summarize_t</name> *</type><name>diff</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>proc</name></decl>, <decl><type ref="prev"/><name>rb_pool</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_from_baton</name><argument_list>(<argument><expr>(<name>VALUE</name>)<name>baton</name></expr></argument>, <argument><expr>&amp;<name>proc</name></expr></argument>, <argument><expr>&amp;<name>rb_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>proc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_call</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><call><name>c2r_client_diff_summarize__dup</name><argument_list>(<argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rb_pool</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_swig_rb_client_list_func</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_dirent_t</name> *</type><name>dirent</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_lock_t</name> *</type><name>lock</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>abs_path</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>proc</name></decl>, <decl><type ref="prev"/><name>rb_pool</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_from_baton</name><argument_list>(<argument><expr>(<name>VALUE</name>)<name>baton</name></expr></argument>, <argument><expr>&amp;<name>proc</name></expr></argument>, <argument><expr>&amp;<name>rb_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>proc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_call</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>4</expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>c2r_dirent__dup</name><argument_list>(<argument><expr><name>dirent</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>c2r_lock__dup</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>abs_path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rb_pool</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_swig_rb_proplist_receiver</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>prop_hash</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>proc</name></decl>, <decl><type ref="prev"/><name>rb_pool</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_from_baton</name><argument_list>(<argument><expr>(<name>VALUE</name>)<name>baton</name></expr></argument>, <argument><expr>&amp;<name>proc</name></expr></argument>, <argument><expr>&amp;<name>rb_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>proc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_call</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>2</expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>svn_swig_rb_prop_hash_to_hash</name><argument_list>(<argument><expr><name>prop_hash</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rb_pool</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>svn_swig_rb_changelist_receiver</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>changelist</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>proc</name></decl>, <decl><type ref="prev"/><name>rb_pool</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_from_baton</name><argument_list>(<argument><expr>(<name>VALUE</name>)<name>baton</name></expr></argument>, <argument><expr>&amp;<name>proc</name></expr></argument>, <argument><expr>&amp;<name>rb_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>proc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_call</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>2</expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>changelist</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rb_pool</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>c2r_ra_reporter3</name><parameter_list>(<param><decl><type><name>VALUE</name></type> <name>rb_reporter</name></decl></param>, <param><decl><type><name>svn_ra_reporter3_t</name> **</type><name>reporter</name></decl></param>, <param><decl><type><name>void</name> **</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>VALUE</name></type> <name>rb_baton</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>r2c_swig_type2</name><argument_list>(<argument><expr><name>rb_reporter</name></expr></argument>, <argument><expr>"svn_ra_reporter3_t *"</expr></argument>, <argument><expr>(<name>void</name> **)<name>reporter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rb_baton</name> = <call><name>rb_funcall</name><argument_list>(<argument><expr><name>rb_reporter</name></expr></argument>, <argument><expr><name>id_baton</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>r2c_swig_type2</name><argument_list>(<argument><expr><name>rb_baton</name></expr></argument>, <argument><expr>"void *"</expr></argument>, <argument><expr><name>baton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>svn_swig_rb_ra_reporter_set_path</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>report_baton</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>, <param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>start_empty</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lock_token</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>reporter</name></decl>, <decl><type ref="prev"/><name>rb_pool</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_from_baton</name><argument_list>(<argument><expr>(<name>VALUE</name>)<name>report_baton</name></expr></argument>, <argument><expr>&amp;<name>reporter</name></expr></argument>, <argument><expr>&amp;<name>rb_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>reporter</name></expr></argument>, <argument><expr><call><name>rb_svn_ra_reporter3</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_ra_reporter3_t</name> *</type><name>svn_reporter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>baton</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>c2r_ra_reporter3</name><argument_list>(<argument><expr><name>reporter</name></expr></argument>, <argument><expr>&amp;<name>svn_reporter</name></expr></argument>, <argument><expr>&amp;<name>baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name><name>svn_reporter</name>-&gt;<name>set_path</name></name><argument_list>(<argument><expr><name>baton</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>,
<argument><expr><name>start_empty</name></expr></argument>, <argument><expr><name>lock_token</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>reporter</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>reporter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_set_path</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>4</expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>revision</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>c2r_bool2</name><argument_list>(<argument><expr><name>start_empty</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rb_pool</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>svn_swig_rb_ra_reporter_delete_path</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>report_baton</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>reporter</name></decl>, <decl><type ref="prev"/><name>rb_pool</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_from_baton</name><argument_list>(<argument><expr>(<name>VALUE</name>)<name>report_baton</name></expr></argument>, <argument><expr>&amp;<name>reporter</name></expr></argument>, <argument><expr>&amp;<name>rb_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>reporter</name></expr></argument>, <argument><expr><call><name>rb_svn_ra_reporter3</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_ra_reporter3_t</name> *</type><name>svn_reporter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>baton</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>c2r_ra_reporter3</name><argument_list>(<argument><expr><name>reporter</name></expr></argument>, <argument><expr>&amp;<name>svn_reporter</name></expr></argument>, <argument><expr>&amp;<name>baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name><name>svn_reporter</name>-&gt;<name>delete_path</name></name><argument_list>(<argument><expr><name>baton</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>reporter</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>reporter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_delete_path</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>1</expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rb_pool</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>svn_swig_rb_ra_reporter_link_path</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>report_baton</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>, <param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
<param><decl><type><name>svn_depth_t</name></type> <name>depth</name></decl></param>, <param><decl><type><name>svn_boolean_t</name></type> <name>start_empty</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lock_token</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>reporter</name></decl>, <decl><type ref="prev"/><name>rb_pool</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_from_baton</name><argument_list>(<argument><expr>(<name>VALUE</name>)<name>report_baton</name></expr></argument>, <argument><expr>&amp;<name>reporter</name></expr></argument>, <argument><expr>&amp;<name>rb_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>reporter</name></expr></argument>, <argument><expr><call><name>rb_svn_ra_reporter3</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_ra_reporter3_t</name> *</type><name>svn_reporter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>baton</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>c2r_ra_reporter3</name><argument_list>(<argument><expr><name>reporter</name></expr></argument>, <argument><expr>&amp;<name>svn_reporter</name></expr></argument>, <argument><expr>&amp;<name>baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name><name>svn_reporter</name>-&gt;<name>link_path</name></name><argument_list>(<argument><expr><name>baton</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>,
<argument><expr><name>start_empty</name></expr></argument>, <argument><expr><name>lock_token</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>reporter</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>reporter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_link_path</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new3</name><argument_list>(<argument><expr>5</expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>c2r_string2</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>revision</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>INT2NUM</name><argument_list>(<argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>c2r_bool2</name><argument_list>(<argument><expr><name>start_empty</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rb_pool</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>svn_swig_rb_ra_reporter_finish_report</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>report_baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>reporter</name></decl>, <decl><type ref="prev"/><name>rb_pool</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_from_baton</name><argument_list>(<argument><expr>(<name>VALUE</name>)<name>report_baton</name></expr></argument>, <argument><expr>&amp;<name>reporter</name></expr></argument>, <argument><expr>&amp;<name>rb_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>reporter</name></expr></argument>, <argument><expr><call><name>rb_svn_ra_reporter3</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_ra_reporter3_t</name> *</type><name>svn_reporter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>baton</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>c2r_ra_reporter3</name><argument_list>(<argument><expr><name>reporter</name></expr></argument>, <argument><expr>&amp;<name>svn_reporter</name></expr></argument>, <argument><expr>&amp;<name>baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name><name>svn_reporter</name>-&gt;<name>finish_report</name></name><argument_list>(<argument><expr><name>baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>reporter</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>reporter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_finish_report</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rb_pool</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>svn_swig_rb_ra_reporter_abort_report</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>report_baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><name>SVN_NO_ERROR</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VALUE</name></type> <name>reporter</name></decl>, <decl><type ref="prev"/><name>rb_pool</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_swig_rb_from_baton</name><argument_list>(<argument><expr>(<name>VALUE</name>)<name>report_baton</name></expr></argument>, <argument><expr>&amp;<name>reporter</name></expr></argument>, <argument><expr>&amp;<name>rb_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>rb_obj_is_kind_of</name><argument_list>(<argument><expr><name>reporter</name></expr></argument>, <argument><expr><call><name>rb_svn_ra_reporter3</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_ra_reporter3_t</name> *</type><name>svn_reporter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>baton</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>c2r_ra_reporter3</name><argument_list>(<argument><expr><name>reporter</name></expr></argument>, <argument><expr>&amp;<name>svn_reporter</name></expr></argument>, <argument><expr>&amp;<name>baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name><name>svn_reporter</name>-&gt;<name>abort_report</name></name><argument_list>(<argument><expr><name>baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>NIL_P</name><argument_list>(<argument><expr><name>reporter</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>callback_baton_t</name></type> <name>cbb</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>receiver</name></name> = <name>reporter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>message</name></name> = <name>id_abort_report</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cbb</name>.<name>args</name></name> = <call><name>rb_ary_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>invoke_callback_handle_error</name><argument_list>(<argument><expr><call>(<name>VALUE</name>)<argument_list>(<argument><expr>&amp;<name>cbb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rb_pool</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_ra_reporter3_t</name></type> <name>rb_ra_reporter3</name> <init>= <expr><block>{
<expr><name>svn_swig_rb_ra_reporter_set_path</name></expr>,
<expr><name>svn_swig_rb_ra_reporter_delete_path</name></expr>,
<expr><name>svn_swig_rb_ra_reporter_link_path</name></expr>,
<expr><name>svn_swig_rb_ra_reporter_finish_report</name></expr>,
<expr><name>svn_swig_rb_ra_reporter_abort_report</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_ra_reporter3_t</name> *</type><name>svn_swig_rb_ra_reporter3</name> <init>= <expr>&amp;<name>rb_ra_reporter3</name></expr></init></decl>;</decl_stmt>
</unit>
