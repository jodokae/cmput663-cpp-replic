<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/mod_dav_svn/merge.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_buckets.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_xml.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_hash.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;httpd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util_filter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_props.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_xml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dav_svn.h"</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>send_response</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_svn_repos</name> *</type><name>repos</name></decl></param>,
<param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>is_dir</name></decl></param>,
<param><decl><type><name>ap_filter_t</name> *</type><name>output</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>href</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>vsn_url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev_to_use</name></decl>;</decl_stmt>
<expr_stmt><expr><name>href</name> = <call><name>dav_svn__build_uri</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>DAV_SVN__BUILD_URI_PUBLIC</name></expr></argument>,
<argument><expr><name>SVN_IGNORED_REVNUM</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr>0</expr></argument> , <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rev_to_use</name> = <call><name>dav_svn__get_safe_cr</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vsn_url</name> = <call><name>dav_svn__build_uri</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>DAV_SVN__BUILD_URI_VERSION</name></expr></argument>,
<argument><expr><name>rev_to_use</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr>0</expr></argument> , <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>ap_fputstrs</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>,
<argument><expr>"&lt;D:response&gt;" <name>DEBUG_CR</name>
"&lt;D:href&gt;"</expr></argument>,
<argument><expr><call><name>apr_xml_quote_string</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>href</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"&lt;/D:href&gt;" <name>DEBUG_CR</name>
"&lt;D:propstat&gt;&lt;D:prop&gt;" <name>DEBUG_CR</name></expr></argument>,
<argument><expr><name>is_dir</name>
? "&lt;D:resourcetype&gt;&lt;D:collection/&gt;&lt;/D:resourcetype&gt;"
: "&lt;D:resourcetype/&gt;"</expr></argument>,
<argument><expr><name>DEBUG_CR</name></expr></argument>,
<argument><expr>"&lt;D:checked-in&gt;&lt;D:href&gt;"</expr></argument>,
<argument><expr><call><name>apr_xml_quote_string</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>vsn_url</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"&lt;/D:href&gt;&lt;/D:checked-in&gt;" <name>DEBUG_CR</name>
"&lt;/D:prop&gt;" <name>DEBUG_CR</name>
"&lt;D:status&gt;HTTP/1.1 200 OK&lt;/D:status&gt;" <name>DEBUG_CR</name>
"&lt;/D:propstat&gt;" <name>DEBUG_CR</name>
"&lt;/D:response&gt;" <name>DEBUG_CR</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_wrap_apr</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr>"Can't write response to output"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>do_resources</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_svn_repos</name> *</type><name>repos</name></decl></param>,
<param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
<param><decl><type><name>ap_filter_t</name> *</type><name>output</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>changes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>sent</name> <init>= <expr><call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_paths_changed</name><argument_list>(<argument><expr>&amp;<name>changes</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>changes</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_path_change_t</name> *</type><name>change</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>send_self</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>send_parent</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> = <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name>change</name> = <name>val</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>change</name>-&gt;<name>change_kind</name></name></expr>)</condition> <block>{
<case>case <expr><name>svn_fs_path_change_delete</name></expr>:
<expr_stmt><expr><name>send_self</name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>send_parent</name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>svn_fs_path_change_add</name></expr>:
</case><case>case <expr><name>svn_fs_path_change_replace</name></expr>:
<expr_stmt><expr><name>send_self</name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>send_parent</name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>svn_fs_path_change_modify</name></expr>:
</case><default>default:
<expr_stmt><expr><name>send_self</name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>send_parent</name> = <name>FALSE</name></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
<if>if <condition>(<expr><name>send_self</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>! <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>sent</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_node_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_check_path</name><argument_list>(<argument><expr>&amp;<name>kind</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>send_response</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
<argument><expr><name>kind</name> == <name>svn_node_dir</name> ? <name>TRUE</name> : <name>FALSE</name></expr></argument>,
<argument><expr><name>output</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>sent</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr>(<name>void</name> *)1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>send_parent</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>parent</name> <init>= <expr><call><name>svn_path_dirname</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>! <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>sent</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>send_response</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>sent</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr>(<name>void</name> *)1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>dav_error</name> *</type>
<name>dav_svn__merge_response</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>output</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_svn_repos</name> *</type><name>repos</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>new_rev</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>post_commit_err</name></decl></param>,
<param><decl><type><name>apr_xml_elem</name> *</type><name>prop_elem</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>disable_merge_response</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>serr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>vcc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>creationdate</name></decl>, *<decl><type ref="prev"/><name>creator_displayname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>post_commit_err_elem</name> <init>= <expr><name>NULL</name></expr></init>,
*<name>post_commit_header_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>serr</name> = <call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name>new_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>serr</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><name>serr</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
<argument><expr>"Could not open the FS root for the "
"revision just committed."</expr></argument>,
<argument><expr><name><name>repos</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>bb</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>output</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vcc</name> = <call><name>dav_svn__build_uri</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>DAV_SVN__BUILD_URI_VCC</name></expr></argument>, <argument><expr><name>SVN_IGNORED_REVNUM</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument> , <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rev</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%ld"</expr></argument>, <argument><expr><name>new_rev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>post_commit_err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>post_commit_header_info</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr>" xmlns:S=\"%s\""</expr></argument>,
<argument><expr><name>SVN_XML_NAMESPACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>post_commit_err_elem</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr>"&lt;S:post-commit-err&gt;%s"
"&lt;/S:post-commit-err&gt;"</expr></argument>,
<argument><expr><name>post_commit_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>post_commit_header_info</name> = ""</expr> ;</expr_stmt>
<expr_stmt><expr><name>post_commit_err_elem</name> = ""</expr> ;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>serr</name> = <call><name>svn_fs_revision_prop</name><argument_list>(<argument><expr>&amp;<name>creationdate</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name>new_rev</name></expr></argument>,
<argument><expr><name>SVN_PROP_REVISION_DATE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>serr</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><name>serr</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
<argument><expr>"Could not get date of newest revision"</expr></argument>,
<argument><expr><name><name>repos</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>serr</name> = <call><name>svn_fs_revision_prop</name><argument_list>(<argument><expr>&amp;<name>creator_displayname</name></expr></argument>, <argument><expr><name><name>repos</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name>new_rev</name></expr></argument>,
<argument><expr><name>SVN_PROP_REVISION_AUTHOR</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>serr</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><name>serr</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
<argument><expr>"Could not get author of newest revision"</expr></argument>,
<argument><expr><name><name>repos</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr>(<name>void</name>) <macro><name>ap_fputstrs</name><argument_list>(<argument>output</argument>, <argument>bb</argument>,
<argument>DAV_XML_HEADER DEBUG_CR
"&lt;D:merge-response xmlns:D=\"DAV:\""</argument>,
<argument>post_commit_header_info</argument>,
<argument>"&gt;" DEBUG_CR
"&lt;D:updated-set&gt;" DEBUG_CR
"&lt;D:response&gt;" DEBUG_CR
"&lt;D:href&gt;"</argument>,
<argument>apr_xml_quote_string(pool, vcc, 1)</argument>,
<argument>"&lt;/D:href&gt;" DEBUG_CR
"&lt;D:propstat&gt;&lt;D:prop&gt;" DEBUG_CR
"&lt;D:resourcetype&gt;&lt;D:baseline/&gt;&lt;/D:resourcetype&gt;" DEBUG_CR</argument>,
<argument>post_commit_err_elem</argument>, <argument>DEBUG_CR
"&lt;D:version-name&gt;"</argument>, <argument>rev</argument>, <argument>"&lt;/D:version-name&gt;" DEBUG_CR</argument>,
<argument>NULL</argument>)</argument_list></macro></expr>;</expr_stmt>
<if>if <condition>(<expr><name>creationdate</name></expr>)</condition><then> <block>{
<expr_stmt><expr>(<name>void</name>) <call><name>ap_fputstrs</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>,
<argument><expr>"&lt;D:creationdate&gt;"</expr></argument>,
<argument><expr><call><name>apr_xml_quote_string</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>creationdate</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"&lt;/D:creationdate&gt;" <name>DEBUG_CR</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>creator_displayname</name></expr>)</condition><then> <block>{
<expr_stmt><expr>(<name>void</name>) <call><name>ap_fputstrs</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>,
<argument><expr>"&lt;D:creator-displayname&gt;"</expr></argument>,
<argument><expr><call><name>apr_xml_quote_string</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr><name><name>creator_displayname</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"&lt;/D:creator-displayname&gt;" <name>DEBUG_CR</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>(<name>void</name>) <call><name>ap_fputstrs</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>,
<argument><expr>"&lt;/D:prop&gt;" <name>DEBUG_CR</name>
"&lt;D:status&gt;HTTP/1.1 200 OK&lt;/D:status&gt;" <name>DEBUG_CR</name>
"&lt;/D:propstat&gt;" <name>DEBUG_CR</name>
"&lt;/D:response&gt;" <name>DEBUG_CR</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>disable_merge_response</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>serr</name> = <call><name>do_resources</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>new_rev</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>serr</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><name>serr</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
<argument><expr>"Error constructing resource list."</expr></argument>,
<argument><expr><name><name>repos</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr>(<name>void</name>) <call><name>ap_fputs</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>,
<argument><expr>"&lt;/D:updated-set&gt;" <name>DEBUG_CR</name>
"&lt;/D:merge-response&gt;" <name>DEBUG_CR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>(<name>void</name>) <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
</unit>
