<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/mod_dav_svn/reports/replay.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_xml.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_md5.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_request.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_log.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mod_dav.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_repos.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_md5.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_base64.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_xml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_dav.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_props.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../dav_svn.h"</cpp:file></cpp:include>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_filter_t</name> *</type><name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>started</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>sending_textdelta</name></decl>;</decl_stmt>
}</block></struct></type> <name>edit_baton_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>maybe_start_report</name><parameter_list>(<param><decl><type><name>edit_baton_t</name> *</type><name>eb</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>! <name><name>eb</name>-&gt;<name>started</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><macro><name>dav_svn__send_xml</name>
<argument_list>(<argument>eb-&gt;bb</argument>, <argument>eb-&gt;output</argument>,
<argument>DAV_XML_HEADER DEBUG_CR
"&lt;S:editor-report xmlns:S=\"" SVN_XML_NAMESPACE "\"&gt;"
DEBUG_CR</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>started</name></name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>end_report</name><parameter_list>(<param><decl><type><name>edit_baton_t</name> *</type><name>eb</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>output</name></name></expr></argument>,
<argument><expr>"&lt;/S:editor-report&gt;" <name>DEBUG_CR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>maybe_close_textdelta</name><parameter_list>(<param><decl><type><name>edit_baton_t</name> *</type><name>eb</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>eb</name>-&gt;<name>sending_textdelta</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>output</name></name></expr></argument>,
<argument><expr>"&lt;/S:apply-textdelta&gt;" <name>DEBUG_CR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>sending_textdelta</name></name> = <name>FALSE</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>add_file_or_directory</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file_or_directory</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>edit_baton_t</name> *</type><name>eb</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_rev</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>added_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>qname</name> <init>= <expr><call><name>apr_xml_quote_string</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>qcopy</name> <init>=
<expr><name>copyfrom_path</name> ? <call><name>apr_xml_quote_string</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>copyfrom_path</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> : <name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>maybe_close_textdelta</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>added_baton</name> = (<name>void</name> *)<name>eb</name></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>copyfrom_path</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>output</name></name></expr></argument>,
<argument><expr>"&lt;S:add-%s name=\"%s\"/&gt;" <name>DEBUG_CR</name></expr></argument>,
<argument><expr><name>file_or_directory</name></expr></argument>, <argument><expr><name>qname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>output</name></name></expr></argument>,
<argument><expr>"&lt;S:add-%s name=\"%s\" copyfrom-path=\"%s\" "
"copyfrom-rev=\"%ld\"/&gt;" <name>DEBUG_CR</name></expr></argument>,
<argument><expr><name>file_or_directory</name></expr></argument>, <argument><expr><name>qname</name></expr></argument>, <argument><expr><name>qcopy</name></expr></argument>, <argument><expr><name>copyfrom_rev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>open_file_or_directory</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file_or_directory</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>edit_baton_t</name> *</type><name>eb</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>opened_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>qname</name> <init>= <expr><call><name>apr_xml_quote_string</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>maybe_close_textdelta</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>opened_baton</name> = (<name>void</name> *)<name>eb</name></expr>;</expr_stmt>
<return>return <expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>output</name></name></expr></argument>,
<argument><expr>"&lt;S:open-%s name=\"%s\" rev=\"%ld\"/&gt;" <name>DEBUG_CR</name></expr></argument>,
<argument><expr><name>file_or_directory</name></expr></argument>, <argument><expr><name>qname</name></expr></argument>, <argument><expr><name>base_revision</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>change_file_or_dir_prop</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file_or_dir</name></decl></param>,
<param><decl><type><name>edit_baton_t</name> *</type><name>eb</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>qname</name> <init>= <expr><call><name>apr_xml_quote_string</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>maybe_close_textdelta</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>value</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>enc_value</name> <init>= <expr><call><name>svn_base64_encode_string</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name>
<argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>output</name></name></expr></argument>,
<argument><expr>"&lt;S:change-%s-prop name=\"%s\"&gt;%s&lt;/S:change-%s-prop&gt;" <name>DEBUG_CR</name></expr></argument>,
<argument><expr><name>file_or_dir</name></expr></argument>, <argument><expr><name>qname</name></expr></argument>, <argument><expr><name><name>enc_value</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>file_or_dir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name>
<argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>output</name></name></expr></argument>,
<argument><expr>"&lt;S:change-%s-prop name=\"%s\" del=\"true\"/&gt;" <name>DEBUG_CR</name></expr></argument>,
<argument><expr><name>file_or_dir</name></expr></argument>, <argument><expr><name>qname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>set_target_revision</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>target_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>edit_baton_t</name> *</type><name>eb</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>maybe_start_report</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>output</name></name></expr></argument>,
<argument><expr>"&lt;S:target-revision rev=\"%ld\"/&gt;" <name>DEBUG_CR</name></expr></argument>,
<argument><expr><name>target_revision</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>open_root</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>root_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>edit_baton_t</name> *</type><name>eb</name> <init>= <expr><name>edit_baton</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>root_baton</name> = <name>edit_baton</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>maybe_start_report</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>output</name></name></expr></argument>,
<argument><expr>"&lt;S:open-root rev=\"%ld\"/&gt;" <name>DEBUG_CR</name></expr></argument>,
<argument><expr><name>base_revision</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>delete_entry</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>edit_baton_t</name> *</type><name>eb</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>qname</name> <init>= <expr><call><name>apr_xml_quote_string</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>maybe_close_textdelta</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>output</name></name></expr></argument>,
<argument><expr>"&lt;S:delete-entry name=\"%s\" rev=\"%ld\"/&gt;" <name>DEBUG_CR</name></expr></argument>,
<argument><expr><name>qname</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>add_directory</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_rev</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>child_baton</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>add_file_or_directory</name><argument_list>(<argument><expr>"directory"</expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>parent_baton</name></expr></argument>,
<argument><expr><name>copyfrom_path</name></expr></argument>, <argument><expr><name>copyfrom_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>child_baton</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>open_directory</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>child_baton</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>open_file_or_directory</name><argument_list>(<argument><expr>"directory"</expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>parent_baton</name></expr></argument>,
<argument><expr><name>base_revision</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>child_baton</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>change_dir_prop</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>change_file_or_dir_prop</name><argument_list>(<argument><expr>"dir"</expr></argument>, <argument><expr><name>baton</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>add_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>copyfrom_path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>copyfrom_rev</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>file_baton</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>add_file_or_directory</name><argument_list>(<argument><expr>"file"</expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>parent_baton</name></expr></argument>,
<argument><expr><name>copyfrom_path</name></expr></argument>, <argument><expr><name>copyfrom_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>file_baton</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>open_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>file_baton</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>open_file_or_directory</name><argument_list>(<argument><expr>"file"</expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>parent_baton</name></expr></argument>,
<argument><expr><name>base_revision</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>file_baton</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>change_file_prop</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>change_file_or_dir_prop</name><argument_list>(<argument><expr>"file"</expr></argument>, <argument><expr><name>baton</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>apply_textdelta</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_checksum</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><name>svn_txdelta_window_handler_t</name> *</type><name>handler</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>handler_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>edit_baton_t</name> *</type><name>eb</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>output</name></name></expr></argument>, <argument><expr>"&lt;S:apply-textdelta"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>base_checksum</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>output</name></name></expr></argument>, <argument><expr>" checksum=\"%s\"&gt;"</expr></argument>,
<argument><expr><name>base_checksum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>output</name></name></expr></argument>, <argument><expr>"&gt;"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>svn_txdelta_to_svndiff</name><argument_list>(<argument><expr><call><name>dav_svn__make_base64_output_stream</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>output</name></name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>handler</name></expr></argument>, <argument><expr><name>handler_baton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>sending_textdelta</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>close_file</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>text_checksum</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>edit_baton_t</name> *</type><name>eb</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>maybe_close_textdelta</name><argument_list>(<argument><expr><name>eb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>output</name></name></expr></argument>, <argument><expr>"&lt;S:close-file"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>text_checksum</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>output</name></name></expr></argument>, <argument><expr>" checksum=\"%s\"/&gt;" <name>DEBUG_CR</name></expr></argument>,
<argument><expr><name>text_checksum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>output</name></name></expr></argument>, <argument><expr>"/&gt;" <name>DEBUG_CR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>close_directory</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>dir_baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>edit_baton_t</name> *</type><name>eb</name> <init>= <expr><name>dir_baton</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>eb</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>eb</name>-&gt;<name>output</name></name></expr></argument>, <argument><expr>"&lt;S:close-directory/&gt;" <name>DEBUG_CR</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>make_editor</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>,
<param><decl><type><name>ap_filter_t</name> *</type><name>output</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>edit_baton_t</name> *</type><name>eb</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>eb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_delta_editor_t</name> *</type><name>e</name> <init>= <expr><call><name>svn_delta_default_editor</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>bb</name></name> = <name>bb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>output</name></name> = <name>output</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>started</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>eb</name>-&gt;<name>sending_textdelta</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name>-&gt;<name>set_target_revision</name></name> = <name>set_target_revision</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name>-&gt;<name>open_root</name></name> = <name>open_root</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name>-&gt;<name>delete_entry</name></name> = <name>delete_entry</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name>-&gt;<name>add_directory</name></name> = <name>add_directory</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name>-&gt;<name>open_directory</name></name> = <name>open_directory</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name>-&gt;<name>change_dir_prop</name></name> = <name>change_dir_prop</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name>-&gt;<name>add_file</name></name> = <name>add_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name>-&gt;<name>open_file</name></name> = <name>open_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name>-&gt;<name>apply_textdelta</name></name> = <name>apply_textdelta</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name>-&gt;<name>change_file_prop</name></name> = <name>change_file_prop</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name>-&gt;<name>close_file</name></name> = <name>close_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e</name>-&gt;<name>close_directory</name></name> = <name>close_directory</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>editor</name> = <name>e</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>edit_baton</name> = <name>eb</name></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type>
<name>malformed_element_error</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tagname</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>dav_svn__new_error_tag</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>HTTP_BAD_REQUEST</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr>"The request's '"</expr></argument>, <argument><expr><name>tagname</name></expr></argument>,
<argument><expr>"' element is malformed; there "
"is a problem with the client."</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>SVN_DAV_ERROR_NAMESPACE</name></expr></argument>, <argument><expr><name>SVN_DAV_ERROR_TAG</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>dav_error</name> *</type>
<name>dav_svn__replay_report</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_xml_doc</name> *</type><name>doc</name></decl></param>,
<param><decl><type><name>ap_filter_t</name> *</type><name>output</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>low_water_mark</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>editor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>send_deltas</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_svn__authz_read_baton</name></type> <name>arb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base_dir</name> <init>= <expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>repos_path</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_xml_elem</name> *</type><name>child</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>edit_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ns</name></decl>;</decl_stmt>
<if>if <condition>(<expr>! <name>base_dir</name></expr>)</condition><then>
<expr_stmt><expr><name>base_dir</name> = ""</expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>arb</name>.<name>r</name></name> = <name><name>resource</name>-&gt;<name>info</name>-&gt;<name>r</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arb</name>.<name>repos</name></name> = <name><name>resource</name>-&gt;<name>info</name>-&gt;<name>repos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ns</name> = <call><name>dav_svn__find_ns</name><argument_list>(<argument><expr><name><name>doc</name>-&gt;<name>namespaces</name></name></expr></argument>, <argument><expr><name>SVN_XML_NAMESPACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ns</name> == -1</expr>)</condition><then>
<return>return <expr><call><name>dav_svn__new_error_tag</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_BAD_REQUEST</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr>"The request does not contain the 'svn:' "
"namespace, so it is not going to have an "
"svn:revision element. That element is "
"required."</expr></argument>,
<argument><expr><name>SVN_DAV_ERROR_NAMESPACE</name></expr></argument>,
<argument><expr><name>SVN_DAV_ERROR_TAG</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<for>for (<init><expr><name>child</name> = <name><name>doc</name>-&gt;<name>root</name>-&gt;<name>first_child</name></name></expr>;</init> <condition><expr><name>child</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>child</name> = <name><name>child</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<if>if <condition>(<expr><name><name>child</name>-&gt;<name>ns</name></name> == <name>ns</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cdata</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"revision"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>cdata</name> = <call><name>dav_xml_get_cdata</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>cdata</name></expr>)</condition><then>
<return>return <expr><call><name>malformed_element_error</name><argument_list>(<argument><expr>"revision"</expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>rev</name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name>cdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"low-water-mark"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>cdata</name> = <call><name>dav_xml_get_cdata</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>cdata</name></expr>)</condition><then>
<return>return <expr><call><name>malformed_element_error</name><argument_list>(<argument><expr>"low-water-mark"</expr></argument>,
<argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>low_water_mark</name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name>cdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"send-deltas"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>cdata</name> = <call><name>dav_xml_get_cdata</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>cdata</name></expr>)</condition><then>
<return>return <expr><call><name>malformed_element_error</name><argument_list>(<argument><expr>"send-deltas"</expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>send_deltas</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>cdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if></else></if>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr>! <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>dav_svn__new_error_tag</name>
<argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_BAD_REQUEST</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr>"Request was missing the revision argument."</expr></argument>,
<argument><expr><name>SVN_DAV_ERROR_NAMESPACE</name></expr></argument>, <argument><expr><name>SVN_DAV_ERROR_TAG</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>! <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name>low_water_mark</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>dav_svn__new_error_tag</name>
<argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_BAD_REQUEST</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr>"Request was missing the low-water-mark argument."</expr></argument>,
<argument><expr><name>SVN_DAV_ERROR_NAMESPACE</name></expr></argument>, <argument><expr><name>SVN_DAV_ERROR_TAG</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>bb</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>output</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>repos</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name>rev</name></expr></argument>,
<argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<return>return <expr><call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
<argument><expr>"Couldn't retrieve revision root"</expr></argument>,
<argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>make_editor</name><argument_list>(<argument><expr>&amp;<name>editor</name></expr></argument>, <argument><expr>&amp;<name>edit_baton</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>svn_repos_replay2</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>base_dir</name></expr></argument>, <argument><expr><name>low_water_mark</name></expr></argument>,
<argument><expr><name>send_deltas</name></expr></argument>, <argument><expr><name>editor</name></expr></argument>, <argument><expr><name>edit_baton</name></expr></argument>,
<argument><expr><call><name>dav_svn__authz_read_func</name><argument_list>(<argument><expr>&amp;<name>arb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>arb</name></expr></argument>,
<argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<return>return <expr><call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
<argument><expr>"Problem replaying revision"</expr></argument>,
<argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>(<name>err</name> = <call><name>end_report</name><argument_list>(<argument><expr><name>edit_baton</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<return>return <expr><call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
<argument><expr>"Problem closing editor drive"</expr></argument>,
<argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>action</name></decl>, *<decl><type ref="prev"/><name>log_base_dir</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>base_dir</name> &amp;&amp; <name><name>base_dir</name><index>[<expr>0</expr>]</index></name> != '\0'</expr>)</condition><then>
<expr_stmt><expr><name>log_base_dir</name> = <call><name>svn_path_uri_encode</name><argument_list>(<argument><expr><name>base_dir</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>log_base_dir</name> = "/"</expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>action</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"replay %s r%ld"</expr></argument>,
<argument><expr><name>log_base_dir</name></expr></argument>, <argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dav_svn__operational_log</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>info</name></name></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<expr_stmt><expr><call><name>ap_fflush</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
</unit>
