<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/mod_dav_svn/reports/log.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_xml.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mod_dav.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_repos.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_xml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_dav.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../dav_svn.h"</cpp:file></cpp:include>
<struct>struct <name>log_receiver_baton</name> <block>{
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_filter_t</name> *</type><name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>needs_header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stack_depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>requested_custom_revprops</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>maybe_send_header</name><parameter_list>(<param><decl><type>struct <name>log_receiver_baton</name> *</type><name>lrb</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>lrb</name>-&gt;<name>needs_header</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><macro><name>dav_svn__send_xml</name><argument_list>(<argument>lrb-&gt;bb</argument>, <argument>lrb-&gt;output</argument>,
<argument>DAV_XML_HEADER DEBUG_CR
"&lt;S:log-report xmlns:S=\"" SVN_XML_NAMESPACE
"\" " "xmlns:D=\"DAV:\"&gt;" DEBUG_CR</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lrb</name>-&gt;<name>needs_header</name></name> = <name>FALSE</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>log_receiver</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>svn_log_entry_t</name> *</type><name>log_entry</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>log_receiver_baton</name> *</type><name>lrb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>iterpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>maybe_send_header</name><argument_list>(<argument><expr><name>lrb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>log_entry</name>-&gt;<name>revision</name></name> == <name>SVN_INVALID_REVNUM</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>lrb</name>-&gt;<name>stack_depth</name></name> == 0</expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then>
<else>else
<expr_stmt><expr><name><name>lrb</name>-&gt;<name>stack_depth</name></name>--</expr>;</expr_stmt></else></if>
}</block></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>lrb</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>lrb</name>-&gt;<name>output</name></name></expr></argument>,
<argument><expr>"&lt;S:log-item&gt;" <name>DEBUG_CR</name> "&lt;D:version-name&gt;%ld"
"&lt;/D:version-name&gt;" <name>DEBUG_CR</name></expr></argument>, <argument><expr><name><name>log_entry</name>-&gt;<name>revision</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>log_entry</name>-&gt;<name>revprops</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>log_entry</name>-&gt;<name>revprops</name></name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>hi</name> != <name>NULL</name></expr>;</condition>
<incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>value</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>(<name>void</name> *)&amp;<name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>(<name>void</name> *)&amp;<name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_AUTHOR</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>lrb</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>lrb</name>-&gt;<name>output</name></name></expr></argument>,
<argument><expr>"&lt;D:creator-displayname&gt;%s"
"&lt;/D:creator-displayname&gt;" <name>DEBUG_CR</name></expr></argument>,
<argument><expr><call><name>apr_xml_quote_string</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>,
<argument><expr><name><name>value</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_DATE</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>lrb</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>lrb</name>-&gt;<name>output</name></name></expr></argument>,
<argument><expr>"&lt;S:date&gt;%s&lt;/S:date&gt;" <name>DEBUG_CR</name></expr></argument>,
<argument><expr><call><name>apr_xml_quote_string</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>,
<argument><expr><name><name>value</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_LOG</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>lrb</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>lrb</name>-&gt;<name>output</name></name></expr></argument>,
<argument><expr>"&lt;D:comment&gt;%s&lt;/D:comment&gt;" <name>DEBUG_CR</name></expr></argument>,
<argument><expr><call><name>apr_xml_quote_string</name>
<argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>svn_xml_fuzzy_escape</name><argument_list>(<argument><expr><name><name>value</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>lrb</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>lrb</name>-&gt;<name>output</name></name></expr></argument>,
<argument><expr>"&lt;S:revprop name=\"%s\"&gt;"
"%s&lt;/S:revprop&gt;"
<name>DEBUG_CR</name></expr></argument>,
<argument><expr><call><name>apr_xml_quote_string</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>apr_xml_quote_string</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>,
<argument><expr><name><name>value</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if></else></if>
}</block></for>
}</block></then></if>
<if>if <condition>(<expr><name><name>log_entry</name>-&gt;<name>has_children</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>lrb</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>lrb</name>-&gt;<name>output</name></name></expr></argument>,
<argument><expr>"&lt;S:has-children/&gt;"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lrb</name>-&gt;<name>stack_depth</name></name>++</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>log_entry</name>-&gt;<name>changed_paths</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>log_entry</name>-&gt;<name>changed_paths</name></name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>hi</name> != <name>NULL</name></expr>;</condition>
<incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_log_changed_path_t</name> *</type><name>log_item</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>(<name>void</name> *) &amp;<name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>log_item</name> = <name>val</name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>log_item</name>-&gt;<name>action</name></name></expr>)</condition> <block>{
<case>case <expr>'A'</expr>:
<if>if <condition>(<expr><name><name>log_item</name>-&gt;<name>copyfrom_path</name></name>
&amp;&amp; <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name><name>log_item</name>-&gt;<name>copyfrom_rev</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>lrb</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>lrb</name>-&gt;<name>output</name></name></expr></argument>,
<argument><expr>"&lt;S:added-path"
" copyfrom-path=\"%s\""
" copyfrom-rev=\"%ld\"&gt;"
"%s&lt;/S:added-path&gt;" <name>DEBUG_CR</name></expr></argument>,
<argument><expr><call><name>apr_xml_quote_string</name>
<argument_list>(<argument><expr><name>iterpool</name></expr></argument>,
<argument><expr><name><name>log_item</name>-&gt;<name>copyfrom_path</name></name></expr></argument>,
<argument><expr>1</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>log_item</name>-&gt;<name>copyfrom_rev</name></name></expr></argument>,
<argument><expr><call><name>apr_xml_quote_string</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>,
<argument><expr><name>path</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>lrb</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>lrb</name>-&gt;<name>output</name></name></expr></argument>,
<argument><expr>"&lt;S:added-path&gt;%s&lt;/S:added-path&gt;"
<name>DEBUG_CR</name></expr></argument>,
<argument><expr><call><name>apr_xml_quote_string</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<break>break;</break>
</case><case>case <expr>'R'</expr>:
<if>if <condition>(<expr><name><name>log_item</name>-&gt;<name>copyfrom_path</name></name>
&amp;&amp; <call><name>SVN_IS_VALID_REVNUM</name><argument_list>(<argument><expr><name><name>log_item</name>-&gt;<name>copyfrom_rev</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>lrb</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>lrb</name>-&gt;<name>output</name></name></expr></argument>,
<argument><expr>"&lt;S:replaced-path"
" copyfrom-path=\"%s\""
" copyfrom-rev=\"%ld\"&gt;"
"%s&lt;/S:replaced-path&gt;" <name>DEBUG_CR</name></expr></argument>,
<argument><expr><call><name>apr_xml_quote_string</name>
<argument_list>(<argument><expr><name>iterpool</name></expr></argument>,
<argument><expr><name><name>log_item</name>-&gt;<name>copyfrom_path</name></name></expr></argument>,
<argument><expr>1</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>log_item</name>-&gt;<name>copyfrom_rev</name></name></expr></argument>,
<argument><expr><call><name>apr_xml_quote_string</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>,
<argument><expr><name>path</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>lrb</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>lrb</name>-&gt;<name>output</name></name></expr></argument>,
<argument><expr>"&lt;S:replaced-path&gt;%s"
"&lt;/S:replaced-path&gt;" <name>DEBUG_CR</name></expr></argument>,
<argument><expr><call><name>apr_xml_quote_string</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>, <argument><expr><name>path</name></expr></argument>,
<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<break>break;</break>
</case><case>case <expr>'D'</expr>:
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>lrb</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>lrb</name>-&gt;<name>output</name></name></expr></argument>,
<argument><expr>"&lt;S:deleted-path&gt;%s&lt;/S:deleted-path&gt;"
<name>DEBUG_CR</name></expr></argument>,
<argument><expr><call><name>apr_xml_quote_string</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'M'</expr>:
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>lrb</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>lrb</name>-&gt;<name>output</name></name></expr></argument>,
<argument><expr>"&lt;S:modified-path&gt;%s"
"&lt;/S:modified-path&gt;" <name>DEBUG_CR</name></expr></argument>,
<argument><expr><call><name>apr_xml_quote_string</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<break>break;</break>
</default>}</block></switch>
}</block></for>
}</block></then></if>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>iterpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>lrb</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>lrb</name>-&gt;<name>output</name></name></expr></argument>, <argument><expr>"&lt;/S:log-item&gt;" <name>DEBUG_CR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>dav_error</name> *</type>
<name>dav_svn__log_report</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_xml_doc</name> *</type><name>doc</name></decl></param>,
<param><decl><type><name>ap_filter_t</name> *</type><name>output</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>serr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>apr_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_error</name> *</type><name>derr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_xml_elem</name> *</type><name>child</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>log_receiver_baton</name></type> <name>lrb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_svn__authz_read_baton</name></type> <name>arb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dav_svn_repos</name> *</type><name>repos</name> <init>= <expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>repos</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>limit</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>seen_revprop_element</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>start</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>end</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>discover_changed_paths</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>strict_node_history</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>include_merged_revisions</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>revprops</name> <init>= <expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>3</expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>paths</name>
<init>= <expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>space_separated_paths</name> <init>=
<expr><call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>space_separated_revprops</name> <init>=
<expr><call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ns</name> = <call><name>dav_svn__find_ns</name><argument_list>(<argument><expr><name><name>doc</name>-&gt;<name>namespaces</name></name></expr></argument>, <argument><expr><name>SVN_XML_NAMESPACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ns</name> == -1</expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_svn__new_error_tag</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_BAD_REQUEST</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr>"The request does not contain the 'svn:' "
"namespace, so it is not going to have "
"certain required elements."</expr></argument>,
<argument><expr><name>SVN_DAV_ERROR_NAMESPACE</name></expr></argument>,
<argument><expr><name>SVN_DAV_ERROR_TAG</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>seen_revprop_element</name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lrb</name>.<name>requested_custom_revprops</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<for>for (<init><expr><name>child</name> = <name><name>doc</name>-&gt;<name>root</name>-&gt;<name>first_child</name></name></expr>;</init> <condition><expr><name>child</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>child</name> = <name><name>child</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<if>if <condition>(<expr><name><name>child</name>-&gt;<name>ns</name></name> != <name>ns</name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"start-revision"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name>start</name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><call><name>dav_xml_get_cdata</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"end-revision"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name>end</name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><call><name>dav_xml_get_cdata</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"limit"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name>limit</name> = <call><name>atoi</name><argument_list>(<argument><expr><call><name>dav_xml_get_cdata</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"discover-changed-paths"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name>discover_changed_paths</name> = <name>TRUE</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"strict-node-history"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name>strict_node_history</name> = <name>TRUE</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"include-merged-revisions"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name>include_merged_revisions</name> = <name>TRUE</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"all-revprops"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>revprops</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>seen_revprop_element</name> = <name><name>lrb</name>.<name>requested_custom_revprops</name></name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"revprop"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>revprops</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name> <init>= <expr><call><name>dav_xml_get_cdata</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>revprops</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>name</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>lrb</name>.<name>requested_custom_revprops</name></name>
&amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_AUTHOR</name></expr></argument>)</argument_list></call> != 0
&amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_DATE</name></expr></argument>)</argument_list></call> != 0
&amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_PROP_REVISION_LOG</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<expr_stmt><expr><name><name>lrb</name>.<name>requested_custom_revprops</name></name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>space_separated_revprops</name>-&gt;<name>len</name></name> &gt; 1</expr>)</condition><then>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>space_separated_revprops</name></expr></argument>, <argument><expr>" "</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>space_separated_revprops</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>seen_revprop_element</name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>child</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"path"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rel_path</name> <init>= <expr><call><name>dav_xml_get_cdata</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>derr</name> = <call><name>dav_svn__test_canonical</name><argument_list>(<argument><expr><name>rel_path</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<return>return <expr><name>derr</name></expr>;</return></then></if>
<expr_stmt><expr><name>target</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>repos_path</name></name></expr></argument>, <argument><expr><name>rel_path</name></expr></argument>,
<argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>paths</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>target</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>space_separated_paths</name>-&gt;<name>len</name></name> &gt; 1</expr>)</condition><then>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>space_separated_paths</name></expr></argument>, <argument><expr>" "</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>space_separated_paths</name></expr></argument>,
<argument><expr><call><name>svn_path_uri_encode</name><argument_list>(<argument><expr><name>target</name></expr></argument>,
<argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
}</block></for>
<if>if <condition>(<expr>!<name>seen_revprop_element</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>revprops</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>SVN_PROP_REVISION_AUTHOR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>revprops</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>SVN_PROP_REVISION_DATE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>revprops</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>SVN_PROP_REVISION_LOG</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>arb</name>.<name>r</name></name> = <name><name>resource</name>-&gt;<name>info</name>-&gt;<name>r</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>arb</name>.<name>repos</name></name> = <name><name>resource</name>-&gt;<name>info</name>-&gt;<name>repos</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lrb</name>.<name>bb</name></name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>output</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lrb</name>.<name>output</name></name> = <name>output</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lrb</name>.<name>needs_header</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lrb</name>.<name>stack_depth</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>serr</name> = <call><name>svn_repos_get_logs4</name><argument_list>(<argument><expr><name><name>repos</name>-&gt;<name>repos</name></name></expr></argument>,
<argument><expr><name>paths</name></expr></argument>,
<argument><expr><name>start</name></expr></argument>,
<argument><expr><name>end</name></expr></argument>,
<argument><expr><name>limit</name></expr></argument>,
<argument><expr><name>discover_changed_paths</name></expr></argument>,
<argument><expr><name>strict_node_history</name></expr></argument>,
<argument><expr><name>include_merged_revisions</name></expr></argument>,
<argument><expr><name>revprops</name></expr></argument>,
<argument><expr><call><name>dav_svn__authz_read_func</name><argument_list>(<argument><expr>&amp;<name>arb</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>&amp;<name>arb</name></expr></argument>,
<argument><expr><name>log_receiver</name></expr></argument>,
<argument><expr>&amp;<name>lrb</name></expr></argument>,
<argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>serr</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>derr</name> = <call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><name>serr</name></expr></argument>, <argument><expr><name>HTTP_BAD_REQUEST</name></expr></argument>, <argument><expr><name><name>serr</name>-&gt;<name>message</name></name></expr></argument>,
<argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
}</block></then></if>
<if>if <condition>(<expr>(<name>serr</name> = <call><name>maybe_send_header</name><argument_list>(<argument><expr>&amp;<name>lrb</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>derr</name> = <call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><name>serr</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
<argument><expr>"Error beginning REPORT response."</expr></argument>,
<argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
}</block></then></if>
<if>if <condition>(<expr>(<name>serr</name> = <call><name>dav_svn__send_xml</name><argument_list>(<argument><expr><name><name>lrb</name>.<name>bb</name></name></expr></argument>, <argument><expr><name><name>lrb</name>.<name>output</name></name></expr></argument>, <argument><expr>"&lt;/S:log-report&gt;"
<name>DEBUG_CR</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>derr</name> = <call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><name>serr</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
<argument><expr>"Error ending REPORT response."</expr></argument>,
<argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
}</block></then></if>
<label><name>cleanup</name>:</label>
<block>{
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>options</name> <init>= <expr><call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>action</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>limit</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>tmp</name> <init>= <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>" limit=%d"</expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>discover_changed_paths</name></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr>" discover-changed-paths"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>strict_node_history</name></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr>" strict"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>include_merged_revisions</name></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr>" include-merged-revisions"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>revprops</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr>" revprops=all"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name><name>revprops</name>-&gt;<name>nelts</name></name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr>" revprops=("</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendstr</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>space_separated_revprops</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr>")"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<expr_stmt><expr><name>action</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"log (%s) r%ld:%ld%s"</expr></argument>,
<argument><expr><name><name>space_separated_paths</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>,
<argument><expr><name><name>options</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dav_svn__operational_log</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>info</name></name></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<if>if <condition>(<expr>!<name><name>lrb</name>.<name>needs_header</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>apr_err</name> = <call><name>ap_fflush</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name><name>lrb</name>.<name>bb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>derr</name> &amp;&amp; <name>apr_err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>derr</name> = <call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
<argument><expr>"Error flushing brigade."</expr></argument>,
<argument><expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>derr</name></expr>;</return>
}</block></function>
</unit>
