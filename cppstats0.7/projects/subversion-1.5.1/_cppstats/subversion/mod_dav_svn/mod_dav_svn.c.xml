<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/mod_dav_svn/mod_dav_svn.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;httpd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_config.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_request.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_log.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ap_provider.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mod_dav.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_utf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_dso.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_dav_svn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dav_svn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_authz_svn.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_DEFAULT_SPECIAL_URI</name></cpp:macro> <cpp:value>"!svn"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PATHAUTHZ_BYPASS_ARG</name></cpp:macro> <cpp:value>"short_circuit"</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>special_uri</name></decl>;</decl_stmt>
}</block></struct></type> <name>server_conf_t</name>;</typedef>
<enum>enum <name>conf_flag</name> <block>{
<decl><name>CONF_FLAG_DEFAULT</name></decl>,
<decl><name>CONF_FLAG_ON</name></decl>,
<decl><name>CONF_FLAG_OFF</name></decl>
}</block>;</enum>
<enum>enum <name>path_authz_conf</name> <block>{
<decl><name>CONF_PATHAUTHZ_DEFAULT</name></decl>,
<decl><name>CONF_PATHAUTHZ_ON</name></decl>,
<decl><name>CONF_PATHAUTHZ_OFF</name></decl>,
<decl><name>CONF_PATHAUTHZ_BYPASS</name></decl>
}</block>;</enum>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fs_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repo_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>xslt_uri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fs_parent_path</name></decl>;</decl_stmt>
<enum>enum <name>conf_flag</name> <name>autoversioning</name>;</enum>
<enum>enum <name>conf_flag</name> <name>bulk_updates</name>;</enum>
<enum>enum <name>path_authz_conf</name> <name>path_authz_method</name>;</enum>
<enum>enum <name>conf_flag</name> <name>list_parentpath</name>;</enum>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>root_dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>master_uri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>activities_db</name></decl>;</decl_stmt>
}</block></struct></type> <name>dir_conf_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INHERIT_VALUE</name><parameter_list>(<param><type><name>parent</name></type></param>, <param><type><name>child</name></type></param>, <param><type><name>field</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((child)-&gt;field ? (child)-&gt;field : (parent)-&gt;field)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>extern</specifier> <name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>dav_svn_module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>authz_svn__subreq_bypass_func_t</name></type> <name>pathauthz_bypass_func</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>serr</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_add_version_component</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"SVN/" <name>SVN_VER_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>serr</name> = <call><name>svn_fs_initialize</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>serr</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_perror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name><name>serr</name>-&gt;<name>apr_err</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>,
<argument><expr>"mod_dav_svn: error calling svn_fs_initialize: '%s'"</expr></argument>,
<argument><expr><name><name>serr</name>-&gt;<name>message</name></name> ? <name><name>serr</name>-&gt;<name>message</name></name> : "(no more info)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>svn_utf_initialize</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>init_dso</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>svn_dso_initialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type>
<name>create_server_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>server_conf_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type>
<name>merge_server_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>base</name></decl></param>, <param><decl><type><name>void</name> *</type><name>overrides</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>server_conf_t</name> *</type><name>parent</name> <init>= <expr><name>base</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>server_conf_t</name> *</type><name>child</name> <init>= <expr><name>overrides</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>server_conf_t</name> *</type><name>newconf</name></decl>;</decl_stmt>
<expr_stmt><expr><name>newconf</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>newconf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newconf</name>-&gt;<name>special_uri</name></name> = <call><name>INHERIT_VALUE</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name>special_uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>newconf</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type>
<name>create_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>dir</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dir_conf_t</name> *</type><name>conf</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>root_dir</name></name> = <name>dir</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>bulk_updates</name></name> = <name>CONF_FLAG_ON</name></expr>;</expr_stmt>
<return>return <expr><name>conf</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type>
<name>merge_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>base</name></decl></param>, <param><decl><type><name>void</name> *</type><name>overrides</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dir_conf_t</name> *</type><name>parent</name> <init>= <expr><name>base</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dir_conf_t</name> *</type><name>child</name> <init>= <expr><name>overrides</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dir_conf_t</name> *</type><name>newconf</name></decl>;</decl_stmt>
<expr_stmt><expr><name>newconf</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>newconf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newconf</name>-&gt;<name>fs_path</name></name> = <call><name>INHERIT_VALUE</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name>fs_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newconf</name>-&gt;<name>master_uri</name></name> = <call><name>INHERIT_VALUE</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name>master_uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newconf</name>-&gt;<name>activities_db</name></name> = <call><name>INHERIT_VALUE</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name>activities_db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newconf</name>-&gt;<name>repo_name</name></name> = <call><name>INHERIT_VALUE</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name>repo_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newconf</name>-&gt;<name>xslt_uri</name></name> = <call><name>INHERIT_VALUE</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name>xslt_uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newconf</name>-&gt;<name>fs_parent_path</name></name> = <call><name>INHERIT_VALUE</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name>fs_parent_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newconf</name>-&gt;<name>autoversioning</name></name> = <call><name>INHERIT_VALUE</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name>autoversioning</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newconf</name>-&gt;<name>bulk_updates</name></name> = <call><name>INHERIT_VALUE</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name>bulk_updates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newconf</name>-&gt;<name>path_authz_method</name></name> = <call><name>INHERIT_VALUE</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name>path_authz_method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newconf</name>-&gt;<name>list_parentpath</name></name> = <call><name>INHERIT_VALUE</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name>list_parentpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newconf</name>-&gt;<name>root_dir</name></name> = <call><name>INHERIT_VALUE</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>root_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>newconf</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>SVNReposName_cmd</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg1</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dir_conf_t</name> *</type><name>conf</name> <init>= <expr><name>config</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>repo_name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>SVNMasterURI_cmd</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg1</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dir_conf_t</name> *</type><name>conf</name> <init>= <expr><name>config</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>master_uri</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>SVNActivitiesDB_cmd</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg1</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dir_conf_t</name> *</type><name>conf</name> <init>= <expr><name>config</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>activities_db</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>SVNIndexXSLT_cmd</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg1</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dir_conf_t</name> *</type><name>conf</name> <init>= <expr><name>config</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>xslt_uri</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>SVNAutoversioning_cmd</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>, <param><decl><type><name>int</name></type> <name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dir_conf_t</name> *</type><name>conf</name> <init>= <expr><name>config</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>arg</name></expr>)</condition><then>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>autoversioning</name></name> = <name>CONF_FLAG_ON</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>conf</name>-&gt;<name>autoversioning</name></name> = <name>CONF_FLAG_OFF</name></expr>;</expr_stmt></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>SVNAllowBulkUpdates_cmd</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>, <param><decl><type><name>int</name></type> <name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dir_conf_t</name> *</type><name>conf</name> <init>= <expr><name>config</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>arg</name></expr>)</condition><then>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>bulk_updates</name></name> = <name>CONF_FLAG_ON</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>conf</name>-&gt;<name>bulk_updates</name></name> = <name>CONF_FLAG_OFF</name></expr>;</expr_stmt></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>SVNPathAuthz_cmd</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg1</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dir_conf_t</name> *</type><name>conf</name> <init>= <expr><name>config</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>apr_strnatcasecmp</name><argument_list>(<argument><expr>"off"</expr></argument>, <argument><expr><name>arg1</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>path_authz_method</name></name> = <name>CONF_PATHAUTHZ_OFF</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>apr_strnatcasecmp</name><argument_list>(<argument><expr><name>PATHAUTHZ_BYPASS_ARG</name></expr></argument>,<argument><expr><name>arg1</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>path_authz_method</name></name> = <name>CONF_PATHAUTHZ_BYPASS</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>pathauthz_bypass_func</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>pathauthz_bypass_func</name>=<call><name>ap_lookup_provider</name><argument_list>(
<argument><expr><name>AUTHZ_SVN__SUBREQ_BYPASS_PROV_GRP</name></expr></argument>,
<argument><expr><name>AUTHZ_SVN__SUBREQ_BYPASS_PROV_NAME</name></expr></argument>,
<argument><expr><name>AUTHZ_SVN__SUBREQ_BYPASS_PROV_VER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then> <else>else
<expr_stmt><expr><name><name>conf</name>-&gt;<name>path_authz_method</name></name> = <name>CONF_PATHAUTHZ_ON</name></expr>;</expr_stmt></else></if></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>SVNListParentPath_cmd</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>, <param><decl><type><name>int</name></type> <name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dir_conf_t</name> *</type><name>conf</name> <init>= <expr><name>config</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>arg</name></expr>)</condition><then>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>list_parentpath</name></name> = <name>CONF_FLAG_ON</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>conf</name>-&gt;<name>list_parentpath</name></name> = <name>CONF_FLAG_OFF</name></expr>;</expr_stmt></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>SVNPath_cmd</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg1</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dir_conf_t</name> *</type><name>conf</name> <init>= <expr><name>config</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>fs_parent_path</name></name> != <name>NULL</name></expr>)</condition><then>
<return>return <expr>"SVNPath cannot be defined at same time as SVNParentPath."</expr>;</return></then></if>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>fs_path</name></name> = <call><name>svn_path_internal_style</name><argument_list>(<argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>SVNParentPath_cmd</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg1</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dir_conf_t</name> *</type><name>conf</name> <init>= <expr><name>config</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>fs_path</name></name> != <name>NULL</name></expr>)</condition><then>
<return>return <expr>"SVNParentPath cannot be defined at same time as SVNPath."</expr>;</return></then></if>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>fs_parent_path</name></name> = <call><name>svn_path_internal_style</name><argument_list>(<argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>SVNSpecialURI_cmd</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg1</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>server_conf_t</name> *</type><name>conf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>uri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><name>uri</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_getparents</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_no2slash</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>uri</name> == '/'</expr>)</condition><then>
<expr_stmt><expr>++<name>uri</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>len</name> &gt; 0 &amp;&amp; <name><name>uri</name><index>[<expr><name>len</name> - 1</expr>]</index></name> == '/'</expr>)</condition><then>
<expr_stmt><expr><name><name>uri</name><index>[<expr>--<name>len</name></expr>]</index></name> = '\0'</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>len</name> == 0</expr>)</condition><then>
<return>return <expr>"The special URI path must have at least one component."</expr>;</return></then></if>
<expr_stmt><expr><name>conf</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>dav_svn_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>special_uri</name></name> = <name>uri</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>dav_svn__get_fs_path</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dir_conf_t</name> *</type><name>conf</name></decl>;</decl_stmt>
<expr_stmt><expr><name>conf</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>dav_svn_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>conf</name>-&gt;<name>fs_path</name></name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>dav_svn__get_fs_parent_path</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dir_conf_t</name> *</type><name>conf</name></decl>;</decl_stmt>
<expr_stmt><expr><name>conf</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>dav_svn_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>conf</name>-&gt;<name>fs_parent_path</name></name></expr>;</return>
}</block></function>
<macro><name>AP_MODULE_DECLARE</name><argument_list>(<argument>dav_error *</argument>)</argument_list></macro>
<macro><name>dav_svn_get_repos_path</name><argument_list>(<argument>request_rec *r</argument>,
<argument>const char *root_path</argument>,
<argument>const char **repos_path</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fs_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fs_parent_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repos_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ignored_path_in_repos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ignored_cleaned_uri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ignored_relative</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ignored_had_slash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_error</name> *</type><name>derr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>fs_path</name> = <call><name>dav_svn__get_fs_path</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>fs_path</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>repos_path</name> = <name>fs_path</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>fs_parent_path</name> = <call><name>dav_svn__get_fs_parent_path</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>derr</name> = <call><name>dav_svn_split_uri</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name>root_path</name></expr></argument>,
<argument><expr>&amp;<name>ignored_cleaned_uri</name></expr></argument>, <argument><expr>&amp;<name>ignored_had_slash</name></expr></argument>,
<argument><expr>&amp;<name>repos_name</name></expr></argument>,
<argument><expr>&amp;<name>ignored_relative</name></expr></argument>, <argument><expr>&amp;<name>ignored_path_in_repos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>derr</name></expr>)</condition><then>
<return>return <expr><name>derr</name></expr>;</return></then></if>
<expr_stmt><expr>*<name>repos_path</name> = <call><name>svn_path_join</name><argument_list>(<argument><expr><name>fs_parent_path</name></expr></argument>, <argument><expr><name>repos_name</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block>
<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>dav_svn__get_repo_name</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dir_conf_t</name> *</type><name>conf</name></decl>;</decl_stmt>
<expr_stmt><expr><name>conf</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>dav_svn_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>conf</name>-&gt;<name>repo_name</name></name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>dav_svn__get_root_dir</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dir_conf_t</name> *</type><name>conf</name></decl>;</decl_stmt>
<expr_stmt><expr><name>conf</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>dav_svn_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>conf</name>-&gt;<name>root_dir</name></name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>dav_svn__get_master_uri</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dir_conf_t</name> *</type><name>conf</name></decl>;</decl_stmt>
<expr_stmt><expr><name>conf</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>dav_svn_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>conf</name>-&gt;<name>master_uri</name></name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>dav_svn__get_xslt_uri</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dir_conf_t</name> *</type><name>conf</name></decl>;</decl_stmt>
<expr_stmt><expr><name>conf</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>dav_svn_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>conf</name>-&gt;<name>xslt_uri</name></name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>dav_svn__get_special_uri</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>server_conf_t</name> *</type><name>conf</name></decl>;</decl_stmt>
<expr_stmt><expr><name>conf</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>dav_svn_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>conf</name>-&gt;<name>special_uri</name></name> ? <name><name>conf</name>-&gt;<name>special_uri</name></name> : <name>SVN_DEFAULT_SPECIAL_URI</name></expr>;</return>
}</block></function>
<function><type><name>svn_boolean_t</name></type>
<name>dav_svn__get_autoversioning_flag</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dir_conf_t</name> *</type><name>conf</name></decl>;</decl_stmt>
<expr_stmt><expr><name>conf</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>dav_svn_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>conf</name>-&gt;<name>autoversioning</name></name> == <name>CONF_FLAG_ON</name></expr>;</return>
}</block></function>
<function><type><name>svn_boolean_t</name></type>
<name>dav_svn__get_bulk_updates_flag</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dir_conf_t</name> *</type><name>conf</name></decl>;</decl_stmt>
<expr_stmt><expr><name>conf</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>dav_svn_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>conf</name>-&gt;<name>bulk_updates</name></name> == <name>CONF_FLAG_ON</name></expr>;</return>
}</block></function>
<function><type><name>svn_boolean_t</name></type>
<name>dav_svn__get_pathauthz_flag</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dir_conf_t</name> *</type><name>conf</name></decl>;</decl_stmt>
<expr_stmt><expr><name>conf</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>dav_svn_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>conf</name>-&gt;<name>path_authz_method</name></name> != <name>CONF_PATHAUTHZ_OFF</name></expr>;</return>
}</block></function>
<function><type><name>authz_svn__subreq_bypass_func_t</name></type>
<name>dav_svn__get_pathauthz_bypass</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dir_conf_t</name> *</type><name>conf</name></decl>;</decl_stmt>
<expr_stmt><expr><name>conf</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>dav_svn_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>path_authz_method</name></name>==<name>CONF_PATHAUTHZ_BYPASS</name></expr>)</condition><then>
<return>return <expr><name>pathauthz_bypass_func</name></expr>;</return></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><name>svn_boolean_t</name></type>
<name>dav_svn__get_list_parentpath_flag</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dir_conf_t</name> *</type><name>conf</name></decl>;</decl_stmt>
<expr_stmt><expr><name>conf</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>dav_svn_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>conf</name>-&gt;<name>list_parentpath</name></name> == <name>CONF_FLAG_ON</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type>
<name>dav_svn__get_activities_db</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dir_conf_t</name> *</type><name>conf</name></decl>;</decl_stmt>
<expr_stmt><expr><name>conf</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>dav_svn_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>conf</name>-&gt;<name>activities_db</name></name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>merge_xml_filter_insert</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>(<name><name>r</name>-&gt;<name>method_number</name></name> == <name>M_MERGE</name>)
|| (<name><name>r</name>-&gt;<name>method_number</name></name> == <name>M_DELETE</name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>dir_conf_t</name> *</type><name>conf</name></decl>;</decl_stmt>
<expr_stmt><expr><name>conf</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>dav_svn_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>fs_path</name></name> || <name><name>conf</name>-&gt;<name>fs_parent_path</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_add_input_filter</name><argument_list>(<argument><expr>"SVN-MERGE"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></function>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_xml_parser</name> *</type><name>parser</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
}</block></struct></type> <name>merge_ctx_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type>
<name>merge_xml_in_filter</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>,
<param><decl><type><name>ap_input_mode_t</name></type> <name>mode</name></decl></param>,
<param><decl><type><name>apr_read_type_e</name></type> <name>block</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>readbytes</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><name><name>f</name>-&gt;<name>r</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>merge_ctx_t</name> *</type><name>ctx</name> <init>= <expr><name><name>f</name>-&gt;<name>ctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>bucket</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>seen_eos</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name><name>r</name>-&gt;<name>method_number</name></name> != <name>M_MERGE</name>)
&amp;&amp; (<name><name>r</name>-&gt;<name>method_number</name></name> != <name>M_DELETE</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_remove_input_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>readbytes</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name>ctx</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>f</name>-&gt;<name>ctx</name></name> = <name>ctx</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>parser</name></name> = <call><name>apr_xml_parser_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>bb</name></name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>readbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>rv</name></expr>;</return></then></if>
<for>for (<init><expr><name>bucket</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>bucket</name> != <call><name>APR_BRIGADE_SENTINEL</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr>;</condition>
<incr><expr><name>bucket</name> = <call><name>APR_BUCKET_NEXT</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>seen_eos</name> = 1</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_METADATA</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_bucket_read</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr><name>APR_BLOCK_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>rv</name></expr>;</return></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_xml_parser_feed</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>parser</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr>(<name>void</name>) <call><name>apr_xml_parser_done</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>parser</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>APR_BRIGADE_CONCAT</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>seen_eos</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_xml_doc</name> *</type><name>pdoc</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_remove_input_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_xml_parser_done</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>parser</name></name></expr></argument>, <argument><expr>&amp;<name>pdoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_CHARSET_EBCDIC</name></expr></cpp:if>
<expr_stmt><expr><call><name>apr_xml_parser_convert_doc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>pdoc</name></expr></argument>, <argument><expr><name>ap_hdrs_from_ascii</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>rv</name> = <call><name>apr_pool_userdata_set</name><argument_list>(<argument><expr><name>pdoc</name></expr></argument>, <argument><expr>"svn-request-body"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>rv</name></expr>;</return></then></if>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"SVNPath"</expr></argument>, <argument><expr><name>SVNPath_cmd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"specifies the location in the filesystem for a Subversion "
"repository's files."</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"SVNSpecialURI"</expr></argument>, <argument><expr><name>SVNSpecialURI_cmd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"specify the URI component for special Subversion "
"resources"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"SVNReposName"</expr></argument>, <argument><expr><name>SVNReposName_cmd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"specify the name of a Subversion repository"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"SVNIndexXSLT"</expr></argument>, <argument><expr><name>SVNIndexXSLT_cmd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"specify the URI of an XSL transformation for "
"directory indexes"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"SVNParentPath"</expr></argument>, <argument><expr><name>SVNParentPath_cmd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"specifies the location in the filesystem whose "
"subdirectories are assumed to be Subversion repositories."</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"SVNAutoversioning"</expr></argument>, <argument><expr><name>SVNAutoversioning_cmd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>ACCESS_CONF</name>|<name>RSRC_CONF</name></expr></argument>, <argument><expr>"turn on deltaV autoversioning."</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"SVNPathAuthz"</expr></argument>, <argument><expr><name>SVNPathAuthz_cmd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>ACCESS_CONF</name>|<name>RSRC_CONF</name></expr></argument>,
<argument><expr>"control path-based authz by enabling subrequests(On,default), "
"disabling subrequests(Off), or"
"querying mod_authz_svn directly(" <name>PATHAUTHZ_BYPASS_ARG</name> ")"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"SVNListParentPath"</expr></argument>, <argument><expr><name>SVNListParentPath_cmd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>ACCESS_CONF</name>|<name>RSRC_CONF</name></expr></argument>, <argument><expr>"allow GET of SVNParentPath."</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"SVNMasterURI"</expr></argument>, <argument><expr><name>SVNMasterURI_cmd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"specifies a URI to access a master Subversion repository"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"SVNActivitiesDB"</expr></argument>, <argument><expr><name>SVNActivitiesDB_cmd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"specifies the location in the filesystem in which the "
"activities database(s) should be stored"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"SVNAllowBulkUpdates"</expr></argument>, <argument><expr><name>SVNAllowBulkUpdates_cmd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>ACCESS_CONF</name>|<name>RSRC_CONF</name></expr></argument>,
<argument><expr>"enables support for bulk update-style requests (as opposed to "
"only skeletal reports that require additional per-file "
"downloads."</expr></argument>)</argument_list></call></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>dav_provider</name></type> <name>provider</name> <init>= <expr><block>{
<expr>&amp;<name>dav_svn__hooks_repository</name></expr>,
<expr>&amp;<name>dav_svn__hooks_propdb</name></expr>,
<expr>&amp;<name>dav_svn__hooks_locks</name></expr>,
<expr>&amp;<name>dav_svn__hooks_vsn</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_hook_pre_config</name><argument_list>(<argument><expr><name>init_dso</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_REALLY_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_post_config</name><argument_list>(<argument><expr><name>init</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dav_register_provider</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr>"svn"</expr></argument>, <argument><expr>&amp;<name>provider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_register_input_filter</name><argument_list>(<argument><expr>"SVN-MERGE"</expr></argument>, <argument><expr><name>merge_xml_in_filter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>AP_FTYPE_RESOURCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_insert_filter</name><argument_list>(<argument><expr><name>merge_xml_filter_insert</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dav_hook_gather_propsets</name><argument_list>(<argument><expr><name>dav_svn__gather_propsets</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dav_hook_find_liveprop</name><argument_list>(<argument><expr><name>dav_svn__find_liveprop</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dav_hook_insert_all_liveprops</name><argument_list>(<argument><expr><name>dav_svn__insert_all_liveprops</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dav_register_liveprop_group</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr>&amp;<name>dav_svn__liveprop_group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_register_output_filter</name><argument_list>(<argument><expr>"LocationRewrite"</expr></argument>, <argument><expr><name>dav_svn__location_header_filter</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AP_FTYPE_CONTENT_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_register_output_filter</name><argument_list>(<argument><expr>"ReposRewrite"</expr></argument>, <argument><expr><name>dav_svn__location_body_filter</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AP_FTYPE_CONTENT_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_register_input_filter</name><argument_list>(<argument><expr>"IncomingRewrite"</expr></argument>, <argument><expr><name>dav_svn__location_in_filter</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AP_FTYPE_CONTENT_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_fixups</name><argument_list>(<argument><expr><name>dav_svn__proxy_merge_fixup</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>dav_svn_module</name> <init>= <expr><block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>create_dir_config</name></expr>,
<expr><name>merge_dir_config</name></expr>,
<expr><name>create_server_config</name></expr>,
<expr><name>merge_server_config</name></expr>,
<expr><name>cmds</name></expr>,
<expr><name>register_hooks</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
</unit>
