<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/mod_dav_svn/liveprops.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_tables.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_md5.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;httpd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_core.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util_xml.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mod_dav.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_dav.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_md5.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_props.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"private/svn_dav_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dav_svn.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> * <specifier>const</specifier></type> <name><name>namespace_uris</name><index>[]</index></name> <init>= <expr><block>{
<expr>"DAV:"</expr>,
<expr><name>SVN_DAV_PROP_NS_DAV</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<enum>enum <block>{
<decl><name>NAMESPACE_URI_DAV</name></decl>,
<decl><name>NAMESPACE_URI</name></decl>
}</block>;</enum>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_RO_DAV_PROP</name><parameter_list>(<param><type><name>name</name></type></param>)</parameter_list></cpp:macro> <cpp:value>{ NAMESPACE_URI_DAV, #name, DAV_PROPID_##name, 0 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_RW_DAV_PROP</name><parameter_list>(<param><type><name>name</name></type></param>)</parameter_list></cpp:macro> <cpp:value>{ NAMESPACE_URI_DAV, #name, DAV_PROPID_##name, 1 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_RO_DAV_PROP2</name><parameter_list>(<param><type><name>sym</name></type></param>,<param><type><name>name</name></type></param>)</parameter_list></cpp:macro> <cpp:value>{ NAMESPACE_URI_DAV, #name, DAV_PROPID_##sym, 0 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_RW_DAV_PROP2</name><parameter_list>(<param><type><name>sym</name></type></param>,<param><type><name>name</name></type></param>)</parameter_list></cpp:macro> <cpp:value>{ NAMESPACE_URI_DAV, #name, DAV_PROPID_##sym, 1 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_RO_SVN_PROP</name><parameter_list>(<param><type><name>sym</name></type></param>,<param><type><name>name</name></type></param>)</parameter_list></cpp:macro> <cpp:value>{ NAMESPACE_URI, #name, SVN_PROPID_##sym, 0 }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_RW_SVN_PROP</name><parameter_list>(<param><type><name>sym</name></type></param>,<param><type><name>name</name></type></param>)</parameter_list></cpp:macro> <cpp:value>{ NAMESPACE_URI, #name, SVN_PROPID_##sym, 1 }</cpp:value></cpp:define>
<enum>enum <block>{
<decl><name>SVN_PROPID_baseline_relative_path</name> <init>= <expr>1</expr></init></decl>,
<decl><name>SVN_PROPID_md5_checksum</name></decl>,
<decl><name>SVN_PROPID_repository_uuid</name></decl>,
<decl><name>SVN_PROPID_deadprop_count</name></decl>
}</block>;</enum>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>dav_liveprop_spec</name></type> <name><name>props</name><index>[]</index></name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
SVN_RO_DAV_PROP(getcontentlanguage),
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><call><name>SVN_RO_DAV_PROP</name><argument_list>(<argument><expr><name>getcontentlength</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_RO_DAV_PROP</name><argument_list>(<argument><expr><name>getcontenttype</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_RO_DAV_PROP</name><argument_list>(<argument><expr><name>getetag</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_RO_DAV_PROP</name><argument_list>(<argument><expr><name>creationdate</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_RO_DAV_PROP</name><argument_list>(<argument><expr><name>getlastmodified</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_RO_DAV_PROP2</name><argument_list>(<argument><expr><name>baseline_collection</name></expr></argument>, <argument><expr><name>baseline</name>-<name>collection</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_RO_DAV_PROP2</name><argument_list>(<argument><expr><name>checked_in</name></expr></argument>, <argument><expr><name>checked</name>-<name>in</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_RO_DAV_PROP2</name><argument_list>(<argument><expr><name>version_controlled_configuration</name></expr></argument>,
<argument><expr><name>version</name>-<name>controlled</name>-<name>configuration</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_RO_DAV_PROP2</name><argument_list>(<argument><expr><name>version_name</name></expr></argument>, <argument><expr><name>version</name>-<name>name</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_RO_DAV_PROP2</name><argument_list>(<argument><expr><name>creator_displayname</name></expr></argument>, <argument><expr><name>creator</name>-<name>displayname</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_RO_DAV_PROP2</name><argument_list>(<argument><expr><name>auto_version</name></expr></argument>, <argument><expr><name>auto</name>-<name>version</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_RO_SVN_PROP</name><argument_list>(<argument><expr><name>baseline_relative_path</name></expr></argument>, <argument><expr><name>baseline</name>-<name>relative</name>-<name>path</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_RO_SVN_PROP</name><argument_list>(<argument><expr><name>md5_checksum</name></expr></argument>, <argument><expr><name>md5</name>-<name>checksum</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_RO_SVN_PROP</name><argument_list>(<argument><expr><name>repository_uuid</name></expr></argument>, <argument><expr><name>repository</name>-<name>uuid</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_RO_SVN_PROP</name><argument_list>(<argument><expr><name>deadprop_count</name></expr></argument>, <argument><expr><name>deadprop</name>-<name>count</name></expr></argument>)</argument_list></call></expr>,
<expr><block>{ <expr>0</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>get_path_revprop</name><parameter_list>(<param><decl><type><name>svn_string_t</name> **</type><name>propval</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>committed_rev</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>propname</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>*<name>propval</name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr>! <call><name>dav_svn__allow_read</name><argument_list>(<argument><expr><name>resource</name></expr></argument>, <argument><expr><name>committed_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<return>return <expr><call><name>svn_repos_fs_revision_prop</name><argument_list>(<argument><expr><name>propval</name></expr></argument>,
<argument><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>repos</name>-&gt;<name>repos</name></name></expr></argument>,
<argument><expr><name>committed_rev</name></expr></argument>,
<argument><expr><name>propname</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<enum>enum <name>time_format</name> <block>{
<decl><name>time_format_iso8601</name></decl>,
<decl><name>time_format_rfc1123</name></decl>
}</block>;</enum>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>
<name>get_last_modified_time</name><argument_list>(<argument><expr>const <name>char</name> **<name>datestring</name></expr></argument>,
<argument><expr><name>apr_time_t</name> *<name>timeval</name></expr></argument>,
<argument><expr>const <name>dav_resource</name> *<name>resource</name></expr></argument>,
<argument>enum <expr><name>time_format</name> <name>format</name></expr></argument>,
<argument><expr><name>apr_pool_t</name> *<name>pool</name></expr></argument>)</argument_list> <block>{
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>committed_rev</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>committed_date</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>serr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>timeval_tmp</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>datestring</name> == <name>NULL</name>) &amp;&amp; (<name>timeval</name> == <name>NULL</name>)</expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<if>if <condition>(<expr><name><name>resource</name>-&gt;<name>baselined</name></name> &amp;&amp; <name><name>resource</name>-&gt;<name>type</name></name> == <name>DAV_RESOURCE_TYPE_VERSION</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>committed_rev</name> = <name><name>resource</name>-&gt;<name>info</name>-&gt;<name>root</name>.<name>rev</name></name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>resource</name>-&gt;<name>type</name></name> == <name>DAV_RESOURCE_TYPE_REGULAR</name>
|| <name><name>resource</name>-&gt;<name>type</name></name> == <name>DAV_RESOURCE_TYPE_WORKING</name>
|| <name><name>resource</name>-&gt;<name>type</name></name> == <name>DAV_RESOURCE_TYPE_VERSION</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>serr</name> = <call><name>svn_fs_node_created_rev</name><argument_list>(<argument><expr>&amp;<name>committed_rev</name></expr></argument>,
<argument><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>root</name>.<name>root</name></name></expr></argument>,
<argument><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>repos_path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>serr</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>serr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<return>return <expr>1</expr>;</return>
}</block></else></if></else></if>
<expr_stmt><expr><name>serr</name> = <call><name>get_path_revprop</name><argument_list>(<argument><expr>&amp;<name>committed_date</name></expr></argument>,
<argument><expr><name>resource</name></expr></argument>,
<argument><expr><name>committed_rev</name></expr></argument>,
<argument><expr><name>SVN_PROP_REVISION_DATE</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>serr</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>serr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>committed_date</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>1</expr>;</return></then></if>
<expr_stmt><expr><name>serr</name> = <call><name>svn_time_from_cstring</name><argument_list>(<argument><expr>&amp;<name>timeval_tmp</name></expr></argument>, <argument><expr><name><name>committed_date</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>serr</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>serr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>timeval</name></expr>)</condition><then>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>timeval</name></expr></argument>, <argument><expr>&amp;<name>timeval_tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>timeval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>! <name>datestring</name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<if>if <condition>(<expr><name>format</name> == <name>time_format_iso8601</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>datestring</name> = <name><name>committed_date</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>format</name> == <name>time_format_rfc1123</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_time_exp_t</name></type> <name>tms</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<expr_stmt><expr><name>status</name> = <call><name>apr_time_exp_gmt</name><argument_list>(<argument><expr>&amp;<name>tms</name></expr></argument>, <argument><expr><name>timeval_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr>1</expr>;</return></then></if>
<expr_stmt><expr>*<name>datestring</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s, %.2d %s %d %.2d:%.2d:%.2d GMT"</expr></argument>,
<argument><expr><name><name>apr_day_snames</name><index>[<expr><name><name>tms</name>.<name>tm_wday</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>tms</name>.<name>tm_mday</name></name></expr></argument>, <argument><expr><name><name>apr_month_snames</name><index>[<expr><name><name>tms</name>.<name>tm_mon</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>tms</name>.<name>tm_year</name></name> + 1900</expr></argument>,
<argument><expr><name><name>tms</name>.<name>tm_hour</name></name></expr></argument>, <argument><expr><name><name>tms</name>.<name>tm_min</name></name></expr></argument>, <argument><expr><name><name>tms</name>.<name>tm_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr>1</expr>;</return>
}</block></else></if></else></if>
<return>return <expr>0</expr>;</return>
}</block></decl></decl_stmt>
<function><type><specifier>static</specifier> <name>dav_prop_insert</name></type>
<name>insert_prop</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><name>int</name></type> <name>propid</name></decl></param>,
<param><decl><type><name>dav_prop_insert</name></type> <name>what</name></decl></param>,
<param><decl><type><name>apr_text_header</name> *</type><name>phdr</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>response_pool</name> <init>= <expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>p</name> <init>= <expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>pool</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dav_liveprop_spec</name> *</type><name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>global_ns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>serr</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(! <name><name>resource</name>-&gt;<name>exists</name></name>)
&amp;&amp; (<name>propid</name> != <name>DAV_PROPID_version_controlled_configuration</name>)
&amp;&amp; (<name>propid</name> != <name>SVN_PROPID_baseline_relative_path</name>)</expr>)</condition><then>
<return>return <expr><name>DAV_PROP_INSERT_NOTSUPP</name></expr>;</return></then></if>
<switch>switch <condition>(<expr><name>propid</name></expr>)</condition> <block>{
<case>case <expr><name>DAV_PROPID_getlastmodified</name></expr>:
</case><case>case <expr><name>DAV_PROPID_creationdate</name></expr>: <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>datestring</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>timeval</name></decl>;</decl_stmt>
<enum>enum <name>time_format</name> <name>format</name>;</enum>
<if>if <condition>(<expr><name><name>resource</name>-&gt;<name>type</name></name> == <name>DAV_RESOURCE_TYPE_PRIVATE</name>
&amp;&amp; <name><name>resource</name>-&gt;<name>info</name>-&gt;<name>restype</name></name> == <name>DAV_SVN_RESTYPE_VCC</name></expr>)</condition><then> <block>{
<return>return <expr><name>DAV_PROP_INSERT_NOTSUPP</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>propid</name> == <name>DAV_PROPID_creationdate</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>format</name> = <name>time_format_iso8601</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>format</name> = <name>time_format_rfc1123</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr>0 != <call><name>get_last_modified_time</name><argument_list>(<argument><expr>&amp;<name>datestring</name></expr></argument>, <argument><expr>&amp;<name>timeval</name></expr></argument>,
<argument><expr><name>resource</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>DAV_PROP_INSERT_NOTDEF</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>value</name> = <call><name>apr_xml_quote_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>datestring</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block>
</case><case>case <expr><name>DAV_PROPID_creator_displayname</name></expr>: <block>{
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>committed_rev</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>last_author</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>resource</name>-&gt;<name>type</name></name> == <name>DAV_RESOURCE_TYPE_PRIVATE</name>
&amp;&amp; <name><name>resource</name>-&gt;<name>info</name>-&gt;<name>restype</name></name> == <name>DAV_SVN_RESTYPE_VCC</name></expr>)</condition><then> <block>{
<return>return <expr><name>DAV_PROP_INSERT_NOTSUPP</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>resource</name>-&gt;<name>baselined</name></name> &amp;&amp; <name><name>resource</name>-&gt;<name>type</name></name> == <name>DAV_RESOURCE_TYPE_VERSION</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>committed_rev</name> = <name><name>resource</name>-&gt;<name>info</name>-&gt;<name>root</name>.<name>rev</name></name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>resource</name>-&gt;<name>type</name></name> == <name>DAV_RESOURCE_TYPE_REGULAR</name>
|| <name><name>resource</name>-&gt;<name>type</name></name> == <name>DAV_RESOURCE_TYPE_WORKING</name>
|| <name><name>resource</name>-&gt;<name>type</name></name> == <name>DAV_RESOURCE_TYPE_VERSION</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>serr</name> = <call><name>svn_fs_node_created_rev</name><argument_list>(<argument><expr>&amp;<name>committed_rev</name></expr></argument>,
<argument><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>root</name>.<name>root</name></name></expr></argument>,
<argument><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>repos_path</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>serr</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>serr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> = "###error###"</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></then> <else>else <block>{
<return>return <expr><name>DAV_PROP_INSERT_NOTSUPP</name></expr>;</return>
}</block></else></if></else></if>
<expr_stmt><expr><name>serr</name> = <call><name>get_path_revprop</name><argument_list>(<argument><expr>&amp;<name>last_author</name></expr></argument>,
<argument><expr><name>resource</name></expr></argument>,
<argument><expr><name>committed_rev</name></expr></argument>,
<argument><expr><name>SVN_PROP_REVISION_AUTHOR</name></expr></argument>,
<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>serr</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>serr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> = "###error###"</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><name>last_author</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>DAV_PROP_INSERT_NOTDEF</name></expr>;</return></then></if>
<expr_stmt><expr><name>value</name> = <call><name>apr_xml_quote_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>last_author</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block>
</case><case>case <expr><name>DAV_PROPID_getcontentlanguage</name></expr>:
<return>return <expr><name>DAV_PROP_INSERT_NOTSUPP</name></expr>;</return>
<break>break;</break>
</case><case>case <expr><name>DAV_PROPID_getcontentlength</name></expr>: <block>{
<decl_stmt><decl><type><name>svn_filesize_t</name></type> <name>len</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>resource</name>-&gt;<name>collection</name></name> || <name><name>resource</name>-&gt;<name>baselined</name></name></expr>)</condition><then>
<return>return <expr><name>DAV_PROP_INSERT_NOTSUPP</name></expr>;</return></then></if>
<expr_stmt><expr><name>serr</name> = <call><name>svn_fs_file_length</name><argument_list>(<argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>root</name>.<name>root</name></name></expr></argument>,
<argument><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>repos_path</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>serr</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>serr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> = "0"</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>value</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"%" <name>SVN_FILESIZE_T_FMT</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block>
</case><case>case <expr><name>DAV_PROPID_getcontenttype</name></expr>: <block>{
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>pval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mime_type</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>resource</name>-&gt;<name>baselined</name></name> &amp;&amp; <name><name>resource</name>-&gt;<name>type</name></name> == <name>DAV_RESOURCE_TYPE_VERSION</name></expr>)</condition><then>
<return>return <expr><name>DAV_PROP_INSERT_NOTSUPP</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>resource</name>-&gt;<name>type</name></name> == <name>DAV_RESOURCE_TYPE_PRIVATE</name>
&amp;&amp; <name><name>resource</name>-&gt;<name>info</name>-&gt;<name>restype</name></name> == <name>DAV_SVN_RESTYPE_VCC</name></expr>)</condition><then> <block>{
<return>return <expr><name>DAV_PROP_INSERT_NOTSUPP</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>resource</name>-&gt;<name>collection</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>repos</name>-&gt;<name>xslt_uri</name></name></expr>)</condition><then>
<expr_stmt><expr><name>mime_type</name> = "text/xml"</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>mime_type</name> = "text/html; charset=UTF-8"</expr>;</expr_stmt></else></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr>(<name>serr</name> = <call><name>svn_fs_node_prop</name><argument_list>(<argument><expr>&amp;<name>pval</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>root</name>.<name>root</name></name></expr></argument>,
<argument><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>repos_path</name></name></expr></argument>,
<argument><expr><name>SVN_PROP_MIME_TYPE</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>serr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pval</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>pval</name></expr>)</condition><then>
<expr_stmt><expr><name>mime_type</name> = <name><name>pval</name>-&gt;<name>data</name></name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>(! <name><name>resource</name>-&gt;<name>info</name>-&gt;<name>repos</name>-&gt;<name>is_svn_client</name></name>)
&amp;&amp; <name><name>resource</name>-&gt;<name>info</name>-&gt;<name>r</name>-&gt;<name>content_type</name></name></expr>)</condition><then>
<expr_stmt><expr><name>mime_type</name> = <name><name>resource</name>-&gt;<name>info</name>-&gt;<name>r</name>-&gt;<name>content_type</name></name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>mime_type</name> = <call><name>ap_default_type</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>
<if>if <condition>(<expr>(<name>serr</name> = <call><name>svn_mime_type_validate</name><argument_list>(<argument><expr><name>mime_type</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>serr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DAV_PROP_INSERT_NOTDEF</name></expr>;</return>
}</block></then></if>
}</block></else></if>
<expr_stmt><expr><name>value</name> = <name>mime_type</name></expr>;</expr_stmt>
<break>break;</break>
}</block>
</case><case>case <expr><name>DAV_PROPID_getetag</name></expr>:
<if>if <condition>(<expr><name><name>resource</name>-&gt;<name>type</name></name> == <name>DAV_RESOURCE_TYPE_PRIVATE</name>
&amp;&amp; <name><name>resource</name>-&gt;<name>info</name>-&gt;<name>restype</name></name> == <name>DAV_SVN_RESTYPE_VCC</name></expr>)</condition><then> <block>{
<return>return <expr><name>DAV_PROP_INSERT_NOTSUPP</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>value</name> = <call><name>dav_svn__getetag</name><argument_list>(<argument><expr><name>resource</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>DAV_PROPID_auto_version</name></expr>:
<if>if <condition>(<expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>repos</name>-&gt;<name>autoversioning</name></name></expr>)</condition><then>
<expr_stmt><expr><name>value</name> = "DAV:checkout-checkin"</expr>;</expr_stmt></then>
<else>else
<return>return <expr><name>DAV_PROP_INSERT_NOTDEF</name></expr>;</return></else></if>
<break>break;</break>
</case><case>case <expr><name>DAV_PROPID_baseline_collection</name></expr>:
<if>if <condition>(<expr><name><name>resource</name>-&gt;<name>type</name></name> != <name>DAV_RESOURCE_TYPE_VERSION</name> || !<name><name>resource</name>-&gt;<name>baselined</name></name></expr>)</condition><then>
<return>return <expr><name>DAV_PROP_INSERT_NOTSUPP</name></expr>;</return></then></if>
<expr_stmt><expr><name>value</name> = <call><name>dav_svn__build_uri</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>repos</name></name></expr></argument>, <argument><expr><name>DAV_SVN__BUILD_URI_BC</name></expr></argument>,
<argument><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>root</name>.<name>rev</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>1</expr></argument> , <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>DAV_PROPID_checked_in</name></expr>:
<if>if <condition>(<expr><name><name>resource</name>-&gt;<name>type</name></name> == <name>DAV_RESOURCE_TYPE_PRIVATE</name>
&amp;&amp; <name><name>resource</name>-&gt;<name>info</name>-&gt;<name>restype</name></name> == <name>DAV_SVN_RESTYPE_VCC</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>revnum</name></decl>;</decl_stmt>
<expr_stmt><expr><name>serr</name> = <call><name>svn_fs_youngest_rev</name><argument_list>(<argument><expr>&amp;<name>revnum</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>repos</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>serr</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>serr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> = "###error###"</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>s</name> = <call><name>dav_svn__build_uri</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>repos</name></name></expr></argument>,
<argument><expr><name>DAV_SVN__BUILD_URI_BASELINE</name></expr></argument>,
<argument><expr><name>revnum</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument> , <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"&lt;D:href&gt;%s&lt;/D:href&gt;"</expr></argument>,
<argument><expr><call><name>apr_xml_quote_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>resource</name>-&gt;<name>type</name></name> != <name>DAV_RESOURCE_TYPE_REGULAR</name></expr>)</condition><then> <block>{
<return>return <expr><name>DAV_PROP_INSERT_NOTSUPP</name></expr>;</return>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev_to_use</name> <init>=
<expr><call><name>dav_svn__get_safe_cr</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>root</name>.<name>root</name></name></expr></argument>,
<argument><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>repos_path</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>s</name> = <call><name>dav_svn__build_uri</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>repos</name></name></expr></argument>,
<argument><expr><name>DAV_SVN__BUILD_URI_VERSION</name></expr></argument>,
<argument><expr><name>rev_to_use</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>repos_path</name></name></expr></argument>,
<argument><expr>0</expr></argument> , <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"&lt;D:href&gt;%s&lt;/D:href&gt;"</expr></argument>,
<argument><expr><call><name>apr_xml_quote_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
<break>break;</break>
</case><case>case <expr><name>DAV_PROPID_version_controlled_configuration</name></expr>:
<if>if <condition>(<expr><name><name>resource</name>-&gt;<name>type</name></name> != <name>DAV_RESOURCE_TYPE_REGULAR</name></expr>)</condition><then>
<return>return <expr><name>DAV_PROP_INSERT_NOTSUPP</name></expr>;</return></then></if>
<expr_stmt><expr><name>value</name> = <call><name>dav_svn__build_uri</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>repos</name></name></expr></argument>, <argument><expr><name>DAV_SVN__BUILD_URI_VCC</name></expr></argument>,
<argument><expr><name>SVN_IGNORED_REVNUM</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>1</expr></argument> , <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>DAV_PROPID_version_name</name></expr>:
<if>if <condition>(<expr>(<name><name>resource</name>-&gt;<name>type</name></name> != <name>DAV_RESOURCE_TYPE_VERSION</name>)
&amp;&amp; (! <name><name>resource</name>-&gt;<name>versioned</name></name>)</expr>)</condition><then>
<return>return <expr><name>DAV_PROP_INSERT_NOTSUPP</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>resource</name>-&gt;<name>type</name></name> == <name>DAV_RESOURCE_TYPE_PRIVATE</name>
&amp;&amp; <name><name>resource</name>-&gt;<name>info</name>-&gt;<name>restype</name></name> == <name>DAV_SVN_RESTYPE_VCC</name></expr>)</condition><then> <block>{
<return>return <expr><name>DAV_PROP_INSERT_NOTSUPP</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>resource</name>-&gt;<name>baselined</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>value</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"%ld"</expr></argument>,
<argument><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>root</name>.<name>rev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>committed_rev</name> <init>= <expr><name>SVN_INVALID_REVNUM</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>serr</name> = <call><name>svn_fs_node_created_rev</name><argument_list>(<argument><expr>&amp;<name>committed_rev</name></expr></argument>,
<argument><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>root</name>.<name>root</name></name></expr></argument>,
<argument><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>repos_path</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>serr</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>serr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> = "###error###"</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>s</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"%ld"</expr></argument>, <argument><expr><name>committed_rev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> = <call><name>apr_xml_quote_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<break>break;</break>
</case><case>case <expr><name>SVN_PROPID_baseline_relative_path</name></expr>:
<if>if <condition>(<expr><name><name>resource</name>-&gt;<name>type</name></name> != <name>DAV_RESOURCE_TYPE_REGULAR</name></expr>)</condition><then>
<return>return <expr><name>DAV_PROP_INSERT_NOTSUPP</name></expr>;</return></then></if>
<expr_stmt><expr><name>s</name> = <name><name>resource</name>-&gt;<name>info</name>-&gt;<name>repos_path</name></name> + 1</expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> = <call><name>apr_xml_quote_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SVN_PROPID_md5_checksum</name></expr>:
<if>if <condition>(<expr>(! <name><name>resource</name>-&gt;<name>collection</name></name>)
&amp;&amp; (! <name><name>resource</name>-&gt;<name>baselined</name></name>)
&amp;&amp; (<name><name>resource</name>-&gt;<name>type</name></name> == <name>DAV_RESOURCE_TYPE_REGULAR</name>
|| <name><name>resource</name>-&gt;<name>type</name></name> == <name>DAV_RESOURCE_TYPE_WORKING</name>
|| <name><name>resource</name>-&gt;<name>type</name></name> == <name>DAV_RESOURCE_TYPE_VERSION</name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><name>APR_MD5_DIGESTSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>serr</name> = <call><name>svn_fs_file_md5_checksum</name><argument_list>(<argument><expr><name>digest</name></expr></argument>,
<argument><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>root</name>.<name>root</name></name></expr></argument>,
<argument><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>repos_path</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>serr</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>serr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> = "###error###"</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>value</name> = <call><name>svn_md5_digest_to_cstring</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>value</name></expr>)</condition><then>
<return>return <expr><name>DAV_PROP_INSERT_NOTSUPP</name></expr>;</return></then></if>
}</block></then> <else>else
<return>return <expr><name>DAV_PROP_INSERT_NOTSUPP</name></expr>;</return></else></if>
<break>break;</break>
</case><case>case <expr><name>SVN_PROPID_repository_uuid</name></expr>:
<expr_stmt><expr><name>serr</name> = <call><name>svn_fs_get_uuid</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>repos</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>serr</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>serr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> = "###error###"</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<break>break;</break>
</case><case>case <expr><name>SVN_PROPID_deadprop_count</name></expr>: <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>propcount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>proplist</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>resource</name>-&gt;<name>type</name></name> != <name>DAV_RESOURCE_TYPE_REGULAR</name></expr>)</condition><then>
<return>return <expr><name>DAV_PROP_INSERT_NOTSUPP</name></expr>;</return></then></if>
<expr_stmt><expr><name>serr</name> = <call><name>svn_fs_node_proplist</name><argument_list>(<argument><expr>&amp;<name>proplist</name></expr></argument>,
<argument><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>root</name>.<name>root</name></name></expr></argument>,
<argument><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>repos_path</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>serr</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>serr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> = "###error###"</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>propcount</name> = <call><name>apr_hash_count</name><argument_list>(<argument><expr><name>proplist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"%u"</expr></argument>, <argument><expr><name>propcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block>
</case><default>default:
<return>return <expr><name>DAV_PROP_INSERT_NOTDEF</name></expr>;</return>
</default>}</block></switch>
<expr_stmt><expr><name>global_ns</name> = <call><name>dav_get_liveprop_info</name><argument_list>(<argument><expr><name>propid</name></expr></argument>, <argument><expr>&amp;<name>dav_svn__liveprop_group</name></expr></argument>, <argument><expr>&amp;<name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>what</name> == <name>DAV_PROP_INSERT_NAME</name>
|| (<name>what</name> == <name>DAV_PROP_INSERT_VALUE</name> &amp;&amp; *<name>value</name> == '\0')</expr>)</condition><then> <block>{
<expr_stmt><expr><name>s</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>response_pool</name></expr></argument>, <argument><expr>"&lt;lp%d:%s/&gt;" <name>DEBUG_CR</name></expr></argument>, <argument><expr><name>global_ns</name></expr></argument>,
<argument><expr><name><name>info</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>what</name> == <name>DAV_PROP_INSERT_VALUE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>s</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>response_pool</name></expr></argument>, <argument><expr>"&lt;lp%d:%s&gt;%s&lt;/lp%d:%s&gt;" <name>DEBUG_CR</name></expr></argument>,
<argument><expr><name>global_ns</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>global_ns</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>s</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>response_pool</name></expr></argument>,
<argument><expr>"&lt;D:supported-live-property D:name=\"%s\" "
"D:namespace=\"%s\"/&gt;" <name>DEBUG_CR</name></expr></argument>,
<argument><expr><name><name>info</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>namespace_uris</name><index>[<expr><name><name>info</name>-&gt;<name>ns</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
<expr_stmt><expr><call><name>apr_text_append</name><argument_list>(<argument><expr><name>response_pool</name></expr></argument>, <argument><expr><name>phdr</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>what</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>is_writable</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>, <param><decl><type><name>int</name></type> <name>propid</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>dav_liveprop_spec</name> *</type><name>info</name></decl>;</decl_stmt>
<expr_stmt><expr>(<name>void</name>) <call><name>dav_get_liveprop_info</name><argument_list>(<argument><expr><name>propid</name></expr></argument>, <argument><expr>&amp;<name>dav_svn__liveprop_group</name></expr></argument>, <argument><expr>&amp;<name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>info</name>-&gt;<name>is_writable</name></name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type>
<name>patch_validate</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_xml_elem</name> *</type><name>elem</name></decl></param>,
<param><decl><type><name>int</name></type> <name>operation</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>context</name></decl></param>,
<param><decl><type><name>int</name> *</type><name>defer_to_dead</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type>
<name>patch_exec</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_xml_elem</name> *</type><name>elem</name></decl></param>,
<param><decl><type><name>int</name></type> <name>operation</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>context</name></decl></param>,
<param><decl><type><name>dav_liveprop_rollback</name> **</type><name>rollback_ctx</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>patch_commit</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><name>int</name></type> <name>operation</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>context</name></decl></param>,
<param><decl><type><name>dav_liveprop_rollback</name> *</type><name>rollback_ctx</name></decl></param>)</parameter_list> <block>{
}</block></function>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type>
<name>patch_rollback</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><name>int</name></type> <name>operation</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>context</name></decl></param>,
<param><decl><type><name>dav_liveprop_rollback</name> *</type><name>rollback_ctx</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>dav_hooks_liveprop</name></type> <name>hooks_liveprop</name> <init>= <expr><block>{
<expr><name>insert_prop</name></expr>,
<expr><name>is_writable</name></expr>,
<expr><name>namespace_uris</name></expr>,
<expr><name>patch_validate</name></expr>,
<expr><name>patch_exec</name></expr>,
<expr><name>patch_commit</name></expr>,
<expr><name>patch_rollback</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dav_liveprop_group</name></type> <name>dav_svn__liveprop_group</name> <init>= <expr><block>{
<expr><name>props</name></expr>,
<expr><name>namespace_uris</name></expr>,
<expr>&amp;<name>hooks_liveprop</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type>
<name>dav_svn__gather_propsets</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> *</type><name>uris</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
*(const char **)apr_array_push(uris) =
"&lt;http://subversion.tigris.org/dav/propset/svn/1&gt;";
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<function><type><name>int</name></type>
<name>dav_svn__find_liveprop</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ns_uri</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_hooks_liveprop</name> **</type><name>hooks</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>resource</name>-&gt;<name>hooks</name></name> != &amp;<name>dav_svn__hooks_repository</name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<return>return <expr><call><name>dav_do_find_liveprop</name><argument_list>(<argument><expr><name>ns_uri</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>&amp;<name>dav_svn__liveprop_group</name></expr></argument>, <argument><expr><name>hooks</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>dav_svn__insert_all_liveprops</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><name>dav_prop_insert</name></type> <name>what</name></decl></param>,
<param><decl><type><name>apr_text_header</name> *</type><name>phdr</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>dav_liveprop_spec</name> *</type><name>spec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>resource</name>-&gt;<name>hooks</name></name> != &amp;<name>dav_svn__hooks_repository</name></expr>)</condition><then>
<return>return;</return></then></if>
<if>if <condition>(<expr>!<name><name>resource</name>-&gt;<name>exists</name></name></expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><name>pool</name> = <name><name>resource</name>-&gt;<name>info</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>subpool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>pool</name></name> = <name>subpool</name></expr>;</expr_stmt>
<for>for (<init><expr><name>spec</name> = <name>props</name></expr>;</init> <condition><expr><name><name>spec</name>-&gt;<name>name</name></name> != <name>NULL</name></expr>;</condition> <incr><expr>++<name>spec</name></expr></incr>) <block>{
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>(<name>void</name>) <call><name>insert_prop</name><argument_list>(<argument><expr><name>resource</name></expr></argument>, <argument><expr><name><name>spec</name>-&gt;<name>propid</name></name></expr></argument>, <argument><expr><name>what</name></expr></argument>, <argument><expr><name>phdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
