<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/mod_dav_svn/util.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_xml.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_uri.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mod_dav.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_dav.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_base64.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dav_svn.h"</cpp:file></cpp:include>
<function><type><name>dav_error</name> *</type>
<name>dav_svn__new_error_tag</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><name>int</name></type> <name>status</name></decl></param>,
<param><decl><type><name>int</name></type> <name>error_id</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>desc</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>namespace</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tagname</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name>errno</name> = 0</expr>;</expr_stmt>
<return>return <expr><call><name>dav_new_error_tag</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>error_id</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>namespace</name></expr></argument>, <argument><expr><name>tagname</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type>
<name>build_error_chain</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>svn_error_t</name> *</type><name>err</name></decl></param>, <param><decl><type><name>int</name></type> <name>status</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>msg</name> <init>= <expr><name><name>err</name>-&gt;<name>message</name></name> ? <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>message</name></name></expr></argument>)</argument_list></call> : <name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_error</name> *</type><name>derr</name> <init>= <expr><call><name>dav_svn__new_error_tag</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>apr_err</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>,
<argument><expr><name>SVN_DAV_ERROR_NAMESPACE</name></expr></argument>,
<argument><expr><name>SVN_DAV_ERROR_TAG</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>err</name>-&gt;<name>child</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>derr</name>-&gt;<name>prev</name></name> = <call><name>build_error_chain</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>child</name></name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>derr</name></expr>;</return>
}</block></function>
<function><type><name>dav_error</name> *</type>
<name>dav_svn__convert_err</name><parameter_list>(<param><decl><type><name>svn_error_t</name> *</type><name>serr</name></decl></param>,
<param><decl><type><name>int</name></type> <name>status</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>message</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dav_error</name> *</type><name>derr</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>serr</name>-&gt;<name>apr_err</name></name></expr>)</condition> <block>{
<case>case <expr><name>SVN_ERR_FS_NOT_FOUND</name></expr>:
<expr_stmt><expr><name>status</name> = <name>HTTP_NOT_FOUND</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SVN_ERR_UNSUPPORTED_FEATURE</name></expr>:
<expr_stmt><expr><name>status</name> = <name>HTTP_NOT_IMPLEMENTED</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SVN_ERR_FS_PATH_ALREADY_LOCKED</name></expr>:
<expr_stmt><expr><name>status</name> = <name>HTTP_LOCKED</name></expr>;</expr_stmt>
<break>break;</break>
</case>}</block></switch>
<expr_stmt><expr><name>derr</name> = <call><name>build_error_chain</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>serr</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>message</name> != <name>NULL</name>
&amp;&amp; <name><name>serr</name>-&gt;<name>apr_err</name></name> != <name>SVN_ERR_REPOS_HOOK_FAILURE</name></expr>)</condition><then>
<expr_stmt><expr><name>derr</name> = <call><name>dav_push_error</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>serr</name>-&gt;<name>apr_err</name></name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>derr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>serr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>derr</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>get_last_history_rev</name><parameter_list>(<param><decl><type><name>svn_revnum_t</name> *</type><name>revision</name></decl></param>,
<param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_history_t</name> *</type><name>history</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ignored</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_node_history</name><argument_list>(<argument><expr>&amp;<name>history</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_history_prev</name><argument_list>(<argument><expr>&amp;<name>history</name></expr></argument>, <argument><expr><name>history</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_fs_history_location</name><argument_list>(<argument><expr>&amp;<name>ignored</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>history</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>svn_revnum_t</name></type>
<name>dav_svn__get_safe_cr</name><parameter_list>(<param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>revision</name> <init>= <expr><call><name>svn_fs_revision_root_revision</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>history_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>other_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name> <init>= <expr><call><name>svn_fs_root_fs</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_fs_id_t</name> *</type><name>id</name></decl>, *<decl><type ref="prev"/><name>other_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>id</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>revision</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>err</name> = <call><name>get_last_history_rev</name><argument_list>(<argument><expr>&amp;<name>history_rev</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>revision</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>err</name> = <call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>other_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>history_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>revision</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>err</name> = <call><name>svn_fs_node_id</name><argument_list>(<argument><expr>&amp;<name>other_id</name></expr></argument>, <argument><expr><name>other_root</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>revision</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>svn_fs_compare_ids</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>other_id</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>history_rev</name></expr>;</return></then></if>
<return>return <expr><name>revision</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type>
<name>dav_svn__build_uri</name><argument_list>(<argument><expr>const <name>dav_svn_repos</name> *<name>repos</name></expr></argument>,
<argument>enum <expr><name>dav_svn__build_what</name> <name>what</name></expr></argument>,
<argument><expr><name>svn_revnum_t</name> <name>revision</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>path</name></expr></argument>,
<argument><expr><name>int</name> <name>add_href</name></expr></argument>,
<argument><expr><name>apr_pool_t</name> *<name>pool</name></expr></argument>)</argument_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>root_path</name> <init>= <expr><name><name>repos</name>-&gt;<name>root_path</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>special_uri</name> <init>= <expr><name><name>repos</name>-&gt;<name>special_uri</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path_uri</name> <init>= <expr><name>path</name> ? <call><name>svn_path_uri_encode</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call> : <name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>href1</name> <init>= <expr><name>add_href</name> ? "&lt;D:href&gt;" : ""</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>href2</name> <init>= <expr><name>add_href</name> ? "&lt;/D:href&gt;" : ""</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>root_path</name><index>[<expr>1</expr>]</index></name> == '\0'</expr>)</condition><then>
<expr_stmt><expr><name>root_path</name> = ""</expr>;</expr_stmt></then></if>
<switch>switch <condition>(<expr><name>what</name></expr>)</condition> <block>{
<case>case <expr><name>DAV_SVN__BUILD_URI_ACT_COLLECTION</name></expr>:
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s%s/%s/act/%s"</expr></argument>,
<argument><expr><name>href1</name></expr></argument>, <argument><expr><name>root_path</name></expr></argument>, <argument><expr><name>special_uri</name></expr></argument>, <argument><expr><name>href2</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>DAV_SVN__BUILD_URI_BASELINE</name></expr>:
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s%s/%s/bln/%ld%s"</expr></argument>,
<argument><expr><name>href1</name></expr></argument>, <argument><expr><name>root_path</name></expr></argument>, <argument><expr><name>special_uri</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>href2</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>DAV_SVN__BUILD_URI_BC</name></expr>:
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s%s/%s/bc/%ld/%s"</expr></argument>,
<argument><expr><name>href1</name></expr></argument>, <argument><expr><name>root_path</name></expr></argument>, <argument><expr><name>special_uri</name></expr></argument>, <argument><expr><name>revision</name></expr></argument>, <argument><expr><name>href2</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>DAV_SVN__BUILD_URI_PUBLIC</name></expr>:
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s%s%s%s"</expr></argument>,
<argument><expr><name>href1</name></expr></argument>, <argument><expr><name>root_path</name></expr></argument>, <argument><expr><name>path_uri</name></expr></argument>, <argument><expr><name>href2</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>DAV_SVN__BUILD_URI_VERSION</name></expr>:
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s%s/%s/ver/%ld%s%s"</expr></argument>,
<argument><expr><name>href1</name></expr></argument>, <argument><expr><name>root_path</name></expr></argument>, <argument><expr><name>special_uri</name></expr></argument>,
<argument><expr><name>revision</name></expr></argument>, <argument><expr><name>path_uri</name></expr></argument>, <argument><expr><name>href2</name></expr></argument>)</argument_list></call></expr>;</return>
</case><case>case <expr><name>DAV_SVN__BUILD_URI_VCC</name></expr>:
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s%s/%s/vcc/" <name>DAV_SVN__DEFAULT_VCC_NAME</name> "%s"</expr></argument>,
<argument><expr><name>href1</name></expr></argument>, <argument><expr><name>root_path</name></expr></argument>, <argument><expr><name>special_uri</name></expr></argument>, <argument><expr><name>href2</name></expr></argument>)</argument_list></call></expr>;</return>
</case><default>default:
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</default>}</block></switch>
}</block></decl></decl_stmt>
<function><type><name>svn_error_t</name> *</type>
<name>dav_svn__simple_parse_uri</name><parameter_list>(<param><decl><type><name>dav_svn__uri_info</name> *</type><name>info</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>relative</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>uri</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_uri_t</name></type> <name>comp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>slash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>created_rev_str</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>apr_uri_parse</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr>&amp;<name>comp</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then>
<goto>goto <name>malformed_uri</name>;</goto></then></if>
<if>if <condition>(<expr><name><name>comp</name>.<name>path</name></name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>path</name> = "/"</expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><call><name>ap_getparents</name><argument_list>(<argument><expr><name><name>comp</name>.<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_no2slash</name><argument_list>(<argument><expr><name><name>comp</name>.<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> = <name><name>comp</name>.<name>path</name></name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>len1</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len2</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>relative</name>-&gt;<name>info</name>-&gt;<name>repos</name>-&gt;<name>root_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>len2</name> == 1 &amp;&amp; <name><name>relative</name>-&gt;<name>info</name>-&gt;<name>repos</name>-&gt;<name>root_path</name><index>[<expr>0</expr>]</index></name> == '/'</expr>)</condition><then>
<expr_stmt><expr><name>len2</name> = 0</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>len1</name> &lt; <name>len2</name>
|| (<name>len1</name> &gt; <name>len2</name> &amp;&amp; <name><name>path</name><index>[<expr><name>len2</name></expr>]</index></name> != '/')
|| <call><name>memcmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>relative</name>-&gt;<name>info</name>-&gt;<name>repos</name>-&gt;<name>root_path</name></name></expr></argument>, <argument><expr><name>len2</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_APMOD_MALFORMED_URI</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"Unusable URI: it does not refer to this "
"repository"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>rev</name></name> = <name>SVN_INVALID_REVNUM</name></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> += <name>len2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len1</name> -= <name>len2</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>len1</name> &lt;= 1</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>info</name>-&gt;<name>repos_path</name></name> = "/"</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>++<name>path</name></expr>;</expr_stmt>
<expr_stmt><expr>--<name>len1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len2</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>relative</name>-&gt;<name>info</name>-&gt;<name>repos</name>-&gt;<name>special_uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>len1</name> &lt; <name>len2</name>
|| (<name>len1</name> &gt; <name>len2</name> &amp;&amp; <name><name>path</name><index>[<expr><name>len2</name></expr>]</index></name> != '/')
|| <call><name>memcmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>relative</name>-&gt;<name>info</name>-&gt;<name>repos</name>-&gt;<name>special_uri</name></name></expr></argument>, <argument><expr><name>len2</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>info</name>-&gt;<name>repos_path</name></name> = <call><name>svn_path_uri_decode</name><argument_list>(<argument><expr><name>path</name> - 1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>path</name> += <name>len2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len1</name> -= <name>len2</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>len1</name> &lt;= 1</expr>)</condition><then>
<goto>goto <name>unhandled_form</name>;</goto></then></if>
<expr_stmt><expr><name>slash</name> = <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>path</name> + 1</expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>slash</name> == <name>NULL</name> || <name><name>slash</name><index>[<expr>1</expr>]</index></name> == '\0'</expr>)</condition><then>
<goto>goto <name>unhandled_form</name>;</goto></then></if>
<expr_stmt><expr><name>len2</name> = <name>slash</name> - <name>path</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>len2</name> == 4 &amp;&amp; <call><name>memcmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>"/act/"</expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>info</name>-&gt;<name>activity_id</name></name> = <name>path</name> + 5</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>len2</name> == 4 &amp;&amp; <call><name>memcmp</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>"/ver/"</expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>path</name> += 5</expr>;</expr_stmt>
<expr_stmt><expr><name>len1</name> -= 5</expr>;</expr_stmt>
<expr_stmt><expr><name>slash</name> = <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>slash</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>created_rev_str</name> = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>len1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>rev</name></name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name>created_rev_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>repos_path</name></name> = "/"</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>created_rev_str</name> = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>slash</name> - <name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>rev</name></name> = <call><name>SVN_STR_TO_REV</name><argument_list>(<argument><expr><name>created_rev_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>repos_path</name></name> = <call><name>svn_path_uri_decode</name><argument_list>(<argument><expr><name>slash</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>info</name>-&gt;<name>rev</name></name> == <name>SVN_INVALID_REVNUM</name></expr>)</condition><then>
<goto>goto <name>malformed_uri</name>;</goto></then></if>
}</block></then> <else>else
<goto>goto <name>unhandled_form</name>;</goto></else></if></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
<label><name>malformed_uri</name>:</label>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_APMOD_MALFORMED_URI</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"The specified URI could not be parsed"</expr></argument>)</argument_list></call></expr>;</return>
<label><name>unhandled_form</name>:</label>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_UNSUPPORTED_FEATURE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"Unsupported URI form"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>dav_svn__find_ns</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> *</type><name>namespaces</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>uri</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>namespaces</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>APR_XML_GET_URI_ITEM</name><argument_list>(<argument><expr><name>namespaces</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>i</name></expr>;</return></then></if></for>
<return>return <expr>-1</expr>;</return>
}</block></function>
<function><type><name>svn_error_t</name> *</type>
<name>dav_svn__send_xml</name><parameter_list>(<param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>,
<param><decl><type><name>ap_filter_t</name> *</type><name>output</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fmt</name></decl></param>,
<param><decl><type>...</type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>apr_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>apr_err</name> = <call><name>apr_brigade_vprintf</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>ap_filter_flush</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>apr_err</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>output</name>-&gt;<name>c</name>-&gt;<name>aborted</name></name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_APMOD_CONNECTION_ABORTED</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>dav_error</name> *</type>
<name>dav_svn__test_canonical</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>svn_path_is_canonical</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><call><name>dav_svn__new_error_tag</name>
<argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>HTTP_BAD_REQUEST</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr>"Path '%s' is not canonicalized; "
"there is a problem with the client."</expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>SVN_DAV_ERROR_NAMESPACE</name></expr></argument>, <argument><expr><name>SVN_DAV_ERROR_TAG</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>dav_error</name> *</type>
<name>dav_svn__sanitize_error</name><parameter_list>(<param><decl><type><name>svn_error_t</name> *</type><name>serr</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>new_msg</name></decl></param>,
<param><decl><type><name>int</name></type> <name>http_status</name></decl></param>,
<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>safe_err</name> <init>= <expr><name>serr</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>new_msg</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>safe_err</name> = <call><name>svn_error_create</name><argument_list>(<argument><expr><name><name>serr</name>-&gt;<name>apr_err</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>new_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>APR_EGENERAL</name></expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"%s"</expr></argument>, <argument><expr><name><name>serr</name>-&gt;<name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>serr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><call><name>dav_svn__convert_err</name><argument_list>(<argument><expr><name>safe_err</name></expr></argument>, <argument><expr><name>http_status</name></expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>safe_err</name>-&gt;<name>message</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<struct>struct <name>brigade_write_baton</name> <block>{
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_filter_t</name> *</type><name>output</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>brigade_write_fn</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>apr_size_t</name> *</type><name>len</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>brigade_write_baton</name> *</type><name>wb</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>apr_err</name></decl>;</decl_stmt>
<expr_stmt><expr><name>apr_err</name> = <call><name>apr_brigade_write</name><argument_list>(<argument><expr><name><name>wb</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name>ap_filter_flush</name></expr></argument>, <argument><expr><name><name>wb</name>-&gt;<name>output</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr>*<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>apr_err</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_wrap_apr</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>, <argument><expr>"Error writing base64 data"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><name>svn_stream_t</name> *</type>
<name>dav_svn__make_base64_output_stream</name><parameter_list>(<param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>,
<param><decl><type><name>ap_filter_t</name> *</type><name>output</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>brigade_write_baton</name> *</type><name>wb</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>wb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>stream</name> <init>= <expr><call><name>svn_stream_create</name><argument_list>(<argument><expr><name>wb</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>wb</name>-&gt;<name>bb</name></name> = <name>bb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wb</name>-&gt;<name>output</name></name> = <name>output</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stream_set_write</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>brigade_write_fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_base64_encode</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>dav_svn__operational_log</name><parameter_list>(<param><decl><type>struct <name>dav_resource_private</name> *</type><name>info</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>line</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>apr_table_set</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"SVN-ACTION"</expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_set</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"SVN-REPOS"</expr></argument>,
<argument><expr><call><name>svn_path_uri_encode</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>repos</name>-&gt;<name>fs_path</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_set</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"SVN-REPOS-NAME"</expr></argument>,
<argument><expr><call><name>svn_path_uri_encode</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>repos</name>-&gt;<name>repo_basename</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
