<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/tests/svn_test_main.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_general.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_lib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_cmdline.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_opt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_test.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_private_config.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><name>int</name></type> <name>test_argc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>test_argv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>verbose_mode</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>quiet_mode</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>cleanup_mode</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<enum>enum <block>{
<decl><name>cleanup_opt</name> <init>= <expr><name>SVN_OPT_FIRST_LONGOPT_ID</name></expr></init></decl>,
<decl><name>fstype_opt</name></decl>,
<decl><name>list_opt</name></decl>,
<decl><name>verbose_opt</name></decl>,
<decl><name>quiet_opt</name></decl>
}</block>;</enum>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>apr_getopt_option_t</name></type> <name><name>cl_options</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr>"cleanup"</expr>, <expr><name>cleanup_opt</name></expr>, <expr>0</expr>,
<macro><name>N_</name><argument_list>(<argument>"remove test directories after success"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"fs-type"</expr>, <expr><name>fstype_opt</name></expr>, <expr>1</expr>,
<macro><name>N_</name><argument_list>(<argument>"specify a filesystem backend type ARG"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"list"</expr>, <expr><name>list_opt</name></expr>, <expr>0</expr>,
<macro><name>N_</name><argument_list>(<argument>"lists all the tests with their short description"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"verbose"</expr>, <expr><name>verbose_opt</name></expr>, <expr>0</expr>,
<macro><name>N_</name><argument_list>(<argument>"print extra information"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{
<expr>"quiet"</expr>, <expr><name>quiet_opt</name></expr>, <expr>0</expr>,
<macro><name>N_</name><argument_list>(<argument>"print only unexpected results"</argument>)</argument_list></macro>
}</block></expr>,
<expr><block>{<expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>skip_cleanup</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_pool_t</name> *</type><name>cleanup_pool</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type>
<name>cleanup_rmtree</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<name>skip_cleanup</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><call><name>svn_io_remove_dir2</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>verbose_mode</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"FAILED CLEANUP: %s\n"</expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"CLEANUP: %s\n"</expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></then></if>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type>
<name>svn_test_add_dir_cleanup</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>cleanup_mode</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>abspath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><call><name>svn_path_get_absolute</name><argument_list>(<argument><expr>&amp;<name>abspath</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>cleanup_pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>err</name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>cleanup_pool</name></expr></argument>, <argument><expr><name>abspath</name></expr></argument>, <argument><expr><name>cleanup_rmtree</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>verbose_mode</name></expr>)</condition><then>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"FAILED ABSPATH: %s\n"</expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></else></if>
}</block></then></if>
}</block></function>
<function><type><name>apr_uint32_t</name></type>
<name>svn_test_rand</name><parameter_list>(<param><decl><type><name>apr_uint32_t</name> *</type><name>seed</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>*<name>seed</name> = (*<name>seed</name> * 1103515245UL + 12345UL) &amp; 0xffffffffUL</expr>;</expr_stmt>
<return>return <expr>*<name>seed</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>get_array_size</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 1</expr>;</init> <condition><expr><name><name>test_funcs</name><index>[<expr><name>i</name></expr>]</index></name>.<name>func</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
}</block></for>
<return>return <expr>(<name>i</name> - 1)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>do_test_num</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>progname</name></decl></param>,
<param><decl><type><name>int</name></type> <name>test_num</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_test_driver_t</name></type> <name>func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>skip</name></decl>, <decl><type ref="prev"/><name>xfail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>array_size</name> <init>= <expr><call><name>get_array_size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>test_failed</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>test_num</name> &gt; <name>array_size</name>) || (<name>test_num</name> &lt;= 0)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"FAIL: %s: THERE IS NO TEST NUMBER %2d\n"</expr></argument>, <argument><expr><name>progname</name></expr></argument>, <argument><expr><name>test_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>skip_cleanup</name> = 1)</expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>func</name> = <name><name>test_funcs</name><index>[<expr><name>test_num</name></expr>]</index></name>.<name>func</name></expr>;</expr_stmt>
<expr_stmt><expr><name>skip</name> = (<name><name>test_funcs</name><index>[<expr><name>test_num</name></expr>]</index></name>.<name>mode</name> == <name>svn_test_skip</name>)</expr>;</expr_stmt>
<expr_stmt><expr><name>xfail</name> = (<name><name>test_funcs</name><index>[<expr><name>test_num</name></expr>]</index></name>.<name>mode</name> == <name>svn_test_xfail</name>)</expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>err</name> = <call><name>func</name><argument_list>(<argument><expr>&amp;<name>msg</name></expr></argument>, <argument><expr><name>msg_only</name> || <name>skip</name></expr></argument>, <argument><expr><name>opts</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>test_failed</name> = ((<name>err</name> != <name>SVN_NO_ERROR</name>) != (<name>xfail</name> != 0))</expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_handle_error2</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr>"svn_tests: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" %2d %-5s %s\n"</expr></argument>,
<argument><expr><name>test_num</name></expr></argument>,
<argument><expr>(<name>xfail</name> ? "XFAIL" : (<name>skip</name> ? "SKIP" : ""))</expr></argument>,
<argument><expr><name>msg</name> ? <name>msg</name> : "(test did not provide name)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>(! <name>quiet_mode</name>) || <name>test_failed</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"%s %s %d: %s\n"</expr></argument>,
<argument><expr>(<name>err</name>
? (<name>xfail</name> ? "XFAIL:" : "FAIL: ")
: (<name>xfail</name> ? "XPASS:" : (<name>skip</name> ? "SKIP: " : "PASS: ")))</expr></argument>,
<argument><expr><name>progname</name></expr></argument>,
<argument><expr><name>test_num</name></expr></argument>,
<argument><expr><name>msg</name> ? <name>msg</name> : "(test did not provide name)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<if>if <condition>(<expr><name>msg</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>len</name> &gt; 50</expr>)</condition><then>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"WARNING: Test docstring exceeds 50 characters\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>msg</name><index>[<expr><name>len</name> - 1</expr>]</index></name> == '.'</expr>)</condition><then>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"WARNING: Test docstring ends in a period (.)\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><call><name>apr_isupper</name><argument_list>(<argument><expr><name><name>msg</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"WARNING: Test docstring is capitalized\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
<expr_stmt><expr><name>skip_cleanup</name> = <name>test_failed</name></expr>;</expr_stmt>
<return>return <expr><name>test_failed</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type>
<name>main</name><parameter_list>(<param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name><name>argv</name><index>[]</index></name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prog_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>test_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>got_error</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>, *<decl><type ref="prev"/><name>test_pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ran_a_test</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>list_mode</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>opt_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>apr_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_getopt_t</name> *</type><name>os</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>errmsg</name><index>[<expr>200</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>array_size</name> <init>= <expr><call><name>get_array_size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_test_opts_t</name></type> <name>opts</name> <init>= <expr><block>{ <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>opts</name>.<name>fs_type</name></name> = <name>DEFAULT_FS_TYPE</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_initialize</name><argument_list>()</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"apr_initialize() failed.\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>pool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>test_argc</name> = <name>argc</name></expr>;</expr_stmt>
<expr_stmt><expr><name>test_argv</name> = <name>argv</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_cmdline__getopt_init</name><argument_list>(<argument><expr>&amp;<name>os</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prog_name</name> = <call><name>strrchr</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>prog_name</name></expr>)</condition><then>
<expr_stmt><expr><name>prog_name</name>++</expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><name>prog_name</name> = <call><name>strrchr</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>'\\'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>prog_name</name></expr>)</condition><then>
<expr_stmt><expr><name>prog_name</name>++</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>prog_name</name> = <name><name>argv</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt></else></if>
}</block></else></if>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><call><name>svn_cmdline_handle_exit_error</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>prog_name</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<while>while <condition>(<expr>1</expr>)</condition> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>opt_arg</name></decl>;</decl_stmt>
<expr_stmt><expr><name>apr_err</name> = <call><name>apr_getopt_long</name><argument_list>(<argument><expr><name>os</name></expr></argument>, <argument><expr><name>cl_options</name></expr></argument>, <argument><expr>&amp;<name>opt_id</name></expr></argument>, <argument><expr>&amp;<name>opt_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_EOF</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<break>break;</break></then>
<else>else <if>if <condition>(<expr><name>apr_err</name> &amp;&amp; (<name>apr_err</name> != <name>APR_BADCH</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr>"apr_getopt_long failed : [%d] %s\n"</expr></argument>,
<argument><expr><name>apr_err</name></expr></argument>, <argument><expr><call><name>apr_strerror</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errmsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<switch>switch <condition>(<expr><name>opt_id</name></expr>)</condition> <block>{
<case>case <expr><name>cleanup_opt</name></expr>:
<expr_stmt><expr><name>cleanup_mode</name> = 1</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>fstype_opt</name></expr>:
<expr_stmt><expr><name><name>opts</name>.<name>fs_type</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>opt_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>list_opt</name></expr>:
<expr_stmt><expr><name>list_mode</name> = 1</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>verbose_opt</name></expr>:
<expr_stmt><expr><name>verbose_mode</name> = 1</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>quiet_opt</name></expr>:
<expr_stmt><expr><name>quiet_mode</name> = 1</expr>;</expr_stmt>
<break>break;</break>
</case>}</block></switch>
}</block></while>
<if>if <condition>(<expr><name>quiet_mode</name> &amp;&amp; <name>verbose_mode</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"FAIL: --verbose and --quiet are mutually exclusive\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>cleanup_pool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>test_pool</name> = <call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>argc</name> &gt;= 2</expr>)</condition><then> <block>{
<if>if <condition>(<expr>! <call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>"list"</expr></argument>)</argument_list></call> || <name>list_mode</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ran_a_test</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Test #Mode Test Description\n"
"------ ----- ----------------\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 1</expr>;</init> <condition><expr><name>i</name> &lt;= <name>array_size</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><call><name>do_test_num</name><argument_list>(<argument><expr><name>prog_name</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr>&amp;<name>opts</name></expr></argument>, <argument><expr><name>test_pool</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>got_error</name> = 1</expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>test_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>cleanup_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></then> <else>else <block>{
<for>for (<init><expr><name>i</name> = 1</expr>;</init> <condition><expr><name>i</name> &lt; <name>argc</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><call><name>apr_isdigit</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ran_a_test</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>test_num</name> = <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>do_test_num</name><argument_list>(<argument><expr><name>prog_name</name></expr></argument>, <argument><expr><name>test_num</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr>&amp;<name>opts</name></expr></argument>, <argument><expr><name>test_pool</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>got_error</name> = 1</expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>test_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>cleanup_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
}</block></else></if>
}</block></then></if>
<if>if <condition>(<expr>! <name>ran_a_test</name></expr>)</condition><then> <block>{
<for>for (<init><expr><name>i</name> = 1</expr>;</init> <condition><expr><name>i</name> &lt;= <name>array_size</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><call><name>do_test_num</name><argument_list>(<argument><expr><name>prog_name</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr>&amp;<name>opts</name></expr></argument>, <argument><expr><name>test_pool</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>got_error</name> = 1</expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>test_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>cleanup_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></then></if>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_terminate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>got_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>got_error</name></expr>;</return>
}</block></function>
</unit>
