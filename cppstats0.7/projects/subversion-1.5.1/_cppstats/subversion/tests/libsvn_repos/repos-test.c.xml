<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/tests/libsvn_repos/repos-test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_md5.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_repos.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_delta.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../svn_test.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../svn_test_fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dir-delta-editor.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NL</name></cpp:macro> <cpp:value>APR_EOL_STR</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>dir_deltas</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>, *<decl><type ref="prev"/><name>revision_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>youngest_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>edit_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>editor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_test__tree_t</name></type> <name><name>expected_trees</name><index>[<expr>8</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>revision_count</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "test svn_repos_dir_delta2"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_repos</name><argument_list>(<argument><expr>&amp;<name>repos</name></expr></argument>, <argument><expr>"test-repo-dir-deltas"</expr></argument>,
<argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fs</name> = <call><name>svn_repos_fs</name><argument_list>(<argument><expr><name>repos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>expected_trees</name><index>[<expr><name>revision_count</name></expr>]</index></name>.<name>num_entries</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>expected_trees</name><index>[<expr><name>revision_count</name>++</expr>]</index></name>.<name>entries</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_greek_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"iota"</expr>, <expr>"This is the file 'iota'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/mu"</expr>, <expr>"This is the file 'mu'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/lambda"</expr>, <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/beta"</expr>, <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/F"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/C"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/gamma"</expr>, <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/pi"</expr>, <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/rho"</expr>, <expr>"This is the file 'rho'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/tau"</expr>, <expr>"This is the file 'tau'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/chi"</expr>, <expr>"This is the file 'chi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/psi"</expr>, <expr>"This is the file 'psi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/omega"</expr>, <expr>"This is the file 'omega'.\n"</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>expected_trees</name><index>[<expr><name>revision_count</name></expr>]</index></name>.<name>entries</name> = <name>expected_entries</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>expected_trees</name><index>[<expr><name>revision_count</name></expr>]</index></name>.<name>num_entries</name> = 20</expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>revision_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>,
<argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name>
<argument_list>(<argument><expr><name>revision_root</name></expr></argument>, <argument><expr><name><name>expected_trees</name><index>[<expr><name>revision_count</name></expr>]</index></name>.<name>entries</name></expr></argument>,
<argument><expr><name><name>expected_trees</name><index>[<expr><name>revision_count</name></expr>]</index></name>.<name>num_entries</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>revision_count</name>++</expr>;</expr_stmt>
}</block>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__txn_script_command_t</name></type> <name><name>script_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>'a'</expr>, <expr>"A/delta"</expr>, <expr>"This is the file 'delta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>'a'</expr>, <expr>"A/epsilon"</expr>, <expr>"This is the file 'epsilon'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>'a'</expr>, <expr>"A/B/Z"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>'a'</expr>, <expr>"A/B/Z/zeta"</expr>, <expr>"This is the file 'zeta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>'d'</expr>, <expr>"A/C"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>'d'</expr>, <expr>"A/mu"</expr>, <expr>""</expr> }</block></expr>,
<expr><block>{ <expr>'d'</expr>, <expr>"A/D/G/tau"</expr>, <expr>""</expr> }</block></expr>,
<expr><block>{ <expr>'d'</expr>, <expr>"A/D/H/omega"</expr>, <expr>""</expr> }</block></expr>,
<expr><block>{ <expr>'e'</expr>, <expr>"iota"</expr>, <expr>"Changed file 'iota'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>'e'</expr>, <expr>"A/D/G/rho"</expr>, <expr>"Changed file 'rho'.\n"</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__txn_script_exec</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>script_entries</name></expr></argument>, <argument><expr>10</expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"iota"</expr>, <expr>"Changed file 'iota'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/delta"</expr>, <expr>"This is the file 'delta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/epsilon"</expr>, <expr>"This is the file 'epsilon'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/lambda"</expr>, <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/beta"</expr>, <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/F"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/Z"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/Z/zeta"</expr>, <expr>"This is the file 'zeta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/gamma"</expr>, <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/pi"</expr>, <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/rho"</expr>, <expr>"Changed file 'rho'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/chi"</expr>, <expr>"This is the file 'chi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/psi"</expr>, <expr>"This is the file 'psi'.\n"</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>expected_trees</name><index>[<expr><name>revision_count</name></expr>]</index></name>.<name>entries</name> = <name>expected_entries</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>expected_trees</name><index>[<expr><name>revision_count</name></expr>]</index></name>.<name>num_entries</name> = 20</expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>revision_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>,
<argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name>
<argument_list>(<argument><expr><name>revision_root</name></expr></argument>, <argument><expr><name><name>expected_trees</name><index>[<expr><name>revision_count</name></expr>]</index></name>.<name>entries</name></expr></argument>,
<argument><expr><name><name>expected_trees</name><index>[<expr><name>revision_count</name></expr>]</index></name>.<name>num_entries</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>revision_count</name>++</expr>;</expr_stmt>
}</block>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__txn_script_command_t</name></type> <name><name>script_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>'a'</expr>, <expr>"A/mu"</expr>, <expr>"Re-added file 'mu'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>'a'</expr>, <expr>"A/D/H/omega"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>'d'</expr>, <expr>"iota"</expr>, <expr>""</expr> }</block></expr>,
<expr><block>{ <expr>'e'</expr>, <expr>"A/delta"</expr>, <expr>"This is the file 'delta'.\nLine 2.\n"</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__txn_script_exec</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>script_entries</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"A"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/delta"</expr>, <expr>"This is the file 'delta'.\nLine 2.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/epsilon"</expr>, <expr>"This is the file 'epsilon'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/mu"</expr>, <expr>"Re-added file 'mu'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/lambda"</expr>, <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/beta"</expr>, <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/F"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/Z"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/Z/zeta"</expr>, <expr>"This is the file 'zeta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/gamma"</expr>, <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/pi"</expr>, <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/rho"</expr>, <expr>"Changed file 'rho'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/chi"</expr>, <expr>"This is the file 'chi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/psi"</expr>, <expr>"This is the file 'psi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/omega"</expr>, <expr>0</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>expected_trees</name><index>[<expr><name>revision_count</name></expr>]</index></name>.<name>entries</name> = <name>expected_entries</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>expected_trees</name><index>[<expr><name>revision_count</name></expr>]</index></name>.<name>num_entries</name> = 21</expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>revision_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>,
<argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name>
<argument_list>(<argument><expr><name>revision_root</name></expr></argument>, <argument><expr><name><name>expected_trees</name><index>[<expr><name>revision_count</name></expr>]</index></name>.<name>entries</name></expr></argument>,
<argument><expr><name><name>expected_trees</name><index>[<expr><name>revision_count</name></expr>]</index></name>.<name>num_entries</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>revision_count</name>++</expr>;</expr_stmt>
}</block>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>revision_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copy</name><argument_list>(<argument><expr><name>revision_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>,
<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G2"</expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copy</name><argument_list>(<argument><expr><name>revision_root</name></expr></argument>, <argument><expr>"A/epsilon"</expr></argument>,
<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/B/epsilon"</expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"A"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/delta"</expr>, <expr>"This is the file 'delta'.\nLine 2.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/epsilon"</expr>, <expr>"This is the file 'epsilon'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/mu"</expr>, <expr>"Re-added file 'mu'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/epsilon"</expr>, <expr>"This is the file 'epsilon'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/lambda"</expr>, <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/beta"</expr>, <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/F"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/Z"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/Z/zeta"</expr>, <expr>"This is the file 'zeta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/gamma"</expr>, <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/pi"</expr>, <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/rho"</expr>, <expr>"Changed file 'rho'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G2"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G2/pi"</expr>, <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G2/rho"</expr>, <expr>"Changed file 'rho'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/chi"</expr>, <expr>"This is the file 'chi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/psi"</expr>, <expr>"This is the file 'psi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/omega"</expr>, <expr>0</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>expected_trees</name><index>[<expr><name>revision_count</name></expr>]</index></name>.<name>entries</name> = <name>expected_entries</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>expected_trees</name><index>[<expr><name>revision_count</name></expr>]</index></name>.<name>num_entries</name> = 25</expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>revision_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>,
<argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name>
<argument_list>(<argument><expr><name>revision_root</name></expr></argument>, <argument><expr><name><name>expected_trees</name><index>[<expr><name>revision_count</name></expr>]</index></name>.<name>entries</name></expr></argument>,
<argument><expr><name><name>expected_trees</name><index>[<expr><name>revision_count</name></expr>]</index></name>.<name>num_entries</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>revision_count</name>++</expr>;</expr_stmt>
}</block>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>revision_count</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name>revision_count</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dir_delta_get_editor</name><argument_list>(<argument><expr>&amp;<name>editor</name></expr></argument>,
<argument><expr>&amp;<name>edit_baton</name></expr></argument>,
<argument><expr><name>fs</name></expr></argument>,
<argument><expr><name>txn_root</name></expr></argument>,
<argument><expr>""</expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>revision_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_dir_delta2</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>,
<argument><expr>""</expr></argument>,
<argument><expr>""</expr></argument>,
<argument><expr><name>revision_root</name></expr></argument>,
<argument><expr>""</expr></argument>,
<argument><expr><name>editor</name></expr></argument>,
<argument><expr><name>edit_baton</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>,
<argument><expr><name>svn_depth_infinity</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name>
<argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name><name>expected_trees</name><index>[<expr><name>j</name></expr>]</index></name>.<name>entries</name></expr></argument>,
<argument><expr><name><name>expected_trees</name><index>[<expr><name>j</name></expr>]</index></name>.<name>num_entries</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name>svn_fs_abort_txn</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>node_tree_delete_under_copy</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>, *<decl><type ref="prev"/><name>revision_root</name></decl>, *<decl><type ref="prev"/><name>revision_2_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>youngest_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>edit_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>editor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_repos_node_t</name> *</type><name>tree</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "test deletions under copies in node_tree code"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_repos</name><argument_list>(<argument><expr>&amp;<name>repos</name></expr></argument>, <argument><expr>"test-repo-del-under-copy"</expr></argument>,
<argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fs</name> = <call><name>svn_repos_fs</name><argument_list>(<argument><expr><name>repos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_greek_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>revision_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copy</name><argument_list>(<argument><expr><name>revision_root</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"Z"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"Z/D/G/rho"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"Z/D/H"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>revision_2_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_node_editor</name><argument_list>(<argument><expr>&amp;<name>editor</name></expr></argument>, <argument><expr>&amp;<name>edit_baton</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>,
<argument><expr><name>revision_root</name></expr></argument>, <argument><expr><name>revision_2_root</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_replay2</name><argument_list>(<argument><expr><name>revision_2_root</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>editor</name></expr></argument>, <argument><expr><name>edit_baton</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tree</name> = <call><name>svn_repos_node_from_baton</name><argument_list>(<argument><expr><name>edit_baton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! (<name>tree</name>
&amp;&amp; <name><name>tree</name>-&gt;<name>child</name></name>
&amp;&amp; <name><name>tree</name>-&gt;<name>child</name>-&gt;<name>child</name></name>
&amp;&amp; <name><name>tree</name>-&gt;<name>child</name>-&gt;<name>child</name>-&gt;<name>child</name></name>
&amp;&amp; <name><name>tree</name>-&gt;<name>child</name>-&gt;<name>child</name>-&gt;<name>child</name>-&gt;<name>child</name></name>
&amp;&amp; <name><name>tree</name>-&gt;<name>child</name>-&gt;<name>child</name>-&gt;<name>child</name>-&gt;<name>sibling</name></name>)</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"Generated node tree is bogus."</expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>! ((<call><name>strcmp</name><argument_list>(<argument><expr><name><name>tree</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call> == 0)
&amp;&amp; (<call><name>strcmp</name><argument_list>(<argument><expr><name><name>tree</name>-&gt;<name>child</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"Z"</expr></argument>)</argument_list></call> == 0)
&amp;&amp; (<call><name>strcmp</name><argument_list>(<argument><expr><name><name>tree</name>-&gt;<name>child</name>-&gt;<name>child</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"D"</expr></argument>)</argument_list></call> == 0)
&amp;&amp; (<call><name>strcmp</name><argument_list>(<argument><expr><name><name>tree</name>-&gt;<name>child</name>-&gt;<name>child</name>-&gt;<name>child</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"G"</expr></argument>)</argument_list></call> == 0)
&amp;&amp; ((<call><name>strcmp</name><argument_list>(<argument><expr><name><name>tree</name>-&gt;<name>child</name>-&gt;<name>child</name>-&gt;<name>child</name>-&gt;<name>child</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"rho"</expr></argument>)</argument_list></call> == 0)
&amp;&amp; (<name><name>tree</name>-&gt;<name>child</name>-&gt;<name>child</name>-&gt;<name>child</name>-&gt;<name>child</name>-&gt;<name>kind</name></name> == <name>svn_node_file</name>)
&amp;&amp; (<name><name>tree</name>-&gt;<name>child</name>-&gt;<name>child</name>-&gt;<name>child</name>-&gt;<name>child</name>-&gt;<name>action</name></name> == 'D'))
&amp;&amp; ((<call><name>strcmp</name><argument_list>(<argument><expr><name><name>tree</name>-&gt;<name>child</name>-&gt;<name>child</name>-&gt;<name>child</name>-&gt;<name>sibling</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"H"</expr></argument>)</argument_list></call> == 0)
&amp;&amp; (<name><name>tree</name>-&gt;<name>child</name>-&gt;<name>child</name>-&gt;<name>child</name>-&gt;<name>sibling</name>-&gt;<name>kind</name></name> == <name>svn_node_dir</name>)
&amp;&amp; (<name><name>tree</name>-&gt;<name>child</name>-&gt;<name>child</name>-&gt;<name>child</name>-&gt;<name>sibling</name>-&gt;<name>action</name></name> == 'D')))</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"Generated node tree is bogus."</expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>print_chrevs</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>revs_got</name></decl></param>,
<param><decl><type><name>int</name></type> <name>num_revs_expected</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_revnum_t</name> *</type><name>revs_expected</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>outstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>
<expr_stmt><expr><name>outstr</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"Got: { "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>revs_got</name></expr>)</condition><then> <block>{
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>revs_got</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>rev</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>revs_got</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_revnum_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>outstr</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr><name>outstr</name></expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%ld "</expr></argument>, <argument><expr><name>rev</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></then></if>
<expr_stmt><expr><name>outstr</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>outstr</name></expr></argument>, <argument><expr>"} Expected: { "</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>num_revs_expected</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>outstr</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr><name>outstr</name></expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%ld "</expr></argument>,
<argument><expr><name><name>revs_expected</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>outstr</name></expr></argument>, <argument><expr>"}"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>history_to_revs_array</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>revs_array</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>revs_array</name></expr></argument>, <argument><expr><name>svn_revnum_t</name></expr></argument>)</argument_list></call> = <name>revision</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<struct>struct <name>revisions_changed_results</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_revs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name><name>revs_changed</name><index>[<expr>11</expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>revisions_changed</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>spool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>, *<decl><type ref="prev"/><name>rev_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>youngest_rev</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "test svn_repos_history() (partially)"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_repos</name><argument_list>(<argument><expr>&amp;<name>repos</name></expr></argument>, <argument><expr>"test-repo-revisions-changed"</expr></argument>,
<argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fs</name> = <call><name>svn_repos_fs</name><argument_list>(<argument><expr><name>repos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_greek_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/mu"</expr></argument>, <argument><expr>"2"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/B/E/alpha"</expr></argument>, <argument><expr>"2"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/H/omega"</expr></argument>, <argument><expr>"2"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr>"3"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/B/lambda"</expr></argument>, <argument><expr>"3"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/H/psi"</expr></argument>, <argument><expr>"3"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/H/omega"</expr></argument>, <argument><expr>"3"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr>"4"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/B/E/beta"</expr></argument>, <argument><expr>"4"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/gamma"</expr></argument>, <argument><expr>"4"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G/pi"</expr></argument>, <argument><expr>"4"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G/rho"</expr></argument>, <argument><expr>"4"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/mu"</expr></argument>, <argument><expr>"5"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/B/E/alpha"</expr></argument>, <argument><expr>"5"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/G/tau"</expr></argument>, <argument><expr>"5"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/H/chi"</expr></argument>, <argument><expr>"5"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copy</name><argument_list>(<argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"A/D"</expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/Z"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/Z/G/pi"</expr></argument>, <argument><expr>"7"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copy</name><argument_list>(<argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"A/Z"</expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/Z"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr>"8"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copy</name><argument_list>(<argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/Q"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/Q/pi"</expr></argument>, <argument><expr>"10"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/Q/rho"</expr></argument>, <argument><expr>"10"</expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> struct <name>revisions_changed_results</name></type> <name><name>test_data</name><index>[<expr>25</expr>]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>""</expr>, <expr>11</expr>, <expr><block>{ <expr>10</expr>, <expr>9</expr>, <expr>8</expr>, <expr>7</expr>, <expr>6</expr>, <expr>5</expr>, <expr>4</expr>, <expr>3</expr>, <expr>2</expr>, <expr>1</expr>, <expr>0</expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr>"iota"</expr>, <expr>4</expr>, <expr><block>{ <expr>8</expr>, <expr>4</expr>, <expr>3</expr>, <expr>1</expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr>"A"</expr>, <expr>10</expr>, <expr><block>{ <expr>10</expr>, <expr>9</expr>, <expr>8</expr>, <expr>7</expr>, <expr>6</expr>, <expr>5</expr>, <expr>4</expr>, <expr>3</expr>, <expr>2</expr>, <expr>1</expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr>"A/mu"</expr>, <expr>3</expr>, <expr><block>{ <expr>5</expr>, <expr>2</expr>, <expr>1</expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr>"A/B"</expr>, <expr>5</expr>, <expr><block>{ <expr>5</expr>, <expr>4</expr>, <expr>3</expr>, <expr>2</expr>, <expr>1</expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr>"A/B/lambda"</expr>, <expr>2</expr>, <expr><block>{ <expr>3</expr>, <expr>1</expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E"</expr>, <expr>4</expr>, <expr><block>{ <expr>5</expr>, <expr>4</expr>, <expr>2</expr>, <expr>1</expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/alpha"</expr>, <expr>3</expr>, <expr><block>{ <expr>5</expr>, <expr>2</expr>, <expr>1</expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/beta"</expr>, <expr>2</expr>, <expr><block>{ <expr>4</expr>, <expr>1</expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr>"A/B/F"</expr>, <expr>1</expr>, <expr><block>{ <expr>1</expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr>"A/C"</expr>, <expr>1</expr>, <expr><block>{ <expr>1</expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr>"A/D"</expr>, <expr>10</expr>, <expr><block>{ <expr>10</expr>, <expr>9</expr>, <expr>8</expr>, <expr>7</expr>, <expr>6</expr>, <expr>5</expr>, <expr>4</expr>, <expr>3</expr>, <expr>2</expr>, <expr>1</expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr>"A/D/gamma"</expr>, <expr>4</expr>, <expr><block>{ <expr>8</expr>, <expr>6</expr>, <expr>4</expr>, <expr>1</expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G"</expr>, <expr>6</expr>, <expr><block>{ <expr>8</expr>, <expr>7</expr>, <expr>6</expr>, <expr>5</expr>, <expr>4</expr>, <expr>1</expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/pi"</expr>, <expr>5</expr>, <expr><block>{ <expr>8</expr>, <expr>7</expr>, <expr>6</expr>, <expr>4</expr>, <expr>1</expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/rho"</expr>, <expr>4</expr>, <expr><block>{ <expr>8</expr>, <expr>6</expr>, <expr>4</expr>, <expr>1</expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/tau"</expr>, <expr>4</expr>, <expr><block>{ <expr>8</expr>, <expr>6</expr>, <expr>5</expr>, <expr>1</expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr>"A/D/Q"</expr>, <expr>8</expr>, <expr><block>{ <expr>10</expr>, <expr>9</expr>, <expr>8</expr>, <expr>7</expr>, <expr>6</expr>, <expr>5</expr>, <expr>4</expr>, <expr>1</expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr>"A/D/Q/pi"</expr>, <expr>7</expr>, <expr><block>{ <expr>10</expr>, <expr>9</expr>, <expr>8</expr>, <expr>7</expr>, <expr>6</expr>, <expr>4</expr>, <expr>1</expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr>"A/D/Q/rho"</expr>, <expr>6</expr>, <expr><block>{ <expr>10</expr>, <expr>9</expr>, <expr>8</expr>, <expr>6</expr>, <expr>4</expr>, <expr>1</expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr>"A/D/Q/tau"</expr>, <expr>5</expr>, <expr><block>{ <expr>9</expr>, <expr>8</expr>, <expr>6</expr>, <expr>5</expr>, <expr>1</expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H"</expr>, <expr>6</expr>, <expr><block>{ <expr>8</expr>, <expr>6</expr>, <expr>5</expr>, <expr>3</expr>, <expr>2</expr>, <expr>1</expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/chi"</expr>, <expr>4</expr>, <expr><block>{ <expr>8</expr>, <expr>6</expr>, <expr>5</expr>, <expr>1</expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/psi"</expr>, <expr>4</expr>, <expr><block>{ <expr>8</expr>, <expr>6</expr>, <expr>3</expr>, <expr>1</expr> }</block></expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/omega"</expr>, <expr>5</expr>, <expr><block>{ <expr>8</expr>, <expr>6</expr>, <expr>3</expr>, <expr>2</expr>, <expr>1</expr> }</block></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; 25</expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name> <init>= <expr><name><name>test_data</name><index>[<expr><name>j</name></expr>]</index></name>.<name>path</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_revs</name> <init>= <expr><name><name>test_data</name><index>[<expr><name>j</name></expr>]</index></name>.<name>num_revs</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_revnum_t</name> *</type><name>revs_changed</name> <init>= <expr><name><name>test_data</name><index>[<expr><name>j</name></expr>]</index></name>.<name>revs_changed</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>revs</name> <init>= <expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>spool</name></expr></argument>, <argument><expr>10</expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_revnum_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_history</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>history_to_revs_array</name></expr></argument>, <argument><expr><name>revs</name></expr></argument>,
<argument><expr>0</expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(! <name>revs</name>) || (<name><name>revs</name>-&gt;<name>nelts</name></name> != <name>num_revs</name>)</expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"Changed revisions differ from expected for '%s'\n%s"</expr></argument>,
<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>print_chrevs</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>num_revs</name></expr></argument>, <argument><expr><name>revs_changed</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>num_revs</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>svn_revnum_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>rev</name> != <name><name>revs_changed</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"Changed revisions differ from expected for '%s'\n%s"</expr></argument>,
<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>print_chrevs</name><argument_list>(<argument><expr><name>revs</name></expr></argument>, <argument><expr><name>num_revs</name></expr></argument>, <argument><expr><name>revs_changed</name></expr></argument>, <argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>spool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<struct>struct <name>locations_info</name> <block>{
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>check_locations_info</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>locations</name></decl></param>, <param><decl><type><specifier>const</specifier> struct <name>locations_info</name> *</type><name>info</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name><name>info</name>-&gt;<name>rev</name></name> != 0</expr>;</condition> <incr><expr>++<name>i</name></expr>, <expr>++<name>info</name></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>p</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>locations</name></expr></argument>, <argument><expr>&amp;<name><name>info</name>-&gt;<name>rev</name></name></expr></argument>, <argument><expr><sizeof>sizeof
<argument_list>(<argument><expr><name>svn_revnum_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"Missing path for revision %ld"</expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>rev</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"Pth mismatch for rev %ld"</expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>rev</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></for>
<if>if <condition>(<expr><call><name>apr_hash_count</name><argument_list>(<argument><expr><name>locations</name></expr></argument>)</argument_list></call> &gt; <name>i</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"Returned locations contain too many elements."</expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>check_locations</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>, <param><decl><type>struct <name>locations_info</name> *</type><name>info</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>svn_revnum_t</name></type> <name>peg_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>a</name> <init>= <expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>svn_revnum_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>locations_info</name> *</type><name>iter</name></decl>;</decl_stmt>
<for>for (<init><expr><name>iter</name> = <name>info</name></expr>;</init> <condition><expr><name><name>iter</name>-&gt;<name>rev</name></name> != 0</expr>;</condition> <incr><expr>++<name>iter</name></expr></incr>)
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>svn_revnum_t</name></expr></argument>)</argument_list></call> = <name><name>iter</name>-&gt;<name>rev</name></name></expr>;</expr_stmt></for>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_trace_node_locations</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>&amp;<name>h</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>peg_revision</name></expr></argument>, <argument><expr><name>a</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_locations_info</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>node_locations</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>, *<decl><type ref="prev"/><name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>youngest_rev</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "test svn_repos_node_locations"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_repos</name><argument_list>(<argument><expr>&amp;<name>repos</name></expr></argument>, <argument><expr>"test-repo-node-locations"</expr></argument>,
<argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fs</name> = <call><name>svn_repos_fs</name><argument_list>(<argument><expr><name>repos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_greek_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copy</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr>"/A/mu"</expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/mu.new"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type>struct <name>locations_info</name></type> <name><name>info</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>1</expr>, <expr>"/A/mu"</expr> }</block></expr>,
<expr><block>{ <expr>2</expr>, <expr>"/mu.new"</expr> }</block></expr>,
<expr><block>{ <expr>0</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_locations</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr>"/mu.new"</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_locations</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr>"mu.new"</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>node_locations2</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>, *<decl><type ref="prev"/><name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>youngest_rev</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "test svn_repos_node_locations some more"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_repos</name><argument_list>(<argument><expr>&amp;<name>repos</name></expr></argument>, <argument><expr>"test-repo-node-locations2"</expr></argument>,
<argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fs</name> = <call><name>svn_repos_fs</name><argument_list>(<argument><expr><name>repos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_dir</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/foo"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copy</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr>"/foo"</expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/bar"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_file</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/bar/baz"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/bar/baz"</expr></argument>, <argument><expr>"brrt"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"/bar/baz"</expr></argument>, <argument><expr>"bzzz"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type>struct <name>locations_info</name></type> <name><name>info</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>3</expr>, <expr>"/bar/baz"</expr> }</block></expr>,
<expr><block>{ <expr>2</expr>, <expr>"/bar/baz"</expr> }</block></expr>,
<expr><block>{ <expr>0</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_locations</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr>"/bar/baz"</expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<typedef>typedef <type><struct>struct <name>rmlocks_baton_t</name> <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>removed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
}</block></struct></type> <name>rmlocks_baton_t</name>;</typedef>
<typedef>typedef <type><struct>struct <name>rmlocks_file_baton_t</name> <block>{
<decl_stmt><decl><type><name>rmlocks_baton_t</name> *</type><name>main_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
}</block></struct></type> <name>rmlocks_file_baton_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>rmlocks_open_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>file_pool</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>file_baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>rmlocks_file_baton_t</name> *</type><name>fb</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>file_pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>fb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rmlocks_baton_t</name> *</type><name>b</name> <init>= <expr><name>parent_baton</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>fb</name>-&gt;<name>main_baton</name></name> = <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fb</name>-&gt;<name>path</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>file_baton</name> = <name>fb</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>rmlocks_change_prop</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>file_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_string_t</name> *</type><name>value</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>rmlocks_file_baton_t</name> *</type><name>fb</name> <init>= <expr><name>file_baton</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>SVN_PROP_ENTRY_LOCK_TOKEN</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>value</name> != <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"Value for lock-token property not NULL"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>main_baton</name>-&gt;<name>removed</name></name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"Lock token for '%s' already removed"</expr></argument>,
<argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>fb</name>-&gt;<name>main_baton</name>-&gt;<name>removed</name></name></expr></argument>, <argument><expr><name><name>fb</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr>(<name>void</name> *)1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>rmlocks_open_root</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>edit_baton</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>dir_pool</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>root_baton</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>*<name>root_baton</name> = <name>edit_baton</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>rmlocks_open_directory</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>parent_baton</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>base_revision</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>dir_baton</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>*<name>dir_baton</name> = <name>parent_baton</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>create_rmlocks_editor</name><parameter_list>(<param><decl><type><name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> **</type><name>removed</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>rmlocks_baton_t</name> *</type><name>baton</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>baton</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>editor</name> = <call><name>svn_delta_default_editor</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>editor</name>)-&gt;<name>open_root</name></name> = <name>rmlocks_open_root</name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>editor</name>)-&gt;<name>open_directory</name></name> = <name>rmlocks_open_directory</name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>editor</name>)-&gt;<name>open_file</name></name> = <name>rmlocks_open_file</name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>editor</name>)-&gt;<name>change_file_prop</name></name> = <name>rmlocks_change_prop</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>-&gt;<name>removed</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>edit_baton</name> = <name>baton</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>removed</name> = <name><name>baton</name>-&gt;<name>removed</name></name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>rmlocks_check</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>spec</name></decl></param>, <param><decl><type><name>apr_hash_t</name> *</type><name>hash</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>n</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<for>for (<init>;</init> <condition><expr>*<name>spec</name></expr>;</condition> <incr><expr>++<name>spec</name></expr>, <expr>++<name>n</name></expr></incr>) <block>{
<if>if <condition>(<expr>! <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr>*<name>spec</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"Lock token for '%s' should have been removed"</expr></argument>, <argument><expr>*<name>spec</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></for>
<if>if <condition>(<expr><name>n</name> &lt; <call><name>apr_hash_count</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"Lock token for one or more paths unexpectedly "
"removed"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>rmlocks</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>youngest_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_delta_editor_t</name> *</type><name>editor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>edit_baton</name></decl>, *<decl><type ref="prev"/><name>report_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_lock_t</name> *</type><name>l1</name></decl>, *<decl><type ref="prev"/><name>l2</name></decl>, *<decl><type ref="prev"/><name>l3</name></decl>, *<decl><type ref="prev"/><name>l4</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_access_t</name> *</type><name>fs_access</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>removed</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "test removal of defunct locks"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_repos</name><argument_list>(<argument><expr>&amp;<name>repos</name></expr></argument>, <argument><expr>"test-repo-rmlocks"</expr></argument>,
<argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fs</name> = <call><name>svn_repos_fs</name><argument_list>(<argument><expr><name>repos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_greek_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_create_access</name><argument_list>(<argument><expr>&amp;<name>fs_access</name></expr></argument>, <argument><expr>"user1"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_set_access</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>fs_access</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name><name>expected</name> <index>[]</index></name> <init>= <expr><block>{ <expr>"A/mu"</expr>, <expr>"A/D/gamma"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_lock</name><argument_list>(<argument><expr>&amp;<name>l1</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>"/iota"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_lock</name><argument_list>(<argument><expr>&amp;<name>l2</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>"/A/mu"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_lock</name><argument_list>(<argument><expr>&amp;<name>l3</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>"/A/D/gamma"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_unlock</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr>"/A/mu"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_lock</name><argument_list>(<argument><expr>&amp;<name>l4</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>"/A/D/gamma"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>create_rmlocks_editor</name><argument_list>(<argument><expr>&amp;<name>editor</name></expr></argument>, <argument><expr>&amp;<name>edit_baton</name></expr></argument>, <argument><expr>&amp;<name>removed</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_begin_report2</name><argument_list>(<argument><expr>&amp;<name>report_baton</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr>"/"</expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>svn_depth_infinity</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>editor</name></expr></argument>, <argument><expr><name>edit_baton</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_set_path3</name><argument_list>(<argument><expr><name>report_baton</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr>1</expr></argument>,
<argument><expr><name>svn_depth_infinity</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_set_path3</name><argument_list>(<argument><expr><name>report_baton</name></expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr>1</expr></argument>,
<argument><expr><name>svn_depth_infinity</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>l1</name>-&gt;<name>token</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_set_path3</name><argument_list>(<argument><expr><name>report_baton</name></expr></argument>, <argument><expr>"A/mu"</expr></argument>, <argument><expr>1</expr></argument>,
<argument><expr><name>svn_depth_infinity</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>l2</name>-&gt;<name>token</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_set_path3</name><argument_list>(<argument><expr><name>report_baton</name></expr></argument>, <argument><expr>"A/D/gamma"</expr></argument>, <argument><expr>1</expr></argument>,
<argument><expr><name>svn_depth_infinity</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name><name>l3</name>-&gt;<name>token</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_finish_report</name><argument_list>(<argument><expr><name>report_baton</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>rmlocks_check</name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><name>removed</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>authz_get_handle</name><parameter_list>(<param><decl><type><name>svn_authz_t</name> **</type><name>authz_p</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>authz_contents</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>authz_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>apr_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>authz_file_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR_W</name><argument_list>(<argument><expr><call><name>svn_io_open_unique_file2</name><argument_list>(<argument><expr>&amp;<name>authz_file</name></expr></argument>, <argument><expr>&amp;<name>authz_file_path</name></expr></argument>,
<argument><expr>"authz_file"</expr></argument>, <argument><expr>"tmp"</expr></argument>,
<argument><expr><name>svn_io_file_del_none</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"Opening temporary file"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>apr_err</name> = <call><name>apr_file_write_full</name><argument_list>(<argument><expr><name>authz_file</name></expr></argument>, <argument><expr><name>authz_contents</name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>authz_contents</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr>(<name>void</name>) <call><name>apr_file_close</name><argument_list>(<argument><expr><name>authz_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>(<name>void</name>) <call><name>apr_file_remove</name><argument_list>(<argument><expr><name>authz_file_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_error_wrap_apr</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>, <argument><expr>"Writing test authz file"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>apr_err</name> = <call><name>apr_file_close</name><argument_list>(<argument><expr><name>authz_file</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr>(<name>void</name>) <call><name>apr_file_remove</name><argument_list>(<argument><expr><name>authz_file_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_error_wrap_apr</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>, <argument><expr>"Closing test authz file"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>err</name> = <call><name>svn_repos_authz_read</name><argument_list>(<argument><expr><name>authz_p</name></expr></argument>, <argument><expr><name>authz_file_path</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr>(<name>void</name>) <call><name>apr_file_remove</name><argument_list>(<argument><expr><name>authz_file_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_error_quick_wrap</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr>"Opening test authz file"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>apr_err</name> = <call><name>apr_file_remove</name><argument_list>(<argument><expr><name>authz_file_path</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<return>return <expr><call><name>svn_error_wrap_apr</name><argument_list>(<argument><expr><name>apr_err</name></expr></argument>, <argument><expr>"Removing test authz file"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>authz</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>contents</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_authz_t</name> *</type><name>authz_cfg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>access_granted</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>user</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_repos_authz_access_t</name></type> <name>required</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_boolean_t</name></type> <name>expected</name></decl>;</decl_stmt>
}</block> <decl><name><name>test_set</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"/A"</expr>, <expr><name>NULL</name></expr>, <expr><name>svn_authz_read</name></expr>, <expr><name>TRUE</name></expr> }</block></expr>,
<expr><block>{ <expr>"/iota"</expr>, <expr><name>NULL</name></expr>, <expr><name>svn_authz_read</name></expr>, <expr><name>FALSE</name></expr> }</block></expr>,
<expr><block>{ <expr>"/A"</expr>, <expr>"plato"</expr>, <expr><name>svn_authz_write</name></expr>, <expr><name>TRUE</name></expr> }</block></expr>,
<expr><block>{ <expr>"/A"</expr>, <expr><name>NULL</name></expr>, <expr><name>svn_authz_write</name></expr>, <expr><name>FALSE</name></expr> }</block></expr>,
<expr><block>{ <expr>"/A/B/lambda"</expr>, <expr>"plato"</expr>, <expr><name>svn_authz_read</name></expr>, <expr><name>TRUE</name></expr> }</block></expr>,
<expr><block>{ <expr>"/A/B/lambda"</expr>, <expr><name>NULL</name></expr>, <expr><name>svn_authz_read</name></expr>, <expr><name>FALSE</name></expr> }</block></expr>,
<expr><block>{ <expr>"/A/C"</expr>, <expr><name>NULL</name></expr>, <expr><name>svn_authz_read</name></expr>, <expr><name>TRUE</name></expr> }</block></expr>,
<expr><block>{ <expr>"/A/D"</expr>, <expr>"plato"</expr>, <expr><name>svn_authz_read</name> | <name>svn_authz_recursive</name></expr>, <expr><name>TRUE</name></expr> }</block></expr>,
<expr><block>{ <expr>"/A/D"</expr>, <expr><name>NULL</name></expr>, <expr><name>svn_authz_read</name> | <name>svn_authz_recursive</name></expr>, <expr><name>FALSE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr>"plato"</expr>, <expr><name>svn_authz_read</name></expr>, <expr><name>TRUE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>svn_authz_write</name></expr>, <expr><name>FALSE</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>svn_authz_none</name></expr>, <expr><name>FALSE</name></expr> }</block></expr>
}</block></expr></init></decl>;</struct>
<expr_stmt><expr>*<name>msg</name> = "test authz access control"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>contents</name> =
"[greek:/A]" <name>NL</name>
"* = r" <name>NL</name>
"plato = w" <name>NL</name>
"" <name>NL</name>
"[greek:/iota]" <name>NL</name>
"* =" <name>NL</name>
"" <name>NL</name>
"[/A/B/lambda]" <name>NL</name>
"plato = r" <name>NL</name>
"* =" <name>NL</name>
"" <name>NL</name>
"[greek:/A/D]" <name>NL</name>
"plato = r" <name>NL</name>
"* = r" <name>NL</name>
"" <name>NL</name>
"[greek:/A/D/G]" <name>NL</name>
"plato = r" <name>NL</name>
"* =" <name>NL</name>
"" <name>NL</name>
"[greek:/A/B/E/beta]" <name>NL</name>
"* =" <name>NL</name>
"" <name>NL</name>
"[/nowhere]" <name>NL</name>
"nobody = r" <name>NL</name>
"" <name>NL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>authz_get_handle</name><argument_list>(<argument><expr>&amp;<name>authz_cfg</name></expr></argument>, <argument><expr><name>contents</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr>!(<name><name>test_set</name><index>[<expr><name>i</name></expr>]</index></name>.<name>path</name> == <name>NULL</name>
&amp;&amp; <name><name>test_set</name><index>[<expr><name>i</name></expr>]</index></name>.<name>required</name> == <name>svn_authz_none</name>)</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_authz_check_access</name><argument_list>(<argument><expr><name>authz_cfg</name></expr></argument>, <argument><expr>"greek"</expr></argument>,
<argument><expr><name><name>test_set</name><index>[<expr><name>i</name></expr>]</index></name>.<name>path</name></expr></argument>,
<argument><expr><name><name>test_set</name><index>[<expr><name>i</name></expr>]</index></name>.<name>user</name></expr></argument>,
<argument><expr><name><name>test_set</name><index>[<expr><name>i</name></expr>]</index></name>.<name>required</name></expr></argument>,
<argument><expr>&amp;<name>access_granted</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>access_granted</name> != <name><name>test_set</name><index>[<expr><name>i</name></expr>]</index></name>.<name>expected</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"Authz incorrectly %s %s%s access "
"to greek:%s for user %s"</expr></argument>,
<argument><expr><name>access_granted</name> ?
"grants" : "denies"</expr></argument>,
<argument><expr><name><name>test_set</name><index>[<expr><name>i</name></expr>]</index></name>.<name>required</name>
&amp; <name>svn_authz_recursive</name> ?
"recursive " : ""</expr></argument>,
<argument><expr><name><name>test_set</name><index>[<expr><name>i</name></expr>]</index></name>.<name>required</name>
&amp; <name>svn_authz_read</name> ?
"read" : "write"</expr></argument>,
<argument><expr><name><name>test_set</name><index>[<expr><name>i</name></expr>]</index></name>.<name>path</name></expr></argument>,
<argument><expr><name><name>test_set</name><index>[<expr><name>i</name></expr>]</index></name>.<name>user</name> ?
<name><name>test_set</name><index>[<expr><name>i</name></expr>]</index></name>.<name>user</name> : "-"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></for>
<expr_stmt><expr><name>contents</name> =
"[groups]" <name>NL</name>
"slaves = cooks,scribes,@gladiators" <name>NL</name>
"gladiators = equites,thraces,@slaves" <name>NL</name>
"" <name>NL</name>
"[greek:/A]" <name>NL</name>
"@slaves = r" <name>NL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>authz_get_handle</name><argument_list>(<argument><expr>&amp;<name>authz_cfg</name></expr></argument>, <argument><expr><name>contents</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>err</name> || <name><name>err</name>-&gt;<name>apr_err</name></name> != <name>SVN_ERR_AUTHZ_INVALID_CONFIG</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>err</name></expr></argument>,
<argument><expr>"Got %s error instead of expected "
"SVN_ERR_AUTHZ_INVALID_CONFIG"</expr></argument>,
<argument><expr><name>err</name> ? "unexpected" : "no"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>contents</name> =
"[greek:/A]" <name>NL</name>
"@senate = r" <name>NL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>authz_get_handle</name><argument_list>(<argument><expr>&amp;<name>authz_cfg</name></expr></argument>, <argument><expr><name>contents</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>err</name> || <name><name>err</name>-&gt;<name>apr_err</name></name> != <name>SVN_ERR_AUTHZ_INVALID_CONFIG</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>err</name></expr></argument>,
<argument><expr>"Got %s error instead of expected "
"SVN_ERR_AUTHZ_INVALID_CONFIG"</expr></argument>,
<argument><expr><name>err</name> ? "unexpected" : "no"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>contents</name> =
"[/]" <name>NL</name>
"* = rw" <name>NL</name>
"" <name>NL</name>
"[greek:/dir2/secret]" <name>NL</name>
"* =" <name>NL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>authz_get_handle</name><argument_list>(<argument><expr>&amp;<name>authz_cfg</name></expr></argument>, <argument><expr><name>contents</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_authz_check_access</name><argument_list>(<argument><expr><name>authz_cfg</name></expr></argument>, <argument><expr>"greek"</expr></argument>,
<argument><expr>"/dir"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>(<name>svn_authz_read</name>
| <name>svn_authz_recursive</name>)</expr></argument>,
<argument><expr>&amp;<name>access_granted</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>access_granted</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"Regression: incomplete ancestry test "
"for recursive access lookup."</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>commit_authz_cb</name><parameter_list>(<param><decl><type><name>svn_repos_authz_access_t</name></type> <name>required</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name> *</type><name>allowed</name></decl></param>,
<param><decl><type><name>svn_fs_root_t</name> *</type><name>root</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_authz_t</name> *</type><name>authz_file</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>svn_repos_authz_check_access</name><argument_list>(<argument><expr><name>authz_file</name></expr></argument>, <argument><expr>"test"</expr></argument>, <argument><expr><name>path</name></expr></argument>,
<argument><expr>"plato"</expr></argument>, <argument><expr><name>required</name></expr></argument>, <argument><expr><name>allowed</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>commit_editor_authz</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>youngest_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>edit_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>root_baton</name></decl>, *<decl><type ref="prev"/><name>dir_baton</name></decl>, *<decl><type ref="prev"/><name>dir2_baton</name></decl>, *<decl><type ref="prev"/><name>file_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>editor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_authz_t</name> *</type><name>authz_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>authz_contents</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "test authz in the commit editor"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_repos</name><argument_list>(<argument><expr>&amp;<name>repos</name></expr></argument>, <argument><expr>"test-repo-commit-authz"</expr></argument>,
<argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fs</name> = <call><name>svn_repos_fs</name><argument_list>(<argument><expr><name>repos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_greek_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>authz_contents</name> =
"" <name>NL</name>
"" <name>NL</name>
"[/]" <name>NL</name>
"plato = r" <name>NL</name>
"" <name>NL</name>
"[/A]" <name>NL</name>
"plato = rw" <name>NL</name>
"" <name>NL</name>
"[/A/alpha]" <name>NL</name>
"plato = " <name>NL</name>
"" <name>NL</name>
"[/A/C]" <name>NL</name>
"" <name>NL</name>
"plato = " <name>NL</name>
"" <name>NL</name>
"[/A/D]" <name>NL</name>
"plato = rw" <name>NL</name>
"" <name>NL</name>
"[/A/D/G]" <name>NL</name>
"plato = r"</expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>authz_get_handle</name><argument_list>(<argument><expr>&amp;<name>authz_file</name></expr></argument>, <argument><expr><name>authz_contents</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_get_commit_editor4</name><argument_list>(<argument><expr>&amp;<name>editor</name></expr></argument>, <argument><expr>&amp;<name>edit_baton</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr>"file://test"</expr></argument>, <argument><expr>"/"</expr></argument>,
<argument><expr>"plato"</expr></argument>, <argument><expr>"test commit"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>commit_authz_cb</name></expr></argument>, <argument><expr><name>authz_file</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>editor</name>-&gt;<name>open_root</name></name><argument_list>(<argument><expr><name>edit_baton</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>subpool</name></expr></argument>, <argument><expr>&amp;<name>root_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name><name>editor</name>-&gt;<name>delete_entry</name></name><argument_list>(<argument><expr>"/iota"</expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>, <argument><expr><name>root_baton</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> == <name>SVN_NO_ERROR</name> || <name><name>err</name>-&gt;<name>apr_err</name></name> != <name>SVN_ERR_AUTHZ_UNWRITABLE</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>err</name></expr></argument>,
<argument><expr>"Got %s error instead of expected "
"SVN_ERR_AUTHZ_UNWRITABLE"</expr></argument>,
<argument><expr><name>err</name> ? "unexpected" : "no"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>editor</name>-&gt;<name>open_file</name></name><argument_list>(<argument><expr>"/iota"</expr></argument>, <argument><expr><name>root_baton</name></expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>, <argument><expr>&amp;<name>file_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name><name>editor</name>-&gt;<name>change_file_prop</name></name><argument_list>(<argument><expr><name>file_baton</name></expr></argument>, <argument><expr>"svn:test"</expr></argument>,
<argument><expr><call><name>svn_string_create</name><argument_list>(<argument><expr>"test"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> == <name>SVN_NO_ERROR</name> || <name><name>err</name>-&gt;<name>apr_err</name></name> != <name>SVN_ERR_AUTHZ_UNWRITABLE</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>err</name></expr></argument>,
<argument><expr>"Got %s error instead of expected "
"SVN_ERR_AUTHZ_UNWRITABLE"</expr></argument>,
<argument><expr><name>err</name> ? "unexpected" : "no"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name><name>editor</name>-&gt;<name>add_file</name></name><argument_list>(<argument><expr>"/alpha"</expr></argument>, <argument><expr><name>root_baton</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>, <argument><expr>&amp;<name>file_baton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> == <name>SVN_NO_ERROR</name> || <name><name>err</name>-&gt;<name>apr_err</name></name> != <name>SVN_ERR_AUTHZ_UNWRITABLE</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>err</name></expr></argument>,
<argument><expr>"Got %s error instead of expected "
"SVN_ERR_AUTHZ_UNWRITABLE"</expr></argument>,
<argument><expr><name>err</name> ? "unexpected" : "no"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name><name>editor</name>-&gt;<name>add_file</name></name><argument_list>(<argument><expr>"/alpha"</expr></argument>, <argument><expr><name>root_baton</name></expr></argument>, <argument><expr>"file://test/A/B/lambda"</expr></argument>,
<argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>, <argument><expr>&amp;<name>file_baton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> == <name>SVN_NO_ERROR</name> || <name><name>err</name>-&gt;<name>apr_err</name></name> != <name>SVN_ERR_AUTHZ_UNWRITABLE</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>err</name></expr></argument>,
<argument><expr>"Got %s error instead of expected "
"SVN_ERR_AUTHZ_UNWRITABLE"</expr></argument>,
<argument><expr><name>err</name> ? "unexpected" : "no"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name><name>editor</name>-&gt;<name>add_directory</name></name><argument_list>(<argument><expr>"/I"</expr></argument>, <argument><expr><name>root_baton</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>, <argument><expr>&amp;<name>dir_baton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> == <name>SVN_NO_ERROR</name> || <name><name>err</name>-&gt;<name>apr_err</name></name> != <name>SVN_ERR_AUTHZ_UNWRITABLE</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>err</name></expr></argument>,
<argument><expr>"Got %s error instead of expected "
"SVN_ERR_AUTHZ_UNWRITABLE"</expr></argument>,
<argument><expr><name>err</name> ? "unexpected" : "no"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name><name>editor</name>-&gt;<name>add_directory</name></name><argument_list>(<argument><expr>"/J"</expr></argument>, <argument><expr><name>root_baton</name></expr></argument>, <argument><expr>"file://test/A/D"</expr></argument>,
<argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>, <argument><expr>&amp;<name>dir_baton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> == <name>SVN_NO_ERROR</name> || <name><name>err</name>-&gt;<name>apr_err</name></name> != <name>SVN_ERR_AUTHZ_UNWRITABLE</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>err</name></expr></argument>,
<argument><expr>"Got %s error instead of expected "
"SVN_ERR_AUTHZ_UNWRITABLE"</expr></argument>,
<argument><expr><name>err</name> ? "unexpected" : "no"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>editor</name>-&gt;<name>open_directory</name></name><argument_list>(<argument><expr>"/A"</expr></argument>, <argument><expr><name>root_baton</name></expr></argument>,
<argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>, <argument><expr>&amp;<name>dir_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name><name>editor</name>-&gt;<name>add_file</name></name><argument_list>(<argument><expr>"/A/alpha"</expr></argument>, <argument><expr><name>dir_baton</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>, <argument><expr>&amp;<name>file_baton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> == <name>SVN_NO_ERROR</name> || <name><name>err</name>-&gt;<name>apr_err</name></name> != <name>SVN_ERR_AUTHZ_UNWRITABLE</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>err</name></expr></argument>,
<argument><expr>"Got %s error instead of expected "
"SVN_ERR_AUTHZ_UNWRITABLE"</expr></argument>,
<argument><expr><name>err</name> ? "unexpected" : "no"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>editor</name>-&gt;<name>add_file</name></name><argument_list>(<argument><expr>"/A/B/theta"</expr></argument>, <argument><expr><name>dir_baton</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>,
<argument><expr>&amp;<name>file_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>editor</name>-&gt;<name>delete_entry</name></name><argument_list>(<argument><expr>"/A/mu"</expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>, <argument><expr><name>dir_baton</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>editor</name>-&gt;<name>add_directory</name></name><argument_list>(<argument><expr>"/A/E"</expr></argument>, <argument><expr><name>dir_baton</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>,
<argument><expr>&amp;<name>dir2_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>editor</name>-&gt;<name>add_directory</name></name><argument_list>(<argument><expr>"/A/J"</expr></argument>, <argument><expr><name>dir_baton</name></expr></argument>, <argument><expr>"file://test/A/D"</expr></argument>,
<argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>,
<argument><expr>&amp;<name>dir2_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>editor</name>-&gt;<name>open_directory</name></name><argument_list>(<argument><expr>"/A/D"</expr></argument>, <argument><expr><name>dir_baton</name></expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>, <argument><expr>&amp;<name>dir_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name><name>editor</name>-&gt;<name>delete_entry</name></name><argument_list>(<argument><expr>"/A/D/G"</expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>, <argument><expr><name>dir_baton</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> == <name>SVN_NO_ERROR</name> || <name><name>err</name>-&gt;<name>apr_err</name></name> != <name>SVN_ERR_AUTHZ_UNWRITABLE</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>err</name></expr></argument>,
<argument><expr>"Got %s error instead of expected "
"SVN_ERR_AUTHZ_UNWRITABLE"</expr></argument>,
<argument><expr><name>err</name> ? "unexpected" : "no"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>editor</name>-&gt;<name>delete_entry</name></name><argument_list>(<argument><expr>"/A/D/H"</expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
<argument><expr><name>dir_baton</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>editor</name>-&gt;<name>open_file</name></name><argument_list>(<argument><expr>"/A/D/gamma"</expr></argument>, <argument><expr><name>dir_baton</name></expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>, <argument><expr>&amp;<name>file_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>editor</name>-&gt;<name>change_file_prop</name></name><argument_list>(<argument><expr><name>file_baton</name></expr></argument>, <argument><expr>"svn:test"</expr></argument>,
<argument><expr><call><name>svn_string_create</name><argument_list>(<argument><expr>"test"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>editor</name>-&gt;<name>abort_edit</name></name><argument_list>(<argument><expr><name>edit_baton</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>dummy_commit_cb</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_commit_info_t</name> *</type><name>commit_info</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>commit_continue_txn</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>, *<decl><type ref="prev"/><name>revision_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>youngest_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>edit_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>root_baton</name></decl>, *<decl><type ref="prev"/><name>file_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>editor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_name</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "test commit with explicit txn"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_repos</name><argument_list>(<argument><expr>&amp;<name>repos</name></expr></argument>, <argument><expr>"test-repo-commit-continue"</expr></argument>,
<argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fs</name> = <call><name>svn_repos_fs</name><argument_list>(<argument><expr><name>repos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_greek_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_name</name><argument_list>(<argument><expr>&amp;<name>txn_name</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_get_commit_editor4</name><argument_list>(<argument><expr>&amp;<name>editor</name></expr></argument>, <argument><expr>&amp;<name>edit_baton</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>,
<argument><expr><name>txn</name></expr></argument>, <argument><expr>"file://test"</expr></argument>, <argument><expr>"/"</expr></argument>,
<argument><expr>"plato"</expr></argument>, <argument><expr>"test commit"</expr></argument>,
<argument><expr><name>dummy_commit_cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>editor</name>-&gt;<name>open_root</name></name><argument_list>(<argument><expr><name>edit_baton</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>subpool</name></expr></argument>, <argument><expr>&amp;<name>root_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>editor</name>-&gt;<name>add_file</name></name><argument_list>(<argument><expr>"/f1"</expr></argument>, <argument><expr><name>root_baton</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>, <argument><expr>&amp;<name>file_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>editor</name>-&gt;<name>close_file</name></name><argument_list>(<argument><expr><name>file_baton</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>editor</name>-&gt;<name>abort_edit</name></name><argument_list>(<argument><expr><name>edit_baton</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_open_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>txn_name</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_get_commit_editor4</name><argument_list>(<argument><expr>&amp;<name>editor</name></expr></argument>, <argument><expr>&amp;<name>edit_baton</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>,
<argument><expr><name>txn</name></expr></argument>, <argument><expr>"file://test"</expr></argument>, <argument><expr>"/"</expr></argument>,
<argument><expr>"plato"</expr></argument>, <argument><expr>"test commit"</expr></argument>,
<argument><expr><name>dummy_commit_cb</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>editor</name>-&gt;<name>open_root</name></name><argument_list>(<argument><expr><name>edit_baton</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>subpool</name></expr></argument>, <argument><expr>&amp;<name>root_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>editor</name>-&gt;<name>add_file</name></name><argument_list>(<argument><expr>"/f2"</expr></argument>, <argument><expr><name>root_baton</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>, <argument><expr>&amp;<name>file_baton</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>editor</name>-&gt;<name>close_file</name></name><argument_list>(<argument><expr><name>file_baton</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name><name>editor</name>-&gt;<name>close_edit</name></name><argument_list>(<argument><expr><name>edit_baton</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>expected_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"iota"</expr>, <expr>"This is the file 'iota'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/mu"</expr>, <expr>"This is the file 'mu'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/lambda"</expr>, <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/beta"</expr>, <expr>"This is the file 'beta'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/F"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/C"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/gamma"</expr>, <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/pi"</expr>, <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/rho"</expr>, <expr>"This is the file 'rho'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/tau"</expr>, <expr>"This is the file 'tau'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/chi"</expr>, <expr>"This is the file 'chi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/psi"</expr>, <expr>"This is the file 'psi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/omega"</expr>, <expr>"This is the file 'omega'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"f1"</expr>, <expr>""</expr> }</block></expr>,
<expr><block>{ <expr>"f2"</expr>, <expr>""</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>revision_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>,
<argument><expr>2</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name>
<argument_list>(<argument><expr><name>revision_root</name></expr></argument>, <argument><expr><name>expected_entries</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>expected_entries</name></expr></argument>)</argument_list></sizeof> / <sizeof>sizeof<argument_list>(<argument><expr><name><name>expected_entries</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<struct>struct <name>nls_receiver_baton</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_location_segment_t</name> *</type><name>expected_segments</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>format_segment</name><parameter_list>(<param><decl><type><name>svn_location_segment_t</name> *</type><name>segment</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"[r%ld-r%ld: /%s]"</expr></argument>,
<argument><expr><name><name>segment</name>-&gt;<name>range_start</name></name></expr></argument>,
<argument><expr><name><name>segment</name>-&gt;<name>range_end</name></name></expr></argument>,
<argument><expr><name><name>segment</name>-&gt;<name>path</name></name> ? <name><name>segment</name>-&gt;<name>path</name></name> : "(null)"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>nls_receiver</name><parameter_list>(<param><decl><type><name>svn_location_segment_t</name> *</type><name>segment</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>nls_receiver_baton</name> *</type><name>b</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_location_segment_t</name> *</type><name>expected_segment</name> <init>= <expr><name><name>b</name>-&gt;<name>expected_segments</name></name> + <name><name>b</name>-&gt;<name>count</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>! <name><name>expected_segment</name>-&gt;<name>range_end</name></name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"Got unexpected location segment: %s"</expr></argument>,
<argument><expr><call><name>format_segment</name><argument_list>(<argument><expr><name>segment</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>expected_segment</name>-&gt;<name>range_start</name></name> != <name><name>segment</name>-&gt;<name>range_start</name></name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"Location segments differ\n"
" Expected location segment: %s\n"
" Actual location segment: %s"</expr></argument>,
<argument><expr><call><name>format_segment</name><argument_list>(<argument><expr><name>expected_segment</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>format_segment</name><argument_list>(<argument><expr><name>segment</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name><name>b</name>-&gt;<name>count</name></name>++</expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>check_location_segments</name><parameter_list>(<param><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>peg_rev</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>start_rev</name></decl></param>,
<param><decl><type><name>svn_revnum_t</name></type> <name>end_rev</name></decl></param>,
<param><decl><type><name>svn_location_segment_t</name> *</type><name>expected_segments</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>nls_receiver_baton</name></type> <name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_location_segment_t</name> *</type><name>segment</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>b</name>.<name>count</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>.<name>expected_segments</name></name> = <name>expected_segments</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_node_location_segments</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>peg_rev</name></expr></argument>,
<argument><expr><name>start_rev</name></expr></argument>, <argument><expr><name>end_rev</name></expr></argument>, <argument><expr><name>nls_receiver</name></expr></argument>,
<argument><expr>&amp;<name>b</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>segment</name> = <name>expected_segments</name> + <name><name>b</name>.<name>count</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>segment</name>-&gt;<name>range_end</name></name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"Failed to get expected location segment: %s"</expr></argument>,
<argument><expr><call><name>format_segment</name><argument_list>(<argument><expr><name>segment</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>node_location_segments</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>, *<decl><type ref="prev"/><name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>youngest_rev</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "test svn_repos_node_location_segments"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_repos</name><argument_list>(<argument><expr>&amp;<name>repos</name></expr></argument>, <argument><expr>"test-repo-node-location-segments"</expr></argument>,
<argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fs</name> = <call><name>svn_repos_fs</name><argument_list>(<argument><expr><name>repos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_greek_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/H/chi"</expr></argument>, <argument><expr>"2"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/B/E/alpha"</expr></argument>, <argument><expr>"2"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copy</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr>"A/D"</expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D2"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D/H/chi"</expr></argument>, <argument><expr>"4"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__set_file_contents</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D2/H/chi"</expr></argument>, <argument><expr>"4"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D2/G"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copy</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr>"A/D2/G"</expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D2/G"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copy</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr>"A/D2"</expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_delete</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"A/D2"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><name>svn_location_segment_t</name></type> <name><name>expected_segments</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>0</expr>, <expr>7</expr>, <expr>""</expr> }</block></expr>,
<expr><block>{ <expr>0</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_location_segments</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr>""</expr></argument>,
<argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
<argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
<argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
<argument><expr><name>expected_segments</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<block>{
<decl_stmt><decl><type><name>svn_location_segment_t</name></type> <name><name>expected_segments</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>7</expr>, <expr>7</expr>, <expr>"A/D"</expr> }</block></expr>,
<expr><block>{ <expr>3</expr>, <expr>6</expr>, <expr>"A/D2"</expr> }</block></expr>,
<expr><block>{ <expr>1</expr>, <expr>2</expr>, <expr>"A/D"</expr> }</block></expr>,
<expr><block>{ <expr>0</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_location_segments</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr>"A/D"</expr></argument>,
<argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
<argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
<argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
<argument><expr><name>expected_segments</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<block>{
<decl_stmt><decl><type><name>svn_location_segment_t</name></type> <name><name>expected_segments</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>3</expr>, <expr>5</expr>, <expr>"A/D2"</expr> }</block></expr>,
<expr><block>{ <expr>2</expr>, <expr>2</expr>, <expr>"A/D"</expr> }</block></expr>,
<expr><block>{ <expr>0</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_location_segments</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr>"A/D"</expr></argument>,
<argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
<argument><expr>5</expr></argument>,
<argument><expr>2</expr></argument>,
<argument><expr><name>expected_segments</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<block>{
<decl_stmt><decl><type><name>svn_location_segment_t</name></type> <name><name>expected_segments</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>3</expr>, <expr>3</expr>, <expr>"A/D2"</expr> }</block></expr>,
<expr><block>{ <expr>2</expr>, <expr>2</expr>, <expr>"A/D"</expr> }</block></expr>,
<expr><block>{ <expr>0</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_location_segments</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr>"A/D2"</expr></argument>,
<argument><expr>5</expr></argument>,
<argument><expr>3</expr></argument>,
<argument><expr>2</expr></argument>,
<argument><expr><name>expected_segments</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<block>{
<decl_stmt><decl><type><name>svn_location_segment_t</name></type> <name><name>expected_segments</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>1</expr>, <expr>6</expr>, <expr>"A/D"</expr> }</block></expr>,
<expr><block>{ <expr>0</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_location_segments</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr>"A/D"</expr></argument>,
<argument><expr>6</expr></argument>,
<argument><expr>6</expr></argument>,
<argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
<argument><expr><name>expected_segments</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<block>{
<decl_stmt><decl><type><name>svn_location_segment_t</name></type> <name><name>expected_segments</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>7</expr>, <expr>7</expr>, <expr>"A/D/G"</expr> }</block></expr>,
<expr><block>{ <expr>6</expr>, <expr>6</expr>, <expr>"A/D2/G"</expr> }</block></expr>,
<expr><block>{ <expr>5</expr>, <expr>5</expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr>3</expr>, <expr>4</expr>, <expr>"A/D2/G"</expr> }</block></expr>,
<expr><block>{ <expr>1</expr>, <expr>2</expr>, <expr>"A/D2/G"</expr> }</block></expr>,
<expr><block>{ <expr>0</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_location_segments</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>,
<argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
<argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
<argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
<argument><expr><name>expected_segments</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<block>{
<decl_stmt><decl><type><name>svn_location_segment_t</name></type> <name><name>expected_segments</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>3</expr>, <expr>3</expr>, <expr>"A/D2/G"</expr> }</block></expr>,
<expr><block>{ <expr>2</expr>, <expr>2</expr>, <expr>"A/D2/G"</expr> }</block></expr>,
<expr><block>{ <expr>0</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>check_location_segments</name><argument_list>(<argument><expr><name>repos</name></expr></argument>, <argument><expr>"A/D/G"</expr></argument>,
<argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
<argument><expr>3</expr></argument>,
<argument><expr>2</expr></argument>,
<argument><expr><name>expected_segments</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>reporter_depth_exclude</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_repos_t</name> *</type><name>repos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>youngest_rev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> *</type><name>editor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>edit_baton</name></decl>, *<decl><type ref="prev"/><name>report_baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "test reporter and svn_depth_exclude"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_repos</name><argument_list>(<argument><expr>&amp;<name>repos</name></expr></argument>, <argument><expr>"test-repo-reporter-depth-exclude"</expr></argument>,
<argument><expr><name><name>opts</name>-&gt;<name>fs_type</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fs</name> = <call><name>svn_repos_fs</name><argument_list>(<argument><expr><name>repos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_greek_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__txn_script_command_t</name></type> <name><name>script_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>'e'</expr>, <expr>"iota"</expr>, <expr>"Changed file 'iota'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>'e'</expr>, <expr>"A/D/G/pi"</expr>, <expr>"Changed file 'pi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>'e'</expr>, <expr>"A/mu"</expr>, <expr>"Changed file 'mu'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>'a'</expr>, <expr>"A/D/foo"</expr>, <expr>"New file 'foo'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>'a'</expr>, <expr>"A/B/bar"</expr>, <expr>"New file 'bar'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>'d'</expr>, <expr>"A/D/H"</expr>, <expr><name>NULL</name></expr> }</block></expr>,
<expr><block>{ <expr>'d'</expr>, <expr>"A/B/E/beta"</expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__txn_script_exec</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>,
<argument><expr><name>script_entries</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>script_entries</name></expr></argument>)</argument_list></sizeof>/
<sizeof>sizeof<argument_list>(<argument><expr><name><name>script_entries</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>revision_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"iota"</expr>, <expr>"Changed file 'iota'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/mu"</expr>, <expr>"Changed file 'mu'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/bar"</expr>, <expr>"New file 'bar'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/lambda"</expr>, <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/F"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/C"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/foo"</expr>, <expr>"New file 'foo'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/gamma"</expr>, <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/pi"</expr>, <expr>"Changed file 'pi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/rho"</expr>, <expr>"This is the file 'rho'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/tau"</expr>, <expr>"This is the file 'tau'.\n"</expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>revision_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>,
<argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>revision_root</name></expr></argument>,
<argument><expr><name>entries</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></sizeof>/<sizeof>sizeof<argument_list>(<argument><expr><name><name>entries</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dir_delta_get_editor</name><argument_list>(<argument><expr>&amp;<name>editor</name></expr></argument>, <argument><expr>&amp;<name>edit_baton</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>,
<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_begin_report2</name><argument_list>(<argument><expr>&amp;<name>report_baton</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr>"/"</expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>svn_depth_infinity</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>editor</name></expr></argument>, <argument><expr><name>edit_baton</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_set_path3</name><argument_list>(<argument><expr><name>report_baton</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr>1</expr></argument>,
<argument><expr><name>svn_depth_infinity</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_set_path3</name><argument_list>(<argument><expr><name>report_baton</name></expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
<argument><expr><name>svn_depth_exclude</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_set_path3</name><argument_list>(<argument><expr><name>report_baton</name></expr></argument>, <argument><expr>"A/D"</expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
<argument><expr><name>svn_depth_exclude</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_finish_report</name><argument_list>(<argument><expr><name>report_baton</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__tree_entry_t</name></type> <name><name>entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"iota"</expr>, <expr>"This is the file 'iota'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/mu"</expr>, <expr>"Changed file 'mu'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/bar"</expr>, <expr>"New file 'bar'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/lambda"</expr>, <expr>"This is the file 'lambda'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/E/alpha"</expr>, <expr>"This is the file 'alpha'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/B/F"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/C"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/gamma"</expr>, <expr>"This is the file 'gamma'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/pi"</expr>, <expr>"This is the file 'pi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/rho"</expr>, <expr>"This is the file 'rho'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/G/tau"</expr>, <expr>"This is the file 'tau'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/chi"</expr>, <expr>"This is the file 'chi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/psi"</expr>, <expr>"This is the file 'psi'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>"A/D/H/omega"</expr>, <expr>"This is the file 'omega'.\n"</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__validate_tree</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>,
<argument><expr><name>entries</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></sizeof>/<sizeof>sizeof<argument_list>(<argument><expr><name><name>entries</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name>svn_fs_abort_txn</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>dir_delta_get_editor</name><argument_list>(<argument><expr>&amp;<name>editor</name></expr></argument>, <argument><expr>&amp;<name>edit_baton</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>,
<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_begin_report2</name><argument_list>(<argument><expr>&amp;<name>report_baton</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>repos</name></expr></argument>, <argument><expr>"/"</expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>svn_depth_infinity</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>editor</name></expr></argument>, <argument><expr><name>edit_baton</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_set_path3</name><argument_list>(<argument><expr><name>report_baton</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr>1</expr></argument>,
<argument><expr><name>svn_depth_infinity</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_set_path3</name><argument_list>(<argument><expr><name>report_baton</name></expr></argument>, <argument><expr>"iota"</expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
<argument><expr><name>svn_depth_exclude</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_set_path3</name><argument_list>(<argument><expr><name>report_baton</name></expr></argument>, <argument><expr>"A/D"</expr></argument>, <argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
<argument><expr><name>svn_depth_exclude</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_repos_set_path3</name><argument_list>(<argument><expr><name>report_baton</name></expr></argument>, <argument><expr>"A/D/G/pi"</expr></argument>,
<argument><expr><name>SVN_INVALID_REVNUM</name></expr></argument>,
<argument><expr><name>svn_depth_infinity</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_repos_finish_report</name><argument_list>(<argument><expr><name>report_baton</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>err</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"Illegal report of \"A/D/G/pi\" did not error as expected"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name><name>err</name>-&gt;<name>apr_err</name></name> != <name>SVN_ERR_FS_NOT_FOUND</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>err</name></expr></argument>,
<argument><expr>"Illegal report of \"A/D/G/pi\" got wrong kind of error:"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if></else></if>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><call><name>svn_fs_abort_txn</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type>struct <name>svn_test_descriptor_t</name></type> <name><name>test_funcs</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>SVN_TEST_NULL</name></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>dir_deltas</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>node_tree_delete_under_copy</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>revisions_changed</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>node_locations</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>node_locations2</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>rmlocks</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>authz</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>commit_editor_authz</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>commit_continue_txn</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>node_location_segments</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>reporter_depth_exclude</name></expr></argument>)</argument_list></call></expr>,
<expr><name>SVN_TEST_NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
</unit>
