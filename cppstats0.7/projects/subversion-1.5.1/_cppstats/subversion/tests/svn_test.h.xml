<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/tests/svn_test.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SVN_TEST_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_TEST_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_delta.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_path.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_types.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><struct>struct <name>svn_test_opts_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fs_type</name></decl>;</decl_stmt>
}</block></struct></type> <name>svn_test_opts_t</name>;</typedef>
<typedef>typedef <function_decl><type><name>svn_error_t</name>*</type> (*<name>svn_test_driver_t</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl></typedef>
<enum>enum <name>svn_test_mode_t</name> <block>{
<decl><name>svn_test_pass</name></decl>,
<decl><name>svn_test_xfail</name></decl>,
<decl><name>svn_test_skip</name></decl>
}</block>;</enum>
<struct>struct <name>svn_test_descriptor_t</name> <block>{
<decl_stmt><decl><type><name>svn_test_driver_t</name></type> <name>func</name></decl>;</decl_stmt>
<enum>enum <name>svn_test_mode_t</name> <name>mode</name>;</enum>
}</block>;</struct>
<decl_stmt><decl><type><specifier>extern</specifier> struct <name>svn_test_descriptor_t</name></type> <name><name>test_funcs</name><index>[]</index></name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_TEST_NULL</name></cpp:macro> <cpp:value>{NULL, 0}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_TEST_PASS</name><parameter_list>(<param><type><name>func</name></type></param>)</parameter_list></cpp:macro> <cpp:value>{func, svn_test_pass}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_TEST_XFAIL</name><parameter_list>(<param><type><name>func</name></type></param>)</parameter_list></cpp:macro> <cpp:value>{func, svn_test_xfail}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_TEST_XFAIL_COND</name><parameter_list>(<param><type><name>func</name></type></param>, <param><type><name>p</name></type></param>)</parameter_list></cpp:macro><cpp:value>{func, (p) ? svn_test_xfail : svn_test_pass}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SVN_TEST_SKIP</name><parameter_list>(<param><type><name>func</name></type></param>, <param><type><name>p</name></type></param>)</parameter_list></cpp:macro> <cpp:value>{func, ((p) ? svn_test_skip : svn_test_pass)}</cpp:value></cpp:define>
<function_decl><type><name>apr_uint32_t</name></type> <name>svn_test_rand</name><parameter_list>(<param><decl><type><name>apr_uint32_t</name> *</type><name>seed</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>svn_test_add_dir_cleanup</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>svn_error_t</name> *</type><name>svn_test_get_editor</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>svn_delta_editor_t</name> **</type><name>editor</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>edit_baton</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>editor_name</name></decl></param>,
<param><decl><type><name>svn_stream_t</name> *</type><name>out_stream</name></decl></param>,
<param><decl><type><name>int</name></type> <name>indentation</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>verbose</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
