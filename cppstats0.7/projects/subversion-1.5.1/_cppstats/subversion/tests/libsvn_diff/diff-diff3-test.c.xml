<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/tests/libsvn_diff/diff-diff3-test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_diff.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_utf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../svn_test.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NL</name></cpp:macro> <cpp:value>APR_EOL_STR</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_uint32_t</name></type> <name>diff_diff3_seed</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>apr_uint32_t</name></type>
<name>seed_val</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_boolean_t</name></type> <name>first</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>first</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>diff_diff3_seed</name> = (<name>apr_uint32_t</name>) <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>first</name> = <name>FALSE</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>diff_diff3_seed</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_uint32_t</name></type>
<name>range_rand</name><parameter_list>(<param><decl><type><name>apr_uint32_t</name></type> <name>min_val</name></decl></param>,
<param><decl><type><name>apr_uint32_t</name></type> <name>max_val</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_uint64_t</name></type> <name>diff</name> <init>= <expr><name>max_val</name> - <name>min_val</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint64_t</name></type> <name>val</name> <init>= <expr><name>diff</name> * <call><name>svn_test_rand</name><argument_list>(<argument><expr>&amp;<name>diff_diff3_seed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>val</name> /= 0xffffffff</expr>;</expr_stmt>
<return>return <expr><name>min_val</name> + (<name>apr_uint32_t</name>) <name>val</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>make_random_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename</name></decl></param>,
<param><decl><type><name>int</name></type> <name>min_lines</name></decl></param>,
<param><decl><type><name>int</name></type> <name>max_lines</name></decl></param>,
<param><decl><type><name>int</name></type> <name>var_lines</name></decl></param>,
<param><decl><type><name>int</name></type> <name>block_lines</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>trailing_newline</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_lines</name></decl>;</decl_stmt>
<expr_stmt><expr><name>num_lines</name> = <call><name>range_rand</name><argument_list>(<argument><expr><name>min_lines</name></expr></argument>, <argument><expr><name>max_lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name>file</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>,
<argument><expr><name>APR_WRITE</name> | <name>APR_CREATE</name> | <name>APR_TRUNCATE</name></expr></argument>, <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"failed to open '%s'"</expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<while>while <condition>(<expr><name>num_lines</name>--</expr>)</condition> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<if>if <condition>(<expr>! (<name>block_lines</name> &amp;&amp; (<name>num_lines</name> / <name>block_lines</name> % 2))</expr>)</condition><then>
<expr_stmt><expr><name>x</name> = <call><name>range_rand</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name>var_lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>x</name> = 0</expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>num_lines</name> || <name>trailing_newline</name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr>"line %d line %d line %d\n"</expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr>"line %d line %d line %d"</expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></while>
<expr_stmt><expr><name>status</name> = <call><name>apr_file_close</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"failed to close '%s'"</expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>make_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>contents</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<expr_stmt><expr><name>status</name> = <call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name>file</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>,
<argument><expr><name>APR_WRITE</name> | <name>APR_CREATE</name> | <name>APR_TRUNCATE</name></expr></argument>, <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"failed to open '%s'"</expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>status</name> = <call><name>apr_file_write_full</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>contents</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>contents</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"failed to write '%s'"</expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>status</name> = <call><name>apr_file_close</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"failed to close '%s'"</expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>three_way_merge</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename1</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename2</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename3</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>contents1</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>contents2</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>contents3</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>expected</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_diff_file_options_t</name> *</type><name>options</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_diff_t</name> *</type><name>diff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>ostream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>actual</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>merge_name</name> <init>= <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"merge-%s-%s-%s"</expr></argument>,
<argument><expr><name>filename1</name></expr></argument>, <argument><expr><name>filename2</name></expr></argument>, <argument><expr><name>filename3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>original</name> <init>= <expr><call><name>svn_string_create</name><argument_list>(<argument><expr><name>contents1</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>modified</name> <init>= <expr><call><name>svn_string_create</name><argument_list>(<argument><expr><name>contents2</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>latest</name> <init>= <expr><call><name>svn_string_create</name><argument_list>(<argument><expr><name>contents3</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>options</name> = <name>options</name> ? <name>options</name> : <call><name>svn_diff_file_options_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_diff_mem_string_diff3</name><argument_list>(<argument><expr>&amp;<name>diff</name></expr></argument>,
<argument><expr><name>original</name></expr></argument>, <argument><expr><name>modified</name></expr></argument>, <argument><expr><name>latest</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>actual</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ostream</name> = <call><name>svn_stream_from_stringbuf</name><argument_list>(<argument><expr><name>actual</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_diff_mem_string_output_merge</name>
<argument_list>(<argument><expr><name>ostream</name></expr></argument>, <argument><expr><name>diff</name></expr></argument>, <argument><expr><name>original</name></expr></argument>, <argument><expr><name>modified</name></expr></argument>, <argument><expr><name>latest</name></expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"||||||| %s"</expr></argument>, <argument><expr><name>filename1</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"&lt;&lt;&lt;&lt;&lt;&lt;&lt; %s"</expr></argument>, <argument><expr><name>filename2</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"&gt;&gt;&gt;&gt;&gt;&gt;&gt; %s"</expr></argument>, <argument><expr><name>filename3</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_close</name><argument_list>(<argument><expr><name>ostream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>actual</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>expected</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"Failed mem-diff, expected and actual "
"outputs differ.\nEXPECTED:\n%s\n"
"ACTUAL:\n%s\n"</expr></argument>, <argument><expr><name>expected</name></expr></argument>, <argument><expr><name><name>actual</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>make_file</name><argument_list>(<argument><expr><name>filename1</name></expr></argument>, <argument><expr><name>contents1</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>make_file</name><argument_list>(<argument><expr><name>filename2</name></expr></argument>, <argument><expr><name>contents2</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>make_file</name><argument_list>(<argument><expr><name>filename3</name></expr></argument>, <argument><expr><name>contents3</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_diff_file_diff3_2</name><argument_list>(<argument><expr>&amp;<name>diff</name></expr></argument>, <argument><expr><name>filename1</name></expr></argument>, <argument><expr><name>filename2</name></expr></argument>, <argument><expr><name>filename3</name></expr></argument>,
<argument><expr><name>options</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name>output</name></expr></argument>, <argument><expr><name>merge_name</name></expr></argument>,
<argument><expr><name>APR_WRITE</name> | <name>APR_CREATE</name> | <name>APR_TRUNCATE</name></expr></argument>, <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"failed to open '%s'"</expr></argument>, <argument><expr><name>merge_name</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>ostream</name> = <call><name>svn_stream_from_aprfile</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_diff_file_output_merge</name><argument_list>(<argument><expr><name>ostream</name></expr></argument>, <argument><expr><name>diff</name></expr></argument>,
<argument><expr><name>filename1</name></expr></argument>, <argument><expr><name>filename2</name></expr></argument>, <argument><expr><name>filename3</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_close</name><argument_list>(<argument><expr><name>ostream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>apr_file_close</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"failed to close '%s'"</expr></argument>, <argument><expr><name>merge_name</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stringbuf_from_file</name><argument_list>(<argument><expr>&amp;<name>actual</name></expr></argument>, <argument><expr><name>merge_name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>actual</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>expected</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"failed merging diff '%s' to '%s' into '%s'"</expr></argument>,
<argument><expr><name>filename1</name></expr></argument>, <argument><expr><name>filename2</name></expr></argument>, <argument><expr><name>filename3</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_remove_file</name><argument_list>(<argument><expr><name>filename1</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>filename1</name></expr></argument>, <argument><expr><name>filename2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_remove_file</name><argument_list>(<argument><expr><name>filename2</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>filename1</name></expr></argument>, <argument><expr><name>filename3</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name>filename2</name></expr></argument>, <argument><expr><name>filename3</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_remove_file</name><argument_list>(<argument><expr><name>filename3</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_remove_file</name><argument_list>(<argument><expr><name>merge_name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>two_way_diff</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename1</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename2</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>contents1</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>contents2</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>expected</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>svn_diff_file_options_t</name> *</type><name>options</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_diff_t</name> *</type><name>diff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stream_t</name> *</type><name>ostream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>actual</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>diff_name</name> <init>= <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"diff-%s-%s"</expr></argument>, <argument><expr><name>filename1</name></expr></argument>, <argument><expr><name>filename2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>original</name> <init>= <expr><call><name>svn_string_create</name><argument_list>(<argument><expr><name>contents1</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>modified</name> <init>= <expr><call><name>svn_string_create</name><argument_list>(<argument><expr><name>contents2</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>options</name> = <name>options</name> ? <name>options</name> : <call><name>svn_diff_file_options_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_diff_mem_string_diff</name><argument_list>(<argument><expr>&amp;<name>diff</name></expr></argument>, <argument><expr><name>original</name></expr></argument>, <argument><expr><name>modified</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>actual</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ostream</name> = <call><name>svn_stream_from_stringbuf</name><argument_list>(<argument><expr><name>actual</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_diff_mem_string_output_unified</name><argument_list>(<argument><expr><name>ostream</name></expr></argument>, <argument><expr><name>diff</name></expr></argument>,
<argument><expr><name>filename1</name></expr></argument>, <argument><expr><name>filename2</name></expr></argument>,
<argument><expr><name>SVN_APR_LOCALE_CHARSET</name></expr></argument>,
<argument><expr><name>original</name></expr></argument>, <argument><expr><name>modified</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_close</name><argument_list>(<argument><expr><name>ostream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>actual</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>expected</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"Failed mem-diff, expected and actual "
"outputs differ.\nEXPECTED:\n%s\n"
"ACTUAL:\n%s\n"</expr></argument>, <argument><expr><name>expected</name></expr></argument>, <argument><expr><name><name>actual</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>make_file</name><argument_list>(<argument><expr><name>filename1</name></expr></argument>, <argument><expr><name>contents1</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>make_file</name><argument_list>(<argument><expr><name>filename2</name></expr></argument>, <argument><expr><name>contents2</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_diff_file_diff_2</name><argument_list>(<argument><expr>&amp;<name>diff</name></expr></argument>, <argument><expr><name>filename1</name></expr></argument>, <argument><expr><name>filename2</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name>output</name></expr></argument>, <argument><expr><name>diff_name</name></expr></argument>,
<argument><expr><name>APR_WRITE</name> | <name>APR_CREATE</name> | <name>APR_TRUNCATE</name></expr></argument>, <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"failed to open '%s'"</expr></argument>, <argument><expr><name>diff_name</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>ostream</name> = <call><name>svn_stream_from_aprfile</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_diff_file_output_unified2</name><argument_list>(<argument><expr><name>ostream</name></expr></argument>, <argument><expr><name>diff</name></expr></argument>,
<argument><expr><name>filename1</name></expr></argument>, <argument><expr><name>filename2</name></expr></argument>,
<argument><expr><name>filename1</name></expr></argument>, <argument><expr><name>filename2</name></expr></argument>,
<argument><expr><name>SVN_APR_LOCALE_CHARSET</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stream_close</name><argument_list>(<argument><expr><name>ostream</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>apr_file_close</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"failed to close '%s'"</expr></argument>, <argument><expr><name>diff_name</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stringbuf_from_file</name><argument_list>(<argument><expr>&amp;<name>actual</name></expr></argument>, <argument><expr><name>diff_name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>actual</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>expected</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"failed comparing '%s' and '%s'"</expr></argument>,
<argument><expr><name>filename1</name></expr></argument>, <argument><expr><name>filename2</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>three_way_merge</name><argument_list>(<argument><expr><name>filename1</name></expr></argument>, <argument><expr><name>filename2</name></expr></argument>, <argument><expr><name>filename1</name></expr></argument>,
<argument><expr><name>contents1</name></expr></argument>, <argument><expr><name>contents2</name></expr></argument>, <argument><expr><name>contents1</name></expr></argument>, <argument><expr><name>contents2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>three_way_merge</name><argument_list>(<argument><expr><name>filename2</name></expr></argument>, <argument><expr><name>filename1</name></expr></argument>, <argument><expr><name>filename2</name></expr></argument>,
<argument><expr><name>contents2</name></expr></argument>, <argument><expr><name>contents1</name></expr></argument>, <argument><expr><name>contents2</name></expr></argument>, <argument><expr><name>contents1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_remove_file</name><argument_list>(<argument><expr><name>diff_name</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<struct>struct <name>random_mod</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mod</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>select_lines</name><parameter_list>(<param><decl><type>struct <name>random_mod</name> *</type><name>selected</name></decl></param>,
<param><decl><type><name>int</name></type> <name>num_to_select</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name> *</type><name>lines</name></decl></param>,
<param><decl><type><name>int</name></type> <name>num_lines</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>num_to_select</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<for>for (<init>;</init><condition>;</condition><incr/>) <block>{
<expr_stmt><expr><name>j</name>= <call><name>range_rand</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>num_lines</name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>lines</name><index>[<expr><name>j</name></expr>]</index></name>
||
(<name>j</name> &gt; 0 &amp;&amp; <name><name>lines</name><index>[<expr><name>j</name> - 1</expr>]</index></name>)
||
(<name>j</name> &lt; <name>num_lines</name> - 1 &amp;&amp; <name><name>lines</name><index>[<expr><name>j</name> + 1</expr>]</index></name>)</expr>)</condition><then>
<continue>continue;</continue></then></if>
<break>break;</break>
}</block></for>
<expr_stmt><expr><name><name>selected</name><index>[<expr><name>i</name></expr>]</index></name>.<name>index</name> = <name>j</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>selected</name><index>[<expr><name>i</name></expr>]</index></name>.<name>mod</name> = <call><name>range_rand</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lines</name><index>[<expr><name>j</name></expr>]</index></name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></for>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>make_random_merge_file</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename</name></decl></param>,
<param><decl><type><name>int</name></type> <name>num_lines</name></decl></param>,
<param><decl><type>struct <name>random_mod</name> *</type><name>mod_lines</name></decl></param>,
<param><decl><type><name>int</name></type> <name>num_mods</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>status</name> = <call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name>file</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>,
<argument><expr><name>APR_WRITE</name> | <name>APR_CREATE</name> | <name>APR_TRUNCATE</name></expr></argument>, <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"failed to open '%s'"</expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>num_lines</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name>num_mods</name></expr>;</condition> <incr><expr>++<name>j</name></expr></incr>)
<if>if <condition>(<expr><name><name>mod_lines</name><index>[<expr><name>j</name></expr>]</index></name>.<name>index</name> == <name>i</name></expr>)</condition><then>
<break>break;</break></then></if></for>
<if>if <condition>(<expr><name>j</name> &lt; <name>num_mods</name></expr>)</condition><then> <block>{
<switch>switch <condition>(<expr><name><name>mod_lines</name><index>[<expr><name>j</name></expr>]</index></name>.<name>mod</name></expr>)</condition> <block>{
<case>case <expr>0</expr>:
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr>"replace line %d\n"</expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>1</expr>:
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>file</name></expr></argument>,
<argument><expr>"added line %d\n"
"unmodified line %d\n"
"added line %d\n"</expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<empty_stmt>;</empty_stmt>
</default>}</block></switch>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr>"unmodified line %d\n"</expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></for>
<expr_stmt><expr><name>status</name> = <call><name>apr_file_close</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"failed to close '%s'"</expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>dump_core</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>*<name>msg</name> = "these dump core"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>two_way_diff</name><argument_list>(<argument><expr>"foo1"</expr></argument>, <argument><expr>"bar1"</expr></argument>,
<argument><expr>""</expr></argument>,
<argument><expr>""</expr></argument>,
<argument><expr>""</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>two_way_diff</name><argument_list>(<argument><expr>"foo2"</expr></argument>, <argument><expr>"bar2"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc\n"</expr></argument>,
<argument><expr>""</expr></argument>,
<argument><expr>"--- foo2" <name>NL</name>
"+++ bar2" <name>NL</name>
"@@ -1,3 +0,0 @@" <name>NL</name>
"-Aa\n"
"-Bb\n"
"-Cc\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>two_way_diff</name><argument_list>(<argument><expr>"foo3"</expr></argument>, <argument><expr>"bar3"</expr></argument>,
<argument><expr>""</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc\n"</expr></argument>,
<argument><expr>"--- foo3" <name>NL</name>
"+++ bar3" <name>NL</name>
"@@ -0,0 +1,3 @@" <name>NL</name>
"+Aa\n"
"+Bb\n"
"+Cc\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_two_way_unified</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_diff_file_options_t</name> *</type><name>diff_opts</name> <init>= <expr><call><name>svn_diff_file_options_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "2-way unified diff and trivial merge"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>two_way_diff</name><argument_list>(<argument><expr>"foo4"</expr></argument>, <argument><expr>"bar4"</expr></argument>,
<argument><expr>"Aa\n"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc\n"</expr></argument>,
<argument><expr>"--- foo4" <name>NL</name>
"+++ bar4" <name>NL</name>
"@@ -1 +1,3 @@" <name>NL</name>
" Aa\n"
"+Bb\n"
"+Cc\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>two_way_diff</name><argument_list>(<argument><expr>"foo4b"</expr></argument>, <argument><expr>"bar4b"</expr></argument>,
<argument><expr>"Cc\n"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc\n"</expr></argument>,
<argument><expr>"--- foo4b" <name>NL</name>
"+++ bar4b" <name>NL</name>
"@@ -1 +1,3 @@" <name>NL</name>
"+Aa\n"
"+Bb\n"
" Cc\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>diff_opts</name>-&gt;<name>ignore_eol_style</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>two_way_diff</name><argument_list>(<argument><expr>"foo4c"</expr></argument>, <argument><expr>"bar4c"</expr></argument>,
<argument><expr>"Cc\n"</expr></argument>,
<argument><expr>"Aa\r"
"Bb\r"
"Cc\r"</expr></argument>,
<argument><expr>"--- foo4c" <name>NL</name>
"+++ bar4c" <name>NL</name>
"@@ -1 +1,3 @@" <name>NL</name>
"+Aa\r"
"+Bb\r"
" Cc\n"</expr></argument>,
<argument><expr><name>diff_opts</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>diff_opts</name>-&gt;<name>ignore_eol_style</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>two_way_diff</name><argument_list>(<argument><expr>"foo5"</expr></argument>, <argument><expr>"bar5"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc\n"</expr></argument>,
<argument><expr>"Aa\n"</expr></argument>,
<argument><expr>"--- foo5" <name>NL</name>
"+++ bar5" <name>NL</name>
"@@ -1,3 +1 @@" <name>NL</name>
" Aa\n"
"-Bb\n"
"-Cc\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>two_way_diff</name><argument_list>(<argument><expr>"foo5b"</expr></argument>, <argument><expr>"bar5b"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc\n"</expr></argument>,
<argument><expr>"Cc\n"</expr></argument>,
<argument><expr>"--- foo5b" <name>NL</name>
"+++ bar5b" <name>NL</name>
"@@ -1,3 +1 @@" <name>NL</name>
"-Aa\n"
"-Bb\n"
" Cc\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>diff_opts</name>-&gt;<name>ignore_eol_style</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>two_way_diff</name><argument_list>(<argument><expr>"foo5c"</expr></argument>, <argument><expr>"bar5c"</expr></argument>,
<argument><expr>"Aa\r\n"
"Bb\r\n"
"Cc\r\n"</expr></argument>,
<argument><expr>"Cc\n"</expr></argument>,
<argument><expr>"--- foo5c" <name>NL</name>
"+++ bar5c" <name>NL</name>
"@@ -1,3 +1 @@" <name>NL</name>
"-Aa\r\n"
"-Bb\r\n"
" Cc\r\n"</expr></argument>,
<argument><expr><name>diff_opts</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>two_way_diff</name><argument_list>(<argument><expr>"foo5d"</expr></argument>, <argument><expr>"bar5d"</expr></argument>,
<argument><expr>"Aa\r\n"
"\r\n"
"Bb\r\n"
"\r\n"
"Cc\r\n"
"\r\n"</expr></argument>,
<argument><expr>"Aa\n"
"\n"
"Bb\n"
"\n"
"Cc\n"
"\n"</expr></argument>,
<argument><expr>""</expr></argument>,
<argument><expr><name>diff_opts</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>diff_opts</name>-&gt;<name>ignore_eol_style</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>two_way_diff</name><argument_list>(<argument><expr>"foo6"</expr></argument>, <argument><expr>"bar6"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc\n"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc\n"</expr></argument>,
<argument><expr>""</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>two_way_diff</name><argument_list>(<argument><expr>"foo6b"</expr></argument>, <argument><expr>"bar6b"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc\n"</expr></argument>,
<argument><expr>"Aa\n"
"Xx\n"
"Cc\n"</expr></argument>,
<argument><expr>"--- foo6b" <name>NL</name>
"+++ bar6b" <name>NL</name>
"@@ -1,3 +1,3 @@" <name>NL</name>
" Aa\n"
"-Bb\n"
"+Xx\n"
" Cc\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>two_way_diff</name><argument_list>(<argument><expr>"foo6c"</expr></argument>, <argument><expr>"bar6c"</expr></argument>,
<argument><expr>"Aa\r\n"
"Bb\r\n"
"Cc\r\n"</expr></argument>,
<argument><expr>"Aa\r\n"
"Xx\r\n"
"Cc\r\n"</expr></argument>,
<argument><expr>"--- foo6c" <name>NL</name>
"+++ bar6c" <name>NL</name>
"@@ -1,3 +1,3 @@" <name>NL</name>
" Aa\r\n"
"-Bb\r\n"
"+Xx\r\n"
" Cc\r\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>two_way_diff</name><argument_list>(<argument><expr>"foo6d"</expr></argument>, <argument><expr>"bar6d"</expr></argument>,
<argument><expr>"Aa\r"
"Bb\r"
"Cc\r"</expr></argument>,
<argument><expr>"Aa\r"
"Xx\r"
"Cc\r"</expr></argument>,
<argument><expr>"--- foo6d" <name>NL</name>
"+++ bar6d" <name>NL</name>
"@@ -1,3 +1,3 @@" <name>NL</name>
" Aa\r"
"-Bb\r"
"+Xx\r"
" Cc\r"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>diff_opts</name>-&gt;<name>ignore_space</name></name> = <name>svn_diff_file_ignore_space_change</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>two_way_diff</name><argument_list>(<argument><expr>"foo6e"</expr></argument>, <argument><expr>"bar6e"</expr></argument>,
<argument><expr>" A a \n"
" B b \r"
" C c \r\n"</expr></argument>,
<argument><expr>" A a \n"
" B b \r"
" C c \r\n"</expr></argument>,
<argument><expr>""</expr></argument>,
<argument><expr><name>diff_opts</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>diff_opts</name>-&gt;<name>ignore_space</name></name> = <name>svn_diff_file_ignore_space_none</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>diff_opts</name>-&gt;<name>ignore_space</name></name> = <name>svn_diff_file_ignore_space_all</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>two_way_diff</name><argument_list>(<argument><expr>"foo6f"</expr></argument>, <argument><expr>"bar6f"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\r"
"Cc\r\n"</expr></argument>,
<argument><expr>" A a \n"
" B b \r"
" C c \r\n"</expr></argument>,
<argument><expr>""</expr></argument>,
<argument><expr><name>diff_opts</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>diff_opts</name>-&gt;<name>ignore_space</name></name> = <name>svn_diff_file_ignore_space_none</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>diff_opts</name>-&gt;<name>ignore_space</name></name> = <name>svn_diff_file_ignore_space_all</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>diff_opts</name>-&gt;<name>ignore_eol_style</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>two_way_diff</name><argument_list>(<argument><expr>"foo6f"</expr></argument>, <argument><expr>"bar6f"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\r"
"Cc\r\n"</expr></argument>,
<argument><expr>" A a \r"
" B b \r\n"
" C c \n"</expr></argument>,
<argument><expr>""</expr></argument>,
<argument><expr><name>diff_opts</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>diff_opts</name>-&gt;<name>ignore_space</name></name> = <name>svn_diff_file_ignore_space_none</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>diff_opts</name>-&gt;<name>ignore_eol_style</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>two_way_diff</name><argument_list>(<argument><expr>"foo7"</expr></argument>, <argument><expr>"bar7"</expr></argument>,
<argument><expr>"Aa\n"</expr></argument>,
<argument><expr>"Bb\n"</expr></argument>,
<argument><expr>"--- foo7" <name>NL</name>
"+++ bar7" <name>NL</name>
"@@ -1 +1 @@" <name>NL</name>
"-Aa\n"
"+Bb\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>two_way_diff</name><argument_list>(<argument><expr>"foo7a"</expr></argument>, <argument><expr>"bar7a"</expr></argument>,
<argument><expr>"Aa\n"
"Cc\n"</expr></argument>,
<argument><expr>"Bb\n"
"Cc\n"</expr></argument>,
<argument><expr>"--- foo7a" <name>NL</name>
"+++ bar7a" <name>NL</name>
"@@ -1,2 +1,2 @@" <name>NL</name>
"-Aa\n"
"+Bb\n"
" Cc\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>two_way_diff</name><argument_list>(<argument><expr>"foo7b"</expr></argument>, <argument><expr>"bar7b"</expr></argument>,
<argument><expr>"Aa\r"
"Cc\n"</expr></argument>,
<argument><expr>"Bb\n"
"Cc\n"</expr></argument>,
<argument><expr>"--- foo7b" <name>NL</name>
"+++ bar7b" <name>NL</name>
"@@ -1,2 +1,2 @@" <name>NL</name>
"-Aa\r"
"+Bb\n"
" Cc\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>two_way_diff</name><argument_list>(<argument><expr>"foo8"</expr></argument>, <argument><expr>"bar8"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc\n"</expr></argument>,
<argument><expr>"Xx\n"
"Yy\n"</expr></argument>,
<argument><expr>"--- foo8" <name>NL</name>
"+++ bar8" <name>NL</name>
"@@ -1,3 +1,2 @@" <name>NL</name>
"-Aa\n"
"-Bb\n"
"-Cc\n"
"+Xx\n"
"+Yy\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>two_way_diff</name><argument_list>(<argument><expr>"foo9"</expr></argument>, <argument><expr>"bar9"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc\n"</expr></argument>,
<argument><expr>"Bb\n"</expr></argument>,
<argument><expr>"--- foo9" <name>NL</name>
"+++ bar9" <name>NL</name>
"@@ -1,3 +1 @@" <name>NL</name>
"-Aa\n"
" Bb\n"
"-Cc\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>two_way_diff</name><argument_list>(<argument><expr>"foo10"</expr></argument>, <argument><expr>"bar10"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc"</expr></argument>,
<argument><expr>"Aa\n"
"Xx\n"
"Yy\n"</expr></argument>,
<argument><expr>"--- foo10" <name>NL</name>
"+++ bar10" <name>NL</name>
"@@ -1,3 +1,3 @@" <name>NL</name>
" Aa\n"
"-Bb\n"
"-Cc" <name>NL</name>
"\\ No newline at end of file" <name>NL</name>
"+Xx\n"
"+Yy\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>two_way_diff</name><argument_list>(<argument><expr>"foo11"</expr></argument>, <argument><expr>"bar11"</expr></argument>,
<argument><expr>"Aa\n"
"Xx\n"
"Yy\n"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc"</expr></argument>,
<argument><expr>"--- foo11" <name>NL</name>
"+++ bar11" <name>NL</name>
"@@ -1,3 +1,3 @@" <name>NL</name>
" Aa\n"
"-Xx\n"
"-Yy\n"
"+Bb\n"
"+Cc" <name>NL</name>
"\\ No newline at end of file" <name>NL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>two_way_diff</name><argument_list>(<argument><expr>"foo12"</expr></argument>, <argument><expr>"bar12"</expr></argument>,
<argument><expr>"Aa\n"
"Xx\n"
"Yy"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc"</expr></argument>,
<argument><expr>"--- foo12" <name>NL</name>
"+++ bar12" <name>NL</name>
"@@ -1,3 +1,3 @@" <name>NL</name>
" Aa\n"
"-Xx\n"
"-Yy" <name>NL</name>
"\\ No newline at end of file" <name>NL</name>
"+Bb\n"
"+Cc" <name>NL</name>
"\\ No newline at end of file" <name>NL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>two_way_diff</name><argument_list>(<argument><expr>"foo13"</expr></argument>, <argument><expr>"bar13"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc\n"
"Dd\n"
"Ee\n"
"Ff\n"
"Gg\n"</expr></argument>,
<argument><expr>"Xx\n"
"Aa\n"
"Bb\n"
"Cc\n"
"Dd\n"
"Ee\n"
"Ff\n"
"Gg\n"
"Yy\n"</expr></argument>,
<argument><expr>"--- foo13" <name>NL</name>
"+++ bar13" <name>NL</name>
"@@ -1,3 +1,4 @@" <name>NL</name>
"+Xx\n"
" Aa\n"
" Bb\n"
" Cc\n"
"@@ -5,3 +6,4 @@" <name>NL</name>
" Ee\n"
" Ff\n"
" Gg\n"
"+Yy\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>two_way_diff</name><argument_list>(<argument><expr>"foo14"</expr></argument>, <argument><expr>"bar14"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc\n"
"Dd\n"
"Ee\n"
"Ff\n"
"Gg\n"</expr></argument>,
<argument><expr>"Bb\n"
"Aa\n"
"Cc\n"
"Dd\n"
"Ee\n"
"Gg\n"
"Ff\n"</expr></argument>,
<argument><expr>"--- foo14" <name>NL</name>
"+++ bar14" <name>NL</name>
"@@ -1,7 +1,7 @@" <name>NL</name>
"+Bb\n"
" Aa\n"
"-Bb\n"
" Cc\n"
" Dd\n"
" Ee\n"
"+Gg\n"
" Ff\n"
"-Gg\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>two_way_diff</name><argument_list>(<argument><expr>"foo16"</expr></argument>, <argument><expr>"bar16"</expr></argument>,
<argument><expr>"Aa\n"
"\n"
"Cc\n"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc\n"</expr></argument>,
<argument><expr>"--- foo16" <name>NL</name>
"+++ bar16" <name>NL</name>
"@@ -1,3 +1,3 @@" <name>NL</name>
" Aa\n"
"-\n"
"+Bb\n"
" Cc\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_two_way_unified_suspect</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>*<name>msg</name> = "2-way unified diff where output is suspect"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>two_way_diff</name><argument_list>(<argument><expr>"foo15a"</expr></argument>, <argument><expr>"bar15a"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc\n"
"Dd\n"
"Ee\n"
"Ff\n"
"Gg\n"
"Hh\n"
"Ii\n"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc\n"
"Dd\n"
"Ff\n"
"Gg\n"
"Hh\n"
"Ii\n"</expr></argument>,
<argument><expr>"--- foo15a" <name>NL</name>
"+++ bar15a" <name>NL</name>
"@@ -2,7 +2,6 @@" <name>NL</name>
" Bb\n"
" Cc\n"
" Dd\n"
"-Ee\n"
" Ff\n"
" Gg\n"
" Hh\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>two_way_diff</name><argument_list>(<argument><expr>"foo15b"</expr></argument>, <argument><expr>"bar15b"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc\n"
"Dd\n"
"Ee\n"
"Ff\n"
"Gg\n"
"Hh\n"
"Ii\n"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc\n"
"Dd\n"
"Ee\n"
"Xx\n"
"Yy\n"
"Ff\n"
"Gg\n"
"Hh\n"
"Ii\n"</expr></argument>,
<argument><expr>"--- foo15b" <name>NL</name>
"+++ bar15b" <name>NL</name>
"@@ -3,6 +3,8 @@" <name>NL</name>
" Cc\n"
" Dd\n"
" Ee\n"
"+Xx\n"
"+Yy\n"
" Ff\n"
" Gg\n"
" Hh\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>two_way_diff</name><argument_list>(<argument><expr>"foo15c"</expr></argument>, <argument><expr>"bar15c"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc\n"
"Dd\n"
"Ee\n"
"Ff\n"
"Gg\n"
"Hh\n"
"Ii\n"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc\n"
"Dd\n"
"Xx\n"
"Yy\n"
"Ff\n"
"Gg\n"
"Hh\n"
"Ii\n"</expr></argument>,
<argument><expr>"--- foo15c" <name>NL</name>
"+++ bar15c" <name>NL</name>
"@@ -2,7 +2,8 @@" <name>NL</name>
" Bb\n"
" Cc\n"
" Dd\n"
"-Ee\n"
"+Xx\n"
"+Yy\n"
" Ff\n"
" Gg\n"
" Hh\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_three_way_merge_no_overlap</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_diff_file_options_t</name> *</type><name>diff_opts</name> <init>= <expr><call><name>svn_diff_file_options_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "3-way merge, non-overlapping changes"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>three_way_merge</name><argument_list>(<argument><expr>"zig1"</expr></argument>, <argument><expr>"zag1"</expr></argument>, <argument><expr>"zog1"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc\n"</expr></argument>,
<argument><expr>"Xx\n"
"Aa\n"
"Bb\n"
"Cc\n"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc\n"
"Yy\n"</expr></argument>,
<argument><expr>"Xx\n"
"Aa\n"
"Bb\n"
"Cc\n"
"Yy\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>three_way_merge</name><argument_list>(<argument><expr>"zig1a"</expr></argument>, <argument><expr>"zag1a"</expr></argument>, <argument><expr>"zog1a"</expr></argument>,
<argument><expr>"Aa\r\n"
"Bb\r\n"
"Cc\r\n"</expr></argument>,
<argument><expr>"Xx\r\n"
"Aa\r\n"
"Bb\r\n"
"Cc\r\n"</expr></argument>,
<argument><expr>"Aa\r\n"
"Bb\r\n"
"Cc\r\n"
"Yy\r\n"</expr></argument>,
<argument><expr>"Xx\r\n"
"Aa\r\n"
"Bb\r\n"
"Cc\r\n"
"Yy\r\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>three_way_merge</name><argument_list>(<argument><expr>"zig1b"</expr></argument>, <argument><expr>"zag1b"</expr></argument>, <argument><expr>"zog1b"</expr></argument>,
<argument><expr>"Aa\r"
"Bb\r"
"Cc\r"</expr></argument>,
<argument><expr>"Xx\r"
"Aa\r"
"Bb\r"
"Cc\r"</expr></argument>,
<argument><expr>"Aa\r"
"Bb\r"
"Cc\r"
"Yy\r"</expr></argument>,
<argument><expr>"Xx\r"
"Aa\r"
"Bb\r"
"Cc\r"
"Yy\r"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>diff_opts</name>-&gt;<name>ignore_space</name></name> = <name>svn_diff_file_ignore_space_all</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>three_way_merge</name><argument_list>(<argument><expr>"zig1c"</expr></argument>, <argument><expr>"zag1c"</expr></argument>, <argument><expr>"zog1c"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc\n"</expr></argument>,
<argument><expr>"X x\n"
"A a\n"
"B b\n"
"C c\n"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc\n"
"Yy\n"</expr></argument>,
<argument><expr>"X x\n"
"A a\n"
"B b\n"
"C c\n"
"Yy\n"</expr></argument>,
<argument><expr><name>diff_opts</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>diff_opts</name>-&gt;<name>ignore_space</name></name> = <name>svn_diff_file_ignore_space_none</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>three_way_merge</name><argument_list>(<argument><expr>"zig2"</expr></argument>, <argument><expr>"zag2"</expr></argument>, <argument><expr>"zog2"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc\n"</expr></argument>,
<argument><expr>"Xx\n"
"Aa\n"
"Bb\n"
"Cc\n"
"Yy\n"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Zz\n"
"Cc\n"</expr></argument>,
<argument><expr>"Xx\n"
"Aa\n"
"Bb\n"
"Zz\n"
"Cc\n"
"Yy\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>three_way_merge</name><argument_list>(<argument><expr>"zig3a"</expr></argument>, <argument><expr>"zag3a"</expr></argument>, <argument><expr>"zog3a"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc\n"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc"</expr></argument>,
<argument><expr>"Xx\n"
"Bb\n"
"Cc\n"</expr></argument>,
<argument><expr>"Xx\n"
"Bb\n"
"Cc"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>three_way_merge</name><argument_list>(<argument><expr>"zig3b"</expr></argument>, <argument><expr>"zag3b"</expr></argument>, <argument><expr>"zog3b"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc\n"</expr></argument>,
<argument><expr>"Xx\n"
"Bb\n"
"Cc\n"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc"</expr></argument>,
<argument><expr>"Xx\n"
"Bb\n"
"Cc"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>diff_opts</name>-&gt;<name>ignore_space</name></name> = <name>svn_diff_file_ignore_space_all</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>diff_opts</name>-&gt;<name>ignore_eol_style</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>three_way_merge</name><argument_list>(<argument><expr>"zig2c"</expr></argument>, <argument><expr>"zag2c"</expr></argument>, <argument><expr>"zog2c"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc\n"</expr></argument>,
<argument><expr>" Xx\r\n"
" Aa\r\n"
" Bb\r\n"
" Cc\r\n"
" Yy\r\n"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Zz\n"
"Cc\n"</expr></argument>,
<argument><expr>" Xx\r\n"
" Aa\r\n"
" Bb\r\n"
"Zz\n"
" Cc\r\n"
" Yy\r\n"</expr></argument>,
<argument><expr><name>diff_opts</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>diff_opts</name>-&gt;<name>ignore_space</name></name> = <name>svn_diff_file_ignore_space_none</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>diff_opts</name>-&gt;<name>ignore_eol_style</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>three_way_merge</name><argument_list>(<argument><expr>"zig4"</expr></argument>, <argument><expr>"zag4"</expr></argument>, <argument><expr>"zog4"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc\n"
"Dd\n"
"Ee\n"
"Ff\n"
"Gg\n"
"Hh\n"
"Ii\n"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc\n"
"Dd\n"
"Ee\n"
"Ff\n"
"Yy\n"
"Zz\n"
"Hh\n"
"Ii\n"</expr></argument>,
<argument><expr>"Bb\n"
"Cc\n"
"Dd\n"
"Ee\n"
"Ff\n"
"Gg\n"
"Hh\n"
"Ii\n"</expr></argument>,
<argument><expr>"Bb\n"
"Cc\n"
"Dd\n"
"Ee\n"
"Ff\n"
"Yy\n"
"Zz\n"
"Hh\n"
"Ii\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>three_way_merge</name><argument_list>(<argument><expr>"zig5"</expr></argument>, <argument><expr>"zag5"</expr></argument>, <argument><expr>"zog5"</expr></argument>,
<argument><expr>"Aa\r\n"
"Bb\n"
"Cc\n"</expr></argument>,
<argument><expr>"Xx\r\n"
"Aa\r\n"
"Bb\n"
"Cc\n"</expr></argument>,
<argument><expr>"Aa\r\n"
"Bb\n"
"Cc\n"
"Yy\r\n"</expr></argument>,
<argument><expr>"Xx\r\n"
"Aa\r\n"
"Bb\n"
"Cc\n"
"Yy\r\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>three_way_merge</name><argument_list>(<argument><expr>"zig6"</expr></argument>, <argument><expr>"zag6"</expr></argument>, <argument><expr>"zog6"</expr></argument>,
<argument><expr>"AaAaAaAaAaAa\n"
"Bb\n"
"Cc\n"</expr></argument>,
<argument><expr>"Xx\n"
"Bb\n"
"Cc\n"</expr></argument>,
<argument><expr>"AaAaAaAaAaAa\n"
"Bb\n"
"CcCcCcCcCcCc\n"
"Yy\n"</expr></argument>,
<argument><expr>"Xx\n"
"Bb\n"
"CcCcCcCcCcCc\n"
"Yy\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>three_way_merge</name><argument_list>(<argument><expr>"zig7"</expr></argument>, <argument><expr>"zag7"</expr></argument>, <argument><expr>"zog7"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc\n"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc\n"
"Dd"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc\n"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc\n"
"Dd"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>diff_opts</name>-&gt;<name>ignore_space</name></name> = <name>svn_diff_file_ignore_space_all</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>diff_opts</name>-&gt;<name>ignore_eol_style</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>three_way_merge</name><argument_list>(<argument><expr>"zig8"</expr></argument>, <argument><expr>"zag8"</expr></argument>, <argument><expr>"zog8"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc\n"</expr></argument>,
<argument><expr>" Aa\n"
"B b\n"
"C c\n"</expr></argument>,
<argument><expr>"A a\n"
"Bb \n"
" Cc\n"
"New line in zog8\n"</expr></argument>,
<argument><expr>" Aa\n"
"B b\n"
"C c\n"
"New line in zog8\n"</expr></argument>,
<argument><expr><name>diff_opts</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_three_way_merge_with_overlap</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>*<name>msg</name> = "3-way merge, non-conflicting overlapping changes"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>three_way_merge</name><argument_list>(<argument><expr>"splish1"</expr></argument>, <argument><expr>"splash1"</expr></argument>, <argument><expr>"splosh1"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc\n"
"Dd\n"
"Ee\n"</expr></argument>,
<argument><expr>"Aa\n"
"Xx\n"
"Bb\n"
"Cc\n"
"Yy\n"
"Ee\n"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc\n"
"Yy\n"
"Ee\n"
"Zz\n"</expr></argument>,
<argument><expr>"Aa\n"
"Xx\n"
"Bb\n"
"Cc\n"
"Yy\n"
"Ee\n"
"Zz\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>three_way_merge</name><argument_list>(<argument><expr>"splish2"</expr></argument>, <argument><expr>"splash2"</expr></argument>, <argument><expr>"splosh2"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc\n"
"Dd\n"
"Ee\n"
"Ff\n"</expr></argument>,
<argument><expr>"Aa\n"
"Yy\n"
"Zz\n"
"Dd\n"
"Pp\n"
"Qq\n"
"Ff\n"</expr></argument>,
<argument><expr>"Pp\n"
"Qq\n"
"Aa\n"
"Bb\n"
"Cc\n"
"Dd\n"
"Pp\n"
"Qq\n"
"Ff\n"
"Pp\n"
"Qq\n"</expr></argument>,
<argument><expr>"Pp\n"
"Qq\n"
"Aa\n"
"Yy\n"
"Zz\n"
"Dd\n"
"Pp\n"
"Qq\n"
"Ff\n"
"Pp\n"
"Qq\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>three_way_merge</name><argument_list>(<argument><expr>"splish3"</expr></argument>, <argument><expr>"splash3"</expr></argument>, <argument><expr>"splosh3"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc\n"</expr></argument>,
<argument><expr>"Xx\n"
"Aa\n"
"Bb\n"
"Cc"</expr></argument>,
<argument><expr>"Aa\n"
"Xx\n"
"Bb\n"
"Cc"</expr></argument>,
<argument><expr>"Xx\n"
"Aa\n"
"Xx\n"
"Bb\n"
"Cc"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>three_way_merge</name><argument_list>(<argument><expr>"splish4"</expr></argument>, <argument><expr>"splash4"</expr></argument>, <argument><expr>"splosh4"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc\n"
"Dd\n"
"Ee\n"
"Ff\n"
"Gg\n"
"Hh\n"</expr></argument>,
<argument><expr>"Aa\n"
"Ff\n"
"Gg\n"
"Hh\n"
"Bb\n"
"Cc\n"
"Xx\n"
"Dd\n"
"Ee\n"
"Yy\n"
"Ff\n"
"Gg\n"
"Hh\n"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc\n"
"Xx\n"
"Dd\n"
"Ee\n"
"Ff\n"
"Gg\n"
"Zz\n"
"Hh\n"</expr></argument>,
<argument><expr>"Aa\n"
"Ff\n"
"Gg\n"
"Hh\n"
"Bb\n"
"Cc\n"
"Xx\n"
"Dd\n"
"Ee\n"
"Yy\n"
"Ff\n"
"Gg\n"
"Zz\n"
"Hh\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_three_way_merge_with_conflict</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>*<name>msg</name> = "3-way merge, conflicting overlapping changes"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>three_way_merge</name><argument_list>(<argument><expr>"dig1"</expr></argument>, <argument><expr>"dug1"</expr></argument>, <argument><expr>"dag1"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc\n"</expr></argument>,
<argument><expr>""</expr></argument>,
<argument><expr>""</expr></argument>,
<argument><expr>""</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>three_way_merge</name><argument_list>(<argument><expr>"dig2"</expr></argument>, <argument><expr>"dug2"</expr></argument>, <argument><expr>"dag2"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc\n"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc\n"
"Dd\n"
"Ee\n"
"Ff\n"</expr></argument>,
<argument><expr>""</expr></argument>,
<argument><expr>"&lt;&lt;&lt;&lt;&lt;&lt;&lt; dug2\n"
"Aa\n"
"Bb\n"
"Cc\n"
"Dd\n"
"Ee\n"
"Ff\n"
"=======\n"
"&gt;&gt;&gt;&gt;&gt;&gt;&gt; dag2\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>three_way_merge</name><argument_list>(<argument><expr>"dig2a"</expr></argument>, <argument><expr>"dug2a"</expr></argument>, <argument><expr>"dag2a"</expr></argument>,
<argument><expr>"Aa\r\n"
"Bb\r\n"
"Cc\r\n"</expr></argument>,
<argument><expr>"Aa\r\n"
"Bb\r\n"
"Cc\r\n"
"Dd\r\n"
"Ee\r\n"
"Ff\r\n"</expr></argument>,
<argument><expr>""</expr></argument>,
<argument><expr>"&lt;&lt;&lt;&lt;&lt;&lt;&lt; dug2a\r\n"
"Aa\r\n"
"Bb\r\n"
"Cc\r\n"
"Dd\r\n"
"Ee\r\n"
"Ff\r\n"
"=======\r\n"
"&gt;&gt;&gt;&gt;&gt;&gt;&gt; dag2a\r\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>three_way_merge</name><argument_list>(<argument><expr>"dig2b"</expr></argument>, <argument><expr>"dug2b"</expr></argument>, <argument><expr>"dag2b"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc\n"</expr></argument>,
<argument><expr>"Aa\r"
"Bb\r"
"Cc\r"
"Dd\r"
"Ee\r"
"Ff\r"</expr></argument>,
<argument><expr>""</expr></argument>,
<argument><expr>"&lt;&lt;&lt;&lt;&lt;&lt;&lt; dug2b\r"
"Aa\r"
"Bb\r"
"Cc\r"
"Dd\r"
"Ee\r"
"Ff\r"
"=======\r"
"&gt;&gt;&gt;&gt;&gt;&gt;&gt; dag2b\r"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>three_way_merge</name><argument_list>(<argument><expr>"dig3"</expr></argument>, <argument><expr>"dug3"</expr></argument>, <argument><expr>"dag3"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc\n"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc\n"
"Dd\n"
"Ee\n"
"Ff\n"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"&lt;&lt;&lt;&lt;&lt;&lt;&lt; dug3\n"
"Cc\n"
"Dd\n"
"Ee\n"
"Ff\n"
"=======\n"
"&gt;&gt;&gt;&gt;&gt;&gt;&gt; dag3\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>three_way_merge</name><argument_list>(<argument><expr>"dig4"</expr></argument>, <argument><expr>"dug4"</expr></argument>, <argument><expr>"dag4"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc\n"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc\n"
"Dd"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc\n"
"Ee"</expr></argument>,
<argument><expr>"Aa\n"
"Bb\n"
"Cc\n"
"&lt;&lt;&lt;&lt;&lt;&lt;&lt; dug4\n"
"Dd=======\n"
"Ee&gt;&gt;&gt;&gt;&gt;&gt;&gt; dag4\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>random_trivial_merge</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"random trivial merge (seed:%u)"</expr></argument>, <argument><expr><call><name>seed_val</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 5</expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename1</name> <init>= <expr>"trivial1"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename2</name> <init>= <expr>"trivial2"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>min_lines</name> <init>= <expr>1000</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_lines</name> <init>= <expr>1100</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>var_lines</name> <init>= <expr>50</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>block_lines</name> <init>= <expr>10</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>contents1</name></decl>, *<decl><type ref="prev"/><name>contents2</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>make_random_file</name><argument_list>(<argument><expr><name>filename1</name></expr></argument>,
<argument><expr><name>min_lines</name></expr></argument>, <argument><expr><name>max_lines</name></expr></argument>, <argument><expr><name>var_lines</name></expr></argument>, <argument><expr><name>block_lines</name></expr></argument>,
<argument><expr><name>i</name> % 3</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>make_random_file</name><argument_list>(<argument><expr><name>filename2</name></expr></argument>,
<argument><expr><name>min_lines</name></expr></argument>, <argument><expr><name>max_lines</name></expr></argument>, <argument><expr><name>var_lines</name></expr></argument>, <argument><expr><name>block_lines</name></expr></argument>,
<argument><expr><name>i</name> % 2</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stringbuf_from_file</name><argument_list>(<argument><expr>&amp;<name>contents1</name></expr></argument>, <argument><expr><name>filename1</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stringbuf_from_file</name><argument_list>(<argument><expr>&amp;<name>contents2</name></expr></argument>, <argument><expr><name>filename2</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>three_way_merge</name><argument_list>(<argument><expr><name>filename1</name></expr></argument>, <argument><expr><name>filename2</name></expr></argument>, <argument><expr><name>filename1</name></expr></argument>,
<argument><expr><name><name>contents1</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>contents2</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr><name><name>contents1</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>contents2</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>three_way_merge</name><argument_list>(<argument><expr><name>filename2</name></expr></argument>, <argument><expr><name>filename1</name></expr></argument>, <argument><expr><name>filename2</name></expr></argument>,
<argument><expr><name><name>contents2</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>contents1</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr><name><name>contents2</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>contents1</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>random_three_way_merge</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"random 3-way merge (seed:%u)"</expr></argument>, <argument><expr><call><name>seed_val</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 20</expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename1</name> <init>= <expr>"original"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename2</name> <init>= <expr>"modified1"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename3</name> <init>= <expr>"modified2"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename4</name> <init>= <expr>"combined"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>original</name></decl>, *<decl><type ref="prev"/><name>modified1</name></decl>, *<decl><type ref="prev"/><name>modified2</name></decl>, *<decl><type ref="prev"/><name>combined</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_lines</name> <init>= <expr>100</expr></init>, <name>num_src</name> <init>= <expr>10</expr></init>, <name>num_dst</name> <init>= <expr>10</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name> *</type><name>lines</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>lines</name></expr></argument>)</argument_list></sizeof> * <name>num_lines</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>random_mod</name> *</type><name>src_lines</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>src_lines</name></expr></argument>)</argument_list></sizeof> * <name>num_src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>random_mod</name> *</type><name>dst_lines</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>dst_lines</name></expr></argument>)</argument_list></sizeof> * <name>num_dst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>random_mod</name> *</type><name>mrg_lines</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>,
<argument><expr>(<sizeof>sizeof<argument_list>(<argument><expr>*<name>mrg_lines</name></expr></argument>)</argument_list></sizeof>
* (<name>num_src</name> + <name>num_dst</name>))</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>select_lines</name><argument_list>(<argument><expr><name>src_lines</name></expr></argument>, <argument><expr><name>num_src</name></expr></argument>, <argument><expr><name>lines</name></expr></argument>, <argument><expr><name>num_lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>select_lines</name><argument_list>(<argument><expr><name>dst_lines</name></expr></argument>, <argument><expr><name>num_dst</name></expr></argument>, <argument><expr><name>lines</name></expr></argument>, <argument><expr><name>num_lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>mrg_lines</name></expr></argument>, <argument><expr><name>src_lines</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>mrg_lines</name></expr></argument>)</argument_list></sizeof> * <name>num_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>mrg_lines</name> + <name>num_src</name></expr></argument>, <argument><expr><name>dst_lines</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>mrg_lines</name></expr></argument>)</argument_list></sizeof> * <name>num_dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>make_random_merge_file</name><argument_list>(<argument><expr><name>filename1</name></expr></argument>, <argument><expr><name>num_lines</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>make_random_merge_file</name><argument_list>(<argument><expr><name>filename2</name></expr></argument>, <argument><expr><name>num_lines</name></expr></argument>, <argument><expr><name>src_lines</name></expr></argument>, <argument><expr><name>num_src</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>make_random_merge_file</name><argument_list>(<argument><expr><name>filename3</name></expr></argument>, <argument><expr><name>num_lines</name></expr></argument>, <argument><expr><name>dst_lines</name></expr></argument>, <argument><expr><name>num_dst</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>make_random_merge_file</name><argument_list>(<argument><expr><name>filename4</name></expr></argument>, <argument><expr><name>num_lines</name></expr></argument>, <argument><expr><name>mrg_lines</name></expr></argument>,
<argument><expr><name>num_src</name> + <name>num_dst</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stringbuf_from_file</name><argument_list>(<argument><expr>&amp;<name>original</name></expr></argument>, <argument><expr><name>filename1</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stringbuf_from_file</name><argument_list>(<argument><expr>&amp;<name>modified1</name></expr></argument>, <argument><expr><name>filename2</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stringbuf_from_file</name><argument_list>(<argument><expr>&amp;<name>modified2</name></expr></argument>, <argument><expr><name>filename3</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stringbuf_from_file</name><argument_list>(<argument><expr>&amp;<name>combined</name></expr></argument>, <argument><expr><name>filename4</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>three_way_merge</name><argument_list>(<argument><expr><name>filename1</name></expr></argument>, <argument><expr><name>filename2</name></expr></argument>, <argument><expr><name>filename3</name></expr></argument>,
<argument><expr><name><name>original</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>modified1</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr><name><name>modified2</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>combined</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>three_way_merge</name><argument_list>(<argument><expr><name>filename1</name></expr></argument>, <argument><expr><name>filename3</name></expr></argument>, <argument><expr><name>filename2</name></expr></argument>,
<argument><expr><name><name>original</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>modified2</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr><name><name>modified1</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>combined</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_remove_file</name><argument_list>(<argument><expr><name>filename4</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>merge_with_part_already_present</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"merge with part already present (seed:%u)"</expr></argument>,
<argument><expr><call><name>seed_val</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 20</expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename1</name> <init>= <expr>"pap-original"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename2</name> <init>= <expr>"pap-modified1"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename3</name> <init>= <expr>"pap-modified2"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename4</name> <init>= <expr>"pap-combined"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>original</name></decl>, *<decl><type ref="prev"/><name>modified1</name></decl>, *<decl><type ref="prev"/><name>modified2</name></decl>, *<decl><type ref="prev"/><name>combined</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_lines</name> <init>= <expr>200</expr></init>, <name>num_src</name> <init>= <expr>20</expr></init>, <name>num_dst</name> <init>= <expr>20</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name> *</type><name>lines</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>lines</name></expr></argument>)</argument_list></sizeof> * <name>num_lines</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>random_mod</name> *</type><name>src_lines</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>src_lines</name></expr></argument>)</argument_list></sizeof> * <name>num_src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>random_mod</name> *</type><name>dst_lines</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>dst_lines</name></expr></argument>)</argument_list></sizeof> * <name>num_dst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>random_mod</name> *</type><name>mrg_lines</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>,
<argument><expr>(<sizeof>sizeof<argument_list>(<argument><expr>*<name>mrg_lines</name></expr></argument>)</argument_list></sizeof>
* (<name>num_src</name> + <name>num_dst</name> / 2))</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>select_lines</name><argument_list>(<argument><expr><name>src_lines</name></expr></argument>, <argument><expr><name>num_src</name></expr></argument>, <argument><expr><name>lines</name></expr></argument>, <argument><expr><name>num_lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>select_lines</name><argument_list>(<argument><expr><name>dst_lines</name></expr></argument>, <argument><expr><name>num_dst</name> / 2</expr></argument>, <argument><expr><name>lines</name></expr></argument>, <argument><expr><name>num_lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst_lines</name> + <name>num_dst</name> / 2</expr></argument>, <argument><expr><name>src_lines</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>dst_lines</name></expr></argument>)</argument_list></sizeof> * (<name>num_dst</name> - <name>num_dst</name> / 2)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>mrg_lines</name></expr></argument>, <argument><expr><name>src_lines</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>mrg_lines</name></expr></argument>)</argument_list></sizeof> * <name>num_src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>mrg_lines</name> + <name>num_src</name></expr></argument>, <argument><expr><name>dst_lines</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>mrg_lines</name></expr></argument>)</argument_list></sizeof> * <name>num_dst</name> / 2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>make_random_merge_file</name><argument_list>(<argument><expr><name>filename1</name></expr></argument>, <argument><expr><name>num_lines</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>make_random_merge_file</name><argument_list>(<argument><expr><name>filename2</name></expr></argument>, <argument><expr><name>num_lines</name></expr></argument>, <argument><expr><name>src_lines</name></expr></argument>, <argument><expr><name>num_src</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>make_random_merge_file</name><argument_list>(<argument><expr><name>filename3</name></expr></argument>, <argument><expr><name>num_lines</name></expr></argument>, <argument><expr><name>dst_lines</name></expr></argument>, <argument><expr><name>num_dst</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>make_random_merge_file</name><argument_list>(<argument><expr><name>filename4</name></expr></argument>, <argument><expr><name>num_lines</name></expr></argument>, <argument><expr><name>mrg_lines</name></expr></argument>,
<argument><expr><name>num_src</name> + <name>num_dst</name> / 2</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stringbuf_from_file</name><argument_list>(<argument><expr>&amp;<name>original</name></expr></argument>, <argument><expr><name>filename1</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stringbuf_from_file</name><argument_list>(<argument><expr>&amp;<name>modified1</name></expr></argument>, <argument><expr><name>filename2</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stringbuf_from_file</name><argument_list>(<argument><expr>&amp;<name>modified2</name></expr></argument>, <argument><expr><name>filename3</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_stringbuf_from_file</name><argument_list>(<argument><expr>&amp;<name>combined</name></expr></argument>, <argument><expr><name>filename4</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>three_way_merge</name><argument_list>(<argument><expr><name>filename1</name></expr></argument>, <argument><expr><name>filename2</name></expr></argument>, <argument><expr><name>filename3</name></expr></argument>,
<argument><expr><name><name>original</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>modified1</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr><name><name>modified2</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>combined</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>three_way_merge</name><argument_list>(<argument><expr><name>filename1</name></expr></argument>, <argument><expr><name>filename3</name></expr></argument>, <argument><expr><name>filename2</name></expr></argument>,
<argument><expr><name><name>original</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>modified2</name>-&gt;<name>data</name></name></expr></argument>,
<argument><expr><name><name>modified1</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>combined</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_io_remove_file</name><argument_list>(<argument><expr><name>filename4</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>svn_pool_destroy</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>merge_adjacent_changes</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>*<name>msg</name> = "3-way merge, adjacent changes"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>three_way_merge</name><argument_list>(<argument><expr>"adj1"</expr></argument>, <argument><expr>"adj2"</expr></argument>, <argument><expr>"adj3"</expr></argument>,
<argument><expr>"foo\n"
"bar\n"
"baz\n"</expr></argument>,
<argument><expr>"foo\n"
"new_bar\n"
"baz\n"</expr></argument>,
<argument><expr>"zig\n"
"foo\n"
"bar\n"
"new_baz\n"</expr></argument>,
<argument><expr>"zig\n"
"foo\n"
"new_bar\n"
"new_baz\n"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type>struct <name>svn_test_descriptor_t</name></type> <name><name>test_funcs</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>SVN_TEST_NULL</name></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>dump_core</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>test_two_way_unified</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>test_two_way_unified_suspect</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>test_three_way_merge_no_overlap</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>test_three_way_merge_with_overlap</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>test_three_way_merge_with_conflict</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>random_trivial_merge</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>random_three_way_merge</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>merge_with_part_already_present</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>merge_adjacent_changes</name></expr></argument>)</argument_list></call></expr>,
<expr><name>SVN_TEST_NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
</unit>
