<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="subversion/tests/libsvn_fs_base/skel-test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../svn_test.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../svn_test_fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../libsvn_fs_base/fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../libsvn_fs_base/util/skel.h"</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>fail</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fmt</name></decl></param>, <param><decl><type>...</type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>msg</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>msg</name> = <call><name>apr_pvsprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_stringbuf_t</name> *</type>
<name>get_empty_string</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_stringbuf_ncreate</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>skel_t</name> *</type>
<name>parse_str</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> *</type><name>str</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_fs_base__parse_skel</name><argument_list>(<argument><expr><name><name>str</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>str</name>-&gt;<name>len</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>skel_t</name> *</type>
<name>parse_cstr</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>str</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>svn_fs_base__parse_skel</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<enum>enum <name>char_type</name> <block>{
<decl><name>type_nothing</name> <init>= <expr>0</expr></init></decl>,
<decl><name>type_space</name> <init>= <expr>1</expr></init></decl>,
<decl><name>type_digit</name> <init>= <expr>2</expr></init></decl>,
<decl><name>type_paren</name> <init>= <expr>3</expr></init></decl>,
<decl><name>type_name</name> <init>= <expr>4</expr></init></decl>
}</block>;</enum>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>skel_char_map_initialized</name></decl>;</decl_stmt>
<enum><specifier>static</specifier> enum <name>char_type</name> <name><name>skel_char_map</name><index>[<expr>256</expr>]</index></name>;</enum>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>init_char_types</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>c</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>skel_char_map_initialized</name></expr>)</condition><then>
<return>return;</return></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 256</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
<expr_stmt><expr><name><name>skel_char_map</name><index>[<expr><name>i</name></expr>]</index></name> = <name>type_nothing</name></expr>;</expr_stmt></for>
<for>for (<init><expr><name>i</name> = '0'</expr>;</init> <condition><expr><name>i</name> &lt;= '9'</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
<expr_stmt><expr><name><name>skel_char_map</name><index>[<expr><name>i</name></expr>]</index></name> = <name>type_digit</name></expr>;</expr_stmt></for>
<for>for (<init><expr><name>c</name> = "\t\n\f\r "</expr>;</init> <condition><expr>*<name>c</name></expr>;</condition> <incr><expr><name>c</name>++</expr></incr>)
<expr_stmt><expr><name><name>skel_char_map</name><index>[<expr>(<name>unsigned</name> <name>char</name>) *<name>c</name></expr>]</index></name> = <name>type_space</name></expr>;</expr_stmt></for>
<for>for (<init><expr><name>c</name> = "()[]"</expr>;</init> <condition><expr>*<name>c</name></expr>;</condition> <incr><expr><name>c</name>++</expr></incr>)
<expr_stmt><expr><name><name>skel_char_map</name><index>[<expr>(<name>unsigned</name> <name>char</name>) *<name>c</name></expr>]</index></name> = <name>type_paren</name></expr>;</expr_stmt></for>
<for>for (<init><expr><name>i</name> = 'A'</expr>;</init> <condition><expr><name>i</name> &lt;= 'Z'</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
<expr_stmt><expr><name><name>skel_char_map</name><index>[<expr><name>i</name></expr>]</index></name> = <name>type_name</name></expr>;</expr_stmt></for>
<for>for (<init><expr><name>i</name> = 'a'</expr>;</init> <condition><expr><name>i</name> &lt;= 'z'</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
<expr_stmt><expr><name><name>skel_char_map</name><index>[<expr><name>i</name></expr>]</index></name> = <name>type_name</name></expr>;</expr_stmt></for>
<expr_stmt><expr><name>skel_char_map_initialized</name> = 1</expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>skel_is_space</name><parameter_list>(<param><decl><type><name>char</name></type> <name>byte</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>init_char_types</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>skel_char_map</name><index>[<expr>(<name>unsigned</name> <name>char</name>) <name>byte</name></expr>]</index></name> == <name>type_space</name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
static int
skel_is_digit(char byte) {
init_char_types();
return skel_char_map[(unsigned char) byte] == type_digit;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>skel_is_paren</name><parameter_list>(<param><decl><type><name>char</name></type> <name>byte</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>init_char_types</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>skel_char_map</name><index>[<expr>(<name>unsigned</name> <name>char</name>) <name>byte</name></expr>]</index></name> == <name>type_paren</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>skel_is_name</name><parameter_list>(<param><decl><type><name>char</name></type> <name>byte</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>init_char_types</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>skel_char_map</name><index>[<expr>(<name>unsigned</name> <name>char</name>) <name>byte</name></expr>]</index></name> == <name>type_name</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>check_atom</name><parameter_list>(<param><decl><type><name>skel_t</name> *</type><name>skel</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>)</parameter_list> <block>{
<return>return <expr>(<name>skel</name>
&amp;&amp; <name><name>skel</name>-&gt;<name>is_atom</name></name>
&amp;&amp; <name><name>skel</name>-&gt;<name>len</name></name> == <name>len</name>
&amp;&amp; ! <call><name>memcmp</name><argument_list>(<argument><expr><name><name>skel</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call>)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>put_implicit_length_byte</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> *</type><name>str</name></decl></param>, <param><decl><type><name>char</name></type> <name>byte</name></decl></param>, <param><decl><type><name>char</name></type> <name>term</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>! <call><name>skel_is_name</name><argument_list>(<argument><expr><name>byte</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>term</name> != '\0'
&amp;&amp; ! <call><name>skel_is_space</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>
&amp;&amp; ! <call><name>skel_is_paren</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr>&amp;<name>byte</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>term</name> != '\0'</expr>)</condition><then>
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr>&amp;<name>term</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>check_implicit_length_byte</name><parameter_list>(<param><decl><type><name>skel_t</name> *</type><name>skel</name></decl></param>, <param><decl><type><name>char</name></type> <name>byte</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>! <call><name>skel_is_name</name><argument_list>(<argument><expr><name>byte</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><call><name>check_atom</name><argument_list>(<argument><expr><name>skel</name></expr></argument>, <argument><expr>&amp;<name>byte</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>char</name> *</type>
<name>gen_implicit_length_all_chars</name><parameter_list>(<param><decl><type><name>apr_size_t</name> *</type><name>len_p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>name</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>pos</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>name</name><index>[<expr><name>pos</name>++</expr>]</index></name> = 'x'</expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 256</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
<if>if <condition>(<expr>! <call><name>skel_is_space</name><argument_list>( <argument><expr>(<name>apr_byte_t</name>)<name>i</name></expr></argument>)</argument_list></call>
&amp;&amp; ! <call><name>skel_is_paren</name><argument_list>( <argument><expr>(<name>apr_byte_t</name>)<name>i</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>name</name><index>[<expr><name>pos</name>++</expr>]</index></name> = <name>i</name></expr>;</expr_stmt></then></if></for>
<expr_stmt><expr>*<name>len_p</name> = <name>pos</name></expr>;</expr_stmt>
<return>return <expr><name>name</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>put_implicit_length_all_chars</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> *</type><name>str</name></decl></param>, <param><decl><type><name>char</name></type> <name>term</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>name</name> <init>= <expr><call><name>gen_implicit_length_all_chars</name><argument_list>(<argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>term</name> != '\0'
&amp;&amp; ! <call><name>skel_is_space</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call>
&amp;&amp; ! <call><name>skel_is_paren</name><argument_list>(<argument><expr><name>term</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>term</name> != '\0'</expr>)</condition><then>
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr>&amp;<name>term</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>check_implicit_length_all_chars</name><parameter_list>(<param><decl><type><name>skel_t</name> *</type><name>skel</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>name</name> <init>= <expr><call><name>gen_implicit_length_all_chars</name><argument_list>(<argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>check_atom</name><argument_list>(<argument><expr><name>skel</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>parse_implicit_length</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>str</name> <init>= <expr><call><name>get_empty_string</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>skel_t</name> *</type><name>skel</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "parse implicit-length atoms"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>c</name> = "\t\n\f\r ()[]"</expr>;</init> <condition><expr>*<name>c</name></expr>;</condition> <incr><expr><name>c</name>++</expr></incr>)
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 256</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
<if>if <condition>(<expr><call><name>skel_is_name</name><argument_list>(<argument><expr>(<name>apr_byte_t</name>)<name>i</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_stringbuf_setempty</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_implicit_length_byte</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr>(<name>apr_byte_t</name>)<name>i</name></expr></argument>, <argument><expr>*<name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>skel</name> = <call><name>parse_str</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <call><name>check_implicit_length_byte</name><argument_list>(<argument><expr><name>skel</name></expr></argument>, <argument><expr>(<name>apr_byte_t</name>)<name>i</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"single-byte implicit-length skel 0x%02x"
" with terminator 0x%02x"</expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></then></if></for></for>
}</block>
<expr_stmt><expr><call><name>svn_stringbuf_setempty</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_implicit_length_all_chars</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr>'\0'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>skel</name> = <call><name>parse_str</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <call><name>check_implicit_length_all_chars</name><argument_list>(<argument><expr><name>skel</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"implicit-length skel containing all legal chars"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>put_explicit_length</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> *</type><name>str</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>,
<param><decl><type><name>char</name></type> <name>sep</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>buf</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>len</name> + 100</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>length_len</name></decl>;</decl_stmt>
<if>if <condition>(<expr>! <call><name>skel_is_space</name><argument_list>(<argument><expr><name>sep</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>"%"<name>APR_SIZE_T_FMT</name>"%c"</expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>length_len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> + <name>length_len</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>length_len</name> + <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>check_explicit_length</name><parameter_list>(<param><decl><type><name>skel_t</name> *</type><name>skel</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>check_atom</name><argument_list>(<argument><expr><name>skel</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>try_explicit_length</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>check_len</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>str</name> <init>= <expr><call><name>get_empty_string</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>skel_t</name> *</type><name>skel</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 256</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
<if>if <condition>(<expr><call><name>skel_is_space</name><argument_list>( <argument><expr>(<name>apr_byte_t</name>)<name>i</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>svn_stringbuf_setempty</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_explicit_length</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr>(<name>apr_byte_t</name>)<name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>skel</name> = <call><name>parse_str</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <call><name>check_explicit_length</name><argument_list>(<argument><expr><name>skel</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>check_len</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"failed to reparse explicit-length atom"</expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></then></if></for>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>parse_explicit_length</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>*<name>msg</name> = "parse explicit-length atoms"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>try_explicit_length</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 256</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>1</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr>0</expr>]</index></name> = <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>try_explicit_length</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>data</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 256</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> = <name>i</name></expr>;</expr_stmt></for>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>try_explicit_length</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr>256</expr></argument>, <argument><expr>256</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<struct><specifier>static</specifier> struct <name>invalid_atoms</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl>;</decl_stmt>
}</block> <decl><name><name>invalid_atoms</name><index>[]</index></name> <init>= <expr><block>{ <expr><block>{ <expr>1</expr>, <expr>1</expr>, <expr>"("</expr> }</block></expr>,
<expr><block>{ <expr>1</expr>, <expr>1</expr>, <expr>")"</expr> }</block></expr>,
<expr><block>{ <expr>1</expr>, <expr>1</expr>, <expr>"["</expr> }</block></expr>,
<expr><block>{ <expr>1</expr>, <expr>1</expr>, <expr>"]"</expr> }</block></expr>,
<expr><block>{ <expr>1</expr>, <expr>1</expr>, <expr>" "</expr> }</block></expr>,
<expr><block>{ <expr>1</expr>, <expr>13</expr>, <expr>"Hello, World!"</expr> }</block></expr>,
<expr><block>{ <expr>1</expr>, <expr>8</expr>, <expr>"1mplicit"</expr> }</block></expr>,
<expr><block>{ <expr>2</expr>, <expr>2</expr>, <expr>"1"</expr> }</block></expr>,
<expr><block>{ <expr>2</expr>, <expr>1</expr>, <expr>"12"</expr> }</block></expr>,
<expr><block>{ <expr>7</expr>, <expr>0</expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</struct>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>parse_invalid_atoms</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>invalid_atoms</name> *</type><name>ia</name> <init>= <expr><name>invalid_atoms</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "parse invalid atoms"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<while>while <condition>(<expr><name><name>ia</name>-&gt;<name>type</name></name> != 7</expr>)</condition> <block>{
<if>if <condition>(<expr><name><name>ia</name>-&gt;<name>type</name></name> == 1</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>skel_t</name> *</type><name>skel</name> <init>= <expr><call><name>parse_cstr</name><argument_list>(<argument><expr><name><name>ia</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>check_atom</name><argument_list>(<argument><expr><name>skel</name></expr></argument>, <argument><expr><name><name>ia</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>ia</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr>"failed to detect parsing error in '%s'"</expr></argument>, <argument><expr><name><name>ia</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><call><name>try_explicit_length</name><argument_list>(<argument><expr><name><name>ia</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>ia</name>-&gt;<name>len</name></name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ia</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> == <name>SVN_NO_ERROR</name></expr>)</condition><then>
<return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"got wrong length in explicit-length atom"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>ia</name>++</expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>put_list_start</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> *</type><name>str</name></decl></param>, <param><decl><type><name>char</name></type> <name>space</name></decl></param>, <param><decl><type><name>int</name></type> <name>len</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>len</name> &gt; 0 &amp;&amp; ! <call><name>skel_is_space</name><argument_list>(<argument><expr><name>space</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr>"("</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr>&amp;<name>space</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>put_list_end</name><parameter_list>(<param><decl><type><name>svn_stringbuf_t</name> *</type><name>str</name></decl></param>, <param><decl><type><name>char</name></type> <name>space</name></decl></param>, <param><decl><type><name>int</name></type> <name>len</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>len</name> &gt; 0 &amp;&amp; ! <call><name>skel_is_space</name><argument_list>(<argument><expr><name>space</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr>&amp;<name>space</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr>")"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>check_list</name><parameter_list>(<param><decl><type><name>skel_t</name> *</type><name>skel</name></decl></param>, <param><decl><type><name>int</name></type> <name>desired_len</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>skel_t</name> *</type><name>child</name></decl>;</decl_stmt>
<if>if <condition>(<expr>! (<name>skel</name>
&amp;&amp; ! <name><name>skel</name>-&gt;<name>is_atom</name></name>)</expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>len</name> = 0</expr>;</expr_stmt>
<for>for (<init><expr><name>child</name> = <name><name>skel</name>-&gt;<name>children</name></name></expr>;</init> <condition><expr><name>child</name></expr>;</condition> <incr><expr><name>child</name> = <name><name>child</name>-&gt;<name>next</name></name></expr></incr>)
<expr_stmt><expr><name>len</name>++</expr>;</expr_stmt></for>
<return>return <expr><name>len</name> == <name>desired_len</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>parse_list</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>*<name>msg</name> = "parse lists"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>list_len</name></decl>;</decl_stmt>
<for>for (<init><expr><name>list_len</name> = 0</expr>;</init>
<condition><expr><name>list_len</name> &lt; 30</expr>;</condition>
<incr><expr><name>list_len</name> &lt; 4 ? <name>list_len</name>++ : (<name>list_len</name> *= 3)</expr></incr>) <block>{
<decl_stmt><decl><type><name>int</name></type> <name>sep</name></decl>;</decl_stmt>
<for>for (<init><expr><name>sep</name> = 0</expr>;</init> <condition><expr><name>sep</name> &lt; 256</expr>;</condition> <incr><expr><name>sep</name>++</expr></incr>)
<if>if <condition>(<expr><call><name>skel_is_space</name><argument_list>( <argument><expr>(<name>apr_byte_t</name>)<name>sep</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>sep_count</name></decl>;</decl_stmt>
<for>for (<init><expr><name>sep_count</name> = 0</expr>;</init>
<condition><expr><name>sep_count</name> &lt; 30</expr>;</condition>
<incr><expr><name>sep_count</name> &lt; 4 ? <name>sep_count</name>++ : (<name>sep_count</name> *= 3)</expr></incr>) <block>{
<decl_stmt><decl><type><name>int</name></type> <name>atom_byte</name></decl>;</decl_stmt>
<for>for (<init><expr><name>atom_byte</name> = 0</expr>;</init> <condition><expr><name>atom_byte</name> &lt; 256</expr>;</condition> <incr><expr><name>atom_byte</name>++</expr></incr>)
<if>if <condition>(<expr><call><name>skel_is_name</name><argument_list>( <argument><expr>(<name>apr_byte_t</name>)<name>atom_byte</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>str</name> <init>= <expr><call><name>get_empty_string</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>skel_t</name> *</type><name>skel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>skel_t</name> *</type><name>child</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>put_list_start</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr>(<name>apr_byte_t</name>)<name>sep</name></expr></argument>, <argument><expr><name>sep_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>list_len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
<expr_stmt><expr><call><name>put_implicit_length_byte</name><argument_list>(<argument><expr><name>str</name></expr></argument>,
<argument><expr>(<name>apr_byte_t</name>)<name>atom_byte</name></expr></argument>,
<argument><expr>(<name>apr_byte_t</name>)<name>sep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
<expr_stmt><expr><call><name>put_list_end</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr>(<name>apr_byte_t</name>)<name>sep</name></expr></argument>, <argument><expr><name>sep_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>skel</name> = <call><name>parse_str</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <call><name>check_list</name><argument_list>(<argument><expr><name>skel</name></expr></argument>, <argument><expr><name>list_len</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"couldn't parse list"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<for>for (<init><expr><name>child</name> = <name><name>skel</name>-&gt;<name>children</name></name></expr>;</init>
<condition><expr><name>child</name></expr>;</condition>
<incr><expr><name>child</name> = <name><name>child</name>-&gt;<name>next</name></name></expr></incr>)
<if>if <condition>(<expr>! <call><name>check_implicit_length_byte</name>
<argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr>(<name>apr_byte_t</name>)<name>atom_byte</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr>"list was reparsed incorrectly"</expr></argument>)</argument_list></call></expr>;</return></then></if></for>
}</block></then></if></for>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>str</name> <init>= <expr><call><name>get_empty_string</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>skel_t</name> *</type><name>skel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>skel_t</name> *</type><name>child</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>put_list_start</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr>(<name>apr_byte_t</name>)<name>sep</name></expr></argument>, <argument><expr><name>sep_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>list_len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
<expr_stmt><expr><call><name>put_implicit_length_all_chars</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr>(<name>apr_byte_t</name>)<name>sep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
<expr_stmt><expr><call><name>put_list_end</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr>(<name>apr_byte_t</name>)<name>sep</name></expr></argument>, <argument><expr><name>sep_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>skel</name> = <call><name>parse_str</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <call><name>check_list</name><argument_list>(<argument><expr><name>skel</name></expr></argument>, <argument><expr><name>list_len</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"couldn't parse list"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<for>for (<init><expr><name>child</name> = <name><name>skel</name>-&gt;<name>children</name></name></expr>;</init>
<condition><expr><name>child</name></expr>;</condition>
<incr><expr><name>child</name> = <name><name>child</name>-&gt;<name>next</name></name></expr></incr>)
<if>if <condition>(<expr>! <call><name>check_implicit_length_all_chars</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"couldn't parse list"</expr></argument>)</argument_list></call></expr>;</return></then></if></for>
}</block>
<for>for (<init><expr><name>atom_byte</name> = 0</expr>;</init> <condition><expr><name>atom_byte</name> &lt; 256</expr>;</condition> <incr><expr><name>atom_byte</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>str</name> <init>= <expr><call><name>get_empty_string</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>skel_t</name> *</type><name>skel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>skel_t</name> *</type><name>child</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>1</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr>0</expr>]</index></name> = <name>atom_byte</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_list_start</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr>(<name>apr_byte_t</name>)<name>sep</name></expr></argument>, <argument><expr><name>sep_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>list_len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
<expr_stmt><expr><call><name>put_explicit_length</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>(<name>apr_byte_t</name>)<name>sep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
<expr_stmt><expr><call><name>put_list_end</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr>(<name>apr_byte_t</name>)<name>sep</name></expr></argument>, <argument><expr><name>sep_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>skel</name> = <call><name>parse_str</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <call><name>check_list</name><argument_list>(<argument><expr><name>skel</name></expr></argument>, <argument><expr><name>list_len</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"couldn't parse list"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<for>for (<init><expr><name>child</name> = <name><name>skel</name>-&gt;<name>children</name></name></expr>;</init>
<condition><expr><name>child</name></expr>;</condition>
<incr><expr><name>child</name> = <name><name>child</name>-&gt;<name>next</name></name></expr></incr>)
<if>if <condition>(<expr>! <call><name>check_explicit_length</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"list was reparsed incorrectly"</expr></argument>)</argument_list></call></expr>;</return></then></if></for>
}</block></for>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>str</name> <init>= <expr><call><name>get_empty_string</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>skel_t</name> *</type><name>skel</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>skel_t</name> *</type><name>child</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>data</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 256</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
<expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> = <name>i</name></expr>;</expr_stmt></for>
<expr_stmt><expr><call><name>put_list_start</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr>(<name>apr_byte_t</name>)<name>sep</name></expr></argument>, <argument><expr><name>sep_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>list_len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
<expr_stmt><expr><call><name>put_explicit_length</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr>256</expr></argument>, <argument><expr>(<name>apr_byte_t</name>)<name>sep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
<expr_stmt><expr><call><name>put_list_end</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr>(<name>apr_byte_t</name>)<name>sep</name></expr></argument>, <argument><expr><name>sep_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>skel</name> = <call><name>parse_str</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <call><name>check_list</name><argument_list>(<argument><expr><name>skel</name></expr></argument>, <argument><expr><name>list_len</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"couldn't parse list"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<for>for (<init><expr><name>child</name> = <name><name>skel</name>-&gt;<name>children</name></name></expr>;</init>
<condition><expr><name>child</name></expr>;</condition>
<incr><expr><name>child</name> = <name><name>child</name>-&gt;<name>next</name></name></expr></incr>)
<if>if <condition>(<expr>! <call><name>check_explicit_length</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr>256</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"list was re-parsed incorrectly"</expr></argument>)</argument_list></call></expr>;</return></then></if></for>
}</block>
}</block></for>
}</block></then></if></for>
}</block></for>
}</block>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>sep</name></decl>;</decl_stmt>
<for>for (<init><expr><name>sep</name> = 0</expr>;</init> <condition><expr><name>sep</name> &lt; 256</expr>;</condition> <incr><expr><name>sep</name>++</expr></incr>)
<if>if <condition>(<expr><call><name>skel_is_space</name><argument_list>( <argument><expr>(<name>apr_byte_t</name>)<name>sep</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>sep_count</name></decl>;</decl_stmt>
<for>for (<init><expr><name>sep_count</name> = 0</expr>;</init>
<condition><expr><name>sep_count</name> &lt; 100</expr>;</condition>
<incr><expr><name>sep_count</name> &lt; 10 ? <name>sep_count</name>++ : (<name>sep_count</name> *= 3)</expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>str</name></decl>;</decl_stmt>
<expr_stmt><expr><name>str</name> = <call><name>get_empty_string</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_list_start</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr>(<name>apr_byte_t</name>)<name>sep</name></expr></argument>, <argument><expr><name>sep_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>parse_str</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"failed to detect syntax error"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>str</name> = <call><name>get_empty_string</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_list_end</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr>(<name>apr_byte_t</name>)<name>sep</name></expr></argument>, <argument><expr><name>sep_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>parse_str</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"failed to detect syntax error"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>str</name> = <call><name>get_empty_string</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_list_start</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr>(<name>apr_byte_t</name>)<name>sep</name></expr></argument>, <argument><expr><name>sep_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr>"100 "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>put_list_end</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr>(<name>apr_byte_t</name>)<name>sep</name></expr></argument>, <argument><expr><name>sep_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>parse_str</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"failed to detect invalid element"</expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></for>
}</block></then></if></for>
}</block>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>skel_t</name> *</type>
<name>build_atom</name><parameter_list>(<param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>, <param><decl><type><name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>copy</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>skel_t</name> *</type><name>skel</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>skel</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>skel</name>-&gt;<name>is_atom</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>skel</name>-&gt;<name>len</name></name> = <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>skel</name>-&gt;<name>data</name></name> = <name>copy</name></expr>;</expr_stmt>
<return>return <expr><name>skel</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>skel_t</name> *</type>
<name>empty</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>skel_t</name> *</type><name>skel</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>skel</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>skel</name>-&gt;<name>is_atom</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>skel</name>-&gt;<name>children</name></name> = 0</expr>;</expr_stmt>
<return>return <expr><name>skel</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>add</name><parameter_list>(<param><decl><type><name>skel_t</name> *</type><name>element</name></decl></param>, <param><decl><type><name>skel_t</name> *</type><name>list</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name><name>element</name>-&gt;<name>next</name></name> = <name><name>list</name>-&gt;<name>children</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>list</name>-&gt;<name>children</name></name> = <name>element</name></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>skel_equal</name><parameter_list>(<param><decl><type><name>skel_t</name> *</type><name>a</name></decl></param>, <param><decl><type><name>skel_t</name> *</type><name>b</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>a</name>-&gt;<name>is_atom</name></name> != <name><name>b</name>-&gt;<name>is_atom</name></name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<if>if <condition>(<expr><name><name>a</name>-&gt;<name>is_atom</name></name></expr>)</condition><then>
<return>return <expr>(<name><name>a</name>-&gt;<name>len</name></name> == <name><name>b</name>-&gt;<name>len</name></name>
&amp;&amp; ! <call><name>memcmp</name><argument_list>(<argument><expr><name><name>a</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>a</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call>)</expr>;</return></then>
<else>else <block>{
<decl_stmt><decl><type><name>skel_t</name> *</type><name>a_child</name></decl>, *<decl><type ref="prev"/><name>b_child</name></decl>;</decl_stmt>
<for>for (<init><expr><name>a_child</name> = <name><name>a</name>-&gt;<name>children</name></name></expr>, <expr><name>b_child</name> = <name><name>b</name>-&gt;<name>children</name></name></expr>;</init>
<condition><expr><name>a_child</name> &amp;&amp; <name>b_child</name></expr>;</condition>
<incr><expr><name>a_child</name> = <name><name>a_child</name>-&gt;<name>next</name></name></expr>, <expr><name>b_child</name> = <name><name>b_child</name>-&gt;<name>next</name></name></expr></incr>)
<if>if <condition>(<expr>! <call><name>skel_equal</name><argument_list>(<argument><expr><name>a_child</name></expr></argument>, <argument><expr><name>b_child</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if></for>
<if>if <condition>(<expr><name>a_child</name> || <name>b_child</name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
}</block></else></if>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>unparse_implicit_length</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>*<name>msg</name> = "unparse implicit-length atoms"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>byte</name></decl>;</decl_stmt>
<for>for (<init><expr><name>byte</name> = 0</expr>;</init> <condition><expr><name>byte</name> &lt; 256</expr>;</condition> <incr><expr><name>byte</name>++</expr></incr>)
<if>if <condition>(<expr><call><name>skel_is_name</name><argument_list>( <argument><expr>(<name>apr_byte_t</name>)<name>byte</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>str</name> <init>= <expr><call><name>get_empty_string</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>buf</name> <init>= <expr>(<name>char</name>)<name>byte</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>skel_t</name> *</type><name>skel</name> <init>= <expr><call><name>build_atom</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr>&amp;<name>buf</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>str</name> = <call><name>svn_fs_base__unparse_skel</name><argument_list>(<argument><expr><name>skel</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! (<name>str</name>
&amp;&amp; <name><name>str</name>-&gt;<name>len</name></name> == 1
&amp;&amp; <name><name>str</name>-&gt;<name>data</name><index>[<expr>0</expr>]</index></name> == (<name>char</name>)<name>byte</name>)</expr>)</condition><then>
<return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"incorrectly unparsed single-byte "
"implicit-length atom"</expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></then></if></for>
}</block>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>unparse_list</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>*<name>msg</name> = "unparse lists"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<block>{
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>str</name> <init>= <expr><call><name>get_empty_string</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>byte</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>skel_t</name> *</type><name>list</name> <init>= <expr><call><name>empty</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>skel_t</name> *</type><name>reparsed</name></decl>, *<decl><type ref="prev"/><name>elt</name></decl>;</decl_stmt>
<for>for (<init><expr><name>byte</name> = 0</expr>;</init> <condition><expr><name>byte</name> &lt; 256</expr>;</condition> <incr><expr><name>byte</name>++</expr></incr>)
<if>if <condition>(<expr><call><name>skel_is_name</name><argument_list>( <argument><expr>(<name>apr_byte_t</name>)<name>byte</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name></type> <name>buf</name> <init>= <expr><name>byte</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><call><name>build_atom</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr>&amp;<name>buf</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></for>
<expr_stmt><expr><name>str</name> = <call><name>svn_fs_base__unparse_skel</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reparsed</name> = <call><name>svn_fs_base__parse_skel</name><argument_list>(<argument><expr><name><name>str</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>str</name>-&gt;<name>len</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>reparsed</name> || <name><name>reparsed</name>-&gt;<name>is_atom</name></name></expr>)</condition><then>
<return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"result is syntactically misformed, or not a list"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>! <call><name>skel_equal</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>reparsed</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"unparsing and parsing didn't preserve contents"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>elt</name> = <name><name>reparsed</name>-&gt;<name>children</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>byte</name> = 255</expr>;</init> <condition><expr><name>byte</name> &gt;= 0</expr>;</condition> <incr><expr><name>byte</name>--</expr></incr>)
<if>if <condition>(<expr><call><name>skel_is_name</name><argument_list>( <argument><expr>(<name>apr_byte_t</name>)<name>byte</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr>! (<name>elt</name>
&amp;&amp; <name><name>elt</name>-&gt;<name>is_atom</name></name>
&amp;&amp; <name><name>elt</name>-&gt;<name>len</name></name> == 1
&amp;&amp; <name><name>elt</name>-&gt;<name>data</name><index>[<expr>0</expr>]</index></name> == <name>byte</name>)</expr>)</condition><then>
<return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"bad element"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>elt</name>-&gt;<name>data</name></name> &lt; <name><name>str</name>-&gt;<name>data</name></name>
|| <name><name>elt</name>-&gt;<name>data</name></name> + <name><name>elt</name>-&gt;<name>len</name></name> &gt; <name><name>str</name>-&gt;<name>data</name></name> + <name><name>str</name>-&gt;<name>len</name></name></expr>)</condition><then>
<return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"bad element"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>elt</name> = <name><name>elt</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></then></if></for>
<if>if <condition>(<expr><name>elt</name></expr>)</condition><then>
<return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"list too long"</expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block>
<block>{
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>str</name> <init>= <expr><call><name>get_empty_string</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>skel_t</name> *</type><name>top</name> <init>= <expr><call><name>empty</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>skel_t</name> *</type><name>reparsed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 10</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>skel_t</name> *</type><name>middle</name> <init>= <expr><call><name>empty</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; 10</expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>10</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><name>val</name> = <name>i</name> * 10 + <name>j</name></expr>;</expr_stmt>
<for>for (<init><expr><name>k</name> = 0</expr>;</init> <condition><expr><name>k</name> &lt; <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>k</name>++</expr></incr>) <block>{
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>k</name></expr>]</index></name> = <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> += <name>j</name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><call><name>build_atom</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>middle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>middle</name></expr></argument>, <argument><expr><name>top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name>str</name> = <call><name>svn_fs_base__unparse_skel</name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reparsed</name> = <call><name>svn_fs_base__parse_skel</name><argument_list>(<argument><expr><name><name>str</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name><name>str</name>-&gt;<name>len</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <call><name>skel_equal</name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><name>reparsed</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>fail</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"failed to reparse list of lists"</expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type>struct <name>svn_test_descriptor_t</name></type> <name><name>test_funcs</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>SVN_TEST_NULL</name></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>parse_implicit_length</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>parse_explicit_length</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>parse_invalid_atoms</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>parse_list</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>unparse_implicit_length</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>unparse_list</name></expr></argument>)</argument_list></call></expr>,
<expr><name>SVN_TEST_NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
</unit>
