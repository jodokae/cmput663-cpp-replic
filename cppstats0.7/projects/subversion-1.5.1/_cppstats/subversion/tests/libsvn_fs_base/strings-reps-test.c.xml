<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/tests/libsvn_fs_base/strings-reps-test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../svn_test.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../svn_test_fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../libsvn_fs_base/util/skel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../libsvn_fs_base/util/fs_skels.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../libsvn_fs_base/bdb/strings-table.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../libsvn_fs_base/bdb/reps-table.h"</cpp:file></cpp:include>
<struct>struct <name>rep_args</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>skel_t</name> *</type><name>skel</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>txn_body_write_new_rep</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>rep_args</name> *</type><name>b</name> <init>= <expr>(struct <name>rep_args</name> *) <name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>representation_t</name> *</type><name>rep</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__parse_representation_skel</name><argument_list>(<argument><expr>&amp;<name>rep</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>skel</name></name></expr></argument>,
<argument><expr><name><name>trail</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_fs_bdb__write_new_rep</name><argument_list>(<argument><expr>&amp;(<name><name>b</name>-&gt;<name>key</name></name>)</expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name>rep</name></expr></argument>, <argument><expr><name>trail</name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>txn_body_write_rep</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>rep_args</name> *</type><name>b</name> <init>= <expr>(struct <name>rep_args</name> *) <name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>representation_t</name> *</type><name>rep</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__parse_representation_skel</name><argument_list>(<argument><expr>&amp;<name>rep</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>skel</name></name></expr></argument>,
<argument><expr><name><name>trail</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_fs_bdb__write_rep</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>key</name></name></expr></argument>, <argument><expr><name>rep</name></expr></argument>, <argument><expr><name>trail</name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>txn_body_read_rep</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>rep_args</name> *</type><name>b</name> <init>= <expr>(struct <name>rep_args</name> *) <name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>representation_t</name> *</type><name>rep</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__read_rep</name><argument_list>(<argument><expr>&amp;<name>rep</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>key</name></name></expr></argument>, <argument><expr><name>trail</name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_fs_base__unparse_representation_skel</name><argument_list>(<argument><expr>&amp;(<name><name>b</name>-&gt;<name>skel</name></name>)</expr></argument>, <argument><expr><name>rep</name></expr></argument>,
<argument><expr><name><name>trail</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>txn_body_delete_rep</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>rep_args</name> *</type><name>b</name> <init>= <expr>(struct <name>rep_args</name> *) <name>baton</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>svn_fs_bdb__delete_rep</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>key</name></name></expr></argument>, <argument><expr><name>trail</name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>write_new_rep</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>rep_args</name></type> <name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rep</name> <init>= <expr>"((fulltext 0 ) a83t2Z0q)"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "write a new rep, get a new key back"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name>
<argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-write-new-rep"</expr></argument>,
<argument><expr>"bdb"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>.<name>fs</name></name> = <name>fs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>.<name>skel</name></name> = <call><name>svn_fs_base__parse_skel</name><argument_list>(<argument><expr><name>rep</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>rep</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>.<name>key</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__retry_txn</name><argument_list>(<argument><expr><name><name>args</name>.<name>fs</name></name></expr></argument>, <argument><expr><name>txn_body_write_new_rep</name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>args</name>.<name>key</name></name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"error writing new representation"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>write_rep</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>rep_args</name></type> <name>new_args</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>rep_args</name></type> <name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>new_rep</name> <init>= <expr>"((fulltext 0 ) a83t2Z0q)"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rep</name> <init>= <expr>"((fulltext 0 ) kfogel31337)"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "write a new rep, then overwrite it"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name>
<argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-write-rep"</expr></argument>,
<argument><expr>"bdb"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_args</name>.<name>fs</name></name> = <name>fs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_args</name>.<name>skel</name></name> = <call><name>svn_fs_base__parse_skel</name><argument_list>(<argument><expr><name>new_rep</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>new_rep</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_args</name>.<name>key</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__retry_txn</name><argument_list>(<argument><expr><name><name>new_args</name>.<name>fs</name></name></expr></argument>,
<argument><expr><name>txn_body_write_new_rep</name></expr></argument>, <argument><expr>&amp;<name>new_args</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>new_args</name>.<name>key</name></name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"error writing new representation"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name><name>args</name>.<name>fs</name></name> = <name><name>new_args</name>.<name>fs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>.<name>skel</name></name> = <call><name>svn_fs_base__parse_skel</name><argument_list>(<argument><expr><name>rep</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>rep</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>.<name>key</name></name> = <name><name>new_args</name>.<name>key</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__retry_txn</name><argument_list>(<argument><expr><name><name>new_args</name>.<name>fs</name></name></expr></argument>,
<argument><expr><name>txn_body_write_rep</name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>read_rep</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>rep_args</name></type> <name>new_args</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>rep_args</name></type> <name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>rep_args</name></type> <name>read_args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>skel_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rep</name> <init>= <expr>"((fulltext 0 ) kfogel31337)"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>new_rep_before</name> <init>= <expr>"((fulltext 0 ) a83t2Z0)"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>rep_after</name> <init>= <expr><call><name>apr_pstrdup</name>
<argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"((fulltext 0 (md5 16 XXXXXXXXXXXXXXXX)) kfogel31337"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>new_rep_after</name> <init>= <expr><call><name>apr_pstrdup</name>
<argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"((fulltext 0 (md5 16 XXXXXXXXXXXXXXXX)) a83t2Z0"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rep_after_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>rep_after</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_rep_after_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>new_rep_after</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<block>{
<decl_stmt><decl><type><name>char</name> *</type><name>p</name></decl>;</decl_stmt>
<for>for (<init><expr><name>p</name> = <name>rep_after</name></expr>;</init> <condition><expr>*<name>p</name></expr>;</condition> <incr><expr><name>p</name>++</expr></incr>)
<if>if <condition>(<expr>*<name>p</name> == 'X'</expr>)</condition><then>
<expr_stmt><expr>*<name>p</name> = '\0'</expr>;</expr_stmt></then></if></for>
<for>for (<init><expr><name>p</name> = <name>new_rep_after</name></expr>;</init> <condition><expr>*<name>p</name></expr>;</condition> <incr><expr><name>p</name>++</expr></incr>)
<if>if <condition>(<expr>*<name>p</name> == 'X'</expr>)</condition><then>
<expr_stmt><expr>*<name>p</name> = '\0'</expr>;</expr_stmt></then></if></for>
}</block>
<expr_stmt><expr>*<name>msg</name> = "write and overwrite a new rep; confirm with reads"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name>
<argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-read-rep"</expr></argument>,
<argument><expr>"bdb"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_args</name>.<name>fs</name></name> = <name>fs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_args</name>.<name>skel</name></name> = <call><name>svn_fs_base__parse_skel</name><argument_list>(<argument><expr><name>new_rep_before</name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>new_rep_before</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_args</name>.<name>key</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__retry_txn</name><argument_list>(<argument><expr><name><name>new_args</name>.<name>fs</name></name></expr></argument>,
<argument><expr><name>txn_body_write_new_rep</name></expr></argument>, <argument><expr>&amp;<name>new_args</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>new_args</name>.<name>key</name></name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"error writing new representation"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name><name>read_args</name>.<name>fs</name></name> = <name><name>new_args</name>.<name>fs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>read_args</name>.<name>skel</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>read_args</name>.<name>key</name></name> = <name><name>new_args</name>.<name>key</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__retry_txn</name><argument_list>(<argument><expr><name><name>new_args</name>.<name>fs</name></name></expr></argument>,
<argument><expr><name>txn_body_read_rep</name></expr></argument>, <argument><expr>&amp;<name>read_args</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name><name>read_args</name>.<name>skel</name></name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"error reading new representation"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>skel_data</name> = <call><name>svn_fs_base__unparse_skel</name><argument_list>(<argument><expr><name><name>read_args</name>.<name>skel</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>skel_data</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>new_rep_after</name></expr></argument>, <argument><expr><name>new_rep_after_len</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"representation corrupted (first check)"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name><name>args</name>.<name>fs</name></name> = <name><name>new_args</name>.<name>fs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>.<name>skel</name></name> = <call><name>svn_fs_base__parse_skel</name><argument_list>(<argument><expr><name>rep</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>rep</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>.<name>key</name></name> = <name><name>new_args</name>.<name>key</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__retry_txn</name><argument_list>(<argument><expr><name><name>new_args</name>.<name>fs</name></name></expr></argument>,
<argument><expr><name>txn_body_write_rep</name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>read_args</name>.<name>skel</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__retry_txn</name><argument_list>(<argument><expr><name><name>new_args</name>.<name>fs</name></name></expr></argument>,
<argument><expr><name>txn_body_read_rep</name></expr></argument>, <argument><expr>&amp;<name>read_args</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name><name>read_args</name>.<name>skel</name></name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"error reading new representation"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>skel_data</name> = <call><name>svn_fs_base__unparse_skel</name><argument_list>(<argument><expr><name><name>read_args</name>.<name>skel</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>skel_data</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>rep_after</name></expr></argument>, <argument><expr><name>rep_after_len</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"representation corrupted (second check)"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>delete_rep</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>rep_args</name></type> <name>new_args</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>rep_args</name></type> <name>delete_args</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>rep_args</name></type> <name>read_args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>new_rep</name> <init>= <expr>"((fulltext 0 ) a83t2Z0q)"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "write, then delete, a new rep; confirm deletion"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name>
<argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-delete-rep"</expr></argument>,
<argument><expr>"bdb"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_args</name>.<name>fs</name></name> = <name>fs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_args</name>.<name>skel</name></name> = <call><name>svn_fs_base__parse_skel</name><argument_list>(<argument><expr><name>new_rep</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>new_rep</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_args</name>.<name>key</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__retry_txn</name><argument_list>(<argument><expr><name><name>new_args</name>.<name>fs</name></name></expr></argument>,
<argument><expr><name>txn_body_write_new_rep</name></expr></argument>, <argument><expr>&amp;<name>new_args</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>new_args</name>.<name>key</name></name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"error writing new representation"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name><name>delete_args</name>.<name>fs</name></name> = <name><name>new_args</name>.<name>fs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>delete_args</name>.<name>key</name></name> = <name><name>new_args</name>.<name>key</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__retry_txn</name><argument_list>(<argument><expr><name><name>new_args</name>.<name>fs</name></name></expr></argument>,
<argument><expr><name>txn_body_delete_rep</name></expr></argument>, <argument><expr>&amp;<name>delete_args</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>read_args</name>.<name>fs</name></name> = <name><name>new_args</name>.<name>fs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>read_args</name>.<name>skel</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>read_args</name>.<name>key</name></name> = <name><name>new_args</name>.<name>key</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_fs_base__retry_txn</name><argument_list>(<argument><expr><name><name>new_args</name>.<name>fs</name></name></expr></argument>,
<argument><expr><name>txn_body_read_rep</name></expr></argument>, <argument><expr>&amp;<name>read_args</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(! <name>err</name>) &amp;&amp; (<name><name>read_args</name>.<name>skel</name></name>)</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"error deleting representation"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>verify_expected_record</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>expected_text</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>expected_len</name></decl></param>,
<param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>100</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_filesize_t</name></type> <name>offset</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_filesize_t</name></type> <name>string_size</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__string_size</name><argument_list>(<argument><expr>&amp;<name>string_size</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>key</name></expr></argument>,
<argument><expr><name>trail</name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>string_size</name> &gt; <name>SVN_MAX_OBJECT_SIZE</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"record size is too large "
"(got %" <name>SVN_FILESIZE_T_FMT</name> ", "
"limit is %" <name>APR_SIZE_T_FMT</name> ")"</expr></argument>,
<argument><expr><name>string_size</name></expr></argument>, <argument><expr><name>SVN_MAX_OBJECT_SIZE</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>size</name> = (<name>apr_size_t</name>) <name>string_size</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>size</name> != <name>expected_len</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"record has unexpected size "
"(got %" <name>APR_SIZE_T_FMT</name> ", "
"expected %" <name>APR_SIZE_T_FMT</name> ")"</expr></argument>,
<argument><expr><name>size</name></expr></argument>, <argument><expr><name>expected_len</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>text</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>1</expr>)</condition> <block>{
<expr_stmt><expr><name>size</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__string_read</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>,
<argument><expr><name>trail</name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>size</name> == 0</expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr><call><name>svn_stringbuf_appendbytes</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> += <name>size</name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name><name>text</name>-&gt;<name>len</name></name> != <name>expected_len</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"record read returned unexpected size "
"(got %" <name>APR_SIZE_T_FMT</name> ", "
"expected %" <name>APR_SIZE_T_FMT</name> ")"</expr></argument>,
<argument><expr><name>size</name></expr></argument>, <argument><expr><name>expected_len</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>expected_text</name></expr></argument>, <argument><expr><name><name>text</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>expected_len</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"record read returned unexpected data"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<struct>struct <name>string_args</name> <block>{
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>text</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>txn_body_verify_string</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>string_args</name> *</type><name>b</name> <init>= <expr>(struct <name>string_args</name> *) <name>baton</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>verify_expected_record</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>key</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>text</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>len</name></name></expr></argument>, <argument><expr><name>trail</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>txn_body_string_append</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>string_args</name> *</type><name>b</name> <init>= <expr>(struct <name>string_args</name> *) <name>baton</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>svn_fs_bdb__string_append</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr>&amp;(<name><name>b</name>-&gt;<name>key</name></name>)</expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>len</name></name></expr></argument>,
<argument><expr><name><name>b</name>-&gt;<name>text</name></name></expr></argument>, <argument><expr><name>trail</name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>txn_body_string_clear</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>string_args</name> *</type><name>b</name> <init>= <expr>(struct <name>string_args</name> *) <name>baton</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>svn_fs_bdb__string_clear</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>key</name></name></expr></argument>, <argument><expr><name>trail</name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>txn_body_string_delete</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>string_args</name> *</type><name>b</name> <init>= <expr>(struct <name>string_args</name> *) <name>baton</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>svn_fs_bdb__string_delete</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>key</name></name></expr></argument>, <argument><expr><name>trail</name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>txn_body_string_size</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>string_args</name> *</type><name>b</name> <init>= <expr>(struct <name>string_args</name> *) <name>baton</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_filesize_t</name></type> <name>string_size</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__string_size</name><argument_list>(<argument><expr>&amp;<name>string_size</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>key</name></name></expr></argument>,
<argument><expr><name>trail</name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>string_size</name> &gt; <name>SVN_MAX_OBJECT_SIZE</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"txn_body_string_size: string size is too large "
"(got %" <name>SVN_FILESIZE_T_FMT</name> ", limit is %" <name>APR_SIZE_T_FMT</name> ")"</expr></argument>,
<argument><expr><name>string_size</name></expr></argument>, <argument><expr><name>SVN_MAX_OBJECT_SIZE</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name><name>b</name>-&gt;<name>len</name></name> = (<name>apr_size_t</name>) <name>string_size</name></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>txn_body_string_append_fail</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>string_args</name> *</type><name>b</name> <init>= <expr>(struct <name>string_args</name> *) <name>baton</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_bdb__string_append</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr>&amp;(<name><name>b</name>-&gt;<name>key</name></name>)</expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>len</name></name></expr></argument>,
<argument><expr><name><name>b</name>-&gt;<name>text</name></name></expr></argument>, <argument><expr><name>trail</name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"la dee dah, la dee day..."</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>txn_body_string_copy</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>string_args</name> *</type><name>b</name> <init>= <expr>(struct <name>string_args</name> *) <name>baton</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>svn_fs_bdb__string_copy</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr>&amp;(<name><name>b</name>-&gt;<name>key</name></name>)</expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>key</name></name></expr></argument>,
<argument><expr><name>trail</name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>bigstring1</name> <init>=
<expr>" Alice opened the door and found that it led into a small\n"
"passage, not much larger than a rat-hole: she knelt down and\n"
"looked along the passage into the loveliest garden you ever saw.\n"
"How she longed to get out of that dark hall, and wander about\n"
"among those beds of bright flowers and those cool fountains, but\n"
"she could not even get her head though the doorway; 'and even if\n"
"my head would go through,' thought poor Alice, 'it would be of\n"
"very little use without my shoulders. Oh, how I wish\n"
"I could shut up like a telescope! I think I could, if I only\n"
"know how to begin.' For, you see, so many out-of-the-way things\n"
"had happened lately, that Alice had begun to think that very few\n"
"things indeed were really impossible."</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>bigstring2</name> <init>=
<expr>" There seemed to be no use in waiting by the little door, so she\n"
"went back to the table, half hoping she might find another key on\n"
"it, or at any rate a book of rules for shutting people up like\n"
"telescopes: this time she found a little bottle on it, ('which\n"
"certainly was not here before,' said Alice,) and round the neck\n"
"of the bottle was a paper label, with the words 'DRINK ME'\n"
"beautifully printed on it in large letters."</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>bigstring3</name> <init>=
<expr>" It was all very well to say 'Drink me,' but the wise little\n"
"Alice was not going to do THAT in a hurry. 'No, I'll look\n"
"first,' she said, 'and see whether it's marked \"poison\" or not';\n"
"for she had read several nice little histories about children who\n"
"had got burnt, and eaten up by wild beasts and other unpleasant\n"
"things, all because they WOULD not remember the simple rules\n"
"their friends had taught them: such as, that a red-hot poker\n"
"will burn you if you hold it too long; and that if you cut your\n"
"finger VERY deeply with a knife, it usually bleeds; and she had\n"
"never forgotten that, if you drink much from a bottle marked\n"
"'poison,' it is almost certain to disagree with you, sooner or\n"
"later."</expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_strings</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>string_args</name></type> <name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_stringbuf_t</name> *</type><name>string</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "test many strings table functions together"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name>
<argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-test-strings"</expr></argument>,
<argument><expr>"bdb"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>.<name>fs</name></name> = <name>fs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>.<name>key</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>.<name>text</name></name> = <name>bigstring1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>.<name>len</name></name> = <call><name>strlen</name><argument_list>(<argument><expr><name>bigstring1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__retry_txn</name><argument_list>(<argument><expr><name><name>args</name>.<name>fs</name></name></expr></argument>,
<argument><expr><name>txn_body_string_append</name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name><name>args</name>.<name>key</name></name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"write of new string failed to return new key"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__retry_txn</name><argument_list>(<argument><expr><name><name>args</name>.<name>fs</name></name></expr></argument>,
<argument><expr><name>txn_body_verify_string</name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>.<name>text</name></name> = <name>bigstring2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>.<name>len</name></name> = <call><name>strlen</name><argument_list>(<argument><expr><name>bigstring2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__retry_txn</name><argument_list>(<argument><expr><name><name>args</name>.<name>fs</name></name></expr></argument>,
<argument><expr><name>txn_body_string_append</name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>string</name> = <call><name>svn_stringbuf_create</name><argument_list>(<argument><expr><name>bigstring1</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_stringbuf_appendcstr</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>bigstring2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>.<name>text</name></name> = <name><name>string</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>.<name>len</name></name> = <name><name>string</name>-&gt;<name>len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__retry_txn</name><argument_list>(<argument><expr><name><name>args</name>.<name>fs</name></name></expr></argument>,
<argument><expr><name>txn_body_verify_string</name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__retry_txn</name><argument_list>(<argument><expr><name><name>args</name>.<name>fs</name></name></expr></argument>,
<argument><expr><name>txn_body_string_clear</name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>.<name>text</name></name> = ""</expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>.<name>len</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__retry_txn</name><argument_list>(<argument><expr><name><name>args</name>.<name>fs</name></name></expr></argument>,
<argument><expr><name>txn_body_verify_string</name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>.<name>text</name></name> = <name>bigstring3</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>.<name>len</name></name> = <call><name>strlen</name><argument_list>(<argument><expr><name>bigstring3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__retry_txn</name><argument_list>(<argument><expr><name><name>args</name>.<name>fs</name></name></expr></argument>,
<argument><expr><name>txn_body_string_append</name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__retry_txn</name><argument_list>(<argument><expr><name><name>args</name>.<name>fs</name></name></expr></argument>,
<argument><expr><name>txn_body_verify_string</name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__retry_txn</name><argument_list>(<argument><expr><name><name>args</name>.<name>fs</name></name></expr></argument>,
<argument><expr><name>txn_body_string_delete</name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><call><name>svn_fs_base__retry_txn</name><argument_list>(<argument><expr><name><name>args</name>.<name>fs</name></name></expr></argument>, <argument><expr><name>txn_body_string_size</name></expr></argument>,
<argument><expr>&amp;<name>args</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>! <name>err</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"query unexpectedly successful"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>err</name>-&gt;<name>apr_err</name></name> != <name>SVN_ERR_FS_NO_SUCH_STRING</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>err</name></expr></argument>,
<argument><expr>"query failed with unexpected error"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>write_null_string</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>string_args</name></type> <name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "write a null string"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name>
<argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-test-strings"</expr></argument>,
<argument><expr>"bdb"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>.<name>fs</name></name> = <name>fs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>.<name>key</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>.<name>text</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>.<name>len</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__retry_txn</name><argument_list>(<argument><expr><name><name>args</name>.<name>fs</name></name></expr></argument>, <argument><expr><name>txn_body_string_append</name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>abort_string</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>string_args</name></type> <name>args</name></decl>, <decl><type ref="prev"/><name>args2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "write a string, then abort during an overwrite"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name>
<argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-abort-string"</expr></argument>,
<argument><expr>"bdb"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>.<name>fs</name></name> = <name>fs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>.<name>key</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>.<name>text</name></name> = <name>bigstring1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>.<name>len</name></name> = <call><name>strlen</name><argument_list>(<argument><expr><name>bigstring1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__retry_txn</name><argument_list>(<argument><expr><name><name>args</name>.<name>fs</name></name></expr></argument>,
<argument><expr><name>txn_body_string_append</name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name><name>args</name>.<name>key</name></name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"write of new string failed to return new key"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__retry_txn</name><argument_list>(<argument><expr><name><name>args</name>.<name>fs</name></name></expr></argument>,
<argument><expr><name>txn_body_verify_string</name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args2</name>.<name>fs</name></name> = <name>fs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args2</name>.<name>key</name></name> = <name><name>args</name>.<name>key</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args2</name>.<name>text</name></name> = <name>bigstring2</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args2</name>.<name>len</name></name> = <call><name>strlen</name><argument_list>(<argument><expr><name>bigstring2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> = <call><name>svn_fs_base__retry_txn</name><argument_list>(<argument><expr><name><name>args</name>.<name>fs</name></name></expr></argument>, <argument><expr><name>txn_body_string_append_fail</name></expr></argument>,
<argument><expr>&amp;<name>args2</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(! <name>err</name>) || (<name><name>err</name>-&gt;<name>apr_err</name></name> != <name>SVN_ERR_TEST_FAILED</name>)</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>err</name></expr></argument>,
<argument><expr>"failed to intentionally abort a trail"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__retry_txn</name><argument_list>(<argument><expr><name><name>args</name>.<name>fs</name></name></expr></argument>,
<argument><expr><name>txn_body_verify_string</name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>copy_string</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>string_args</name></type> <name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>old_key</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "create and copy a string"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name>
<argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-copy-string"</expr></argument>,
<argument><expr>"bdb"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>.<name>fs</name></name> = <name>fs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>.<name>key</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>.<name>text</name></name> = <name>bigstring1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>.<name>len</name></name> = <call><name>strlen</name><argument_list>(<argument><expr><name>bigstring1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__retry_txn</name><argument_list>(<argument><expr><name><name>args</name>.<name>fs</name></name></expr></argument>,
<argument><expr><name>txn_body_string_append</name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! (<name>old_key</name> = <name><name>args</name>.<name>key</name></name>)</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"write of new string failed to return new key"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__retry_txn</name><argument_list>(<argument><expr><name><name>args</name>.<name>fs</name></name></expr></argument>,
<argument><expr><name>txn_body_string_copy</name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(! <name><name>args</name>.<name>key</name></name>) || (! <call><name>strcmp</name><argument_list>(<argument><expr><name>old_key</name></expr></argument>, <argument><expr><name><name>args</name>.<name>key</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_FS_GENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"copy of string failed to return new key"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__retry_txn</name><argument_list>(<argument><expr><name><name>args</name>.<name>fs</name></name></expr></argument>,
<argument><expr><name>txn_body_verify_string</name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type>struct <name>svn_test_descriptor_t</name></type> <name><name>test_funcs</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>SVN_TEST_NULL</name></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>write_new_rep</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>write_rep</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>read_rep</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>delete_rep</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>test_strings</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>write_null_string</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>abort_string</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>copy_string</name></expr></argument>)</argument_list></call></expr>,
<expr><name>SVN_TEST_NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
</unit>
