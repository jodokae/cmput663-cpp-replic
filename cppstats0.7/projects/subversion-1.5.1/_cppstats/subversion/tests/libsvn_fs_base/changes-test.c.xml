<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/tests/libsvn_fs_base/changes-test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../svn_test.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../svn_test_fs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../libsvn_fs_base/util/skel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../libsvn_fs_base/util/fs_skels.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../libsvn_fs_base/bdb/changes-table.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name><name>standard_txns</name><index>[]</index></name>
<init>= <expr><block>{ <expr>"0"</expr>, <expr>"1"</expr>, <expr>"2"</expr>, <expr>"3"</expr>, <expr>"4"</expr>, <expr>"5"</expr>, <expr>"6"</expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name><name>standard_changes</name><index>[<expr>19</expr>]</index><index>[<expr>6</expr>]</index></name>
<init>= <expr><block>{ <expr><block>{ <expr>"0"</expr>, <expr>"/foo"</expr>, <expr>"1.0.0"</expr>, <expr>"add"</expr>, <expr>0</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"0"</expr>, <expr>"/foo"</expr>, <expr>"1.0.0"</expr>, <expr>"modify"</expr>, <expr>0</expr>, <expr>"1"</expr> }</block></expr>,
<expr><block>{ <expr>"0"</expr>, <expr>"/bar"</expr>, <expr>"2.0.0"</expr>, <expr>"add"</expr>, <expr>0</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"0"</expr>, <expr>"/bar"</expr>, <expr>"2.0.0"</expr>, <expr>"modify"</expr>, <expr>"1"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"0"</expr>, <expr>"/bar"</expr>, <expr>"2.0.0"</expr>, <expr>"modify"</expr>, <expr>0</expr>, <expr>"1"</expr> }</block></expr>,
<expr><block>{ <expr>"0"</expr>, <expr>"/baz"</expr>, <expr>"3.0.0"</expr>, <expr>"add"</expr>, <expr>0</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"0"</expr>, <expr>"/baz"</expr>, <expr>"3.0.0"</expr>, <expr>"modify"</expr>, <expr>"1"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"1"</expr>, <expr>"/foo"</expr>, <expr>"1.0.1"</expr>, <expr>"modify"</expr>, <expr>"1"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"2"</expr>, <expr>"/foo"</expr>, <expr>"1.0.2"</expr>, <expr>"modify"</expr>, <expr>0</expr>, <expr>"1"</expr> }</block></expr>,
<expr><block>{ <expr>"2"</expr>, <expr>"/bar"</expr>, <expr>"2.0.2"</expr>, <expr>"modify"</expr>, <expr>"1"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"3"</expr>, <expr>"/baz"</expr>, <expr>"3.0.3"</expr>, <expr>"modify"</expr>, <expr>"1"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"4"</expr>, <expr>"/fob"</expr>, <expr>"4.0.4"</expr>, <expr>"add"</expr>, <expr>0</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"4"</expr>, <expr>"/fob"</expr>, <expr>"4.0.4"</expr>, <expr>"modify"</expr>, <expr>"1"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"5"</expr>, <expr>"/baz"</expr>, <expr>"3.0.3"</expr>, <expr>"delete"</expr>, <expr>0</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"5"</expr>, <expr>"/baz"</expr>, <expr>"5.0.5"</expr>, <expr>"add"</expr>, <expr>0</expr>, <expr>"1"</expr> }</block></expr>,
<expr><block>{ <expr>"5"</expr>, <expr>"/baz"</expr>, <expr>"5.0.5"</expr>, <expr>"modify"</expr>, <expr>"1"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"6"</expr>, <expr>"/fob"</expr>, <expr>"4.0.6"</expr>, <expr>"modify"</expr>, <expr>"1"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"6"</expr>, <expr>"/fob"</expr>, <expr>"4.0.6"</expr>, <expr>"reset"</expr>, <expr>0</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"6"</expr>, <expr>"/fob"</expr>, <expr>"4.0.6"</expr>, <expr>"modify"</expr>, <expr>0</expr>, <expr>"1"</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>svn_fs_path_change_kind_t</name></type> <name>string_to_kind</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>str</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr>"add"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>svn_fs_path_change_add</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr>"delete"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>svn_fs_path_change_delete</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr>"replace"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>svn_fs_path_change_replace</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr>"modify"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>svn_fs_path_change_modify</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr>"reset"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>svn_fs_path_change_reset</name></expr>;</return></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<struct>struct <name>changes_args</name> <block>{
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>change_t</name> *</type><name>change</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>raw_changes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>changes</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>txn_body_changes_add</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>changes_args</name> *</type><name>b</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>svn_fs_bdb__changes_add</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>key</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>change</name></name></expr></argument>,
<argument><expr><name>trail</name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>add_standard_changes</name><parameter_list>(<param><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>changes_args</name></type> <name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_changes</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>standard_changes</name></expr></argument>)</argument_list></sizeof> / <sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof> / 6</expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>num_changes</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>change_t</name></type> <name>change</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>change</name>.<name>path</name></name> = <name><name>standard_changes</name><index>[<expr><name>i</name></expr>]</index><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>change</name>.<name>noderev_id</name></name> = <call><name>svn_fs_parse_id</name><argument_list>(<argument><expr><name><name>standard_changes</name><index>[<expr><name>i</name></expr>]</index><index>[<expr>2</expr>]</index></name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>standard_changes</name><index>[<expr><name>i</name></expr>]</index><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>change</name>.<name>kind</name></name> = <call><name>string_to_kind</name><argument_list>(<argument><expr><name><name>standard_changes</name><index>[<expr><name>i</name></expr>]</index><index>[<expr>3</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>change</name>.<name>text_mod</name></name> = <name><name>standard_changes</name><index>[<expr><name>i</name></expr>]</index><index>[<expr>4</expr>]</index></name> ? 1 : 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>change</name>.<name>prop_mod</name></name> = <name><name>standard_changes</name><index>[<expr><name>i</name></expr>]</index><index>[<expr>5</expr>]</index></name> ? 1 : 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>.<name>fs</name></name> = <name>fs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>.<name>key</name></name> = <name><name>standard_changes</name><index>[<expr><name>i</name></expr>]</index><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>.<name>change</name></name> = &amp;<name>change</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__retry_txn</name><argument_list>(<argument><expr><name><name>args</name>.<name>fs</name></name></expr></argument>, <argument><expr><name>txn_body_changes_add</name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>txn_body_changes_fetch_raw</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>changes_args</name> *</type><name>b</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>svn_fs_bdb__changes_fetch_raw</name><argument_list>(<argument><expr>&amp;(<name><name>b</name>-&gt;<name>raw_changes</name></name>)</expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>key</name></name></expr></argument>,
<argument><expr><name>trail</name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>txn_body_changes_fetch</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>changes_args</name> *</type><name>b</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>svn_fs_bdb__changes_fetch</name><argument_list>(<argument><expr>&amp;(<name><name>b</name>-&gt;<name>changes</name></name>)</expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>key</name></name></expr></argument>,
<argument><expr><name>trail</name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>txn_body_changes_delete</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>trail_t</name> *</type><name>trail</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>changes_args</name> *</type><name>b</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>svn_fs_bdb__changes_delete</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>fs</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>key</name></name></expr></argument>, <argument><expr><name>trail</name></expr></argument>, <argument><expr><name><name>trail</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>changes_add</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "add changes to the changes table"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-changes-add"</expr></argument>,
<argument><expr>"bdb"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>add_standard_changes</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>changes_fetch_raw</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_txns</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>standard_txns</name></expr></argument>)</argument_list></sizeof> / <sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cur_change_index</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>changes_args</name></type> <name>args</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "fetch raw changes from the changes table"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-changes-fetch"</expr></argument>,
<argument><expr>"bdb"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>.<name>fs</name></name> = <name>fs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>.<name>key</name></name> = "blahbliggityblah"</expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__retry_txn</name><argument_list>(<argument><expr><name><name>args</name>.<name>fs</name></name></expr></argument>, <argument><expr><name>txn_body_changes_fetch_raw</name></expr></argument>,
<argument><expr>&amp;<name>args</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(! <name><name>args</name>.<name>raw_changes</name></name>) || (<name><name>args</name>.<name>raw_changes</name>-&gt;<name>nelts</name></name>)</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"expected empty changes array"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>add_standard_changes</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>num_txns</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_id</name> <init>= <expr><name><name>standard_txns</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>args</name>.<name>fs</name></name> = <name>fs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>.<name>key</name></name> = <name>txn_id</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__retry_txn</name><argument_list>(<argument><expr><name><name>args</name>.<name>fs</name></name></expr></argument>, <argument><expr><name>txn_body_changes_fetch_raw</name></expr></argument>,
<argument><expr>&amp;<name>args</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name><name>args</name>.<name>raw_changes</name></name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"got no changes for key '%s'"</expr></argument>, <argument><expr><name>txn_id</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name><name>args</name>.<name>raw_changes</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_string_t</name> *</type><name>noderev_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_path_change_kind_t</name></type> <name>kind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>change_t</name> *</type><name>change</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>args</name>.<name>raw_changes</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>change_t</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mod_bit</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>standard_changes</name><index>[<expr><name>cur_change_index</name></expr>]</index><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>txn_id</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"missing some changes for key '%s'"</expr></argument>, <argument><expr><name>txn_id</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>standard_changes</name><index>[<expr><name>cur_change_index</name></expr>]</index><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name><name>change</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"paths differ in change for key '%s'"</expr></argument>, <argument><expr><name>txn_id</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>noderev_id</name> = <call><name>svn_fs_unparse_id</name><argument_list>(<argument><expr><name><name>change</name>-&gt;<name>noderev_id</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>standard_changes</name><index>[<expr><name>cur_change_index</name></expr>]</index><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr><name><name>noderev_id</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"node revision ids differ in change for key '%s'"</expr></argument>, <argument><expr><name>txn_id</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>kind</name> = <call><name>string_to_kind</name><argument_list>(<argument><expr><name><name>standard_changes</name><index>[<expr><name>cur_change_index</name></expr>]</index><index>[<expr>3</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>kind</name> != <name><name>change</name>-&gt;<name>kind</name></name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"change kinds differ in change for key '%s'"</expr></argument>, <argument><expr><name>txn_id</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>mod_bit</name> = <name><name>standard_changes</name><index>[<expr><name>cur_change_index</name></expr>]</index><index>[<expr>4</expr>]</index></name> ? 1 : 0</expr>;</expr_stmt>
<if>if <condition>(<expr><name>mod_bit</name> != <name><name>change</name>-&gt;<name>text_mod</name></name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"change text-mod bits differ in change for key '%s'"</expr></argument>, <argument><expr><name>txn_id</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>mod_bit</name> = <name><name>standard_changes</name><index>[<expr><name>cur_change_index</name></expr>]</index><index>[<expr>5</expr>]</index></name> ? 1 : 0</expr>;</expr_stmt>
<if>if <condition>(<expr><name>mod_bit</name> != <name><name>change</name>-&gt;<name>prop_mod</name></name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"change prop-mod bits differ in change for key '%s'"</expr></argument>, <argument><expr><name>txn_id</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>cur_change_index</name>++</expr>;</expr_stmt>
}</block></for>
}</block></for>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>changes_delete</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_txns</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>standard_txns</name></expr></argument>)</argument_list></sizeof> / <sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>changes_args</name></type> <name>args</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "delete changes from the changes table"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-changes-delete"</expr></argument>,
<argument><expr>"bdb"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>add_standard_changes</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>num_txns</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name><name>args</name>.<name>fs</name></name> = <name>fs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>.<name>key</name></name> = <name><name>standard_txns</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__retry_txn</name><argument_list>(<argument><expr><name><name>args</name>.<name>fs</name></name></expr></argument>, <argument><expr><name>txn_body_changes_delete</name></expr></argument>,
<argument><expr>&amp;<name>args</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>.<name>changes</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__retry_txn</name><argument_list>(<argument><expr><name><name>args</name>.<name>fs</name></name></expr></argument>, <argument><expr><name>txn_body_changes_fetch_raw</name></expr></argument>,
<argument><expr>&amp;<name>args</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(! <name><name>args</name>.<name>raw_changes</name></name>) || (<name><name>args</name>.<name>raw_changes</name>-&gt;<name>nelts</name></name>)</expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"expected empty changes array for txn '%s'"</expr></argument>, <argument><expr><name><name>args</name>.<name>key</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></for>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_hash_t</name> *</type>
<name>get_ideal_changes</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_id</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>ideal</name> <init>= <expr><call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_path_change_t</name> *</type><name>change</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>txn_id</name></expr></argument>, <argument><expr>"0"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>change</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>change</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>change</name>-&gt;<name>node_rev_id</name></name> = <call><name>svn_fs_parse_id</name><argument_list>(<argument><expr>"1.0.0"</expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>change</name>-&gt;<name>change_kind</name></name> = <name>svn_fs_path_change_add</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>change</name>-&gt;<name>text_mod</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>change</name>-&gt;<name>prop_mod</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>ideal</name></expr></argument>, <argument><expr>"/foo"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>change</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>change</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>change</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>change</name>-&gt;<name>node_rev_id</name></name> = <call><name>svn_fs_parse_id</name><argument_list>(<argument><expr>"2.0.0"</expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>change</name>-&gt;<name>change_kind</name></name> = <name>svn_fs_path_change_add</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>change</name>-&gt;<name>text_mod</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>change</name>-&gt;<name>prop_mod</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>ideal</name></expr></argument>, <argument><expr>"/bar"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>change</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>change</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>change</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>change</name>-&gt;<name>node_rev_id</name></name> = <call><name>svn_fs_parse_id</name><argument_list>(<argument><expr>"3.0.0"</expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>change</name>-&gt;<name>change_kind</name></name> = <name>svn_fs_path_change_add</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>change</name>-&gt;<name>text_mod</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>change</name>-&gt;<name>prop_mod</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>ideal</name></expr></argument>, <argument><expr>"/baz"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>change</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>txn_id</name></expr></argument>, <argument><expr>"1"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>change</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>change</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>change</name>-&gt;<name>node_rev_id</name></name> = <call><name>svn_fs_parse_id</name><argument_list>(<argument><expr>"1.0.1"</expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>change</name>-&gt;<name>change_kind</name></name> = <name>svn_fs_path_change_modify</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>change</name>-&gt;<name>text_mod</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>change</name>-&gt;<name>prop_mod</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>ideal</name></expr></argument>, <argument><expr>"/foo"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>change</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>txn_id</name></expr></argument>, <argument><expr>"2"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>change</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>change</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>change</name>-&gt;<name>node_rev_id</name></name> = <call><name>svn_fs_parse_id</name><argument_list>(<argument><expr>"1.0.2"</expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>change</name>-&gt;<name>change_kind</name></name> = <name>svn_fs_path_change_modify</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>change</name>-&gt;<name>text_mod</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>change</name>-&gt;<name>prop_mod</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>ideal</name></expr></argument>, <argument><expr>"/foo"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>change</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>change</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>change</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>change</name>-&gt;<name>node_rev_id</name></name> = <call><name>svn_fs_parse_id</name><argument_list>(<argument><expr>"2.0.2"</expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>change</name>-&gt;<name>change_kind</name></name> = <name>svn_fs_path_change_modify</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>change</name>-&gt;<name>text_mod</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>change</name>-&gt;<name>prop_mod</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>ideal</name></expr></argument>, <argument><expr>"/bar"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>change</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>txn_id</name></expr></argument>, <argument><expr>"3"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>change</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>change</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>change</name>-&gt;<name>node_rev_id</name></name> = <call><name>svn_fs_parse_id</name><argument_list>(<argument><expr>"3.0.3"</expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>change</name>-&gt;<name>change_kind</name></name> = <name>svn_fs_path_change_modify</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>change</name>-&gt;<name>text_mod</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>change</name>-&gt;<name>prop_mod</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>ideal</name></expr></argument>, <argument><expr>"/baz"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>change</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>txn_id</name></expr></argument>, <argument><expr>"4"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>change</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>change</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>change</name>-&gt;<name>node_rev_id</name></name> = <call><name>svn_fs_parse_id</name><argument_list>(<argument><expr>"4.0.4"</expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>change</name>-&gt;<name>change_kind</name></name> = <name>svn_fs_path_change_add</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>change</name>-&gt;<name>text_mod</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>change</name>-&gt;<name>prop_mod</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>ideal</name></expr></argument>, <argument><expr>"/fob"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>change</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>txn_id</name></expr></argument>, <argument><expr>"5"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>change</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>change</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>change</name>-&gt;<name>node_rev_id</name></name> = <call><name>svn_fs_parse_id</name><argument_list>(<argument><expr>"5.0.5"</expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>change</name>-&gt;<name>change_kind</name></name> = <name>svn_fs_path_change_replace</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>change</name>-&gt;<name>text_mod</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>change</name>-&gt;<name>prop_mod</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>ideal</name></expr></argument>, <argument><expr>"/baz"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>change</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>txn_id</name></expr></argument>, <argument><expr>"6"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>change</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>change</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>change</name>-&gt;<name>node_rev_id</name></name> = <call><name>svn_fs_parse_id</name><argument_list>(<argument><expr>"4.0.6"</expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>change</name>-&gt;<name>change_kind</name></name> = <name>svn_fs_path_change_modify</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>change</name>-&gt;<name>text_mod</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>change</name>-&gt;<name>prop_mod</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>ideal</name></expr></argument>, <argument><expr>"/fob"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>change</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>ideal</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>compare_changes</name><parameter_list>(<param><decl><type><name>apr_hash_t</name> *</type><name>ideals</name></decl></param>,
<param><decl><type><name>apr_hash_t</name> *</type><name>changes</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_id</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>ideals</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_path_change_t</name> *</type><name>ideal_change</name></decl>, *<decl><type ref="prev"/><name>change</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> = (const <name>char</name> *) <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ideal_change</name> = <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name>change</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>changes</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>change</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"missing expected change for path '%s' in txn_id '%s'"</expr></argument>,
<argument><expr><name>path</name></expr></argument>, <argument><expr><name>txn_id</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>svn_fs_compare_ids</name><argument_list>(<argument><expr><name><name>change</name>-&gt;<name>node_rev_id</name></name></expr></argument>,
<argument><expr><name><name>ideal_change</name>-&gt;<name>node_rev_id</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"node revision ids differ in change for key '%s'"</expr></argument>, <argument><expr><name>txn_id</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>change</name>-&gt;<name>change_kind</name></name> != <name><name>ideal_change</name>-&gt;<name>change_kind</name></name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"change kinds differ in change for key '%s'"</expr></argument>, <argument><expr><name>txn_id</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>change</name>-&gt;<name>text_mod</name></name> != <name><name>ideal_change</name>-&gt;<name>text_mod</name></name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"change text-mod bits differ in change for key '%s'"</expr></argument>, <argument><expr><name>txn_id</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>change</name>-&gt;<name>prop_mod</name></name> != <name><name>ideal_change</name>-&gt;<name>prop_mod</name></name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"change prop-mod bits differ in change for key '%s'"</expr></argument>, <argument><expr><name>txn_id</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></for>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>changes_fetch</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_txns</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>standard_txns</name></expr></argument>)</argument_list></sizeof> / <sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>changes_args</name></type> <name>args</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "fetch compressed changes from the changes table"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name><argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-changes-fetch"</expr></argument>,
<argument><expr>"bdb"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>.<name>fs</name></name> = <name>fs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>.<name>key</name></name> = "blahbliggityblah"</expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__retry_txn</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>txn_body_changes_fetch</name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(! <name><name>args</name>.<name>changes</name></name>) || (<call><name>apr_hash_count</name><argument_list>(<argument><expr><name><name>args</name>.<name>changes</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"expected empty changes hash"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>add_standard_changes</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>num_txns</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_id</name> <init>= <expr><name><name>standard_txns</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>ideals</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ideals</name> = <call><name>get_ideal_changes</name><argument_list>(<argument><expr><name>txn_id</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>.<name>fs</name></name> = <name>fs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>.<name>key</name></name> = <name>txn_id</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__retry_txn</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>txn_body_changes_fetch</name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name><name>args</name>.<name>changes</name></name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"got no changes for key '%s'"</expr></argument>, <argument><expr><name>txn_id</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>apr_hash_count</name><argument_list>(<argument><expr><name>ideals</name></expr></argument>)</argument_list></call> != <call><name>apr_hash_count</name><argument_list>(<argument><expr><name><name>args</name>.<name>changes</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"unexpected number of changes for key '%s'"</expr></argument>, <argument><expr><name>txn_id</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>compare_changes</name><argument_list>(<argument><expr><name>ideals</name></expr></argument>, <argument><expr><name><name>args</name>.<name>changes</name></name></expr></argument>, <argument><expr><name>opts</name></expr></argument>, <argument><expr><name>txn_id</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>changes_fetch_ordering</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>svn_fs_t</name> *</type><name>fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_revnum_t</name></type> <name>youngest_rev</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>txn_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_txn_t</name> *</type><name>txn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_root_t</name> *</type><name>txn_root</name></decl>, *<decl><type ref="prev"/><name>rev_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>changes_args</name></type> <name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>subpool</name> <init>= <expr><call><name>svn_pool_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "verify ordered-ness of fetched compressed changes"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__create_fs</name>
<argument_list>(<argument><expr>&amp;<name>fs</name></expr></argument>, <argument><expr>"test-repo-changes-fetch-ordering"</expr></argument>,
<argument><expr>"bdb"</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__txn_script_command_t</name></type> <name><name>script_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>'a'</expr>, <expr>"dir1"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>'a'</expr>, <expr>"file1"</expr>, <expr>"This is the file 'file1'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>'a'</expr>, <expr>"dir1/file2"</expr>, <expr>"This is the file 'file2'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>'a'</expr>, <expr>"dir1/file3"</expr>, <expr>"This is the file 'file3'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>'a'</expr>, <expr>"dir1/file4"</expr>, <expr>"This is the file 'file4'.\n"</expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__txn_script_exec</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>script_entries</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_name</name><argument_list>(<argument><expr>&amp;<name>txn_name</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__txn_script_command_t</name></type> <name><name>script_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>'d'</expr>, <expr>"file1"</expr>, <expr>"This is the file 'file1'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>'d'</expr>, <expr>"dir1/file2"</expr>, <expr>"This is the file 'file2'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>'d'</expr>, <expr>"dir1/file3"</expr>, <expr>"This is the file 'file3'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>'a'</expr>, <expr>"dir1/file5"</expr>, <expr>"This is the file 'file4'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>'a'</expr>, <expr>"dir1/dir2"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>'d'</expr>, <expr>"dir1"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>'a'</expr>, <expr>"dir3"</expr>, <expr>0</expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__txn_script_exec</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>script_entries</name></expr></argument>, <argument><expr>7</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>.<name>fs</name></name> = <name>fs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>.<name>key</name></name> = <name>txn_name</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__retry_txn</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>txn_body_changes_fetch</name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(! <name><name>args</name>.<name>changes</name></name>) || (<call><name>apr_hash_count</name><argument_list>(<argument><expr><name><name>args</name>.<name>changes</name></name></expr></argument>)</argument_list></call> != 3)</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"expected changes"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><name><name>args</name>.<name>changes</name></name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_path_change_t</name> *</type><name>change</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>change</name> = <name>val</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name><name>change</name>-&gt;<name>change_kind</name></name> == <name>svn_fs_path_change_add</name>)
&amp;&amp; (<call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"/dir3"</expr></argument>)</argument_list></call> == 0)</expr>)</condition><then>
<empty_stmt>;</empty_stmt></then>
<else>else <if>if <condition>(<expr>(<name><name>change</name>-&gt;<name>change_kind</name></name> == <name>svn_fs_path_change_delete</name>)
&amp;&amp; ((<call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"/dir1"</expr></argument>)</argument_list></call> == 0)
|| (<call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"/file1"</expr></argument>)</argument_list></call> == 0))</expr>)</condition><then>
<empty_stmt>;</empty_stmt></then>
<else>else
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"got wrong changes"</expr></argument>)</argument_list></call></expr>;</return></else></if></else></if>
}</block></for>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__txn_script_command_t</name></type> <name><name>script_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>'a'</expr>, <expr>"dir1"</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>'a'</expr>, <expr>"file1"</expr>, <expr>"This is the file 'file1'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>'a'</expr>, <expr>"dir1/file2"</expr>, <expr>"This is the file 'file2'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>'a'</expr>, <expr>"dir1/file3"</expr>, <expr>"This is the file 'file3'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>'a'</expr>, <expr>"dir1/file4"</expr>, <expr>"This is the file 'file4'.\n"</expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__txn_script_exec</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>script_entries</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_begin_txn</name><argument_list>(<argument><expr>&amp;<name>txn</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr><name>youngest_rev</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_name</name><argument_list>(<argument><expr>&amp;<name>txn_name</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_txn_root</name><argument_list>(<argument><expr>&amp;<name>txn_root</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_revision_root</name><argument_list>(<argument><expr>&amp;<name>rev_root</name></expr></argument>, <argument><expr><name>fs</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>svn_test__txn_script_command_t</name></type> <name><name>script_entries</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>'d'</expr>, <expr>"file1"</expr>, <expr>"This is the file 'file1'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>'d'</expr>, <expr>"dir1/file2"</expr>, <expr>"This is the file 'file2'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>'d'</expr>, <expr>"dir1/file3"</expr>, <expr>"This is the file 'file3'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>'a'</expr>, <expr>"dir1/file5"</expr>, <expr>"This is the file 'file4'.\n"</expr> }</block></expr>,
<expr><block>{ <expr>'a'</expr>, <expr>"dir1/dir2"</expr>, <expr>0</expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_test__txn_script_exec</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr><name>script_entries</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_copy</name><argument_list>(<argument><expr><name>rev_root</name></expr></argument>, <argument><expr>"dir1"</expr></argument>, <argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"dir1"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_make_dir</name><argument_list>(<argument><expr><name>txn_root</name></expr></argument>, <argument><expr>"dir4"</expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_commit_txn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>youngest_rev</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>svn_pool_clear</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>.<name>fs</name></name> = <name>fs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>args</name>.<name>key</name></name> = <name>txn_name</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_fs_base__retry_txn</name><argument_list>(<argument><expr><name>fs</name></expr></argument>, <argument><expr><name>txn_body_changes_fetch</name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>,
<argument><expr><name>subpool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(! <name><name>args</name>.<name>changes</name></name>) || (<call><name>apr_hash_count</name><argument_list>(<argument><expr><name><name>args</name>.<name>changes</name></name></expr></argument>)</argument_list></call> != 3)</expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"expected changes"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>subpool</name></expr></argument>, <argument><expr><name><name>args</name>.<name>changes</name></name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_fs_path_change_t</name> *</type><name>change</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>change</name> = <name>val</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name><name>change</name>-&gt;<name>change_kind</name></name> == <name>svn_fs_path_change_add</name>)
&amp;&amp; (<call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"/dir4"</expr></argument>)</argument_list></call> == 0)</expr>)</condition><then>
<empty_stmt>;</empty_stmt></then>
<else>else <if>if <condition>(<expr>(<name><name>change</name>-&gt;<name>change_kind</name></name> == <name>svn_fs_path_change_replace</name>)
&amp;&amp; (<call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"/dir1"</expr></argument>)</argument_list></call> == 0)</expr>)</condition><then>
<empty_stmt>;</empty_stmt></then>
<else>else <if>if <condition>(<expr>(<name><name>change</name>-&gt;<name>change_kind</name></name> == <name>svn_fs_path_change_delete</name>)
&amp;&amp; (<call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"/file1"</expr></argument>)</argument_list></call> == 0)</expr>)</condition><then>
<empty_stmt>;</empty_stmt></then>
<else>else
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"got wrong changes"</expr></argument>)</argument_list></call></expr>;</return></else></if></else></if></else></if>
}</block></for>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type>struct <name>svn_test_descriptor_t</name></type> <name><name>test_funcs</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>SVN_TEST_NULL</name></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>changes_add</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>changes_fetch_raw</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>changes_delete</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>changes_fetch</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>changes_fetch_ordering</name></expr></argument>)</argument_list></call></expr>,
<expr><name>SVN_TEST_NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
</unit>
