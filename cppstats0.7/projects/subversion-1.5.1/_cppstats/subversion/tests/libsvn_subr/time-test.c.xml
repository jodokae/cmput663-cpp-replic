<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/subversion-1.5.1/_cppstats/subversion/tests/libsvn_subr/time-test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_general.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"svn_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../svn_test.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>test_timestamp</name> <init>= <expr><call><name>APR_TIME_C</name><argument_list>(<argument><expr>1021316450966679</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>test_timestring</name> <init>=
<expr>"2002-05-13T19:00:50.966679Z"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>test_old_timestring</name> <init>=
<expr>"Mon 13 May 2002 22:00:50.966679 (day 133, dst 1, gmt_off 010800)"</expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_time_to_cstring</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>timestring</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "test svn_time_to_cstring"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>timestring</name> = <call><name>svn_time_to_cstring</name><argument_list>(<argument><expr><name>test_timestamp</name></expr></argument>,<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>timestring</name></expr></argument>,<argument><expr><name>test_timestring</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"svn_time_to_cstring (%" <name>APR_TIME_T_FMT</name>
") returned date string '%s' instead of '%s'"</expr></argument>,
<argument><expr><name>test_timestamp</name></expr></argument>,<argument><expr><name>timestring</name></expr></argument>,<argument><expr><name>test_timestring</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_time_from_cstring</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>timestamp</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "test svn_time_from_cstring"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_time_from_cstring</name><argument_list>(<argument><expr>&amp;<name>timestamp</name></expr></argument>, <argument><expr><name>test_timestring</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>timestamp</name> != <name>test_timestamp</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"svn_time_from_cstring (%s) returned time '%" <name>APR_TIME_T_FMT</name>
"' instead of '%" <name>APR_TIME_T_FMT</name> "'"</expr></argument>,
<argument><expr><name>test_timestring</name></expr></argument>,<argument><expr><name>timestamp</name></expr></argument>,<argument><expr><name>test_timestamp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name><name>failure_old_tests</name><index>[]</index></name> <init>= <expr><block>{
<expr>"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
" 3 Oct 2000 HH:MM:SS.UUU (day 277, dst 1, gmt_off -18000)"</expr>,
<expr>"Tue 3 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
" 2000 HH:MM:SS.UUU (day 277, dst 1, gmt_off -18000)"</expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_time_from_cstring_old</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>timestamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>ft</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "test svn_time_from_cstring (old format)"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_time_from_cstring</name><argument_list>(<argument><expr>&amp;<name>timestamp</name></expr></argument>, <argument><expr><name>test_old_timestring</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>timestamp</name> != <name>test_timestamp</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"svn_time_from_cstring (%s) returned time '%" <name>APR_TIME_T_FMT</name>
"' instead of '%" <name>APR_TIME_T_FMT</name> "'"</expr></argument>,
<argument><expr><name>test_old_timestring</name></expr></argument>,<argument><expr><name>timestamp</name></expr></argument>,<argument><expr><name>test_timestamp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>ft</name> = <name>failure_old_tests</name></expr>;</init> <condition><expr>*<name>ft</name></expr>;</condition> <incr><expr><name>ft</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>svn_error_t</name> *</type><name>err</name> <init>= <expr><call><name>svn_time_from_cstring</name><argument_list>(<argument><expr>&amp;<name>timestamp</name></expr></argument>, <argument><expr>*<name>ft</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>! <name>err</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"svn_time_from_cstring (%s) succeeded when it should have failed"</expr></argument>,
<argument><expr>*<name>ft</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>svn_error_clear</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_time_invariant</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>current_timestamp</name> <init>= <expr><call><name>apr_time_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>timestring</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>timestamp</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "test svn_time_[to/from]_cstring() invariant"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>timestring</name> = <call><name>svn_time_to_cstring</name><argument_list>(<argument><expr><name>current_timestamp</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_time_from_cstring</name><argument_list>(<argument><expr>&amp;<name>timestamp</name></expr></argument>, <argument><expr><name>timestring</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>timestamp</name> != <name>current_timestamp</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"svn_time_from_cstring ( svn_time_to_cstring (n) ) returned time '%"
<name>APR_TIME_T_FMT</name>
"' instead of '%" <name>APR_TIME_T_FMT</name> "'"</expr></argument>,
<argument><expr><name>timestamp</name></expr></argument>,<argument><expr><name>current_timestamp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<struct>struct <name>date_test</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int32_t</name></type> <name>year</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int32_t</name></type> <name>mon</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int32_t</name></type> <name>mday</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int32_t</name></type> <name>hour</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int32_t</name></type> <name>min</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int32_t</name></type> <name>sec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int32_t</name></type> <name>usec</name></decl>;</decl_stmt>
}</block>;</struct>
<decl_stmt><decl><type><specifier>static</specifier> struct <name>date_test</name></type> <name><name>localtz_tests</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"2013-01-25"</expr>, <expr>2013</expr>, <expr>1</expr>, <expr>25</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"2013-1-25"</expr>, <expr>2013</expr>, <expr>1</expr>, <expr>25</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"2013-01-2"</expr>, <expr>2013</expr>, <expr>1</expr>, <expr>2</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"2015-04-26T00:01:59.652655"</expr>, <expr>2015</expr>, <expr>4</expr>, <expr>26</expr>, <expr>0</expr>, <expr>1</expr>, <expr>59</expr>, <expr>652655</expr> }</block></expr>,
<expr><block>{ <expr>"2034-07-20T17:03:36.11379"</expr>, <expr>2034</expr>, <expr>7</expr>, <expr>20</expr>, <expr>17</expr>, <expr>3</expr>, <expr>36</expr>, <expr>113790</expr> }</block></expr>,
<expr><block>{ <expr>"1975-10-29T17:23:56.3859"</expr>, <expr>1975</expr>, <expr>10</expr>, <expr>29</expr>, <expr>17</expr>, <expr>23</expr>, <expr>56</expr>, <expr>385900</expr> }</block></expr>,
<expr><block>{ <expr>"2024-06-08T13:06:14.897"</expr>, <expr>2024</expr>, <expr>6</expr>, <expr>8</expr>, <expr>13</expr>, <expr>6</expr>, <expr>14</expr>, <expr>897000</expr> }</block></expr>,
<expr><block>{ <expr>"2000-01-10T05:11:11.65"</expr>, <expr>2000</expr>, <expr>1</expr>, <expr>10</expr>, <expr>5</expr>, <expr>11</expr>, <expr>11</expr>, <expr>650000</expr> }</block></expr>,
<expr><block>{ <expr>"2017-01-28T07:21:13.2"</expr>, <expr>2017</expr>, <expr>1</expr>, <expr>28</expr>, <expr>7</expr>, <expr>21</expr>, <expr>13</expr>, <expr>200000</expr> }</block></expr>,
<expr><block>{ <expr>"2013-05-18T13:52:49"</expr>, <expr>2013</expr>, <expr>5</expr>, <expr>18</expr>, <expr>13</expr>, <expr>52</expr>, <expr>49</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"2020-05-14T15:28"</expr>, <expr>2020</expr>, <expr>5</expr>, <expr>14</expr>, <expr>15</expr>, <expr>28</expr>, <expr>0</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"2032-05-14T7:28"</expr>, <expr>2032</expr>, <expr>5</expr>, <expr>14</expr>, <expr>7</expr>, <expr>28</expr>, <expr>0</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"2020-5-14T15:28"</expr>, <expr>2020</expr>, <expr>5</expr>, <expr>14</expr>, <expr>15</expr>, <expr>28</expr>, <expr>0</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"2020-05-1T15:28"</expr>, <expr>2020</expr>, <expr>5</expr>, <expr>1</expr>, <expr>15</expr>, <expr>28</expr>, <expr>0</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"20100226"</expr>, <expr>2010</expr>, <expr>2</expr>, <expr>26</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"19860214T050745.6"</expr>, <expr>1986</expr>, <expr>2</expr>, <expr>14</expr>, <expr>5</expr>, <expr>7</expr>, <expr>45</expr>, <expr>600000</expr> }</block></expr>,
<expr><block>{ <expr>"20230219T0045"</expr>, <expr>2023</expr>, <expr>2</expr>, <expr>19</expr>, <expr>0</expr>, <expr>45</expr>, <expr>0</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"1975-07-11 06:31:49.749504"</expr>, <expr>1975</expr>, <expr>7</expr>, <expr>11</expr>, <expr>6</expr>, <expr>31</expr>, <expr>49</expr>, <expr>749504</expr> }</block></expr>,
<expr><block>{ <expr>"2037-05-06 00:08"</expr>, <expr>2037</expr>, <expr>5</expr>, <expr>6</expr>, <expr>0</expr>, <expr>8</expr>, <expr>0</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"2037-5-6 7:01"</expr>, <expr>2037</expr>, <expr>5</expr>, <expr>6</expr>, <expr>7</expr>, <expr>1</expr>, <expr>0</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"1976-02-29"</expr>, <expr>1976</expr>, <expr>02</expr>, <expr>29</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"2000-02-29"</expr>, <expr>2000</expr>, <expr>02</expr>, <expr>29</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> struct <name>date_test</name></type> <name><name>gmt_tests</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"1979-05-05T15:16:04.39Z"</expr>, <expr>1979</expr>, <expr>5</expr>, <expr>5</expr>, <expr>15</expr>, <expr>16</expr>, <expr>4</expr>, <expr>390000</expr> }</block></expr>,
<expr><block>{ <expr>"2012-03-25T12:14Z"</expr>, <expr>2012</expr>, <expr>3</expr>, <expr>25</expr>, <expr>12</expr>, <expr>14</expr>, <expr>0</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"1991-09-13T20:13:01.12779+02:26"</expr>, <expr>1991</expr>, <expr>9</expr>, <expr>13</expr>, <expr>17</expr>, <expr>47</expr>, <expr>1</expr>, <expr>127790</expr> }</block></expr>,
<expr><block>{ <expr>"1971-07-20T06:11-10"</expr>, <expr>1971</expr>, <expr>7</expr>, <expr>20</expr>, <expr>16</expr>, <expr>11</expr>, <expr>0</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"20010808T105155.527Z"</expr>, <expr>2001</expr>, <expr>8</expr>, <expr>8</expr>, <expr>10</expr>, <expr>51</expr>, <expr>55</expr>, <expr>527000</expr> }</block></expr>,
<expr><block>{ <expr>"19781204T1322Z"</expr>, <expr>1978</expr>, <expr>12</expr>, <expr>4</expr>, <expr>13</expr>, <expr>22</expr>, <expr>0</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"20030930T001647.8008-0230"</expr>, <expr>2003</expr>, <expr>9</expr>, <expr>30</expr>, <expr>2</expr>, <expr>46</expr>, <expr>47</expr>, <expr>800800</expr> }</block></expr>,
<expr><block>{ <expr>"19810526T1705+22"</expr>, <expr>1981</expr>, <expr>5</expr>, <expr>25</expr>, <expr>19</expr>, <expr>5</expr>, <expr>0</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"2024-06-02 11:30:36 +08"</expr>, <expr>2024</expr>, <expr>6</expr>, <expr>2</expr>, <expr>3</expr>, <expr>30</expr>, <expr>36</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr>"1994-10-07 08:08 -1457"</expr>, <expr>1994</expr>, <expr>10</expr>, <expr>07</expr>, <expr>23</expr>, <expr>5</expr>, <expr>0</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> struct <name>date_test</name></type> <name><name>daytime_tests</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"00:54:15.46"</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>54</expr>, <expr>15</expr>, <expr>460000</expr> }</block></expr>,
<expr><block>{ <expr>"18:21"</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>18</expr>, <expr>21</expr>, <expr>0</expr>, <expr>0</expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name><name>failure_tests</name><index>[]</index></name> <init>= <expr><block>{
<expr>"2000-00-02"</expr>,
<expr>"2000-13-02"</expr>,
<expr>"2000-01-32"</expr>,
<expr>"2000-01-00"</expr>,
<expr>"1999-02-29"</expr>,
<expr>"2000-01-01 24:00:00"</expr>,
<expr>"2000-01-01 00:60:00"</expr>,
<expr>"2000-01-01 00:00:61"</expr>,
<expr>"2000-01-01+24:00"</expr>,
<expr>"2000-01-01-02:60"</expr>,
<expr>"2000-01-01Z"</expr>,
<expr>"2000-01-01+01:00"</expr>,
<expr>"20000101Z"</expr>,
<expr>"20000101-0100"</expr>,
<expr>"2000-01-01T10"</expr>,
<expr>"20000101T10"</expr>,
<expr>"2000-01-01 10"</expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>compare_results</name><parameter_list>(<param><decl><type>struct <name>date_test</name> *</type><name>dt</name></decl></param>,
<param><decl><type><name>apr_time_exp_t</name> *</type><name>expt</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>expt</name>-&gt;<name>tm_year</name></name> + 1900 != <name><name>dt</name>-&gt;<name>year</name></name> || <name><name>expt</name>-&gt;<name>tm_mon</name></name> + 1 != <name><name>dt</name>-&gt;<name>mon</name></name>
|| <name><name>expt</name>-&gt;<name>tm_mday</name></name> != <name><name>dt</name>-&gt;<name>mday</name></name> || <name><name>expt</name>-&gt;<name>tm_hour</name></name> != <name><name>dt</name>-&gt;<name>hour</name></name>
|| <name><name>expt</name>-&gt;<name>tm_min</name></name> != <name><name>dt</name>-&gt;<name>min</name></name> || <name><name>expt</name>-&gt;<name>tm_sec</name></name> != <name><name>dt</name>-&gt;<name>sec</name></name>
|| <name><name>expt</name>-&gt;<name>tm_usec</name></name> != <name><name>dt</name>-&gt;<name>usec</name></name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"Comparison failed for '%s'"</expr></argument>, <argument><expr><name><name>dt</name>-&gt;<name>str</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>svn_error_t</name> *</type>
<name>test_parse_date</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>msg</name></decl></param>,
<param><decl><type><name>svn_boolean_t</name></type> <name>msg_only</name></decl></param>,
<param><decl><type><name>svn_test_opts_t</name> *</type><name>opts</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>now</name></decl>, <decl><type ref="prev"/><name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_exp_t</name></type> <name>nowexp</name></decl>, <decl><type ref="prev"/><name>expt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>svn_boolean_t</name></type> <name>matched</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>date_test</name> *</type><name>dt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>ft</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>msg</name> = "test svn_parse_date"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>msg_only</name></expr>)</condition><then>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return></then></if>
<expr_stmt><expr><name>now</name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_time_exp_lt</name><argument_list>(<argument><expr>&amp;<name>nowexp</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_create</name><argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"Can't expand time"</expr></argument>)</argument_list></call></expr>;</return></then></if>
<for>for (<init><expr><name>dt</name> = <name>localtz_tests</name></expr>;</init> <condition><expr><name><name>dt</name>-&gt;<name>str</name></name></expr>;</condition> <incr><expr><name>dt</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_parse_date</name><argument_list>(<argument><expr>&amp;<name>matched</name></expr></argument>, <argument><expr>&amp;<name>result</name></expr></argument>, <argument><expr><name><name>dt</name>-&gt;<name>str</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>matched</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"Match failed for '%s'"</expr></argument>, <argument><expr><name><name>dt</name>-&gt;<name>str</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>apr_time_exp_lt</name><argument_list>(<argument><expr>&amp;<name>expt</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"Expand failed for '%s'"</expr></argument>, <argument><expr><name><name>dt</name>-&gt;<name>str</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>compare_results</name><argument_list>(<argument><expr><name>dt</name></expr></argument>, <argument><expr>&amp;<name>expt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<for>for (<init><expr><name>dt</name> = <name>gmt_tests</name></expr>;</init> <condition><expr><name><name>dt</name>-&gt;<name>str</name></name></expr>;</condition> <incr><expr><name>dt</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_parse_date</name><argument_list>(<argument><expr>&amp;<name>matched</name></expr></argument>, <argument><expr>&amp;<name>result</name></expr></argument>, <argument><expr><name><name>dt</name>-&gt;<name>str</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>matched</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"Match failed for '%s'"</expr></argument>, <argument><expr><name><name>dt</name>-&gt;<name>str</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>apr_time_exp_gmt</name><argument_list>(<argument><expr>&amp;<name>expt</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"Expand failed for '%s'"</expr></argument>, <argument><expr><name><name>dt</name>-&gt;<name>str</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>compare_results</name><argument_list>(<argument><expr><name>dt</name></expr></argument>, <argument><expr>&amp;<name>expt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<for>for (<init><expr><name>dt</name> = <name>daytime_tests</name></expr>;</init> <condition><expr><name><name>dt</name>-&gt;<name>str</name></name></expr>;</condition> <incr><expr><name>dt</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_parse_date</name><argument_list>(<argument><expr>&amp;<name>matched</name></expr></argument>, <argument><expr>&amp;<name>result</name></expr></argument>, <argument><expr><name><name>dt</name>-&gt;<name>str</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>matched</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"Match failed for '%s'"</expr></argument>, <argument><expr><name><name>dt</name>-&gt;<name>str</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>apr_time_exp_lt</name><argument_list>(<argument><expr>&amp;<name>expt</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"Expand failed for '%s'"</expr></argument>, <argument><expr><name><name>dt</name>-&gt;<name>str</name></name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name><name>dt</name>-&gt;<name>year</name></name> = <name><name>nowexp</name>.<name>tm_year</name></name> + 1900</expr>;</expr_stmt>
<expr_stmt><expr><name><name>dt</name>-&gt;<name>mon</name></name> = <name><name>nowexp</name>.<name>tm_mon</name></name> + 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>dt</name>-&gt;<name>mday</name></name> = <name><name>nowexp</name>.<name>tm_mday</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>compare_results</name><argument_list>(<argument><expr><name>dt</name></expr></argument>, <argument><expr>&amp;<name>expt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<for>for (<init><expr><name>ft</name> = <name>failure_tests</name></expr>;</init> <condition><expr>*<name>ft</name></expr>;</condition> <incr><expr><name>ft</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>SVN_ERR</name><argument_list>(<argument><expr><call><name>svn_parse_date</name><argument_list>(<argument><expr>&amp;<name>matched</name></expr></argument>, <argument><expr>&amp;<name>result</name></expr></argument>, <argument><expr>*<name>ft</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>matched</name></expr>)</condition><then>
<return>return <expr><call><name>svn_error_createf</name>
<argument_list>(<argument><expr><name>SVN_ERR_TEST_FAILED</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"Match succeeded for '%s'"</expr></argument>, <argument><expr>*<name>ft</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></for>
<return>return <expr><name>SVN_NO_ERROR</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type>struct <name>svn_test_descriptor_t</name></type> <name><name>test_funcs</name><index>[]</index></name> <init>= <expr><block>{
<expr><name>SVN_TEST_NULL</name></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>test_time_to_cstring</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>test_time_from_cstring</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>test_time_from_cstring_old</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>test_time_invariant</name></expr></argument>)</argument_list></call></expr>,
<expr><call><name>SVN_TEST_PASS</name><argument_list>(<argument><expr><name>test_parse_date</name></expr></argument>)</argument_list></call></expr>,
<expr><name>SVN_TEST_NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
</unit>
